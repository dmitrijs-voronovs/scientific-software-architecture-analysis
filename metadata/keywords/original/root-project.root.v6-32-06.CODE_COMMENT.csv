id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/.ci/get_solved_issues-github-actions.py:142,Deployability,release,release,142,"#! /usr/bin/env python; #; # Harvest the solved issues for a certain tag and print them out in a format; # which is ready to be pasted in the release notes.; #; # Copyright (c) 2024 Rene Brun and Fons Rademakers; # Author: Enrico Guiraud, Axel Naumann, Danilo Piparo",MatchSource.CODE_COMMENT,.ci/get_solved_issues-github-actions.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.ci/get_solved_issues-github-actions.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:174,Integrability,wrap,wrapper,174,"""""""This mainly functions as a shell script, but python is used for its; superior control flow. An important requirement of the CI is easily; reproducible builds, therefore a wrapper is made for running shell; commands so that they are also logged. The log is printed when build fails/succeeds and needs to perfectly; reproduce the build when pasted into a shell. Therefore all file system; modifying code not executed from shell needs a shell equivalent; explicitly appended to the shell log.; e.g. `os.chdir(x)` requires `cd x` to be appended to the shell log """"""",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_root.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:240,Testability,log,logged,240,"""""""This mainly functions as a shell script, but python is used for its; superior control flow. An important requirement of the CI is easily; reproducible builds, therefore a wrapper is made for running shell; commands so that they are also logged. The log is printed when build fails/succeeds and needs to perfectly; reproduce the build when pasted into a shell. Therefore all file system; modifying code not executed from shell needs a shell equivalent; explicitly appended to the shell log.; e.g. `os.chdir(x)` requires `cd x` to be appended to the shell log """"""",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_root.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:252,Testability,log,log,252,"""""""This mainly functions as a shell script, but python is used for its; superior control flow. An important requirement of the CI is easily; reproducible builds, therefore a wrapper is made for running shell; commands so that they are also logged. The log is printed when build fails/succeeds and needs to perfectly; reproduce the build when pasted into a shell. Therefore all file system; modifying code not executed from shell needs a shell equivalent; explicitly appended to the shell log.; e.g. `os.chdir(x)` requires `cd x` to be appended to the shell log """"""",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_root.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:488,Testability,log,log,488,"""""""This mainly functions as a shell script, but python is used for its; superior control flow. An important requirement of the CI is easily; reproducible builds, therefore a wrapper is made for running shell; commands so that they are also logged. The log is printed when build fails/succeeds and needs to perfectly; reproduce the build when pasted into a shell. Therefore all file system; modifying code not executed from shell needs a shell equivalent; explicitly appended to the shell log.; e.g. `os.chdir(x)` requires `cd x` to be appended to the shell log """"""",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_root.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:557,Testability,log,log,557,"""""""This mainly functions as a shell script, but python is used for its; superior control flow. An important requirement of the CI is easily; reproducible builds, therefore a wrapper is made for running shell; commands so that they are also logged. The log is printed when build fails/succeeds and needs to perfectly; reproduce the build when pasted into a shell. Therefore all file system; modifying code not executed from shell needs a shell equivalent; explicitly appended to the shell log.; e.g. `os.chdir(x)` requires `cd x` to be appended to the shell log """"""",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_root.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:11,Availability,down,downloads,11,"# Used for downloads",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_root.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:52,Modifiability,config,config,52,"# Load CMake options from .github/workflows/root-ci-config/buildconfig/[platform].txt",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_root.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:6,Security,hash,hash,6,"# The hash of the build option string is used to find existing artifacts; # with matching build options on s3 storage.",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_root.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:7,Testability,test,testing,7,"# Make testing of CI in forks not impact artifacts",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_root.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:113,Deployability,patch,patches,113,"# Build artifacts should only be uploaded for full builds, and only for; # ""official"" branches (master, v?-??-??-patches), i.e. not for pull_request; # We also want to upload any successful build, even if it fails testing; # later on.",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_root.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:214,Testability,test,testing,214,"# Build artifacts should only be uploaded for full builds, and only for; # ""official"" branches (master, v?-??-??-patches), i.e. not for pull_request; # We also want to upload any successful build, even if it fails testing; # later on.",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_root.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:59,Safety,safe,safe,59,"# runners should never have root permissions but be on the safe side",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_root.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:107,Deployability,release,release,107,"""""""; which cmake; cmake --version; which c++ || true; c++ --version || true; uname -a || true; cat /etc/os-release || true; sw_vers || true; uptime || true; df || true; """"""",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_root.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:47,Availability,failure,failures,47,"""""""; Just return the exit code in case of test failures instead of `die()`-ing; report test; failures in main().; """"""",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_root.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:93,Availability,failure,failures,93,"""""""; Just return the exit code in case of test failures instead of `die()`-ing; report test; failures in main().; """"""",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_root.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:42,Testability,test,test,42,"""""""; Just return the exit code in case of test failures instead of `die()`-ing; report test; failures in main().; """"""",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_root.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:87,Testability,test,test,87,"""""""; Just return the exit code in case of test failures instead of `die()`-ing; report test; failures in main().; """"""",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_root.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:21,Modifiability,config,config,21,"# Print CMake cached config",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_root.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:14,Performance,cache,cached,14,"# Print CMake cached config",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_root.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:40,Testability,log,log,40,"""""""; get_stdout_subprocess; execute and log a command.; capture the stdout, strip white space and return it; die in case of failed execution unless the error_message is empty.; """"""",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_root.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:66,Deployability,patch,patches,66,"# `current_head` is a well-known branch, e.g. master, or v6-28-00-patches. Use the matching branch; # upstream as the fork repository may be out-of-sync",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_root.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:8,Availability,error,error,8,"# Empty error means, ignore errors.",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_root.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:28,Availability,error,errors,28,"# Empty error means, ignore errors.",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_root.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_utils.py:10,Integrability,message,message,10,"""""""prints message using select graphic rendition, defaults to bold text; https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_(Select_Graphic_Rendition)_parameters""""""",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_utils.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_utils.py:52,Testability,log,log,52,"""""""Runs <command> in shell and appends <command> to log""""""",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_utils.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_utils.py:68,Testability,log,log,68,"""""""Runs <command> in shell, capture output and appends <command> to log""""""",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_utils.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_utils.py:138,Testability,log,log,138,"# Since we are capturing the result and using it in other command later,; # we don't need it for the reproducing steps.; # So no call to: log.add(command)",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_utils.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_utils.py:17,Security,hash,hash,17,"""""""Calculate the hash of the options string. If ""march=native"" is in the; list of options, make the preprocessor defines resulting from it part of; the hash.; """"""",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_utils.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_utils.py:152,Security,hash,hash,152,"""""""Calculate the hash of the options string. If ""march=native"" is in the; list of options, make the preprocessor defines resulting from it part of; the hash.; """"""",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_utils.py
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_utils.py:93,Availability,down,downloaded,93,"""""""Downloads latest build artifact starting with <prefix>,; and returns the file path to the downloaded file and shell_log.""""""",MatchSource.CODE_COMMENT,.github/workflows/root-ci-config/build_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/ComputationGraphGenerator.py:451,Safety,avoid,avoid,451,"""""""; The Snapshot operation can be made lazy by supplying an RSnapshotOptions; object with the 'fLazy' data member set to 'True'. Furthermore, the current; range id needs to be appended to the input file name so that the output data; from different tasks can be distinguished. Note:; Since the file name from the original operation needs to be changed, this; function makes a deep copy of it and returns the modified copy. This is; needed in order to avoid that a task may receive as input an operation that; was previously modified by another task. In that case, the file name would; contain the range id from the other task, thus leading to create a wrong; file name in this function.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/ComputationGraphGenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/ComputationGraphGenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/ComputationGraphGenerator.py:55,Performance,perform,performed,55,"""""""; Retrieves the concrete RDataFrame operation to be performed by; querying the 'parent_rdf_node'. Forces lazyness on any operation, so; they can be all chained before triggering the actual computation. Returns; both the call to the RDataFrame operation and the operation itself, which; are then needed when creating the list of result promises to return from; the mapper task.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/ComputationGraphGenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/ComputationGraphGenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/ComputationGraphGenerator.py:250,Deployability,release,released,250,"""""""; Trigger the computation graph. The list of actions to be performed is retrieved by calling; generate_computation_graph. Afterwards, the C++ RDF computation graph is; triggered through the `ROOT::Internal::RDF::TriggerRun` function with; the GIL released. Args:; graph: A representation of the computation graph. starting_node: The node where the generation of the; computation graph is started. Either an actual RDataFrame or the; result of a Range operation (in case of empty data source). range_id: The id of the current range. Needed to assign a; file name to a partial Snapshot if it was requested. Returns:; list: A list of objects that can be either used as or converted into; mergeable values.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/ComputationGraphGenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/ComputationGraphGenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/ComputationGraphGenerator.py:62,Performance,perform,performed,62,"""""""; Trigger the computation graph. The list of actions to be performed is retrieved by calling; generate_computation_graph. Afterwards, the C++ RDF computation graph is; triggered through the `ROOT::Internal::RDF::TriggerRun` function with; the GIL released. Args:; graph: A representation of the computation graph. starting_node: The node where the generation of the; computation graph is started. Either an actual RDataFrame or the; result of a Range operation (in case of empty data source). range_id: The id of the current range. Needed to assign a; file name to a partial Snapshot if it was requested. Returns:; list: A list of objects that can be either used as or converted into; mergeable values.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/ComputationGraphGenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/ComputationGraphGenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/ComputationGraphGenerator.py:11,Performance,cache,cache,11,"# Fill the cache with the future results",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/ComputationGraphGenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/ComputationGraphGenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:585,Availability,down,down,585,"# It is important to have a double-ended queue because we need to; # traverse the nodes in different ways w.r.t. their insertion order.; # While pruning the graph, we need to check leaf nodes before their; # parents, so if a child is pruned then it also decrements the counter; # of children of its parent. Thus, we need a bottom-up traversal.; # While executing the graph in a task, we need to create the RDF nodes; # in the order the user requested them, e.g. starting from the; # RDataFrame itself, then calling its direct children, their children; # and so on. Thus, we need a top-down traversal.",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:41,Performance,queue,queue,41,"# It is important to have a double-ended queue because we need to; # traverse the nodes in different ways w.r.t. their insertion order.; # While pruning the graph, we need to check leaf nodes before their; # parents, so if a child is pruned then it also decrements the counter; # of children of its parent. Thus, we need a bottom-up traversal.; # While executing the graph in a task, we need to create the RDF nodes; # in the order the user requested them, e.g. starting from the; # RDataFrame itself, then calling its direct children, their children; # and so on. Thus, we need a top-down traversal.",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:184,Deployability,update,updated,184,"# Internal attribute to keep track of the number of partitions. We also; # check whether it was specified by the user when creating the dataframe.; # If so, this attribute will not be updated when triggering.",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:40,Security,expose,expose,40,"# Internal RDataFrame object, useful to expose information such as; # column names.",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:114,Safety,avoid,avoiding,114,"""""""; Remove the reference to the local RDataFrame object as soon as this; object is garbage collected. This helps avoiding conflicts between; the garbage collector, the cppyy memory regulator and the C++ object; destructor.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:52,Deployability,update,updated,52,"""""""; The number of partitions for this dataframe is updated only if the user; did not initially specify one when creating the dataframe.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:115,Energy Efficiency,schedul,scheduler,115,"""""""; Generates a dictionary holding information about all nodes in the graph.; It is then given to the distributed scheduler.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:562,Energy Efficiency,reduce,reduced,562,"""""""; Executes an RDataFrame computation graph on a distributed backend. The needed ingredients are:. - A collection of logical ranges in which the dataset is split. Each; range is going to be assigned to a distributed task.; - A representation of the computation graph that the task needs to; execute.; - A way to generate an RDataFrame instance starting from the logical; range of the task.; - Optionally, some setup code to be run at the beginning of each task. These are used as inputs to a generic mapper function. Results from the; various mappers are then reduced and the final results are retrieved in; the local session. These are properly handled to perform extra checks,; depending on the data source. Finally, the local user-facing nodes are; filled with the values that were computed distributedly so that they; can be accessed in the application like with local RDataFrame.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:682,Integrability,depend,depending,682,"""""""; Executes an RDataFrame computation graph on a distributed backend. The needed ingredients are:. - A collection of logical ranges in which the dataset is split. Each; range is going to be assigned to a distributed task.; - A representation of the computation graph that the task needs to; execute.; - A way to generate an RDataFrame instance starting from the logical; range of the task.; - Optionally, some setup code to be run at the beginning of each task. These are used as inputs to a generic mapper function. Results from the; various mappers are then reduced and the final results are retrieved in; the local session. These are properly handled to perform extra checks,; depending on the data source. Finally, the local user-facing nodes are; filled with the values that were computed distributedly so that they; can be accessed in the application like with local RDataFrame.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:659,Performance,perform,perform,659,"""""""; Executes an RDataFrame computation graph on a distributed backend. The needed ingredients are:. - A collection of logical ranges in which the dataset is split. Each; range is going to be assigned to a distributed task.; - A representation of the computation graph that the task needs to; execute.; - A way to generate an RDataFrame instance starting from the logical; range of the task.; - Optionally, some setup code to be run at the beginning of each task. These are used as inputs to a generic mapper function. Results from the; various mappers are then reduced and the final results are retrieved in; the local session. These are properly handled to perform extra checks,; depending on the data source. Finally, the local user-facing nodes are; filled with the values that were computed distributedly so that they; can be accessed in the application like with local RDataFrame.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:831,Security,access,accessed,831,"""""""; Executes an RDataFrame computation graph on a distributed backend. The needed ingredients are:. - A collection of logical ranges in which the dataset is split. Each; range is going to be assigned to a distributed task.; - A representation of the computation graph that the task needs to; execute.; - A way to generate an RDataFrame instance starting from the logical; range of the task.; - Optionally, some setup code to be run at the beginning of each task. These are used as inputs to a generic mapper function. Results from the; various mappers are then reduced and the final results are retrieved in; the local session. These are properly handled to perform extra checks,; depending on the data source. Finally, the local user-facing nodes are; filled with the values that were computed distributedly so that they; can be accessed in the application like with local RDataFrame.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:119,Testability,log,logical,119,"""""""; Executes an RDataFrame computation graph on a distributed backend. The needed ingredients are:. - A collection of logical ranges in which the dataset is split. Each; range is going to be assigned to a distributed task.; - A representation of the computation graph that the task needs to; execute.; - A way to generate an RDataFrame instance starting from the logical; range of the task.; - Optionally, some setup code to be run at the beginning of each task. These are used as inputs to a generic mapper function. Results from the; various mappers are then reduced and the final results are retrieved in; the local session. These are properly handled to perform extra checks,; depending on the data source. Finally, the local user-facing nodes are; filled with the values that were computed distributedly so that they; can be accessed in the application like with local RDataFrame.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:364,Testability,log,logical,364,"""""""; Executes an RDataFrame computation graph on a distributed backend. The needed ingredients are:. - A collection of logical ranges in which the dataset is split. Each; range is going to be assigned to a distributed task.; - A representation of the computation graph that the task needs to; execute.; - A way to generate an RDataFrame instance starting from the logical; range of the task.; - Optionally, some setup code to be run at the beginning of each task. These are used as inputs to a generic mapper function. Results from the; various mappers are then reduced and the final results are retrieved in; the local session. These are properly handled to perform extra checks,; depending on the data source. Finally, the local user-facing nodes are; filled with the values that were computed distributedly so that they; can be accessed in the application like with local RDataFrame.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:255,Availability,avail,available,255,"# Updates the number of partitions for this dataframe if the user did; # not specify one initially. This is done each time the computations are; # triggered, in case the user changed the resource configuration; # between runs (e.g. changing the number of available cores).",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:196,Deployability,configurat,configuration,196,"# Updates the number of partitions for this dataframe if the user did; # not specify one initially. This is done each time the computations are; # triggered, in case the user changed the resource configuration; # between runs (e.g. changing the number of available cores).",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:196,Modifiability,config,configuration,196,"# Updates the number of partitions for this dataframe if the user did; # not specify one initially. This is done each time the computations are; # triggered, in case the user changed the resource configuration; # between runs (e.g. changing the number of available cores).",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:51,Performance,cache,caches,51,"# Cleanup the current execution artifacts from the caches on the workers",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:87,Integrability,depend,depending,87,"""""""; A factory for different kinds of head nodes of the RDataFrame computation; graph, depending on the arguments to the RDataFrame constructor. Parses the; arguments and compares them against the possible RDataFrame constructors.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:113,Availability,robust,robust,113,"# TODO: This shouldn't be triggered if entries == 1. The current minimum; # amount of partitions is 2. We need a robust reducer that smartly; # becomes no-op if npartitions == 1 to avoid this.",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:120,Energy Efficiency,reduce,reducer,120,"# TODO: This shouldn't be triggered if entries == 1. The current minimum; # amount of partitions is 2. We need a robust reducer that smartly; # becomes no-op if npartitions == 1 to avoid this.",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:181,Safety,avoid,avoid,181,"# TODO: This shouldn't be triggered if entries == 1. The current minimum; # amount of partitions is 2. We need a robust reducer that smartly; # becomes no-op if npartitions == 1 to avoid this.",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:354,Testability,log,logging,354,"# Compute clusters and entries of the first tree in the dataset.; # This will call once TFile::Open, but we pay this cost to get an estimate; # on whether the number of requested partitions is reasonable.; # Depending on the cluster setup, this may still be quite costly, so; # we decide to pay the price only if the user explicitly requested; # warning logging.",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:117,Performance,cache,cache,117,"""""""; Adds info about friend trees to the input chain. Also aligns the; starting and ending entry of the friend chain cache to those of the; main chain.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:11,Performance,cache,cache,11,"# Fill the cache with the new RDataFrame",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:354,Testability,log,logging,354,"# Compute clusters and entries of the first tree in the dataset.; # This will call once TFile::Open, but we pay this cost to get an estimate; # on whether the number of requested partitions is reasonable.; # Depending on the cluster setup, this may still be quite costly, so; # we decide to pay the price only if the user explicitly requested; # warning logging.",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:117,Performance,cache,cache,117,"""""""; Adds info about friend trees to the input chain. Also aligns the; starting and ending entry of the friend chain cache to those of the; main chain.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:11,Performance,cache,cache,11,"# Fill the cache with the new RDataFrame",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py:102,Deployability,update,updated,102,"""""""; Enables real-time data representation for the given drawable objects.; The objects are drawn and updated every time a partial result returns from distributed execution. Args:; drawable_callback_dict (dict): A dictionary where keys are drawable objects ; and values are optional corresponding callback functions. . global_callback (function): An optional global callback function that ; is applied to all drawable objects. Raises:; ValueError: If a passed drawable object is not valid.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py:71,Security,validat,validated,71,"# Key: node_id of the drawable object's proxied_node; # Value: List of validated callback functions for the drawable object",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py:17,Security,validat,validate,17,"""""""; Process and validate a callback function. Args:		; callback: The callback function to be validated. Returns:; validated_callback: The validated callback function, or None if not valid.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py:94,Security,validat,validated,94,"""""""; Process and validate a callback function. Args:		; callback: The callback function to be validated. Returns:; validated_callback: The validated callback function, or None if not valid.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py:139,Security,validat,validated,139,"""""""; Process and validate a callback function. Args:		; callback: The callback function to be validated. Returns:; validated_callback: The validated callback function, or None if not valid.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py:49,Safety,safe,safe,49,"""""""; Checks if the provided callback function is safe for live visualization, ; (does not contain blocked actions). Args:; callback (function): The callback function to check. Returns:; bool: True if the callback function is safe, ; False otherwise.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py:225,Safety,safe,safe,225,"""""""; Checks if the provided callback function is safe for live visualization, ; (does not contain blocked actions). Args:; callback (function): The callback function to check. Returns:; bool: True if the callback function is safe, ; False otherwise.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Node.py:1156,Integrability,wrap,wraps,1156,"""""""; A Class that represents a node in RDataFrame operations graph. A Node; houses an operation and has references to children nodes. Attributes:; get_head: A function returning the head node in the graph. node_id: The id of this node, given sequentially in the order of; creation with respect to the head node of the graph. operation: The operation that this node represents. `None` if the node; is the head node. parent: A reference to the parent node of this node. `None` if the node; is the head node. nchildren: A counter of how many children this node has. _new_op_name (str): The name of the new incoming operation of the next; child, which is the last child node among the current node's; children. value: The computed value after executing the operation in the current; node for a particular DistRDF graph. This is permanently :obj:`None`; for transformation nodes and the action nodes get a; :obj:`ROOT.RResultPtr` after event-loop execution. has_user_references (bool): A flag to check whether the node has; direct user references, that is if it is assigned to a variable.; Default value is :obj:`True`, turns to :obj:`False` if the proxy; that wraps the node gets garbage collected by Python. rdf_node: A reference to the result of calling a function of the; RDataFrame API with the current operation. This is practically a; node of the true computation graph, which is being executed in some; distributed task. It is a transient attribute. On the client, it; is always None. The value is computed and stored only during a task; on a worker.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Node.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Node.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Node.py:1074,Modifiability,variab,variable,1074,"""""""; A Class that represents a node in RDataFrame operations graph. A Node; houses an operation and has references to children nodes. Attributes:; get_head: A function returning the head node in the graph. node_id: The id of this node, given sequentially in the order of; creation with respect to the head node of the graph. operation: The operation that this node represents. `None` if the node; is the head node. parent: A reference to the parent node of this node. `None` if the node; is the head node. nchildren: A counter of how many children this node has. _new_op_name (str): The name of the new incoming operation of the next; child, which is the last child node among the current node's; children. value: The computed value after executing the operation in the current; node for a particular DistRDF graph. This is permanently :obj:`None`; for transformation nodes and the action nodes get a; :obj:`ROOT.RResultPtr` after event-loop execution. has_user_references (bool): A flag to check whether the node has; direct user references, that is if it is assigned to a variable.; Default value is :obj:`True`, turns to :obj:`False` if the proxy; that wraps the node gets garbage collected by Python. rdf_node: A reference to the result of calling a function of the; RDataFrame API with the current operation. This is practically a; node of the true computation graph, which is being executed in some; distributed task. It is a transient attribute. On the client, it; is always None. The value is computed and stored only during a task; on a worker.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Node.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Node.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Node.py:132,Integrability,wrap,wrapped,132,"# ***** Condition 1 *****; # If the node does not have children, it might be prunable.; # ***** Condition 2 *****; # If the node is wrapped by a proxy which is not directly; # assigned to a variable, then it will be flagged for pruning; # ***** Condition 3 *****; # If the current node's value was already computed, it should; # get pruned. Only action nodes may possess a value attribute; # which is not None",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Node.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Node.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Node.py:190,Modifiability,variab,variable,190,"# ***** Condition 1 *****; # If the node does not have children, it might be prunable.; # ***** Condition 2 *****; # If the node is wrapped by a proxy which is not directly; # assigned to a variable, then it will be flagged for pruning; # ***** Condition 3 *****; # If the current node's value was already computed, it should; # get pruned. Only action nodes may possess a value attribute; # which is not None",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Node.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Node.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Operation.py:193,Safety,safe,safely,193,"# The histogram model can be passed as the keyword argument 'model'. All; # Histo*D specializations have the same name for this argument. If it is; # present, we know the execution can proceed safely.",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Operation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Operation.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Proxy.py:199,Modifiability,variab,variable,199,"""""""; Factory function, decorated with `contextlib.contextmanager` to make it; work in a `with` context manager. It creates a `ROOT.TDirectory.TContext`; that will store the current `ROOT.gDirectory` variable. At the end of the; context, the C++ destructor of the `TContext` object will be explicitly; called, thanks to the `__destruct__` dunder method implemented in PyROOT.; This will restore the `gDirectory` variable to its initial value, allowing; changing it in the context manager without permanent effects.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Proxy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Proxy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Proxy.py:411,Modifiability,variab,variable,411,"""""""; Factory function, decorated with `contextlib.contextmanager` to make it; work in a `with` context manager. It creates a `ROOT.TDirectory.TContext`; that will store the current `ROOT.gDirectory` variable. At the end of the; context, the C++ destructor of the `TContext` object will be explicitly; called, thanks to the `__destruct__` dunder method implemented in PyROOT.; This will restore the `gDirectory` variable to its initial value, allowing; changing it in the context manager without permanent effects.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Proxy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Proxy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Proxy.py:85,Modifiability,variab,variable,85,"""""""; Abstract class for proxies objects. These objects help to keep track of; nodes' variable assignment. That is, when a node is no longer assigned; to a variable by the user, the role of the proxy is to show that. This is; done via changing the value of the :obj:`has_user_references` of the; proxied node from :obj:`True` to :obj:`False`.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Proxy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Proxy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Proxy.py:155,Modifiability,variab,variable,155,"""""""; Abstract class for proxies objects. These objects help to keep track of; nodes' variable assignment. That is, when a node is no longer assigned; to a variable by the user, the role of the proxy is to show that. This is; done via changing the value of the :obj:`has_user_references` of the; proxied node from :obj:`True` to :obj:`False`.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Proxy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Proxy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Proxy.py:112,Integrability,wrap,wrap,112,"""""""; Creates a new `Proxy` object for a given node. Args:; proxied_node: The node that the current Proxy should wrap.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Proxy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Proxy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Proxy.py:117,Integrability,wrap,wrapped,117,"""""""; This function is called right before the current Proxy gets deleted by; Python. Its purpose is to show that the wrapped node has no more; user references, which is one of the conditions for the node to be; pruned from the computational graph.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Proxy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Proxy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Proxy.py:255,Availability,error,error,255,"""""""; Equivalent of 'GetKeys' of the RResultMap. Unlike its C++ counterpart,; at the moment we cannot retrieve the list of variation names for a; certain action without triggering the distributed computation graph. For; this reason, the function raises an error if the keys are accessed; before computations have been triggered. In the future the behaviour; should be aligned with the C++ counterpart.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Proxy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Proxy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Proxy.py:277,Security,access,accessed,277,"""""""; Equivalent of 'GetKeys' of the RResultMap. Unlike its C++ counterpart,; at the moment we cannot retrieve the list of variation names for a; certain action without triggering the distributed computation graph. For; this reason, the function raises an error if the keys are accessed; before computations have been triggered. In the future the behaviour; should be aligned with the C++ counterpart.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Proxy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Proxy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Proxy.py:125,Energy Efficiency,charge,charge,125,"""""""; A proxy object to an non-action node. It implements acces to attributes; and methods of the proxied node. It is also in charge of the creation of; a new operation node in the graph. The aim is to mimic the functionality of; ROOT::RDF::RNode to provide the same API usage.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Proxy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Proxy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Proxy.py:202,Security,access,access,202,"""""""; Intercepts calls to attributes and methods of the proxied node and; returns the appropriate object(s). Args:; attr (str): The name of the attribute or method of the proxied; node the user wants to access.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Proxy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Proxy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/PythonMergeables.py:137,Modifiability,extend,extends,137,"""""""; When calling Snapshot on a distributed worker, a list with the path to; the snapshotted file on the worker is stored. This function extends the; list of the current object with the elements from the list of the other; object.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/PythonMergeables.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/PythonMergeables.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/PythonMergeables.py:371,Integrability,depend,depending,371,"""""""; With local RDataFrame, Snapshot returns another RDataFrame object that; can be used to continue the application. The equivalent in the; distributed scenario is to create a distributed RDataFrame. This is done by constructing a TChain with the name and the list of; paths stored in this object. The chain is then passed to the; `make_dataframe` function that changes depending on the backend. For example, if the original RDataFrame that triggered the distributed; computation was created via a Spark backend, then this function will; return another distributed RDataFrame build from a Spark backend; instance. And so on for all other DistRDF backends.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/PythonMergeables.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/PythonMergeables.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Ranges.py:7,Testability,log,logical,7,"""""""; A logical range of entries in which a dataset is split. Depending on the; input data source, this can have different attributes. Attributes:. exec_id: An identifier for the current execution. id: A sequential counter to identify this range.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Ranges.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Ranges.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Ranges.py:250,Safety,sanity check,sanity check,250,"""""""; Entries corresponding to each tree assigned to a certain task, plus the; actual number of entries that task will be processing. This information will; be aggregated along with the main mergeable results in distributed; execution. It serves as a sanity check that exactly the total amount of; entries in the dataset is processed in the application.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Ranges.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Ranges.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Ranges.py:115,Usability,simpl,simply,115,"# Compute which files are to be considered for the various tasks; # The indexes of starting files in each task are simply the list of files; # from above, except for the last value which corresponds to the end of the; # last file. Also, they are inclusive.",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Ranges.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Ranges.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Ranges.py:43,Integrability,depend,depend,43,"# The indexes of ending files in each task depend on what is the percentage; # considered for that file. Also, they are exclusive. When the percentage is; # zero, i.e. we are at a file boundary, we want to consider the whole; # (previous) file, we just take the file index (shifting the list by one).; # When the percentage is above zero, we increase the index (shifted by one); # by one to be able to consider also the current file.",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Ranges.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Ranges.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Ranges.py:276,Testability,log,logic,276,"# Find the corresponding clusters for the above values.; # The startcluster index is inclusive. bisect_left returns the index; # corresponding to the correct starting cluster only if startentry is; # exactly at the cluster boundary. The endcluster index is exclusive.; # This logic relies on the specific representation of the list of; # clusters that includes the initial entry (0) as well as the last; # cluster boundary.; # Examples:; # cluster 1: [10, 20]; # cluster 2: [20, 30]; # startentry = 10, endentry = 13 --> startcluster = 1, endcluster = 2; # startentry = 13, endentry = 16 --> startcluster = 2, endcluster = 2; # startentry = 16, endentry = 19 --> startcluster = 2, endcluster = 2; # startentry = 19, endentry = 22 --> startcluster = 2, endcluster = 3",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Ranges.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Ranges.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Ranges.py:226,Usability,usab,usable,226,"# This is an empty task. This can happen:; # - If all trees assigned to this task are empty.; # - If the computed starting cluster is equal to the ending cluster.; # These would effectively lead to creating a TChain with zero usable; # entries.",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Ranges.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Ranges.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/_graph_cache.py:127,Security,hash,hashable,127,"""""""; A unique identifier for the current execution of the computation graph of; a particular RDataFrame instance. The class is hashable so it can be used; as a key in dictionaries. Attributes:. rdf_uuid: An identifier for the specific RDataFrame instance.; graph_uuid: An identifier for the computation graph sent to the workers for; the current execution.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/_graph_cache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/_graph_cache.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/__init__.py:244,Integrability,inject,inject,244,"""""""; Set a function that will be executed as a first step on every backend before; any other operation. This method also executes the function on the current; user environment so changes are visible on the running session. This allows users to inject and execute custom code on the worker; environment without being part of the RDataFrame computational graph. Args:; fun (function): Function to be executed. *args (list): Variable length argument list used to execute the; function. **kwargs (dict): Keyword arguments used to execute the function.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/__init__.py:244,Security,inject,inject,244,"""""""; Set a function that will be executed as a first step on every backend before; any other operation. This method also executes the function on the current; user environment so changes are visible on the running session. This allows users to inject and execute custom code on the worker; environment without being part of the RDataFrame computational graph. Args:; fun (function): Function to be executed. *args (list): Variable length argument list used to execute the; function. **kwargs (dict): Keyword arguments used to execute the function.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/__init__.py:161,Performance,concurren,concurrently,161,"""""""; Trigger the execution of multiple RDataFrame computation graphs on a certain; distributed backend. If the backend doesn't support multiple job; submissions concurrently, the distributed computation graphs will be; executed sequentially. Args:; proxies(list): List of action proxies that should be triggered. Only; actions belonging to different RDataFrame graphs will be; triggered to avoid useless calls. Return:; (int): The number of unique computation graphs executed by this call. Example:. @code{.py}; import ROOT; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. # Create 3 different dataframes and book an histogram on each one; histoproxies = [; RDataFrame(100); .Define(""x"", ""rdfentry_""); .Histo1D((""name"", ""title"", 10, 0, 100), ""x""); for _ in range(4); ]. # Execute the 3 computation graphs; n_graphs_run = RunGraphs(histoproxies); # Retrieve all the histograms in one go; histos = [histoproxy.GetValue() for histoproxy in histoproxies]; @endcode. """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/__init__.py:390,Safety,avoid,avoid,390,"""""""; Trigger the execution of multiple RDataFrame computation graphs on a certain; distributed backend. If the backend doesn't support multiple job; submissions concurrently, the distributed computation graphs will be; executed sequentially. Args:; proxies(list): List of action proxies that should be triggered. Only; actions belonging to different RDataFrame graphs will be; triggered to avoid useless calls. Return:; (int): The number of unique computation graphs executed by this call. Example:. @code{.py}; import ROOT; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. # Create 3 different dataframes and book an histogram on each one; histoproxies = [; RDataFrame(100); .Define(""x"", ""rdfentry_""); .Histo1D((""name"", ""title"", 10, 0, 100), ""x""); for _ in range(4); ]. # Execute the 3 computation graphs; n_graphs_run = RunGraphs(histoproxies); # Retrieve all the histograms in one go; histos = [histoproxy.GetValue() for histoproxy in histoproxies]; @endcode. """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/__init__.py:32,Integrability,depend,dependencies,32,"# Import here to avoid circular dependencies in main module",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/__init__.py:17,Safety,avoid,avoid,17,"# Import here to avoid circular dependencies in main module",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/__init__.py:32,Performance,concurren,concurrently,32,"# Submit all computation graphs concurrently from multiple Python threads.; # The submission is not computationally intensive",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py:179,Deployability,release,release,179,"# Enable thread safety for the whole mapper function. We need to do; # this since two tasks could be invoking the C++ interpreter; # simultaneously, given that this function will release the GIL; # before calling into C++ to run the event loop. Dask multi-threaded; # or even multi-process workers could trigger such a scenario.",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py:250,Performance,multi-thread,multi-threaded,250,"# Enable thread safety for the whole mapper function. We need to do; # this since two tasks could be invoking the C++ interpreter; # simultaneously, given that this function will release the GIL; # before calling into C++ to run the event loop. Dask multi-threaded; # or even multi-process workers could trigger such a scenario.",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py:16,Safety,safe,safety,16,"# Enable thread safety for the whole mapper function. We need to do; # this since two tasks could be invoking the C++ interpreter; # simultaneously, given that this function will release the GIL; # before calling into C++ to run the event loop. Dask multi-threaded; # or even multi-process workers could trigger such a scenario.",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py:45,Testability,log,logical,45,"""""""; Maps the computation graph to the input logical range of entries.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py:140,Deployability,update,updated,140,"""""""; Merges two given iterables of values that were returned by two mapper; function executions. Returns the first argument with its values updated from; the second.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py:82,Security,access,access,82,"# Merge dictionaries of trees and their entries. Different tasks; # might have to access the same tree, so we must not count its; # entries more than once.",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py:43,Energy Efficiency,reduce,reduce,43,"""""""; Subclasses must define how to run map-reduce functions on a given; backend.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py:71,Integrability,depend,depending,71,"""""""; Return a default number of partitions to split the dataframe in,; depending on the backend.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Utils.py:142,Availability,error,error,142,"# Get return value for loading the shared library.; # On succesful load the value will be 0.; # If the library does not exist or there was an error; # while loading, the value will be -1",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Utils.py:23,Performance,load,loading,23,"# Get return value for loading the shared library.; # On succesful load the value will be 0.; # If the library does not exist or there was an error; # while loading, the value will be -1",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Utils.py:67,Performance,load,load,67,"# Get return value for loading the shared library.; # On succesful load the value will be 0.; # If the library does not exist or there was an error; # while loading, the value will be -1",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Utils.py:157,Performance,load,loading,157,"# Get return value for loading the shared library.; # On succesful load the value will be 0.; # If the library does not exist or there was an error; # while loading, the value will be -1",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Utils.py:10,Performance,perform,performing,10,"""""""; When performing a distributed Snapshot we return an object holding the name; of the dataset and the path to the partial snapshot. We can directly return; the object, no extra work needed.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Utils.py:242,Security,access,access,242,"""""""; Connects the final value after distributed computation to the corresponding; DistRDF node.; In this overload, the node stores the reference to the mergeable variations; directly. It is then responsibility of the ResultMapProxy object to access; the specific varied object asked by the user, calling the right method of; the RMergeableVariations class.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/__init__.py:20,Integrability,inject,inject,20,"# A dummy module to inject in the parent module",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/__init__.py:20,Security,inject,inject,20,"# A dummy module to inject in the parent module",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py:58,Energy Efficiency,schedul,scheduler,58,"""""""; Retrieve the total number of cores known to the Dask scheduler through the; client connection.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py:54,Availability,avail,available,54,"# In some cases the Dask scheduler doesn't know about available workers; # at creation time. Most notably, when using batch systems like HTCondor; # through dask-jobqueue, creating the cluster object doesn't actually; # start the workers. The scheduler will know about available workers in; # the cluster only after cluster.scale has been called and the resource; # manager has granted the requested jobs. So at this point, we can only; # rely on the information that was passed by the user as a specification; # of the cluster object. This comes in the form:; # {'WORKER-NAME-1': {'cls': <class 'dask.WORKERCLASS'>,; # 'options': {'CORES_OR_NTHREADS': N, ...}},; # 'WORKER-NAME-2': {'cls': <class 'dask.WORKERCLASS'>,; # 'options': {'CORES_OR_NTHREADS': N, ...}}}; # This concept can vary between different types of clusters, but in the; # cluster types defined in dask-jobqueue the keys of the dictionary above; # refer to the name of a job submission, which can then involve multiple; # cores of a node.",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py:269,Availability,avail,available,269,"# In some cases the Dask scheduler doesn't know about available workers; # at creation time. Most notably, when using batch systems like HTCondor; # through dask-jobqueue, creating the cluster object doesn't actually; # start the workers. The scheduler will know about available workers in; # the cluster only after cluster.scale has been called and the resource; # manager has granted the requested jobs. So at this point, we can only; # rely on the information that was passed by the user as a specification; # of the cluster object. This comes in the form:; # {'WORKER-NAME-1': {'cls': <class 'dask.WORKERCLASS'>,; # 'options': {'CORES_OR_NTHREADS': N, ...}},; # 'WORKER-NAME-2': {'cls': <class 'dask.WORKERCLASS'>,; # 'options': {'CORES_OR_NTHREADS': N, ...}}}; # This concept can vary between different types of clusters, but in the; # cluster types defined in dask-jobqueue the keys of the dictionary above; # refer to the name of a job submission, which can then involve multiple; # cores of a node.",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py:25,Energy Efficiency,schedul,scheduler,25,"# In some cases the Dask scheduler doesn't know about available workers; # at creation time. Most notably, when using batch systems like HTCondor; # through dask-jobqueue, creating the cluster object doesn't actually; # start the workers. The scheduler will know about available workers in; # the cluster only after cluster.scale has been called and the resource; # manager has granted the requested jobs. So at this point, we can only; # rely on the information that was passed by the user as a specification; # of the cluster object. This comes in the form:; # {'WORKER-NAME-1': {'cls': <class 'dask.WORKERCLASS'>,; # 'options': {'CORES_OR_NTHREADS': N, ...}},; # 'WORKER-NAME-2': {'cls': <class 'dask.WORKERCLASS'>,; # 'options': {'CORES_OR_NTHREADS': N, ...}}}; # This concept can vary between different types of clusters, but in the; # cluster types defined in dask-jobqueue the keys of the dictionary above; # refer to the name of a job submission, which can then involve multiple; # cores of a node.",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py:243,Energy Efficiency,schedul,scheduler,243,"# In some cases the Dask scheduler doesn't know about available workers; # at creation time. Most notably, when using batch systems like HTCondor; # through dask-jobqueue, creating the cluster object doesn't actually; # start the workers. The scheduler will know about available workers in; # the cluster only after cluster.scale has been called and the resource; # manager has granted the requested jobs. So at this point, we can only; # rely on the information that was passed by the user as a specification; # of the cluster object. This comes in the form:; # {'WORKER-NAME-1': {'cls': <class 'dask.WORKERCLASS'>,; # 'options': {'CORES_OR_NTHREADS': N, ...}},; # 'WORKER-NAME-2': {'cls': <class 'dask.WORKERCLASS'>,; # 'options': {'CORES_OR_NTHREADS': N, ...}}}; # This concept can vary between different types of clusters, but in the; # cluster types defined in dask-jobqueue the keys of the dictionary above; # refer to the name of a job submission, which can then involve multiple; # cores of a node.",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py:127,Integrability,depend,dependency,127,"# It may happen that the user is connected to a batch system. We try; # to import the 'dask_jobqueue' module lazily to avoid a dependency.",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py:119,Safety,avoid,avoid,119,"# It may happen that the user is connected to a batch system. We try; # to import the 'dask_jobqueue' module lazily to avoid a dependency.",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py:18,Energy Efficiency,reduce,reduce,18,"""""""; Performs map-reduce using Dask framework. Args:; ranges (list): A list of ranges to be processed.; mapper (function): A function that runs the computational graph; and returns a list of values. reducer (function): A function that merges two lists that were; returned by the mapper. Returns:; list: A list representing the values of action nodes returned; after computation (Map-Reduce).; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py:199,Energy Efficiency,reduce,reducer,199,"""""""; Performs map-reduce using Dask framework. Args:; ranges (list): A list of ranges to be processed.; mapper (function): A function that runs the computational graph; and returns a list of values. reducer (function): A function that merges two lists that were; returned by the mapper. Returns:; list: A list representing the values of action nodes returned; after computation (Map-Reduce).; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py:110,Availability,avail,available,110,"""""""; Performs real-time map-reduce using Dask framework, retrieving the partial results ; as soon as they are available, allowing real-time data representation. Args:; ranges (list): A list of ranges to be processed. mapper (function): A function that runs the computational graph; and returns a list of values. reducer (function): A function that merges two lists that were; returned by the mapper. drawables_info_dict (dict): A dictionary where keys are plot object IDs ; and values are tuples containing optional callback functions, ; index of the plot object, and operation name. Returns:; merged_results (TaskResult): The merged result of the computation.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py:28,Energy Efficiency,reduce,reduce,28,"""""""; Performs real-time map-reduce using Dask framework, retrieving the partial results ; as soon as they are available, allowing real-time data representation. Args:; ranges (list): A list of ranges to be processed. mapper (function): A function that runs the computational graph; and returns a list of values. reducer (function): A function that merges two lists that were; returned by the mapper. drawables_info_dict (dict): A dictionary where keys are plot object IDs ; and values are tuples containing optional callback functions, ; index of the plot object, and operation name. Returns:; merged_results (TaskResult): The merged result of the computation.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py:312,Energy Efficiency,reduce,reducer,312,"""""""; Performs real-time map-reduce using Dask framework, retrieving the partial results ; as soon as they are available, allowing real-time data representation. Args:; ranges (list): A list of ranges to be processed. mapper (function): A function that runs the computational graph; and returns a list of values. reducer (function): A function that merges two lists that were; returned by the mapper. drawables_info_dict (dict): A dictionary where keys are plot object IDs ; and values are tuples containing optional callback functions, ; index of the plot object, and operation name. Returns:; merged_results (TaskResult): The merged result of the computation.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py:323,Energy Efficiency,reduce,reducer,323,"""""""; Process partial results and display plots on the provided canvas. Args:; canvas: The TCanvas object for displaying plots.; 			; drawables_info_dict (dict): A dictionary where keys are plot object IDs ; and values are tuples containing optional callback functions, ; index of the plot object, and operation name.; 			; reducer (function): A function for reducing partial results.; 			; future_tasks: Dask future tasks representing partial results. Returns:; merged_results (TaskResult): The merged result of the computation.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py:77,Performance,cache,cache,77,"""""""; Remove the computation graph identified by the input argument from the; cache.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Dask/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py:230,Deployability,configurat,configuration,230,"""""""; Creates an instance of the Spark backend class. Args:; config (dict, optional): The config options for Spark backend.; The default value is an empty Python dictionary :obj:`{}`.; :obj:`config` should be a dictionary of Spark configuration; options and their values with :obj:'npartitions' as the only; allowed extra parameter. Example::. config = {; 'npartitions':20,; 'spark.master':'myMasterURL',; 'spark.executor.instances':10,; 'spark.app.name':'mySparkAppName'; }. Note:; If a SparkContext is already set in the current environment, the; Spark configuration parameters from :obj:'config' will be ignored; and the already existing SparkContext would be used. """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py:554,Deployability,configurat,configuration,554,"""""""; Creates an instance of the Spark backend class. Args:; config (dict, optional): The config options for Spark backend.; The default value is an empty Python dictionary :obj:`{}`.; :obj:`config` should be a dictionary of Spark configuration; options and their values with :obj:'npartitions' as the only; allowed extra parameter. Example::. config = {; 'npartitions':20,; 'spark.master':'myMasterURL',; 'spark.executor.instances':10,; 'spark.app.name':'mySparkAppName'; }. Note:; If a SparkContext is already set in the current environment, the; Spark configuration parameters from :obj:'config' will be ignored; and the already existing SparkContext would be used. """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py:60,Modifiability,config,config,60,"""""""; Creates an instance of the Spark backend class. Args:; config (dict, optional): The config options for Spark backend.; The default value is an empty Python dictionary :obj:`{}`.; :obj:`config` should be a dictionary of Spark configuration; options and their values with :obj:'npartitions' as the only; allowed extra parameter. Example::. config = {; 'npartitions':20,; 'spark.master':'myMasterURL',; 'spark.executor.instances':10,; 'spark.app.name':'mySparkAppName'; }. Note:; If a SparkContext is already set in the current environment, the; Spark configuration parameters from :obj:'config' will be ignored; and the already existing SparkContext would be used. """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py:89,Modifiability,config,config,89,"""""""; Creates an instance of the Spark backend class. Args:; config (dict, optional): The config options for Spark backend.; The default value is an empty Python dictionary :obj:`{}`.; :obj:`config` should be a dictionary of Spark configuration; options and their values with :obj:'npartitions' as the only; allowed extra parameter. Example::. config = {; 'npartitions':20,; 'spark.master':'myMasterURL',; 'spark.executor.instances':10,; 'spark.app.name':'mySparkAppName'; }. Note:; If a SparkContext is already set in the current environment, the; Spark configuration parameters from :obj:'config' will be ignored; and the already existing SparkContext would be used. """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py:190,Modifiability,config,config,190,"""""""; Creates an instance of the Spark backend class. Args:; config (dict, optional): The config options for Spark backend.; The default value is an empty Python dictionary :obj:`{}`.; :obj:`config` should be a dictionary of Spark configuration; options and their values with :obj:'npartitions' as the only; allowed extra parameter. Example::. config = {; 'npartitions':20,; 'spark.master':'myMasterURL',; 'spark.executor.instances':10,; 'spark.app.name':'mySparkAppName'; }. Note:; If a SparkContext is already set in the current environment, the; Spark configuration parameters from :obj:'config' will be ignored; and the already existing SparkContext would be used. """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py:230,Modifiability,config,configuration,230,"""""""; Creates an instance of the Spark backend class. Args:; config (dict, optional): The config options for Spark backend.; The default value is an empty Python dictionary :obj:`{}`.; :obj:`config` should be a dictionary of Spark configuration; options and their values with :obj:'npartitions' as the only; allowed extra parameter. Example::. config = {; 'npartitions':20,; 'spark.master':'myMasterURL',; 'spark.executor.instances':10,; 'spark.app.name':'mySparkAppName'; }. Note:; If a SparkContext is already set in the current environment, the; Spark configuration parameters from :obj:'config' will be ignored; and the already existing SparkContext would be used. """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py:343,Modifiability,config,config,343,"""""""; Creates an instance of the Spark backend class. Args:; config (dict, optional): The config options for Spark backend.; The default value is an empty Python dictionary :obj:`{}`.; :obj:`config` should be a dictionary of Spark configuration; options and their values with :obj:'npartitions' as the only; allowed extra parameter. Example::. config = {; 'npartitions':20,; 'spark.master':'myMasterURL',; 'spark.executor.instances':10,; 'spark.app.name':'mySparkAppName'; }. Note:; If a SparkContext is already set in the current environment, the; Spark configuration parameters from :obj:'config' will be ignored; and the already existing SparkContext would be used. """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py:554,Modifiability,config,configuration,554,"""""""; Creates an instance of the Spark backend class. Args:; config (dict, optional): The config options for Spark backend.; The default value is an empty Python dictionary :obj:`{}`.; :obj:`config` should be a dictionary of Spark configuration; options and their values with :obj:'npartitions' as the only; allowed extra parameter. Example::. config = {; 'npartitions':20,; 'spark.master':'myMasterURL',; 'spark.executor.instances':10,; 'spark.app.name':'mySparkAppName'; }. Note:; If a SparkContext is already set in the current environment, the; Spark configuration parameters from :obj:'config' will be ignored; and the already existing SparkContext would be used. """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py:590,Modifiability,config,config,590,"""""""; Creates an instance of the Spark backend class. Args:; config (dict, optional): The config options for Spark backend.; The default value is an empty Python dictionary :obj:`{}`.; :obj:`config` should be a dictionary of Spark configuration; options and their values with :obj:'npartitions' as the only; allowed extra parameter. Example::. config = {; 'npartitions':20,; 'spark.master':'myMasterURL',; 'spark.executor.instances':10,; 'spark.app.name':'mySparkAppName'; }. Note:; If a SparkContext is already set in the current environment, the; Spark configuration parameters from :obj:'config' will be ignored; and the already existing SparkContext would be used. """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py:77,Availability,avail,available,77,"""""""; The SparkContext.defaultParallelism property roughly translates to the; available amount of logical cores on the cluster. Some examples:; - spark.master = local[n]: returns n.; - spark.executor.instances = m and spark.executor.cores = n: returns `n*m`.; By default, the minimum number this returns is 2 if the context; doesn't know any better. For example, if dynamic allocation is enabled.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py:97,Testability,log,logical,97,"""""""; The SparkContext.defaultParallelism property roughly translates to the; available amount of logical cores on the cluster. Some examples:; - spark.master = local[n]: returns n.; - spark.executor.instances = m and spark.executor.cores = n: returns `n*m`.; By default, the minimum number this returns is 2 if the context; doesn't know any better. For example, if dynamic allocation is enabled.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py:18,Energy Efficiency,reduce,reduce,18,"""""""; Performs map-reduce using Spark framework. Args:; mapper (function): A function that runs the computational graph; and returns a list of values. reducer (function): A function that merges two lists that were; returned by the mapper. Returns:; list: A list representing the values of action nodes returned; after computation (Map-Reduce).; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py:150,Energy Efficiency,reduce,reducer,150,"""""""; Performs map-reduce using Spark framework. Args:; mapper (function): A function that runs the computational graph; and returns a list of values. reducer (function): A function that merges two lists that were; returned by the mapper. Returns:; list: A list representing the values of action nodes returned; after computation (Map-Reduce).; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py:236,Availability,error,errors,236,"# These need to be passed as variables and not as class attributes; # otherwise the `spark_mapper` function would be referencing this; # this instance of the Spark backend along with the referenced; # SparkContext. This would cause the errors described in SPARK-5063.",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py:29,Modifiability,variab,variables,29,"# These need to be passed as variables and not as class attributes; # otherwise the `spark_mapper` function would be referencing this; # this instance of the Spark backend along with the referenced; # SparkContext. This would cause the errors described in SPARK-5063.",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py:162,Energy Efficiency,reduce,reduce,162,"""""""; Informs the user that the live visualization feature is not supported for the Spark backend ; and refers to ProcessAndMerge to proceed with the standard map-reduce workflow.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:49,Testability,test,test,49,"""""""Create dummy head node instance needed in the test""""""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:34,Testability,test,tests,34,"# Pass None as `npartitions`. The tests will modify this member; # according to needs",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:15,Testability,mock,mocking,15,"""""""A Class for mocking RDF CPP object.""""""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:15,Testability,mock,mock,15,"""""""; Creates a mock instance. Each mock method adds an unique number to; the `ord_list` so we can check the order in which they were called.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:35,Testability,mock,mock,35,"""""""; Creates a mock instance. Each mock method adds an unique number to; the `ord_list` so we can check the order in which they were called.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:12,Testability,test,test,12,"""""""A simple test case to check the working of mapper.""""""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:5,Usability,simpl,simple,5,"""""""A simple test case to check the working of mapper.""""""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:4,Testability,mock,mock,4,"# A mock RDF object",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:8,Safety,avoid,avoid,8,"# noqa: avoid PEP8 F841; # Generate and execute the mapper",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:7,Testability,test,test,7,"""""""; A test case to check that the mapper works even in the case of; pruning.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:4,Testability,mock,mock,4,"# A mock RDF object",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:8,Safety,avoid,avoid,8,"# noqa: avoid PEP8 F841; # Until here the graph would be:; # [1, 2, 2, 3, 3, 2]; # Reason for pruning (change of reference)",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:8,Safety,avoid,avoid,8,"# noqa: avoid PEP8 F841; # After the change of reference, it becomes; # [1, 2, 2, 3, 2, 2]; # that is, the Filter is appended at the end of the list, it is fine; # because it holds a reference to the ID of the father.; # Generate and execute the mapper",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:4,Testability,mock,mock,4,"# A mock RDF object",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:8,Safety,avoid,avoid,8,"# noqa: avoid PEP8 F841",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:8,Safety,avoid,avoid,8,"# noqa: avoid PEP8 F841",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:8,Safety,avoid,avoid,8,"# noqa: avoid PEP8 F841; # Transformation pruning, n5 was earlier a transformation node",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:8,Safety,avoid,avoid,8,"# noqa: avoid PEP8 F841; # Generate and execute the mapper",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:4,Testability,mock,mock,4,"# A mock RDF object",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:8,Safety,avoid,avoid,8,"# noqa: avoid PEP8 F841",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:8,Safety,avoid,avoid,8,"# noqa: avoid PEP8 F841",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:8,Safety,avoid,avoid,8,"# noqa: avoid PEP8 F841; # Remove user references from n4, n3, n2",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:8,Safety,avoid,avoid,8,"# noqa: avoid PEP8 F841; # Generate and execute the mapper",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:4,Testability,mock,mock,4,"# A mock RDF object",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:8,Safety,avoid,avoid,8,"# noqa: avoid PEP8 F841",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:8,Safety,avoid,avoid,8,"# noqa: avoid PEP8 F841",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:8,Safety,avoid,avoid,8,"# noqa: avoid PEP8 F841; # Remove references from n2 (which shouldn't affect the graph)",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:4,Testability,mock,mock,4,"# A mock RDF object",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:8,Safety,avoid,avoid,8,"# noqa: avoid PEP8 F841",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:4,Testability,mock,mock,4,"# A mock RDF object",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:8,Safety,avoid,avoid,8,"# noqa: avoid PEP8 F841",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:8,Safety,avoid,avoid,8,"# noqa: avoid PEP8 F841",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:8,Safety,avoid,avoid,8,"# noqa: avoid PEP8 F841; # Generate and execute the mapper",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:4,Testability,mock,mock,4,"# A mock RDF object",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:12,Testability,mock,mock,12,"# Reset the mock list of nodes so old nodes are not kept",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_callable_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_friendinfo.py:49,Testability,test,test,49,"""""""Create dummy head node instance needed in the test""""""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_friendinfo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_friendinfo.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_friendinfo.py:34,Testability,test,tests,34,"# Pass None as `npartitions`. The tests will modify this member; # according to needs",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_friendinfo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_friendinfo.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_friendinfo.py:8,Testability,test,test,8,"""""""Unit test for the FriendInfo class""""""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_friendinfo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_friendinfo.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_headnode.py:49,Testability,test,test,49,"""""""Create dummy head node instance needed in the test""""""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_headnode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_headnode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_headnode.py:34,Testability,test,tests,34,"# Pass None as `npartitions`. The tests will modify this member; # according to needs",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_headnode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_headnode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_headnode.py:173,Testability,test,testing,173,"# See https://github.com/root-project/root/issues/7541 and; # https://bugs.llvm.org/show_bug.cgi?id=49692 :; # llvm JIT fails to catch exceptions on M1, so we disable their testing",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_headnode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_headnode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_headnode.py:173,Testability,test,testing,173,"# See https://github.com/root-project/root/issues/7541 and; # https://bugs.llvm.org/show_bug.cgi?id=49692 :; # llvm JIT fails to catch exceptions on M1, so we disable their testing",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_headnode.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_headnode.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_node.py:49,Testability,test,test,49,"""""""Create dummy head node instance needed in the test""""""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_node.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_node.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_node.py:34,Testability,test,tests,34,"# Pass None as `npartitions`. The tests will modify this member; # according to needs",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_node.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_node.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_node.py:17,Testability,test,test,17,"""""""; A series of test cases to check that all new operations are created properly; inside a new node.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_node.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_node.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_node.py:8,Safety,avoid,avoid,8,"# noqa: avoid PEP8 F841",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_node.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_node.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_node.py:17,Testability,test,test,17,"""""""; A series of test cases to check that right objects are returned for a node; (Proxy.ResultPtrProxy, Proxy.NodeProxy or Node).; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_node.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_node.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_node.py:42,Availability,error,error,42,"# Regular dunder method must not throw an error",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_node.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_node.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py:49,Testability,test,test,49,"""""""Create dummy head node instance needed in the test""""""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_proxy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py:34,Testability,test,tests,34,"# Pass None as `npartitions`. The tests will modify this member; # according to needs",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_proxy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py:58,Integrability,wrap,wraps,58,"""""""; NodeProxy object is of type `DistRDF.NodeProxy` and; wraps a node object.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_proxy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py:68,Integrability,wrap,wraps,68,"""""""; ResultPtrProxy object is of type `DistRDF.ResultPtrProxy` and; wraps a node object.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_proxy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py:5,Testability,mock,mock,5,"""""""A mock action node result class.""""""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_proxy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py:5,Testability,test,test,5,"""""""A test method to check function call on the Temp class.""""""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_proxy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py:4,Usability,simpl,simple,4,"# A simple operation to check",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_proxy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py:20,Testability,test,test,20,"""""""Dummy backend to test the _get_friend_info method in Dist class.""""""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_proxy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py:8,Safety,avoid,avoid,8,"# noqa: avoid PEP8 F841",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_proxy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py:37,Availability,avail,available,37,"""""""; Check newly defined columns are available also locally.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_proxy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_ranges.py:41,Testability,test,tests,41,"""""""; Create some files to be used in the tests. Each file has 100 entries and; 10 clusters.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_ranges.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_ranges.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_ranges.py:19,Testability,test,test,19,"# Same as previous test",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/test_ranges.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_ranges.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_dist.py:52,Integrability,depend,depend,52,"""""""; The result of distributed execution should not depend on the number of; partitions assigned to the dataframe.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/backend/test_dist.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_dist.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_dist.py:20,Testability,test,test,20,"""""""Dummy backend to test the _build_ranges method in Dist class.""""""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/backend/test_dist.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_dist.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_dist.py:61,Integrability,depend,depend,61,"""""""; Tests that counting the entries in the dataset does not depend on the; number of partitions. This could have happened if we used TEntryList; to restrict processing on a certain range of entries of the TChain in a; distributed task, but the changes in; https://github.com/root-project/root/commit/77bd5aa82e9544811e0d5fce197ab87c739c2e23; were not implemented yet.; """"""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/backend/test_dist.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_dist.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py:50,Testability,test,tests,50,"""""""This implementation is needed for the Snapshot tests.""""""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/backend/test_graph_caching.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py:13,Performance,cache,caches,13,"""""""Clear the caches in between tests.""""""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/backend/test_graph_caching.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py:31,Testability,test,tests,31,"""""""Clear the caches in between tests.""""""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/backend/test_graph_caching.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py:7,Performance,cache,cache,7,"""""""The cache is used to count entries with an empty source.""""""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/backend/test_graph_caching.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py:21,Performance,cache,cache,21,"# Start from a fresh cache at each subtest iteration",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/backend/test_graph_caching.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py:30,Performance,cache,cached,30,"# There should be exactly one cached RDF and set of actions",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/backend/test_graph_caching.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py:7,Performance,cache,cache,7,"""""""The cache is used to count entries of a TTree.""""""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/backend/test_graph_caching.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py:21,Performance,cache,cache,21,"# Start from a fresh cache at each subtest iteration",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/backend/test_graph_caching.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py:30,Performance,cache,cached,30,"# There should be exactly one cached RDF and set of actions",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/backend/test_graph_caching.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py:7,Performance,cache,cache,7,"""""""The cache is used to count entries of a TChain.""""""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/backend/test_graph_caching.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py:21,Performance,cache,cache,21,"# Start from a fresh cache at each subtest iteration",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/backend/test_graph_caching.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py:30,Performance,cache,cached,30,"# There should be exactly one cached RDF and set of actions",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/backend/test_graph_caching.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py:7,Performance,cache,cache,7,"""""""The cache is used to Snapshot data.""""""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/backend/test_graph_caching.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py:21,Performance,cache,cache,21,"# Start from a fresh cache at each subtest iteration",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/backend/test_graph_caching.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py:30,Performance,cache,cached,30,"# There should be exactly one cached RDF and set of actions",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/backend/test_graph_caching.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py:38,Usability,usab,usable,38,"# The snapshotted dataframe should be usable",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/backend/test_graph_caching.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py:7,Performance,cache,caches,7,"""""""The caches are used with multiple executions.""""""",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/backend/test_graph_caching.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py:21,Performance,cache,cache,21,"# Start from a fresh cache at each subtest iteration",MatchSource.CODE_COMMENT,bindings/experimental/distrdf/test/backend/test_graph_caching.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/cppcompleter.py:8,Integrability,wrap,wrapper,8,"# Jit a wrapper for the ttabcom",MatchSource.CODE_COMMENT,bindings/jupyroot/python/JupyROOT/helpers/cppcompleter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/cppcompleter.py
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/cppcompleter.py:21,Integrability,interface,interfaces,21,"'''; Completer which interfaces to the TTabCom of ROOT. It is activated; (deactivated) upon the load(unload) of the load of the extension. >>> comp = CppCompleter(); >>> comp.activate(); >>> for suggestion in comp._completeImpl(""TTreeF""):; ... print(suggestion); TTreeFormula; TTreeFormulaManager; TTreeFriendLeafIter; >>> garbage = ROOT.gInterpreter.ProcessLine(""TH1F* h""); >>> for suggestion in comp._completeImpl(""h->GetA""):; ... print(suggestion); h->GetArray; h->GetAsymmetry; h->GetAt; h->GetAxisColor; >>> garbage = ROOT.gInterpreter.ProcessLine(""TH1F aa""); >>> for suggestion in comp._completeImpl(""aa.Add(""):; ... print(suggestion.replace(""\\t"","" "")); <BLANKLINE>; Bool_t Add(TF1* h1, Double_t c1 = 1, Option_t* option = """"); Bool_t Add(const TH1* h, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1) // *MENU*; Bool_t Add(const TH1* h1, Double_t c1 = 1); >>> for suggestion in comp._completeImpl(""TROOT::Is""):; ... print(suggestion); TROOT::IsA; TROOT::IsBatch; TROOT::IsBuilt; TROOT::IsDestructed; TROOT::IsEqual; TROOT::IsEscaped; TROOT::IsExecutingMacro; TROOT::IsFolder; TROOT::IsInterrupted; TROOT::IsLineProcessing; TROOT::IsModified; TROOT::IsOnHeap; TROOT::IsProofServ; TROOT::IsRootFile; TROOT::IsSortable; TROOT::IsWebDisplay; TROOT::IsWebDisplayBatch; TROOT::IsWritable; TROOT::IsZombie; >>> comp.deactivate(); >>> for suggestion in comp._completeImpl(""TG""):; ... print(suggestion); '''",MatchSource.CODE_COMMENT,bindings/jupyroot/python/JupyROOT/helpers/cppcompleter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/cppcompleter.py
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/cppcompleter.py:96,Performance,load,load,96,"'''; Completer which interfaces to the TTabCom of ROOT. It is activated; (deactivated) upon the load(unload) of the load of the extension. >>> comp = CppCompleter(); >>> comp.activate(); >>> for suggestion in comp._completeImpl(""TTreeF""):; ... print(suggestion); TTreeFormula; TTreeFormulaManager; TTreeFriendLeafIter; >>> garbage = ROOT.gInterpreter.ProcessLine(""TH1F* h""); >>> for suggestion in comp._completeImpl(""h->GetA""):; ... print(suggestion); h->GetArray; h->GetAsymmetry; h->GetAt; h->GetAxisColor; >>> garbage = ROOT.gInterpreter.ProcessLine(""TH1F aa""); >>> for suggestion in comp._completeImpl(""aa.Add(""):; ... print(suggestion.replace(""\\t"","" "")); <BLANKLINE>; Bool_t Add(TF1* h1, Double_t c1 = 1, Option_t* option = """"); Bool_t Add(const TH1* h, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1) // *MENU*; Bool_t Add(const TH1* h1, Double_t c1 = 1); >>> for suggestion in comp._completeImpl(""TROOT::Is""):; ... print(suggestion); TROOT::IsA; TROOT::IsBatch; TROOT::IsBuilt; TROOT::IsDestructed; TROOT::IsEqual; TROOT::IsEscaped; TROOT::IsExecutingMacro; TROOT::IsFolder; TROOT::IsInterrupted; TROOT::IsLineProcessing; TROOT::IsModified; TROOT::IsOnHeap; TROOT::IsProofServ; TROOT::IsRootFile; TROOT::IsSortable; TROOT::IsWebDisplay; TROOT::IsWebDisplayBatch; TROOT::IsWritable; TROOT::IsZombie; >>> comp.deactivate(); >>> for suggestion in comp._completeImpl(""TG""):; ... print(suggestion); '''",MatchSource.CODE_COMMENT,bindings/jupyroot/python/JupyROOT/helpers/cppcompleter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/cppcompleter.py
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/cppcompleter.py:116,Performance,load,load,116,"'''; Completer which interfaces to the TTabCom of ROOT. It is activated; (deactivated) upon the load(unload) of the load of the extension. >>> comp = CppCompleter(); >>> comp.activate(); >>> for suggestion in comp._completeImpl(""TTreeF""):; ... print(suggestion); TTreeFormula; TTreeFormulaManager; TTreeFriendLeafIter; >>> garbage = ROOT.gInterpreter.ProcessLine(""TH1F* h""); >>> for suggestion in comp._completeImpl(""h->GetA""):; ... print(suggestion); h->GetArray; h->GetAsymmetry; h->GetAt; h->GetAxisColor; >>> garbage = ROOT.gInterpreter.ProcessLine(""TH1F aa""); >>> for suggestion in comp._completeImpl(""aa.Add(""):; ... print(suggestion.replace(""\\t"","" "")); <BLANKLINE>; Bool_t Add(TF1* h1, Double_t c1 = 1, Option_t* option = """"); Bool_t Add(const TH1* h, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1) // *MENU*; Bool_t Add(const TH1* h1, Double_t c1 = 1); >>> for suggestion in comp._completeImpl(""TROOT::Is""):; ... print(suggestion); TROOT::IsA; TROOT::IsBatch; TROOT::IsBuilt; TROOT::IsDestructed; TROOT::IsEqual; TROOT::IsEscaped; TROOT::IsExecutingMacro; TROOT::IsFolder; TROOT::IsInterrupted; TROOT::IsLineProcessing; TROOT::IsModified; TROOT::IsOnHeap; TROOT::IsProofServ; TROOT::IsRootFile; TROOT::IsSortable; TROOT::IsWebDisplay; TROOT::IsWebDisplayBatch; TROOT::IsWritable; TROOT::IsZombie; >>> comp.deactivate(); >>> for suggestion in comp._completeImpl(""TG""):; ... print(suggestion); '''",MatchSource.CODE_COMMENT,bindings/jupyroot/python/JupyROOT/helpers/cppcompleter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/cppcompleter.py
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/cppcompleter.py:10,Modifiability,variab,variable,10,"# Prepend variable name to suggestions. Do not prepend if the; # suggestion already contains the variable name, this can happen if; # e.g. there is only one valid completion",MatchSource.CODE_COMMENT,bindings/jupyroot/python/JupyROOT/helpers/cppcompleter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/cppcompleter.py
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/cppcompleter.py:97,Modifiability,variab,variable,97,"# Prepend variable name to suggestions. Do not prepend if the; # suggestion already contains the variable name, this can happen if; # e.g. there is only one valid completion",MatchSource.CODE_COMMENT,bindings/jupyroot/python/JupyROOT/helpers/cppcompleter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/cppcompleter.py
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/cppcompleter.py:48,Security,access,accessor,48,"'''; Autocomplete interfacing to TTabCom. If an accessor of a scope is; present in the line, the suggestions are prepended with the line.; That's how completers work. For example:; myGraph.Set<tab> will return ""myGraph.Set+suggestion in the list of; suggestions.; '''",MatchSource.CODE_COMMENT,bindings/jupyroot/python/JupyROOT/helpers/cppcompleter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/cppcompleter.py
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py:46,Deployability,update,update,46,"# Keep display handle for canvases to be able update them",MatchSource.CODE_COMMENT,bindings/jupyroot/python/JupyROOT/helpers/utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py:134,Modifiability,config,configured,134,"""""""; Jupyter.CodeCell.options_default.highlight_modes['magic_{cppMIME}'] = {{'reg':[/^%%cpp/]}};; console.log(""JupyROOT - %%cpp magic configured"");; """"""",MatchSource.CODE_COMMENT,bindings/jupyroot/python/JupyROOT/helpers/utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py:106,Testability,log,log,106,"""""""; Jupyter.CodeCell.options_default.highlight_modes['magic_{cppMIME}'] = {{'reg':[/^%%cpp/]}};; console.log(""JupyROOT - %%cpp magic configured"");; """"""",MatchSource.CODE_COMMENT,bindings/jupyroot/python/JupyROOT/helpers/utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py:1507,Availability,error,error,1507,""""""". <div id=""{jsDivId}"" style=""width: {jsCanvasWidth}px; height: {jsCanvasHeight}px; position: relative"">; </div>. <script>. function display_{jsDivId}(Core) {{; let obj = Core.parse({jsonContent});; Core.settings.HandleKeys = false;; Core.draw(""{jsDivId}"", obj, ""{jsDrawOptions}"");; }}. function script_load_{jsDivId}(src, on_error) {{; let script = document.createElement('script');; script.src = src;; script.onload = function() {{ display_{jsDivId}(JSROOT); }};; script.onerror = function() {{ script.remove(); on_error(); }};; document.head.appendChild(script);; }}. if (typeof requirejs !== 'undefined') {{. // We are in jupyter notebooks, use require.js which should be configured already; requirejs.config({{; paths: {{ 'JSRootCore' : [ 'build/jsroot', 'https://root.cern/js/7.7.4/build/jsroot', 'https://jsroot.gsi.de/7.7.4/build/jsroot' ] }}; }})(['JSRootCore'], function(Core) {{; display_{jsDivId}(Core);; }});. }} else if (typeof JSROOT !== 'undefined') {{. // JSROOT already loaded, just use it; display_{jsDivId}(JSROOT);. }} else {{. // We are in jupyterlab without require.js, directly loading jsroot; // Jupyterlab might be installed in a different base_url so we need to know it.; try {{; var base_url = JSON.parse(document.getElementById('jupyter-config-data').innerHTML).baseUrl;; }} catch(_) {{; var base_url = '/';; }}. // Try loading a local version of requirejs and fallback to cdn if not possible.; script_load_{jsDivId}(base_url + 'static/build/jsroot.js', function(){{; console.error('Fail to load JSROOT locally, please check your jupyter_notebook_config.py file');; script_load_{jsDivId}('https://root.cern/js/7.7.4/build/jsroot.js', function(){{; document.getElementById(""{jsDivId}"").innerHTML = ""Failed to load JSROOT"";; }});; }});; }}. </script>; """"""",MatchSource.CODE_COMMENT,bindings/jupyroot/python/JupyROOT/helpers/utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py:1143,Deployability,install,installed,1143,""""""". <div id=""{jsDivId}"" style=""width: {jsCanvasWidth}px; height: {jsCanvasHeight}px; position: relative"">; </div>. <script>. function display_{jsDivId}(Core) {{; let obj = Core.parse({jsonContent});; Core.settings.HandleKeys = false;; Core.draw(""{jsDivId}"", obj, ""{jsDrawOptions}"");; }}. function script_load_{jsDivId}(src, on_error) {{; let script = document.createElement('script');; script.src = src;; script.onload = function() {{ display_{jsDivId}(JSROOT); }};; script.onerror = function() {{ script.remove(); on_error(); }};; document.head.appendChild(script);; }}. if (typeof requirejs !== 'undefined') {{. // We are in jupyter notebooks, use require.js which should be configured already; requirejs.config({{; paths: {{ 'JSRootCore' : [ 'build/jsroot', 'https://root.cern/js/7.7.4/build/jsroot', 'https://jsroot.gsi.de/7.7.4/build/jsroot' ] }}; }})(['JSRootCore'], function(Core) {{; display_{jsDivId}(Core);; }});. }} else if (typeof JSROOT !== 'undefined') {{. // JSROOT already loaded, just use it; display_{jsDivId}(JSROOT);. }} else {{. // We are in jupyterlab without require.js, directly loading jsroot; // Jupyterlab might be installed in a different base_url so we need to know it.; try {{; var base_url = JSON.parse(document.getElementById('jupyter-config-data').innerHTML).baseUrl;; }} catch(_) {{; var base_url = '/';; }}. // Try loading a local version of requirejs and fallback to cdn if not possible.; script_load_{jsDivId}(base_url + 'static/build/jsroot.js', function(){{; console.error('Fail to load JSROOT locally, please check your jupyter_notebook_config.py file');; script_load_{jsDivId}('https://root.cern/js/7.7.4/build/jsroot.js', function(){{; document.getElementById(""{jsDivId}"").innerHTML = ""Failed to load JSROOT"";; }});; }});; }}. </script>; """"""",MatchSource.CODE_COMMENT,bindings/jupyroot/python/JupyROOT/helpers/utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py:678,Modifiability,config,configured,678,""""""". <div id=""{jsDivId}"" style=""width: {jsCanvasWidth}px; height: {jsCanvasHeight}px; position: relative"">; </div>. <script>. function display_{jsDivId}(Core) {{; let obj = Core.parse({jsonContent});; Core.settings.HandleKeys = false;; Core.draw(""{jsDivId}"", obj, ""{jsDrawOptions}"");; }}. function script_load_{jsDivId}(src, on_error) {{; let script = document.createElement('script');; script.src = src;; script.onload = function() {{ display_{jsDivId}(JSROOT); }};; script.onerror = function() {{ script.remove(); on_error(); }};; document.head.appendChild(script);; }}. if (typeof requirejs !== 'undefined') {{. // We are in jupyter notebooks, use require.js which should be configured already; requirejs.config({{; paths: {{ 'JSRootCore' : [ 'build/jsroot', 'https://root.cern/js/7.7.4/build/jsroot', 'https://jsroot.gsi.de/7.7.4/build/jsroot' ] }}; }})(['JSRootCore'], function(Core) {{; display_{jsDivId}(Core);; }});. }} else if (typeof JSROOT !== 'undefined') {{. // JSROOT already loaded, just use it; display_{jsDivId}(JSROOT);. }} else {{. // We are in jupyterlab without require.js, directly loading jsroot; // Jupyterlab might be installed in a different base_url so we need to know it.; try {{; var base_url = JSON.parse(document.getElementById('jupyter-config-data').innerHTML).baseUrl;; }} catch(_) {{; var base_url = '/';; }}. // Try loading a local version of requirejs and fallback to cdn if not possible.; script_load_{jsDivId}(base_url + 'static/build/jsroot.js', function(){{; console.error('Fail to load JSROOT locally, please check your jupyter_notebook_config.py file');; script_load_{jsDivId}('https://root.cern/js/7.7.4/build/jsroot.js', function(){{; document.getElementById(""{jsDivId}"").innerHTML = ""Failed to load JSROOT"";; }});; }});; }}. </script>; """"""",MatchSource.CODE_COMMENT,bindings/jupyroot/python/JupyROOT/helpers/utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py:708,Modifiability,config,config,708,""""""". <div id=""{jsDivId}"" style=""width: {jsCanvasWidth}px; height: {jsCanvasHeight}px; position: relative"">; </div>. <script>. function display_{jsDivId}(Core) {{; let obj = Core.parse({jsonContent});; Core.settings.HandleKeys = false;; Core.draw(""{jsDivId}"", obj, ""{jsDrawOptions}"");; }}. function script_load_{jsDivId}(src, on_error) {{; let script = document.createElement('script');; script.src = src;; script.onload = function() {{ display_{jsDivId}(JSROOT); }};; script.onerror = function() {{ script.remove(); on_error(); }};; document.head.appendChild(script);; }}. if (typeof requirejs !== 'undefined') {{. // We are in jupyter notebooks, use require.js which should be configured already; requirejs.config({{; paths: {{ 'JSRootCore' : [ 'build/jsroot', 'https://root.cern/js/7.7.4/build/jsroot', 'https://jsroot.gsi.de/7.7.4/build/jsroot' ] }}; }})(['JSRootCore'], function(Core) {{; display_{jsDivId}(Core);; }});. }} else if (typeof JSROOT !== 'undefined') {{. // JSROOT already loaded, just use it; display_{jsDivId}(JSROOT);. }} else {{. // We are in jupyterlab without require.js, directly loading jsroot; // Jupyterlab might be installed in a different base_url so we need to know it.; try {{; var base_url = JSON.parse(document.getElementById('jupyter-config-data').innerHTML).baseUrl;; }} catch(_) {{; var base_url = '/';; }}. // Try loading a local version of requirejs and fallback to cdn if not possible.; script_load_{jsDivId}(base_url + 'static/build/jsroot.js', function(){{; console.error('Fail to load JSROOT locally, please check your jupyter_notebook_config.py file');; script_load_{jsDivId}('https://root.cern/js/7.7.4/build/jsroot.js', function(){{; document.getElementById(""{jsDivId}"").innerHTML = ""Failed to load JSROOT"";; }});; }});; }}. </script>; """"""",MatchSource.CODE_COMMENT,bindings/jupyroot/python/JupyROOT/helpers/utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py:1268,Modifiability,config,config-data,1268,""""""". <div id=""{jsDivId}"" style=""width: {jsCanvasWidth}px; height: {jsCanvasHeight}px; position: relative"">; </div>. <script>. function display_{jsDivId}(Core) {{; let obj = Core.parse({jsonContent});; Core.settings.HandleKeys = false;; Core.draw(""{jsDivId}"", obj, ""{jsDrawOptions}"");; }}. function script_load_{jsDivId}(src, on_error) {{; let script = document.createElement('script');; script.src = src;; script.onload = function() {{ display_{jsDivId}(JSROOT); }};; script.onerror = function() {{ script.remove(); on_error(); }};; document.head.appendChild(script);; }}. if (typeof requirejs !== 'undefined') {{. // We are in jupyter notebooks, use require.js which should be configured already; requirejs.config({{; paths: {{ 'JSRootCore' : [ 'build/jsroot', 'https://root.cern/js/7.7.4/build/jsroot', 'https://jsroot.gsi.de/7.7.4/build/jsroot' ] }}; }})(['JSRootCore'], function(Core) {{; display_{jsDivId}(Core);; }});. }} else if (typeof JSROOT !== 'undefined') {{. // JSROOT already loaded, just use it; display_{jsDivId}(JSROOT);. }} else {{. // We are in jupyterlab without require.js, directly loading jsroot; // Jupyterlab might be installed in a different base_url so we need to know it.; try {{; var base_url = JSON.parse(document.getElementById('jupyter-config-data').innerHTML).baseUrl;; }} catch(_) {{; var base_url = '/';; }}. // Try loading a local version of requirejs and fallback to cdn if not possible.; script_load_{jsDivId}(base_url + 'static/build/jsroot.js', function(){{; console.error('Fail to load JSROOT locally, please check your jupyter_notebook_config.py file');; script_load_{jsDivId}('https://root.cern/js/7.7.4/build/jsroot.js', function(){{; document.getElementById(""{jsDivId}"").innerHTML = ""Failed to load JSROOT"";; }});; }});; }}. </script>; """"""",MatchSource.CODE_COMMENT,bindings/jupyroot/python/JupyROOT/helpers/utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py:990,Performance,load,loaded,990,""""""". <div id=""{jsDivId}"" style=""width: {jsCanvasWidth}px; height: {jsCanvasHeight}px; position: relative"">; </div>. <script>. function display_{jsDivId}(Core) {{; let obj = Core.parse({jsonContent});; Core.settings.HandleKeys = false;; Core.draw(""{jsDivId}"", obj, ""{jsDrawOptions}"");; }}. function script_load_{jsDivId}(src, on_error) {{; let script = document.createElement('script');; script.src = src;; script.onload = function() {{ display_{jsDivId}(JSROOT); }};; script.onerror = function() {{ script.remove(); on_error(); }};; document.head.appendChild(script);; }}. if (typeof requirejs !== 'undefined') {{. // We are in jupyter notebooks, use require.js which should be configured already; requirejs.config({{; paths: {{ 'JSRootCore' : [ 'build/jsroot', 'https://root.cern/js/7.7.4/build/jsroot', 'https://jsroot.gsi.de/7.7.4/build/jsroot' ] }}; }})(['JSRootCore'], function(Core) {{; display_{jsDivId}(Core);; }});. }} else if (typeof JSROOT !== 'undefined') {{. // JSROOT already loaded, just use it; display_{jsDivId}(JSROOT);. }} else {{. // We are in jupyterlab without require.js, directly loading jsroot; // Jupyterlab might be installed in a different base_url so we need to know it.; try {{; var base_url = JSON.parse(document.getElementById('jupyter-config-data').innerHTML).baseUrl;; }} catch(_) {{; var base_url = '/';; }}. // Try loading a local version of requirejs and fallback to cdn if not possible.; script_load_{jsDivId}(base_url + 'static/build/jsroot.js', function(){{; console.error('Fail to load JSROOT locally, please check your jupyter_notebook_config.py file');; script_load_{jsDivId}('https://root.cern/js/7.7.4/build/jsroot.js', function(){{; document.getElementById(""{jsDivId}"").innerHTML = ""Failed to load JSROOT"";; }});; }});; }}. </script>; """"""",MatchSource.CODE_COMMENT,bindings/jupyroot/python/JupyROOT/helpers/utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py:1104,Performance,load,loading,1104,""""""". <div id=""{jsDivId}"" style=""width: {jsCanvasWidth}px; height: {jsCanvasHeight}px; position: relative"">; </div>. <script>. function display_{jsDivId}(Core) {{; let obj = Core.parse({jsonContent});; Core.settings.HandleKeys = false;; Core.draw(""{jsDivId}"", obj, ""{jsDrawOptions}"");; }}. function script_load_{jsDivId}(src, on_error) {{; let script = document.createElement('script');; script.src = src;; script.onload = function() {{ display_{jsDivId}(JSROOT); }};; script.onerror = function() {{ script.remove(); on_error(); }};; document.head.appendChild(script);; }}. if (typeof requirejs !== 'undefined') {{. // We are in jupyter notebooks, use require.js which should be configured already; requirejs.config({{; paths: {{ 'JSRootCore' : [ 'build/jsroot', 'https://root.cern/js/7.7.4/build/jsroot', 'https://jsroot.gsi.de/7.7.4/build/jsroot' ] }}; }})(['JSRootCore'], function(Core) {{; display_{jsDivId}(Core);; }});. }} else if (typeof JSROOT !== 'undefined') {{. // JSROOT already loaded, just use it; display_{jsDivId}(JSROOT);. }} else {{. // We are in jupyterlab without require.js, directly loading jsroot; // Jupyterlab might be installed in a different base_url so we need to know it.; try {{; var base_url = JSON.parse(document.getElementById('jupyter-config-data').innerHTML).baseUrl;; }} catch(_) {{; var base_url = '/';; }}. // Try loading a local version of requirejs and fallback to cdn if not possible.; script_load_{jsDivId}(base_url + 'static/build/jsroot.js', function(){{; console.error('Fail to load JSROOT locally, please check your jupyter_notebook_config.py file');; script_load_{jsDivId}('https://root.cern/js/7.7.4/build/jsroot.js', function(){{; document.getElementById(""{jsDivId}"").innerHTML = ""Failed to load JSROOT"";; }});; }});; }}. </script>; """"""",MatchSource.CODE_COMMENT,bindings/jupyroot/python/JupyROOT/helpers/utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py:1351,Performance,load,loading,1351,""""""". <div id=""{jsDivId}"" style=""width: {jsCanvasWidth}px; height: {jsCanvasHeight}px; position: relative"">; </div>. <script>. function display_{jsDivId}(Core) {{; let obj = Core.parse({jsonContent});; Core.settings.HandleKeys = false;; Core.draw(""{jsDivId}"", obj, ""{jsDrawOptions}"");; }}. function script_load_{jsDivId}(src, on_error) {{; let script = document.createElement('script');; script.src = src;; script.onload = function() {{ display_{jsDivId}(JSROOT); }};; script.onerror = function() {{ script.remove(); on_error(); }};; document.head.appendChild(script);; }}. if (typeof requirejs !== 'undefined') {{. // We are in jupyter notebooks, use require.js which should be configured already; requirejs.config({{; paths: {{ 'JSRootCore' : [ 'build/jsroot', 'https://root.cern/js/7.7.4/build/jsroot', 'https://jsroot.gsi.de/7.7.4/build/jsroot' ] }}; }})(['JSRootCore'], function(Core) {{; display_{jsDivId}(Core);; }});. }} else if (typeof JSROOT !== 'undefined') {{. // JSROOT already loaded, just use it; display_{jsDivId}(JSROOT);. }} else {{. // We are in jupyterlab without require.js, directly loading jsroot; // Jupyterlab might be installed in a different base_url so we need to know it.; try {{; var base_url = JSON.parse(document.getElementById('jupyter-config-data').innerHTML).baseUrl;; }} catch(_) {{; var base_url = '/';; }}. // Try loading a local version of requirejs and fallback to cdn if not possible.; script_load_{jsDivId}(base_url + 'static/build/jsroot.js', function(){{; console.error('Fail to load JSROOT locally, please check your jupyter_notebook_config.py file');; script_load_{jsDivId}('https://root.cern/js/7.7.4/build/jsroot.js', function(){{; document.getElementById(""{jsDivId}"").innerHTML = ""Failed to load JSROOT"";; }});; }});; }}. </script>; """"""",MatchSource.CODE_COMMENT,bindings/jupyroot/python/JupyROOT/helpers/utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py:1522,Performance,load,load,1522,""""""". <div id=""{jsDivId}"" style=""width: {jsCanvasWidth}px; height: {jsCanvasHeight}px; position: relative"">; </div>. <script>. function display_{jsDivId}(Core) {{; let obj = Core.parse({jsonContent});; Core.settings.HandleKeys = false;; Core.draw(""{jsDivId}"", obj, ""{jsDrawOptions}"");; }}. function script_load_{jsDivId}(src, on_error) {{; let script = document.createElement('script');; script.src = src;; script.onload = function() {{ display_{jsDivId}(JSROOT); }};; script.onerror = function() {{ script.remove(); on_error(); }};; document.head.appendChild(script);; }}. if (typeof requirejs !== 'undefined') {{. // We are in jupyter notebooks, use require.js which should be configured already; requirejs.config({{; paths: {{ 'JSRootCore' : [ 'build/jsroot', 'https://root.cern/js/7.7.4/build/jsroot', 'https://jsroot.gsi.de/7.7.4/build/jsroot' ] }}; }})(['JSRootCore'], function(Core) {{; display_{jsDivId}(Core);; }});. }} else if (typeof JSROOT !== 'undefined') {{. // JSROOT already loaded, just use it; display_{jsDivId}(JSROOT);. }} else {{. // We are in jupyterlab without require.js, directly loading jsroot; // Jupyterlab might be installed in a different base_url so we need to know it.; try {{; var base_url = JSON.parse(document.getElementById('jupyter-config-data').innerHTML).baseUrl;; }} catch(_) {{; var base_url = '/';; }}. // Try loading a local version of requirejs and fallback to cdn if not possible.; script_load_{jsDivId}(base_url + 'static/build/jsroot.js', function(){{; console.error('Fail to load JSROOT locally, please check your jupyter_notebook_config.py file');; script_load_{jsDivId}('https://root.cern/js/7.7.4/build/jsroot.js', function(){{; document.getElementById(""{jsDivId}"").innerHTML = ""Failed to load JSROOT"";; }});; }});; }}. </script>; """"""",MatchSource.CODE_COMMENT,bindings/jupyroot/python/JupyROOT/helpers/utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py:1739,Performance,load,load,1739,""""""". <div id=""{jsDivId}"" style=""width: {jsCanvasWidth}px; height: {jsCanvasHeight}px; position: relative"">; </div>. <script>. function display_{jsDivId}(Core) {{; let obj = Core.parse({jsonContent});; Core.settings.HandleKeys = false;; Core.draw(""{jsDivId}"", obj, ""{jsDrawOptions}"");; }}. function script_load_{jsDivId}(src, on_error) {{; let script = document.createElement('script');; script.src = src;; script.onload = function() {{ display_{jsDivId}(JSROOT); }};; script.onerror = function() {{ script.remove(); on_error(); }};; document.head.appendChild(script);; }}. if (typeof requirejs !== 'undefined') {{. // We are in jupyter notebooks, use require.js which should be configured already; requirejs.config({{; paths: {{ 'JSRootCore' : [ 'build/jsroot', 'https://root.cern/js/7.7.4/build/jsroot', 'https://jsroot.gsi.de/7.7.4/build/jsroot' ] }}; }})(['JSRootCore'], function(Core) {{; display_{jsDivId}(Core);; }});. }} else if (typeof JSROOT !== 'undefined') {{. // JSROOT already loaded, just use it; display_{jsDivId}(JSROOT);. }} else {{. // We are in jupyterlab without require.js, directly loading jsroot; // Jupyterlab might be installed in a different base_url so we need to know it.; try {{; var base_url = JSON.parse(document.getElementById('jupyter-config-data').innerHTML).baseUrl;; }} catch(_) {{; var base_url = '/';; }}. // Try loading a local version of requirejs and fallback to cdn if not possible.; script_load_{jsDivId}(base_url + 'static/build/jsroot.js', function(){{; console.error('Fail to load JSROOT locally, please check your jupyter_notebook_config.py file');; script_load_{jsDivId}('https://root.cern/js/7.7.4/build/jsroot.js', function(){{; document.getElementById(""{jsDivId}"").innerHTML = ""Failed to load JSROOT"";; }});; }});; }}. </script>; """"""",MatchSource.CODE_COMMENT,bindings/jupyroot/python/JupyROOT/helpers/utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py:117,Availability,error,error,117,"'''FIXME!; This function is a workaround. On osx, it is impossible to link against; libzmq.so, among the others. The error is known and is; ""ld: can't link with bundle (MH_BUNDLE) only dylibs (MH_DYLIB)""; We cannot at the moment force Aclic to change the linker command in order; to exclude these libraries, so we launch a second root session to compile; the library, which we then load.; '''",MatchSource.CODE_COMMENT,bindings/jupyroot/python/JupyROOT/helpers/utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py:382,Performance,load,load,382,"'''FIXME!; This function is a workaround. On osx, it is impossible to link against; libzmq.so, among the others. The error is known and is; ""ld: can't link with bundle (MH_BUNDLE) only dylibs (MH_DYLIB)""; We cannot at the moment force Aclic to change the linker command in order; to exclude these libraries, so we launch a second root session to compile; the library, which we then load.; '''",MatchSource.CODE_COMMENT,bindings/jupyroot/python/JupyROOT/helpers/utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py:35,Deployability,update,update,35,"# all other objects do not support update and can be ignored",MatchSource.CODE_COMMENT,bindings/jupyroot/python/JupyROOT/helpers/utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/kernel/utils.py:12,Performance,load,load,12,'''Class to load JupyROOT Magics''',MatchSource.CODE_COMMENT,bindings/jupyroot/python/JupyROOT/kernel/utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/kernel/utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/kernel/magics/cppmagic.py:45,Availability,error,error,45,"#NOTE:actually JupyROOT is not capturing the error on %%cpp -d if the function is wrong",MatchSource.CODE_COMMENT,bindings/jupyroot/python/JupyROOT/kernel/magics/cppmagic.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/kernel/magics/cppmagic.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/setup.py:31,Usability,guid,guides,31,"# https://packaging.python.org/guides/single-sourcing-package-version/",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/setup.py:7,Deployability,install,install,7,"# base install",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/setup.py:62,Availability,avail,available,62,"# force build of the .pch underneath the cppyy package if not available yet",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/setup.py:112,Deployability,install,installed,112,"# TODO: numba_extensions will load all extensions even if the package; # itself is not otherwise imported, just installed; in the case of cppyy,; # that is currently too heavy (and breaks on conda); #entry_points={; # 'numba_extensions': [; # 'init = cppyy.numba_ext:_init_extension',; # ],; #},",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/setup.py:30,Performance,load,load,30,"# TODO: numba_extensions will load all extensions even if the package; # itself is not otherwise imported, just installed; in the case of cppyy,; # that is currently too heavy (and breaks on conda); #entry_points={; # 'numba_extensions': [; # 'init = cppyy.numba_ext:_init_extension',; # ],; #},",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:34,Testability,benchmark,benchmark,34,"""""""; def test_{0}_free_empty_call(benchmark):; benchmark({1}.empty_call); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:47,Testability,benchmark,benchmark,47,"""""""; def test_{0}_free_empty_call(benchmark):; benchmark({1}.empty_call); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:34,Testability,benchmark,benchmark,34,"""""""; def test_{0}_inst_empty_call(benchmark):; inst = {1}.EmptyCall(); benchmark(call_instance_empty, inst); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:71,Testability,benchmark,benchmark,71,"""""""; def test_{0}_inst_empty_call(benchmark):; inst = {1}.EmptyCall(); benchmark(call_instance_empty, inst); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:35,Testability,benchmark,benchmark,35,"""""""; def test_{0}_free_take_an_int(benchmark):; benchmark({1}.take_an_int, 1); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:48,Testability,benchmark,benchmark,48,"""""""; def test_{0}_free_take_an_int(benchmark):; benchmark({1}.take_an_int, 1); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:37,Testability,benchmark,benchmark,37,"""""""; def test_{0}_free_take_a_double(benchmark):; benchmark({1}.take_a_double, 1.); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:50,Testability,benchmark,benchmark,50,"""""""; def test_{0}_free_take_a_double(benchmark):; benchmark({1}.take_a_double, 1.); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:37,Testability,benchmark,benchmark,37,"""""""; def test_{0}_free_take_a_struct(benchmark):; benchmark({1}.take_a_struct, {1}.Value()); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:50,Testability,benchmark,benchmark,50,"""""""; def test_{0}_free_take_a_struct(benchmark):; benchmark({1}.take_a_struct, {1}.Value()); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:35,Testability,benchmark,benchmark,35,"""""""; def test_{0}_inst_take_an_int(benchmark):; inst = {1}.TakeAValue(); benchmark(call_instance_take_an_int, inst, 1); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:73,Testability,benchmark,benchmark,73,"""""""; def test_{0}_inst_take_an_int(benchmark):; inst = {1}.TakeAValue(); benchmark(call_instance_take_an_int, inst, 1); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:37,Testability,benchmark,benchmark,37,"""""""; def test_{0}_inst_take_a_double(benchmark):; inst = {1}.TakeAValue(); benchmark(call_instance_take_a_double, inst, 1.); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:75,Testability,benchmark,benchmark,75,"""""""; def test_{0}_inst_take_a_double(benchmark):; inst = {1}.TakeAValue(); benchmark(call_instance_take_a_double, inst, 1.); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:37,Testability,benchmark,benchmark,37,"""""""; def test_{0}_inst_take_a_struct(benchmark):; inst = {1}.TakeAValue(); benchmark(call_instance_take_a_struct, inst, {1}.Value()); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:75,Testability,benchmark,benchmark,75,"""""""; def test_{0}_inst_take_a_struct(benchmark):; inst = {1}.TakeAValue(); benchmark(call_instance_take_a_struct, inst, {1}.Value()); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:32,Testability,benchmark,benchmark,32,"""""""; def test_{0}_inst_pass_int(benchmark):; inst = {1}.TakeAValue(); benchmark(call_instance_pass_int, inst, 1); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:70,Testability,benchmark,benchmark,70,"""""""; def test_{0}_inst_pass_int(benchmark):; inst = {1}.TakeAValue(); benchmark(call_instance_pass_int, inst, 1); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:31,Testability,benchmark,benchmark,31,"""""""; def test_{0}_free_do_work(benchmark):; benchmark({1}.do_work, 1.); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:44,Testability,benchmark,benchmark,44,"""""""; def test_{0}_free_do_work(benchmark):; benchmark({1}.do_work, 1.); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:31,Testability,benchmark,benchmark,31,"""""""; def test_{0}_inst_do_work(benchmark):; inst = {1}.DoWork(); benchmark(call_instance_do_work, inst); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:65,Testability,benchmark,benchmark,65,"""""""; def test_{0}_inst_do_work(benchmark):; inst = {1}.DoWork(); benchmark(call_instance_do_work, inst); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:32,Testability,benchmark,benchmark,32,"""""""; def test_{0}_inst_overload(benchmark):; inst = {1}.OverloadedCall(); benchmark(call_instance_overload, inst); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:74,Testability,benchmark,benchmark,74,"""""""; def test_{0}_inst_overload(benchmark):; inst = {1}.OverloadedCall(); benchmark(call_instance_overload, inst); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_runvector.py:29,Testability,benchmark,benchmark,29,"""""""; def test_{0}_stl_vector(benchmark):; benchmark(sum, {1}.global_vector); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_runvector.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_runvector.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_runvector.py:42,Testability,benchmark,benchmark,42,"""""""; def test_{0}_stl_vector(benchmark):; benchmark(sum, {1}.global_vector); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/bench/bench_runvector.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_runvector.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py:56,Deployability,configurat,configuration,56,"# -*- coding: utf-8 -*-; #; # cppyy documentation build configuration file, created by; # sphinx-quickstart on Wed Jul 12 14:35:45 2017.; #; # This file is execfile()d with the current directory set to its; # containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/doc/source/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py:258,Deployability,configurat,configuration,258,"# -*- coding: utf-8 -*-; #; # cppyy documentation build configuration file, created by; # sphinx-quickstart on Wed Jul 12 14:35:45 2017.; #; # This file is execfile()d with the current directory set to its; # containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/doc/source/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py:332,Deployability,configurat,configuration,332,"# -*- coding: utf-8 -*-; #; # cppyy documentation build configuration file, created by; # sphinx-quickstart on Wed Jul 12 14:35:45 2017.; #; # This file is execfile()d with the current directory set to its; # containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/doc/source/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py:56,Modifiability,config,configuration,56,"# -*- coding: utf-8 -*-; #; # cppyy documentation build configuration file, created by; # sphinx-quickstart on Wed Jul 12 14:35:45 2017.; #; # This file is execfile()d with the current directory set to its; # containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/doc/source/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py:258,Modifiability,config,configuration,258,"# -*- coding: utf-8 -*-; #; # cppyy documentation build configuration file, created by; # sphinx-quickstart on Wed Jul 12 14:35:45 2017.; #; # This file is execfile()d with the current directory set to its; # containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/doc/source/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py:332,Modifiability,config,configuration,332,"# -*- coding: utf-8 -*-; #; # cppyy documentation build configuration file, created by; # sphinx-quickstart on Wed Jul 12 14:35:45 2017.; #; # This file is execfile()d with the current directory set to its; # containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/doc/source/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py:297,Deployability,configurat,configuration,297,"# If extensions (or modules to document with autodoc) are in another directory,; # add these directories to sys.path here. If the directory is relative to the; # documentation root, use os.path.abspath to make it absolute, like shown here.; #sys.path.insert(0, os.path.abspath('.')); # -- General configuration ------------------------------------------------; # If your documentation needs a minimal Sphinx version, state it here.; #needs_sphinx = '1.0'; # Add any Sphinx extension module names here, as strings. They can be; # extensions coming with Sphinx (named 'sphinx.ext.*') or your custom; # ones.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/doc/source/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py:297,Modifiability,config,configuration,297,"# If extensions (or modules to document with autodoc) are in another directory,; # add these directories to sys.path here. If the directory is relative to the; # documentation root, use os.path.abspath to make it absolute, like shown here.; #sys.path.insert(0, os.path.abspath('.')); # -- General configuration ------------------------------------------------; # If your documentation needs a minimal Sphinx version, state it here.; #needs_sphinx = '1.0'; # Add any Sphinx extension module names here, as strings. They can be; # extensions coming with Sphinx (named 'sphinx.ext.*') or your custom; # ones.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/doc/source/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py:97,Deployability,release,release,97,"# The version info for the project you're documenting, acts as replacement for; # |version| and |release|, also used in various other places throughout the; # built documents.; #; # The short X.Y version.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/doc/source/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py:122,Integrability,message,message,122,"# A list of ignored prefixes for module index sorting.; #modindex_common_prefix = []; # If true, keep warnings as ""system message"" paragraphs in the built documents.; #keep_warnings = False; # If true, `todo` and `todoList` produce output, else they produce nothing.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/doc/source/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py:112,Availability,avail,available,112,"# Theme options are theme-specific and customize the look and feel of a theme; # further. For a list of options available for each theme, see the; # documentation.; #html_theme_options = {}; # Add any paths that contain custom themes here, relative to this directory.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/doc/source/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py:85,Deployability,release,release,85,"# The name for this set of Sphinx documents. If None, it defaults to; # ""<project> v<release> documentation"".; #html_title = None; # A shorter title for the navigation bar. Default is the same as html_title.; #html_short_title = None; # The name of an image file (relative to this directory) to place at the top; # of the sidebar.; #html_logo = None; # The name of an image file (within the static path) to use as favicon of the; # docs. This file should be a Windows icon file (.ico) being 16x16 or 32x32; # pixels large.; #html_favicon = None; # Add any paths that contain custom static files (such as style sheets) here,; # relative to this directory. They are copied after the builtin static files,; # so a file named ""default.css"" will overwrite the builtin ""default.css"".",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/doc/source/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py:233,Deployability,update,updated,233,"# Add any extra paths that contain custom files (such as robots.txt or; # .htaccess) here, relative to this directory. These files are copied; # directly to the root of the documentation.; #html_extra_path = []; # If not '', a 'Last updated on:' timestamp is inserted at every page bottom,; # using the given strftime format.; #html_last_updated_fmt = '%b %d, %Y'; # If true, SmartyPants will be used to convert quotes and dashes to; # typographically correct entities.; #html_use_smartypants = True; # Custom sidebar templates, maps document names to template names.; #html_sidebars = {}; # Additional templates that should be rendered to pages, maps page names to; # template names.; #html_additional_pages = {}; # If false, no module index is generated.; #html_domain_indices = True; # If false, no index is generated.; #html_use_index = True; # If true, the index is split into individual pages for each letter.; #html_split_index = False; # If true, links to the reST sources are added to the pages.; #html_show_sourcelink = True; # If true, ""Created using Sphinx"" is shown in the HTML footer. Default is True.; #html_show_sphinx = True; # If true, ""(C) Copyright ..."" is shown in the HTML footer. Default is True.; #html_show_copyright = True; # If true, an OpenSearch description file will be output, and all pages will; # contain a <link> tag referring to it. The value of this option must be the; # base URL from which the finished HTML is served.; #html_use_opensearch = ''; # This is the file name suffix for HTML files (e.g. "".xhtml"").; #html_file_suffix = None; # Language to be used for generating the HTML full-text search index.; # Sphinx supports the following languages:; # 'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'; # 'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'; #html_search_language = 'en'; # A dictionary with options for the search language support, empty by default.; # Now only 'ja' uses this config value; #html_search_options = {'type': 'default'}; # The name of a j",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/doc/source/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py:2033,Deployability,configurat,configuration,2033,"'', a 'Last updated on:' timestamp is inserted at every page bottom,; # using the given strftime format.; #html_last_updated_fmt = '%b %d, %Y'; # If true, SmartyPants will be used to convert quotes and dashes to; # typographically correct entities.; #html_use_smartypants = True; # Custom sidebar templates, maps document names to template names.; #html_sidebars = {}; # Additional templates that should be rendered to pages, maps page names to; # template names.; #html_additional_pages = {}; # If false, no module index is generated.; #html_domain_indices = True; # If false, no index is generated.; #html_use_index = True; # If true, the index is split into individual pages for each letter.; #html_split_index = False; # If true, links to the reST sources are added to the pages.; #html_show_sourcelink = True; # If true, ""Created using Sphinx"" is shown in the HTML footer. Default is True.; #html_show_sphinx = True; # If true, ""(C) Copyright ..."" is shown in the HTML footer. Default is True.; #html_show_copyright = True; # If true, an OpenSearch description file will be output, and all pages will; # contain a <link> tag referring to it. The value of this option must be the; # base URL from which the finished HTML is served.; #html_use_opensearch = ''; # This is the file name suffix for HTML files (e.g. "".xhtml"").; #html_file_suffix = None; # Language to be used for generating the HTML full-text search index.; # Sphinx supports the following languages:; # 'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'; # 'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'; #html_search_language = 'en'; # A dictionary with options for the search language support, empty by default.; # Now only 'ja' uses this config value; #html_search_options = {'type': 'default'}; # The name of a javascript file (relative to the configuration directory) that; # implements a search results scorer. If empty, the default will be used.; #html_search_scorer = 'scorer.js'; # Output file base name for HTML help builder.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/doc/source/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py:1926,Modifiability,config,config,1926,"'', a 'Last updated on:' timestamp is inserted at every page bottom,; # using the given strftime format.; #html_last_updated_fmt = '%b %d, %Y'; # If true, SmartyPants will be used to convert quotes and dashes to; # typographically correct entities.; #html_use_smartypants = True; # Custom sidebar templates, maps document names to template names.; #html_sidebars = {}; # Additional templates that should be rendered to pages, maps page names to; # template names.; #html_additional_pages = {}; # If false, no module index is generated.; #html_domain_indices = True; # If false, no index is generated.; #html_use_index = True; # If true, the index is split into individual pages for each letter.; #html_split_index = False; # If true, links to the reST sources are added to the pages.; #html_show_sourcelink = True; # If true, ""Created using Sphinx"" is shown in the HTML footer. Default is True.; #html_show_sphinx = True; # If true, ""(C) Copyright ..."" is shown in the HTML footer. Default is True.; #html_show_copyright = True; # If true, an OpenSearch description file will be output, and all pages will; # contain a <link> tag referring to it. The value of this option must be the; # base URL from which the finished HTML is served.; #html_use_opensearch = ''; # This is the file name suffix for HTML files (e.g. "".xhtml"").; #html_file_suffix = None; # Language to be used for generating the HTML full-text search index.; # Sphinx supports the following languages:; # 'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'; # 'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'; #html_search_language = 'en'; # A dictionary with options for the search language support, empty by default.; # Now only 'ja' uses this config value; #html_search_options = {'type': 'default'}; # The name of a javascript file (relative to the configuration directory) that; # implements a search results scorer. If empty, the default will be used.; #html_search_scorer = 'scorer.js'; # Output file base name for HTML help builder.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/doc/source/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py:2033,Modifiability,config,configuration,2033,"'', a 'Last updated on:' timestamp is inserted at every page bottom,; # using the given strftime format.; #html_last_updated_fmt = '%b %d, %Y'; # If true, SmartyPants will be used to convert quotes and dashes to; # typographically correct entities.; #html_use_smartypants = True; # Custom sidebar templates, maps document names to template names.; #html_sidebars = {}; # Additional templates that should be rendered to pages, maps page names to; # template names.; #html_additional_pages = {}; # If false, no module index is generated.; #html_domain_indices = True; # If false, no index is generated.; #html_use_index = True; # If true, the index is split into individual pages for each letter.; #html_split_index = False; # If true, links to the reST sources are added to the pages.; #html_show_sourcelink = True; # If true, ""Created using Sphinx"" is shown in the HTML footer. Default is True.; #html_show_sphinx = True; # If true, ""(C) Copyright ..."" is shown in the HTML footer. Default is True.; #html_show_copyright = True; # If true, an OpenSearch description file will be output, and all pages will; # contain a <link> tag referring to it. The value of this option must be the; # base URL from which the finished HTML is served.; #html_use_opensearch = ''; # This is the file name suffix for HTML files (e.g. "".xhtml"").; #html_file_suffix = None; # Language to be used for generating the HTML full-text search index.; # Sphinx supports the following languages:; # 'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'; # 'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'; #html_search_language = 'en'; # A dictionary with options for the search language support, empty by default.; # Now only 'ja' uses this config value; #html_search_options = {'type': 'default'}; # The name of a javascript file (relative to the configuration directory) that; # implements a search results scorer. If empty, the default will be used.; #html_search_scorer = 'scorer.js'; # Output file base name for HTML help builder.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/doc/source/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py:165,Performance,optimiz,optimized,165,"# The basename for the epub file. It defaults to the project name.; #epub_basename = project; # The HTML theme for the epub output. Since the default themes are not optimized; # for small screen space, using the same theme for HTML and epub output is; # usually not wise. This defaults to 'epub', a theme designed to save visual; # space.; #epub_theme = 'epub'; # The language of the text. It defaults to the language option; # or 'en' if the language is not set.; #epub_language = ''; # The scheme of the identifier. Typical schemes are ISBN or URL.; #epub_scheme = ''; # The unique identifier of the text. This can be a ISBN number; # or the project homepage.; #epub_identifier = ''; # A unique identification for the text.; #epub_uid = ''; # A tuple containing the cover image and cover page html template filenames.; #epub_cover = (); # A sequence of (type, uri, title) tuples for the guide element of content.opf.; #epub_guide = (); # HTML files that should be inserted before the pages created by sphinx.; # The format is a list of tuples containing the path and title.; #epub_pre_files = []; # HTML files shat should be inserted after the pages created by sphinx.; # The format is a list of tuples containing the path and title.; #epub_post_files = []; # A list of files that should not be packed into the epub file.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/doc/source/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py:889,Usability,guid,guide,889,"# The basename for the epub file. It defaults to the project name.; #epub_basename = project; # The HTML theme for the epub output. Since the default themes are not optimized; # for small screen space, using the same theme for HTML and epub output is; # usually not wise. This defaults to 'epub', a theme designed to save visual; # space.; #epub_theme = 'epub'; # The language of the text. It defaults to the language option; # or 'en' if the language is not set.; #epub_language = ''; # The scheme of the identifier. Typical schemes are ISBN or URL.; #epub_scheme = ''; # The unique identifier of the text. This can be a ISBN number; # or the project homepage.; #epub_identifier = ''; # A unique identification for the text.; #epub_uid = ''; # A tuple containing the cover image and cover page html template filenames.; #epub_cover = (); # A sequence of (type, uri, title) tuples for the guide element of content.opf.; #epub_guide = (); # HTML files that should be inserted before the pages created by sphinx.; # The format is a list of tuples containing the path and title.; #epub_pre_files = []; # HTML files shat should be inserted after the pages created by sphinx.; # The format is a list of tuples containing the path and title.; #epub_post_files = []; # A list of files that should not be packed into the epub file.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/doc/source/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/conf.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/installer/cppyy_monkey_patch.py:9,Deployability,patch,patch,9,"# monkey patch to be able to select a specific backend based on PyPy's version,; # which is not possible in the pyproject.toml file as there is currently no; # marker for it (this may change, after which this file can be removed)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/installer/cppyy_monkey_patch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/installer/cppyy_monkey_patch.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/installer/cppyy_monkey_patch.py:37,Deployability,install,installation,37,"# the following ensures proper build/installation order, after which the normal; # install through setup.py picks up their wheels from the cache (TODO: note the; # duplication here with setup.py; find a better way)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/installer/cppyy_monkey_patch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/installer/cppyy_monkey_patch.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/installer/cppyy_monkey_patch.py:83,Deployability,install,install,83,"# the following ensures proper build/installation order, after which the normal; # install through setup.py picks up their wheels from the cache (TODO: note the; # duplication here with setup.py; find a better way)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/installer/cppyy_monkey_patch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/installer/cppyy_monkey_patch.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/installer/cppyy_monkey_patch.py:139,Performance,cache,cache,139,"# the following ensures proper build/installation order, after which the normal; # install through setup.py picks up their wheels from the cache (TODO: note the; # duplication here with setup.py; find a better way)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/installer/cppyy_monkey_patch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/installer/cppyy_monkey_patch.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py:15,Security,access,access,15,"# special case access to unboxing/boxing APIs",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py:96,Safety,detect,detect,96,"# If the user explicitly passes an argument using numba CPointer, the regex match is used; # to detect the pass by reference since the dispatcher always returns typeref[val*]",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py:19,Safety,redund,redundancy,19,"#TODO : Remove the redundancy of __overload__ matching and use this function to only obtain the address given the matched overload",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py:111,Usability,simpl,simply,111,"# the function pointer of this overload can not be exactly typed, but; # only the storage size is relevant, so simply use a void*",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py:142,Performance,load,loads,142,"# TODO: the following relies on the fact that numba will first lower the; # field access, then immediately lower the call; and that the `val` loads; # the struct representing the C++ object. Neither need be stable.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py:82,Security,access,access,82,"# TODO: the following relies on the fact that numba will first lower the; # field access, then immediately lower the call; and that the `val` loads; # the struct representing the C++ object. Neither need be stable.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py:174,Modifiability,flexible,flexible,174,"# TODO : Should the address have to be passed here and stored in meminfo; # value: representation inside function body. Maybe stored in stack.; # The representation here are flexible.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py:121,Usability,simpl,simply,121,"# The struct model relies on data being a POD, but for C++ objects, there; # can be hidden data (e.g. vtable, thunks, or simply private members), and; # the alignment of Cling and Numba also need not be the same. Therefore, the; # struct is split in a series of byte members to get the total size right; # and to allow addressing at the correct offsets.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py:21,Security,access,accessed,21,"# proxies are always accessed by pointer, which are not composites",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py:185,Modifiability,flexible,flexible,185,"# data: representation used when storing into containers (e.g. arrays).; # TODO ...; # value: representation inside function body. Maybe stored in stack.; # The representation here are flexible.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py:203,Performance,load,loading,203,"# the C++ object, b/c through a proxy, is always accessed by pointer; it is represented; # as a pointer to POD to allow indexing by Numba for data member type checking, but the; # address offsetting for loading data member values is independent (see get(), below),; # so the exact layout need not match a POD; # TODO: this doesn't work for real PODs, b/c those are unpacked into their elements and; # passed through registers",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py:49,Security,access,accessed,49,"# the C++ object, b/c through a proxy, is always accessed by pointer; it is represented; # as a pointer to POD to allow indexing by Numba for data member type checking, but the; # address offsetting for loading data member values is independent (see get(), below),; # so the exact layout need not match a POD; # TODO: this doesn't work for real PODs, b/c those are unpacked into their elements and; # passed through registers",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py:66,Security,access,access,66,"# return: representation used for return argument.; # TODO ...; # access to public data members",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py:29,Integrability,wrap,wrapping,29,"# C++ object to Python proxy wrapping for returns from Numba trace",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_cpython_cppyy.py:17,Integrability,depend,dependency,17,"# first load the dependency libraries of the backend, then pull in the; # libcppyy extension module",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/_cpython_cppyy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_cpython_cppyy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_cpython_cppyy.py:8,Performance,load,load,8,"# first load the dependency libraries of the backend, then pull in the; # libcppyy extension module",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/_cpython_cppyy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_cpython_cppyy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_cpython_cppyy.py:13,Security,expose,expose,13,"# explicitly expose APIs from libcppyy",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/_cpython_cppyy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_cpython_cppyy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_cpython_cppyy.py:83,Usability,simpl,simply,83,"# TODO: this reliese on CPPOverload cooking up a func_code object, which atm; # is simply not implemented for p3 :/; # convince inspect that cppyy method proxies are possible drop-ins for python; # methods and classes for pydoc",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/_cpython_cppyy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_cpython_cppyy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_cpython_cppyy.py:49,Availability,avail,available,49,"# special case pythonization (builtin_map is not available from the C-API)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/_cpython_cppyy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_cpython_cppyy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_pypy_cppyy.py:17,Integrability,depend,dependency,17,"# first load the dependency libraries of the backend, then; # pull in the built-in low-level cppyy",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/_pypy_cppyy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_pypy_cppyy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_pypy_cppyy.py:8,Performance,load,load,8,"# first load the dependency libraries of the backend, then; # pull in the built-in low-level cppyy",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/_pypy_cppyy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_pypy_cppyy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_pypy_cppyy.py:104,Availability,avail,available,104,"# some older versions can be fixed up through a compatibility; # module on the python side; load it, if available",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/_pypy_cppyy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_pypy_cppyy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_pypy_cppyy.py:92,Performance,load,load,92,"# some older versions can be fixed up through a compatibility; # module on the python side; load it, if available",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/_pypy_cppyy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_pypy_cppyy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_pythonization.py:33,Integrability,interface,interfaces,33,"# prevent auto-casting (e.g. for interfaces)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/_pythonization.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_pythonization.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_pythonization.py:12,Energy Efficiency,reduce,reduce,12,"# mapper to reduce template expression trees",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/_pythonization.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_pythonization.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_pythonization.py:26,Energy Efficiency,reduce,reduced,26,"""""""Reduce <reducable> to <reduced> type on returns from function calls.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/_pythonization.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_pythonization.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_stdcpp_fix.py:97,Performance,load,loading,97,"# It may be that the interpreter (wether python or pypy-c) was not linked; # with C++; force its loading before doing anything else (note that not; # linking with C++ spells trouble anyway for any C++ libraries ...)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/_stdcpp_fix.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_stdcpp_fix.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_typemap.py:107,Energy Efficiency,charge,charge,107,"# from six.py ---; # Copyright (c) 2010-2017 Benjamin Peterson; #; # Permission is hereby granted, free of charge, to any person obtaining a copy; # of this software and associated documentation files (the ""Software""), to deal; # in the Software without restriction, including without limitation the rights; # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell; # copies of the Software, and to permit persons to whom the Software is; # furnished to do so, subject to the following conditions:; #; # The above copyright notice and this permission notice shall be included in all; # copies or substantial portions of the Software.; #; # THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE; # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER; # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,; # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE; # SOFTWARE.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/_typemap.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_typemap.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py:2,Performance,load,load,2,"# load and jit a header file",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py:2,Performance,load,load,2,"# load and jit a C header file",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py:2,Performance,load,load,2,"# load a shared library",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py:22,Modifiability,inherit,inheritance,22,"# helper for multiple inheritance",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py:132,Performance,perform,performant,132,"# pythonization of tuple; TODO: placed here for convenience, but a custom case; # for tuples on each platform can be made much more performant ...",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py:57,Usability,simpl,simpler,57,"# pythonization of std::string; placed here because it's simpler to write the; # custom ""npos"" object (to allow easy result checking of find/rfind) in Python",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py:5,Integrability,interface,interface,5,"#--- interface to Cling ------------------------------------------------------",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py:14,Performance,load,load,14,"""""""Explicitly load a shared library.""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py:12,Availability,error,error,12,"# raises on error",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py:35,Availability,avail,available,35,"""""""Add a path to the include paths available to Cling.""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py:42,Availability,avail,available,42,"""""""Add a path to the library search paths available to Cling.""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py:6,Security,access,access,6,"# add access to Python C-API headers",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py:6,Security,access,access,6,"# add access to extra headers for dispatcher (CPyCppyy only (?))",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py:36,Modifiability,inherit,inheritance,36,"""""""Resolve metaclasses for multiple inheritance.""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy_compat/__init__.py:8,Performance,load,load,8,"# first load and move the builtin cppyy module",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy_compat/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy_compat/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy_compat/__init__.py:17,Performance,load,load,17,"# now locate and load the pip cppyy module",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/python/cppyy_compat/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy_compat/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/assert_interactive.py:19,Availability,avail,available,19,"# full lazy lookup available",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/assert_interactive.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/assert_interactive.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:27,Modifiability,inherit,inheritance,27,"""""""Test binding of a basic inheritance structure""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:8,Security,access,access,8,"""""""Test access to namespaces and inner classes""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:46,Modifiability,inherit,inheritence,46,"""""""Test data member access when using virtual inheritence""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:20,Security,access,access,20,"""""""Test data member access when using virtual inheritence""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:45,Modifiability,inherit,inheritance,45,"""""""Test reference passing when using virtual inheritance""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:1,Testability,assert,assert,1,"#assert o == cppyy.bind_object(cobj, some_concrete_class); #assert o == cppyy.bind_object(cobj, type(o)); #assert o == cppyy.bind_object(cobj, o.__class__); #assert o == cppyy.bind_object(cobj, ""some_concrete_class"")",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:60,Testability,assert,assert,60,"#assert o == cppyy.bind_object(cobj, some_concrete_class); #assert o == cppyy.bind_object(cobj, type(o)); #assert o == cppyy.bind_object(cobj, o.__class__); #assert o == cppyy.bind_object(cobj, ""some_concrete_class"")",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:107,Testability,assert,assert,107,"#assert o == cppyy.bind_object(cobj, some_concrete_class); #assert o == cppyy.bind_object(cobj, type(o)); #assert o == cppyy.bind_object(cobj, o.__class__); #assert o == cppyy.bind_object(cobj, ""some_concrete_class"")",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:158,Testability,assert,assert,158,"#assert o == cppyy.bind_object(cobj, some_concrete_class); #assert o == cppyy.bind_object(cobj, type(o)); #assert o == cppyy.bind_object(cobj, o.__class__); #assert o == cppyy.bind_object(cobj, ""some_concrete_class"")",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:41,Modifiability,inherit,inheritance,41,"""""""Test calling of methods from multiple inheritance""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:51,Availability,down,downcast,51,"""""""Test that a pointer to base return does an auto-downcast""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:13,Availability,down,downcast,13,"""""""Test auto-downcast in adverse inheritance situation""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:33,Modifiability,inherit,inheritance,33,"""""""Test auto-downcast in adverse inheritance situation""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:21,Usability,simpl,simply,21,"# the following will simply fail if there is a naming problem (e.g.; # std::, allocator<int>, etc., etc.); note the parsing required ...",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:7,Performance,cache,cached,7,"# only cached for global functions and in principle should; # not be needed anymore ...",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:58,Availability,error,error,58,"# print through base class (used to fail with compilation error)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:138,Testability,assert,assert,138,"# TODO: currently only classes are checked; typedefs of builtin types are; # mapped through the type mapper and as such can be anything; #assert ns.A.Val != ns.B.Val; #assert type(ns.A.Val(1)) == int; #assert type(ns.B.Val(1)) == float",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:168,Testability,assert,assert,168,"# TODO: currently only classes are checked; typedefs of builtin types are; # mapped through the type mapper and as such can be anything; #assert ns.A.Val != ns.B.Val; #assert type(ns.A.Val(1)) == int; #assert type(ns.B.Val(1)) == float",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:202,Testability,assert,assert,202,"# TODO: currently only classes are checked; typedefs of builtin types are; # mapped through the type mapper and as such can be anything; #assert ns.A.Val != ns.B.Val; #assert type(ns.A.Val(1)) == int; #assert type(ns.B.Val(1)) == float",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_boost.py:2,Testability,test,test,2,"# test both by-ref and by rvalue",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_boost.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_boost.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_boost.py:16,Testability,assert,assert,16,"# move forced; #assert len(extract) == 0 # not guaranteed by the standard; # TODO: we hit boost::any_cast<int>(boost::any* operand) instead; # of the reference version which raises",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_boost.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_boost.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_concurrent.py:25,Safety,timeout,timeout,25,"# join the thread with a timeout after 0.1s",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_concurrent.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_concurrent.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_conversions.py:10,Availability,error,error,10,"""""""Verify error handling""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_conversions.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_conversions.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py:13,Security,access,access,13,"""""""Usage and access of std::shared/unique_ptr<>""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py:69,Testability,assert,assert,69,"# TODO: why does the following fail, but succeed for shared_ptr??; # assert move_unique_ptr(std.move(dd)) == 100",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py:2,Testability,test,test,2,"# test existence",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py:2,Testability,assert,assert,2,"# assert not hasattr(cppyy.gbl, 'nullptr')",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py:19,Testability,test,tested,19,"# further usage is tested in datatypes.py:test15_nullptr_passing",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py:88,Testability,test,testing,88,"# order of moving and normal functions are reversed in 1, 2, for; # overload resolution testing",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py:42,Availability,error,error,42,"# following used to fail with compilation error",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py:15,Security,hash,hash,15,"""""""Use of std::hash""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py:5,Testability,test,test,5,"# to test effect of caching",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py:34,Modifiability,inherit,inherited,34,"# Test whether this attribute was inherited",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:30,Usability,simpl,simple,30,"""""""Test ability to override a simple function""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:30,Usability,simpl,simple,30,"""""""Test ability to override a simple function with an abstract base""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:13,Integrability,message,message,13,"# clarifying message",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:10,Availability,error,errors,10,"""""""Python errors should propagate through wrapper""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:42,Integrability,wrap,wrapper,42,"""""""Python errors should propagate through wrapper""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:138,Usability,clear,clear,138,"""""""\; namespace CrossInheritance {; std::string call_base1(Base1* b) {; try {; b->sum_value(-7);; } catch (CPyCppyy::PyException& e) {; e.clear();; return e.what();; }; return """";; } }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:14,Availability,error,errors,14,"""""""Conversion errors should be Python exceptions""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:2,Testability,test,test,2,"# test counter",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:31,Security,access,access,31,"""""""Derived classes should have access to protected members""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:42,Security,access,access,42,"""""""Python derived class of C++ class with access controlled cctor""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:131,Integrability,message,message,131,"""""""namespace abstract_classes {; class Base {; public:; virtual ~Base() {}; virtual std::string whoami() = 0;; virtual std::string message() = 0;; };. std::string whois(Base& obj) { return obj.whoami(); }; std::string saywot(Base& obj) { return obj.message(); } }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:249,Integrability,message,message,249,"""""""namespace abstract_classes {; class Base {; public:; virtual ~Base() {}; virtual std::string whoami() = 0;; virtual std::string message() = 0;; };. std::string whois(Base& obj) { return obj.whoami(); }; std::string saywot(Base& obj) { return obj.message(); } }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:27,Modifiability,inherit,inheritance,27,"""""""Hierarchy with multiple inheritance on the C++ side""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:18,Modifiability,inherit,inheritance,18,"""""""Basic multiple inheritance""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:12,Modifiability,inherit,inheritance,12,"""""""Multiple inheritance with constructors""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:12,Modifiability,inherit,inheritance,12,"""""""Multiple inheritance with defaults""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:32,Availability,error,error,32,"# used to fail with compilation error",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:32,Availability,error,error,32,"# used to fail with compilation error",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:32,Availability,error,error,32,"# used to fail with compilation error",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:14,Testability,test,test,14,"""""""Regression test: default ctor did not get added""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:8,Modifiability,inherit,inheritance,8,"""""""Deep inheritance hierarchy""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:14,Modifiability,inherit,inheritance,14,"""""""Deep multi-inheritance hierarchy""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:20,Security,access,access,20,"""""""Inheritance with access and overload complications""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:77,Usability,simpl,simply,77,"# introduce the actual component type; would have been a header,; # but this simply has to match what is in crossinheritance.cxx",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:14,Availability,down,down-cast,14,"# causes auto down-cast",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:1,Testability,assert,assert,1,"#assert type(cmp2) != PyComponentWithValue; # rebind cmp2 to the python type",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:8,Security,access,access,8,"""""""Read access to instance public data and verify values""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:10,Security,access,access,10,"# can not access an instance member on the class",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:14,Security,access,access,14,"""""""Test write access to instance public data and verify values""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:2,Testability,test,test,2,"# test arrays in mixed order, to give overload resolution a workout",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:13,Security,access,access,13,"""""""Test read access to class public data and verify values""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:14,Security,access,access,14,"""""""Test write access to class public data and verify values""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:8,Security,access,access,8,"""""""Test access to a global builtin type""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:8,Security,access,access,8,"""""""Test access to global objects by value""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:8,Security,access,access,8,"""""""Test access of global objects through a pointer""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:8,Security,access,access,8,"""""""Test access to enums""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:24,Security,access,accessible,24,"# test that the enum is accessible as a type",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:2,Testability,test,test,2,"# test that the enum is accessible as a type",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:12,Security,access,accessible,12,"# test type accessible",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:2,Testability,test,test,2,"# test type accessible",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:8,Security,access,accessibility,8,"""""""Enum accessibility and scopes""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:8,Security,access,access,8,"""""""Test access to and return of PODs""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:194,Energy Efficiency,schedul,schedule,194,"# the following works as a side-effect of a workaround for vector calls and; # it is probably preferable to have it working, so leave the discrepancy for; # now: python's aggressive end-of-life schedule will catch up soon enough",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:156,Integrability,interface,interface,156,"# The following create a unique type for fixed-size C arrays: ctypes.c_char_Array_9; # and neither inherits from a non-sized type nor implements the buffer interface.; # As such, it can't be handled. TODO?; #pbuf = ctypes.create_string_buffer(len(buf), buf); #assert f(pbuf, len(buf)) == total",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:99,Modifiability,inherit,inherits,99,"# The following create a unique type for fixed-size C arrays: ctypes.c_char_Array_9; # and neither inherits from a non-sized type nor implements the buffer interface.; # As such, it can't be handled. TODO?; #pbuf = ctypes.create_string_buffer(len(buf), buf); #assert f(pbuf, len(buf)) == total",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:260,Testability,assert,assert,260,"# The following create a unique type for fixed-size C arrays: ctypes.c_char_Array_9; # and neither inherits from a non-sized type nor implements the buffer interface.; # As such, it can't be handled. TODO?; #pbuf = ctypes.create_string_buffer(len(buf), buf); #assert f(pbuf, len(buf)) == total",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:6,Performance,cache,cached,6,"# b/c cached",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:2,Availability,error,error,2,"# error testing",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:8,Testability,test,testing,8,"# error testing",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:2,Availability,error,error,2,"# error testing",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:8,Testability,test,testing,8,"# error testing",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:63,Modifiability,layers,layers,63,"""""""; template<class T, int nlayers>; struct MultiDimTest {; T* layers[nlayers];. MultiDimTest(int width, int height) {; for (int i=0; i<nlayers; ++i) {; layers[i] = new T[width*height];; for (int j=0; j<width*height; ++j); layers[i][j] = j*2;; }; }; ~MultiDimTest() { for (int i=0; i<nlayers; ++i) delete[] layers[i]; }; };; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:153,Modifiability,layers,layers,153,"""""""; template<class T, int nlayers>; struct MultiDimTest {; T* layers[nlayers];. MultiDimTest(int width, int height) {; for (int i=0; i<nlayers; ++i) {; layers[i] = new T[width*height];; for (int j=0; j<width*height; ++j); layers[i][j] = j*2;; }; }; ~MultiDimTest() { for (int i=0; i<nlayers; ++i) delete[] layers[i]; }; };; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:223,Modifiability,layers,layers,223,"""""""; template<class T, int nlayers>; struct MultiDimTest {; T* layers[nlayers];. MultiDimTest(int width, int height) {; for (int i=0; i<nlayers; ++i) {; layers[i] = new T[width*height];; for (int j=0; j<width*height; ++j); layers[i][j] = j*2;; }; }; ~MultiDimTest() { for (int i=0; i<nlayers; ++i) delete[] layers[i]; }; };; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:307,Modifiability,layers,layers,307,"""""""; template<class T, int nlayers>; struct MultiDimTest {; T* layers[nlayers];. MultiDimTest(int width, int height) {; for (int i=0; i<nlayers; ++i) {; layers[i] = new T[width*height];; for (int j=0; j<width*height; ++j); layers[i][j] = j*2;; }; }; ~MultiDimTest() { for (int i=0; i<nlayers; ++i) delete[] layers[i]; }; };; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:14,Security,access,access,14,"""""""Read/write access to objects through pointers""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:48,Availability,error,errors,48,"""""""More aggregate testings (used to fail/report errors)""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:18,Testability,test,testings,18,"""""""More aggregate testings (used to fail/report errors)""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:109,Modifiability,config,configurable,109,"# TODO: this is b/c unsigned char is considered a ""byte"" type by default;; # it's meaning should probably be configurable?",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:51,Modifiability,variab,variables,51,"""""""Access to int8_t/uint8_t arrays that are global variables""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py:25,Testability,test,test,25,"# touch __version__ as a test",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_doc_features.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py:18,Modifiability,inherit,inheritance,18,"""""""Multiple cross-inheritance""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_doc_features.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py:23,Deployability,release,release,23,"# pythonize the animal release function to take ownership on return",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_doc_features.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py:17,Testability,test,test,17,"""""""Implement and test a pythonizor""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_doc_features.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py:12,Performance,cache,cached,12,"# make sure cached values are actually looked up",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_doc_features.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py:22,Availability,error,error,22,"# TODO: the following error message is rather confusing :(",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_doc_features.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py:28,Integrability,message,message,28,"# TODO: the following error message is rather confusing :(",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_doc_features.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py:10,Availability,avail,available,10,"""""""Reduce available overloads to 1""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_doc_features.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py:14,Security,access,access,14,"""""""Example of access to array of void ptrs""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_doc_features.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py:16,Testability,test,tests,16,"# The series of tests below mostly exists already in other places, but these; # were used as examples for the CaaS' cppyy presentation and are preserved here.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_doc_features.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py:9,Modifiability,inherit,inheritance,9,"""""""Cross-inheritance example""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_doc_features.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py:37,Modifiability,inherit,inheritance,37,"""""""Template instantiation with cross-inheritance example""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_doc_features.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_eigen.py:89,Testability,assert,assert,89,"# TODO: this calls a conversion to int ...; #m.resize(cppyy.gbl.Eigen.NoChange_t(), 3); #assert m.rows() == 2; #assert m.cols() == 3",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_eigen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_eigen.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_eigen.py:112,Testability,assert,assert,112,"# TODO: this calls a conversion to int ...; #m.resize(cppyy.gbl.Eigen.NoChange_t(), 3); #assert m.rows() == 2; #assert m.cols() == 3",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_eigen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_eigen.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:8,Availability,failure,failure,8,"""""""Test failure to load dictionary""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:19,Performance,load,load,19,"""""""Test failure to load dictionary""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:14,Security,access,access,14,"""""""Test (non-)access to missing classes""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:11,Security,access,access,11,"# allowing access to e.m_pp_no_such is debatable, but it allows a typed address; # to be passed back into C++, which may be useful ...",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:20,Availability,error,error,20,"""""""Test addressof() error reporting""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:148,Integrability,message,messages,148,"# TODO: pypy-c does not indicate which argument failed to convert, CPython does; # likewise there are still minor differences in descriptiveness of messages",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:22,Availability,avail,available,22,"#assert ""no converter available for 'fragile::no_such_class*'"" in str(e)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:1,Testability,assert,assert,1,"#assert ""no converter available for 'fragile::no_such_class*'"" in str(e)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:1,Testability,assert,assert,1,"#assert ""char or small int type expected"" in str(e)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:1,Testability,assert,assert,1,"#assert ""int/long conversion expects an integer object"" in str(e)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:122,Testability,assert,assert,122,"# namespace; # TODO: think this through ... probably want this, but interferes with; # the (new) policy of lazy lookups; #assert 'fglobal' in members # function",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:2,Modifiability,variab,variable,2,"# variable; # GetAllCppNames() behaves differently from python dir() but providing the full; # set, which is then filtered in dir(); check both",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:26,Performance,load,loaded,26,"# TODO: namespaces aren't loaded (and thus not added to sys.modules); # with just the from ... import statement; actual use is needed",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:31,Testability,test,test,31,"# according to warnings, can't test ""import *"" ...",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:2,Testability,test,test,2,"# test writability of __module__",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:30,Modifiability,inherit,inherit,30,"# classes in namespace should inherit",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:54,Availability,avail,available,54,"""""""Test proper handling when a hierarchy is not fully available""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:34,Performance,cache,cached,34,"# get fresh (should not have been cached while incomplete)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:9,Availability,error,error,9,"""""""Check error behavior of failing C++ code""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:15,Security,access,access,15,"""""""Interactive access to the Cling global scope""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:28,Modifiability,variab,variable,28,"""""""Setting of global gDebug variable""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:9,Availability,avail,availability,9,"""""""Check availability of ASAN with gcc""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:9,Availability,error,error,9,"""""""Check error reporting of cppyy.cppdef""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:9,Availability,error,error,9,"# mix of error and warning",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:8,Security,access,access,8,"""""""Test access to C++ pre-processor macro's""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:19,Safety,abort,abortive,19,"""""""Conversion from abortive signals to Python exceptions""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:11,Availability,recover,recover,11,"# can only recover once from each error on Windows, which is functionally; # enough, but precludes further testing here (change: now drop all, see above,; # as on some MSVC builds, no signals are caught ??)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:34,Availability,error,error,34,"# can only recover once from each error on Windows, which is functionally; # enough, but precludes further testing here (change: now drop all, see above,; # as on some MSVC builds, no signals are caught ??)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:11,Safety,recover,recover,11,"# can only recover once from each error on Windows, which is functionally; # enough, but precludes further testing here (change: now drop all, see above,; # as on some MSVC builds, no signals are caught ??)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:107,Testability,test,testing,107,"# can only recover once from each error on Windows, which is functionally; # enough, but precludes further testing here (change: now drop all, see above,; # as on some MSVC builds, no signals are caught ??)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:2,Integrability,inject,inject,2,"# inject a vector in the global namespace",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:2,Security,inject,inject,2,"# inject a vector in the global namespace",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py:8,Testability,test,test,8,"""""""Leak test of free functions""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py:8,Testability,test,test,8,"""""""Leak test of static methods""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py:8,Testability,test,test,8,"""""""Leak test of methods""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py:8,Testability,test,test,8,"""""""Leak test for functions with default arguments""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py:8,Testability,test,test,8,"""""""Leak test of aggregate creation""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py:115,Testability,test,tests,115,"### pass by ptr/ptr with allocation (ptr/ptr is ambiguous in it's task, so many; # types are allowed to pass; this tests allocation into the pointer)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py:2,Modifiability,variab,variable,2,"# variable assignment",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_numba.py:69,Security,access,access,69,"""""""Numba-JITing of a free function taking a proxy argument for field access""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_numba.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_numba.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_numba.py:70,Security,access,access,70,"""""""Numba-JITing of a free function taking a proxy argument for method access""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_numba.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_numba.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_numba.py:133,Modifiability,variab,variables,133,"""""""Numba-JITing of a increment method belonging to a class, and also swaps the pointers and reflects the change on the python ctypes variables""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_numba.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_numba.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_numba.py:33,Performance,perform,performs,33,"""""""Numba-JITing of a method that performs scalar addition to a std::vector initialised through pointers """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_numba.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_numba.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_numba.py:61,Safety,avoid,avoid,61,"# We use b to run square_vec where the values must be < 4 to avoid exceeding longs max value",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_numba.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_numba.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_operators.py:100,Modifiability,inherit,inheritance,100,"# the following is a wee bit interesting due to python resolution; # rules on the one hand, and C++ inheritance on the other: python; # will never select the derived comparison b/c the call will fail; # to pass a base through a const derived&",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_operators.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_operators.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_operators.py:30,Testability,test,test,30,"# Note: calls are repeated to test caching, if any",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_operators.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_operators.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_operators.py:1,Testability,assert,assert,1,"#assert (~n).i == ~42",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_operators.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_operators.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:9,Testability,assert,assert,9,"# TODO: #assert c_overload.__dispatch__('get_int', 'b_overload*')(c, b_overload()) == 13",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:11,Testability,test,test,11,"""""""Adapted test for array overloading""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:304,Modifiability,config,configfilename,304,"""""""\; namespace ExceptionTypeTest {. class ConfigFileNotFoundError : public std::exception {; std::string fMsg;; public:; ConfigFileNotFoundError(const std::string& msg) : fMsg(msg) {}; const char* what() const throw() { return fMsg.c_str(); }; };. class MyClass1 {; public:; MyClass1(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass1(const MyClass1& other) {}; };. class MyClass1a {; public:; MyClass1a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2 {; public:; MyClass2(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass2(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2a {; public:; MyClass2a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass3 {; public:; MyClass3(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const MyClass3& other) = delete;; MyClass3(const MyClass3&& other) = delete;; };. class MyClass4 {; public:; MyClass4(int) {}; MyClass4(const MyClass3& other) {}; };. class MyClass4a {; public:; MyClass4a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(int) {}; }; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:353,Modifiability,config,configfilename,353,"""""""\; namespace ExceptionTypeTest {. class ConfigFileNotFoundError : public std::exception {; std::string fMsg;; public:; ConfigFileNotFoundError(const std::string& msg) : fMsg(msg) {}; const char* what() const throw() { return fMsg.c_str(); }; };. class MyClass1 {; public:; MyClass1(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass1(const MyClass1& other) {}; };. class MyClass1a {; public:; MyClass1a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2 {; public:; MyClass2(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass2(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2a {; public:; MyClass2a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass3 {; public:; MyClass3(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const MyClass3& other) = delete;; MyClass3(const MyClass3&& other) = delete;; };. class MyClass4 {; public:; MyClass4(int) {}; MyClass4(const MyClass3& other) {}; };. class MyClass4a {; public:; MyClass4a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(int) {}; }; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:493,Modifiability,config,configfilename,493,"""""""\; namespace ExceptionTypeTest {. class ConfigFileNotFoundError : public std::exception {; std::string fMsg;; public:; ConfigFileNotFoundError(const std::string& msg) : fMsg(msg) {}; const char* what() const throw() { return fMsg.c_str(); }; };. class MyClass1 {; public:; MyClass1(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass1(const MyClass1& other) {}; };. class MyClass1a {; public:; MyClass1a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2 {; public:; MyClass2(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass2(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2a {; public:; MyClass2a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass3 {; public:; MyClass3(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const MyClass3& other) = delete;; MyClass3(const MyClass3&& other) = delete;; };. class MyClass4 {; public:; MyClass4(int) {}; MyClass4(const MyClass3& other) {}; };. class MyClass4a {; public:; MyClass4a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(int) {}; }; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:542,Modifiability,config,configfilename,542,"""""""\; namespace ExceptionTypeTest {. class ConfigFileNotFoundError : public std::exception {; std::string fMsg;; public:; ConfigFileNotFoundError(const std::string& msg) : fMsg(msg) {}; const char* what() const throw() { return fMsg.c_str(); }; };. class MyClass1 {; public:; MyClass1(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass1(const MyClass1& other) {}; };. class MyClass1a {; public:; MyClass1a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2 {; public:; MyClass2(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass2(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2a {; public:; MyClass2a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass3 {; public:; MyClass3(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const MyClass3& other) = delete;; MyClass3(const MyClass3&& other) = delete;; };. class MyClass4 {; public:; MyClass4(int) {}; MyClass4(const MyClass3& other) {}; };. class MyClass4a {; public:; MyClass4a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(int) {}; }; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:622,Modifiability,config,configfilename,622,"""""""\; namespace ExceptionTypeTest {. class ConfigFileNotFoundError : public std::exception {; std::string fMsg;; public:; ConfigFileNotFoundError(const std::string& msg) : fMsg(msg) {}; const char* what() const throw() { return fMsg.c_str(); }; };. class MyClass1 {; public:; MyClass1(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass1(const MyClass1& other) {}; };. class MyClass1a {; public:; MyClass1a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2 {; public:; MyClass2(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass2(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2a {; public:; MyClass2a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass3 {; public:; MyClass3(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const MyClass3& other) = delete;; MyClass3(const MyClass3&& other) = delete;; };. class MyClass4 {; public:; MyClass4(int) {}; MyClass4(const MyClass3& other) {}; };. class MyClass4a {; public:; MyClass4a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(int) {}; }; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:671,Modifiability,config,configfilename,671,"""""""\; namespace ExceptionTypeTest {. class ConfigFileNotFoundError : public std::exception {; std::string fMsg;; public:; ConfigFileNotFoundError(const std::string& msg) : fMsg(msg) {}; const char* what() const throw() { return fMsg.c_str(); }; };. class MyClass1 {; public:; MyClass1(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass1(const MyClass1& other) {}; };. class MyClass1a {; public:; MyClass1a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2 {; public:; MyClass2(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass2(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2a {; public:; MyClass2a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass3 {; public:; MyClass3(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const MyClass3& other) = delete;; MyClass3(const MyClass3&& other) = delete;; };. class MyClass4 {; public:; MyClass4(int) {}; MyClass4(const MyClass3& other) {}; };. class MyClass4a {; public:; MyClass4a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(int) {}; }; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:713,Modifiability,config,configfilename,713,"""""""\; namespace ExceptionTypeTest {. class ConfigFileNotFoundError : public std::exception {; std::string fMsg;; public:; ConfigFileNotFoundError(const std::string& msg) : fMsg(msg) {}; const char* what() const throw() { return fMsg.c_str(); }; };. class MyClass1 {; public:; MyClass1(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass1(const MyClass1& other) {}; };. class MyClass1a {; public:; MyClass1a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2 {; public:; MyClass2(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass2(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2a {; public:; MyClass2a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass3 {; public:; MyClass3(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const MyClass3& other) = delete;; MyClass3(const MyClass3&& other) = delete;; };. class MyClass4 {; public:; MyClass4(int) {}; MyClass4(const MyClass3& other) {}; };. class MyClass4a {; public:; MyClass4a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(int) {}; }; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:762,Modifiability,config,configfilename,762,"""""""\; namespace ExceptionTypeTest {. class ConfigFileNotFoundError : public std::exception {; std::string fMsg;; public:; ConfigFileNotFoundError(const std::string& msg) : fMsg(msg) {}; const char* what() const throw() { return fMsg.c_str(); }; };. class MyClass1 {; public:; MyClass1(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass1(const MyClass1& other) {}; };. class MyClass1a {; public:; MyClass1a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2 {; public:; MyClass2(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass2(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2a {; public:; MyClass2a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass3 {; public:; MyClass3(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const MyClass3& other) = delete;; MyClass3(const MyClass3&& other) = delete;; };. class MyClass4 {; public:; MyClass4(int) {}; MyClass4(const MyClass3& other) {}; };. class MyClass4a {; public:; MyClass4a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(int) {}; }; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:866,Modifiability,config,configfilename,866,"""""""\; namespace ExceptionTypeTest {. class ConfigFileNotFoundError : public std::exception {; std::string fMsg;; public:; ConfigFileNotFoundError(const std::string& msg) : fMsg(msg) {}; const char* what() const throw() { return fMsg.c_str(); }; };. class MyClass1 {; public:; MyClass1(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass1(const MyClass1& other) {}; };. class MyClass1a {; public:; MyClass1a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2 {; public:; MyClass2(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass2(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2a {; public:; MyClass2a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass3 {; public:; MyClass3(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const MyClass3& other) = delete;; MyClass3(const MyClass3&& other) = delete;; };. class MyClass4 {; public:; MyClass4(int) {}; MyClass4(const MyClass3& other) {}; };. class MyClass4a {; public:; MyClass4a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(int) {}; }; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:915,Modifiability,config,configfilename,915,"""""""\; namespace ExceptionTypeTest {. class ConfigFileNotFoundError : public std::exception {; std::string fMsg;; public:; ConfigFileNotFoundError(const std::string& msg) : fMsg(msg) {}; const char* what() const throw() { return fMsg.c_str(); }; };. class MyClass1 {; public:; MyClass1(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass1(const MyClass1& other) {}; };. class MyClass1a {; public:; MyClass1a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2 {; public:; MyClass2(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass2(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2a {; public:; MyClass2a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass3 {; public:; MyClass3(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const MyClass3& other) = delete;; MyClass3(const MyClass3&& other) = delete;; };. class MyClass4 {; public:; MyClass4(int) {}; MyClass4(const MyClass3& other) {}; };. class MyClass4a {; public:; MyClass4a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(int) {}; }; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:964,Modifiability,config,configfilename,964,"""""""\; namespace ExceptionTypeTest {. class ConfigFileNotFoundError : public std::exception {; std::string fMsg;; public:; ConfigFileNotFoundError(const std::string& msg) : fMsg(msg) {}; const char* what() const throw() { return fMsg.c_str(); }; };. class MyClass1 {; public:; MyClass1(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass1(const MyClass1& other) {}; };. class MyClass1a {; public:; MyClass1a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2 {; public:; MyClass2(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass2(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2a {; public:; MyClass2a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass3 {; public:; MyClass3(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const MyClass3& other) = delete;; MyClass3(const MyClass3&& other) = delete;; };. class MyClass4 {; public:; MyClass4(int) {}; MyClass4(const MyClass3& other) {}; };. class MyClass4a {; public:; MyClass4a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(int) {}; }; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:1013,Modifiability,config,configfilename,1013,"""""""\; namespace ExceptionTypeTest {. class ConfigFileNotFoundError : public std::exception {; std::string fMsg;; public:; ConfigFileNotFoundError(const std::string& msg) : fMsg(msg) {}; const char* what() const throw() { return fMsg.c_str(); }; };. class MyClass1 {; public:; MyClass1(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass1(const MyClass1& other) {}; };. class MyClass1a {; public:; MyClass1a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2 {; public:; MyClass2(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass2(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2a {; public:; MyClass2a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass3 {; public:; MyClass3(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const MyClass3& other) = delete;; MyClass3(const MyClass3&& other) = delete;; };. class MyClass4 {; public:; MyClass4(int) {}; MyClass4(const MyClass3& other) {}; };. class MyClass4a {; public:; MyClass4a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(int) {}; }; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:1093,Modifiability,config,configfilename,1093,"""""""\; namespace ExceptionTypeTest {. class ConfigFileNotFoundError : public std::exception {; std::string fMsg;; public:; ConfigFileNotFoundError(const std::string& msg) : fMsg(msg) {}; const char* what() const throw() { return fMsg.c_str(); }; };. class MyClass1 {; public:; MyClass1(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass1(const MyClass1& other) {}; };. class MyClass1a {; public:; MyClass1a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2 {; public:; MyClass2(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass2(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2a {; public:; MyClass2a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass3 {; public:; MyClass3(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const MyClass3& other) = delete;; MyClass3(const MyClass3&& other) = delete;; };. class MyClass4 {; public:; MyClass4(int) {}; MyClass4(const MyClass3& other) {}; };. class MyClass4a {; public:; MyClass4a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(int) {}; }; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:1142,Modifiability,config,configfilename,1142,"""""""\; namespace ExceptionTypeTest {. class ConfigFileNotFoundError : public std::exception {; std::string fMsg;; public:; ConfigFileNotFoundError(const std::string& msg) : fMsg(msg) {}; const char* what() const throw() { return fMsg.c_str(); }; };. class MyClass1 {; public:; MyClass1(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass1(const MyClass1& other) {}; };. class MyClass1a {; public:; MyClass1a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2 {; public:; MyClass2(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass2(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2a {; public:; MyClass2a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass3 {; public:; MyClass3(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const MyClass3& other) = delete;; MyClass3(const MyClass3&& other) = delete;; };. class MyClass4 {; public:; MyClass4(int) {}; MyClass4(const MyClass3& other) {}; };. class MyClass4a {; public:; MyClass4a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(int) {}; }; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:1184,Modifiability,config,configfilename,1184,"""""""\; namespace ExceptionTypeTest {. class ConfigFileNotFoundError : public std::exception {; std::string fMsg;; public:; ConfigFileNotFoundError(const std::string& msg) : fMsg(msg) {}; const char* what() const throw() { return fMsg.c_str(); }; };. class MyClass1 {; public:; MyClass1(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass1(const MyClass1& other) {}; };. class MyClass1a {; public:; MyClass1a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2 {; public:; MyClass2(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass2(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2a {; public:; MyClass2a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass3 {; public:; MyClass3(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const MyClass3& other) = delete;; MyClass3(const MyClass3&& other) = delete;; };. class MyClass4 {; public:; MyClass4(int) {}; MyClass4(const MyClass3& other) {}; };. class MyClass4a {; public:; MyClass4a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(int) {}; }; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:1233,Modifiability,config,configfilename,1233,"""""""\; namespace ExceptionTypeTest {. class ConfigFileNotFoundError : public std::exception {; std::string fMsg;; public:; ConfigFileNotFoundError(const std::string& msg) : fMsg(msg) {}; const char* what() const throw() { return fMsg.c_str(); }; };. class MyClass1 {; public:; MyClass1(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass1(const MyClass1& other) {}; };. class MyClass1a {; public:; MyClass1a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2 {; public:; MyClass2(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass2(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2a {; public:; MyClass2a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass3 {; public:; MyClass3(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const MyClass3& other) = delete;; MyClass3(const MyClass3&& other) = delete;; };. class MyClass4 {; public:; MyClass4(int) {}; MyClass4(const MyClass3& other) {}; };. class MyClass4a {; public:; MyClass4a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(int) {}; }; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:1509,Modifiability,config,configfilename,1509,"""""""\; namespace ExceptionTypeTest {. class ConfigFileNotFoundError : public std::exception {; std::string fMsg;; public:; ConfigFileNotFoundError(const std::string& msg) : fMsg(msg) {}; const char* what() const throw() { return fMsg.c_str(); }; };. class MyClass1 {; public:; MyClass1(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass1(const MyClass1& other) {}; };. class MyClass1a {; public:; MyClass1a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2 {; public:; MyClass2(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass2(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2a {; public:; MyClass2a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass3 {; public:; MyClass3(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const MyClass3& other) = delete;; MyClass3(const MyClass3&& other) = delete;; };. class MyClass4 {; public:; MyClass4(int) {}; MyClass4(const MyClass3& other) {}; };. class MyClass4a {; public:; MyClass4a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(int) {}; }; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:1558,Modifiability,config,configfilename,1558,"""""""\; namespace ExceptionTypeTest {. class ConfigFileNotFoundError : public std::exception {; std::string fMsg;; public:; ConfigFileNotFoundError(const std::string& msg) : fMsg(msg) {}; const char* what() const throw() { return fMsg.c_str(); }; };. class MyClass1 {; public:; MyClass1(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass1(const MyClass1& other) {}; };. class MyClass1a {; public:; MyClass1a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2 {; public:; MyClass2(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass2(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2a {; public:; MyClass2a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass3 {; public:; MyClass3(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const MyClass3& other) = delete;; MyClass3(const MyClass3&& other) = delete;; };. class MyClass4 {; public:; MyClass4(int) {}; MyClass4(const MyClass3& other) {}; };. class MyClass4a {; public:; MyClass4a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(int) {}; }; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:1607,Modifiability,config,configfilename,1607,"""""""\; namespace ExceptionTypeTest {. class ConfigFileNotFoundError : public std::exception {; std::string fMsg;; public:; ConfigFileNotFoundError(const std::string& msg) : fMsg(msg) {}; const char* what() const throw() { return fMsg.c_str(); }; };. class MyClass1 {; public:; MyClass1(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass1(const MyClass1& other) {}; };. class MyClass1a {; public:; MyClass1a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2 {; public:; MyClass2(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass2(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2a {; public:; MyClass2a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass3 {; public:; MyClass3(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const MyClass3& other) = delete;; MyClass3(const MyClass3&& other) = delete;; };. class MyClass4 {; public:; MyClass4(int) {}; MyClass4(const MyClass3& other) {}; };. class MyClass4a {; public:; MyClass4a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(int) {}; }; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:1656,Modifiability,config,configfilename,1656,"""""""\; namespace ExceptionTypeTest {. class ConfigFileNotFoundError : public std::exception {; std::string fMsg;; public:; ConfigFileNotFoundError(const std::string& msg) : fMsg(msg) {}; const char* what() const throw() { return fMsg.c_str(); }; };. class MyClass1 {; public:; MyClass1(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass1(const MyClass1& other) {}; };. class MyClass1a {; public:; MyClass1a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2 {; public:; MyClass2(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass2(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass2a {; public:; MyClass2a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; };. class MyClass3 {; public:; MyClass3(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; MyClass3(const MyClass3& other) = delete;; MyClass3(const MyClass3&& other) = delete;; };. class MyClass4 {; public:; MyClass4(int) {}; MyClass4(const MyClass3& other) {}; };. class MyClass4a {; public:; MyClass4a() {}; void initialize(const std::string& configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(const char* configfilename) {; throw ConfigFileNotFoundError{configfilename};; }; void initialize(int) {}; }; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:77,Availability,error,error,77,"# single C++ exception during overload selection: assumes this is a logic; # error and prioritizes the C++ exception",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:68,Testability,log,logic,68,"# single C++ exception during overload selection: assumes this is a logic; # error and prioritizes the C++ exception",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:61,Availability,error,errors,61,"# multiple C++ exceptions are considered argument conversion errors and; # only result in the same exception type if they are all the same",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py:16,Performance,load,loading,16,"""""""Test whether loading a dictionary twice results in the same object""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py:2,Performance,cache,cached,2,"# cached lookup",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py:32,Testability,stub,stub,32,"# NOTE: when called through the stub, default args are fine",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py:8,Security,access,access,8,"""""""Test access and use of typedefs""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py:8,Deployability,install,installing,8,"""""""Test installing and calling global C++ function as python method""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py:23,Availability,error,error,23,"""""""Test pythonizations error reporting""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonization.py:59,Availability,avail,available,59,"# global pythonizors are still run even if namespaced ones available",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_pythonization.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonization.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonization.py:25,Modifiability,variab,variable,25,"# there's eg. one global variable",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_pythonization.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonization.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonization.py:22,Testability,test,test,22,"# skip the IndexErorr test: pythonization for __getitem__[index] < size(); # can not be applied strict enough (instead of an index, this could be an; # associative container, with 'index' a key, not a counter; #raises(IndexError, d.__getitem__, 1)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_pythonization.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonization.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonization.py:10,Testability,test,test,10,"## actual test run",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_pythonization.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonization.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py:42,Modifiability,inherit,inherit,42,"# TODO: it's deeply silly that namespaces inherit from CPPInstance (in CPyCppyy)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_regression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py:8,Usability,usab,usability,8,"""""""Test usability of AVX by default.""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_regression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py:12,Availability,error,error,12,"# attribute error if compilation failed",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_regression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py:11,Deployability,release,released,11,"""""""GIL was released by accident for by-value returns""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_regression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py:797,Availability,error,error,797,"""""""; template <typename Enum>; struct my_iter_enum {; struct iterator {; using value_type = Enum;; using difference_type = ptrdiff_t;; using reference = const Enum&;; using pointer = const Enum*;; using iterator_category = std::input_iterator_tag;. iterator(Enum value) : cur(value) {}. reference operator*() { return cur; }; pointer operator->() { return &cur; }; bool operator==(const iterator& other) { return cur == other.cur; }; bool operator!=(const iterator& other) { return !(*this == other); }; iterator& operator++() { if (cur != Enum::Unknown) cur = static_cast<Enum>(static_cast<std::underlying_type_t<Enum>>(cur) + 1); return *this; }; iterator operator++(int) { iterator other = *this; ++(*this); return other; }. private:; Enum cur;; int TODO_why_is_this_placeholder_needed; // JIT error? Too aggressive optimization?; };. iterator begin() {; return iterator(Enum::Black);; }. iterator end() {; return iterator(Enum::Unknown);; }; };. enum class MyColorEnum : char {; Black = 1,; Blue,; Red,; Yellow,; Unknown; };""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_regression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py:819,Performance,optimiz,optimization,819,"""""""; template <typename Enum>; struct my_iter_enum {; struct iterator {; using value_type = Enum;; using difference_type = ptrdiff_t;; using reference = const Enum&;; using pointer = const Enum*;; using iterator_category = std::input_iterator_tag;. iterator(Enum value) : cur(value) {}. reference operator*() { return cur; }; pointer operator->() { return &cur; }; bool operator==(const iterator& other) { return cur == other.cur; }; bool operator!=(const iterator& other) { return !(*this == other); }; iterator& operator++() { if (cur != Enum::Unknown) cur = static_cast<Enum>(static_cast<std::underlying_type_t<Enum>>(cur) + 1); return *this; }; iterator operator++(int) { iterator other = *this; ++(*this); return other; }. private:; Enum cur;; int TODO_why_is_this_placeholder_needed; // JIT error? Too aggressive optimization?; };. iterator begin() {; return iterator(Enum::Black);; }. iterator end() {; return iterator(Enum::Unknown);; }; };. enum class MyColorEnum : char {; Black = 1,; Blue,; Red,; Yellow,; Unknown; };""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_regression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py:2,Security,hash,hashes,2,"# hashes of std::string larger than 2**31 would fail; run a couple of; # strings to check although it may still succeed by accident (and never; # was an issue on p3 anyway)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_regression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py:24,Modifiability,variab,variable,24,"""""""Support C-style enum variable declarations""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_regression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py:122,Availability,error,error,122,"""""""\; namespace ExceptionByValue {; class Countable : std::exception {; public:; static int s_count;; Countable() : fMsg(""error"") { ++s_count; }; Countable(const Countable&) { ++s_count; }; Countable& operator=(const Countable&) { return *this; }; ~Countable() { --s_count; }; const char* what() const throw() override { return fMsg.c_str(); }; private:; std::string fMsg;; };. int Countable::s_count = 0;. Countable create_one() { return Countable{}; }; int count() { return Countable::s_count; }; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_regression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py:41,Testability,test,test,41,"""""""\; namespace ArrayOfPointers {; void* test(int *arr[8], bool is_int=true) { return is_int ? (void*)arr : nullptr; }; void* test(uint8_t *arr[8], bool is_int=false) { return is_int ? nullptr : (void*)arr; }; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_regression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py:126,Testability,test,test,126,"""""""\; namespace ArrayOfPointers {; void* test(int *arr[8], bool is_int=true) { return is_int ? (void*)arr : nullptr; }; void* test(uint8_t *arr[8], bool is_int=false) { return is_int ? nullptr : (void*)arr; }; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_regression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:22,Testability,test,test,22,"# after CPython's Lib/test/seq_tests.py",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:27,Integrability,protocol,protocol,27,"""""""Sequence using iterator protocol""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:27,Integrability,protocol,protocol,27,"""""""Sequence using iterator protocol defined with a generator""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:112,Testability,assert,assert,112,"# the following does not work for type-checked containers; #s = ""this is also a sequence""; #vv = type2test(s); #assert len(vv) == len(s); # Create from various iteratables; # as above, can not put strings in type-checked containers; #for s in (""123"", """", range(1000), ('do', 1.2), range(2000,2200,5)):",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:25,Testability,assert,assert,25,"# as above, no strings; #assert type2test(c for c in ""123"") == type2test(""123"")",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:30,Testability,assert,assert,30,"# Issue #23757 (in CPython); #assert type2test(LyingTuple((2,))) == type2test((1,)); #assert type2test(LyingList([2])) == type2test([1])",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:86,Testability,assert,assert,86,"# Issue #23757 (in CPython); #assert type2test(LyingTuple((2,))) == type2test((1,)); #assert type2test(LyingList([2])) == type2test([1])",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:20,Testability,test,tests,20,"""""""Detailed slicing tests from CPython""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:61,Availability,error,error,61,"# the following two fail b/c PySlice_GetIndices succeeds w/o error, while; # returning an overflown value (list object uses different internal APIs); #assert a[ -pow(2,128): 3 ] == type2test([0,1,2]); #assert a[ 3: pow(2,145) ] == type2test([3,4])",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:151,Testability,assert,assert,151,"# the following two fail b/c PySlice_GetIndices succeeds w/o error, while; # returning an overflown value (list object uses different internal APIs); #assert a[ -pow(2,128): 3 ] == type2test([0,1,2]); #assert a[ 3: pow(2,145) ] == type2test([3,4])",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:202,Testability,assert,assert,202,"# the following two fail b/c PySlice_GetIndices succeeds w/o error, while; # returning an overflown value (list object uses different internal APIs); #assert a[ -pow(2,128): 3 ] == type2test([0,1,2]); #assert a[ 3: pow(2,145) ] == type2test([3,4])",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:8,Security,access,access,8,"""""""Test access to std::vector<int>/std::vector<double>""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:8,Security,access,access,8,"""""""Test access to an std::vector<just_a_class>""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:14,Availability,error,error,14,"# TODO: nicer error handling for the following (current: template compilation failure trying; # to assign a pair with <double, string> to <double, double>); # ll2 = ll[:]; # ll2[2] = ll[2][:]; # ll2[2][1] = 'a'; # v = a.vector_pair(ll2)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:78,Availability,failure,failure,78,"# TODO: nicer error handling for the following (current: template compilation failure trying; # to assign a pair with <double, string> to <double, double>); # ll2 = ll[:]; # ll2[2] = ll[2][:]; # ll2[2][1] = 'a'; # v = a.vector_pair(ll2)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:12,Testability,test,test,12,"""""""Advanced test of vector slicing""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:13,Testability,test,test,13,"# additional test from CPython's test suite",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:33,Testability,test,test,33,"# additional test from CPython's test suite",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:64,Testability,test,test,64,"""""""\; namespace VectorConstCharStar {; std::vector<const char*> test = {""hello""};; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:13,Modifiability,polymorphi,polymorphic,13,"""""""Vector of polymorphic types should auto-cast""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:8,Security,access,access,8,"""""""Test access to std::string object data members""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:42,Testability,test,tests,42,"# -- method replace (from Python's string tests); # Operations on the empty string",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:8,Security,access,access,8,"""""""Test access to a list<int>""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:8,Security,access,access,8,"""""""Test access to a map<int,int>""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:8,Security,access,access,8,"""""""Test access to a map<std::string,int>""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:21,Integrability,protocol,protocol,21,"""""""Test the iterator protocol mapping for an STL like class""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:2,Testability,test,test,2,"# test assignment",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:13,Testability,test,test,13,"# not a true test, but this'll take a noticable amount of time (>1min) if; # there is a regression somehow",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:21,Security,access,access,21,"""""""Create tuples and access their elements""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:2,Testability,assert,assert,2,"# assert t1 != t3 # fails to link (?!)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:62,Testability,test,testing,62,"""""""Memory handling of C++ c// helper for exception base class testing""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_streams.py:8,Availability,avail,availability,8,"""""""Test availability of std::ostream""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_streams.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_streams.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_streams.py:8,Security,access,access,8,"""""""Test access to std::cout""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_streams.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_streams.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:32,Testability,test,tests,32,"# implicit (called before other tests to check caching)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_templates.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:66,Performance,load,loaded,66,"# TODO: the following only works if something else has already; # loaded the headers associated with this template",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_templates.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:2,Testability,test,test,2,"# test forced creation of subsequent overloads",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_templates.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:13,Testability,test,testing,13,"""""""Attribute testing through SFINAE""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_templates.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:2,Performance,load,load,2,"# load",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_templates.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:2,Performance,load,load,2,"# load",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_templates.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:2,Testability,assert,assert,2,"# assert b1.ref_value == 42",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_templates.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:2,Testability,assert,assert,2,"# assert b2.ref_value == 42",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_templates.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:28,Availability,avail,available,28,"""""""Access to templates made available with 'using'""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_templates.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:1,Testability,assert,assert,1,"#assert type(d.get1['double'](5)) == float; #assert d.get1['double'](5) == 10.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_templates.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:45,Testability,assert,assert,45,"#assert type(d.get1['double'](5)) == float; #assert d.get1['double'](5) == 10.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_templates.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:20,Testability,test,testing,20,"# bit of regression testing",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_templates.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:28,Availability,mask,mask,28,"# check that void* does not mask template instantiations",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_templates.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:28,Availability,mask,mask,28,"# check that void* does not mask template instantiations",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_templates.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:36,Availability,mask,mask,36,"# check that unknown classes do not mask template instantiations",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_templates.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:10,Security,access,access,10,"# <- this access used to fail",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_templates.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:50,Performance,cache,caches,50,"# different templates used to prevent memoization caches resolving calls",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_templates.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:33,Modifiability,inherit,inheritance,33,"""""""Mix of (non-)templated across inheritance""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_templates.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:50,Testability,test,testptr,50,"""""""; namespace UsingPtr {; struct Test {};; using testptr = Test*;. template<typename T>; bool testfun(T const& x) { return !(bool)x; }; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_templates.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:95,Testability,test,testfun,95,"""""""; namespace UsingPtr {; struct Test {};; using testptr = Test*;. template<typename T>; bool testfun(T const& x) { return !(bool)x; }; }""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_templates.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:142,Testability,assert,assert,142,"# TODO: raises TypeError; the problem is that the type is resolved; # from UsingPtr::Test*const& to UsingPtr::Test*& (ie. `const` is lost); # assert ns.testfun[""UsingPtr::testptr""](cppyy.nullptr)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_templates.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:152,Testability,test,testfun,152,"# TODO: raises TypeError; the problem is that the type is resolved; # from UsingPtr::Test*const& to UsingPtr::Test*& (ie. `const` is lost); # assert ns.testfun[""UsingPtr::testptr""](cppyy.nullptr)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_templates.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:171,Testability,test,testptr,171,"# TODO: raises TypeError; the problem is that the type is resolved; # from UsingPtr::Test*const& to UsingPtr::Test*& (ie. `const` is lost); # assert ns.testfun[""UsingPtr::testptr""](cppyy.nullptr)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_templates.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:17,Energy Efficiency,reduce,reducer,17,"""""""Usage of type reducer""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_templates.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:17,Energy Efficiency,reduce,reducer,17,"""""""Usage of type reducer with extern template""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy/test/test_templates.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py:67,Deployability,install,install,67,"# do not copy wchar.h & friends b/c the pch should be generated at install time,; # so preventing conflict",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py:9,Testability,test,testing,9,"# remove testing, examples, and notebook",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py:187,Availability,alive,alive,187,"""""""//#include ""TSocket.h""; enum ESockOptions {; kSendBuffer, // size of send buffer; kRecvBuffer, // size of receive buffer; kOobInline, // OOB message inline; kKeepAlive, // keep socket alive; kReuseAddr, // allow reuse of local portion of address 5-tuple; kNoDelay, // send without delay; kNoBlock, // non-blocking I/O; kProcessGroup, // socket process group (used for SIGURG and SIGIO); kAtMark, // are we at out-of-band mark (read only); kBytesToRead // get number of bytes to read, FIONREAD (read only); };. enum ESendRecvOptions {; kDefault, // default option (= 0); kOob, // send or receive out-of-band data; kPeek, // peek at incoming message (receive only); kDontBlock // send/recv as much data as possible without blocking; };; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py:144,Integrability,message,message,144,"""""""//#include ""TSocket.h""; enum ESockOptions {; kSendBuffer, // size of send buffer; kRecvBuffer, // size of receive buffer; kOobInline, // OOB message inline; kKeepAlive, // keep socket alive; kReuseAddr, // allow reuse of local portion of address 5-tuple; kNoDelay, // send without delay; kNoBlock, // non-blocking I/O; kProcessGroup, // socket process group (used for SIGURG and SIGIO); kAtMark, // are we at out-of-band mark (read only); kBytesToRead // get number of bytes to read, FIONREAD (read only); };. enum ESendRecvOptions {; kDefault, // default option (= 0); kOob, // send or receive out-of-band data; kPeek, // peek at incoming message (receive only); kDontBlock // send/recv as much data as possible without blocking; };; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py:643,Integrability,message,message,643,"""""""//#include ""TSocket.h""; enum ESockOptions {; kSendBuffer, // size of send buffer; kRecvBuffer, // size of receive buffer; kOobInline, // OOB message inline; kKeepAlive, // keep socket alive; kReuseAddr, // allow reuse of local portion of address 5-tuple; kNoDelay, // send without delay; kNoBlock, // non-blocking I/O; kProcessGroup, // socket process group (used for SIGURG and SIGIO); kAtMark, // are we at out-of-band mark (read only); kBytesToRead // get number of bytes to read, FIONREAD (read only); };. enum ESendRecvOptions {; kDefault, // default option (= 0); kOob, // send or receive out-of-band data; kPeek, // peek at incoming message (receive only); kDontBlock // send/recv as much data as possible without blocking; };; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py:19,Testability,test,test,19,"# debugging: run a test build",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py:12,Deployability,patch,patches,12,"#; ## apply patches (in order); #",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py:26,Deployability,patch,patch,26,"#; ## manylinux1 specific patch, as there a different, older, compiler is used; #",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/setup.py:14,Integrability,depend,dependent,14,"#; # platform-dependent helpers; #",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/setup.py:15,Deployability,install,installation,15,"""""""cppyy-cling installation.""""""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/setup.py:8,Performance,optimiz,optimization,8,"# extra optimization flags for Cling",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/setup.py:23,Availability,avail,available,23,"# default to using all available cores (x2 if hyperthreading enabled)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/setup.py:35,Deployability,install,installed,35,"# depending on goal, copy over pre-installed tree",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/setup.py:2,Integrability,depend,depending,2,"# depending on goal, copy over pre-installed tree",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/setup.py:7,Deployability,install,install,7,"# base install",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/setup.py:9,Deployability,install,install,9,"# custom install of backend",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/setup.py:15,Deployability,install,install,15,"# use $MAKE to install if it is defined",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/setup.py:37,Modifiability,portab,portable,37,"# remove allDict.cxx.pch as it's not portable (rebuild on first run, see cppyy)",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/setup.py:107,Usability,simpl,simply,107,"# this is a universal, but platform-specific package; a combination; # that wheel does not recognize, thus simply fool it",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py:14,Modifiability,variab,variables,14,"#; # Classes, variables etc.; #",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py:45,Safety,risk,risk,45,"#; # Deleting the modules after use runs the risk of GC running on; # stuff we are using, such as ctypes.c_int.; #",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py:30,Integrability,rout,routines,30,"#; # Valid customisations are routines named ""c13n_<something>"".; #",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py:406,Availability,avail,available,406,"""""""Bindings for {}.; These bindings are based on https://cppyy.readthedocs.io/en/latest/, and can be; used as per the documentation provided via the cppyy.cgl namespace. The environment; variable LD_LIBRARY_PATH must contain the path of the {}.rootmap file. Use; ""import cppyy; from cppyy.gbl import <some-C++-entity>"". Alternatively, use ""import {}"". This convenience wrapper supports ""discovery"" of the; available C++ entities using, for example Python 3's command line completion support.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py:369,Integrability,wrap,wrapper,369,"""""""Bindings for {}.; These bindings are based on https://cppyy.readthedocs.io/en/latest/, and can be; used as per the documentation provided via the cppyy.cgl namespace. The environment; variable LD_LIBRARY_PATH must contain the path of the {}.rootmap file. Use; ""import cppyy; from cppyy.gbl import <some-C++-entity>"". Alternatively, use ""import {}"". This convenience wrapper supports ""discovery"" of the; available C++ entities using, for example Python 3's command line completion support.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py:187,Modifiability,variab,variable,187,"""""""Bindings for {}.; These bindings are based on https://cppyy.readthedocs.io/en/latest/, and can be; used as per the documentation provided via the cppyy.cgl namespace. The environment; variable LD_LIBRARY_PATH must contain the path of the {}.rootmap file. Use; ""import cppyy; from cppyy.gbl import <some-C++-entity>"". Alternatively, use ""import {}"". This convenience wrapper supports ""discovery"" of the; available C++ entities using, for example Python 3's command line completion support.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py:60,Usability,guid,guidance,60,"#; # Implement a pkgutil-style namespace package as per the guidance on; # https://packaging.python.org/guides/packaging-namespace-packages.; #",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py:104,Usability,guid,guides,104,"#; # Implement a pkgutil-style namespace package as per the guidance on; # https://packaging.python.org/guides/packaging-namespace-packages.; #",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py:47,Availability,reliab,reliably,47,"#; # Custom clean.; # TODO: There is no way to reliably clean the ""dist"" directory.; #; #; # Base clean.; #",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py:152,Usability,simpl,simply,152,"#; # This is a universal (Python2/Python3), but platform-specific (has; # compiled parts) package; a combination that wheel does not recognize,; # thus simply fool it.; #",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/bindings_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/loader.py:18,Performance,load,loader,18,""""""" cppyy_backend loader; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/loader.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/loader.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/loader.py:2,Performance,load,load,2,"# load libcppyy_backend",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/loader.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/loader.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/loader.py:9,Performance,load,load,9,"# normal load, allowing for user overrides of LD_LIBRARY_PATH",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/loader.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/loader.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/loader.py:18,Integrability,depend,dependencies,18,"# failed ... load dependencies explicitly",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/loader.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/loader.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/loader.py:13,Performance,load,load,13,"# failed ... load dependencies explicitly",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/loader.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/loader.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/loader.py:2,Testability,test,test,2,"# test whether the pch is older than the include directory",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/loader.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/loader.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cling_config.py:30,Modifiability,config,config,30,"# happens on Windows b/c root-config is a bash script; the; # following covers the most important options until that; # gets fixed upstream",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cling_config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cling_config.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py:21,Testability,log,logic,21,"#; # All Qt-specific logic is driven from these identifiers. Setting them to; # nonsense values would effectively disable all Qt-specific logic.; #",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py:138,Testability,log,logic,138,"#; # All Qt-specific logic is driven from these identifiers. Setting them to; # nonsense values would effectively disable all Qt-specific logic.; #",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py:115,Security,access,access,115,"""""""; Centralise all processing of the source.; Ideally, we'd use Clang for everything, but on occasion, we'll need access; to the source, without pre-processing.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py:112,Safety,avoid,avoid,112,"#; # We expect to be run over hundreds of files. Any parsing issues are likely to be very repetitive.; # So, to avoid bothering the user, we suppress duplicates.; #",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py:41,Security,access,access,41,"""""""; The parser does not seem to provide access to the complete text of a parameter.; This makes it hard to find any default values, so we:. 1. Run the lexer from ""here"" to the end of the file, bailing out when we see the "",""; or a "")"" marking the end.; 2. Watch for the assignment.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py:113,Usability,simpl,simply,113,"#; # Get the text after the ""="". Macro expansion can make relying on tokens fraught...and; # member.get_tokens() simply does not always return anything.; #",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py:194,Availability,error,error,194,"#; # Happens e.g. if the template is a dependent type; instead, try to parse; # its definition (brittle, but the original code just had '1' as a guess,; # which is even worse ...).; #; # logger.error(_(""Unexpected template_arg_count={} for {}"").format(tmp, typedef.type.get_typedef_name()))",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py:39,Integrability,depend,dependent,39,"#; # Happens e.g. if the template is a dependent type; instead, try to parse; # its definition (brittle, but the original code just had '1' as a guess,; # which is even worse ...).; #; # logger.error(_(""Unexpected template_arg_count={} for {}"").format(tmp, typedef.type.get_typedef_name()))",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py:187,Testability,log,logger,187,"#; # Happens e.g. if the template is a dependent type; instead, try to parse; # its definition (brittle, but the original code just had '1' as a guess,; # which is even worse ...).; #; # logger.error(_(""Unexpected template_arg_count={} for {}"").format(tmp, typedef.type.get_typedef_name()))",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py:66,Modifiability,variab,variable,66,"""""""; Generate the translation for a type. :param tag: ""typedef"", ""variable"" etc.; :param parent: The typed object.; :param level: Recursion level controls indentation.; :return: Info().; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/pkg_templates/initializor.py:14,Modifiability,variab,variables,14,"#; # Classes, variables etc.; #",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/pkg_templates/initializor.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/pkg_templates/initializor.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/tests/test_cppyy_backend.py:21,Testability,test,tests,21,"""""""; Pytest/nosetest tests.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/tests/test_cppyy_backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/tests/test_cppyy_backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/tests/test_cppyy_backend.py:41,Testability,test,test,41,'''This method is run once before _each_ test method is executed''',MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/tests/test_cppyy_backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/tests/test_cppyy_backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/tests/test_cppyy_backend.py:40,Testability,test,test,40,'''This method is run once after _each_ test method is executed''',MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/cling/tests/test_cppyy_backend.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/tests/test_cppyy_backend.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py:14,Integrability,depend,dependent,14,"#; # platform-dependent helpers; #",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py:35,Deployability,install,installed,35,"# depending on goal, copy over pre-installed tree",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py:2,Integrability,depend,depending,2,"# depending on goal, copy over pre-installed tree",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py:7,Deployability,install,install,7,"# base install",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py:9,Deployability,install,install,9,"# custom install of backend",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py:107,Usability,simpl,simply,107,"# this is a universal, but platform-specific package; a combination; # that wheel does not recognize, thus simply fool it",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py:88,Deployability,install,installed,88,"# pip does not resolve dependencies before building binaries, so unless; # packages are installed one-by-one, on old install is used or the build; # will simply fail hard. The following is not completely quiet, but at; # least a lot less conspicuous.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py:117,Deployability,install,install,117,"# pip does not resolve dependencies before building binaries, so unless; # packages are installed one-by-one, on old install is used or the build; # will simply fail hard. The following is not completely quiet, but at; # least a lot less conspicuous.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py:23,Integrability,depend,dependencies,23,"# pip does not resolve dependencies before building binaries, so unless; # packages are installed one-by-one, on old install is used or the build; # will simply fail hard. The following is not completely quiet, but at; # least a lot less conspicuous.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py:154,Usability,simpl,simply,154,"# pip does not resolve dependencies before building binaries, so unless; # packages are installed one-by-one, on old install is used or the build; # will simply fail hard. The following is not completely quiet, but at; # least a lot less conspicuous.",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/setup.py:14,Integrability,depend,dependent,14,"#; # platform-dependent helpers; #",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/CPyCppyy/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/setup.py:46,Deployability,install,install,46,"# happens during egg_info and other non-build/install commands",MatchSource.CODE_COMMENT,bindings/pyroot/cppyy/CPyCppyy/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/setup.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_application.py:207,Deployability,update,update,207,"# sys.displayhook is called on the result of evaluating an expression entered; # in an interactive Python session.; # Therefore, this function will call EndOfLineAction after each interactive; # command (to update display etc.)",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_application.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_application.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_application.py:15,Availability,down,down,15,"# Used to shut down the thread safely at teardown time",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_application.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_application.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_application.py:31,Safety,safe,safely,31,"# Used to shut down the thread safely at teardown time",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_application.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_application.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py:13,Modifiability,config,configuring,13,"""""""Class for configuring PyROOT""""""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_facade.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py:66,Integrability,wrap,wrapper,66,"""""""Internal class to manage lookups of gROOT in the facade.; This wrapper calls _finalSetup on the facade when it; receives a lookup, unless the lookup is for SetBatch.; This allows to evaluate the command line parameters; before checking if batch mode is on in _finalSetup; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_facade.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py:85,Integrability,inject,injected,85,"""""""; Create the ROOT.RDF.Experimental.Distributed python module. This module will be injected into the ROOT.RDF namespace. Arguments:; parent: The ROOT.RDF namespace. Needed to define __package__. Returns:; types.ModuleType: The ROOT.RDF.Experimental.Distributed submodule.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_facade.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py:85,Security,inject,injected,85,"""""""; Create the ROOT.RDF.Experimental.Distributed python module. This module will be injected into the ROOT.RDF namespace. Arguments:; parent: The ROOT.RDF namespace. Needed to define __package__. Returns:; types.ModuleType: The ROOT.RDF.Experimental.Distributed submodule.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_facade.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py:13,Deployability,configurat,configuration,13,"# Initialize configuration",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_facade.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py:13,Modifiability,config,configuration,13,"# Initialize configuration",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_facade.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py:263,Performance,cache,caches,263,"# Try:; # - in the global namespace; # - in the ROOT namespace; # - in gROOT (ROOT lists such as list of files,; # memory mapped files, functions, geometries ecc.); # The first two attempts allow to lookup; # e.g. ROOT.ROOT.Math as ROOT.Math; # Note that hasattr caches the lookup for getattr",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_facade.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py:62,Integrability,wrap,wrapper,62,"# Prevent this method from being re-entered through the gROOT wrapper",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_facade.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py:13,Testability,log,logon,13,"# Run custom logon file (must be after creation of ROOT globals)",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_facade.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py:33,Testability,log,logon,33,"# -n disables the reading of the logon file, just like with root",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_facade.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py:77,Performance,load,load,77,"# If the .py version of rootlogon exists, the .C is ignored (the user can; # load the .C from the .py, if so desired).; # System logon, user logon, and local logon (skip Rint.Logon)",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_facade.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py:129,Testability,log,logon,129,"# If the .py version of rootlogon exists, the .C is ignored (the user can; # load the .C from the .py, if so desired).; # System logon, user logon, and local logon (skip Rint.Logon)",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_facade.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py:141,Testability,log,logon,141,"# If the .py version of rootlogon exists, the .C is ignored (the user can; # load the .C from the .py, if so desired).; # System logon, user logon, and local logon (skip Rint.Logon)",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_facade.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py:158,Testability,log,logon,158,"# If the .py version of rootlogon exists, the .C is ignored (the user can; # load the .C from the .py, if so desired).; # System logon, user logon, and local logon (skip Rint.Logon)",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_facade.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py:644,Performance,load,loads,644,"""""""; Reduction function of the ROOT facade to customize the (pickle); serialization step. Defines the ingredients needed for a correct serialization of the; facade, that is a function that imports a Python module and the name of; that module, which corresponds to this facade's __name__ attribute. This; method helps serialization tools like `cloudpickle`, especially used in; distributed environments, that always need to include information about; the ROOT module in the serialization step. For example, the following; snippet would not work without this method::. import ROOT; import cloudpickle. def foo():; return ROOT.TH1F(). cloudpickle.loads(cloudpickle.dumps(foo)). In particular, it would raise::. TypeError: cannot pickle 'ROOTFacade' object; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_facade.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py:64,Availability,avail,available,64,"# Inject Experimental.Distributed package into namespace RDF if available",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_facade.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:192,Integrability,wrap,wrapper,192,"'''; Decorator for making Python callables accessible in C++ by just-in-time compilation; with numba and cling. The decorator takes the given Python callable and just-in-time compiles (jits); wrapper functions with the given C++ types for input and return types. Eventually,; the Python callable is accessible in the Numba namespace in C++. The implementation first jits with numba the Python callable. We support fundamental types and; ROOT::VecOps::RVecs thereof. Note that you can get the jitted Python callable by the attribute; numba_func. The C++ types are converted to the respective numba types and RVecs are accessible; in Python by numpy arrays. After jitting the actual Python callable, we jit another Python wrapper,; which converts the Python signature to a C-friendly signature. The wrapper code is accessible by; the attribute __py_wrapper__. Next, the Python wrapper is given to cling to jit a C++ wrapper function,; making the original Python callable accessible in C++. The wrapper code in C++ is accessible by; the attribute __cpp_wrapper__. Note that the callable is fully compiled without side-effects. The numba jitting uses the nopython; option which does not allow interaction with the Python interpreter. This means that you can use; the resulting function also safely in multi-threaded environments.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:720,Integrability,wrap,wrapper,720,"'''; Decorator for making Python callables accessible in C++ by just-in-time compilation; with numba and cling. The decorator takes the given Python callable and just-in-time compiles (jits); wrapper functions with the given C++ types for input and return types. Eventually,; the Python callable is accessible in the Numba namespace in C++. The implementation first jits with numba the Python callable. We support fundamental types and; ROOT::VecOps::RVecs thereof. Note that you can get the jitted Python callable by the attribute; numba_func. The C++ types are converted to the respective numba types and RVecs are accessible; in Python by numpy arrays. After jitting the actual Python callable, we jit another Python wrapper,; which converts the Python signature to a C-friendly signature. The wrapper code is accessible by; the attribute __py_wrapper__. Next, the Python wrapper is given to cling to jit a C++ wrapper function,; making the original Python callable accessible in C++. The wrapper code in C++ is accessible by; the attribute __cpp_wrapper__. Note that the callable is fully compiled without side-effects. The numba jitting uses the nopython; option which does not allow interaction with the Python interpreter. This means that you can use; the resulting function also safely in multi-threaded environments.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:797,Integrability,wrap,wrapper,797,"'''; Decorator for making Python callables accessible in C++ by just-in-time compilation; with numba and cling. The decorator takes the given Python callable and just-in-time compiles (jits); wrapper functions with the given C++ types for input and return types. Eventually,; the Python callable is accessible in the Numba namespace in C++. The implementation first jits with numba the Python callable. We support fundamental types and; ROOT::VecOps::RVecs thereof. Note that you can get the jitted Python callable by the attribute; numba_func. The C++ types are converted to the respective numba types and RVecs are accessible; in Python by numpy arrays. After jitting the actual Python callable, we jit another Python wrapper,; which converts the Python signature to a C-friendly signature. The wrapper code is accessible by; the attribute __py_wrapper__. Next, the Python wrapper is given to cling to jit a C++ wrapper function,; making the original Python callable accessible in C++. The wrapper code in C++ is accessible by; the attribute __cpp_wrapper__. Note that the callable is fully compiled without side-effects. The numba jitting uses the nopython; option which does not allow interaction with the Python interpreter. This means that you can use; the resulting function also safely in multi-threaded environments.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:875,Integrability,wrap,wrapper,875,"'''; Decorator for making Python callables accessible in C++ by just-in-time compilation; with numba and cling. The decorator takes the given Python callable and just-in-time compiles (jits); wrapper functions with the given C++ types for input and return types. Eventually,; the Python callable is accessible in the Numba namespace in C++. The implementation first jits with numba the Python callable. We support fundamental types and; ROOT::VecOps::RVecs thereof. Note that you can get the jitted Python callable by the attribute; numba_func. The C++ types are converted to the respective numba types and RVecs are accessible; in Python by numpy arrays. After jitting the actual Python callable, we jit another Python wrapper,; which converts the Python signature to a C-friendly signature. The wrapper code is accessible by; the attribute __py_wrapper__. Next, the Python wrapper is given to cling to jit a C++ wrapper function,; making the original Python callable accessible in C++. The wrapper code in C++ is accessible by; the attribute __cpp_wrapper__. Note that the callable is fully compiled without side-effects. The numba jitting uses the nopython; option which does not allow interaction with the Python interpreter. This means that you can use; the resulting function also safely in multi-threaded environments.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:914,Integrability,wrap,wrapper,914,"'''; Decorator for making Python callables accessible in C++ by just-in-time compilation; with numba and cling. The decorator takes the given Python callable and just-in-time compiles (jits); wrapper functions with the given C++ types for input and return types. Eventually,; the Python callable is accessible in the Numba namespace in C++. The implementation first jits with numba the Python callable. We support fundamental types and; ROOT::VecOps::RVecs thereof. Note that you can get the jitted Python callable by the attribute; numba_func. The C++ types are converted to the respective numba types and RVecs are accessible; in Python by numpy arrays. After jitting the actual Python callable, we jit another Python wrapper,; which converts the Python signature to a C-friendly signature. The wrapper code is accessible by; the attribute __py_wrapper__. Next, the Python wrapper is given to cling to jit a C++ wrapper function,; making the original Python callable accessible in C++. The wrapper code in C++ is accessible by; the attribute __cpp_wrapper__. Note that the callable is fully compiled without side-effects. The numba jitting uses the nopython; option which does not allow interaction with the Python interpreter. This means that you can use; the resulting function also safely in multi-threaded environments.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:992,Integrability,wrap,wrapper,992,"'''; Decorator for making Python callables accessible in C++ by just-in-time compilation; with numba and cling. The decorator takes the given Python callable and just-in-time compiles (jits); wrapper functions with the given C++ types for input and return types. Eventually,; the Python callable is accessible in the Numba namespace in C++. The implementation first jits with numba the Python callable. We support fundamental types and; ROOT::VecOps::RVecs thereof. Note that you can get the jitted Python callable by the attribute; numba_func. The C++ types are converted to the respective numba types and RVecs are accessible; in Python by numpy arrays. After jitting the actual Python callable, we jit another Python wrapper,; which converts the Python signature to a C-friendly signature. The wrapper code is accessible by; the attribute __py_wrapper__. Next, the Python wrapper is given to cling to jit a C++ wrapper function,; making the original Python callable accessible in C++. The wrapper code in C++ is accessible by; the attribute __cpp_wrapper__. Note that the callable is fully compiled without side-effects. The numba jitting uses the nopython; option which does not allow interaction with the Python interpreter. This means that you can use; the resulting function also safely in multi-threaded environments.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:1297,Performance,multi-thread,multi-threaded,1297,"'''; Decorator for making Python callables accessible in C++ by just-in-time compilation; with numba and cling. The decorator takes the given Python callable and just-in-time compiles (jits); wrapper functions with the given C++ types for input and return types. Eventually,; the Python callable is accessible in the Numba namespace in C++. The implementation first jits with numba the Python callable. We support fundamental types and; ROOT::VecOps::RVecs thereof. Note that you can get the jitted Python callable by the attribute; numba_func. The C++ types are converted to the respective numba types and RVecs are accessible; in Python by numpy arrays. After jitting the actual Python callable, we jit another Python wrapper,; which converts the Python signature to a C-friendly signature. The wrapper code is accessible by; the attribute __py_wrapper__. Next, the Python wrapper is given to cling to jit a C++ wrapper function,; making the original Python callable accessible in C++. The wrapper code in C++ is accessible by; the attribute __cpp_wrapper__. Note that the callable is fully compiled without side-effects. The numba jitting uses the nopython; option which does not allow interaction with the Python interpreter. This means that you can use; the resulting function also safely in multi-threaded environments.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:1287,Safety,safe,safely,1287,"'''; Decorator for making Python callables accessible in C++ by just-in-time compilation; with numba and cling. The decorator takes the given Python callable and just-in-time compiles (jits); wrapper functions with the given C++ types for input and return types. Eventually,; the Python callable is accessible in the Numba namespace in C++. The implementation first jits with numba the Python callable. We support fundamental types and; ROOT::VecOps::RVecs thereof. Note that you can get the jitted Python callable by the attribute; numba_func. The C++ types are converted to the respective numba types and RVecs are accessible; in Python by numpy arrays. After jitting the actual Python callable, we jit another Python wrapper,; which converts the Python signature to a C-friendly signature. The wrapper code is accessible by; the attribute __py_wrapper__. Next, the Python wrapper is given to cling to jit a C++ wrapper function,; making the original Python callable accessible in C++. The wrapper code in C++ is accessible by; the attribute __cpp_wrapper__. Note that the callable is fully compiled without side-effects. The numba jitting uses the nopython; option which does not allow interaction with the Python interpreter. This means that you can use; the resulting function also safely in multi-threaded environments.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:43,Security,access,accessible,43,"'''; Decorator for making Python callables accessible in C++ by just-in-time compilation; with numba and cling. The decorator takes the given Python callable and just-in-time compiles (jits); wrapper functions with the given C++ types for input and return types. Eventually,; the Python callable is accessible in the Numba namespace in C++. The implementation first jits with numba the Python callable. We support fundamental types and; ROOT::VecOps::RVecs thereof. Note that you can get the jitted Python callable by the attribute; numba_func. The C++ types are converted to the respective numba types and RVecs are accessible; in Python by numpy arrays. After jitting the actual Python callable, we jit another Python wrapper,; which converts the Python signature to a C-friendly signature. The wrapper code is accessible by; the attribute __py_wrapper__. Next, the Python wrapper is given to cling to jit a C++ wrapper function,; making the original Python callable accessible in C++. The wrapper code in C++ is accessible by; the attribute __cpp_wrapper__. Note that the callable is fully compiled without side-effects. The numba jitting uses the nopython; option which does not allow interaction with the Python interpreter. This means that you can use; the resulting function also safely in multi-threaded environments.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:299,Security,access,accessible,299,"'''; Decorator for making Python callables accessible in C++ by just-in-time compilation; with numba and cling. The decorator takes the given Python callable and just-in-time compiles (jits); wrapper functions with the given C++ types for input and return types. Eventually,; the Python callable is accessible in the Numba namespace in C++. The implementation first jits with numba the Python callable. We support fundamental types and; ROOT::VecOps::RVecs thereof. Note that you can get the jitted Python callable by the attribute; numba_func. The C++ types are converted to the respective numba types and RVecs are accessible; in Python by numpy arrays. After jitting the actual Python callable, we jit another Python wrapper,; which converts the Python signature to a C-friendly signature. The wrapper code is accessible by; the attribute __py_wrapper__. Next, the Python wrapper is given to cling to jit a C++ wrapper function,; making the original Python callable accessible in C++. The wrapper code in C++ is accessible by; the attribute __cpp_wrapper__. Note that the callable is fully compiled without side-effects. The numba jitting uses the nopython; option which does not allow interaction with the Python interpreter. This means that you can use; the resulting function also safely in multi-threaded environments.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:617,Security,access,accessible,617,"'''; Decorator for making Python callables accessible in C++ by just-in-time compilation; with numba and cling. The decorator takes the given Python callable and just-in-time compiles (jits); wrapper functions with the given C++ types for input and return types. Eventually,; the Python callable is accessible in the Numba namespace in C++. The implementation first jits with numba the Python callable. We support fundamental types and; ROOT::VecOps::RVecs thereof. Note that you can get the jitted Python callable by the attribute; numba_func. The C++ types are converted to the respective numba types and RVecs are accessible; in Python by numpy arrays. After jitting the actual Python callable, we jit another Python wrapper,; which converts the Python signature to a C-friendly signature. The wrapper code is accessible by; the attribute __py_wrapper__. Next, the Python wrapper is given to cling to jit a C++ wrapper function,; making the original Python callable accessible in C++. The wrapper code in C++ is accessible by; the attribute __cpp_wrapper__. Note that the callable is fully compiled without side-effects. The numba jitting uses the nopython; option which does not allow interaction with the Python interpreter. This means that you can use; the resulting function also safely in multi-threaded environments.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:813,Security,access,accessible,813,"'''; Decorator for making Python callables accessible in C++ by just-in-time compilation; with numba and cling. The decorator takes the given Python callable and just-in-time compiles (jits); wrapper functions with the given C++ types for input and return types. Eventually,; the Python callable is accessible in the Numba namespace in C++. The implementation first jits with numba the Python callable. We support fundamental types and; ROOT::VecOps::RVecs thereof. Note that you can get the jitted Python callable by the attribute; numba_func. The C++ types are converted to the respective numba types and RVecs are accessible; in Python by numpy arrays. After jitting the actual Python callable, we jit another Python wrapper,; which converts the Python signature to a C-friendly signature. The wrapper code is accessible by; the attribute __py_wrapper__. Next, the Python wrapper is given to cling to jit a C++ wrapper function,; making the original Python callable accessible in C++. The wrapper code in C++ is accessible by; the attribute __cpp_wrapper__. Note that the callable is fully compiled without side-effects. The numba jitting uses the nopython; option which does not allow interaction with the Python interpreter. This means that you can use; the resulting function also safely in multi-threaded environments.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:969,Security,access,accessible,969,"'''; Decorator for making Python callables accessible in C++ by just-in-time compilation; with numba and cling. The decorator takes the given Python callable and just-in-time compiles (jits); wrapper functions with the given C++ types for input and return types. Eventually,; the Python callable is accessible in the Numba namespace in C++. The implementation first jits with numba the Python callable. We support fundamental types and; ROOT::VecOps::RVecs thereof. Note that you can get the jitted Python callable by the attribute; numba_func. The C++ types are converted to the respective numba types and RVecs are accessible; in Python by numpy arrays. After jitting the actual Python callable, we jit another Python wrapper,; which converts the Python signature to a C-friendly signature. The wrapper code is accessible by; the attribute __py_wrapper__. Next, the Python wrapper is given to cling to jit a C++ wrapper function,; making the original Python callable accessible in C++. The wrapper code in C++ is accessible by; the attribute __cpp_wrapper__. Note that the callable is fully compiled without side-effects. The numba jitting uses the nopython; option which does not allow interaction with the Python interpreter. This means that you can use; the resulting function also safely in multi-threaded environments.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:1015,Security,access,accessible,1015,"'''; Decorator for making Python callables accessible in C++ by just-in-time compilation; with numba and cling. The decorator takes the given Python callable and just-in-time compiles (jits); wrapper functions with the given C++ types for input and return types. Eventually,; the Python callable is accessible in the Numba namespace in C++. The implementation first jits with numba the Python callable. We support fundamental types and; ROOT::VecOps::RVecs thereof. Note that you can get the jitted Python callable by the attribute; numba_func. The C++ types are converted to the respective numba types and RVecs are accessible; in Python by numpy arrays. After jitting the actual Python callable, we jit another Python wrapper,; which converts the Python signature to a C-friendly signature. The wrapper code is accessible by; the attribute __py_wrapper__. Next, the Python wrapper is given to cling to jit a C++ wrapper function,; making the original Python callable accessible in C++. The wrapper code in C++ is accessible by; the attribute __cpp_wrapper__. Note that the callable is fully compiled without side-effects. The numba jitting uses the nopython; option which does not allow interaction with the Python interpreter. This means that you can use; the resulting function also safely in multi-threaded environments.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:106,Integrability,wrap,wrapper,106,"'''; Get C friendly signature as numba type objects from C++ typenames. We need the types to jit a Python wrapper, which can be accessed as a function pointer in C++.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:128,Security,access,accessed,128,"'''; Get C friendly signature as numba type objects from C++ typenames. We need the types to jit a Python wrapper, which can be accessed as a function pointer in C++.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:311,Integrability,wrap,wrapper,311,"# We return an RVec through pointers as part of the input arguments. Note that the; # pointer type in numba is always an int64 and is later on cast in C++ to the correct type.; # In addition, we provide the size of the data type of the array for preallocating memory of; # the returned array.; # See the Python wrapper for further information why we are using these types.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:75,Integrability,wrap,wrapper,75,'''; Construct the type of an RVec input parameter for its use in the C++; wrapper function signature.; ''',MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:121,Integrability,wrap,wrapper,121,'''; Construct the type of an RVec input parameter for its use in the cast; of the function pointer of the jitted Python wrapper.; ''',MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:16,Integrability,wrap,wrapper,16,"# Create Python wrapper with C++ friendly signature; # Define signature",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:65,Energy Efficiency,allocate,allocated,65,"# If we return an RVec, we return via pointer the pointer of the allocated data,; # the size in elements. In addition, we provide the size of the datatype in bytes.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:8,Integrability,wrap,wrapper,8,"# Build wrapper code",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:170,Integrability,wrap,wrapper,170,"'''\; def pywrapper({SIGNATURE}):; """"""; Wrapper function for the jitted Python callable with special treatment of arrays; """"""; # If an RVec is given, define numba carray wrapper for the input types; {ARGS_DEF}; # Call the jitted Python function; r = nbjit({ARGS}); # Return the result; {RETURN}; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:46,Integrability,wrap,wrapper,46,"# Execute the pywrapper code and generate the wrapper function; # which calls the jitted C function",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:17,Integrability,wrap,wrapper,17,"# Jit the Python wrapper code",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:24,Integrability,wrap,wrapper,24,"# Get address of jitted wrapper function",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:24,Integrability,wrap,wrapper,24,"# Infer name of the C++ wrapper function",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:12,Integrability,wrap,wrapper,12,"# Build C++ wrapper for jitting with cling; # Define:; # - Input signature; # - Function pointer types",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:10,Integrability,wrap,wrapper,10,"# See C++ wrapper code for the reason using these types",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:10,Integrability,wrap,wrapper,10,"# See C++ wrapper code for the reason using these arguments",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:8,Integrability,wrap,wrapper,8,"# Build wrapper code",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:36,Integrability,wrap,wrapper,36,"""""""\; namespace Numba {{; /*; * C++ wrapper function around the jitted Python wrapping which calls the jitted Python callable; */; {RETURN_TYPE} {FUNC_NAME}({INPUT_SIGNATURE}) {{; // Create a function pointer from the jitted Python wrapper; const auto funcptr = reinterpret_cast<{FUNC_PTR_TYPE}>({FUNC_PTR});; // Perform conversion of RVec<bool>; {VECBOOL_CONVERSION}; // Return the result; {RETURN_OP}; }}; }}""""""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:78,Integrability,wrap,wrapping,78,"""""""\; namespace Numba {{; /*; * C++ wrapper function around the jitted Python wrapping which calls the jitted Python callable; */; {RETURN_TYPE} {FUNC_NAME}({INPUT_SIGNATURE}) {{; // Create a function pointer from the jitted Python wrapper; const auto funcptr = reinterpret_cast<{FUNC_PTR_TYPE}>({FUNC_PTR});; // Perform conversion of RVec<bool>; {VECBOOL_CONVERSION}; // Return the result; {RETURN_OP}; }}; }}""""""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:232,Integrability,wrap,wrapper,232,"""""""\; namespace Numba {{; /*; * C++ wrapper function around the jitted Python wrapping which calls the jitted Python callable; */; {RETURN_TYPE} {FUNC_NAME}({INPUT_SIGNATURE}) {{; // Create a function pointer from the jitted Python wrapper; const auto funcptr = reinterpret_cast<{FUNC_PTR_TYPE}>({FUNC_PTR});; // Perform conversion of RVec<bool>; {VECBOOL_CONVERSION}; // Return the result; {RETURN_OP}; }}; }}""""""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:6,Integrability,wrap,wrapper,6,"# Jit wrapper C++ code",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/__init__.py:8,Performance,cache,cache,8,"# Build cache of commonly used python strings (the cache is python intern, so; # all strings are shared python-wide, not just in PyROOT).; # See: https://docs.python.org/3.2/library/sys.html?highlight=sys.intern#sys.intern",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/__init__.py:51,Performance,cache,cache,51,"# Build cache of commonly used python strings (the cache is python intern, so; # all strings are shared python-wide, not just in PyROOT).; # See: https://docs.python.org/3.2/library/sys.html?highlight=sys.intern#sys.intern",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/__init__.py:12,Performance,load,loader,12,"""""""; Custom loader for modules under the ROOT namespace.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/__init__.py:138,Performance,load,loaded,138,"# Hard teardown: run part of the gROOT shutdown sequence.; # Running it here ensures that it is done before any ROOT libraries; # are off-loaded, with unspecified order of static object destruction.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py:21,Modifiability,variab,variable,21,"## Creates the input variable histogram and perform the transformations if necessary; # @param dl DataLoader object; # @param className string Signal/Background; # @param variableName string containing the variable name; # @param numBin for creating the histogram; # @param processTrfs string containing the list of transformations to be used on input variable; eg. ""I;N;D;P;U;G,D""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py:171,Modifiability,variab,variableName,171,"## Creates the input variable histogram and perform the transformations if necessary; # @param dl DataLoader object; # @param className string Signal/Background; # @param variableName string containing the variable name; # @param numBin for creating the histogram; # @param processTrfs string containing the list of transformations to be used on input variable; eg. ""I;N;D;P;U;G,D""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py:206,Modifiability,variab,variable,206,"## Creates the input variable histogram and perform the transformations if necessary; # @param dl DataLoader object; # @param className string Signal/Background; # @param variableName string containing the variable name; # @param numBin for creating the histogram; # @param processTrfs string containing the list of transformations to be used on input variable; eg. ""I;N;D;P;U;G,D""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py:352,Modifiability,variab,variable,352,"## Creates the input variable histogram and perform the transformations if necessary; # @param dl DataLoader object; # @param className string Signal/Background; # @param variableName string containing the variable name; # @param numBin for creating the histogram; # @param processTrfs string containing the list of transformations to be used on input variable; eg. ""I;N;D;P;U;G,D""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py:44,Performance,perform,perform,44,"## Creates the input variable histogram and perform the transformations if necessary; # @param dl DataLoader object; # @param className string Signal/Background; # @param variableName string containing the variable name; # @param numBin for creating the histogram; # @param processTrfs string containing the list of transformations to be used on input variable; eg. ""I;N;D;P;U;G,D""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py:14,Modifiability,variab,variables,14,"## Draw input variables; # This function uses the previously defined GetInputVariableHist function to create the histograms; # @param dl The object pointer; # @param variableName string containing the variable name; # @param numBin for creating the histogram; # @param processTrfs list of transformations to be used on input variable; eg. [""I"", ""N"", ""D"", ""P"", ""U"", ""G""]""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py:166,Modifiability,variab,variableName,166,"## Draw input variables; # This function uses the previously defined GetInputVariableHist function to create the histograms; # @param dl The object pointer; # @param variableName string containing the variable name; # @param numBin for creating the histogram; # @param processTrfs list of transformations to be used on input variable; eg. [""I"", ""N"", ""D"", ""P"", ""U"", ""G""]""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py:201,Modifiability,variab,variable,201,"## Draw input variables; # This function uses the previously defined GetInputVariableHist function to create the histograms; # @param dl The object pointer; # @param variableName string containing the variable name; # @param numBin for creating the histogram; # @param processTrfs list of transformations to be used on input variable; eg. [""I"", ""N"", ""D"", ""P"", ""U"", ""G""]""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py:325,Modifiability,variab,variable,325,"## Draw input variables; # This function uses the previously defined GetInputVariableHist function to create the histograms; # @param dl The object pointer; # @param variableName string containing the variable name; # @param numBin for creating the histogram; # @param processTrfs list of transformations to be used on input variable; eg. [""I"", ""N"", ""D"", ""P"", ""U"", ""G""]""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/DataLoader.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py:128,Modifiability,variab,variables,128,"# This class contains the necessary HTML, JavaScript, CSS codes (templates); # for the new Factory methods. Some parts of these variables will be replaced and the new string will be the cell output.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py:2,Usability,progress bar,progress bar,2,"# progress bar",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py:29,Modifiability,variab,variable,29,"## Returns a list with input variable names; # @param self the object pointer",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py:198,Deployability,update,updates,198,"## Rewrite function for TMVA::Factory::TrainAllMethods. This function provides interactive training.; # The training will be started on separated thread. The main thread will periodically check for updates and will create; # the JS output which will update the plots and progress bars. The main thread must contain `while True`, because, if not; # it will cause crash (output will be flushed by tornado IOLoop (runs on main thread), but the output streams are; # C++ atomic types); # @param fac the factory object pointer",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py:250,Deployability,update,update,250,"## Rewrite function for TMVA::Factory::TrainAllMethods. This function provides interactive training.; # The training will be started on separated thread. The main thread will periodically check for updates and will create; # the JS output which will update the plots and progress bars. The main thread must contain `while True`, because, if not; # it will cause crash (output will be flushed by tornado IOLoop (runs on main thread), but the output streams are; # C++ atomic types); # @param fac the factory object pointer",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py:271,Usability,progress bar,progress bars,271,"## Rewrite function for TMVA::Factory::TrainAllMethods. This function provides interactive training.; # The training will be started on separated thread. The main thread will periodically check for updates and will create; # the JS output which will update the plots and progress bars. The main thread must contain `while True`, because, if not; # it will cause crash (output will be flushed by tornado IOLoop (runs on main thread), but the output streams are; # C++ atomic types); # @param fac the factory object pointer",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py:2,Usability,progress bar,progress bar,2,"# progress bar",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py:13,Integrability,interface,interface,13,"## Graphical interface for booking DNN; # @param self object pointer; # @param loader the DataLoader object; # @param title classifier title",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py:79,Performance,load,loader,79,"## Graphical interface for booking DNN; # @param self object pointer; # @param loader the DataLoader object; # @param title classifier title",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py:95,Modifiability,layers,layers,95,"## This function gets the classifier information and weights in JSON formats, and the selected layers and it will create; # the weight heat map.; # @param net DNN in JSON format; # @param selectedLayers the selected layers",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py:216,Modifiability,layers,layers,216,"## This function gets the classifier information and weights in JSON formats, and the selected layers and it will create; # the weight heat map.; # @param net DNN in JSON format; # @param selectedLayers the selected layers",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py:83,Modifiability,layers,layers,83,"## Show DNN weights in a heat map. It will produce an ipywidget element, where the layers can be selected.; # @param fac object pointer; # @param datasetName name of current dataset; # @param methodName DNN's name",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/Factory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/JPyInterface.py:111,Integrability,inject,inject,111,"## Function inserter class; # This class contains the methods which are invoked by using jsmva magic, and will inject the new methods; # to TMVA::Factory, TMVA::DataLoader",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/JPyInterface.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/JPyInterface.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/JPyInterface.py:111,Security,inject,inject,111,"## Function inserter class; # This class contains the methods which are invoked by using jsmva magic, and will inject the new methods; # to TMVA::Factory, TMVA::DataLoader",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/JPyInterface.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/JPyInterface.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/JPyInterface.py:109,Performance,load,loader,109,"## This function captures objects which are declared in noteboko cell. It's used to capture factory and data loader objects.; # @param args classes",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/JPyInterface.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/JPyInterface.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/JPyInterface.py:46,Modifiability,config,config,46,"""""""; <script type=""text/javascript"">; require.config({; paths: {; 'JsMVA':'$PATH/JsMVA.min'; }; });; </script>; <link rel=""stylesheet"" href=""$CSSFile""></link>; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/JPyInterface.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/JPyInterface.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/OutputTransformer.py:238,Modifiability,variab,variable,238,"## This function creates a correlation matrix from python matrix.; # @param self object pointer; # @param title first part of the title of histogram; # @param className Signal/Background: it will be on title; # @param varNames array with variable names; # @param matrix the correlation matrix",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/OutputTransformer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/OutputTransformer.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/OutputTransformer.py:311,Availability,error,error,311,"## This is the main function, it will be registered as transformer function to JupyROOT, it will run every time; # when some ROOT function produces output. It get's the C++ style output and it returns it in HTML version.; # @param self object pointer; # @param output the content of C++ output stream; # @param error the content of C++ error stream",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/OutputTransformer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/OutputTransformer.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/OutputTransformer.py:336,Availability,error,error,336,"## This is the main function, it will be registered as transformer function to JupyROOT, it will run every time; # when some ROOT function produces output. It get's the C++ style output and it returns it in HTML version.; # @param self object pointer; # @param output the content of C++ output stream; # @param error the content of C++ error stream",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/JsMVA/OutputTransformer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/OutputTransformer.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_drawables.py:93,Modifiability,inherit,inherited,93,"# We have already set the ownership while initializing,; # so we do not need the custom Draw inherited from TPad to; # do it again in case it is executed.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_drawables.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_drawables.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py:36,Integrability,inject,injected,36,"'''; Instances of this class can be injected in class proxies to replace method; templates that we want to pythonize. Similarly to what `partialmethod`; does, this class implements `__get__` to return a wrapper object of a; method that is bound to an instance of the pythonized class. Such object is; both callable and subscriptable. Attributes:; _original_method (cppyy TemplateProxy): original cppyy method template; being pythonized.; _wrapper_class (subclass of MethodTemplateWrapper): class that wraps a; pythonized method template.; _extra_args (tuple): extra arguments to be forwarded to; `_wrapper_class`'s __init__ method, to be used by the wrapper object; when receiving a call.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py:203,Integrability,wrap,wrapper,203,"'''; Instances of this class can be injected in class proxies to replace method; templates that we want to pythonize. Similarly to what `partialmethod`; does, this class implements `__get__` to return a wrapper object of a; method that is bound to an instance of the pythonized class. Such object is; both callable and subscriptable. Attributes:; _original_method (cppyy TemplateProxy): original cppyy method template; being pythonized.; _wrapper_class (subclass of MethodTemplateWrapper): class that wraps a; pythonized method template.; _extra_args (tuple): extra arguments to be forwarded to; `_wrapper_class`'s __init__ method, to be used by the wrapper object; when receiving a call.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py:501,Integrability,wrap,wraps,501,"'''; Instances of this class can be injected in class proxies to replace method; templates that we want to pythonize. Similarly to what `partialmethod`; does, this class implements `__get__` to return a wrapper object of a; method that is bound to an instance of the pythonized class. Such object is; both callable and subscriptable. Attributes:; _original_method (cppyy TemplateProxy): original cppyy method template; being pythonized.; _wrapper_class (subclass of MethodTemplateWrapper): class that wraps a; pythonized method template.; _extra_args (tuple): extra arguments to be forwarded to; `_wrapper_class`'s __init__ method, to be used by the wrapper object; when receiving a call.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py:650,Integrability,wrap,wrapper,650,"'''; Instances of this class can be injected in class proxies to replace method; templates that we want to pythonize. Similarly to what `partialmethod`; does, this class implements `__get__` to return a wrapper object of a; method that is bound to an instance of the pythonized class. Such object is; both callable and subscriptable. Attributes:; _original_method (cppyy TemplateProxy): original cppyy method template; being pythonized.; _wrapper_class (subclass of MethodTemplateWrapper): class that wraps a; pythonized method template.; _extra_args (tuple): extra arguments to be forwarded to; `_wrapper_class`'s __init__ method, to be used by the wrapper object; when receiving a call.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py:36,Security,inject,injected,36,"'''; Instances of this class can be injected in class proxies to replace method; templates that we want to pythonize. Similarly to what `partialmethod`; does, this class implements `__get__` to return a wrapper object of a; method that is bound to an instance of the pythonized class. Such object is; both callable and subscriptable. Attributes:; _original_method (cppyy TemplateProxy): original cppyy method template; being pythonized.; _wrapper_class (subclass of MethodTemplateWrapper): class that wraps a; pythonized method template.; _extra_args (tuple): extra arguments to be forwarded to; `_wrapper_class`'s __init__ method, to be used by the wrapper object; when receiving a call.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py:244,Integrability,wrap,wrapper,244,"'''; Initializes the getter object of a method template.; Saves the original implementation of the method template to be replaced; (i.e. the one provided by cppyy) so that it can be later used in the; implementation of the pythonization by the wrapper object. Args:; original_method (cppyy TemplateProxy): original cppyy method; template being pythonized.; wrapper_class (subclass of MethodTemplateWrapper): class that wraps; a pythonized method template.; extra_args (tuple, optional): extra arguments to be forwarded to; `wrapper_class`'s __init__ method, to be used by the wrapper; object when receiving a call.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py:419,Integrability,wrap,wraps,419,"'''; Initializes the getter object of a method template.; Saves the original implementation of the method template to be replaced; (i.e. the one provided by cppyy) so that it can be later used in the; implementation of the pythonization by the wrapper object. Args:; original_method (cppyy TemplateProxy): original cppyy method; template being pythonized.; wrapper_class (subclass of MethodTemplateWrapper): class that wraps; a pythonized method template.; extra_args (tuple, optional): extra arguments to be forwarded to; `wrapper_class`'s __init__ method, to be used by the wrapper; object when receiving a call.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py:576,Integrability,wrap,wrapper,576,"'''; Initializes the getter object of a method template.; Saves the original implementation of the method template to be replaced; (i.e. the one provided by cppyy) so that it can be later used in the; implementation of the pythonization by the wrapper object. Args:; original_method (cppyy TemplateProxy): original cppyy method; template being pythonized.; wrapper_class (subclass of MethodTemplateWrapper): class that wraps; a pythonized method template.; extra_args (tuple, optional): extra arguments to be forwarded to; `wrapper_class`'s __init__ method, to be used by the wrapper; object when receiving a call.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py:27,Integrability,wrap,wrapper,27,"'''; Creates and returns a wrapper object for a method template. The type of; the wrapper is a subclass of MethodTemplateWrapper.; By implementing `__get__`, we obtain a handle to the instance of the; pythonized class on which the application accessed the method template.; That allows us to get an original implementation of the method template; that is bound to that instance, and pass such implementation along to; the wrapper object for later use. Args:; instance (class instance): instance of the pythonized class on; which the application accessed the method template.; instance_type (class type): type of the instance. Returns:; instance of MethodTemplateWrapper subclass: contains a handle to; the original implementation of the method template that is; bound to `instance` and, possibly, some extra arguments to be; used when receiving a call.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py:82,Integrability,wrap,wrapper,82,"'''; Creates and returns a wrapper object for a method template. The type of; the wrapper is a subclass of MethodTemplateWrapper.; By implementing `__get__`, we obtain a handle to the instance of the; pythonized class on which the application accessed the method template.; That allows us to get an original implementation of the method template; that is bound to that instance, and pass such implementation along to; the wrapper object for later use. Args:; instance (class instance): instance of the pythonized class on; which the application accessed the method template.; instance_type (class type): type of the instance. Returns:; instance of MethodTemplateWrapper subclass: contains a handle to; the original implementation of the method template that is; bound to `instance` and, possibly, some extra arguments to be; used when receiving a call.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py:422,Integrability,wrap,wrapper,422,"'''; Creates and returns a wrapper object for a method template. The type of; the wrapper is a subclass of MethodTemplateWrapper.; By implementing `__get__`, we obtain a handle to the instance of the; pythonized class on which the application accessed the method template.; That allows us to get an original implementation of the method template; that is bound to that instance, and pass such implementation along to; the wrapper object for later use. Args:; instance (class instance): instance of the pythonized class on; which the application accessed the method template.; instance_type (class type): type of the instance. Returns:; instance of MethodTemplateWrapper subclass: contains a handle to; the original implementation of the method template that is; bound to `instance` and, possibly, some extra arguments to be; used when receiving a call.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py:243,Security,access,accessed,243,"'''; Creates and returns a wrapper object for a method template. The type of; the wrapper is a subclass of MethodTemplateWrapper.; By implementing `__get__`, we obtain a handle to the instance of the; pythonized class on which the application accessed the method template.; That allows us to get an original implementation of the method template; that is bound to that instance, and pass such implementation along to; the wrapper object for later use. Args:; instance (class instance): instance of the pythonized class on; which the application accessed the method template.; instance_type (class type): type of the instance. Returns:; instance of MethodTemplateWrapper subclass: contains a handle to; the original implementation of the method template that is; bound to `instance` and, possibly, some extra arguments to be; used when receiving a call.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py:545,Security,access,accessed,545,"'''; Creates and returns a wrapper object for a method template. The type of; the wrapper is a subclass of MethodTemplateWrapper.; By implementing `__get__`, we obtain a handle to the instance of the; pythonized class on which the application accessed the method template.; That allows us to get an original implementation of the method template; that is bound to that instance, and pass such implementation along to; the wrapper object for later use. Args:; instance (class instance): instance of the pythonized class on; which the application accessed the method template.; instance_type (class type): type of the instance. Returns:; instance of MethodTemplateWrapper subclass: contains a handle to; the original implementation of the method template that is; bound to `instance` and, possibly, some extra arguments to be; used when receiving a call.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py:172,Integrability,wrap,wrappers,172,"'''; Abstract base class that defines some common logic to properly pythonize; method templates. More precisely, it provides an implementation of; `__getitem__` that makes wrappers subscriptable and allows them to capture; template arguments.; Subclasses of this class must redefine `__call__` with the actual; pythonization of the method template. Attributes:; _original_method (cppyy TemplateProxy): original implementation of the; method template that is bound to the instance on which the template; was accessed.; _extra_args (tuple): extra arguments to be used when receiving a call.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py:507,Security,access,accessed,507,"'''; Abstract base class that defines some common logic to properly pythonize; method templates. More precisely, it provides an implementation of; `__getitem__` that makes wrappers subscriptable and allows them to capture; template arguments.; Subclasses of this class must redefine `__call__` with the actual; pythonization of the method template. Attributes:; _original_method (cppyy TemplateProxy): original implementation of the; method template that is bound to the instance on which the template; was accessed.; _extra_args (tuple): extra arguments to be used when receiving a call.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py:50,Testability,log,logic,50,"'''; Abstract base class that defines some common logic to properly pythonize; method templates. More precisely, it provides an implementation of; `__getitem__` that makes wrappers subscriptable and allows them to capture; template arguments.; Subclasses of this class must redefine `__call__` with the actual; pythonization of the method template. Attributes:; _original_method (cppyy TemplateProxy): original implementation of the; method template that is bound to the instance on which the template; was accessed.; _extra_args (tuple): extra arguments to be used when receiving a call.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py:22,Integrability,wrap,wrapper,22,'''; Constructor of a wrapper object for a method template. Args:; original_method (cppyy TemplateProxy): original implementation of; the method template that is bound to the instance on which the; template was accessed.; extra_args (tuple): extra arguments to be used when receiving a; call.; ''',MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py:211,Security,access,accessed,211,'''; Constructor of a wrapper object for a method template. Args:; original_method (cppyy TemplateProxy): original implementation of; the method template that is bound to the instance on which the; template was accessed.; extra_args (tuple): extra arguments to be used when receiving a; call.; ''',MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py:188,Integrability,wrap,wrapper,188,"'''; Captures the template arguments used to instantiate the method template. Args:; template_args (tuple): template arguments. Returns:; instance of MethodTemplateWrapper subclass: a new wrapper instance; is returned, with an original method on which the template; arguments have been applied.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py:424,Performance,perform,performant,424,"""""""Read-out the RDataFrame as a collection of numpy arrays. The values of the dataframe are read out as numpy array of the respective type; if the type is a fundamental type such as float or int. If the type of the column; is a complex type, such as your custom class or a std::array, the returned numpy; array contains Python objects of this type interpreted via PyROOT. Be aware that reading out custom types is much less performant than reading out; fundamental types, such as int or float, which are supported directly by numpy. The reading is performed in multiple threads if the implicit multi-threading of; ROOT is enabled. Note that this is an instant action of the RDataFrame graph and will trigger the; event-loop. Parameters:; columns: If None return all branches as columns, otherwise specify names in iterable.; exclude: Exclude branches from selection.; lazy: Determines whether this action is instant (False, default) or lazy (True). Returns:; dict or AsNumpyResult: if instant (default), dict with column names as keys and; 1D numpy arrays with content as values; if lazy, AsNumpyResult containing; the result pointers obtained from the Take actions.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py:548,Performance,perform,performed,548,"""""""Read-out the RDataFrame as a collection of numpy arrays. The values of the dataframe are read out as numpy array of the respective type; if the type is a fundamental type such as float or int. If the type of the column; is a complex type, such as your custom class or a std::array, the returned numpy; array contains Python objects of this type interpreted via PyROOT. Be aware that reading out custom types is much less performant than reading out; fundamental types, such as int or float, which are supported directly by numpy. The reading is performed in multiple threads if the implicit multi-threading of; ROOT is enabled. Note that this is an instant action of the RDataFrame graph and will trigger the; event-loop. Parameters:; columns: If None return all branches as columns, otherwise specify names in iterable.; exclude: Exclude branches from selection.; lazy: Determines whether this action is instant (False, default) or lazy (True). Returns:; dict or AsNumpyResult: if instant (default), dict with column names as keys and; 1D numpy arrays with content as values; if lazy, AsNumpyResult containing; the result pointers obtained from the Take actions.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py:594,Performance,multi-thread,multi-threading,594,"""""""Read-out the RDataFrame as a collection of numpy arrays. The values of the dataframe are read out as numpy array of the respective type; if the type is a fundamental type such as float or int. If the type of the column; is a complex type, such as your custom class or a std::array, the returned numpy; array contains Python objects of this type interpreted via PyROOT. Be aware that reading out custom types is much less performant than reading out; fundamental types, such as int or float, which are supported directly by numpy. The reading is performed in multiple threads if the implicit multi-threading of; ROOT is enabled. Note that this is an instant action of the RDataFrame graph and will trigger the; event-loop. Parameters:; columns: If None return all branches as columns, otherwise specify names in iterable.; exclude: Exclude branches from selection.; lazy: Determines whether this action is instant (False, default) or lazy (True). Returns:; dict or AsNumpyResult: if instant (default), dict with column names as keys and; 1D numpy arrays with content as values; if lazy, AsNumpyResult containing; the result pointers obtained from the Take actions.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py:181,Performance,optimiz,optimization,181,"# bool columns should be taken as unsigned chars, because NumPy stores; # bools in bytes - different from the std::vector<bool> returned by the; # action, which might do some space optimization",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py:24,Integrability,wrap,wrapping,24,"# This creates only the wrapping of the objects and does not copy.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py:25,Availability,alive,alive,25,"# For references to keep alive the NumPy arrays that are read by; # MakeNumpyDataFrame.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py:68,Availability,alive,alive,68,"# How we keep the NumPy arrays around as long as the RDataSource is alive:; #; # 1. Cache a container with references to the NumPy arrays in a global; # dictionary. Note that we use a copy of the original dict as the; # container, because otherwise the caller of _MakeNumpyDataFrame can; # invalidate our cache by mutating the np_dict after the call.; #; # 2. Together with the array data, store a deleter function to delete the; # cache element in the cache itself.; #; # 3. The C++ side gets a reference to the deleter function via; # std::function. Note that the C++ side can only get a non-owning; # reference to the Python function, which is the reason why we have to; # keep the deleter alive in the cache itself.; #; # 4. The RDataSource calls the deleter in its destructor.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py:693,Availability,alive,alive,693,"# How we keep the NumPy arrays around as long as the RDataSource is alive:; #; # 1. Cache a container with references to the NumPy arrays in a global; # dictionary. Note that we use a copy of the original dict as the; # container, because otherwise the caller of _MakeNumpyDataFrame can; # invalidate our cache by mutating the np_dict after the call.; #; # 2. Together with the array data, store a deleter function to delete the; # cache element in the cache itself.; #; # 3. The C++ side gets a reference to the deleter function via; # std::function. Note that the C++ side can only get a non-owning; # reference to the Python function, which is the reason why we have to; # keep the deleter alive in the cache itself.; #; # 4. The RDataSource calls the deleter in its destructor.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py:305,Performance,cache,cache,305,"# How we keep the NumPy arrays around as long as the RDataSource is alive:; #; # 1. Cache a container with references to the NumPy arrays in a global; # dictionary. Note that we use a copy of the original dict as the; # container, because otherwise the caller of _MakeNumpyDataFrame can; # invalidate our cache by mutating the np_dict after the call.; #; # 2. Together with the array data, store a deleter function to delete the; # cache element in the cache itself.; #; # 3. The C++ side gets a reference to the deleter function via; # std::function. Note that the C++ side can only get a non-owning; # reference to the Python function, which is the reason why we have to; # keep the deleter alive in the cache itself.; #; # 4. The RDataSource calls the deleter in its destructor.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py:432,Performance,cache,cache,432,"# How we keep the NumPy arrays around as long as the RDataSource is alive:; #; # 1. Cache a container with references to the NumPy arrays in a global; # dictionary. Note that we use a copy of the original dict as the; # container, because otherwise the caller of _MakeNumpyDataFrame can; # invalidate our cache by mutating the np_dict after the call.; #; # 2. Together with the array data, store a deleter function to delete the; # cache element in the cache itself.; #; # 3. The C++ side gets a reference to the deleter function via; # std::function. Note that the C++ side can only get a non-owning; # reference to the Python function, which is the reason why we have to; # keep the deleter alive in the cache itself.; #; # 4. The RDataSource calls the deleter in its destructor.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py:453,Performance,cache,cache,453,"# How we keep the NumPy arrays around as long as the RDataSource is alive:; #; # 1. Cache a container with references to the NumPy arrays in a global; # dictionary. Note that we use a copy of the original dict as the; # container, because otherwise the caller of _MakeNumpyDataFrame can; # invalidate our cache by mutating the np_dict after the call.; #; # 2. Together with the array data, store a deleter function to delete the; # cache element in the cache itself.; #; # 3. The C++ side gets a reference to the deleter function via; # std::function. Note that the C++ side can only get a non-owning; # reference to the Python function, which is the reason why we have to; # keep the deleter alive in the cache itself.; #; # 4. The RDataSource calls the deleter in its destructor.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py:706,Performance,cache,cache,706,"# How we keep the NumPy arrays around as long as the RDataSource is alive:; #; # 1. Cache a container with references to the NumPy arrays in a global; # dictionary. Note that we use a copy of the original dict as the; # container, because otherwise the caller of _MakeNumpyDataFrame can; # invalidate our cache by mutating the np_dict after the call.; #; # 2. Together with the array data, store a deleter function to delete the; # cache element in the cache itself.; #; # 3. The C++ side gets a reference to the deleter function via; # std::function. Note that the C++ side can only get a non-owning; # reference to the Python function, which is the reason why we have to; # keep the deleter alive in the cache itself.; #; # 4. The RDataSource calls the deleter in its destructor.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_conversion_maps.py:144,Integrability,depend,dependency,144,"""""""; Contains constants needed for _rdf_pyz to convert datatypes for numba declarable types.; It is in a separate module so as to avoid a numpy dependency for ROOT.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_conversion_maps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_conversion_maps.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_conversion_maps.py:130,Safety,avoid,avoid,130,"""""""; Contains constants needed for _rdf_pyz to convert datatypes for numba declarable types.; It is in a separate module so as to avoid a numpy dependency for ROOT.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_conversion_maps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_conversion_maps.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_pyz.py:317,Availability,error,error,317,"""""""; Function to determine the type of a variable x.; If x is a string. It maps it to the corresponding column's type in RDF. (String constants are not supported); Else it determines the fundamental type of x. (int, float, bool); Else it is an a numpy array and maps it to corresponding RVec.; Otherwise flags a type error; Args:; 	 ` x: Variable whose type is to be determined. Returns:; type of the variable x; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_pyz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_pyz.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_pyz.py:41,Modifiability,variab,variable,41,"""""""; Function to determine the type of a variable x.; If x is a string. It maps it to the corresponding column's type in RDF. (String constants are not supported); Else it determines the fundamental type of x. (int, float, bool); Else it is an a numpy array and maps it to corresponding RVec.; Otherwise flags a type error; Args:; 	 ` x: Variable whose type is to be determined. Returns:; type of the variable x; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_pyz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_pyz.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_pyz.py:401,Modifiability,variab,variable,401,"""""""; Function to determine the type of a variable x.; If x is a string. It maps it to the corresponding column's type in RDF. (String constants are not supported); Else it determines the fundamental type of x. (int, float, bool); Else it is an a numpy array and maps it to corresponding RVec.; Otherwise flags a type error; Args:; 	 ` x: Variable whose type is to be determined. Returns:; type of the variable x; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_pyz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_pyz.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_pyz.py:186,Availability,error,error,186,"""""""; Jits the provided function using ROOT's NumbaDeclare.; Also checks if the function was jitted earlier in which case it won't jit again but if signature does not match. It raises an error. Arguments:; func: A python callable; cols_list: A list of columns of RDF on which func depends on.; extra_args: A dict of extra arguments that func requires.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_pyz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_pyz.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_pyz.py:280,Integrability,depend,depends,280,"""""""; Jits the provided function using ROOT's NumbaDeclare.; Also checks if the function was jitted earlier in which case it won't jit again but if signature does not match. It raises an error. Arguments:; func: A python callable; cols_list: A list of columns of RDF on which func depends on.; extra_args: A dict of extra arguments that func requires.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_pyz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_pyz.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_utils.py:7,Integrability,wrap,wrapper,7,"""""""; A wrapper class that inherits from `numpy.ndarray` and allows to attach the; result pointer of the `Take` action in an `RDataFrame` event loop to the; collection of values returned by that action. See; https://docs.scipy.org/doc/numpy/user/basics.subclassing.html for more; information on subclassing numpy arrays.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_utils.py:26,Modifiability,inherit,inherits,26,"""""""; A wrapper class that inherits from `numpy.ndarray` and allows to attach the; result pointer of the `Take` action in an `RDataFrame` event loop to the; collection of values returned by that action. See; https://docs.scipy.org/doc/numpy/user/basics.subclassing.html for more; information on subclassing numpy arrays.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_utils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdf_utils.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_runtime_error.py:150,Testability,log,logic,150,"# TODO: vpadulan; # This module enables pickling/unpickling of the std::runtime_error Python proxy; # defined in cppyy (via CPPExcInstance). The same logic should be implemented; # in the CPython extension to be more generic.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_runtime_error.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_runtime_error.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_runtime_error.py:68,Integrability,message,message,68,"""""""; Creates a new cppyy std::runtime_error proxy with the original message.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_runtime_error.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_runtime_error.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_runtime_error.py:92,Availability,error,error,92,"""""""; Establish the strategy to recreate a std::runtime_error when unpickling. Creates a new error from the original message. Need to use a separate free; function instead of an inline lambda to help pickle.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_runtime_error.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_runtime_error.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_runtime_error.py:116,Integrability,message,message,116,"""""""; Establish the strategy to recreate a std::runtime_error when unpickling. Creates a new error from the original message. Need to use a separate free; function instead of an inline lambda to help pickle.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_runtime_error.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_runtime_error.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py:12,Integrability,interface,interface,12,"# Get array interface of object",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py:140,Security,access,accessed,140,"# Numpy breaks for data pointer of 0 even though the array is empty.; # We set the pointer to 1 but the value itself is arbitrary and never accessed.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py:115,Integrability,interface,interface,115,"# Parameters:; # klass: class to be pythonized; # name: string containing the name of the class; # Add numpy array interface",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_stl_vector.py:115,Integrability,interface,interface,115,"# Parameters:; # klass: class to be pythonized; # name: string containing the name of the class; # Add numpy array interface; # NOTE: The pythonization is reused from ROOT::VecOps::RVec",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_stl_vector.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_stl_vector.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tcollection.py:58,Modifiability,extend,extend,58,"# Parameters:; # - self: collection; # - c: collection to extend self with",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tcollection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tcollection.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectory.py:69,Availability,failure,failure,69,"""""""Injection of TDirectory.__getitem__ that raises AttributeError on failure. Method that is assigned to TDirectory.__getitem__. It relies on Get to; obtain the object from the TDirectory and adds on top:; - Raising an AttributeError if the object does not exist; - Caching the result of a successful get for future re-attempts.; Once cached, the same object is retrieved every time.; This pythonisation is inherited by TDirectoryFile and TFile. Example:; ```; myfile.mydir.mysubdir.myHist.Draw(); ```; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectory.py:407,Modifiability,inherit,inherited,407,"""""""Injection of TDirectory.__getitem__ that raises AttributeError on failure. Method that is assigned to TDirectory.__getitem__. It relies on Get to; obtain the object from the TDirectory and adds on top:; - Raising an AttributeError if the object does not exist; - Caching the result of a successful get for future re-attempts.; Once cached, the same object is retrieved every time.; This pythonisation is inherited by TDirectoryFile and TFile. Example:; ```; myfile.mydir.mysubdir.myHist.Draw(); ```; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectory.py:335,Performance,cache,cached,335,"""""""Injection of TDirectory.__getitem__ that raises AttributeError on failure. Method that is assigned to TDirectory.__getitem__. It relies on Get to; obtain the object from the TDirectory and adds on top:; - Raising an AttributeError if the object does not exist; - Caching the result of a successful get for future re-attempts.; Once cached, the same object is retrieved every time.; This pythonisation is inherited by TDirectoryFile and TFile. Example:; ```; myfile.mydir.mysubdir.myHist.Draw(); ```; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectory.py:36,Usability,clear,clear,36,"# Caching behavior seems to be more clear to the user; can always override said; # behavior (i.e. re-read from file) with an explicit Get() call",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectory.py:36,Usability,clear,clear,36,"# Caching behavior seems to be more clear to the user; can always override said; # behavior (i.e. re-read from file) with an explicit Get() call",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectoryfile.py:178,Integrability,inject,inject,178,"""""""; Allow access to objects through the method Get(). This concerns both TDirectoryFile and TFile, since the latter; inherits the Get method from the former.; We decided not to inject this behavior directly in TDirectory; because this one already has a templated method Get which, when; invoked from Python, returns an object of the derived class (e.g. TH1F); and not a generic TObject.; In case the object is not found, a null pointer is returned.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectoryfile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectoryfile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectoryfile.py:118,Modifiability,inherit,inherits,118,"""""""; Allow access to objects through the method Get(). This concerns both TDirectoryFile and TFile, since the latter; inherits the Get method from the former.; We decided not to inject this behavior directly in TDirectory; because this one already has a templated method Get which, when; invoked from Python, returns an object of the derived class (e.g. TH1F); and not a generic TObject.; In case the object is not found, a null pointer is returned.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectoryfile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectoryfile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectoryfile.py:11,Security,access,access,11,"""""""; Allow access to objects through the method Get(). This concerns both TDirectoryFile and TFile, since the latter; inherits the Get method from the former.; We decided not to inject this behavior directly in TDirectory; because this one already has a templated method Get which, when; invoked from Python, returns an object of the derived class (e.g. TH1F); and not a generic TObject.; In case the object is not found, a null pointer is returned.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectoryfile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectoryfile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectoryfile.py:178,Security,inject,inject,178,"""""""; Allow access to objects through the method Get(). This concerns both TDirectoryFile and TFile, since the latter; inherits the Get method from the former.; We decided not to inject this behavior directly in TDirectory; because this one already has a templated method Get which, when; invoked from Python, returns an object of the derived class (e.g. TH1F); and not a generic TObject.; In case the object is not found, a null pointer is returned.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectoryfile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectoryfile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectoryfile.py:20,Modifiability,inherit,inherits,20,"""""""; TDirectoryFile inherits from TDirectory the pythonized attr syntax (__getattr__); and WriteObject method.; On the other side, the Get() method is pythonised only in TDirectoryFile.; Thus, the situation is now the following:. 1) __getattr__ : TDirectory --> TDirectoryFile --> TFile; 1.1) caches the returned object for future attempts; 1.2) raises AttributeError if object not found. 2) Get() : TDirectoryFile --> TFile; 2.1) does not cache the returned object; 2.2 returns nullptr if object not found; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectoryfile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectoryfile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectoryfile.py:293,Performance,cache,caches,293,"""""""; TDirectoryFile inherits from TDirectory the pythonized attr syntax (__getattr__); and WriteObject method.; On the other side, the Get() method is pythonised only in TDirectoryFile.; Thus, the situation is now the following:. 1) __getattr__ : TDirectory --> TDirectoryFile --> TFile; 1.1) caches the returned object for future attempts; 1.2) raises AttributeError if object not found. 2) Get() : TDirectoryFile --> TFile; 2.1) does not cache the returned object; 2.2 returns nullptr if object not found; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectoryfile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectoryfile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectoryfile.py:440,Performance,cache,cache,440,"""""""; TDirectoryFile inherits from TDirectory the pythonized attr syntax (__getattr__); and WriteObject method.; On the other side, the Get() method is pythonised only in TDirectoryFile.; Thus, the situation is now the following:. 1) __getattr__ : TDirectory --> TDirectoryFile --> TFile; 1.1) caches the returned object for future attempts; 1.2) raises AttributeError if object not found. 2) Get() : TDirectoryFile --> TFile; 2.1) does not cache the returned object; 2.2 returns nullptr if object not found; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectoryfile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectoryfile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tfile.py:79,Performance,cache,cache,79,"# A TFile might be storing references to objects retrieved by the user in; # a cache. Make sure the cache is cleaned at exit time rather than having; # to wait for the garbage collector.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tfile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tfile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tfile.py:100,Performance,cache,cache,100,"# A TFile might be storing references to objects retrieved by the user in; # a cache. Make sure the cache is cleaned at exit time rather than having; # to wait for the garbage collector.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tfile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tfile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tfile.py:11,Modifiability,inherit,inherits,11,"""""""; TFile inherits from; - TDirectory the pythonized attr syntax (__getattr__) and WriteObject method.; - TDirectoryFile the pythonized Get method (pythonized only in Python); and defines the __enter__ and __exit__ methods to work as a context manager.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tfile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tfile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tfile.py:71,Usability,usab,usable,71,"# Pythonization for __enter__ and __exit__ methods; # These make TFile usable in a `with` statement as a context manager",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tfile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tfile.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tgraph.py:521,Availability,error,error,521,"# Create a composite pythonizor.; #; # A composite is a type of pythonizor, i.e. it is a callable that expects two; # parameters: a class proxy and a string with the name of that class.; # A composite is created with the following parameters:; # - A string to match the class/es to be pythonized; # - A string to match the method/s to be pythonized in the class/es; # - A callable that will post-process the return value of the matched method/s; #; # Here we create a composite that will match TGraph, TGraph2D and their error; # subclasses, and will pythonize their getter methods of the X,Y,Z coordinate; # and error arrays, which in C++ return a pointer to a double.; # The pythonization consists in setting the size of the array that the getter; # method returns, so that it is known in Python and the array is fully usable; # (its length can be obtained, it is iterable).",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tgraph.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tgraph.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tgraph.py:613,Availability,error,error,613,"# Create a composite pythonizor.; #; # A composite is a type of pythonizor, i.e. it is a callable that expects two; # parameters: a class proxy and a string with the name of that class.; # A composite is created with the following parameters:; # - A string to match the class/es to be pythonized; # - A string to match the method/s to be pythonized in the class/es; # - A callable that will post-process the return value of the matched method/s; #; # Here we create a composite that will match TGraph, TGraph2D and their error; # subclasses, and will pythonize their getter methods of the X,Y,Z coordinate; # and error arrays, which in C++ return a pointer to a double.; # The pythonization consists in setting the size of the array that the getter; # method returns, so that it is known in Python and the array is fully usable; # (its length can be obtained, it is iterable).",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tgraph.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tgraph.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tgraph.py:821,Usability,usab,usable,821,"# Create a composite pythonizor.; #; # A composite is a type of pythonizor, i.e. it is a callable that expects two; # parameters: a class proxy and a string with the name of that class.; # A composite is created with the following parameters:; # - A string to match the class/es to be pythonized; # - A string to match the method/s to be pythonized in the class/es; # - A callable that will post-process the return value of the matched method/s; #; # Here we create a composite that will match TGraph, TGraph2D and their error; # subclasses, and will pythonize their getter methods of the X,Y,Z coordinate; # and error arrays, which in C++ return a pointer to a double.; # The pythonization consists in setting the size of the array that the getter; # method returns, so that it is known in Python and the array is fully usable; # (its length can be obtained, it is iterable).",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tgraph.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tgraph.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tseqcollection.py:7,Security,access,access,7,"# Item access",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tseqcollection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tseqcollection.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tseqcollection.py:71,Integrability,message,message,71,"# Parameters:; # - idx: index whose type needs to be checked; # - msg: message to show in case of type issue",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tseqcollection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tseqcollection.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tseqcollection.py:100,Availability,error,error,100,"# Prevent this new Python proxy from owning the C++ object; # Otherwise we get an 'already deleted' error in; # TList::Clear when the application ends",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tseqcollection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tseqcollection.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tseqcollection.py:55,Security,access,access,55,"# Parameters:; # klass: class to be pythonized; # Item access methods",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tseqcollection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tseqcollection.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py:116,Availability,alive,alive,116,"# Otherwise, SetBranchAddress is expecting a pointer to the address of; # the object, and the pointer needs to stay alive. Therefore, we create; # a container for the pointer and cache it in the original cppyy proxy.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py:179,Performance,cache,cache,179,"# Otherwise, SetBranchAddress is expecting a pointer to the address of; # the object, and the pointer needs to stay alive. Therefore, we create; # a container for the pointer and cache it in the original cppyy proxy.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py:169,Safety,avoid,avoid,169,"""""""; Allow branches to be accessed as attributes of a tree. Allow access to branches/leaves as if they were Python data attributes of; the tree (e.g. mytree.branch). To avoid using the CPyCppyy API, any necessary cast is done here on the; Python side. The GetBranchAttr() function encodes a necessary cast in the; second element of the output tuple, which is a string with the required; type name. Parameters:; self (TTree): The instance of the TTree object from which the attribute is being retrieved.; key (str): The name of the branch to retrieve from the TTree object.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py:26,Security,access,accessed,26,"""""""; Allow branches to be accessed as attributes of a tree. Allow access to branches/leaves as if they were Python data attributes of; the tree (e.g. mytree.branch). To avoid using the CPyCppyy API, any necessary cast is done here on the; Python side. The GetBranchAttr() function encodes a necessary cast in the; second element of the output tuple, which is a string with the required; type name. Parameters:; self (TTree): The instance of the TTree object from which the attribute is being retrieved.; key (str): The name of the branch to retrieve from the TTree object.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py:66,Security,access,access,66,"""""""; Allow branches to be accessed as attributes of a tree. Allow access to branches/leaves as if they were Python data attributes of; the tree (e.g. mytree.branch). To avoid using the CPyCppyy API, any necessary cast is done here on the; Python side. The GetBranchAttr() function encodes a necessary cast in the; second element of the output tuple, which is a string with the required; type name. Parameters:; self (TTree): The instance of the TTree object from which the attribute is being retrieved.; key (str): The name of the branch to retrieve from the TTree object.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py:239,Integrability,inject,inject,239,"# Parameters:; # klass: class to be pythonized; # name: string containing the name of the class; # Pythonizations that are common to TTree and its subclasses.; # To avoid duplicating the same logic in the pythonizors of; # the subclasses, inject the pythonizations for all the target; # classes here.; # Pythonic iterator",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py:165,Safety,avoid,avoid,165,"# Parameters:; # klass: class to be pythonized; # name: string containing the name of the class; # Pythonizations that are common to TTree and its subclasses.; # To avoid duplicating the same logic in the pythonizors of; # the subclasses, inject the pythonizations for all the target; # classes here.; # Pythonic iterator",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py:239,Security,inject,inject,239,"# Parameters:; # klass: class to be pythonized; # name: string containing the name of the class; # Pythonizations that are common to TTree and its subclasses.; # To avoid duplicating the same logic in the pythonizors of; # the subclasses, inject the pythonizations for all the target; # classes here.; # Pythonic iterator",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py:192,Testability,log,logic,192,"# Parameters:; # klass: class to be pythonized; # name: string containing the name of the class; # Pythonizations that are common to TTree and its subclasses.; # To avoid duplicating the same logic in the pythonizors of; # the subclasses, inject the pythonizations for all the target; # classes here.; # Pythonic iterator",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py:250,Integrability,inject,injected,250,"# Parameters:; # klass: class to be pythonized; # TChain needs to be explicitly pythonized because it redefines; # SetBranchAddress in C++. As a consequence, TChain does not; # inherit TTree's pythonization for SetBranchAddress, which; # needs to be injected to TChain too. This is not the case for; # other classes like TNtuple, which will inherit all the; # pythonizations added here for TTree.; # SetBranchAddress",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py:177,Modifiability,inherit,inherit,177,"# Parameters:; # klass: class to be pythonized; # TChain needs to be explicitly pythonized because it redefines; # SetBranchAddress in C++. As a consequence, TChain does not; # inherit TTree's pythonization for SetBranchAddress, which; # needs to be injected to TChain too. This is not the case for; # other classes like TNtuple, which will inherit all the; # pythonizations added here for TTree.; # SetBranchAddress",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py:341,Modifiability,inherit,inherit,341,"# Parameters:; # klass: class to be pythonized; # TChain needs to be explicitly pythonized because it redefines; # SetBranchAddress in C++. As a consequence, TChain does not; # inherit TTree's pythonization for SetBranchAddress, which; # needs to be injected to TChain too. This is not the case for; # other classes like TNtuple, which will inherit all the; # pythonizations added here for TTree.; # SetBranchAddress",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py:250,Security,inject,injected,250,"# Parameters:; # klass: class to be pythonized; # TChain needs to be explicitly pythonized because it redefines; # SetBranchAddress in C++. As a consequence, TChain does not; # inherit TTree's pythonization for SetBranchAddress, which; # needs to be injected to TChain too. This is not the case for; # other classes like TNtuple, which will inherit all the; # pythonizations added here for TTree.; # SetBranchAddress",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py:284,Integrability,inject,injection,284,"'''; Decorator that allows to pythonize C++ classes. To pythonize means to add; some extra behaviour to a C++ class that is used from Python via PyROOT,; so that such a class can be used in an easier / more ""pythonic"" way.; When a pythonization is registered with this decorator, the injection of; the new behaviour in the C++ class is done immediately, if the class has; already been used from the application, or lazily, i.e. only when the class; is first accessed from the application. Args:; class_name (string/iterable[string]): specifies either a single string or; multiple strings, where each string can be either (i) the name of a; C++ class to be pythonized, or (ii) a prefix to match all classes; whose name starts with that prefix.; ns (string): namespace of the classes to be pythonized. Default is the; global namespace (`::`).; is_prefix (boolean): if True, `class_name` contains one or multiple; prefixes, each prefix potentially matching multiple classes.; Default is False.; These are examples of prefixes and namespace and what they match:; - class_name="""", ns=""::"" : all classes in the global namespace.; - class_name=""C"", ns=""::"" : all classes in the global namespace; whose name starts with ""C""; - class_name="""", ns=""NS1::NS2"" : all classes in namespace ""NS1::NS2""; - class_name=""C"", ns=""NS1::NS2"" : all classes in namespace; ""NS1::NS2"" whose name starts with ""C"". Returns:; function: function that receives the user-defined function and; decorates it.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py:284,Security,inject,injection,284,"'''; Decorator that allows to pythonize C++ classes. To pythonize means to add; some extra behaviour to a C++ class that is used from Python via PyROOT,; so that such a class can be used in an easier / more ""pythonic"" way.; When a pythonization is registered with this decorator, the injection of; the new behaviour in the C++ class is done immediately, if the class has; already been used from the application, or lazily, i.e. only when the class; is first accessed from the application. Args:; class_name (string/iterable[string]): specifies either a single string or; multiple strings, where each string can be either (i) the name of a; C++ class to be pythonized, or (ii) a prefix to match all classes; whose name starts with that prefix.; ns (string): namespace of the classes to be pythonized. Default is the; global namespace (`::`).; is_prefix (boolean): if True, `class_name` contains one or multiple; prefixes, each prefix potentially matching multiple classes.; Default is False.; These are examples of prefixes and namespace and what they match:; - class_name="""", ns=""::"" : all classes in the global namespace.; - class_name=""C"", ns=""::"" : all classes in the global namespace; whose name starts with ""C""; - class_name="""", ns=""NS1::NS2"" : all classes in namespace ""NS1::NS2""; - class_name=""C"", ns=""NS1::NS2"" : all classes in namespace; ""NS1::NS2"" whose name starts with ""C"". Returns:; function: function that receives the user-defined function and; decorates it.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py:458,Security,access,accessed,458,"'''; Decorator that allows to pythonize C++ classes. To pythonize means to add; some extra behaviour to a C++ class that is used from Python via PyROOT,; so that such a class can be used in an easier / more ""pythonic"" way.; When a pythonization is registered with this decorator, the injection of; the new behaviour in the C++ class is done immediately, if the class has; already been used from the application, or lazily, i.e. only when the class; is first accessed from the application. Args:; class_name (string/iterable[string]): specifies either a single string or; multiple strings, where each string can be either (i) the name of a; C++ class to be pythonized, or (ii) a prefix to match all classes; whose name starts with that prefix.; ns (string): namespace of the classes to be pythonized. Default is the; global namespace (`::`).; is_prefix (boolean): if True, `class_name` contains one or multiple; prefixes, each prefix potentially matching multiple classes.; Default is False.; These are examples of prefixes and namespace and what they match:; - class_name="""", ns=""::"" : all classes in the global namespace.; - class_name=""C"", ns=""::"" : all classes in the global namespace; whose name starts with ""C""; - class_name="""", ns=""NS1::NS2"" : all classes in namespace ""NS1::NS2""; - class_name=""C"", ns=""NS1::NS2"" : all classes in namespace; ""NS1::NS2"" whose name starts with ""C"". Returns:; function: function that receives the user-defined function and; decorates it.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py:99,Integrability,wrap,wrapper,99,"'''; The real decorator. Accepts a user-provided function and decorates it.; An inner function - a wrapper of the user function - is registered in; cppyy as a pythonizor. Args:; user_pythonizor (function): user-provided function to be decorated.; It implements some pythonization. It can accept two parameters:; the class to be pythonized, i.e. the Python proxy of the class; in which new behaviour can be injected, and optionally the name; of that class (can be used e.g. to do some more complex; filtering). Returns:; function: the user function, after being registered as a; pythonizor.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py:406,Integrability,inject,injected,406,"'''; The real decorator. Accepts a user-provided function and decorates it.; An inner function - a wrapper of the user function - is registered in; cppyy as a pythonizor. Args:; user_pythonizor (function): user-provided function to be decorated.; It implements some pythonization. It can accept two parameters:; the class to be pythonized, i.e. the Python proxy of the class; in which new behaviour can be injected, and optionally the name; of that class (can be used e.g. to do some more complex; filtering). Returns:; function: the user function, after being registered as a; pythonizor.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py:406,Security,inject,injected,406,"'''; The real decorator. Accepts a user-provided function and decorates it.; An inner function - a wrapper of the user function - is registered in; cppyy as a pythonizor. Args:; user_pythonizor (function): user-provided function to be decorated.; It implements some pythonization. It can accept two parameters:; the class to be pythonized, i.e. the Python proxy of the class; in which new behaviour can be injected, and optionally the name; of that class (can be used e.g. to do some more complex; filtering). Returns:; function: the user function, after being registered as a; pythonizor.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py:16,Availability,error,error,16,"# Propagate the error so that the class lookup that triggered this; # pythonization fails too and the application stops",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py:107,Performance,cache,cached,107,"# If this is a template, pythonize the instances. Note that in; # older cppyy, template instantiations are cached by; # fully-qualified name directly in the namespace, so they are; # covered by the code branch above.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py:28,Availability,redundant,redundant,28,"# Make sure we don't do any redundant pythonization, e.g. if we; # use a version of cppyy that caches both in the namespace and; # in the _instantiations attribute.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py:95,Performance,cache,caches,95,"# Make sure we don't do any redundant pythonization, e.g. if we; # use a version of cppyy that caches both in the namespace and; # in the _instantiations attribute.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py:28,Safety,redund,redundant,28,"# Make sure we don't do any redundant pythonization, e.g. if we; # use a version of cppyy that caches both in the namespace and; # in the _instantiations attribute.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py:87,Security,access,accessed,87,"'''; Finds and returns the proxy object of the `ns` namespace, if it has already; been accessed. Args:; ns (string): a namespace. Returns:; namespace proxy object, if the namespace has already been accessed,; otherwise None.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py:198,Security,access,accessed,198,"'''; Finds and returns the proxy object of the `ns` namespace, if it has already; been accessed. Args:; ns (string): a namespace. Returns:; namespace proxy object, if the namespace has already been accessed,; otherwise None.; '''",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py:59,Integrability,inject,injection,59,'''; Registers the ROOT pythonizations with cppyy for lazy injection.; ''',MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py:59,Security,inject,injection,59,'''; Registers the ROOT pythonizations with cppyy for lazy injection.; ''',MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsdata.py:30,Energy Efficiency,reduce,reduce,30,"# Redefinition of `RooAbsData.reduce` for keyword arguments.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsdata.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsdata.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreal.py:63,Availability,alive,alive,63,"# We do the conversion to RooArgSet now, such that we can keep alive; # the normalization set by setting it as an attribute of this; # RooAbsReal.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreal.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreal.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreallvalue.py:37,Modifiability,variab,variable,37,"# Add a Python reference to the plot variable to the RooPlot because; # the plot variable needs to survive at least as long as the plot.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreallvalue.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreallvalue.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreallvalue.py:81,Modifiability,variab,variable,81,"# Add a Python reference to the plot variable to the RooPlot because; # the plot variable needs to survive at least as long as the plot.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreallvalue.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreallvalue.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooargset.py:13,Usability,simpl,simple,13,"# Note: This simple Pythonization caused me days of headache.; # Initially, I was also checking of `len(kwargs) == 0`, but it just; # didn't work. Eventually, I understood that when cppy attempts; # implicit conversion, a magic `__cppyy_no_implicit=True` keyword; # argument is added, hence the `len(kwargs) == 0` check breaks the; # implicit conversion!",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooargset.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooargset.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodatahist.py:91,Modifiability,variab,variable,91,"# Returns a list with a Bool for each dimension of the histogram that; # flags whether the variable in this dimension is a RooAbsCategory.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodatahist.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodatahist.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodatahist.py:25,Availability,error,errors,25,"# Returns the low weight errors as numpy arrays.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodatahist.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodatahist.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodatahist.py:26,Availability,error,errors,26,"# Returns the high weight errors as numpy arrays.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodatahist.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodatahist.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodatahist.py:34,Availability,error,errors,34,"# Returns the low and high weight errors as numpy arrays.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodatahist.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodatahist.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodatahist.py:67,Energy Efficiency,adapt,adapt,67,"# name for internal binning that is created for the RooDataHist to adapt",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodatahist.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodatahist.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodatahist.py:67,Modifiability,adapt,adapt,67,"# name for internal binning that is created for the RooDataHist to adapt",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodatahist.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodatahist.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodatahist.py:82,Integrability,interface,interface,82,"# some reverse-computation that can't be avoided with the current C++ RooDataHist interface",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodatahist.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodatahist.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodatahist.py:41,Safety,avoid,avoided,41,"# some reverse-computation that can't be avoided with the current C++ RooDataHist interface",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodatahist.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodatahist.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py:177,Modifiability,variab,variables,177,"""""""Create a RooDataSet from a dictionary of numpy arrays.; Args:; data (dict): Dictionary with strings as keys and numpy arrays as; values, to be imported into the RooDataSet.; variables (RooArgSet, or list/tuple of RooAbsArgs):; Specification of the variables in the RooDataSet, will be; forwarded to the RooDataSet constructor. Both real values and; categories are supported.; name (str): Name of the RooDataSet, `None` is equivalent to an; empty string.; title (str): Title of the RooDataSet, `None` is equivalent to an; empty string.; weight_name (str): Key of the array in `data` that will be used for; the dataset weights. Returns:; RooDataSet; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py:251,Modifiability,variab,variables,251,"""""""Create a RooDataSet from a dictionary of numpy arrays.; Args:; data (dict): Dictionary with strings as keys and numpy arrays as; values, to be imported into the RooDataSet.; variables (RooArgSet, or list/tuple of RooAbsArgs):; Specification of the variables in the RooDataSet, will be; forwarded to the RooDataSet constructor. Both real values and; categories are supported.; name (str): Name of the RooDataSet, `None` is equivalent to an; empty string.; title (str): Title of the RooDataSet, `None` is equivalent to an; empty string.; weight_name (str): Key of the array in `data` that will be used for; the dataset weights. Returns:; RooDataSet; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py:30,Integrability,message,message,30,"""""""Log a string to the RooFit message log for the WARNING level on; the DataHandling topic.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py:38,Testability,log,log,38,"""""""Log a string to the RooFit message log for the WARNING level on; the DataHandling topic.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py:8,Availability,mask,mask,8,"# Get a mask that filters out all entries that are outside the variable definition range",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py:63,Modifiability,variab,variable,63,"# Get a mask that filters out all entries that are outside the variable definition range",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py:51,Availability,mask,mask,51,"# If all entries are in the range, we don't need a mask",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py:341,Modifiability,variab,variable,341,"""""""Export a RooDataSet to a dictionary of numpy arrays. Args:; copy (bool): If False, the data will not be copied. Use with; caution, as the numpy arrays and the RooAbsData now; own the same memory. If the dataset uses a; RooTreeDataStore, there will always be a copy and the; copy argument is ignored. Returns:; dict: A dictionary with the variable or weight names as keys and; the numpy arrays as values.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py:108,Modifiability,variab,variables,108,"""""""Create a RooDataSet from a pandas DataFrame.; Args:; df (pandas.DataFrame): Pandas DataFrame to import.; variables (RooArgSet, or list/tuple of RooAbsArgs):; Specification of the variables in the RooDataSet, will be; forwarded to the RooDataSet constructor. Both real values and; categories are supported.; name (str): Name of the RooDataSet, `None` is equivalent to an; empty string.; title (str): Title of the RooDataSet, `None` is equivalent to an; empty string.; weight_name (str): Key of the array in `data` that will be used for; the dataset weights. Returns:; RooDataSet; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py:182,Modifiability,variab,variables,182,"""""""Create a RooDataSet from a pandas DataFrame.; Args:; df (pandas.DataFrame): Pandas DataFrame to import.; variables (RooArgSet, or list/tuple of RooAbsArgs):; Specification of the variables in the RooDataSet, will be; forwarded to the RooDataSet constructor. Both real values and; categories are supported.; name (str): Name of the RooDataSet, `None` is equivalent to an; empty string.; title (str): Title of the RooDataSet, `None` is equivalent to an; empty string.; weight_name (str): Key of the array in `data` that will be used for; the dataset weights. Returns:; RooDataSet; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py:238,Modifiability,variab,variable,238,"""""""Export a RooDataSet to a pandas DataFrame. Args:. Note:; Pandas copies the data from the numpy arrays when creating a; DataFrame. That's why we can disable copying in the to_numpy call. Returns:; pandas.DataFrame: A dataframe with the variable or weight names as; column names and the a row for each variable or; weight in the dataset.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py:303,Modifiability,variab,variable,303,"""""""Export a RooDataSet to a pandas DataFrame. Args:. Note:; Pandas copies the data from the numpy arrays when creating a; DataFrame. That's why we can disable copying in the to_numpy call. Returns:; pandas.DataFrame: A dataframe with the variable or weight names as; column names and the a row for each variable or; weight in the dataset.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooglobalfunc.py:68,Integrability,wrap,wrapping,68,"""""""; Wrap an arbitrary function defined in Python or C++. If you're wrapping a Python function, it must take numpy arrays of type; float64 as input and output types. Parameters:; - name (str): Name of the function.; - func (callable): Function that defines the function.; - variables (list): List of variables to be used in the function. Returns:; - RooAbsReal wrapping the given function; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooglobalfunc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooglobalfunc.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooglobalfunc.py:361,Integrability,wrap,wrapping,361,"""""""; Wrap an arbitrary function defined in Python or C++. If you're wrapping a Python function, it must take numpy arrays of type; float64 as input and output types. Parameters:; - name (str): Name of the function.; - func (callable): Function that defines the function.; - variables (list): List of variables to be used in the function. Returns:; - RooAbsReal wrapping the given function; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooglobalfunc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooglobalfunc.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooglobalfunc.py:274,Modifiability,variab,variables,274,"""""""; Wrap an arbitrary function defined in Python or C++. If you're wrapping a Python function, it must take numpy arrays of type; float64 as input and output types. Parameters:; - name (str): Name of the function.; - func (callable): Function that defines the function.; - variables (list): List of variables to be used in the function. Returns:; - RooAbsReal wrapping the given function; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooglobalfunc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooglobalfunc.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooglobalfunc.py:300,Modifiability,variab,variables,300,"""""""; Wrap an arbitrary function defined in Python or C++. If you're wrapping a Python function, it must take numpy arrays of type; float64 as input and output types. Parameters:; - name (str): Name of the function.; - func (callable): Function that defines the function.; - variables (list): List of variables to be used in the function. Returns:; - RooAbsReal wrapping the given function; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooglobalfunc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooglobalfunc.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooworkspace.py:12,Security,access,accessing,12,"# To enable accessing objects in the RooWorkspace with dictionary-like syntax.; # The key is passed to the general `RooWorkspace::obj()` function.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooworkspace.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooworkspace.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooworkspace.py:14,Modifiability,variab,variables,14,"# Initializes variables",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooworkspace.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooworkspace.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooworkspace.py:23,Availability,error,error,23,"# Else raises a Syntax error",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooworkspace.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooworkspace.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooworkspace.py:391,Availability,error,error,391,"# Many people pythonized the RooWorkspace themselves, by adding a new; # attribute `_import` that calls getattr(self, ""import"") under the; # hood. However, `_import` is now the reference to the original cppyy; # overload, and resetting it with a wrapper around `import` would cause; # infinite recursions! We prevent resetting any import-related function; # here, which results in a clearer error to the user than an infinite; # call stack involving the internal pythonization code.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooworkspace.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooworkspace.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooworkspace.py:246,Integrability,wrap,wrapper,246,"# Many people pythonized the RooWorkspace themselves, by adding a new; # attribute `_import` that calls getattr(self, ""import"") under the; # hood. However, `_import` is now the reference to the original cppyy; # overload, and resetting it with a wrapper around `import` would cause; # infinite recursions! We prevent resetting any import-related function; # here, which results in a clearer error to the user than an infinite; # call stack involving the internal pythonization code.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooworkspace.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooworkspace.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooworkspace.py:383,Usability,clear,clearer,383,"# Many people pythonized the RooWorkspace themselves, by adding a new; # attribute `_import` that calls getattr(self, ""import"") under the; # hood. However, `_import` is now the reference to the original cppyy; # overload, and resetting it with a wrapper around `import` would cause; # infinite recursions! We prevent resetting any import-related function; # here, which results in a clearer error to the user than an infinite; # call stack involving the internal pythonization code.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooworkspace.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooworkspace.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/__init__.py:37,Security,access,access,37,"# create a dictionary for convenient access to python classes",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:238,Performance,load,loaded,238,"""""""; Generate a template for the RBatchGenerator based on the given; RDataFrame and columns. Args:; file_name (str): name of the root file.; tree_name (str): name of the tree in the root file.; columns (list[str]): Columns that should be loaded.; Defaults to loading all columns; in the given RDataFrame; max_vec_sizes (list[int]): The length of each vector based column. Returns:; template (str): Template for the RBatchGenerator; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:259,Performance,load,loading,259,"""""""; Generate a template for the RBatchGenerator based on the given; RDataFrame and columns. Args:; file_name (str): name of the root file.; tree_name (str): name of the tree in the root file.; columns (list[str]): Columns that should be loaded.; Defaults to loading all columns; in the given RDataFrame; max_vec_sizes (list[int]): The length of each vector based column. Returns:; template (str): Template for the RBatchGenerator; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:232,Performance,load,loaded,232,"""""""Wrapper around the Cpp RBatchGenerator. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk; size results in better randomization, but higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply during loading. If not given, no filters; are applied.; max_vec_sizes (dict[std, int], optional):; Size of each column that consists of vectors.; Required when using vector based columns.; vec_padding (int):; Value to pad vectors with if the vector is smaller; than the given max vector length. Defaults is 0; target (str, optional): Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given.; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be between 0 and 1. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used.; shuffle (bool):; Batches consist of random events and are shuffled every epoch.; Defaults to True.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:486,Performance,load,loading,486,"""""""Wrapper around the Cpp RBatchGenerator. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk; size results in better randomization, but higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply during loading. If not given, no filters; are applied.; max_vec_sizes (dict[std, int], optional):; Size of each column that consists of vectors.; Required when using vector based columns.; vec_padding (int):; Value to pad vectors with if the vector is smaller; than the given max vector length. Defaults is 0; target (str, optional): Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given.; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be between 0 and 1. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used.; shuffle (bool):; Batches consist of random events and are shuffled every epoch.; Defaults to True.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1146,Performance,load,loaded,1146,"""""""Wrapper around the Cpp RBatchGenerator. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk; size results in better randomization, but higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply during loading. If not given, no filters; are applied.; max_vec_sizes (dict[std, int], optional):; Size of each column that consists of vectors.; Required when using vector based columns.; vec_padding (int):; Value to pad vectors with if the vector is smaller; than the given max vector length. Defaults is 0; target (str, optional): Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given.; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be between 0 and 1. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used.; shuffle (bool):; Batches consist of random events and are shuffled every epoch.; Defaults to True.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1017,Security,validat,validation,1017,"""""""Wrapper around the Cpp RBatchGenerator. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk; size results in better randomization, but higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply during loading. If not given, no filters; are applied.; max_vec_sizes (dict[std, int], optional):; Size of each column that consists of vectors.; Required when using vector based columns.; vec_padding (int):; Value to pad vectors with if the vector is smaller; than the given max vector length. Defaults is 0; target (str, optional): Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given.; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be between 0 and 1. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used.; shuffle (bool):; Batches consist of random events and are shuffled every epoch.; Defaults to True.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:82,Safety,safe,safety,82,"# The RBatchGenerator will create a separate C++ thread for I/O.; # Enable thread safety in ROOT from here, to make sure there is no; # interference between the main Python thread (which might call into; # cling via cppyy) and the I/O thread.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:22,Availability,avail,available,22,"# Return a batch when available",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:45,Performance,load,loading,45,"# Context that activates and deactivates the loading thread of the Cpp class; # This ensures that the thread will always be deleted properly",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:13,Performance,load,loading,13,"""""""Start the loading of training batches""""""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:12,Performance,load,loading,12,"""""""Stop the loading of batches""""""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:13,Performance,load,loading,13,"""""""Start the loading of batches and Yield the results. Yields:; Union[np.NDArray, torch.Tensor]: A batch of data; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:34,Security,validat,validation,34,"""""""; A generator that returns the validation batches of the given base; generator. NOTE: The ValidationRBatchGenerator only returns batches; if the training has been run. Args:; base_generator (BaseGenerator):; The base connection to the Cpp code; conversion_function (Callable[RTensor, np.NDArray|torch.Tensor]):; Function that converts a given RTensor into a python batch; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:20,Security,validat,validation,20,"""""""Loop through the validation batches. Yields:; Union[np.NDArray, torch.Tensor]: A batch of data; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:364,Performance,load,loaded,364,"""""""; Return two batch generators based on the given ROOT file and tree.; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1140,Performance,load,loaded,1140,"""""""; Return two batch generators based on the given ROOT file and tree.; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1387,Performance,load,load,1387,"""""""; Return two batch generators based on the given ROOT file and tree.; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1422,Performance,load,load,1422,"""""""; Return two batch generators based on the given ROOT file and tree.; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1481,Performance,load,loaded,1481,"""""""; Return two batch generators based on the given ROOT file and tree.; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:155,Security,validat,validation,155,"""""""; Return two batch generators based on the given ROOT file and tree.; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1011,Security,validat,validation,1011,"""""""; Return two batch generators based on the given ROOT file and tree.; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1427,Security,validat,validation,1427,"""""""; Return two batch generators based on the given ROOT file and tree.; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1457,Security,validat,validation,1457,"""""""; Return two batch generators based on the given ROOT file and tree.; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1530,Security,validat,validation,1530,"""""""; Return two batch generators based on the given ROOT file and tree.; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:366,Performance,load,loaded,366,"""""""; Return two Tensorflow Datasets based on the given ROOT file and tree; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1142,Performance,load,loaded,1142,"""""""; Return two Tensorflow Datasets based on the given ROOT file and tree; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1389,Performance,load,load,1389,"""""""; Return two Tensorflow Datasets based on the given ROOT file and tree; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1424,Performance,load,load,1424,"""""""; Return two Tensorflow Datasets based on the given ROOT file and tree; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1483,Performance,load,loaded,1483,"""""""; Return two Tensorflow Datasets based on the given ROOT file and tree; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:157,Security,validat,validation,157,"""""""; Return two Tensorflow Datasets based on the given ROOT file and tree; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1013,Security,validat,validation,1013,"""""""; Return two Tensorflow Datasets based on the given ROOT file and tree; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1429,Security,validat,validation,1429,"""""""; Return two Tensorflow Datasets based on the given ROOT file and tree; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1459,Security,validat,validation,1459,"""""""; Return two Tensorflow Datasets based on the given ROOT file and tree; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1532,Security,validat,validation,1532,"""""""; Return two Tensorflow Datasets based on the given ROOT file and tree; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:7,Security,access,access,7,"# Give access to the columns function of the training set",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:7,Security,access,access,7,"# Give access to the columns function of the validation set",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:45,Security,validat,validation,45,"# Give access to the columns function of the validation set",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:366,Performance,load,loaded,366,"""""""; Return two Tensorflow Datasets based on the given ROOT file and tree; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1142,Performance,load,loaded,1142,"""""""; Return two Tensorflow Datasets based on the given ROOT file and tree; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1389,Performance,load,load,1389,"""""""; Return two Tensorflow Datasets based on the given ROOT file and tree; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1424,Performance,load,load,1424,"""""""; Return two Tensorflow Datasets based on the given ROOT file and tree; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1483,Performance,load,loaded,1483,"""""""; Return two Tensorflow Datasets based on the given ROOT file and tree; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:157,Security,validat,validation,157,"""""""; Return two Tensorflow Datasets based on the given ROOT file and tree; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1013,Security,validat,validation,1013,"""""""; Return two Tensorflow Datasets based on the given ROOT file and tree; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1429,Security,validat,validation,1429,"""""""; Return two Tensorflow Datasets based on the given ROOT file and tree; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1459,Security,validat,validation,1459,"""""""; Return two Tensorflow Datasets based on the given ROOT file and tree; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1532,Security,validat,validation,1532,"""""""; Return two Tensorflow Datasets based on the given ROOT file and tree; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py:183,Deployability,update,update,183,"""""""; Get the activation function for the model. Parameters:; model: The graph_nets' component model to extract the activation function from.; The component model can be either of the update functions for; nodes, edges or globals. Returns:; The activation function enum value.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py:237,Deployability,update,update,237,"""""""; Create an MLP model and add it to the GNN Initializer. Parameters:; gin: The GNN Initializer to which the model will be added.; model: The model extracted from graph_nets's GNN component; function_target: Target for the function to update either of nodes, edges or globals; graph_type: The type of the graph, i.e. GNN or GraphIndependent. """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py:240,Deployability,update,update,240,"""""""; Create an Linear model and add it to the GNN Initializer. Parameters:; gin: The GNN Initializer to which the model will be added.; model: The model extracted from graph_nets's GNN component; function_target: Target for the function to update either of nodes, edges or globals; graph_type: The type of the graph, i.e. GNN or GraphIndependent. """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py:287,Deployability,update,update,287,"""""""; Add a LayerNormalization operator to the particular function target; in the Graph Initializer. Parameters:; gin: The GNN Initializer to which the LayerNorm operator will be added; module_layer: Extracted LayerNorm from graph_nets' model; function_target: Target for the function to update either of nodes, edges or globals. """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py:295,Deployability,update,update,295,"""""""; Add weights to respective function targets, either of nodes, edges or globals. Parameters:; gin: The GNN Initializer to which the weights will be added; weights: Weight information, containing the names, shapes and values of initialized tensors; function_target: Target for the function to update either of nodes, edges or globals. """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py:139,Energy Efficiency,reduce,reducer,139,"""""""; Add aggregate function to the Graph Initializer. Parameters:; gin: The GNN Initializer to which the Aggregate function will be added; reducer: Specifies the means of aggregate, i.e. sum or mean of supplied values; relation: Specifies the relation of aggregate, i.e. Node-Edge, Global-Edge or Global-Node. """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py:9,Deployability,update,update,9,"""""""; Add update function for respective function target, either of nodes, edges or globals; based on the supplied component_model. Parameters:; gin: The GNN Initializer to which the update function will be added; component_model: The update function to add, either of MLP or Sequential; graph_type: The type of the graph, i.e. GNN or GraphIndependent; function_target: Target for the function to update either of nodes, edges or globals. """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py:182,Deployability,update,update,182,"""""""; Add update function for respective function target, either of nodes, edges or globals; based on the supplied component_model. Parameters:; gin: The GNN Initializer to which the update function will be added; component_model: The update function to add, either of MLP or Sequential; graph_type: The type of the graph, i.e. GNN or GraphIndependent; function_target: Target for the function to update either of nodes, edges or globals. """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py:234,Deployability,update,update,234,"""""""; Add update function for respective function target, either of nodes, edges or globals; based on the supplied component_model. Parameters:; gin: The GNN Initializer to which the update function will be added; component_model: The update function to add, either of MLP or Sequential; graph_type: The type of the graph, i.e. GNN or GraphIndependent; function_target: Target for the function to update either of nodes, edges or globals. """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py:396,Deployability,update,update,396,"""""""; Add update function for respective function target, either of nodes, edges or globals; based on the supplied component_model. Parameters:; gin: The GNN Initializer to which the update function will be added; component_model: The update function to add, either of MLP or Sequential; graph_type: The type of the graph, i.e. GNN or GraphIndependent; function_target: Target for the function to update either of nodes, edges or globals. """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py:227,Deployability,update,update,227,"""""""; Wrapper class for graph_nets' GNN model;s parsing and inference generation. graph_nets' GNN model comprises of three components, the nodes, edges and globals.; The entire model and its inference is based on the respective update functions,; and aggregate function with other components.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py:18,Deployability,update,update,18,"# adding the node update function",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py:18,Deployability,update,update,18,"# adding the edge update function",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py:20,Deployability,update,update,20,"# adding the global update function",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py:18,Deployability,update,update,18,"# adding the node update function; # when an update is present in graph_nets, the update function has the _model attribute; # otherwise it is just a simple function defining output = input.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py:45,Deployability,update,update,45,"# adding the node update function; # when an update is present in graph_nets, the update function has the _model attribute; # otherwise it is just a simple function defining output = input.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py:82,Deployability,update,update,82,"# adding the node update function; # when an update is present in graph_nets, the update function has the _model attribute; # otherwise it is just a simple function defining output = input.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py:149,Usability,simpl,simple,149,"# adding the node update function; # when an update is present in graph_nets, the update function has the _model attribute; # otherwise it is just a simple function defining output = input.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py:18,Deployability,update,update,18,"# adding the edge update function",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py:20,Deployability,update,update,20,"# adding the global update function",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_gnn.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rbdt.py:69,Availability,error,error-handling,69,"# As fall-through we go to the original compute function and use the error-handling from cppyy",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rbdt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rbdt.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py:12,Integrability,interface,interface,12,"# Get array interface of object",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py:22,Integrability,interface,interface,22,"""""""; Return the array interface dictionary. Parameters:; self: RTensor object; Returns:; Dictionary following the Numpy array interface specifications; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py:126,Integrability,interface,interface,126,"""""""; Return the array interface dictionary. Parameters:; self: RTensor object; Returns:; Dictionary following the Numpy array interface specifications; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py:140,Security,access,accessed,140,"# Numpy breaks for data pointer of 0 even though the array is empty.; # We set the pointer to 1 but the value itself is arbitrary and never accessed.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py:22,Integrability,interface,interface,22,"""""""; Attach the array interface as property if the data-type of the RTensor; elements is one of the supported basic types. Parameters:; klass: class to be pythonized; name: string containing the name of the class; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py:13,Security,access,access,13,"# Otherwise, access element by array of indices",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py:115,Integrability,interface,interface,115,"# Parameters:; # klass: class to be pythonized; # name: string containing the name of the class; # Add numpy array interface",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_tree_inference.py:216,Deployability,update,updater,216,"""""""Get base score from an XGBoost sklearn estimator. Copy-pasted from XGBoost unit test code. See also:; * https://github.com/dmlc/xgboost/blob/a99bb38bd2762e35e6a1673a0c11e09eddd8e723/python-package/xgboost/testing/updater.py#L13; * https://github.com/dmlc/xgboost/issues/9347; * https://discuss.xgboost.ai/t/how-to-get-base-score-from-trained-booster/3192; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_tree_inference.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_tree_inference.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_tree_inference.py:83,Testability,test,test,83,"""""""Get base score from an XGBoost sklearn estimator. Copy-pasted from XGBoost unit test code. See also:; * https://github.com/dmlc/xgboost/blob/a99bb38bd2762e35e6a1673a0c11e09eddd8e723/python-package/xgboost/testing/updater.py#L13; * https://github.com/dmlc/xgboost/issues/9347; * https://discuss.xgboost.ai/t/how-to-get-base-score-from-trained-booster/3192; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_tree_inference.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_tree_inference.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_tree_inference.py:208,Testability,test,testing,208,"""""""Get base score from an XGBoost sklearn estimator. Copy-pasted from XGBoost unit test code. See also:; * https://github.com/dmlc/xgboost/blob/a99bb38bd2762e35e6a1673a0c11e09eddd8e723/python-package/xgboost/testing/updater.py#L13; * https://github.com/dmlc/xgboost/issues/9347; * https://discuss.xgboost.ai/t/how-to-get-base-score-from-trained-booster/3192; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_tree_inference.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_tree_inference.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/__init__.py:16,Availability,avail,available,16,"#this should be available only when xgboost is there ?; # We probably don't need a protection here since the code is run only when there is xgboost",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/__init__.py:37,Security,access,access,37,"# create a dictionary for convenient access to python classes",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/__init__.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/array_interface.py:78,Integrability,interface,interface,78,"""""""; Test memory adoption of std::vector and ROOT::RVec with the numpy; array interface.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/array_interface.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/array_interface.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py:30,Performance,load,loaded,30,"""""""; Test which libraries are loaded during importing ROOT; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/import_load_libs.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py:14,Integrability,depend,dependencies,14,"# libCore and dependencies",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/import_load_libs.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py:15,Integrability,depend,dependencies,15,"# libCling and dependencies",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/import_load_libs.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py:57,Integrability,depend,dependencies,57,"# by libncurses (on some older platforms); # libTree and dependencies",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/import_load_libs.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py:98,Integrability,depend,dependencies,98,"# by libRIO if uring option is enabled; # On centos7 libssl links against kerberos pulling in all dependencies below, removed with libssl1.1.0",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/import_load_libs.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py:36,Deployability,configurat,configuration,36,"# AddressSanitizer runtime and ROOT configuration",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/import_load_libs.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py:36,Modifiability,config,configuration,36,"# AddressSanitizer runtime and ROOT configuration",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/import_load_libs.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py:22,Testability,test,test,22,"# Verbose mode of the test",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/import_load_libs.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py:20,Performance,load,loaded,20,"""""""; Test libraries loaded after importing ROOT; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/import_load_libs.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py:17,Performance,load,loaded,17,"# Check that the loaded libraries are white listed",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/import_load_libs.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/memory.py:14,Testability,test,test,14,"""""""Regression test for https://github.com/root-project/root/issues/15703""""""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/memory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/memory.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:22,Testability,test,tests,22,"# Check whether these tests should be skipped",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:34,Integrability,wrap,wrapper,34,"""""""; Test decorator to create C++ wrapper for Python callables using numba with fundamental types; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:27,Integrability,wrap,wrapper,27,"""""""; Test optional name of wrapper function; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:13,Deployability,integrat,integration,13,"# Test cling integration",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:13,Integrability,integrat,integration,13,"# Test cling integration",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:18,Deployability,integrat,integration,18,"# Test RDataFrame integration",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:18,Integrability,integrat,integration,18,"# Test RDataFrame integration",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:7,Integrability,wrap,wrappings,7,"# Test wrappings",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:34,Integrability,wrap,wrapper,34,"""""""; Test decorator to create C++ wrapper for Python callables using numba with RVecs; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:110,Performance,load,load,110,"# The global module index does not have RVec entities preloaded and; # gInterpreter.Declare is not allowed to load libROOTVecOps for RVec.; # Preload the library now.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Deployability,configurat,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:10,Integrability,wrap,wrapper,10,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:46,Modifiability,config,configurations,46,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/numbadeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pretty_printing.py:113,Safety,avoid,avoid,113,"# https://github.com/root-project/root/issues/12817; # The threshold for the memory used is generously chosen to avoid tests; # spuriously failing b/c of fluctuations and is also well below the; # memory needed before the fix to the issue mentioned above, i.e. about; # 4 GB and several minutes to complete (!)",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pretty_printing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pretty_printing.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pretty_printing.py:119,Testability,test,tests,119,"# https://github.com/root-project/root/issues/12817; # The threshold for the memory used is generously chosen to avoid tests; # spuriously failing b/c of fluctuations and is also well below the; # memory needed before the fix to the issue mentioned above, i.e. about; # 4 GB and several minutes to complete (!)",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pretty_printing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pretty_printing.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pretty_printing.py:13,Testability,test,test,13,"# ROOT-9935: test null proxied cpp object",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pretty_printing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pretty_printing.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pretty_printing.py:7,Modifiability,inherit,inherited,7,"# Test inherited class",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pretty_printing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pretty_printing.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pretty_printing.py:84,Testability,assert,assertEqual,84,"""""""; def test_TNamed(self):; x = ROOT.TNamed(""name"", ""title""); self._print(x); self.assertEqual(""Name: name Title: title"", x.__str__()). def test_TObject(self):; x = ROOT.TObject(); self._print(x); self.assertEqual(""Name: TObject Title: Basic ROOT object"", x.__str__()); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pretty_printing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pretty_printing.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pretty_printing.py:203,Testability,assert,assertEqual,203,"""""""; def test_TNamed(self):; x = ROOT.TNamed(""name"", ""title""); self._print(x); self.assertEqual(""Name: name Title: title"", x.__str__()). def test_TObject(self):; x = ROOT.TObject(); self._print(x); self.assertEqual(""Name: TObject Title: Basic ROOT object"", x.__str__()); """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pretty_printing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pretty_printing.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:88,Testability,test,tests,88,"# Some already instantiated ROOT classes may match targets of @pythonization; # in some tests, and because of immediate pythonization they will be; # processed by the pythonizors. Just ignore them",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pythonization_decorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:9,Testability,test,test,9,"# Define test class",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pythonization_decorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:9,Testability,test,test,9,"# Define test class",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pythonization_decorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:9,Testability,test,test,9,"# Define test classes",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pythonization_decorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:9,Testability,test,test,9,"# Define test classes",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pythonization_decorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:9,Testability,test,test,9,"# Define test classes",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pythonization_decorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:9,Testability,test,test,9,"# Define test classes",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pythonization_decorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:9,Testability,test,test,9,"# Define test classes",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pythonization_decorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:9,Testability,test,test,9,"# Define test classes",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pythonization_decorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:9,Testability,test,test,9,"# Define test classes",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pythonization_decorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:9,Testability,test,test,9,"# Define test classes",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pythonization_decorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:9,Testability,test,test,9,"# Define test class",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pythonization_decorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:9,Testability,test,test,9,"# Define test classes",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pythonization_decorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:9,Testability,test,test,9,"# Define test class",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pythonization_decorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:9,Testability,test,test,9,"# Define test class",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pythonization_decorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:9,Testability,test,test,9,"# Define test class",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pythonization_decorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:9,Testability,test,test,9,"# Define test classes",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pythonization_decorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:9,Testability,test,test,9,"# Define test classes",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pythonization_decorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:65,Performance,cache,cached,65,"# Immediate pythonization should happen.; # Accesses classes are cached by cppyy using their class name as key in; # their namespace",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pythonization_decorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:100,Performance,cache,cached,100,"# Immediate pythonization should happen.; # Instantiated templates are also tested because they are cached by; # cppyy using their fully-qualified name as key in their namespace",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pythonization_decorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:76,Testability,test,tested,76,"# Immediate pythonization should happen.; # Instantiated templates are also tested because they are cached by; # cppyy using their fully-qualified name as key in their namespace",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/pythonization_decorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:40,Modifiability,variab,variable,40,"""""""; Testing reading a std::vector with variable size; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:99,Performance,load,load,99,"# The global module index does not have it preloaded and; # gInterpreter.Declare is not allowed to load libPhysics for; # TLorentzVector. Preload the library now.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:36,Integrability,inject,injected,36,"""""""; Testing reading a custom class injected in the interpreter; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:36,Security,inject,injected,36,"""""""; Testing reading a custom class injected in the interpreter; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:2,Testability,test,test,2,"# test values",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:2,Testability,test,test,2,"# test type",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py:25,Deployability,release,releases,25,"# Deleting the last node releases the RVecs and releases the reference; # to the numpy array",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py:48,Deployability,release,releases,48,"# Deleting the last node releases the RVecs and releases the reference; # to the numpy array",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_filter_pyz_helper.py:87,Testability,test,test,87,"""""""; This function generates the root files of various datatypes with random values to test them.; Datatypes could be generated are Strings, Char_t, UChar_t; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/rdf_filter_pyz_helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_filter_pyz_helper.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/root_module.py:27,Testability,test,tests,27,"# Helper functions for the tests",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/root_module.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/root_module.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py:2,Testability,test,test,2,"# test also direct conversion",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/rtensor.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py:43,Integrability,interface,interface,43,"""""""; Test memory adoption of RTensor array interface.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/rtensor.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py:59,Integrability,interface,interface,59,"""""""; Test compliance of the RTensor methods with the numpy interface; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/rtensor.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec.py:20,Performance,optimiz,optimization,20,"# Prevent potential optimization of the loop",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/rvec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec.py:23,Security,access,accessible,23,'''; Test that RVec is accessible from the ROOT and ROOT::VecOps namespace; ''',MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/rvec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec_asrvec.py:92,Integrability,interface,interface,92,"""""""; Tests for the AsRVec feature enabling to adopt memory of Python objects; with an array interface member using RVec as C++ container.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/rvec_asrvec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec_asrvec.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/stl_set.py:9,Modifiability,variab,variables,9,"# Create variables to store std::vector elements",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/stl_set.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/stl_set.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/stl_vector.py:9,Modifiability,variab,variables,9,"# Create variables to store std::vector elements",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/stl_vector.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/stl_vector.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/string_view.py:14,Availability,avail,availability,14,"""""""; Test the availability of std::string_view; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/string_view.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/string_view.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/string_view.py:28,Availability,error,errors,28,"# Create file.root to avoid errors in the RDF constructor",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/string_view.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/string_view.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/string_view.py:22,Safety,avoid,avoid,22,"# Create file.root to avoid errors in the RDF constructor",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/string_view.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/string_view.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tarray_len.py:47,Security,access,access,47,"""""""; Test for the pythonization that allows to access the number of elements of a; TArray (or subclass) by calling `len` on it.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/tarray_len.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tarray_len.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcollection_len.py:47,Security,access,access,47,"""""""; Test for the pythonization that allows to access the number of elements of a; TCollection (or subclass) by calling `len` on it.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/tcollection_len.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcollection_len.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcollection_listmethods.py:99,Modifiability,extend,extend,99,"""""""; Test for the Python-list-like methods added to TCollection (and subclasses):; append, remove, extend, count; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/tcollection_listmethods.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcollection_listmethods.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcontext_contextmanager.py:155,Performance,concurren,concurrently,155,"""""""; Run all tests of this class sequentially.; The tests of this class rely on the current directory, which can be changed; unpredictably if they are run concurrently.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/tcontext_contextmanager.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcontext_contextmanager.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcontext_contextmanager.py:13,Testability,test,tests,13,"""""""; Run all tests of this class sequentially.; The tests of this class rely on the current directory, which can be changed; unpredictably if they are run concurrently.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/tcontext_contextmanager.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcontext_contextmanager.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcontext_contextmanager.py:52,Testability,test,tests,52,"""""""; Run all tests of this class sequentially.; The tests of this class rely on the current directory, which can be changed; unpredictably if they are run concurrently.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/tcontext_contextmanager.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcontext_contextmanager.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tdirectoryfile_attrsyntax_get.py:27,Performance,cache,cached,27,"# check that object is not cached initially",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/tdirectoryfile_attrsyntax_get.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tdirectoryfile_attrsyntax_get.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tdirectory_attrsyntax.py:27,Performance,cache,cached,27,"# check that object is not cached initially",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/tdirectory_attrsyntax.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tdirectory_attrsyntax.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tdirectory_attrsyntax.py:17,Performance,cache,cached,17,"# check that the cached value in is actually the object; # inside the directory",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/tdirectory_attrsyntax.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tdirectory_attrsyntax.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tfile_attrsyntax_get_writeobject_open.py:27,Performance,cache,cached,27,"# check that object is not cached initially",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/tfile_attrsyntax_get_writeobject_open.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tfile_attrsyntax_get_writeobject_open.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tfile_context_manager.py:36,Security,access,access,36,"""""""; Detach histogram from file and access it outside of the context, both when writing and reading.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/tfile_context_manager.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tfile_context_manager.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py:178,Integrability,wrap,wrapper,178,"""""""; Tests for passing Python callables when constructing TFX classes. This feature is not implemented by a PyROOT pythonization, but by a converter of; Cppyy that creates a C++ wrapper to invoke the Python callable.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/tf_pycallables.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py:10,Usability,simpl,simple,10,"""""""; Test simple function without parameters; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/tf_pycallables.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py:33,Energy Efficiency,charge,charges,33,"# x dataset: 5 pairs of particle charges",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/tf_pycallables.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py:19,Energy Efficiency,charge,charges,19,"# Distance between charges r",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/tf_pycallables.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py:11,Safety,avoid,avoid,11,"# Slice to avoid the dummy column of 10's",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/tf_pycallables.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tgraph_getters.py:62,Availability,error,error,62,"""""""; Test for the pythonization of TGraph, TGraph2D and their error; subclasses, in particular of their X,Y,Z coordinates and errors; getters, which sets the size of the returned buffers.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/tgraph_getters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tgraph_getters.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tgraph_getters.py:126,Availability,error,errors,126,"""""""; Test for the pythonization of TGraph, TGraph2D and their error; subclasses, in particular of their X,Y,Z coordinates and errors; getters, which sets the size of the returned buffers.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/tgraph_getters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tgraph_getters.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/th2.py:65,Security,access,accessible,65,"""""""; Test that the method pulled in via using decls from TH1 are accessible; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/th2.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/th2.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/titer_iterator.py:10,Availability,redundant,redundant,10,"# Somehow redundant, but good to test with real syntax",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/titer_iterator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/titer_iterator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/titer_iterator.py:10,Safety,redund,redundant,10,"# Somehow redundant, but good to test with real syntax",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/titer_iterator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/titer_iterator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/titer_iterator.py:33,Testability,test,test,33,"# Somehow redundant, but good to test with real syntax",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/titer_iterator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/titer_iterator.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tseqcollection_itemaccess.py:23,Security,access,access,23,"""""""; Test for the item access methods added to TSeqCollection (and subclasses):; __getitem__, __setitem__, __delitem__.; Both the index (l[i]) and slice (l[i:j:k]) syntaxes are tested.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/tseqcollection_itemaccess.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tseqcollection_itemaccess.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tseqcollection_itemaccess.py:177,Testability,test,tested,177,"""""""; Test for the item access methods added to TSeqCollection (and subclasses):; __getitem__, __setitem__, __delitem__.; Both the index (l[i]) and slice (l[i:j:k]) syntaxes are tested.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/tseqcollection_itemaccess.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tseqcollection_itemaccess.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tseqcollection_itemaccess.py:58,Testability,test,tests,58,"# Assign second and third items to just one item.; # This tests that the third item is removed",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/tseqcollection_itemaccess.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tseqcollection_itemaccess.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tseqcollection_listmethods.py:53,Security,hash,hash,53,"# Python sort, key and reverse arguments.; # Sort by hash in reverse order",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/tseqcollection_listmethods.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tseqcollection_listmethods.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_branch.py:79,Testability,test,testing,79,"# Tests; # Basic type and array do not actually need the pythonization,; # but testing anyway for the sake of completeness",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/ttree_branch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_branch.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_branch_attr.py:47,Security,access,access,47,"""""""; Test for the pythonization that allows to access top-level tree branches/leaves as attributes; (i.e. `mytree.mybranch`). Since this pythonization is common to TTree and its subclasses, TChain, TNtuple; and TNtupleD are also tested here.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/ttree_branch_attr.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_branch_attr.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_branch_attr.py:229,Testability,test,tested,229,"""""""; Test for the pythonization that allows to access top-level tree branches/leaves as attributes; (i.e. `mytree.mybranch`). Since this pythonization is common to TTree and its subclasses, TChain, TNtuple; and TNtupleD are also tested here.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/ttree_branch_attr.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_branch_attr.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_iterable.py:248,Testability,test,tested,248,"""""""; Test for the pythonization that makes TTree instances iterable in Python. ; For example, this allows to do:; `for event in mytree:`; `...`. Since this pythonization is common to TTree and its subclasses, TChain, TNtuple; and TNtupleD are also tested here.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/ttree_iterable.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_iterable.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py:324,Testability,test,tested,324,"""""""; Test for the pythonization of TTree::SetBranchAddress, which allows to pass proxy; references as arguments from the Python side. Example:; `v = ROOT.std.vector('int')()`; `t.SetBranchAddress(""my_vector_branch"", v)`. Since this pythonization is common to TTree and its subclasses, TChain, TNtuple; and TNtupleD are also tested here.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py:97,Testability,test,testing,97,"# Tests; # Basic type, array and struct leaf list do not actually need the pythonization,; # but testing anyway for the sake of completeness",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py:38,Safety,detect,detected,38,"# check if type mismatch is correctly detected",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py:16,Availability,error,error,16,"# should return error code because of type mismatch",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py:38,Safety,detect,detected,38,"# check if type mismatch is correctly detected",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py:16,Availability,error,error,16,"# should return error code because of type mismatch",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabscollection.py:15,Testability,test,tests,15,"# Parametrized tests for RooAbsCollection child classes",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/rooabscollection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabscollection.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabscollection.py:11,Modifiability,variab,variable,11,"# The next variable has a duplicate name on purpose the check if it's; # really the name that is used as the key in RooAbsCollections.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/rooabscollection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabscollection.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabscollection.py:25,Integrability,inject,injected,25,"""""""STL sequence iterator injected in RooAbsCollection, inherited by RooArgSet""""""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/rooabscollection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabscollection.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabscollection.py:55,Modifiability,inherit,inherited,55,"""""""STL sequence iterator injected in RooAbsCollection, inherited by RooArgSet""""""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/rooabscollection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabscollection.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabscollection.py:25,Security,inject,injected,25,"""""""STL sequence iterator injected in RooAbsCollection, inherited by RooArgSet""""""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/rooabscollection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabscollection.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py:2,Testability,test,test,2,"# test that kwargs can be passed; # and lead to correct result",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py:2,Testability,test,test,2,"# test that AttributeError is raised; # if keyword does not correspong to CmdArg",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py:2,Testability,test,test,2,"# test that fitting with keyword arguments leads to the same result; # as doing the same fit with passed ROOT objects",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py:15,Availability,error,error,15,"# test that no error is causes if python style and cpp style; # args are provided to fitto and that results are identical",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py:2,Testability,test,test,2,"# test that no error is causes if python style and cpp style; # args are provided to fitto and that results are identical",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabsreal_ploton.py:2,Testability,test,test,2,"# test that kwargs can be passed; # and lead to correct result",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/rooabsreal_ploton.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabsreal_ploton.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabsreal_ploton.py:2,Testability,test,test,2,"# test that AttributeError is raised; # if keyword does not correspong to CmdArg",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/rooabsreal_ploton.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabsreal_ploton.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabsreal_ploton.py:2,Testability,test,test,2,"# test that fitting with keyword arguments leads to the same result; # as doing the same plot with passed ROOT objects",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/rooabsreal_ploton.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabsreal_ploton.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabsreal_ploton.py:15,Availability,error,error,15,"# test that no error is causes if python style and cpp style; # args are provided to plotOn and that results are identical",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/rooabsreal_ploton.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabsreal_ploton.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabsreal_ploton.py:2,Testability,test,test,2,"# test that no error is causes if python style and cpp style; # args are provided to plotOn and that results are identical",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/rooabsreal_ploton.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabsreal_ploton.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooarglist.py:98,Testability,test,test,98,"# General check that the conversion from string or tuple works, using; # constants to get compact test code.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/rooarglist.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooarglist.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooarglist.py:165,Testability,test,test,165,"# Let's make sure that we can add two arguments with the same name to; # the RooArgList. Here, we try to add the same RooConst two times. The; # motivation for this test if the RooArgList is created via an; # intermediate RooArgSet, which should not happen.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/rooarglist.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooarglist.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodatahist_ploton.py:27,Testability,test,test,27,"""""""; Initially, this was a test for the pythonization that allowed; RooDataHist to use the overloads of plotOn defined in RooAbsData.; Currently, such functionality is automatically provided by Cppyy; and ROOT meta: the overloads obtained with 'using' declarations; are taken into account when calling a method.; We keep this test to check that the aforementioned functionality; works properly in a case that is important for RooFit.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/roodatahist_ploton.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodatahist_ploton.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodatahist_ploton.py:326,Testability,test,test,326,"""""""; Initially, this was a test for the pythonization that allowed; RooDataHist to use the overloads of plotOn defined in RooAbsData.; Currently, such functionality is automatically provided by Cppyy; and ROOT meta: the overloads obtained with 'using' declarations; are taken into account when calling a method.; We keep this test to check that the aforementioned functionality; works properly in a case that is important for RooFit.; """"""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/roodatahist_ploton.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodatahist_ploton.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py:9,Testability,test,test,9,"""""""Basic test with a real value and a category.""""""",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py:18,Modifiability,variab,variable,18,"# Add column with variable w to previously generated dataset",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py:13,Modifiability,variab,variable,13,"# The RooFit variable ""x"" is only defined from -1 to 2, and the; # category doesn't have the 0-state.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roolinkedlist.py:2,Testability,test,test,2,"# test if we can correctly iterate over a RooLinkedList, also in; # reverse.",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/roolinkedlist.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roolinkedlist.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooworkspace.py:25,Modifiability,variab,variables,25,"# Prepare workspace with variables and a PDF",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/rooworkspace.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooworkspace.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooworkspace.py:23,Modifiability,variab,variables,23,"# Test to check if new variables are created",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/rooworkspace.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooworkspace.py
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooworkspace.py:23,Modifiability,variab,variables,23,"# Test to check if new variables are created",MatchSource.CODE_COMMENT,bindings/pyroot/pythonizations/test/roofit/rooworkspace.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooworkspace.py
https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/test/test_tpython.py:55,Testability,test,testTPythonExec,55,""""""". // Test TPython::Exec from multiple threads.; int testTPythonExec(int nIn); {; std::any out;; std::stringstream cmd;; cmd << ""_anyresult = ROOT.std.make_any['int']("" << nIn << "")"";; TPython::Exec(cmd.str().c_str(), &out);; return std::any_cast<int>(out);; }; """"""",MatchSource.CODE_COMMENT,bindings/tpython/test/test_tpython.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/test/test_tpython.py
https://github.com/root-project/root/tree/v6-32-06/cmake/unix/makepchinput.py:54,Testability,test,test,54,"# Make sure we don't get warnings from the old RooFit test statistics; # headers that are deprecated. This line can be removed once the deprecaded; # headers are gone (ROOT 6.32.00):",MatchSource.CODE_COMMENT,cmake/unix/makepchinput.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/cmake/unix/makepchinput.py
https://github.com/root-project/root/tree/v6-32-06/cmake/unix/rootmapcat.py:9,Energy Efficiency,reduce,reduce,9,"# Now we reduce the fwd declarations",MatchSource.CODE_COMMENT,cmake/unix/rootmapcat.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/cmake/unix/rootmapcat.py
https://github.com/root-project/root/tree/v6-32-06/core/base/src/root-argparse.py:195,Availability,avail,available,195,"""""""ROOTs Object-Oriented Technologies.\n; root is an interactive interpreter of C++ code. It uses the ROOT framework. For more information on ROOT, please refer to\n; An extensive Users Guide is available from that site (see below).; """"""",MatchSource.CODE_COMMENT,core/base/src/root-argparse.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/root-argparse.py
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling-argparse.py:1559,Modifiability,inherit,inheriting,1559,"e names. The (optional) file LinkDef.h looks like:. #ifdef __CLING__. #pragma link off all globals;; #pragma link off all classes;; #pragma link off all functions;. #pragma link C++ class TAxis;; #pragma link C++ class TAttAxis-;; #pragma link C++ class TArrayC-!;; #pragma link C++ class AliEvent+;. #pragma link C++ function StrDup;; #pragma link C++ function operator+(const TString&,const TString&);. #pragma link C++ global gROOT;; #pragma link C++ global gEnv;. #pragma link C++ enum EMessageTypes;. #endif. This file tells rootcling which classes will be persisted on disk and what; entities will trigger automatic load of the shared library which contains; it. A trailing - in the class name tells rootcling to not generate the; Streamer() method. This is necessary for those classes that need a; customized Streamer() method. A trailing ! in the class name tells rootcling; to not generate the operator>>(TBuffer &b, MyClass *&obj) function. This is; necessary to be able to write pointers to objects of classes not inheriting; from TObject. See for an example the source of the TArrayF class.; If the class contains a ClassDef macro, a trailing + in the class; name tells rootcling to generate an automatic Streamer(), i.e. a; streamer that let ROOT do automatic schema evolution. Otherwise, a; trailing + in the class name tells rootcling to generate a ShowMember; function and a Shadow Class. The + option is mutually exclusive with; the - option. For legacy reasons it is not yet the default.; When the linkdef file is not specified a default version exporting; the classes with the names equal to the include files minus the .h; is generated. The default constructor used by the ROOT I/O can be customized by; using the rootcling pragma:; #pragma link C++ ioctortype UserClass;; For example, with this pragma and a class named MyClass,; this method will called the first of the following 3; constructors which exists and is public:; MyClass(UserClass*);; MyClass(TRootIOCtor*);; MyClass",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling-argparse.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling-argparse.py
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling-argparse.py:1156,Performance,load,load,1156,"st argument on the rootcling command line.; 2) Note that the LinkDef file name must contain the string:; LinkDef.h, Linkdef.h or linkdef.h, i.e. NA49_LinkDef.h. Before specifying the first header file one can also add include; file directories to be searched and preprocessor defines, like:; -I$MYPROJECT/include -DDebug=1. NOTA BENE: the dictionaries that will be used within the same project must; have unique names. The (optional) file LinkDef.h looks like:. #ifdef __CLING__. #pragma link off all globals;; #pragma link off all classes;; #pragma link off all functions;. #pragma link C++ class TAxis;; #pragma link C++ class TAttAxis-;; #pragma link C++ class TArrayC-!;; #pragma link C++ class AliEvent+;. #pragma link C++ function StrDup;; #pragma link C++ function operator+(const TString&,const TString&);. #pragma link C++ global gROOT;; #pragma link C++ global gEnv;. #pragma link C++ enum EMessageTypes;. #endif. This file tells rootcling which classes will be persisted on disk and what; entities will trigger automatic load of the shared library which contains; it. A trailing - in the class name tells rootcling to not generate the; Streamer() method. This is necessary for those classes that need a; customized Streamer() method. A trailing ! in the class name tells rootcling; to not generate the operator>>(TBuffer &b, MyClass *&obj) function. This is; necessary to be able to write pointers to objects of classes not inheriting; from TObject. See for an example the source of the TArrayF class.; If the class contains a ClassDef macro, a trailing + in the class; name tells rootcling to generate an automatic Streamer(), i.e. a; streamer that let ROOT do automatic schema evolution. Otherwise, a; trailing + in the class name tells rootcling to generate a ShowMember; function and a Shadow Class. The + option is mutually exclusive with; the - option. For legacy reasons it is not yet the default.; When the linkdef file is not specified a default version exporting; the classes with",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling-argparse.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling-argparse.py
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling-argparse.py:58,Performance,load,loaded,58,"""""""Specify absolute or relative path Clang pcm file to be loaded; The pcm file (module) produced by this invocation of rootcling; will not include any of the declarations already included in the; pcm files loaded via -m. There can be more than one -m; """"""",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling-argparse.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling-argparse.py
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling-argparse.py:206,Performance,load,loaded,206,"""""""Specify absolute or relative path Clang pcm file to be loaded; The pcm file (module) produced by this invocation of rootcling; will not include any of the declarations already included in the; pcm files loaded via -m. There can be more than one -m; """"""",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling-argparse.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling-argparse.py
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling-argparse.py:93,Modifiability,variab,variable,93,"""""""Do not store the headers' directories in the dictionary; Instead, rely on the environment variable $ROOT_INCLUDE_PATH at runtime; """"""",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling-argparse.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling-argparse.py
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling-argparse.py:321,Performance,load,load,321,"""""""Specify libraries needed by the header files parsed; This feature is used by ACliC (the automatic library generator).; Rootcling will read the content of xxx.in for a list of rootmap files (see; rlibmap). Rootcling will read these files and use them to deduce a list of; libraries that are needed to properly link and load this dictionary. This; list of libraries is saved in the first line of the file xxx.out; the; remaining lines contains the list of classes for which this run of; rootcling produced a dictionary; """"""",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling-argparse.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling-argparse.py
https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py:827,Deployability,install,installed,827,"#!/usr/bin/env python; # Author: Pau Miquel i Mir <pau.miquel.mir@cern.ch> <pmm1g15@soton.ac.uk>>; # Date: July, 2016; #; # DISCLAIMER: This script is a prototype and a work in progress. Indeed, it is possible that; # it may not work for certain tutorials, and that it, or the tutorial, might need to be; # tweaked slightly to ensure full functionality. Please do not hesitate to email the author; # with any questions or with examples that do not work.; #; # HELP IT DOESN'T WORK: Two possible solutions:; # 1. If the tutorial takes a long time to execute (more than 90 seconds), add the name of the; # tutorial to the list of long tutorials listLongTutorials, in the function findTimeout.; # 2. Check that helper functions are recognised correctly in split(text).; #; # REQUIREMENTS: This script needs jupyter to be properly installed, as it uses the python; # package nbformat and calls the shell commands `jupyter nbconvert` and `jupyter trust`. The; # rest of the packages used should be included in a standard installation of python. The script; # is intended to be run on a UNIX based system.; #; #; # FUNCTIONING:; # -----------; # The converttonotebook script creates Jupyter notebooks from raw C++ or python files.; # Particularly, it is indicated to convert the ROOT tutorials found in the ROOT; # repository.; #; # The script should be called from bash with the following format:; # python /path/to/script/converttonotebook.py /path/to/<macro>.C /path/to/outdir; #; # Indeed the script takes two arguments, the path to the macro and the path to the directory; # where the notebooks will be created; #; # The script's general functioning is as follows. The macro to be converted is imported as a string.; # A series of modifications are made to this string, for instance delimiting where markdown and; # code cells begin and end. Then, this string is converted into ipynb format using a function; # in the nbconvert package. Finally, the notebook is executed and output.; #; # For convertin",MatchSource.CODE_COMMENT,documentation/doxygen/converttonotebook.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py
https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py:1016,Deployability,install,installation,1016,"#!/usr/bin/env python; # Author: Pau Miquel i Mir <pau.miquel.mir@cern.ch> <pmm1g15@soton.ac.uk>>; # Date: July, 2016; #; # DISCLAIMER: This script is a prototype and a work in progress. Indeed, it is possible that; # it may not work for certain tutorials, and that it, or the tutorial, might need to be; # tweaked slightly to ensure full functionality. Please do not hesitate to email the author; # with any questions or with examples that do not work.; #; # HELP IT DOESN'T WORK: Two possible solutions:; # 1. If the tutorial takes a long time to execute (more than 90 seconds), add the name of the; # tutorial to the list of long tutorials listLongTutorials, in the function findTimeout.; # 2. Check that helper functions are recognised correctly in split(text).; #; # REQUIREMENTS: This script needs jupyter to be properly installed, as it uses the python; # package nbformat and calls the shell commands `jupyter nbconvert` and `jupyter trust`. The; # rest of the packages used should be included in a standard installation of python. The script; # is intended to be run on a UNIX based system.; #; #; # FUNCTIONING:; # -----------; # The converttonotebook script creates Jupyter notebooks from raw C++ or python files.; # Particularly, it is indicated to convert the ROOT tutorials found in the ROOT; # repository.; #; # The script should be called from bash with the following format:; # python /path/to/script/converttonotebook.py /path/to/<macro>.C /path/to/outdir; #; # Indeed the script takes two arguments, the path to the macro and the path to the directory; # where the notebooks will be created; #; # The script's general functioning is as follows. The macro to be converted is imported as a string.; # A series of modifications are made to this string, for instance delimiting where markdown and; # code cells begin and end. Then, this string is converted into ipynb format using a function; # in the nbconvert package. Finally, the notebook is executed and output.; #; # For convertin",MatchSource.CODE_COMMENT,documentation/doxygen/converttonotebook.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py
https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py:330,Modifiability,variab,variable,330,"""""""; Converts comments delimited by # or ## and on a new line into a markdown cell.; For python files only; >>> pythonComments('''## This is a; ... ## multiline comment; ... def function()'''); '# <markdowncell>\\n## This is a\\n## multiline comment\\n# <codecell>\\ndef function()\\n'; >>> pythonComments('''def function():; ... variable = 5 # Comment not in cell; ... # Comment also not in cell'''); 'def function():\\n variable = 5 # Comment not in cell\\n # Comment also not in cell\\n'; """"""",MatchSource.CODE_COMMENT,documentation/doxygen/converttonotebook.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py
https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py:422,Modifiability,variab,variable,422,"""""""; Converts comments delimited by # or ## and on a new line into a markdown cell.; For python files only; >>> pythonComments('''## This is a; ... ## multiline comment; ... def function()'''); '# <markdowncell>\\n## This is a\\n## multiline comment\\n# <codecell>\\ndef function()\\n'; >>> pythonComments('''def function():; ... variable = 5 # Comment not in cell; ... # Comment also not in cell'''); 'def function():\\n variable = 5 # Comment not in cell\\n # Comment also not in cell\\n'; """"""",MatchSource.CODE_COMMENT,documentation/doxygen/converttonotebook.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py
https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py:420,Modifiability,variab,variable,420,"""""""; Converts comments delimited by // and on a new line into a markdown cell. Skips comments inside; blocks and braces, though, since these would otherwise be ripped apart. For C++ files only.; >>> cppComments('''// This is a; ... // multiline comment; ... void function(){}'''); '# <markdowncell>\\n# This is a\\n# multiline comment\\n# <codecell>\\nvoid function(){}\\n'; >>> cppComments('''void function(){; ... int variable = 5 // Comment not in cell; ... // Comment also not in cell; ... }'''); 'void function(){\\n int variable = 5 // Comment not in cell\\n // Comment also not in cell\\n}\\n'; """"""",MatchSource.CODE_COMMENT,documentation/doxygen/converttonotebook.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py
https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py:526,Modifiability,variab,variable,526,"""""""; Converts comments delimited by // and on a new line into a markdown cell. Skips comments inside; blocks and braces, though, since these would otherwise be ripped apart. For C++ files only.; >>> cppComments('''// This is a; ... // multiline comment; ... void function(){}'''); '# <markdowncell>\\n# This is a\\n# multiline comment\\n# <codecell>\\nvoid function(){}\\n'; >>> cppComments('''void function(){; ... int variable = 5 // Comment not in cell; ... // Comment also not in cell; ... }'''); 'void function(){\\n int variable = 5 // Comment not in cell\\n // Comment also not in cell\\n}\\n'; """"""",MatchSource.CODE_COMMENT,documentation/doxygen/converttonotebook.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py
https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py:17,Testability,test,test,17,"""""""#include \""../test/Event.h\""""""""",MatchSource.CODE_COMMENT,documentation/doxygen/converttonotebook.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py
https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py:41,Testability,test,test,41,"""""""# <codecell>\nTString dir = ""$ROOTSYS/test/Event.h"";\ngSystem->ExpandPathName(dir);\nTString includeCommand = TString::Format(""#include \\\""%s\\\"""" , dir.Data());\ngROOT->ProcessLine(includeCommand);""""""",MatchSource.CODE_COMMENT,documentation/doxygen/converttonotebook.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py
https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py:266,Deployability,update,updated,266,"""""""; Main function. Calls all other functions, depending on whether the macro input is in python or c++.; It adds the header information. Also, it adds a cell that draws all canvases. The working text is; then converted to a version 3 jupyter notebook, subsequently updated to a version 4. Then, metadata; associated with the language the macro is written in is attatched to he notebook. Finally the; notebook is executed and output as a Jupyter notebook.; """"""",MatchSource.CODE_COMMENT,documentation/doxygen/converttonotebook.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py
https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py:47,Integrability,depend,depending,47,"""""""; Main function. Calls all other functions, depending on whether the macro input is in python or c++.; It adds the header information. Also, it adds a cell that draws all canvases. The working text is; then converted to a version 3 jupyter notebook, subsequently updated to a version 4. Then, metadata; associated with the language the macro is written in is attatched to he notebook. Finally the; notebook is executed and output as a Jupyter notebook.; """"""",MatchSource.CODE_COMMENT,documentation/doxygen/converttonotebook.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py
https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py:170,Security,access,access,170,"# -------------------------------------; # -------------------------------------; # -------------------------------------; # Set DYLD_LIBRARY_PATH. When run without root access or as a different user, especially from Mac systems,; # it is possible for security reasons that the environment does not include this definition, so it is manually defined.",MatchSource.CODE_COMMENT,documentation/doxygen/converttonotebook.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py
https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py:252,Security,secur,security,252,"# -------------------------------------; # -------------------------------------; # -------------------------------------; # Set DYLD_LIBRARY_PATH. When run without root access or as a different user, especially from Mac systems,; # it is possible for security reasons that the environment does not include this definition, so it is manually defined.",MatchSource.CODE_COMMENT,documentation/doxygen/converttonotebook.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py
https://github.com/root-project/root/tree/v6-32-06/documentation/primer/macros/TGraphFit.py:23,Availability,error,error,23,"#; # Draw a graph with error bars and fit a function to it; #",MatchSource.CODE_COMMENT,documentation/primer/macros/TGraphFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/primer/macros/TGraphFit.py
https://github.com/root-project/root/tree/v6-32-06/etc/pdg_table_update.py:38,Deployability,update,updated,38,"# Formatting the output line with the updated mass and width",MatchSource.CODE_COMMENT,etc/pdg_table_update.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/etc/pdg_table_update.py
https://github.com/root-project/root/tree/v6-32-06/etc/pdg_table_update.py:39,Energy Efficiency,charge,charge,39,"# Extract only the name, excluding the charge; # Storing the data in the dictionary",MatchSource.CODE_COMMENT,etc/pdg_table_update.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/etc/pdg_table_update.py
https://github.com/root-project/root/tree/v6-32-06/etc/pdg_table_update.py:42,Deployability,update,updated,42,"#------------------------------; # Create updated pdg_table.txt; #------------------------------",MatchSource.CODE_COMMENT,etc/pdg_table_update.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/etc/pdg_table_update.py
https://github.com/root-project/root/tree/v6-32-06/etc/dictpch/makepch.py:395,Availability,error,errors,395,"#! /usr/bin/env python; #; # Build a pch for the headers and linkdefs in root-build-dir/etc/dictpch/.; # root-build-dir is first tried as ./ - if that doesn't exist, $ROOTSYS; # is taken as root-build-dir.; #; # $1: PCH output file name; # $2: cxxflags (optional; required if extra headers are supplied); # $3: extra headers to be included in the PCH (optional); #; # exit code 1 for invocation errors; else exit code of rootcling invocation.; #; # Copyright (c) 2014 Rene Brun and Fons Rademakers; # Author: Axel Naumann <axel@cern.ch>, 2014-10-16; # Translated to python by Danilo Piparo, 2015-4-23",MatchSource.CODE_COMMENT,etc/dictpch/makepch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/etc/dictpch/makepch.py
https://github.com/root-project/root/tree/v6-32-06/etc/notebook/html/sample_config.py:18,Deployability,configurat,configuration,18,"# JupyROOT sample configuration file for nbconvert",MatchSource.CODE_COMMENT,etc/notebook/html/sample_config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/etc/notebook/html/sample_config.py
https://github.com/root-project/root/tree/v6-32-06/etc/notebook/html/sample_config.py:18,Modifiability,config,configuration,18,"# JupyROOT sample configuration file for nbconvert",MatchSource.CODE_COMMENT,etc/notebook/html/sample_config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/etc/notebook/html/sample_config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py:56,Deployability,configurat,configuration,56,"# -*- coding: utf-8 -*-; #; # Cling documentation build configuration file, created by; # sphinx-quickstart on Sun Dec 9 20:01:55 2012.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.",MatchSource.CODE_COMMENT,interpreter/cling/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py:254,Deployability,configurat,configuration,254,"# -*- coding: utf-8 -*-; #; # Cling documentation build configuration file, created by; # sphinx-quickstart on Sun Dec 9 20:01:55 2012.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.",MatchSource.CODE_COMMENT,interpreter/cling/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py:328,Deployability,configurat,configuration,328,"# -*- coding: utf-8 -*-; #; # Cling documentation build configuration file, created by; # sphinx-quickstart on Sun Dec 9 20:01:55 2012.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.",MatchSource.CODE_COMMENT,interpreter/cling/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py:56,Modifiability,config,configuration,56,"# -*- coding: utf-8 -*-; #; # Cling documentation build configuration file, created by; # sphinx-quickstart on Sun Dec 9 20:01:55 2012.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.",MatchSource.CODE_COMMENT,interpreter/cling/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py:254,Modifiability,config,configuration,254,"# -*- coding: utf-8 -*-; #; # Cling documentation build configuration file, created by; # sphinx-quickstart on Sun Dec 9 20:01:55 2012.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.",MatchSource.CODE_COMMENT,interpreter/cling/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py:328,Modifiability,config,configuration,328,"# -*- coding: utf-8 -*-; #; # Cling documentation build configuration file, created by; # sphinx-quickstart on Sun Dec 9 20:01:55 2012.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.",MatchSource.CODE_COMMENT,interpreter/cling/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py:297,Deployability,configurat,configuration,297,"# If extensions (or modules to document with autodoc) are in another directory,; # add these directories to sys.path here. If the directory is relative to the; # documentation root, use os.path.abspath to make it absolute, like shown here.; #sys.path.insert(0, os.path.abspath('.')); # -- General configuration -----------------------------------------------------; # If your documentation needs a minimal Sphinx version, state it here.; #needs_sphinx = '1.0'; # Add any Sphinx extension module names here, as strings. They can be extensions; # coming with Sphinx (named 'sphinx.ext.*') or your custom ones.",MatchSource.CODE_COMMENT,interpreter/cling/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py:297,Modifiability,config,configuration,297,"# If extensions (or modules to document with autodoc) are in another directory,; # add these directories to sys.path here. If the directory is relative to the; # documentation root, use os.path.abspath to make it absolute, like shown here.; #sys.path.insert(0, os.path.abspath('.')); # -- General configuration -----------------------------------------------------; # If your documentation needs a minimal Sphinx version, state it here.; #needs_sphinx = '1.0'; # Add any Sphinx extension module names here, as strings. They can be extensions; # coming with Sphinx (named 'sphinx.ext.*') or your custom ones.",MatchSource.CODE_COMMENT,interpreter/cling/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py:97,Deployability,release,release,97,"# The version info for the project you're documenting, acts as replacement for; # |version| and |release|, also used in various other places throughout the; # built documents.; #; # The short version.",MatchSource.CODE_COMMENT,interpreter/cling/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py:112,Availability,avail,available,112,"# Theme options are theme-specific and customize the look and feel of a theme; # further. For a list of options available for each theme, see the; # documentation.; #html_theme_options = {}; # Add any paths that contain custom themes here, relative to this directory.; #html_theme_path = []; # The name for this set of Sphinx documents. If None, it defaults to; # ""<project> v<release> documentation"".; #html_title = None; # A shorter title for the navigation bar. Default is the same as html_title.; #html_short_title = None; # The name of an image file (relative to this directory) to place at the top; # of the sidebar.; #html_logo = None; # The name of an image file (within the static path) to use as favicon of the; # docs. This file should be a Windows icon file (.ico) being 16x16 or 32x32; # pixels large.; #html_favicon = None; # Add any paths that contain custom static files (such as style sheets) here,; # relative to this directory. They are copied after the builtin static files,; # so a file named ""default.css"" will overwrite the builtin ""default.css"".",MatchSource.CODE_COMMENT,interpreter/cling/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py:377,Deployability,release,release,377,"# Theme options are theme-specific and customize the look and feel of a theme; # further. For a list of options available for each theme, see the; # documentation.; #html_theme_options = {}; # Add any paths that contain custom themes here, relative to this directory.; #html_theme_path = []; # The name for this set of Sphinx documents. If None, it defaults to; # ""<project> v<release> documentation"".; #html_title = None; # A shorter title for the navigation bar. Default is the same as html_title.; #html_short_title = None; # The name of an image file (relative to this directory) to place at the top; # of the sidebar.; #html_logo = None; # The name of an image file (within the static path) to use as favicon of the; # docs. This file should be a Windows icon file (.ico) being 16x16 or 32x32; # pixels large.; #html_favicon = None; # Add any paths that contain custom static files (such as style sheets) here,; # relative to this directory. They are copied after the builtin static files,; # so a file named ""default.css"" will overwrite the builtin ""default.css"".",MatchSource.CODE_COMMENT,interpreter/cling/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py:21,Deployability,update,updated,21,"# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,; # using the given strftime format.; #html_last_updated_fmt = '%b %d, %Y'; # If true, SmartyPants will be used to convert quotes and dashes to; # typographically correct entities.; #html_use_smartypants = True; # Custom sidebar templates, maps document names to template names.; #html_sidebars = {}; # Additional templates that should be rendered to pages, maps page names to; # template names.; #html_additional_pages = {}; # If false, no module index is generated.; #html_domain_indices = True; # If false, no index is generated.; #html_use_index = True; # If true, the index is split into individual pages for each letter.; #html_split_index = False; # If true, links to the reST sources are added to the pages.; #html_show_sourcelink = True; # If true, ""Created using Sphinx"" is shown in the HTML footer. Default is True.; #html_show_sphinx = True; # If true, ""(C) Copyright ..."" is shown in the HTML footer. Default is True.; #html_show_copyright = True; # If true, an OpenSearch description file will be output, and all pages will; # contain a <link> tag referring to it. The value of this option must be the; # base URL from which the finished HTML is served.; #html_use_opensearch = ''; # This is the file name suffix for HTML files (e.g. "".xhtml"").; #html_file_suffix = None; # Output file base name for HTML help builder.",MatchSource.CODE_COMMENT,interpreter/cling/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py:841,Availability,error,error,841,"# Automatically derive the list of man pages from the contents of the command; # guide subdirectory. This was copied from llvm/docs/conf.py.; #basedir = os.path.dirname(__file__); #man_page_authors = u'Maintained by the Cling Team (<http://compiler-research.org>)'; #command_guide_subpath = 'CommandGuide'; #command_guide_path = os.path.join(basedir, command_guide_subpath); #for name in os.listdir(command_guide_path):; # # Ignore non-ReST files and the index page.; # if not name.endswith('.rst') or name in ('index.rst',):; # continue; #; # # Otherwise, automatically extract the description.; # file_subpath = os.path.join(command_guide_subpath, name); # with open(os.path.join(command_guide_path, name)) as f:; # title = f.readline().rstrip('\n'); # header = f.readline().rstrip('\n'); #; # if len(header) != len(title):; # print((; # ""error: invalid header in %r (does not match title)"" % (; # file_subpath,)), file=sys.stderr); # if ' - ' not in title:; # print((; # (""error: invalid title in %r ""; # ""(expected '<name> - <description>')"") % (; # file_subpath,)), file=sys.stderr); #; # # Split the name out of the title.; # name,description = title.split(' - ', 1); # man_pages.append((file_subpath.replace('.rst',''), name,; # description, man_page_authors, 1)); # If true, show URL addresses after external links.; #man_show_urls = False; # -- Options for Texinfo output ------------------------------------------------; # Grouping the document tree into Texinfo files. List of tuples; # (source start file, target name, title, author,; # dir menu entry, description, category)",MatchSource.CODE_COMMENT,interpreter/cling/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py:976,Availability,error,error,976,"# Automatically derive the list of man pages from the contents of the command; # guide subdirectory. This was copied from llvm/docs/conf.py.; #basedir = os.path.dirname(__file__); #man_page_authors = u'Maintained by the Cling Team (<http://compiler-research.org>)'; #command_guide_subpath = 'CommandGuide'; #command_guide_path = os.path.join(basedir, command_guide_subpath); #for name in os.listdir(command_guide_path):; # # Ignore non-ReST files and the index page.; # if not name.endswith('.rst') or name in ('index.rst',):; # continue; #; # # Otherwise, automatically extract the description.; # file_subpath = os.path.join(command_guide_subpath, name); # with open(os.path.join(command_guide_path, name)) as f:; # title = f.readline().rstrip('\n'); # header = f.readline().rstrip('\n'); #; # if len(header) != len(title):; # print((; # ""error: invalid header in %r (does not match title)"" % (; # file_subpath,)), file=sys.stderr); # if ' - ' not in title:; # print((; # (""error: invalid title in %r ""; # ""(expected '<name> - <description>')"") % (; # file_subpath,)), file=sys.stderr); #; # # Split the name out of the title.; # name,description = title.split(' - ', 1); # man_pages.append((file_subpath.replace('.rst',''), name,; # description, man_page_authors, 1)); # If true, show URL addresses after external links.; #man_show_urls = False; # -- Options for Texinfo output ------------------------------------------------; # Grouping the document tree into Texinfo files. List of tuples; # (source start file, target name, title, author,; # dir menu entry, description, category)",MatchSource.CODE_COMMENT,interpreter/cling/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py:81,Usability,guid,guide,81,"# Automatically derive the list of man pages from the contents of the command; # guide subdirectory. This was copied from llvm/docs/conf.py.; #basedir = os.path.dirname(__file__); #man_page_authors = u'Maintained by the Cling Team (<http://compiler-research.org>)'; #command_guide_subpath = 'CommandGuide'; #command_guide_path = os.path.join(basedir, command_guide_subpath); #for name in os.listdir(command_guide_path):; # # Ignore non-ReST files and the index page.; # if not name.endswith('.rst') or name in ('index.rst',):; # continue; #; # # Otherwise, automatically extract the description.; # file_subpath = os.path.join(command_guide_subpath, name); # with open(os.path.join(command_guide_path, name)) as f:; # title = f.readline().rstrip('\n'); # header = f.readline().rstrip('\n'); #; # if len(header) != len(title):; # print((; # ""error: invalid header in %r (does not match title)"" % (; # file_subpath,)), file=sys.stderr); # if ' - ' not in title:; # print((; # (""error: invalid title in %r ""; # ""(expected '<name> - <description>')"") % (; # file_subpath,)), file=sys.stderr); #; # # Split the name out of the title.; # name,description = title.split(' - ', 1); # man_pages.append((file_subpath.replace('.rst',''), name,; # description, man_page_authors, 1)); # If true, show URL addresses after external links.; #man_show_urls = False; # -- Options for Texinfo output ------------------------------------------------; # Grouping the document tree into Texinfo files. List of tuples; # (source start file, target name, title, author,; # dir menu entry, description, category)",MatchSource.CODE_COMMENT,interpreter/cling/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/Jupyter/kernel/clingkernel.py:71,Availability,error,error,71,"#If cling is not a symlink try a regular file; #readlink returns POSIX error EINVAL (22) if the; #argument is not a symlink",MatchSource.CODE_COMMENT,interpreter/cling/tools/Jupyter/kernel/clingkernel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/Jupyter/kernel/clingkernel.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/Jupyter/kernel/clingkernel.py:14,Modifiability,variab,variable,14,"# Environment variable CLING_OPTS used to pass arguments to cling",MatchSource.CODE_COMMENT,interpreter/cling/tools/Jupyter/kernel/clingkernel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/Jupyter/kernel/clingkernel.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/Jupyter/kernel/clingkernel.py:24,Integrability,message,messages,24,"""""""publish display-data messages on IOPub.; """"""",MatchSource.CODE_COMMENT,interpreter/cling/tools/Jupyter/kernel/clingkernel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/Jupyter/kernel/clingkernel.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/Jupyter/kernel/clingkernel.py:63,Integrability,message,messages,63,"""""""Capture stdout, stderr and sideband. Forward them as stream messages.""""""",MatchSource.CODE_COMMENT,interpreter/cling/tools/Jupyter/kernel/clingkernel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/Jupyter/kernel/clingkernel.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/Jupyter/kernel/setup.py:105,Safety,sanity check,sanity check,105,"#-----------------------------------------------------------------------------; # Minimal Python version sanity check; #-----------------------------------------------------------------------------",MatchSource.CODE_COMMENT,interpreter/cling/tools/Jupyter/kernel/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/Jupyter/kernel/setup.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:13,Deployability,install,install,13,"# Needs brew install python. We should only install if we need the; # functionality",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:44,Deployability,install,install,44,"# Needs brew install python. We should only install if we need the; # functionality",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:17,Deployability,release,release,17,"# If development release, then add revision to the version",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:19,Deployability,install,installation,19,"# Cleanup previous installation directory if any",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:2,Modifiability,config,configure,2,"# configure cling",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:19,Deployability,install,installation,19,"# Cleanup previous installation directory if any",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:41,Availability,down,download,41,"# We get zip instead of git clone to not download git history",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:13,Testability,test,tests,13,"# Run single tests on CI with this; # runSingleTest('Prompt/ValuePrinter/Regression.C'); # runSingleTest('Prompt/ValuePrinter')",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:947,Performance,perform,performance,947,"'''; Source: cling; Section: devel; Priority: optional; Maintainer: Cling Developer Team <cling-dev@cern.ch>; Uploaders: %s; Build-Depends: debhelper (>= 9.0.0); Standards-Version: 3.9.5; Homepage: http://cling.web.cern.ch/; Vcs-Git: http://root.cern.ch/git/cling.git; Vcs-Browser: http://root.cern.ch/gitweb?p=cling.git;a=summary. Package: cling; Priority: optional; Architecture: any; Depends: ${shlibs:Depends}, ${misc:Depends}; Description: interactive C++ interpreter; Cling is a new and interactive C++11 standard compliant interpreter built; on the top of Clang and LLVM compiler infrastructure. Its advantages over; the standard interpreters are that it has command line prompt and uses; Just In Time (JIT) compiler for compilation. Many of the developers; (e.g. Mono in their project called CSharpRepl) of such kind of software; applications name them interactive compilers.; .; One of Cling's main goals is to provide contemporary, high-performance; alternative of the current C++ interpreter in the ROOT project - CINT. Cling; serves as a core component of the ROOT system for storing and analyzing the; data of the Large Hadron Collider (LHC) experiments. The; backward-compatibility with CINT is major priority during the development.; '''",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:282,Deployability,release,release,282,"'''; License: LGPLv2+ or NCSA; Group: Development/Languages/Other; SOURCE0 : %{name}-%{version}.tar.bz2; URL: http://cling.web.cern.ch/; Vendor: Developed by The ROOT Team; CERN and Fermilab; Packager: Anirudha Bose <ani07nov@gmail.com>. BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root. %description; Cling is a new and interactive C++11 standard compliant interpreter built; on the top of Clang and LLVM compiler infrastructure. Its advantages over; the standard interpreters are that it has command line prompt and uses; Just In Time (JIT) compiler for compilation. Many of the developers; (e.g. Mono in their project called CSharpRepl) of such kind of software; applications name them interactive compilers. One of Cling's main goals is to provide contemporary, high-performance; alternative of the current C++ interpreter in the ROOT project - CINT. Cling; serves as a core component of the ROOT system for storing and analyzing the; data of the Large Hadron Collider (LHC) experiments. The; backward-compatibility with CINT is major priority during the development. %prep; %setup; mkdir -p $RPM_BUILD_DIR/%{name}-%{version}/usr/share/doc; mv $RPM_BUILD_DIR/%{name}-%{version}/bin/ $RPM_BUILD_DIR/%{name}-%{version}/usr; mv $RPM_BUILD_DIR/%{name}-%{version}/docs/* $RPM_BUILD_DIR/%{name}-%{version}/usr/share/doc/; mv $RPM_BUILD_DIR/%{name}-%{version}/lib/ $RPM_BUILD_DIR/%{name}-%{version}/usr; mv $RPM_BUILD_DIR/%{name}-%{version}/include/ $RPM_BUILD_DIR/%{name}-%{version}/usr; mv $RPM_BUILD_DIR/%{name}-%{version}/share/* $RPM_BUILD_DIR/%{name}-%{version}/usr/share. rm -Rf $RPM_BUILD_DIR/%{name}-%{version}/docs; rm -Rf $RPM_BUILD_DIR/%{name}-%{version}/share. if [ ${RPM_ARCH} = 'x86_64' ]; then; mv $RPM_BUILD_DIR/%{name}-%{version}/usr/lib $RPM_BUILD_DIR/%{name}-%{version}/usr/lib64; fi. %build; # Empty section. %install; rm -rf %{buildroot}; mkdir -p %{buildroot}. # in builddir; cp -a * %{buildroot}. %clean; rm -rf %{buildroot}. %files; %defattr(-,root,root,-); %{_bindir}/*",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:1837,Deployability,install,install,1837,"Team; CERN and Fermilab; Packager: Anirudha Bose <ani07nov@gmail.com>. BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root. %description; Cling is a new and interactive C++11 standard compliant interpreter built; on the top of Clang and LLVM compiler infrastructure. Its advantages over; the standard interpreters are that it has command line prompt and uses; Just In Time (JIT) compiler for compilation. Many of the developers; (e.g. Mono in their project called CSharpRepl) of such kind of software; applications name them interactive compilers. One of Cling's main goals is to provide contemporary, high-performance; alternative of the current C++ interpreter in the ROOT project - CINT. Cling; serves as a core component of the ROOT system for storing and analyzing the; data of the Large Hadron Collider (LHC) experiments. The; backward-compatibility with CINT is major priority during the development. %prep; %setup; mkdir -p $RPM_BUILD_DIR/%{name}-%{version}/usr/share/doc; mv $RPM_BUILD_DIR/%{name}-%{version}/bin/ $RPM_BUILD_DIR/%{name}-%{version}/usr; mv $RPM_BUILD_DIR/%{name}-%{version}/docs/* $RPM_BUILD_DIR/%{name}-%{version}/usr/share/doc/; mv $RPM_BUILD_DIR/%{name}-%{version}/lib/ $RPM_BUILD_DIR/%{name}-%{version}/usr; mv $RPM_BUILD_DIR/%{name}-%{version}/include/ $RPM_BUILD_DIR/%{name}-%{version}/usr; mv $RPM_BUILD_DIR/%{name}-%{version}/share/* $RPM_BUILD_DIR/%{name}-%{version}/usr/share. rm -Rf $RPM_BUILD_DIR/%{name}-%{version}/docs; rm -Rf $RPM_BUILD_DIR/%{name}-%{version}/share. if [ ${RPM_ARCH} = 'x86_64' ]; then; mv $RPM_BUILD_DIR/%{name}-%{version}/usr/lib $RPM_BUILD_DIR/%{name}-%{version}/usr/lib64; fi. %build; # Empty section. %install; rm -rf %{buildroot}; mkdir -p %{buildroot}. # in builddir; cp -a * %{buildroot}. %clean; rm -rf %{buildroot}. %files; %defattr(-,root,root,-); %{_bindir}/*; %{_includedir}/*; %{_libdir}/*; %{_datadir}/*. %changelog; * Sun Apr 13 2014 Anirudha Bose <ani07nov@gmail.com>; - Initial SPEC file of Cling for RPM packaging; '''",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:780,Performance,perform,performance,780,"'''; License: LGPLv2+ or NCSA; Group: Development/Languages/Other; SOURCE0 : %{name}-%{version}.tar.bz2; URL: http://cling.web.cern.ch/; Vendor: Developed by The ROOT Team; CERN and Fermilab; Packager: Anirudha Bose <ani07nov@gmail.com>. BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root. %description; Cling is a new and interactive C++11 standard compliant interpreter built; on the top of Clang and LLVM compiler infrastructure. Its advantages over; the standard interpreters are that it has command line prompt and uses; Just In Time (JIT) compiler for compilation. Many of the developers; (e.g. Mono in their project called CSharpRepl) of such kind of software; applications name them interactive compilers. One of Cling's main goals is to provide contemporary, high-performance; alternative of the current C++ interpreter in the ROOT project - CINT. Cling; serves as a core component of the ROOT system for storing and analyzing the; data of the Large Hadron Collider (LHC) experiments. The; backward-compatibility with CINT is major priority during the development. %prep; %setup; mkdir -p $RPM_BUILD_DIR/%{name}-%{version}/usr/share/doc; mv $RPM_BUILD_DIR/%{name}-%{version}/bin/ $RPM_BUILD_DIR/%{name}-%{version}/usr; mv $RPM_BUILD_DIR/%{name}-%{version}/docs/* $RPM_BUILD_DIR/%{name}-%{version}/usr/share/doc/; mv $RPM_BUILD_DIR/%{name}-%{version}/lib/ $RPM_BUILD_DIR/%{name}-%{version}/usr; mv $RPM_BUILD_DIR/%{name}-%{version}/include/ $RPM_BUILD_DIR/%{name}-%{version}/usr; mv $RPM_BUILD_DIR/%{name}-%{version}/share/* $RPM_BUILD_DIR/%{name}-%{version}/usr/share. rm -Rf $RPM_BUILD_DIR/%{name}-%{version}/docs; rm -Rf $RPM_BUILD_DIR/%{name}-%{version}/share. if [ ${RPM_ARCH} = 'x86_64' ]; then; mv $RPM_BUILD_DIR/%{name}-%{version}/usr/lib $RPM_BUILD_DIR/%{name}-%{version}/usr/lib64; fi. %build; # Empty section. %install; rm -rf %{buildroot}; mkdir -p %{buildroot}. # in builddir; cp -a * %{buildroot}. %clean; rm -rf %{buildroot}. %files; %defattr(-,root,root,-); %{_bindir}/*",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:25,Deployability,install,installed,25,"# Insert the files to be installed",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:326,Deployability,install,installation,326,"'''; SectionEnd. ; Function to detect Windows version and abort if Cling is unsupported in the current platform; Function DetectWinVer; Push $0; Push $1; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"" CurrentVersion; IfErrors is_error is_winnt; is_winnt:; StrCpy $1 $0 1; StrCmp $1 4 is_error ; Aborting installation for Windows versions older than Windows 2000; StrCmp $0 ""5.0"" is_error ; Removing Windows 2000 as supported Windows version; StrCmp $0 ""5.1"" is_winnt_XP; StrCmp $0 ""5.2"" is_winnt_2003; StrCmp $0 ""6.0"" is_winnt_vista; StrCmp $0 ""6.1"" is_winnt_7; StrCmp $0 ""6.2"" is_winnt_8; StrCmp $1 6 is_winnt_8 ; Checking for future versions of Windows 8; Goto is_error. is_winnt_XP:; is_winnt_2003:; is_winnt_vista:; is_winnt_7:; is_winnt_8:; Goto done; is_error:; StrCpy $1 $0; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"" ProductName; IfErrors 0 +4; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows\\CurrentVersion"" Version; IfErrors 0 +2; StrCpy $0 ""Unknown""; MessageBox MB_ICONSTOP|MB_OK ""This version of Cling cannot be installed on this system. Cling is supported only on Windows NT systems. Current system: $0 (version: $1)""; Abort; done:; Pop $1; Pop $0; FunctionEnd. ; Function to check any previously installed version of Cling in the system; Function CheckPrevVersion; Push $0; Push $1; Push $2; IfFileExists ""$INSTDIR\\bin\\cling.exe"" 0 otherver; MessageBox MB_OK|MB_ICONSTOP ""Another Cling installation (with the same version) has been detected. Please uninstall it first.""; Abort; otherver:; StrCpy $0 0; StrCpy $2 """"; loop:; EnumRegKey $1 ${PRODUCT_ROOT_KEY} ""${PRODUCT_KEY}"" $0; StrCmp $1 """" loopend; IntOp $0 $0 + 1; StrCmp $2 """" 0 +2; StrCpy $2 ""$1""; StrCpy $2 ""$2, $1""; Goto loop; loopend:; ReadRegStr $1 ${PRODUCT_ROOT_KEY} ""${PRODUCT_KEY}"" ""Version""; IfErrors finalcheck; StrCmp $2 """" 0 +2; StrCpy $2 ""$1""; StrCpy $2 ""$2, $1""; finalcheck:; StrCmp $2 """" done; MessageBox MB_YESNO|MB_ICONEXCLAMATION ""Another Cling installation (vers",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:1074,Deployability,install,installed,1074,"'''; SectionEnd. ; Function to detect Windows version and abort if Cling is unsupported in the current platform; Function DetectWinVer; Push $0; Push $1; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"" CurrentVersion; IfErrors is_error is_winnt; is_winnt:; StrCpy $1 $0 1; StrCmp $1 4 is_error ; Aborting installation for Windows versions older than Windows 2000; StrCmp $0 ""5.0"" is_error ; Removing Windows 2000 as supported Windows version; StrCmp $0 ""5.1"" is_winnt_XP; StrCmp $0 ""5.2"" is_winnt_2003; StrCmp $0 ""6.0"" is_winnt_vista; StrCmp $0 ""6.1"" is_winnt_7; StrCmp $0 ""6.2"" is_winnt_8; StrCmp $1 6 is_winnt_8 ; Checking for future versions of Windows 8; Goto is_error. is_winnt_XP:; is_winnt_2003:; is_winnt_vista:; is_winnt_7:; is_winnt_8:; Goto done; is_error:; StrCpy $1 $0; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"" ProductName; IfErrors 0 +4; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows\\CurrentVersion"" Version; IfErrors 0 +2; StrCpy $0 ""Unknown""; MessageBox MB_ICONSTOP|MB_OK ""This version of Cling cannot be installed on this system. Cling is supported only on Windows NT systems. Current system: $0 (version: $1)""; Abort; done:; Pop $1; Pop $0; FunctionEnd. ; Function to check any previously installed version of Cling in the system; Function CheckPrevVersion; Push $0; Push $1; Push $2; IfFileExists ""$INSTDIR\\bin\\cling.exe"" 0 otherver; MessageBox MB_OK|MB_ICONSTOP ""Another Cling installation (with the same version) has been detected. Please uninstall it first.""; Abort; otherver:; StrCpy $0 0; StrCpy $2 """"; loop:; EnumRegKey $1 ${PRODUCT_ROOT_KEY} ""${PRODUCT_KEY}"" $0; StrCmp $1 """" loopend; IntOp $0 $0 + 1; StrCmp $2 """" 0 +2; StrCpy $2 ""$1""; StrCpy $2 ""$2, $1""; Goto loop; loopend:; ReadRegStr $1 ${PRODUCT_ROOT_KEY} ""${PRODUCT_KEY}"" ""Version""; IfErrors finalcheck; StrCmp $2 """" 0 +2; StrCpy $2 ""$1""; StrCpy $2 ""$2, $1""; finalcheck:; StrCmp $2 """" done; MessageBox MB_YESNO|MB_ICONEXCLAMATION ""Another Cling installation (vers",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:1260,Deployability,install,installed,1260," is_winnt; is_winnt:; StrCpy $1 $0 1; StrCmp $1 4 is_error ; Aborting installation for Windows versions older than Windows 2000; StrCmp $0 ""5.0"" is_error ; Removing Windows 2000 as supported Windows version; StrCmp $0 ""5.1"" is_winnt_XP; StrCmp $0 ""5.2"" is_winnt_2003; StrCmp $0 ""6.0"" is_winnt_vista; StrCmp $0 ""6.1"" is_winnt_7; StrCmp $0 ""6.2"" is_winnt_8; StrCmp $1 6 is_winnt_8 ; Checking for future versions of Windows 8; Goto is_error. is_winnt_XP:; is_winnt_2003:; is_winnt_vista:; is_winnt_7:; is_winnt_8:; Goto done; is_error:; StrCpy $1 $0; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"" ProductName; IfErrors 0 +4; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows\\CurrentVersion"" Version; IfErrors 0 +2; StrCpy $0 ""Unknown""; MessageBox MB_ICONSTOP|MB_OK ""This version of Cling cannot be installed on this system. Cling is supported only on Windows NT systems. Current system: $0 (version: $1)""; Abort; done:; Pop $1; Pop $0; FunctionEnd. ; Function to check any previously installed version of Cling in the system; Function CheckPrevVersion; Push $0; Push $1; Push $2; IfFileExists ""$INSTDIR\\bin\\cling.exe"" 0 otherver; MessageBox MB_OK|MB_ICONSTOP ""Another Cling installation (with the same version) has been detected. Please uninstall it first.""; Abort; otherver:; StrCpy $0 0; StrCpy $2 """"; loop:; EnumRegKey $1 ${PRODUCT_ROOT_KEY} ""${PRODUCT_KEY}"" $0; StrCmp $1 """" loopend; IntOp $0 $0 + 1; StrCmp $2 """" 0 +2; StrCpy $2 ""$1""; StrCpy $2 ""$2, $1""; Goto loop; loopend:; ReadRegStr $1 ${PRODUCT_ROOT_KEY} ""${PRODUCT_KEY}"" ""Version""; IfErrors finalcheck; StrCmp $2 """" 0 +2; StrCpy $2 ""$1""; StrCpy $2 ""$2, $1""; finalcheck:; StrCmp $2 """" done; MessageBox MB_YESNO|MB_ICONEXCLAMATION ""Another Cling installation (version $2) has been detected. It is recommended to uninstall it if you intend to use the same installation directory. Do you want to proceed with the installation anyway?"" IDYES done IDNO 0; Abort; done:; ClearErrors; Pop $2; Pop $1; Pop $0; FunctionEnd; '''",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:1452,Deployability,install,installation,1452," is_winnt; is_winnt:; StrCpy $1 $0 1; StrCmp $1 4 is_error ; Aborting installation for Windows versions older than Windows 2000; StrCmp $0 ""5.0"" is_error ; Removing Windows 2000 as supported Windows version; StrCmp $0 ""5.1"" is_winnt_XP; StrCmp $0 ""5.2"" is_winnt_2003; StrCmp $0 ""6.0"" is_winnt_vista; StrCmp $0 ""6.1"" is_winnt_7; StrCmp $0 ""6.2"" is_winnt_8; StrCmp $1 6 is_winnt_8 ; Checking for future versions of Windows 8; Goto is_error. is_winnt_XP:; is_winnt_2003:; is_winnt_vista:; is_winnt_7:; is_winnt_8:; Goto done; is_error:; StrCpy $1 $0; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"" ProductName; IfErrors 0 +4; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows\\CurrentVersion"" Version; IfErrors 0 +2; StrCpy $0 ""Unknown""; MessageBox MB_ICONSTOP|MB_OK ""This version of Cling cannot be installed on this system. Cling is supported only on Windows NT systems. Current system: $0 (version: $1)""; Abort; done:; Pop $1; Pop $0; FunctionEnd. ; Function to check any previously installed version of Cling in the system; Function CheckPrevVersion; Push $0; Push $1; Push $2; IfFileExists ""$INSTDIR\\bin\\cling.exe"" 0 otherver; MessageBox MB_OK|MB_ICONSTOP ""Another Cling installation (with the same version) has been detected. Please uninstall it first.""; Abort; otherver:; StrCpy $0 0; StrCpy $2 """"; loop:; EnumRegKey $1 ${PRODUCT_ROOT_KEY} ""${PRODUCT_KEY}"" $0; StrCmp $1 """" loopend; IntOp $0 $0 + 1; StrCmp $2 """" 0 +2; StrCpy $2 ""$1""; StrCpy $2 ""$2, $1""; Goto loop; loopend:; ReadRegStr $1 ${PRODUCT_ROOT_KEY} ""${PRODUCT_KEY}"" ""Version""; IfErrors finalcheck; StrCmp $2 """" 0 +2; StrCpy $2 ""$1""; StrCpy $2 ""$2, $1""; finalcheck:; StrCmp $2 """" done; MessageBox MB_YESNO|MB_ICONEXCLAMATION ""Another Cling installation (version $2) has been detected. It is recommended to uninstall it if you intend to use the same installation directory. Do you want to proceed with the installation anyway?"" IDYES done IDNO 0; Abort; done:; ClearErrors; Pop $2; Pop $1; Pop $0; FunctionEnd; '''",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:1983,Deployability,install,installation,1983," is_winnt; is_winnt:; StrCpy $1 $0 1; StrCmp $1 4 is_error ; Aborting installation for Windows versions older than Windows 2000; StrCmp $0 ""5.0"" is_error ; Removing Windows 2000 as supported Windows version; StrCmp $0 ""5.1"" is_winnt_XP; StrCmp $0 ""5.2"" is_winnt_2003; StrCmp $0 ""6.0"" is_winnt_vista; StrCmp $0 ""6.1"" is_winnt_7; StrCmp $0 ""6.2"" is_winnt_8; StrCmp $1 6 is_winnt_8 ; Checking for future versions of Windows 8; Goto is_error. is_winnt_XP:; is_winnt_2003:; is_winnt_vista:; is_winnt_7:; is_winnt_8:; Goto done; is_error:; StrCpy $1 $0; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"" ProductName; IfErrors 0 +4; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows\\CurrentVersion"" Version; IfErrors 0 +2; StrCpy $0 ""Unknown""; MessageBox MB_ICONSTOP|MB_OK ""This version of Cling cannot be installed on this system. Cling is supported only on Windows NT systems. Current system: $0 (version: $1)""; Abort; done:; Pop $1; Pop $0; FunctionEnd. ; Function to check any previously installed version of Cling in the system; Function CheckPrevVersion; Push $0; Push $1; Push $2; IfFileExists ""$INSTDIR\\bin\\cling.exe"" 0 otherver; MessageBox MB_OK|MB_ICONSTOP ""Another Cling installation (with the same version) has been detected. Please uninstall it first.""; Abort; otherver:; StrCpy $0 0; StrCpy $2 """"; loop:; EnumRegKey $1 ${PRODUCT_ROOT_KEY} ""${PRODUCT_KEY}"" $0; StrCmp $1 """" loopend; IntOp $0 $0 + 1; StrCmp $2 """" 0 +2; StrCpy $2 ""$1""; StrCpy $2 ""$2, $1""; Goto loop; loopend:; ReadRegStr $1 ${PRODUCT_ROOT_KEY} ""${PRODUCT_KEY}"" ""Version""; IfErrors finalcheck; StrCmp $2 """" 0 +2; StrCpy $2 ""$1""; StrCpy $2 ""$2, $1""; finalcheck:; StrCmp $2 """" done; MessageBox MB_YESNO|MB_ICONEXCLAMATION ""Another Cling installation (version $2) has been detected. It is recommended to uninstall it if you intend to use the same installation directory. Do you want to proceed with the installation anyway?"" IDYES done IDNO 0; Abort; done:; ClearErrors; Pop $2; Pop $1; Pop $0; FunctionEnd; '''",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:2092,Deployability,install,installation,2092," is_winnt; is_winnt:; StrCpy $1 $0 1; StrCmp $1 4 is_error ; Aborting installation for Windows versions older than Windows 2000; StrCmp $0 ""5.0"" is_error ; Removing Windows 2000 as supported Windows version; StrCmp $0 ""5.1"" is_winnt_XP; StrCmp $0 ""5.2"" is_winnt_2003; StrCmp $0 ""6.0"" is_winnt_vista; StrCmp $0 ""6.1"" is_winnt_7; StrCmp $0 ""6.2"" is_winnt_8; StrCmp $1 6 is_winnt_8 ; Checking for future versions of Windows 8; Goto is_error. is_winnt_XP:; is_winnt_2003:; is_winnt_vista:; is_winnt_7:; is_winnt_8:; Goto done; is_error:; StrCpy $1 $0; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"" ProductName; IfErrors 0 +4; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows\\CurrentVersion"" Version; IfErrors 0 +2; StrCpy $0 ""Unknown""; MessageBox MB_ICONSTOP|MB_OK ""This version of Cling cannot be installed on this system. Cling is supported only on Windows NT systems. Current system: $0 (version: $1)""; Abort; done:; Pop $1; Pop $0; FunctionEnd. ; Function to check any previously installed version of Cling in the system; Function CheckPrevVersion; Push $0; Push $1; Push $2; IfFileExists ""$INSTDIR\\bin\\cling.exe"" 0 otherver; MessageBox MB_OK|MB_ICONSTOP ""Another Cling installation (with the same version) has been detected. Please uninstall it first.""; Abort; otherver:; StrCpy $0 0; StrCpy $2 """"; loop:; EnumRegKey $1 ${PRODUCT_ROOT_KEY} ""${PRODUCT_KEY}"" $0; StrCmp $1 """" loopend; IntOp $0 $0 + 1; StrCmp $2 """" 0 +2; StrCpy $2 ""$1""; StrCpy $2 ""$2, $1""; Goto loop; loopend:; ReadRegStr $1 ${PRODUCT_ROOT_KEY} ""${PRODUCT_KEY}"" ""Version""; IfErrors finalcheck; StrCmp $2 """" 0 +2; StrCpy $2 ""$1""; StrCpy $2 ""$2, $1""; finalcheck:; StrCmp $2 """" done; MessageBox MB_YESNO|MB_ICONEXCLAMATION ""Another Cling installation (version $2) has been detected. It is recommended to uninstall it if you intend to use the same installation directory. Do you want to proceed with the installation anyway?"" IDYES done IDNO 0; Abort; done:; ClearErrors; Pop $2; Pop $1; Pop $0; FunctionEnd; '''",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:2148,Deployability,install,installation,2148," is_winnt; is_winnt:; StrCpy $1 $0 1; StrCmp $1 4 is_error ; Aborting installation for Windows versions older than Windows 2000; StrCmp $0 ""5.0"" is_error ; Removing Windows 2000 as supported Windows version; StrCmp $0 ""5.1"" is_winnt_XP; StrCmp $0 ""5.2"" is_winnt_2003; StrCmp $0 ""6.0"" is_winnt_vista; StrCmp $0 ""6.1"" is_winnt_7; StrCmp $0 ""6.2"" is_winnt_8; StrCmp $1 6 is_winnt_8 ; Checking for future versions of Windows 8; Goto is_error. is_winnt_XP:; is_winnt_2003:; is_winnt_vista:; is_winnt_7:; is_winnt_8:; Goto done; is_error:; StrCpy $1 $0; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"" ProductName; IfErrors 0 +4; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows\\CurrentVersion"" Version; IfErrors 0 +2; StrCpy $0 ""Unknown""; MessageBox MB_ICONSTOP|MB_OK ""This version of Cling cannot be installed on this system. Cling is supported only on Windows NT systems. Current system: $0 (version: $1)""; Abort; done:; Pop $1; Pop $0; FunctionEnd. ; Function to check any previously installed version of Cling in the system; Function CheckPrevVersion; Push $0; Push $1; Push $2; IfFileExists ""$INSTDIR\\bin\\cling.exe"" 0 otherver; MessageBox MB_OK|MB_ICONSTOP ""Another Cling installation (with the same version) has been detected. Please uninstall it first.""; Abort; otherver:; StrCpy $0 0; StrCpy $2 """"; loop:; EnumRegKey $1 ${PRODUCT_ROOT_KEY} ""${PRODUCT_KEY}"" $0; StrCmp $1 """" loopend; IntOp $0 $0 + 1; StrCmp $2 """" 0 +2; StrCpy $2 ""$1""; StrCpy $2 ""$2, $1""; Goto loop; loopend:; ReadRegStr $1 ${PRODUCT_ROOT_KEY} ""${PRODUCT_KEY}"" ""Version""; IfErrors finalcheck; StrCmp $2 """" 0 +2; StrCpy $2 ""$1""; StrCpy $2 ""$2, $1""; finalcheck:; StrCmp $2 """" done; MessageBox MB_YESNO|MB_ICONEXCLAMATION ""Another Cling installation (version $2) has been detected. It is recommended to uninstall it if you intend to use the same installation directory. Do you want to proceed with the installation anyway?"" IDYES done IDNO 0; Abort; done:; ClearErrors; Pop $2; Pop $1; Pop $0; FunctionEnd; '''",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:31,Safety,detect,detect,31,"'''; SectionEnd. ; Function to detect Windows version and abort if Cling is unsupported in the current platform; Function DetectWinVer; Push $0; Push $1; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"" CurrentVersion; IfErrors is_error is_winnt; is_winnt:; StrCpy $1 $0 1; StrCmp $1 4 is_error ; Aborting installation for Windows versions older than Windows 2000; StrCmp $0 ""5.0"" is_error ; Removing Windows 2000 as supported Windows version; StrCmp $0 ""5.1"" is_winnt_XP; StrCmp $0 ""5.2"" is_winnt_2003; StrCmp $0 ""6.0"" is_winnt_vista; StrCmp $0 ""6.1"" is_winnt_7; StrCmp $0 ""6.2"" is_winnt_8; StrCmp $1 6 is_winnt_8 ; Checking for future versions of Windows 8; Goto is_error. is_winnt_XP:; is_winnt_2003:; is_winnt_vista:; is_winnt_7:; is_winnt_8:; Goto done; is_error:; StrCpy $1 $0; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"" ProductName; IfErrors 0 +4; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows\\CurrentVersion"" Version; IfErrors 0 +2; StrCpy $0 ""Unknown""; MessageBox MB_ICONSTOP|MB_OK ""This version of Cling cannot be installed on this system. Cling is supported only on Windows NT systems. Current system: $0 (version: $1)""; Abort; done:; Pop $1; Pop $0; FunctionEnd. ; Function to check any previously installed version of Cling in the system; Function CheckPrevVersion; Push $0; Push $1; Push $2; IfFileExists ""$INSTDIR\\bin\\cling.exe"" 0 otherver; MessageBox MB_OK|MB_ICONSTOP ""Another Cling installation (with the same version) has been detected. Please uninstall it first.""; Abort; otherver:; StrCpy $0 0; StrCpy $2 """"; loop:; EnumRegKey $1 ${PRODUCT_ROOT_KEY} ""${PRODUCT_KEY}"" $0; StrCmp $1 """" loopend; IntOp $0 $0 + 1; StrCmp $2 """" 0 +2; StrCpy $2 ""$1""; StrCpy $2 ""$2, $1""; Goto loop; loopend:; ReadRegStr $1 ${PRODUCT_ROOT_KEY} ""${PRODUCT_KEY}"" ""Version""; IfErrors finalcheck; StrCmp $2 """" 0 +2; StrCpy $2 ""$1""; StrCpy $2 ""$2, $1""; finalcheck:; StrCmp $2 """" done; MessageBox MB_YESNO|MB_ICONEXCLAMATION ""Another Cling installation (vers",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:58,Safety,abort,abort,58,"'''; SectionEnd. ; Function to detect Windows version and abort if Cling is unsupported in the current platform; Function DetectWinVer; Push $0; Push $1; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"" CurrentVersion; IfErrors is_error is_winnt; is_winnt:; StrCpy $1 $0 1; StrCmp $1 4 is_error ; Aborting installation for Windows versions older than Windows 2000; StrCmp $0 ""5.0"" is_error ; Removing Windows 2000 as supported Windows version; StrCmp $0 ""5.1"" is_winnt_XP; StrCmp $0 ""5.2"" is_winnt_2003; StrCmp $0 ""6.0"" is_winnt_vista; StrCmp $0 ""6.1"" is_winnt_7; StrCmp $0 ""6.2"" is_winnt_8; StrCmp $1 6 is_winnt_8 ; Checking for future versions of Windows 8; Goto is_error. is_winnt_XP:; is_winnt_2003:; is_winnt_vista:; is_winnt_7:; is_winnt_8:; Goto done; is_error:; StrCpy $1 $0; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"" ProductName; IfErrors 0 +4; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows\\CurrentVersion"" Version; IfErrors 0 +2; StrCpy $0 ""Unknown""; MessageBox MB_ICONSTOP|MB_OK ""This version of Cling cannot be installed on this system. Cling is supported only on Windows NT systems. Current system: $0 (version: $1)""; Abort; done:; Pop $1; Pop $0; FunctionEnd. ; Function to check any previously installed version of Cling in the system; Function CheckPrevVersion; Push $0; Push $1; Push $2; IfFileExists ""$INSTDIR\\bin\\cling.exe"" 0 otherver; MessageBox MB_OK|MB_ICONSTOP ""Another Cling installation (with the same version) has been detected. Please uninstall it first.""; Abort; otherver:; StrCpy $0 0; StrCpy $2 """"; loop:; EnumRegKey $1 ${PRODUCT_ROOT_KEY} ""${PRODUCT_KEY}"" $0; StrCmp $1 """" loopend; IntOp $0 $0 + 1; StrCmp $2 """" 0 +2; StrCpy $2 ""$1""; StrCpy $2 ""$2, $1""; Goto loop; loopend:; ReadRegStr $1 ${PRODUCT_ROOT_KEY} ""${PRODUCT_KEY}"" ""Version""; IfErrors finalcheck; StrCmp $2 """" 0 +2; StrCpy $2 ""$1""; StrCpy $2 ""$2, $1""; finalcheck:; StrCmp $2 """" done; MessageBox MB_YESNO|MB_ICONEXCLAMATION ""Another Cling installation (vers",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:1498,Safety,detect,detected,1498," is_winnt; is_winnt:; StrCpy $1 $0 1; StrCmp $1 4 is_error ; Aborting installation for Windows versions older than Windows 2000; StrCmp $0 ""5.0"" is_error ; Removing Windows 2000 as supported Windows version; StrCmp $0 ""5.1"" is_winnt_XP; StrCmp $0 ""5.2"" is_winnt_2003; StrCmp $0 ""6.0"" is_winnt_vista; StrCmp $0 ""6.1"" is_winnt_7; StrCmp $0 ""6.2"" is_winnt_8; StrCmp $1 6 is_winnt_8 ; Checking for future versions of Windows 8; Goto is_error. is_winnt_XP:; is_winnt_2003:; is_winnt_vista:; is_winnt_7:; is_winnt_8:; Goto done; is_error:; StrCpy $1 $0; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"" ProductName; IfErrors 0 +4; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows\\CurrentVersion"" Version; IfErrors 0 +2; StrCpy $0 ""Unknown""; MessageBox MB_ICONSTOP|MB_OK ""This version of Cling cannot be installed on this system. Cling is supported only on Windows NT systems. Current system: $0 (version: $1)""; Abort; done:; Pop $1; Pop $0; FunctionEnd. ; Function to check any previously installed version of Cling in the system; Function CheckPrevVersion; Push $0; Push $1; Push $2; IfFileExists ""$INSTDIR\\bin\\cling.exe"" 0 otherver; MessageBox MB_OK|MB_ICONSTOP ""Another Cling installation (with the same version) has been detected. Please uninstall it first.""; Abort; otherver:; StrCpy $0 0; StrCpy $2 """"; loop:; EnumRegKey $1 ${PRODUCT_ROOT_KEY} ""${PRODUCT_KEY}"" $0; StrCmp $1 """" loopend; IntOp $0 $0 + 1; StrCmp $2 """" 0 +2; StrCpy $2 ""$1""; StrCpy $2 ""$2, $1""; Goto loop; loopend:; ReadRegStr $1 ${PRODUCT_ROOT_KEY} ""${PRODUCT_KEY}"" ""Version""; IfErrors finalcheck; StrCmp $2 """" 0 +2; StrCpy $2 ""$1""; StrCpy $2 ""$2, $1""; finalcheck:; StrCmp $2 """" done; MessageBox MB_YESNO|MB_ICONEXCLAMATION ""Another Cling installation (version $2) has been detected. It is recommended to uninstall it if you intend to use the same installation directory. Do you want to proceed with the installation anyway?"" IDYES done IDNO 0; Abort; done:; ClearErrors; Pop $2; Pop $1; Pop $0; FunctionEnd; '''",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:2018,Safety,detect,detected,2018," is_winnt; is_winnt:; StrCpy $1 $0 1; StrCmp $1 4 is_error ; Aborting installation for Windows versions older than Windows 2000; StrCmp $0 ""5.0"" is_error ; Removing Windows 2000 as supported Windows version; StrCmp $0 ""5.1"" is_winnt_XP; StrCmp $0 ""5.2"" is_winnt_2003; StrCmp $0 ""6.0"" is_winnt_vista; StrCmp $0 ""6.1"" is_winnt_7; StrCmp $0 ""6.2"" is_winnt_8; StrCmp $1 6 is_winnt_8 ; Checking for future versions of Windows 8; Goto is_error. is_winnt_XP:; is_winnt_2003:; is_winnt_vista:; is_winnt_7:; is_winnt_8:; Goto done; is_error:; StrCpy $1 $0; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"" ProductName; IfErrors 0 +4; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows\\CurrentVersion"" Version; IfErrors 0 +2; StrCpy $0 ""Unknown""; MessageBox MB_ICONSTOP|MB_OK ""This version of Cling cannot be installed on this system. Cling is supported only on Windows NT systems. Current system: $0 (version: $1)""; Abort; done:; Pop $1; Pop $0; FunctionEnd. ; Function to check any previously installed version of Cling in the system; Function CheckPrevVersion; Push $0; Push $1; Push $2; IfFileExists ""$INSTDIR\\bin\\cling.exe"" 0 otherver; MessageBox MB_OK|MB_ICONSTOP ""Another Cling installation (with the same version) has been detected. Please uninstall it first.""; Abort; otherver:; StrCpy $0 0; StrCpy $2 """"; loop:; EnumRegKey $1 ${PRODUCT_ROOT_KEY} ""${PRODUCT_KEY}"" $0; StrCmp $1 """" loopend; IntOp $0 $0 + 1; StrCmp $2 """" 0 +2; StrCpy $2 ""$1""; StrCpy $2 ""$2, $1""; Goto loop; loopend:; ReadRegStr $1 ${PRODUCT_ROOT_KEY} ""${PRODUCT_KEY}"" ""Version""; IfErrors finalcheck; StrCmp $2 """" 0 +2; StrCpy $2 ""$1""; StrCpy $2 ""$2, $1""; finalcheck:; StrCmp $2 """" done; MessageBox MB_YESNO|MB_ICONEXCLAMATION ""Another Cling installation (version $2) has been detected. It is recommended to uninstall it if you intend to use the same installation directory. Do you want to proceed with the installation anyway?"" IDYES done IDNO 0; Abort; done:; ClearErrors; Pop $2; Pop $1; Pop $0; FunctionEnd; '''",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:92,Deployability,configurat,configuration,92,"###############################################################################; # argparse configuration #; ###############################################################################",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:92,Modifiability,config,configuration,92,"###############################################################################; # argparse configuration #; ###############################################################################",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:90,Modifiability,variab,variables,90,"###############################################################################; # Global variables #; ###############################################################################",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:16,Testability,log,log,16,"# Make sure git log is invoked without a pager.",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:29,Deployability,install,install,29,'''; CPT will now attempt to install the distro package automatically.; Do you want to continue? [yes/no]: ''',MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:21,Safety,detect,detected,21,"# Extensions will be detected anyway by set_ext()",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:16,Testability,test,test,16,"# TODO: Need to test this in other platforms",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:2,Testability,log,logic,2,"# logic is too confusing supporting both at the same time",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:29,Deployability,update,update,29,'''; CPT will now attempt to update/install the requisite packages automatically.; Do you want to continue? [yes/no]: ''',MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:36,Deployability,install,install,36,'''; CPT will now attempt to update/install the requisite packages automatically.; Do you want to continue? [yes/no]: ''',MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:13,Deployability,update,update,13,'''; Install/update the required packages by:; sudo apt-get update; sudo apt-get install {0} {1}; ''',MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:60,Deployability,update,update,60,'''; Install/update the required packages by:; sudo apt-get update; sudo apt-get install {0} {1}; ''',MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:81,Deployability,install,install,81,'''; Install/update the required packages by:; sudo apt-get update; sudo apt-get install {0} {1}; ''',MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:70,Deployability,install,installation,70,"# Check Windows registry for keys that prove an MS Visual Studio 14.0 installation",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:29,Deployability,update,update,29,'''; CPT will now attempt to update/install the requisite packages automatically.; Do you want to continue? [yes/no]: ''',MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:36,Deployability,install,install,36,'''; CPT will now attempt to update/install the requisite packages automatically.; Do you want to continue? [yes/no]: ''',MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:13,Deployability,update,update,13,'''; Install/update the required packages by:; sudo yum install git cmake gcc gcc-c++ rpm-build; ''',MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:56,Deployability,install,install,56,'''; Install/update the required packages by:; sudo yum install git cmake gcc gcc-c++ rpm-build; ''',MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:29,Deployability,update,update,29,'''; CPT will now attempt to update/install the requisite packages automatically. Make sure you have MacPorts installed.; Do you want to continue? [yes/no]: ''',MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:36,Deployability,install,install,36,'''; CPT will now attempt to update/install the requisite packages automatically. Make sure you have MacPorts installed.; Do you want to continue? [yes/no]: ''',MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:110,Deployability,install,installed,110,'''; CPT will now attempt to update/install the requisite packages automatically. Make sure you have MacPorts installed.; Do you want to continue? [yes/no]: ''',MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:13,Deployability,update,update,13,'''; Install/update the required packages by:; sudo port -v selfupdate; sudo port install {0} {1}; ''',MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:82,Deployability,install,install,82,'''; Install/update the required packages by:; sudo port -v selfupdate; sudo port install {0} {1}; ''',MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:49,Deployability,integrat,integrated,49,"# This is an internal option in CPT, meant to be integrated into Cling's build system.",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:49,Integrability,integrat,integrated,49,"# This is an internal option in CPT, meant to be integrated into Cling's build system.",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/cpt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/settings.py:15,Deployability,configurat,configuration,15,"# General view configuration",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/settings.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/settings.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/settings.py:15,Modifiability,config,configuration,15,"# General view configuration",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/settings.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/settings.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/settings.py:12,Deployability,configurat,configuration,12,"# Icon view configuration",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/settings.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/settings.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/settings.py:12,Modifiability,config,configuration,12,"# Icon view configuration",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/settings.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/settings.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/settings.py:12,Deployability,configurat,configuration,12,"# List view configuration",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/settings.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/settings.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/settings.py:12,Modifiability,config,configuration,12,"# List view configuration",MatchSource.CODE_COMMENT,interpreter/cling/tools/packaging/settings.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/settings.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/conf.py:56,Deployability,configurat,configuration,56,"# -*- coding: utf-8 -*-; #; # Clang documentation build configuration file, created by; # sphinx-quickstart on Sun Dec 9 20:01:55 2012.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/conf.py:254,Deployability,configurat,configuration,254,"# -*- coding: utf-8 -*-; #; # Clang documentation build configuration file, created by; # sphinx-quickstart on Sun Dec 9 20:01:55 2012.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/conf.py:328,Deployability,configurat,configuration,328,"# -*- coding: utf-8 -*-; #; # Clang documentation build configuration file, created by; # sphinx-quickstart on Sun Dec 9 20:01:55 2012.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/conf.py:56,Modifiability,config,configuration,56,"# -*- coding: utf-8 -*-; #; # Clang documentation build configuration file, created by; # sphinx-quickstart on Sun Dec 9 20:01:55 2012.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/conf.py:254,Modifiability,config,configuration,254,"# -*- coding: utf-8 -*-; #; # Clang documentation build configuration file, created by; # sphinx-quickstart on Sun Dec 9 20:01:55 2012.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/conf.py:328,Modifiability,config,configuration,328,"# -*- coding: utf-8 -*-; #; # Clang documentation build configuration file, created by; # sphinx-quickstart on Sun Dec 9 20:01:55 2012.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/conf.py:298,Deployability,configurat,configuration,298,"# If extensions (or modules to document with autodoc) are in another directory,; # add these directories to sys.path here. If the directory is relative to the; # documentation root, use os.path.abspath to make it absolute, like shown here.; # sys.path.insert(0, os.path.abspath('.')); # -- General configuration -----------------------------------------------------; # If your documentation needs a minimal Sphinx version, state it here.; # needs_sphinx = '1.0'; # Add any Sphinx extension module names here, as strings. They can be extensions; # coming with Sphinx (named 'sphinx.ext.*') or your custom ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/conf.py:298,Modifiability,config,configuration,298,"# If extensions (or modules to document with autodoc) are in another directory,; # add these directories to sys.path here. If the directory is relative to the; # documentation root, use os.path.abspath to make it absolute, like shown here.; # sys.path.insert(0, os.path.abspath('.')); # -- General configuration -----------------------------------------------------; # If your documentation needs a minimal Sphinx version, state it here.; # needs_sphinx = '1.0'; # Add any Sphinx extension module names here, as strings. They can be extensions; # coming with Sphinx (named 'sphinx.ext.*') or your custom ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/conf.py:112,Availability,avail,available,112,"# Theme options are theme-specific and customize the look and feel of a theme; # further. For a list of options available for each theme, see the; # documentation.; # html_theme_options = {}; # Add any paths that contain custom themes here, relative to this directory.; # html_theme_path = []; # The name for this set of Sphinx documents. If None, it defaults to; # ""<project> v<release> documentation"".; # html_title = None; # A shorter title for the navigation bar. Default is the same as html_title.; # html_short_title = None; # The name of an image file (relative to this directory) to place at the top; # of the sidebar.; # html_logo = None; # The name of an image file (within the static path) to use as favicon of the; # docs. This file should be a Windows icon file (.ico) being 16x16 or 32x32; # pixels large.; # html_favicon = None; # Add any paths that contain custom static files (such as style sheets) here,; # relative to this directory. They are copied after the builtin static files,; # so a file named ""default.css"" will overwrite the builtin ""default.css"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/conf.py:379,Deployability,release,release,379,"# Theme options are theme-specific and customize the look and feel of a theme; # further. For a list of options available for each theme, see the; # documentation.; # html_theme_options = {}; # Add any paths that contain custom themes here, relative to this directory.; # html_theme_path = []; # The name for this set of Sphinx documents. If None, it defaults to; # ""<project> v<release> documentation"".; # html_title = None; # A shorter title for the navigation bar. Default is the same as html_title.; # html_short_title = None; # The name of an image file (relative to this directory) to place at the top; # of the sidebar.; # html_logo = None; # The name of an image file (within the static path) to use as favicon of the; # docs. This file should be a Windows icon file (.ico) being 16x16 or 32x32; # pixels large.; # html_favicon = None; # Add any paths that contain custom static files (such as style sheets) here,; # relative to this directory. They are copied after the builtin static files,; # so a file named ""default.css"" will overwrite the builtin ""default.css"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/conf.py:21,Deployability,update,updated,21,"# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,; # using the given strftime format.; # html_last_updated_fmt = '%b %d, %Y'; # If true, SmartyPants will be used to convert quotes and dashes to; # typographically correct entities.; # html_use_smartypants = True; # Custom sidebar templates, maps document names to template names.; # html_sidebars = {}; # Additional templates that should be rendered to pages, maps page names to; # template names.; # html_additional_pages = {}; # If false, no module index is generated.; # html_domain_indices = True; # If false, no index is generated.; # html_use_index = True; # If true, the index is split into individual pages for each letter.; # html_split_index = False; # If true, links to the reST sources are added to the pages.; # html_show_sourcelink = True; # If true, ""Created using Sphinx"" is shown in the HTML footer. Default is True.; # html_show_sphinx = True; # If true, ""(C) Copyright ..."" is shown in the HTML footer. Default is True.; # html_show_copyright = True; # If true, an OpenSearch description file will be output, and all pages will; # contain a <link> tag referring to it. The value of this option must be the; # base URL from which the finished HTML is served.; # html_use_opensearch = ''; # This is the file name suffix for HTML files (e.g. "".xhtml"").; # html_file_suffix = None; # Output file base name for HTML help builder.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/conf.py:81,Usability,guid,guide,81,# Automatically derive the list of man pages from the contents of the command; # guide subdirectory. This was copied from llvm/docs/conf.py.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py:72,Deployability,configurat,configuration,72,"# -*- coding: utf-8 -*-; #; # Clang Static Analyzer documentation build configuration file, created by; # sphinx-quickstart on Wed Jan 2 15:54:28 2013.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/analyzer/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py:270,Deployability,configurat,configuration,270,"# -*- coding: utf-8 -*-; #; # Clang Static Analyzer documentation build configuration file, created by; # sphinx-quickstart on Wed Jan 2 15:54:28 2013.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/analyzer/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py:344,Deployability,configurat,configuration,344,"# -*- coding: utf-8 -*-; #; # Clang Static Analyzer documentation build configuration file, created by; # sphinx-quickstart on Wed Jan 2 15:54:28 2013.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/analyzer/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py:72,Modifiability,config,configuration,72,"# -*- coding: utf-8 -*-; #; # Clang Static Analyzer documentation build configuration file, created by; # sphinx-quickstart on Wed Jan 2 15:54:28 2013.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/analyzer/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py:270,Modifiability,config,configuration,270,"# -*- coding: utf-8 -*-; #; # Clang Static Analyzer documentation build configuration file, created by; # sphinx-quickstart on Wed Jan 2 15:54:28 2013.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/analyzer/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py:344,Modifiability,config,configuration,344,"# -*- coding: utf-8 -*-; #; # Clang Static Analyzer documentation build configuration file, created by; # sphinx-quickstart on Wed Jan 2 15:54:28 2013.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/analyzer/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py:298,Deployability,configurat,configuration,298,"# If extensions (or modules to document with autodoc) are in another directory,; # add these directories to sys.path here. If the directory is relative to the; # documentation root, use os.path.abspath to make it absolute, like shown here.; # sys.path.insert(0, os.path.abspath('.')); # -- General configuration -----------------------------------------------------; # If your documentation needs a minimal Sphinx version, state it here.; # needs_sphinx = '1.0'; # Add any Sphinx extension module names here, as strings. They can be extensions; # coming with Sphinx (named 'sphinx.ext.*') or your custom ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/analyzer/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py:298,Modifiability,config,configuration,298,"# If extensions (or modules to document with autodoc) are in another directory,; # add these directories to sys.path here. If the directory is relative to the; # documentation root, use os.path.abspath to make it absolute, like shown here.; # sys.path.insert(0, os.path.abspath('.')); # -- General configuration -----------------------------------------------------; # If your documentation needs a minimal Sphinx version, state it here.; # needs_sphinx = '1.0'; # Add any Sphinx extension module names here, as strings. They can be extensions; # coming with Sphinx (named 'sphinx.ext.*') or your custom ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/analyzer/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py:97,Deployability,release,release,97,"# The version info for the project you're documenting, acts as replacement for; # |version| and |release|, also used in various other places throughout the; # built documents.; #; # The short version.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/analyzer/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py:112,Availability,avail,available,112,"# Theme options are theme-specific and customize the look and feel of a theme; # further. For a list of options available for each theme, see the; # documentation.; # html_theme_options = {}; # Add any paths that contain custom themes here, relative to this directory.; # html_theme_path = []; # The name for this set of Sphinx documents. If None, it defaults to; # ""<project> v<release> documentation"".; # html_title = None; # A shorter title for the navigation bar. Default is the same as html_title.; # html_short_title = None; # The name of an image file (relative to this directory) to place at the top; # of the sidebar.; # html_logo = None; # The name of an image file (within the static path) to use as favicon of the; # docs. This file should be a Windows icon file (.ico) being 16x16 or 32x32; # pixels large.; # html_favicon = None; # Add any paths that contain custom static files (such as style sheets) here,; # relative to this directory. They are copied after the builtin static files,; # so a file named ""default.css"" will overwrite the builtin ""default.css"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/analyzer/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py:379,Deployability,release,release,379,"# Theme options are theme-specific and customize the look and feel of a theme; # further. For a list of options available for each theme, see the; # documentation.; # html_theme_options = {}; # Add any paths that contain custom themes here, relative to this directory.; # html_theme_path = []; # The name for this set of Sphinx documents. If None, it defaults to; # ""<project> v<release> documentation"".; # html_title = None; # A shorter title for the navigation bar. Default is the same as html_title.; # html_short_title = None; # The name of an image file (relative to this directory) to place at the top; # of the sidebar.; # html_logo = None; # The name of an image file (within the static path) to use as favicon of the; # docs. This file should be a Windows icon file (.ico) being 16x16 or 32x32; # pixels large.; # html_favicon = None; # Add any paths that contain custom static files (such as style sheets) here,; # relative to this directory. They are copied after the builtin static files,; # so a file named ""default.css"" will overwrite the builtin ""default.css"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/analyzer/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py:21,Deployability,update,updated,21,"# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,; # using the given strftime format.; # html_last_updated_fmt = '%b %d, %Y'; # If true, SmartyPants will be used to convert quotes and dashes to; # typographically correct entities.; # html_use_smartypants = True; # Custom sidebar templates, maps document names to template names.; # html_sidebars = {}; # Additional templates that should be rendered to pages, maps page names to; # template names.; # html_additional_pages = {}; # If false, no module index is generated.; # html_domain_indices = True; # If false, no index is generated.; # html_use_index = True; # If true, the index is split into individual pages for each letter.; # html_split_index = False; # If true, links to the reST sources are added to the pages.; # html_show_sourcelink = True; # If true, ""Created using Sphinx"" is shown in the HTML footer. Default is True.; # html_show_sphinx = True; # If true, ""(C) Copyright ..."" is shown in the HTML footer. Default is True.; # html_show_copyright = True; # If true, an OpenSearch description file will be output, and all pages will; # contain a <link> tag referring to it. The value of this option must be the; # base URL from which the finished HTML is served.; # html_use_opensearch = ''; # This is the file name suffix for HTML files (e.g. "".xhtml"").; # html_file_suffix = None; # Output file base name for HTML help builder.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/analyzer/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py:265,Deployability,configurat,configuration,265,"# Documents to append as an appendix to all manuals.; # texinfo_appendices = []; # If false, no module index is generated.; # texinfo_domain_indices = True; # How to display URL addresses: 'footnote', 'no', or 'inline'.; # texinfo_show_urls = 'footnote'; # Example configuration for intersphinx: refer to the Python standard library.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/analyzer/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py:265,Modifiability,config,configuration,265,"# Documents to append as an appendix to all manuals.; # texinfo_appendices = []; # If false, no module index is generated.; # texinfo_domain_indices = True; # How to display URL addresses: 'footnote', 'no', or 'inline'.; # texinfo_show_urls = 'footnote'; # Example configuration for intersphinx: refer to the Python standard library.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/analyzer/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/dump_ast_matchers.py:60,Deployability,update,update,60,#!/usr/bin/env python3; # A tool to parse ASTMatchers.h and update the documentation in; # ../LibASTMatchersReference.html automatically. Run from the; # directory in which this file is located to update the docs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/tools/dump_ast_matchers.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/dump_ast_matchers.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/dump_ast_matchers.py:197,Deployability,update,update,197,#!/usr/bin/env python3; # A tool to parse ASTMatchers.h and update the documentation in; # ../LibASTMatchersReference.html automatically. Run from the; # directory in which this file is located to update the docs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/tools/dump_ast_matchers.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/dump_ast_matchers.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/dump_ast_matchers.py:54,Deployability,toggle,toggle,54,"""""""; <tr><td>%(result)s</td><td class=""name"" onclick=""toggle('%(id)s')""><a name=""%(id)sAnchor"">%(name)s</a></td><td>%(args)s</td></tr>; <tr><td colspan=""4"" class=""doc"" id=""%(id)s""><pre>%(comment)s</pre></td></tr>; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/tools/dump_ast_matchers.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/dump_ast_matchers.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/dump_ast_matchers.py:184,Testability,assert,asserts,184,"""""""Parse the matcher out of the given declaration and comment. If 'allowed_types' is set, it contains a list of node types the matcher; can match on, as extracted from the static type asserts in the matcher; definition.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/tools/dump_ast_matchers.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/dump_ast_matchers.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/dump_ast_matchers.py:222,Testability,assert,asserts,222,"# Parse the ast matchers.; # We alternate between two modes:; # body = True: We parse the definition of a matcher. We need; # to parse the full definition before adding a matcher, as the; # definition might contain static asserts that specify the result; # type.; # body = False: We parse the comments and declaration of the matcher.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/tools/dump_ast_matchers.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/dump_ast_matchers.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/dump_format_help.py:82,Deployability,update,update,82,#!/usr/bin/env python3; # A tool to parse the output of `clang-format --help` and update the; # documentation in ../ClangFormat.rst automatically.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/tools/dump_format_help.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/dump_format_help.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/dump_format_style.py:83,Deployability,update,update,83,#!/usr/bin/env python3; # A tool to parse the FormatStyle struct from Format.h and update the; # documentation in ../ClangFormatStyleOptions.rst automatically.; # Run from the directory in which this file is located to update the docs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/tools/dump_format_style.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/dump_format_style.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/dump_format_style.py:219,Deployability,update,update,219,#!/usr/bin/env python3; # A tool to parse the FormatStyle struct from Format.h and update the; # documentation in ../ClangFormatStyleOptions.rst automatically.; # Run from the directory in which this file is located to update the docs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/tools/dump_format_style.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/dump_format_style.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/generate_formatted_state.py:28,Security,hash,hash,28,"""""""Get the get SHA in short hash form.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/docs/tools/generate_formatted_state.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/generate_formatted_state.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format-diff.py:150,Deployability,patch,patch,150,"""""""; This script reads input from a unified diff and reformats all the changed; lines. This is useful to reformat all the lines touched by a specific patch.; Example usage for git/svn users:. git diff -U0 --no-color --relative HEAD^ | {clang_format_diff} -p1 -i; svn diff --diff-cmd=diff -x-U0 | {clang_format_diff} -i. It should be noted that the filename contained in the diff is used unmodified; to determine the source file to update. Users calling this script directly; should be careful to ensure that the path in the diff is correct relative to the; current working directory.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-format/clang-format-diff.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format-diff.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format-diff.py:431,Deployability,update,update,431,"""""""; This script reads input from a unified diff and reformats all the changed; lines. This is useful to reformat all the lines touched by a specific patch.; Example usage for git/svn users:. git diff -U0 --no-color --relative HEAD^ | {clang_format_diff} -p1 -i; svn diff --diff-cmd=diff -x-U0 | {clang_format_diff} -i. It should be noted that the filename contained in the diff is used unmodified; to determine the source file to update. Users calling this script directly; should be careful to ensure that the path in the diff is correct relative to the; current working directory.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-format/clang-format-diff.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format-diff.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format-sublime.py:46,Deployability,integrat,integration,46,"# This file is a minimal clang-format sublime-integration. To install:; # - Change 'binary' if clang-format is not on the path (see below).; # - Put this file into your sublime Packages directory, e.g. on Linux:; # ~/.config/sublime-text-2/Packages/User/clang-format-sublime.py; # - Add a key binding:; # { ""keys"": [""ctrl+shift+c""], ""command"": ""clang_format"" },; #; # With this integration you can press the bound key and clang-format will; # format the current lines and selections for all cursor positions. The lines; # or regions are extended to the next bigger syntactic entities.; #; # It operates on the current, potentially unsaved buffer and does not create; # or save any files. To revert a formatting, just undo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-format/clang-format-sublime.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format-sublime.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format-sublime.py:62,Deployability,install,install,62,"# This file is a minimal clang-format sublime-integration. To install:; # - Change 'binary' if clang-format is not on the path (see below).; # - Put this file into your sublime Packages directory, e.g. on Linux:; # ~/.config/sublime-text-2/Packages/User/clang-format-sublime.py; # - Add a key binding:; # { ""keys"": [""ctrl+shift+c""], ""command"": ""clang_format"" },; #; # With this integration you can press the bound key and clang-format will; # format the current lines and selections for all cursor positions. The lines; # or regions are extended to the next bigger syntactic entities.; #; # It operates on the current, potentially unsaved buffer and does not create; # or save any files. To revert a formatting, just undo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-format/clang-format-sublime.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format-sublime.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format-sublime.py:378,Deployability,integrat,integration,378,"# This file is a minimal clang-format sublime-integration. To install:; # - Change 'binary' if clang-format is not on the path (see below).; # - Put this file into your sublime Packages directory, e.g. on Linux:; # ~/.config/sublime-text-2/Packages/User/clang-format-sublime.py; # - Add a key binding:; # { ""keys"": [""ctrl+shift+c""], ""command"": ""clang_format"" },; #; # With this integration you can press the bound key and clang-format will; # format the current lines and selections for all cursor positions. The lines; # or regions are extended to the next bigger syntactic entities.; #; # It operates on the current, potentially unsaved buffer and does not create; # or save any files. To revert a formatting, just undo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-format/clang-format-sublime.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format-sublime.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format-sublime.py:46,Integrability,integrat,integration,46,"# This file is a minimal clang-format sublime-integration. To install:; # - Change 'binary' if clang-format is not on the path (see below).; # - Put this file into your sublime Packages directory, e.g. on Linux:; # ~/.config/sublime-text-2/Packages/User/clang-format-sublime.py; # - Add a key binding:; # { ""keys"": [""ctrl+shift+c""], ""command"": ""clang_format"" },; #; # With this integration you can press the bound key and clang-format will; # format the current lines and selections for all cursor positions. The lines; # or regions are extended to the next bigger syntactic entities.; #; # It operates on the current, potentially unsaved buffer and does not create; # or save any files. To revert a formatting, just undo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-format/clang-format-sublime.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format-sublime.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format-sublime.py:378,Integrability,integrat,integration,378,"# This file is a minimal clang-format sublime-integration. To install:; # - Change 'binary' if clang-format is not on the path (see below).; # - Put this file into your sublime Packages directory, e.g. on Linux:; # ~/.config/sublime-text-2/Packages/User/clang-format-sublime.py; # - Add a key binding:; # { ""keys"": [""ctrl+shift+c""], ""command"": ""clang_format"" },; #; # With this integration you can press the bound key and clang-format will; # format the current lines and selections for all cursor positions. The lines; # or regions are extended to the next bigger syntactic entities.; #; # It operates on the current, potentially unsaved buffer and does not create; # or save any files. To revert a formatting, just undo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-format/clang-format-sublime.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format-sublime.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format-sublime.py:218,Modifiability,config,config,218,"# This file is a minimal clang-format sublime-integration. To install:; # - Change 'binary' if clang-format is not on the path (see below).; # - Put this file into your sublime Packages directory, e.g. on Linux:; # ~/.config/sublime-text-2/Packages/User/clang-format-sublime.py; # - Add a key binding:; # { ""keys"": [""ctrl+shift+c""], ""command"": ""clang_format"" },; #; # With this integration you can press the bound key and clang-format will; # format the current lines and selections for all cursor positions. The lines; # or regions are extended to the next bigger syntactic entities.; #; # It operates on the current, potentially unsaved buffer and does not create; # or save any files. To revert a formatting, just undo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-format/clang-format-sublime.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format-sublime.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format-sublime.py:537,Modifiability,extend,extended,537,"# This file is a minimal clang-format sublime-integration. To install:; # - Change 'binary' if clang-format is not on the path (see below).; # - Put this file into your sublime Packages directory, e.g. on Linux:; # ~/.config/sublime-text-2/Packages/User/clang-format-sublime.py; # - Add a key binding:; # { ""keys"": [""ctrl+shift+c""], ""command"": ""clang_format"" },; #; # With this integration you can press the bound key and clang-format will; # format the current lines and selections for all cursor positions. The lines; # or regions are extended to the next bigger syntactic entities.; #; # It operates on the current, potentially unsaved buffer and does not create; # or save any files. To revert a formatting, just undo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-format/clang-format-sublime.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format-sublime.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format-sublime.py:717,Usability,undo,undo,717,"# This file is a minimal clang-format sublime-integration. To install:; # - Change 'binary' if clang-format is not on the path (see below).; # - Put this file into your sublime Packages directory, e.g. on Linux:; # ~/.config/sublime-text-2/Packages/User/clang-format-sublime.py; # - Add a key binding:; # { ""keys"": [""ctrl+shift+c""], ""command"": ""clang_format"" },; #; # With this integration you can press the bound key and clang-format will; # format the current lines and selections for all cursor positions. The lines; # or regions are extended to the next bigger syntactic entities.; #; # It operates on the current, potentially unsaved buffer and does not create; # or save any files. To revert a formatting, just undo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-format/clang-format-sublime.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format-sublime.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format.py:42,Deployability,integrat,integration,42,"# This file is a minimal clang-format vim-integration. To install:; # - Change 'binary' if clang-format is not on the path (see below).; # - Add to your .vimrc:; #; # if has('python'); # map <C-I> :pyf <path-to-this-file>/clang-format.py<cr>; # imap <C-I> <c-o>:pyf <path-to-this-file>/clang-format.py<cr>; # elseif has('python3'); # map <C-I> :py3f <path-to-this-file>/clang-format.py<cr>; # imap <C-I> <c-o>:py3f <path-to-this-file>/clang-format.py<cr>; # endif; #; # The if-elseif-endif conditional should pick either the python3 or python2; # integration depending on your vim setup.; #; # The first mapping enables clang-format for NORMAL and VISUAL mode, the second; # mapping adds support for INSERT mode. Change ""C-I"" to another binding if you; # need clang-format on a different key (C-I stands for Ctrl+i).; #; # With this integration you can press the bound key and clang-format will; # format the current line in NORMAL and INSERT mode or the selected region in; # VISUAL mode. The line or region is extended to the next bigger syntactic; # entity.; #; # You can also pass in the variable ""l:lines"" to choose the range for; # formatting. This variable can either contain ""<start line>:<end line>"" or; # ""all"" to format the full file. So, to format the full file, write a function; # like:; # :function FormatFile(); # : let l:lines=""all""; # : if has('python'); # : pyf <path-to-this-file>/clang-format.py; # : elseif has('python3'); # : py3f <path-to-this-file>/clang-format.py; # : endif; # :endfunction; #; # It operates on the current, potentially unsaved buffer and does not create; # or save any files. To revert a formatting, just undo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-format/clang-format.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format.py:58,Deployability,install,install,58,"# This file is a minimal clang-format vim-integration. To install:; # - Change 'binary' if clang-format is not on the path (see below).; # - Add to your .vimrc:; #; # if has('python'); # map <C-I> :pyf <path-to-this-file>/clang-format.py<cr>; # imap <C-I> <c-o>:pyf <path-to-this-file>/clang-format.py<cr>; # elseif has('python3'); # map <C-I> :py3f <path-to-this-file>/clang-format.py<cr>; # imap <C-I> <c-o>:py3f <path-to-this-file>/clang-format.py<cr>; # endif; #; # The if-elseif-endif conditional should pick either the python3 or python2; # integration depending on your vim setup.; #; # The first mapping enables clang-format for NORMAL and VISUAL mode, the second; # mapping adds support for INSERT mode. Change ""C-I"" to another binding if you; # need clang-format on a different key (C-I stands for Ctrl+i).; #; # With this integration you can press the bound key and clang-format will; # format the current line in NORMAL and INSERT mode or the selected region in; # VISUAL mode. The line or region is extended to the next bigger syntactic; # entity.; #; # You can also pass in the variable ""l:lines"" to choose the range for; # formatting. This variable can either contain ""<start line>:<end line>"" or; # ""all"" to format the full file. So, to format the full file, write a function; # like:; # :function FormatFile(); # : let l:lines=""all""; # : if has('python'); # : pyf <path-to-this-file>/clang-format.py; # : elseif has('python3'); # : py3f <path-to-this-file>/clang-format.py; # : endif; # :endfunction; #; # It operates on the current, potentially unsaved buffer and does not create; # or save any files. To revert a formatting, just undo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-format/clang-format.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format.py:547,Deployability,integrat,integration,547,"# This file is a minimal clang-format vim-integration. To install:; # - Change 'binary' if clang-format is not on the path (see below).; # - Add to your .vimrc:; #; # if has('python'); # map <C-I> :pyf <path-to-this-file>/clang-format.py<cr>; # imap <C-I> <c-o>:pyf <path-to-this-file>/clang-format.py<cr>; # elseif has('python3'); # map <C-I> :py3f <path-to-this-file>/clang-format.py<cr>; # imap <C-I> <c-o>:py3f <path-to-this-file>/clang-format.py<cr>; # endif; #; # The if-elseif-endif conditional should pick either the python3 or python2; # integration depending on your vim setup.; #; # The first mapping enables clang-format for NORMAL and VISUAL mode, the second; # mapping adds support for INSERT mode. Change ""C-I"" to another binding if you; # need clang-format on a different key (C-I stands for Ctrl+i).; #; # With this integration you can press the bound key and clang-format will; # format the current line in NORMAL and INSERT mode or the selected region in; # VISUAL mode. The line or region is extended to the next bigger syntactic; # entity.; #; # You can also pass in the variable ""l:lines"" to choose the range for; # formatting. This variable can either contain ""<start line>:<end line>"" or; # ""all"" to format the full file. So, to format the full file, write a function; # like:; # :function FormatFile(); # : let l:lines=""all""; # : if has('python'); # : pyf <path-to-this-file>/clang-format.py; # : elseif has('python3'); # : py3f <path-to-this-file>/clang-format.py; # : endif; # :endfunction; #; # It operates on the current, potentially unsaved buffer and does not create; # or save any files. To revert a formatting, just undo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-format/clang-format.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format.py:833,Deployability,integrat,integration,833,"# This file is a minimal clang-format vim-integration. To install:; # - Change 'binary' if clang-format is not on the path (see below).; # - Add to your .vimrc:; #; # if has('python'); # map <C-I> :pyf <path-to-this-file>/clang-format.py<cr>; # imap <C-I> <c-o>:pyf <path-to-this-file>/clang-format.py<cr>; # elseif has('python3'); # map <C-I> :py3f <path-to-this-file>/clang-format.py<cr>; # imap <C-I> <c-o>:py3f <path-to-this-file>/clang-format.py<cr>; # endif; #; # The if-elseif-endif conditional should pick either the python3 or python2; # integration depending on your vim setup.; #; # The first mapping enables clang-format for NORMAL and VISUAL mode, the second; # mapping adds support for INSERT mode. Change ""C-I"" to another binding if you; # need clang-format on a different key (C-I stands for Ctrl+i).; #; # With this integration you can press the bound key and clang-format will; # format the current line in NORMAL and INSERT mode or the selected region in; # VISUAL mode. The line or region is extended to the next bigger syntactic; # entity.; #; # You can also pass in the variable ""l:lines"" to choose the range for; # formatting. This variable can either contain ""<start line>:<end line>"" or; # ""all"" to format the full file. So, to format the full file, write a function; # like:; # :function FormatFile(); # : let l:lines=""all""; # : if has('python'); # : pyf <path-to-this-file>/clang-format.py; # : elseif has('python3'); # : py3f <path-to-this-file>/clang-format.py; # : endif; # :endfunction; #; # It operates on the current, potentially unsaved buffer and does not create; # or save any files. To revert a formatting, just undo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-format/clang-format.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format.py:42,Integrability,integrat,integration,42,"# This file is a minimal clang-format vim-integration. To install:; # - Change 'binary' if clang-format is not on the path (see below).; # - Add to your .vimrc:; #; # if has('python'); # map <C-I> :pyf <path-to-this-file>/clang-format.py<cr>; # imap <C-I> <c-o>:pyf <path-to-this-file>/clang-format.py<cr>; # elseif has('python3'); # map <C-I> :py3f <path-to-this-file>/clang-format.py<cr>; # imap <C-I> <c-o>:py3f <path-to-this-file>/clang-format.py<cr>; # endif; #; # The if-elseif-endif conditional should pick either the python3 or python2; # integration depending on your vim setup.; #; # The first mapping enables clang-format for NORMAL and VISUAL mode, the second; # mapping adds support for INSERT mode. Change ""C-I"" to another binding if you; # need clang-format on a different key (C-I stands for Ctrl+i).; #; # With this integration you can press the bound key and clang-format will; # format the current line in NORMAL and INSERT mode or the selected region in; # VISUAL mode. The line or region is extended to the next bigger syntactic; # entity.; #; # You can also pass in the variable ""l:lines"" to choose the range for; # formatting. This variable can either contain ""<start line>:<end line>"" or; # ""all"" to format the full file. So, to format the full file, write a function; # like:; # :function FormatFile(); # : let l:lines=""all""; # : if has('python'); # : pyf <path-to-this-file>/clang-format.py; # : elseif has('python3'); # : py3f <path-to-this-file>/clang-format.py; # : endif; # :endfunction; #; # It operates on the current, potentially unsaved buffer and does not create; # or save any files. To revert a formatting, just undo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-format/clang-format.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format.py:547,Integrability,integrat,integration,547,"# This file is a minimal clang-format vim-integration. To install:; # - Change 'binary' if clang-format is not on the path (see below).; # - Add to your .vimrc:; #; # if has('python'); # map <C-I> :pyf <path-to-this-file>/clang-format.py<cr>; # imap <C-I> <c-o>:pyf <path-to-this-file>/clang-format.py<cr>; # elseif has('python3'); # map <C-I> :py3f <path-to-this-file>/clang-format.py<cr>; # imap <C-I> <c-o>:py3f <path-to-this-file>/clang-format.py<cr>; # endif; #; # The if-elseif-endif conditional should pick either the python3 or python2; # integration depending on your vim setup.; #; # The first mapping enables clang-format for NORMAL and VISUAL mode, the second; # mapping adds support for INSERT mode. Change ""C-I"" to another binding if you; # need clang-format on a different key (C-I stands for Ctrl+i).; #; # With this integration you can press the bound key and clang-format will; # format the current line in NORMAL and INSERT mode or the selected region in; # VISUAL mode. The line or region is extended to the next bigger syntactic; # entity.; #; # You can also pass in the variable ""l:lines"" to choose the range for; # formatting. This variable can either contain ""<start line>:<end line>"" or; # ""all"" to format the full file. So, to format the full file, write a function; # like:; # :function FormatFile(); # : let l:lines=""all""; # : if has('python'); # : pyf <path-to-this-file>/clang-format.py; # : elseif has('python3'); # : py3f <path-to-this-file>/clang-format.py; # : endif; # :endfunction; #; # It operates on the current, potentially unsaved buffer and does not create; # or save any files. To revert a formatting, just undo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-format/clang-format.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format.py:559,Integrability,depend,depending,559,"# This file is a minimal clang-format vim-integration. To install:; # - Change 'binary' if clang-format is not on the path (see below).; # - Add to your .vimrc:; #; # if has('python'); # map <C-I> :pyf <path-to-this-file>/clang-format.py<cr>; # imap <C-I> <c-o>:pyf <path-to-this-file>/clang-format.py<cr>; # elseif has('python3'); # map <C-I> :py3f <path-to-this-file>/clang-format.py<cr>; # imap <C-I> <c-o>:py3f <path-to-this-file>/clang-format.py<cr>; # endif; #; # The if-elseif-endif conditional should pick either the python3 or python2; # integration depending on your vim setup.; #; # The first mapping enables clang-format for NORMAL and VISUAL mode, the second; # mapping adds support for INSERT mode. Change ""C-I"" to another binding if you; # need clang-format on a different key (C-I stands for Ctrl+i).; #; # With this integration you can press the bound key and clang-format will; # format the current line in NORMAL and INSERT mode or the selected region in; # VISUAL mode. The line or region is extended to the next bigger syntactic; # entity.; #; # You can also pass in the variable ""l:lines"" to choose the range for; # formatting. This variable can either contain ""<start line>:<end line>"" or; # ""all"" to format the full file. So, to format the full file, write a function; # like:; # :function FormatFile(); # : let l:lines=""all""; # : if has('python'); # : pyf <path-to-this-file>/clang-format.py; # : elseif has('python3'); # : py3f <path-to-this-file>/clang-format.py; # : endif; # :endfunction; #; # It operates on the current, potentially unsaved buffer and does not create; # or save any files. To revert a formatting, just undo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-format/clang-format.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format.py:833,Integrability,integrat,integration,833,"# This file is a minimal clang-format vim-integration. To install:; # - Change 'binary' if clang-format is not on the path (see below).; # - Add to your .vimrc:; #; # if has('python'); # map <C-I> :pyf <path-to-this-file>/clang-format.py<cr>; # imap <C-I> <c-o>:pyf <path-to-this-file>/clang-format.py<cr>; # elseif has('python3'); # map <C-I> :py3f <path-to-this-file>/clang-format.py<cr>; # imap <C-I> <c-o>:py3f <path-to-this-file>/clang-format.py<cr>; # endif; #; # The if-elseif-endif conditional should pick either the python3 or python2; # integration depending on your vim setup.; #; # The first mapping enables clang-format for NORMAL and VISUAL mode, the second; # mapping adds support for INSERT mode. Change ""C-I"" to another binding if you; # need clang-format on a different key (C-I stands for Ctrl+i).; #; # With this integration you can press the bound key and clang-format will; # format the current line in NORMAL and INSERT mode or the selected region in; # VISUAL mode. The line or region is extended to the next bigger syntactic; # entity.; #; # You can also pass in the variable ""l:lines"" to choose the range for; # formatting. This variable can either contain ""<start line>:<end line>"" or; # ""all"" to format the full file. So, to format the full file, write a function; # like:; # :function FormatFile(); # : let l:lines=""all""; # : if has('python'); # : pyf <path-to-this-file>/clang-format.py; # : elseif has('python3'); # : py3f <path-to-this-file>/clang-format.py; # : endif; # :endfunction; #; # It operates on the current, potentially unsaved buffer and does not create; # or save any files. To revert a formatting, just undo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-format/clang-format.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format.py:1012,Modifiability,extend,extended,1012,"# This file is a minimal clang-format vim-integration. To install:; # - Change 'binary' if clang-format is not on the path (see below).; # - Add to your .vimrc:; #; # if has('python'); # map <C-I> :pyf <path-to-this-file>/clang-format.py<cr>; # imap <C-I> <c-o>:pyf <path-to-this-file>/clang-format.py<cr>; # elseif has('python3'); # map <C-I> :py3f <path-to-this-file>/clang-format.py<cr>; # imap <C-I> <c-o>:py3f <path-to-this-file>/clang-format.py<cr>; # endif; #; # The if-elseif-endif conditional should pick either the python3 or python2; # integration depending on your vim setup.; #; # The first mapping enables clang-format for NORMAL and VISUAL mode, the second; # mapping adds support for INSERT mode. Change ""C-I"" to another binding if you; # need clang-format on a different key (C-I stands for Ctrl+i).; #; # With this integration you can press the bound key and clang-format will; # format the current line in NORMAL and INSERT mode or the selected region in; # VISUAL mode. The line or region is extended to the next bigger syntactic; # entity.; #; # You can also pass in the variable ""l:lines"" to choose the range for; # formatting. This variable can either contain ""<start line>:<end line>"" or; # ""all"" to format the full file. So, to format the full file, write a function; # like:; # :function FormatFile(); # : let l:lines=""all""; # : if has('python'); # : pyf <path-to-this-file>/clang-format.py; # : elseif has('python3'); # : py3f <path-to-this-file>/clang-format.py; # : endif; # :endfunction; #; # It operates on the current, potentially unsaved buffer and does not create; # or save any files. To revert a formatting, just undo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-format/clang-format.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format.py:1092,Modifiability,variab,variable,1092,"# This file is a minimal clang-format vim-integration. To install:; # - Change 'binary' if clang-format is not on the path (see below).; # - Add to your .vimrc:; #; # if has('python'); # map <C-I> :pyf <path-to-this-file>/clang-format.py<cr>; # imap <C-I> <c-o>:pyf <path-to-this-file>/clang-format.py<cr>; # elseif has('python3'); # map <C-I> :py3f <path-to-this-file>/clang-format.py<cr>; # imap <C-I> <c-o>:py3f <path-to-this-file>/clang-format.py<cr>; # endif; #; # The if-elseif-endif conditional should pick either the python3 or python2; # integration depending on your vim setup.; #; # The first mapping enables clang-format for NORMAL and VISUAL mode, the second; # mapping adds support for INSERT mode. Change ""C-I"" to another binding if you; # need clang-format on a different key (C-I stands for Ctrl+i).; #; # With this integration you can press the bound key and clang-format will; # format the current line in NORMAL and INSERT mode or the selected region in; # VISUAL mode. The line or region is extended to the next bigger syntactic; # entity.; #; # You can also pass in the variable ""l:lines"" to choose the range for; # formatting. This variable can either contain ""<start line>:<end line>"" or; # ""all"" to format the full file. So, to format the full file, write a function; # like:; # :function FormatFile(); # : let l:lines=""all""; # : if has('python'); # : pyf <path-to-this-file>/clang-format.py; # : elseif has('python3'); # : py3f <path-to-this-file>/clang-format.py; # : endif; # :endfunction; #; # It operates on the current, potentially unsaved buffer and does not create; # or save any files. To revert a formatting, just undo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-format/clang-format.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format.py:1155,Modifiability,variab,variable,1155,"# This file is a minimal clang-format vim-integration. To install:; # - Change 'binary' if clang-format is not on the path (see below).; # - Add to your .vimrc:; #; # if has('python'); # map <C-I> :pyf <path-to-this-file>/clang-format.py<cr>; # imap <C-I> <c-o>:pyf <path-to-this-file>/clang-format.py<cr>; # elseif has('python3'); # map <C-I> :py3f <path-to-this-file>/clang-format.py<cr>; # imap <C-I> <c-o>:py3f <path-to-this-file>/clang-format.py<cr>; # endif; #; # The if-elseif-endif conditional should pick either the python3 or python2; # integration depending on your vim setup.; #; # The first mapping enables clang-format for NORMAL and VISUAL mode, the second; # mapping adds support for INSERT mode. Change ""C-I"" to another binding if you; # need clang-format on a different key (C-I stands for Ctrl+i).; #; # With this integration you can press the bound key and clang-format will; # format the current line in NORMAL and INSERT mode or the selected region in; # VISUAL mode. The line or region is extended to the next bigger syntactic; # entity.; #; # You can also pass in the variable ""l:lines"" to choose the range for; # formatting. This variable can either contain ""<start line>:<end line>"" or; # ""all"" to format the full file. So, to format the full file, write a function; # like:; # :function FormatFile(); # : let l:lines=""all""; # : if has('python'); # : pyf <path-to-this-file>/clang-format.py; # : elseif has('python3'); # : py3f <path-to-this-file>/clang-format.py; # : endif; # :endfunction; #; # It operates on the current, potentially unsaved buffer and does not create; # or save any files. To revert a formatting, just undo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-format/clang-format.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format.py:1649,Usability,undo,undo,1649,"# This file is a minimal clang-format vim-integration. To install:; # - Change 'binary' if clang-format is not on the path (see below).; # - Add to your .vimrc:; #; # if has('python'); # map <C-I> :pyf <path-to-this-file>/clang-format.py<cr>; # imap <C-I> <c-o>:pyf <path-to-this-file>/clang-format.py<cr>; # elseif has('python3'); # map <C-I> :py3f <path-to-this-file>/clang-format.py<cr>; # imap <C-I> <c-o>:py3f <path-to-this-file>/clang-format.py<cr>; # endif; #; # The if-elseif-endif conditional should pick either the python3 or python2; # integration depending on your vim setup.; #; # The first mapping enables clang-format for NORMAL and VISUAL mode, the second; # mapping adds support for INSERT mode. Change ""C-I"" to another binding if you; # need clang-format on a different key (C-I stands for Ctrl+i).; #; # With this integration you can press the bound key and clang-format will; # format the current line in NORMAL and INSERT mode or the selected region in; # VISUAL mode. The line or region is extended to the next bigger syntactic; # entity.; #; # You can also pass in the variable ""l:lines"" to choose the range for; # formatting. This variable can either contain ""<start line>:<end line>"" or; # ""all"" to format the full file. So, to format the full file, write a function; # like:; # :function FormatFile(); # : let l:lines=""all""; # : if has('python'); # : pyf <path-to-this-file>/clang-format.py; # : elseif has('python3'); # : py3f <path-to-this-file>/clang-format.py; # : endif; # :endfunction; #; # It operates on the current, potentially unsaved buffer and does not create; # or save any files. To revert a formatting, just undo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-format/clang-format.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/clang-format.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-rename/clang-rename.py:26,Deployability,integrat,integration,26,"""""""; Minimal clang-rename integration with Vim. Before installing make sure one of the following is satisfied:. * clang-rename is in your PATH; * `g:clang_rename_path` in ~/.vimrc points to valid clang-rename executable; * `binary` in clang-rename.py points to valid to clang-rename executable. To install, simply put this into your ~/.vimrc for python2 support. noremap <leader>cr :pyf <path-to>/clang-rename.py<cr>. For python3 use the following command (note the change from :pyf to :py3f). noremap <leader>cr :py3f <path-to>/clang-rename.py<cr>. IMPORTANT NOTE: Before running the tool, make sure you saved the file. All you have to do now is to place a cursor on a variable/function/class which; you would like to rename and press '<leader>cr'. You will be prompted for a new; name if the cursor points to a valid symbol.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-rename/clang-rename.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-rename/clang-rename.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-rename/clang-rename.py:55,Deployability,install,installing,55,"""""""; Minimal clang-rename integration with Vim. Before installing make sure one of the following is satisfied:. * clang-rename is in your PATH; * `g:clang_rename_path` in ~/.vimrc points to valid clang-rename executable; * `binary` in clang-rename.py points to valid to clang-rename executable. To install, simply put this into your ~/.vimrc for python2 support. noremap <leader>cr :pyf <path-to>/clang-rename.py<cr>. For python3 use the following command (note the change from :pyf to :py3f). noremap <leader>cr :py3f <path-to>/clang-rename.py<cr>. IMPORTANT NOTE: Before running the tool, make sure you saved the file. All you have to do now is to place a cursor on a variable/function/class which; you would like to rename and press '<leader>cr'. You will be prompted for a new; name if the cursor points to a valid symbol.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-rename/clang-rename.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-rename/clang-rename.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-rename/clang-rename.py:298,Deployability,install,install,298,"""""""; Minimal clang-rename integration with Vim. Before installing make sure one of the following is satisfied:. * clang-rename is in your PATH; * `g:clang_rename_path` in ~/.vimrc points to valid clang-rename executable; * `binary` in clang-rename.py points to valid to clang-rename executable. To install, simply put this into your ~/.vimrc for python2 support. noremap <leader>cr :pyf <path-to>/clang-rename.py<cr>. For python3 use the following command (note the change from :pyf to :py3f). noremap <leader>cr :py3f <path-to>/clang-rename.py<cr>. IMPORTANT NOTE: Before running the tool, make sure you saved the file. All you have to do now is to place a cursor on a variable/function/class which; you would like to rename and press '<leader>cr'. You will be prompted for a new; name if the cursor points to a valid symbol.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-rename/clang-rename.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-rename/clang-rename.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-rename/clang-rename.py:26,Integrability,integrat,integration,26,"""""""; Minimal clang-rename integration with Vim. Before installing make sure one of the following is satisfied:. * clang-rename is in your PATH; * `g:clang_rename_path` in ~/.vimrc points to valid clang-rename executable; * `binary` in clang-rename.py points to valid to clang-rename executable. To install, simply put this into your ~/.vimrc for python2 support. noremap <leader>cr :pyf <path-to>/clang-rename.py<cr>. For python3 use the following command (note the change from :pyf to :py3f). noremap <leader>cr :py3f <path-to>/clang-rename.py<cr>. IMPORTANT NOTE: Before running the tool, make sure you saved the file. All you have to do now is to place a cursor on a variable/function/class which; you would like to rename and press '<leader>cr'. You will be prompted for a new; name if the cursor points to a valid symbol.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-rename/clang-rename.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-rename/clang-rename.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-rename/clang-rename.py:670,Modifiability,variab,variable,670,"""""""; Minimal clang-rename integration with Vim. Before installing make sure one of the following is satisfied:. * clang-rename is in your PATH; * `g:clang_rename_path` in ~/.vimrc points to valid clang-rename executable; * `binary` in clang-rename.py points to valid to clang-rename executable. To install, simply put this into your ~/.vimrc for python2 support. noremap <leader>cr :pyf <path-to>/clang-rename.py<cr>. For python3 use the following command (note the change from :pyf to :py3f). noremap <leader>cr :py3f <path-to>/clang-rename.py<cr>. IMPORTANT NOTE: Before running the tool, make sure you saved the file. All you have to do now is to place a cursor on a variable/function/class which; you would like to rename and press '<leader>cr'. You will be prompted for a new; name if the cursor points to a valid symbol.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-rename/clang-rename.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-rename/clang-rename.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-rename/clang-rename.py:307,Usability,simpl,simply,307,"""""""; Minimal clang-rename integration with Vim. Before installing make sure one of the following is satisfied:. * clang-rename is in your PATH; * `g:clang_rename_path` in ~/.vimrc points to valid clang-rename executable; * `binary` in clang-rename.py points to valid to clang-rename executable. To install, simply put this into your ~/.vimrc for python2 support. noremap <leader>cr :pyf <path-to>/clang-rename.py<cr>. For python3 use the following command (note the change from :pyf to :py3f). noremap <leader>cr :py3f <path-to>/clang-rename.py<cr>. IMPORTANT NOTE: Before running the tool, make sure you saved the file. All you have to do now is to place a cursor on a variable/function/class which; you would like to rename and press '<leader>cr'. You will be prompted for a new; name if the cursor points to a valid symbol.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/clang-rename/clang-rename.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-rename/clang-rename.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/cppreference_parser.py:53,Integrability,wrap,wrapped,53,# The interesting header content (e.g. <cstdlib>) is wrapped in <code>.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/include-mapping/cppreference_parser.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/cppreference_parser.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py:611,Deployability,install,installing-beautiful-soup,611,"""""""gen_std.py is a tool to generate a lookup table (from qualified names to; include headers) for C/C++ Standard Library symbols by parsing archived HTML; files from cppreference. The generated files are located in clang/include/Tooling/Inclusions. Caveats and FIXMEs:; - only symbols directly in ""std"" namespace are added, we should also add std's; subnamespace symbols (e.g. chrono).; - symbols with multiple variants or defined in multiple headers aren't added,; e.g. std::move, std::swap. Usage:; 1. Install BeautifulSoup dependency, see instruction:; https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-beautiful-soup; 2. Download cppreference offline HTML files (html_book_20220730.zip in Unofficial Release) at; https://en.cppreference.com/w/Cppreference:Archives; 3. Unzip the zip file from step 2 (e.g., to a ""cppreference"" directory). You should; get a ""cppreference/reference"" directory.; 4. Run the command:; // Generate C++ symbols; python3 gen_std.py -cppreference cppreference/reference -symbols=cpp > StdSymbolMap.inc; // Generate C symbols; python3 gen_std.py -cppreference cppreference/reference -symbols=c > CSymbolMap.inc; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/include-mapping/gen_std.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py:526,Integrability,depend,dependency,526,"""""""gen_std.py is a tool to generate a lookup table (from qualified names to; include headers) for C/C++ Standard Library symbols by parsing archived HTML; files from cppreference. The generated files are located in clang/include/Tooling/Inclusions. Caveats and FIXMEs:; - only symbols directly in ""std"" namespace are added, we should also add std's; subnamespace symbols (e.g. chrono).; - symbols with multiple variants or defined in multiple headers aren't added,; e.g. std::move, std::swap. Usage:; 1. Install BeautifulSoup dependency, see instruction:; https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-beautiful-soup; 2. Download cppreference offline HTML files (html_book_20220730.zip in Unofficial Release) at; https://en.cppreference.com/w/Cppreference:Archives; 3. Unzip the zip file from step 2 (e.g., to a ""cppreference"" directory). You should; get a ""cppreference/reference"" directory.; 4. Run the command:; // Generate C++ symbols; python3 gen_std.py -cppreference cppreference/reference -symbols=cpp > StdSymbolMap.inc; // Generate C symbols; python3 gen_std.py -cppreference cppreference/reference -symbols=c > CSymbolMap.inc; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/include-mapping/gen_std.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py:2,Safety,avoid,avoid,2,"# avoid printing duplicated entries, for C macros!",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/include-mapping/gen_std.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py:171,Security,access,accessed,171,"# std sub-namespace symbols have separated pages.; # We don't index std literal operators (e.g.; # std::literals::chrono_literals::operator""""d), these symbols can't be; # accessed by std::<symbol_name>.; #; # std::placeholders symbols are handled manually in StdSpecialSymbolMap.inc",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/include-mapping/gen_std.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py:28,Security,access,accessed,28,# std::ranges::views can be accessed as std::views.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/include-mapping/gen_std.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py:27,Availability,avail,available,27,"# Zombie symbols that were available from the Standard Library, but are; # removed in the following standards.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/include-mapping/gen_std.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/test.py:30,Testability,test,test,30,"#!/usr/bin/env python; # ===- test.py - ---------------------------------------------*- python -*--===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/include-mapping/test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/__init__.py:18,Integrability,interface,interface,18,"""""""part of public interface""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/__init__.py:18,Integrability,interface,interface,18,"""""""part of public interface""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/__init__.py:18,Integrability,interface,interface,18,"""""""part of public interface""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:130,Integrability,wrap,wrappers,130,"# Run against a build command. there are cases, when analyzer run; # is not required. But we need to set up everything for the; # wrappers, because 'configure' needs to capture the CC/CXX values; # for the Makefile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:149,Modifiability,config,configure,149,"# Run against a build command. there are cases, when analyzer run; # is not required. But we need to set up everything for the; # wrappers, because 'configure' needs to capture the CC/CXX values; # for the Makefile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:47,Integrability,wrap,wrappers,47,# Run build command and analyzer with compiler wrappers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:254,Integrability,wrap,wrappers,254,"""""""Check the intent of the build command. When static analyzer run against project configure step, it should be; silent and no need to run the analyzer or generate report. To run `scan-build` against the configure step might be necessary,; when compiler wrappers are used. That's the moment when build setup; check the compiler and capture the location for the build process.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:83,Modifiability,config,configure,83,"""""""Check the intent of the build command. When static analyzer run against project configure step, it should be; silent and no need to run the analyzer or generate report. To run `scan-build` against the configure step might be necessary,; when compiler wrappers are used. That's the moment when build setup; check the compiler and capture the location for the build process.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:204,Modifiability,config,configure,204,"""""""Check the intent of the build command. When static analyzer run against project configure step, it should be; silent and no need to run the analyzer or generate report. To run `scan-build` against the configure step might be necessary,; when compiler wrappers are used. That's the moment when build setup; check the compiler and capture the location for the build process.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:7,Deployability,configurat,configuration,7,"""""""CTU configuration is created from the chosen phases and dir.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:7,Modifiability,config,configuration,7,"""""""CTU configuration is created from the chosen phases and dir.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:7,Deployability,configurat,configuration,7,"""""""CTU configuration is created from the chosen phases and dir.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:7,Modifiability,config,configuration,7,"""""""CTU configuration is created from the chosen phases and dir.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:10,Availability,error,error,10,# display error message from the static analyzer,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:16,Integrability,message,message,16,# display error message from the static analyzer,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:62,Integrability,wrap,wrapper,62,"""""""Set up environment for build command to interpose compiler wrapper.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:59,Integrability,wrap,wrappers,59,"""""""Entry point for `analyze-cc` and `analyze-c++` compiler wrappers.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:32,Integrability,wrap,wrapper,32,"""""""Implements analyzer compiler wrapper functionality.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:10,Availability,error,error,10,# display error message from the static analyzer,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:16,Integrability,message,message,16,# display error message from the static analyzer,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:461,Integrability,contract,contract,461,"""""""Entry point to run (or not) static analyzer against a single entry; of the compilation database. This complex task is decomposed into smaller methods which are calling; each other in chain. If the analysis is not possible the given method; just return and break the chain. The passed parameter is a python dictionary. Each method first check; that the needed parameters received. (This is done by the 'require'; decorator. It's like an 'assert' to check the contract between the; caller and the called method.)""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:440,Testability,assert,assert,440,"""""""Entry point to run (or not) static analyzer against a single entry; of the compilation database. This complex task is decomposed into smaller methods which are calling; each other in chain. If the analysis is not possible the given method; just return and break the chain. The passed parameter is a python dictionary. Each method first check; that the needed parameters received. (This is done by the 'require'; decorator. It's like an 'assert' to check the contract between the; caller and the called method.)""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:11,Availability,failure,failures,11,"""""""Creates failures directory if not exits yet.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:11,Availability,error,error,11,# Classify error type: when Clang terminated by a signal it's a 'Crash'.; # (python subprocess Popen.returncode is negative when child terminated; # by signal.) Everything else is 'Other Error'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:119,Availability,failure,failure,119,"""""""It assembles the analysis command line and executes it. Capture the; output of the analysis and returns with it. If failure reports are; requested, it calls the continuation to generate it.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:49,Modifiability,inherit,inherited,49,# will set up own output file; # flags below are inherited from the perl implementation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:64,Integrability,interface,interfaces,64,""""""" This module parses and validates arguments for command-line interfaces. It uses argparse module to create the command line parser. (This library is; in the standard python library since 3.2 and backported to 2.7, but not; earlier.). It also implements basic validation methods, related to the command.; Validations are mostly calling specific help methods, or mangling values.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:27,Security,validat,validates,27,""""""" This module parses and validates arguments for command-line interfaces. It uses argparse module to create the command line parser. (This library is; in the standard python library since 3.2 and backported to 2.7, but not; earlier.). It also implements basic validation methods, related to the command.; Validations are mostly calling specific help methods, or mangling values.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:262,Security,validat,validation,262,""""""" This module parses and validates arguments for command-line interfaces. It uses argparse module to create the command line parser. (This library is; in the standard python library since 3.2 and backported to 2.7, but not; earlier.). It also implements basic validation methods, related to the command.; Validations are mostly calling specific help methods, or mangling values.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:13,Security,validat,validate,13,"""""""Parse and validate command-line arguments for intercept-build.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:8,Security,validat,validation,8,# short validation logic,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:19,Testability,log,logic,19,# short validation logic,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:13,Security,validat,validate,13,"""""""Parse and validate command-line arguments for analyze-build.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:13,Security,validat,validate,13,"""""""Parse and validate command-line arguments for scan-build.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:7,Modifiability,plugin,plugins,7,# make plugins always a list. (it might be None when not specified.),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:70,Security,validat,validation,70,"""""""Command line parsing is done by the argparse module, but semantic; validation still needs to be done. This method is doing it for; analyze-build and scan-build commands. :param parser: The command line parser object.; :param args: Parsed argument object.; :param from_build_command: Boolean value tells is the command suppose; to run the analyzer against a build command or a compilation db.; :return: No return value, but this call might throw when validation; fails.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:453,Security,validat,validation,453,"""""""Command line parsing is done by the argparse module, but semantic; validation still needs to be done. This method is doing it for; analyze-build and scan-build commands. :param parser: The command line parser object.; :param args: Parsed argument object.; :param from_build_command: Boolean value tells is the command suppose; to run the analyzer against a build command or a compilation db.; :return: No return value, but this call might throw when validation; fails.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:146,Deployability,continuous,continuously,146,"""""""Extend existing compilation database with new entries.; Duplicate entries are detected and not present in the final output.; The output is not continuously updated, it's done when the build; command finished. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:159,Deployability,update,updated,159,"""""""Extend existing compilation database with new entries.; Duplicate entries are detected and not present in the final output.; The output is not continuously updated, it's done when the build; command finished. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:81,Safety,detect,detected,81,"""""""Extend existing compilation database with new entries.; Duplicate entries are detected and not present in the final output.; The output is not continuously updated, it's done when the build; command finished. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:210,Integrability,wrap,wrapper,210,"""""""Run the build commands first, intercept compiler; calls and then run the static analyzer afterwards.; Generally speaking it has better coverage on build commands.; With '--override-compiler' it use compiler wrapper, but does; not run the analyzer till the build is finished.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:20,Availability,failure,failures,20,"""""""Do not create a 'failures' subdirectory that includes analyzer; crash reports and preprocessed source files.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:96,Energy Efficiency,power,powerful,96,"""""""Specify the constraint engine used by the analyzer. Specifying; 'basic' uses a simpler, less powerful constraint model used by; checker-0.160 and earlier.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:82,Usability,simpl,simpler,82,"""""""Specify the constraint engine used by the analyzer. Specifying; 'basic' uses a simpler, less powerful constraint model used by; checker-0.160 and earlier.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:64,Modifiability,config,config,64,"""""""Provide options to pass through to the analyzer's; -analyzer-config flag. Several options are separated with comma:; 'key1=val1,key2=val2'. Available options:; stable-report-filename=true or false (default). Switch the page naming to:; report-<filename>-<function/method name>-<id>.html; instead of report-XXXXXX.html""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:28,Testability,assert,assertions,28,"""""""Tells analyzer to enable assertions in code even if they were; disabled during compilation, enabling more precise results.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:52,Integrability,interface,interface,52,"""""""Loading external checkers using the clang plugin interface.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:45,Modifiability,plugin,plugin,45,"""""""Loading external checkers using the clang plugin interface.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:13,Availability,avail,available,13,"""""""Print all available checkers and mark the enabled ones.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:45,Integrability,wrap,wrapper,45,"""""""Creates command line parser for all build wrapper commands.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:81,Availability,avail,available,81,"""""""Always resort to the compiler wrapper even when better; intercept methods are available.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:33,Integrability,wrap,wrapper,33,"""""""Always resort to the compiler wrapper even when better; intercept methods are available.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:65,Integrability,wrap,wrapper,65,"""""""When '%(prog)s' analyzes a project by interposing a compiler; wrapper, which executes a real compiler for compilation and do other; tasks (record the compiler invocation). Because of this interposing,; '%(prog)s' does not know what compiler your project normally uses.; Instead, it simply overrides the CC environment variable, and guesses; your default compiler. If you need '%(prog)s' to use a specific compiler for *compilation*; then you can use this option to specify a path to that compiler.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:321,Modifiability,variab,variable,321,"""""""When '%(prog)s' analyzes a project by interposing a compiler; wrapper, which executes a real compiler for compilation and do other; tasks (record the compiler invocation). Because of this interposing,; '%(prog)s' does not know what compiler your project normally uses.; Instead, it simply overrides the CC environment variable, and guesses; your default compiler. If you need '%(prog)s' to use a specific compiler for *compilation*; then you can use this option to specify a path to that compiler.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:285,Usability,simpl,simply,285,"""""""When '%(prog)s' analyzes a project by interposing a compiler; wrapper, which executes a real compiler for compilation and do other; tasks (record the compiler invocation). Because of this interposing,; '%(prog)s' does not know what compiler your project normally uses.; Instead, it simply overrides the CC environment variable, and guesses; your default compiler. If you need '%(prog)s' to use a specific compiler for *compilation*; then you can use this option to specify a path to that compiler.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py:82,Integrability,interface,interface,82,""""""" This module is responsible for the Clang executable. Since Clang command line interface is so rich, but this project is using only; a subset of that, it makes sense to create a function specific wrapper. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py:199,Integrability,wrap,wrapper,199,""""""" This module is responsible for the Clang executable. Since Clang command line interface is so rich, but this project is using only; a subset of that, it makes sense to create a function specific wrapper. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py:80,Modifiability,plugin,plugins,80,"""""""Get the active checker list. :param clang: the compiler we are using; :param plugins: list of plugins which was requested by the user; :return: list of checker names which are active. To get the default checkers we execute Clang to print how this; compilation would be called. And take out the enabled checker from the; arguments. For input file we specify stdin and pass only language; information.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py:97,Modifiability,plugin,plugins,97,"""""""Get the active checker list. :param clang: the compiler we are using; :param plugins: list of plugins which was requested by the user; :return: list of checker names which are active. To get the default checkers we execute Clang to print how this; compilation would be called. And take out the enabled checker from the; arguments. For input file we specify stdin and pass only language; information.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py:15,Availability,avail,available,15,"""""""Get all the available checkers from default and from the plugins. :param clang: the compiler we are using; :param plugins: list of plugins which was requested by the user; :return: a dictionary of all available checkers and its status. {<checker name>: (<checker description>, <is active by default>)}""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py:204,Availability,avail,available,204,"""""""Get all the available checkers from default and from the plugins. :param clang: the compiler we are using; :param plugins: list of plugins which was requested by the user; :return: a dictionary of all available checkers and its status. {<checker name>: (<checker description>, <is active by default>)}""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py:60,Modifiability,plugin,plugins,60,"""""""Get all the available checkers from default and from the plugins. :param clang: the compiler we are using; :param plugins: list of plugins which was requested by the user; :return: a dictionary of all available checkers and its status. {<checker name>: (<checker description>, <is active by default>)}""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py:117,Modifiability,plugin,plugins,117,"""""""Get all the available checkers from default and from the plugins. :param clang: the compiler we are using; :param plugins: list of plugins which was requested by the user; :return: a dictionary of all available checkers and its status. {<checker name>: (<checker description>, <is active by default>)}""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py:134,Modifiability,plugin,plugins,134,"""""""Get all the available checkers from default and from the plugins. :param clang: the compiler we are using; :param plugins: list of plugins which was requested by the user; :return: a dictionary of all available checkers and its status. {<checker name>: (<checker description>, <is active by default>)}""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:693,Integrability,wrap,wrappers,693,""""""" This module is responsible to capture the compiler invocation of any; build process. The result of that should be a compilation database. This implementation is using the LD_PRELOAD or DYLD_INSERT_LIBRARIES; mechanisms provided by the dynamic linker. The related library is implemented; in C language and can be found under 'libear' directory. The 'libear' library is capturing all child process creation and logging the; relevant information about it into separate files in a specified directory.; The parameter of this process is the output directory name, where the report; files shall be placed. This parameter is passed as an environment variable. The module also implements compiler wrappers to intercept the compiler calls. The module implements the build command execution and the post-processing of; the output files, which will condensates into a compilation database. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:647,Modifiability,variab,variable,647,""""""" This module is responsible to capture the compiler invocation of any; build process. The result of that should be a compilation database. This implementation is using the LD_PRELOAD or DYLD_INSERT_LIBRARIES; mechanisms provided by the dynamic linker. The related library is implemented; in C language and can be found under 'libear' directory. The 'libear' library is capturing all child process creation and logging the; relevant information about it into separate files in a specified directory.; The parameter of this process is the output directory name, where the report; files shall be placed. This parameter is passed as an environment variable. The module also implements compiler wrappers to intercept the compiler calls. The module implements the build command execution and the post-processing of; the output files, which will condensates into a compilation database. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:413,Testability,log,logging,413,""""""" This module is responsible to capture the compiler invocation of any; build process. The result of that should be a compilation database. This implementation is using the LD_PRELOAD or DYLD_INSERT_LIBRARIES; mechanisms provided by the dynamic linker. The related library is implemented; in C language and can be found under 'libear' directory. The 'libear' library is capturing all child process creation and logging the; relevant information about it into separate files in a specified directory.; The parameter of this process is the output directory name, where the report; files shall be placed. This parameter is passed as an environment variable. The module also implements compiler wrappers to intercept the compiler calls. The module implements the build command execution and the post-processing of; the output files, which will condensates into a compilation database. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:201,Integrability,wrap,wrapper,201,"""""""Sets up the environment for the build command. It sets the required environment variables and execute the given command.; The exec calls will be logged by the 'libear' preloaded library or by the; 'wrapper' programs.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:83,Modifiability,variab,variables,83,"""""""Sets up the environment for the build command. It sets the required environment variables and execute the given command.; The exec calls will be logged by the 'libear' preloaded library or by the; 'wrapper' programs.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:148,Testability,log,logged,148,"""""""Sets up the environment for the build command. It sets the required environment variables and execute the given command.; The exec calls will be logged by the 'libear' preloaded library or by the; 'wrapper' programs.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:32,Integrability,wrap,wrapper,32,"""""""Implement intercept compiler wrapper functionality. It does generate execution report into target directory.; The target directory name is from environment variables.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:159,Modifiability,variab,variables,159,"""""""Implement intercept compiler wrapper functionality. It does generate execution report into target directory.; The target directory name is from environment variables.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:169,Integrability,wrap,wrapper,169,"""""""Parse the file generated by the 'libear' preloaded library. Given filename points to a file which contains the basic report; generated by the interception library or wrapper command. A single; report file _might_ contain multiple process creation info.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:88,Safety,detect,detected,88,"""""""Library-based interposition will fail silently if SIP is enabled,; so this should be detected. You can detect whether SIP is enabled on; Darwin by checking whether (1) there is a binary called 'csrutil' in; the path and, if so, (2) whether the output of executing 'csrutil status'; contains 'System Integrity Protection status: enabled'. :param platform: name of the platform (returned by sys.platform),; :return: True if library preload will fail by the dynamic linker.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:106,Safety,detect,detect,106,"""""""Library-based interposition will fail silently if SIP is enabled,; so this should be detected. You can detect whether SIP is enabled on; Darwin by checking whether (1) there is a binary called 'csrutil' in; the path and, if so, (2) whether the output of executing 'csrutil status'; contains 'System Integrity Protection status: enabled'. :param platform: name of the platform (returned by sys.platform),; :return: True if library preload will fail by the dynamic linker.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:20,Security,hash,hash,20,"""""""Implement unique hash method for compilation database entries.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:43,Integrability,wrap,wrappers,43,# On OS X the 'cc' and 'c++' compilers are wrappers for; # 'clang' therefore both call would be logged. To avoid; # this the hash does not contain the first word of the; # command.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:107,Safety,avoid,avoid,107,# On OS X the 'cc' and 'c++' compilers are wrappers for; # 'clang' therefore both call would be logged. To avoid; # this the hash does not contain the first word of the; # command.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:125,Security,hash,hash,125,# On OS X the 'cc' and 'c++' compilers are wrappers for; # 'clang' therefore both call would be logged. To avoid; # this the hash does not contain the first word of the; # command.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:96,Testability,log,logged,96,# On OS X the 'cc' and 'c++' compilers are wrappers for; # 'clang' therefore both call would be logged. To avoid; # this the hash does not contain the first word of the; # command.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:257,Integrability,message,messages,257,"""""""Reads and merges all .sarif files in the given output directory. Each sarif file in the output directory is understood as a single run; and thus appear separate in the top level runs array. This requires; modifying the run index of any embedded links in messages.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:98,Deployability,update,updates,98,"""""""; Given a SARIF object, checks its dictionary entries for a 'message' property.; If it exists, updates the message index of embedded links in the run index. Recursively looks through entries in the dictionary.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:64,Integrability,message,message,64,"""""""; Given a SARIF object, checks its dictionary entries for a 'message' property.; If it exists, updates the message index of embedded links in the run index. Recursively looks through entries in the dictionary.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:110,Integrability,message,message,110,"""""""; Given a SARIF object, checks its dictionary entries for a 'message' property.; If it exists, updates the message index of embedded links in the run index. Recursively looks through entries in the dictionary.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:33,Deployability,update,update,33,# iterate through subobjects and update it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:94,Deployability,update,updates,94,"""""""; Given a SARIF message object, checks if the text property contains an embedded link and; updates the run index if necessary.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:19,Integrability,message,message,19,"""""""; Given a SARIF message object, checks if the text property contains an embedded link and; updates the run index if necessary.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:41,Deployability,update,update,41,"# we only merge runs, so we only need to update the run index",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:2,Deployability,update,update,2,# update matches from right to left to make increasing character length (9->10) smoother,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:2,Security,expose,exposed,2,# exposed for testing since the order of files returned by glob is not guaranteed to be sorted,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:14,Testability,test,testing,14,# exposed for testing since the order of files returned by glob is not guaranteed to be sorted,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:8,Safety,safe,safe,8,"""""""Make safe this values to embed into HTML.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:8,Safety,safe,safe,8,"""""""Make safe this values to embed into HTML.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:46,Deployability,update,update,46,"""""""Run 'encode' on 'container[key]' value and update it.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:16,Safety,detect,detect,16,"""""""Predicate to detect duplicated entries. Unique hash method can be use to detect duplicates. Entries are; represented as dictionaries, which has no default hash method.; This implementation uses a set datatype to store the unique hash values. This method returns a method which can detect the duplicate values.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:76,Safety,detect,detect,76,"""""""Predicate to detect duplicated entries. Unique hash method can be use to detect duplicates. Entries are; represented as dictionaries, which has no default hash method.; This implementation uses a set datatype to store the unique hash values. This method returns a method which can detect the duplicate values.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:284,Safety,detect,detect,284,"""""""Predicate to detect duplicated entries. Unique hash method can be use to detect duplicates. Entries are; represented as dictionaries, which has no default hash method.; This implementation uses a set datatype to store the unique hash values. This method returns a method which can detect the duplicate values.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:50,Security,hash,hash,50,"""""""Predicate to detect duplicated entries. Unique hash method can be use to detect duplicates. Entries are; represented as dictionaries, which has no default hash method.; This implementation uses a set datatype to store the unique hash values. This method returns a method which can detect the duplicate values.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:158,Security,hash,hash,158,"""""""Predicate to detect duplicated entries. Unique hash method can be use to detect duplicates. Entries are; represented as dictionaries, which has no default hash method.; This implementation uses a set datatype to store the unique hash values. This method returns a method which can detect the duplicate values.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:232,Security,hash,hash,232,"""""""Predicate to detect duplicated entries. Unique hash method can be use to detect duplicates. Entries are; represented as dictionaries, which has no default hash method.; This implementation uses a set datatype to store the unique hash values. This method returns a method which can detect the duplicate values.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:40,Integrability,depend,depend,40,"""""""check_output returns bytes or string depend on python version""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:15,Testability,log,logging,15,"""""""Reconfigure logging level and format based on the verbose flag. :param verbose_level: number of `-v` flags received by the command; :return: no return value; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:7,Testability,log,logging,7,# Tune logging level.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:18,Integrability,message,messages,18,# Be verbose with messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:108,Availability,error,errors,108,"""""""Decorator for command entry methods. The decorator initialize/shutdown logging and guard on programming; errors (catch exceptions). The decorated method can have arbitrary parameters, the return value will; be the exit code of the process.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:74,Testability,log,logging,74,"""""""Decorator for command entry methods. The decorator initialize/shutdown logging and guard on programming; errors (catch exceptions). The decorated method can have arbitrary parameters, the return value will; be the exit code of the process.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:41,Integrability,wrap,wrapped,41,"""""""Do housekeeping tasks and execute the wrapped method.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:39,Availability,error,errors,39,# Some non used exit code for internal errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:23,Integrability,wrap,wrapper,23,"""""""Implements compiler wrapper base functionality. A compiler wrapper executes the real compiler, then implement some; functionality, then returns with the real compiler exit code. :param function: the extra functionality what the wrapper want to; do on top of the compiler call. If it throws exception, it will be; caught and logged.; :return: the exit code of the real compiler. The :param function: will receive the following arguments:. :param result: the exit code of the compilation.; :param execution: the command executed by the wrapper.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:62,Integrability,wrap,wrapper,62,"""""""Implements compiler wrapper base functionality. A compiler wrapper executes the real compiler, then implement some; functionality, then returns with the real compiler exit code. :param function: the extra functionality what the wrapper want to; do on top of the compiler call. If it throws exception, it will be; caught and logged.; :return: the exit code of the real compiler. The :param function: will receive the following arguments:. :param result: the exit code of the compilation.; :param execution: the command executed by the wrapper.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:231,Integrability,wrap,wrapper,231,"""""""Implements compiler wrapper base functionality. A compiler wrapper executes the real compiler, then implement some; functionality, then returns with the real compiler exit code. :param function: the extra functionality what the wrapper want to; do on top of the compiler call. If it throws exception, it will be; caught and logged.; :return: the exit code of the real compiler. The :param function: will receive the following arguments:. :param result: the exit code of the compilation.; :param execution: the command executed by the wrapper.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:537,Integrability,wrap,wrapper,537,"""""""Implements compiler wrapper base functionality. A compiler wrapper executes the real compiler, then implement some; functionality, then returns with the real compiler exit code. :param function: the extra functionality what the wrapper want to; do on top of the compiler call. If it throws exception, it will be; caught and logged.; :return: the exit code of the real compiler. The :param function: will receive the following arguments:. :param result: the exit code of the compilation.; :param execution: the command executed by the wrapper.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:327,Testability,log,logged,327,"""""""Implements compiler wrapper base functionality. A compiler wrapper executes the real compiler, then implement some; functionality, then returns with the real compiler exit code. :param function: the extra functionality what the wrapper want to; do on top of the compiler call. If it throws exception, it will be; caught and logged.; :return: the exit code of the real compiler. The :param function: will receive the following arguments:. :param result: the exit code of the compilation.; :param execution: the command executed by the wrapper.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:49,Integrability,wrap,wrapper,49,"""""""Find out was it a C++ compiler call. Compiler wrapper names; contain the compiler type. C++ compiler wrappers ends with `c++`,; but might have `.exe` extension on windows.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:104,Integrability,wrap,wrappers,104,"""""""Find out was it a C++ compiler call. Compiler wrapper names; contain the compiler type. C++ compiler wrappers ends with `c++`,; but might have `.exe` extension on windows.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:11,Integrability,wrap,wrapped,11,# Call the wrapped method and ignore it's return value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:45,Integrability,wrap,wrapper,45,"""""""Set up environment for interpose compiler wrapper.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/Reporter.py:25,Availability,failure,failures,25,"""""""Generic exception for failures in bug reporting.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/Reporter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/Reporter.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/Reporter.py:11,Integrability,interface,interfaces,11,# Reporter interfaces.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/Reporter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/Reporter.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/Reporter.py:114,Usability,simpl,simple,114,"# Guess the content type based on the file's extension. Encoding; # will be ignored, although we should check for simple things like; # gzip'd or compressed files.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/Reporter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/Reporter.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/Reporter.py:13,Modifiability,config,config,13,# FIXME: Get config parameters,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/Reporter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/Reporter.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:70,Performance,load,load,70,"""""""\; <script language=""javascript"" type=""text/javascript"">; function load(url) {; if (window.XMLHttpRequest) {; req = new XMLHttpRequest();; } else if (window.ActiveXObject) {; req = new ActiveXObject(""Microsoft.XMLHTTP"");; }; if (req != undefined) {; req.open(""GET"", url, true);; req.send("""");; }; }; </script>""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:401,Usability,simpl,simple,401,"# Insert report crashes link.; # Disabled for the time being until we decide exactly when this should; # be enabled. Also the radar reporter needs to be fixed to report; # multiple files.; # kReportReplacements.append((re.compile('<!-- REPORTCRASHES -->'),; # '<br>These files will automatically be attached to ' +; # 'reports filed here: <a href=""report_crashes"">Report Crashes</a>.')); ###; # Other simple parameters",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:15,Availability,error,errors,15,# Ignore parse errors,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:9,Availability,error,errors,9,# Ignore errors (only called on exit).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:16,Availability,error,errors,16,# Ignore socket errors,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:30,Usability,simpl,simplifications,30,"# Borrowed from Quixote, with simplifications.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:9,Modifiability,config,config,9,# Update config defaults.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:719,Integrability,message,message,719,"""""""; <head>; <title>Bug Submission</title>; <link rel=""stylesheet"" type=""text/css"" href=""/scanview.css"" />; </head>; <body>; <h3>; <a href=""/"">Summary</a> > ; %(reportingFor)s; %(fileBug)s; Submit</h3>; <form name=""form"" action="""">; <table class=""form"">; <tr><td>; <table class=""form_group"">; <tr>; <td class=""form_clabel"">Title:</td>; <td class=""form_value"">; <input type=""text"" name=""title"" size=""50"" value=""%(title)s"" disabled>; </td>; </tr>; <tr>; <td class=""form_label"">Description:</td>; <td class=""form_value"">; <textarea rows=""10"" cols=""80"" name=""description"" disabled>; %(description)s; </textarea>; </td>; </table>; </td></tr>; </table>; </form>; <h1 class=""%(statusClass)s"">Submission %(statusName)s</h1>; %(message)s; <p>; <hr>; <a href=""/"">Return to Summary</a>; </body>; </html>""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:218,Deployability,update,updateReporterOptions,218,"""""""<html>; <head>; <title>File Bug</title>; <link rel=""stylesheet"" type=""text/css"" href=""/scanview.css"" />; </head>; <script language=""javascript"" type=""text/javascript"">; var reporters = %(reportersArray)s;; function updateReporterOptions() {; index = document.getElementById('reporter').selectedIndex;; for (var i=0; i < reporters.length; ++i) {; o = document.getElementById(reporters[i] + ""ReporterOptions"");; if (i == index) {; o.style.display = """";; } else {; o.style.display = ""none"";; }; }; }; </script>; <body onLoad=""updateReporterOptions()"">; <h3>; <a href=""/"">Summary</a> > ; %(reportingFor)s; File Bug</h3>; <form name=""form"" action=""/report_submit"" method=""post"">; <input type=""hidden"" name=""report"" value=""%(report)s"">. <table class=""form"">; <tr><td>; <table class=""form_group"">; <tr>; <td class=""form_clabel"">Title:</td>; <td class=""form_value"">; <input type=""text"" name=""title"" size=""50"" value=""%(title)s"">; </td>; </tr>; <tr>; <td class=""form_label"">Description:</td>; <td class=""form_value"">; <textarea rows=""10"" cols=""80"" name=""description"">; %(description)s; </textarea>; </td>; </tr>. %(attachFileRow)s. </table>; <br>; <table class=""form_group"">; <tr>; <td class=""form_clabel"">Method:</td>; <td class=""form_value"">; <select id=""reporter"" name=""reporter"" onChange=""updateReporterOptions()"">; %(reporterSelections)s; </select>; </td>; </tr>; %(reporterOptionsDivs)s; </table>; <br>; </td></tr>; <tr><td class=""form_submit"">; <input align=""right"" type=""submit"" name=""Submit"" value=""Submit"">; </td></tr>; </table>; </form>. %(extraIFrame)s. </body>; </html>""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:526,Deployability,update,updateReporterOptions,526,"""""""<html>; <head>; <title>File Bug</title>; <link rel=""stylesheet"" type=""text/css"" href=""/scanview.css"" />; </head>; <script language=""javascript"" type=""text/javascript"">; var reporters = %(reportersArray)s;; function updateReporterOptions() {; index = document.getElementById('reporter').selectedIndex;; for (var i=0; i < reporters.length; ++i) {; o = document.getElementById(reporters[i] + ""ReporterOptions"");; if (i == index) {; o.style.display = """";; } else {; o.style.display = ""none"";; }; }; }; </script>; <body onLoad=""updateReporterOptions()"">; <h3>; <a href=""/"">Summary</a> > ; %(reportingFor)s; File Bug</h3>; <form name=""form"" action=""/report_submit"" method=""post"">; <input type=""hidden"" name=""report"" value=""%(report)s"">. <table class=""form"">; <tr><td>; <table class=""form_group"">; <tr>; <td class=""form_clabel"">Title:</td>; <td class=""form_value"">; <input type=""text"" name=""title"" size=""50"" value=""%(title)s"">; </td>; </tr>; <tr>; <td class=""form_label"">Description:</td>; <td class=""form_value"">; <textarea rows=""10"" cols=""80"" name=""description"">; %(description)s; </textarea>; </td>; </tr>. %(attachFileRow)s. </table>; <br>; <table class=""form_group"">; <tr>; <td class=""form_clabel"">Method:</td>; <td class=""form_value"">; <select id=""reporter"" name=""reporter"" onChange=""updateReporterOptions()"">; %(reporterSelections)s; </select>; </td>; </tr>; %(reporterOptionsDivs)s; </table>; <br>; </td></tr>; <tr><td class=""form_submit"">; <input align=""right"" type=""submit"" name=""Submit"" value=""Submit"">; </td></tr>; </table>; </form>. %(extraIFrame)s. </body>; </html>""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:1286,Deployability,update,updateReporterOptions,1286,"""""""<html>; <head>; <title>File Bug</title>; <link rel=""stylesheet"" type=""text/css"" href=""/scanview.css"" />; </head>; <script language=""javascript"" type=""text/javascript"">; var reporters = %(reportersArray)s;; function updateReporterOptions() {; index = document.getElementById('reporter').selectedIndex;; for (var i=0; i < reporters.length; ++i) {; o = document.getElementById(reporters[i] + ""ReporterOptions"");; if (i == index) {; o.style.display = """";; } else {; o.style.display = ""none"";; }; }; }; </script>; <body onLoad=""updateReporterOptions()"">; <h3>; <a href=""/"">Summary</a> > ; %(reportingFor)s; File Bug</h3>; <form name=""form"" action=""/report_submit"" method=""post"">; <input type=""hidden"" name=""report"" value=""%(report)s"">. <table class=""form"">; <tr><td>; <table class=""form_group"">; <tr>; <td class=""form_clabel"">Title:</td>; <td class=""form_value"">; <input type=""text"" name=""title"" size=""50"" value=""%(title)s"">; </td>; </tr>; <tr>; <td class=""form_label"">Description:</td>; <td class=""form_value"">; <textarea rows=""10"" cols=""80"" name=""description"">; %(description)s; </textarea>; </td>; </tr>. %(attachFileRow)s. </table>; <br>; <table class=""form_group"">; <tr>; <td class=""form_clabel"">Method:</td>; <td class=""form_value"">; <select id=""reporter"" name=""reporter"" onChange=""updateReporterOptions()"">; %(reporterSelections)s; </select>; </td>; </tr>; %(reporterOptionsDivs)s; </table>; <br>; </td></tr>; <tr><td class=""form_submit"">; <input align=""right"" type=""submit"" name=""Submit"" value=""Submit"">; </td></tr>; </table>; </form>. %(extraIFrame)s. </body>; </html>""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:30,Modifiability,variab,variables,30,# Allow a very limited set of variables. This is pretty gross.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py:1680,Availability,avail,available,1680,""""""" Commands for managing clang diagnostic breakpoints. Syntax: clangdiag enable [<warning>|<diag-name>]; clangdiag disable; clangdiag diagtool [<path>|reset]. The following subcommands are supported:. enable -- Enable clang diagnostic breakpoints.; disable -- Disable all clang diagnostic breakpoints.; diagtool -- Return, set, or reset diagtool path. This command sets breakpoints in clang, and clang based tools, that; emit diagnostics. When a diagnostic is emitted, and clangdiag is; enabled, it will use the appropriate diagtool application to determine; the name of the DiagID, and set breakpoints in all locations that; 'diag::name' appears in the source. Since the new breakpoints are set; after they are encountered, users will need to launch the executable a; second time in order to hit the new breakpoints. For in-tree builds, the diagtool application, used to map DiagID's to; names, is found automatically in the same directory as the target; executable. However, out-or-tree builds must use the 'diagtool'; subcommand to set the appropriate path for diagtool in the clang debug; bin directory. Since this mapping is created at build-time, it's; important for users to use the same version that was generated when; clang was compiled, or else the id's won't match. Notes:; - Substrings can be passed for both <warning> and <diag-name>.; - If <warning> is passed, only enable the DiagID(s) for that warning.; - If <diag-name> is passed, only enable that DiagID.; - Rerunning enable clears existing breakpoints.; - diagtool is used in breakpoint callbacks, so it can be changed; without the need to rerun enable.; - Adding this to your ~.lldbinit file makes clangdiag available at startup:; ""command script import /path/to/clangdiag.py"". """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/clangdiag.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py:1495,Usability,clear,clears,1495,""""""" Commands for managing clang diagnostic breakpoints. Syntax: clangdiag enable [<warning>|<diag-name>]; clangdiag disable; clangdiag diagtool [<path>|reset]. The following subcommands are supported:. enable -- Enable clang diagnostic breakpoints.; disable -- Disable all clang diagnostic breakpoints.; diagtool -- Return, set, or reset diagtool path. This command sets breakpoints in clang, and clang based tools, that; emit diagnostics. When a diagnostic is emitted, and clangdiag is; enabled, it will use the appropriate diagtool application to determine; the name of the DiagID, and set breakpoints in all locations that; 'diag::name' appears in the source. Since the new breakpoints are set; after they are encountered, users will need to launch the executable a; second time in order to hit the new breakpoints. For in-tree builds, the diagtool application, used to map DiagID's to; names, is found automatically in the same directory as the target; executable. However, out-or-tree builds must use the 'diagtool'; subcommand to set the appropriate path for diagtool in the clang debug; bin directory. Since this mapping is created at build-time, it's; important for users to use the same version that was generated when; clang was compiled, or else the id's won't match. Notes:; - Substrings can be passed for both <warning> and <diag-name>.; - If <warning> is passed, only enable the DiagID(s) for that warning.; - If <diag-name> is passed, only enable that DiagID.; - Rerunning enable clears existing breakpoints.; - diagtool is used in breakpoint callbacks, so it can be changed; without the need to rerun enable.; - Adding this to your ~.lldbinit file makes clangdiag available at startup:; ""command script import /path/to/clangdiag.py"". """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/clangdiag.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py:16,Testability,test,test,16,"# Don't need to test this time, since we did that in enable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/clangdiag.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py:29,Availability,error,errors,29,"# Make sure we only consider errors, warnings, and extensions.; # FIXME: Make this configurable?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/clangdiag.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py:83,Modifiability,config,configurable,83,"# Make sure we only consider errors, warnings, and extensions.; # FIXME: Make this configurable?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/clangdiag.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py:29,Availability,error,errors,29,"# Make sure we only consider errors, warnings, and extensions.; # FIXME: Make this configurable?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/clangdiag.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py:83,Modifiability,config,configurable,83,"# Make sure we only consider errors, warnings, and extensions.; # FIXME: Make this configurable?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/clangdiag.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/convert_arm_neon.py:130,Deployability,release,release,130,"#!/usr/bin/env python3; # This script was committed on 20/11/2019 and it would probably make sense to remove; # it after the next release branches.; # This script is pipe based and converts an arm_neon.td (or arm_fp16.td) file; # using the old single-char type modifiers to an equivalent new-style form where; # each modifier is orthogonal and they can be composed.; #; # It was used to directly generate the .td files on main, so if you have any; # local additions I would suggest implementing any modifiers here, and running; # it over your entire pre-merge .td files rather than trying to resolve any; # conflicts manually.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/convert_arm_neon.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/convert_arm_neon.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:85,Energy Efficiency,reduce,reduced,85,"""""""Calls C-Reduce to create a minimal reproducer for clang crashes. Output files:; *.reduced.sh -- crash reproducer with minimal arguments; *.reduced.cpp -- the reduced file; *.test.sh -- interestingness test for C-Reduce; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:142,Energy Efficiency,reduce,reduced,142,"""""""Calls C-Reduce to create a minimal reproducer for clang crashes. Output files:; *.reduced.sh -- crash reproducer with minimal arguments; *.reduced.cpp -- the reduced file; *.test.sh -- interestingness test for C-Reduce; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:161,Energy Efficiency,reduce,reduced,161,"""""""Calls C-Reduce to create a minimal reproducer for clang crashes. Output files:; *.reduced.sh -- crash reproducer with minimal arguments; *.reduced.cpp -- the reduced file; *.test.sh -- interestingness test for C-Reduce; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:177,Testability,test,test,177,"""""""Calls C-Reduce to create a minimal reproducer for clang crashes. Output files:; *.reduced.sh -- crash reproducer with minimal arguments; *.reduced.cpp -- the reduced file; *.test.sh -- interestingness test for C-Reduce; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:204,Testability,test,test,204,"""""""Calls C-Reduce to create a minimal reproducer for clang crashes. Output files:; *.reduced.sh -- crash reproducer with minimal arguments; *.reduced.cpp -- the reduced file; *.test.sh -- interestingness test for C-Reduce; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:40,Testability,test,test,40,# Make the path absolute so the creduce test can be run from any directory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:20,Availability,error,error,20,# Look for specific error messages,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:26,Integrability,message,messages,26,# Look for specific error messages,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:8,Testability,assert,assert,8,# Linux assert(),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:14,Testability,assert,assert,14,# FreeBSD/Mac assert(),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:8,Integrability,message,message,8,"# If no message was found, use the top five stack trace functions,; # ignoring some common functions; # Five is a somewhat arbitrary number; the goal is to get a small number; # of identifying functions with some leeway for common functions",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:48,Safety,avoid,avoid,48,# Disable symbolization if it's not required to avoid slow symbolization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:31,Testability,log,log,31,"""""""#!/bin/bash; %s; if %s >& t.log ; then; exit 1; fi; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:17,Testability,test,test,17,# Check that the test considers the original file interesting,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:90,Testability,test,test,90,"# Check that an empty file is not interesting; # Instead of modifying the filename in the test file, just run the command",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:55,Energy Efficiency,reduce,reduce,55,"""""""Simplify clang arguments before running C-Reduce to reduce the time the; interestingness test takes to run.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:92,Testability,test,test,92,"""""""Simplify clang arguments before running C-Reduce to reduce the time the; interestingness test takes to run.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:62,Testability,test,test,62,# Remove some clang arguments to speed up the interestingness test,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:30,Availability,error,error,30,# Try to make implicit int an error for more sensible test output,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:54,Testability,test,test,54,# Try to make implicit int an error for more sensible test output,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:118,Energy Efficiency,reduce,reduced,118,"""""""Minimize the clang arguments after running C-Reduce, to get the smallest; command that reproduces the crash on the reduced file.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/modfuzz.py:87,Deployability,configurat,configuration,87,#!/usr/bin/env python; # To use:; # 1) Update the 'decls' list below with your fuzzing configuration.; # 2) Run with the clang binary as the command-line argument.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/modfuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/modfuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/modfuzz.py:87,Modifiability,config,configuration,87,#!/usr/bin/env python; # To use:; # 1) Update the 'decls' list below with your fuzzing configuration.; # 2) Run with the clang binary as the command-line argument.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/modfuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/modfuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:73,Energy Efficiency,reduce,reduce,73,# There is no reason to cache successful tests because we will; # always reduce the changeset when we see one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:24,Performance,cache,cache,24,# There is no reason to cache successful tests because we will; # always reduce the changeset when we see one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:41,Testability,test,tests,41,# There is no reason to cache successful tests because we will; # always reduce the changeset when we see one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:24,Testability,test,test,24,"# Make sure the initial test passes, if not then (a) either; # the user doesn't expect monotonicity, and we may end up; # doing O(N^2) tests, or (b) the test is wrong. Avoid the; # O(N^2) case unless user requests it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:135,Testability,test,tests,135,"# Make sure the initial test passes, if not then (a) either; # the user doesn't expect monotonicity, and we may end up; # doing O(N^2) tests, or (b) the test is wrong. Avoid the; # O(N^2) case unless user requests it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:153,Testability,test,test,153,"# Make sure the initial test passes, if not then (a) either; # the user doesn't expect monotonicity, and we may end up; # doing O(N^2) tests, or (b) the test is wrong. Avoid the; # O(N^2) case unless user requests it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:45,Testability,test,test,45,# Check empty set first to quickly find poor test functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:9,Energy Efficiency,reduce,reduce,9,"# assert(reduce(set.union, sets, set()) == c); # If there is nothing left we can remove, we are done.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:2,Testability,assert,assert,2,"# assert(reduce(set.union, sets, set()) == c); # If there is nothing left we can remove, we are done.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:5,Testability,test,test,5,"# If test passes on this subset alone, recurse.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:50,Testability,test,test,50,"# Otherwise if we have more than two sets, see if test; # pases without this subset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:39,Usability,simpl,simple,39,# Silly programmers refuse to print in simple machine readable; # formats. Whatever.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:26,Performance,cache,cache,26,# Avoid freeing our giant cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/update_options_td_flags.py:236,Availability,down,downstream,236,"""""""Update Options.td for the flags changes in https://reviews.llvm.org/Dxyz. This script translates Options.td from using Flags to control option visibility; to using Vis instead. It is meant to be idempotent and usable to help update; downstream forks if they have their own changes to Options.td. Usage:; ```sh; % update_options_td_flags.py path/to/Options.td > Options.td.new; % mv Options.td.new path/to/Options.td; ```. This script will be removed after the next LLVM release.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/update_options_td_flags.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/update_options_td_flags.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/update_options_td_flags.py:228,Deployability,update,update,228,"""""""Update Options.td for the flags changes in https://reviews.llvm.org/Dxyz. This script translates Options.td from using Flags to control option visibility; to using Vis instead. It is meant to be idempotent and usable to help update; downstream forks if they have their own changes to Options.td. Usage:; ```sh; % update_options_td_flags.py path/to/Options.td > Options.td.new; % mv Options.td.new path/to/Options.td; ```. This script will be removed after the next LLVM release.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/update_options_td_flags.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/update_options_td_flags.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/update_options_td_flags.py:473,Deployability,release,release,473,"""""""Update Options.td for the flags changes in https://reviews.llvm.org/Dxyz. This script translates Options.td from using Flags to control option visibility; to using Vis instead. It is meant to be idempotent and usable to help update; downstream forks if they have their own changes to Options.td. Usage:; ```sh; % update_options_td_flags.py path/to/Options.td > Options.td.new; % mv Options.td.new path/to/Options.td; ```. This script will be removed after the next LLVM release.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/update_options_td_flags.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/update_options_td_flags.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/update_options_td_flags.py:213,Usability,usab,usable,213,"""""""Update Options.td for the flags changes in https://reviews.llvm.org/Dxyz. This script translates Options.td from using Flags to control option visibility; to using Vis instead. It is meant to be idempotent and usable to help update; downstream forks if they have their own changes to Options.td. Usage:; ```sh; % update_options_td_flags.py path/to/Options.td > Options.td.new; % mv Options.td.new path/to/Options.td; ```. This script will be removed after the next LLVM release.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/update_options_td_flags.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/update_options_td_flags.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/update_options_td_flags.py:8,Integrability,wrap,wrapping,8,"# Avoid wrapping the , or ; to the new line",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/update_options_td_flags.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/update_options_td_flags.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py:40,Security,access,access,40,# FIXME: Use designated initializers to access non-first; # fields of unions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py:45,Modifiability,portab,portably,45,# Access in this fashion as a hackish way to portably; # access vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py:57,Security,access,access,57,# Access in this fashion as a hackish way to portably; # access vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py:45,Modifiability,portab,portably,45,# Access in this fashion as a hackish way to portably; # access vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py:57,Security,access,access,57,# Access in this fashion as a hackish way to portably; # access vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py:24,Safety,avoid,avoid,24,"# Fully recursive, just avoid top-level arrays.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py:2,Testability,assert,assert,2,# assert base(lo) <= N < base(hi),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/Enumeration.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py:12,Usability,simpl,simplify,12,# Otherwise simplify by assuming W < H,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/Enumeration.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py:63,Integrability,wrap,wrap,63,"# Otherwise, compile line and index from number of times we; # wrap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/Enumeration.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py:53,Integrability,rout,routines,53,###; # Toggle to use checked versions of enumeration routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/Enumeration.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/TypeGen.py:34,Modifiability,flexible,flexible,34,"# TODO:; # - struct improvements (flexible arrays, packed &; # unpacked, alignment); # - objective-c qualified id; # - anonymous / transparent unions; # - VLAs; # - block types; # - K&R functions; # - pass arguments of different types (test extension, transparent union); # - varargs; ###; # Actual type types",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/TypeGen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/TypeGen.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/TypeGen.py:236,Testability,test,test,236,"# TODO:; # - struct improvements (flexible arrays, packed &; # unpacked, alignment); # - objective-c qualified id; # - anonymous / transparent unions; # - VLAs; # - block types; # - K&R functions; # - pass arguments of different types (test extension, transparent union); # - varargs; ###; # Actual type types",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/TypeGen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/TypeGen.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:368,Deployability,integrat,integrate,368,"""""""; CmpRuns - A simple tool for comparing two static analyzer runs to determine; which reports have been added, removed, or changed. This is designed to support automated testing using the static analyzer, from; two perspectives:; 1. To monitor changes in the static analyzer's reports on real code bases,; for regression testing. 2. For use by end users who want to integrate regular static analyzer testing; into a buildbot like environment. Usage:. # Load the results of both runs, to obtain lists of the corresponding; # AnalysisDiagnostic objects.; #; resultsA = load_results_from_single_run(singleRunInfoA, delete_empty); resultsB = load_results_from_single_run(singleRunInfoB, delete_empty). # Generate a relation from diagnostics in run A to diagnostics in run B; # to obtain a list of triples (a, b, confidence).; diff = compare_results(resultsA, resultsB). """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:238,Energy Efficiency,monitor,monitor,238,"""""""; CmpRuns - A simple tool for comparing two static analyzer runs to determine; which reports have been added, removed, or changed. This is designed to support automated testing using the static analyzer, from; two perspectives:; 1. To monitor changes in the static analyzer's reports on real code bases,; for regression testing. 2. For use by end users who want to integrate regular static analyzer testing; into a buildbot like environment. Usage:. # Load the results of both runs, to obtain lists of the corresponding; # AnalysisDiagnostic objects.; #; resultsA = load_results_from_single_run(singleRunInfoA, delete_empty); resultsB = load_results_from_single_run(singleRunInfoB, delete_empty). # Generate a relation from diagnostics in run A to diagnostics in run B; # to obtain a list of triples (a, b, confidence).; diff = compare_results(resultsA, resultsB). """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:368,Integrability,integrat,integrate,368,"""""""; CmpRuns - A simple tool for comparing two static analyzer runs to determine; which reports have been added, removed, or changed. This is designed to support automated testing using the static analyzer, from; two perspectives:; 1. To monitor changes in the static analyzer's reports on real code bases,; for regression testing. 2. For use by end users who want to integrate regular static analyzer testing; into a buildbot like environment. Usage:. # Load the results of both runs, to obtain lists of the corresponding; # AnalysisDiagnostic objects.; #; resultsA = load_results_from_single_run(singleRunInfoA, delete_empty); resultsB = load_results_from_single_run(singleRunInfoB, delete_empty). # Generate a relation from diagnostics in run A to diagnostics in run B; # to obtain a list of triples (a, b, confidence).; diff = compare_results(resultsA, resultsB). """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:172,Testability,test,testing,172,"""""""; CmpRuns - A simple tool for comparing two static analyzer runs to determine; which reports have been added, removed, or changed. This is designed to support automated testing using the static analyzer, from; two perspectives:; 1. To monitor changes in the static analyzer's reports on real code bases,; for regression testing. 2. For use by end users who want to integrate regular static analyzer testing; into a buildbot like environment. Usage:. # Load the results of both runs, to obtain lists of the corresponding; # AnalysisDiagnostic objects.; #; resultsA = load_results_from_single_run(singleRunInfoA, delete_empty); resultsB = load_results_from_single_run(singleRunInfoB, delete_empty). # Generate a relation from diagnostics in run A to diagnostics in run B; # to obtain a list of triples (a, b, confidence).; diff = compare_results(resultsA, resultsB). """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:323,Testability,test,testing,323,"""""""; CmpRuns - A simple tool for comparing two static analyzer runs to determine; which reports have been added, removed, or changed. This is designed to support automated testing using the static analyzer, from; two perspectives:; 1. To monitor changes in the static analyzer's reports on real code bases,; for regression testing. 2. For use by end users who want to integrate regular static analyzer testing; into a buildbot like environment. Usage:. # Load the results of both runs, to obtain lists of the corresponding; # AnalysisDiagnostic objects.; #; resultsA = load_results_from_single_run(singleRunInfoA, delete_empty); resultsB = load_results_from_single_run(singleRunInfoB, delete_empty). # Generate a relation from diagnostics in run A to diagnostics in run B; # to obtain a list of triples (a, b, confidence).; diff = compare_results(resultsA, resultsB). """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:402,Testability,test,testing,402,"""""""; CmpRuns - A simple tool for comparing two static analyzer runs to determine; which reports have been added, removed, or changed. This is designed to support automated testing using the static analyzer, from; two perspectives:; 1. To monitor changes in the static analyzer's reports on real code bases,; for regression testing. 2. For use by end users who want to integrate regular static analyzer testing; into a buildbot like environment. Usage:. # Load the results of both runs, to obtain lists of the corresponding; # AnalysisDiagnostic objects.; #; resultsA = load_results_from_single_run(singleRunInfoA, delete_empty); resultsB = load_results_from_single_run(singleRunInfoB, delete_empty). # Generate a relation from diagnostics in run A to diagnostics in run B; # to obtain a list of triples (a, b, confidence).; diff = compare_results(resultsA, resultsB). """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:17,Usability,simpl,simple,17,"""""""; CmpRuns - A simple tool for comparing two static analyzer runs to determine; which reports have been added, removed, or changed. This is designed to support automated testing using the static analyzer, from; two perspectives:; 1. To monitor changes in the static analyzer's reports on real code bases,; for regression testing. 2. For use by end users who want to integrate regular static analyzer testing; into a buildbot like environment. Usage:. # Load the results of both runs, to obtain lists of the corresponding; # AnalysisDiagnostic objects.; #; resultsA = load_results_from_single_run(singleRunInfoA, delete_empty); resultsB = load_results_from_single_run(singleRunInfoB, delete_empty). # Generate a relation from diagnostics in run A to diagnostics in run B; # to obtain a list of triples (a, b, confidence).; diff = compare_results(resultsA, resultsB). """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:175,Energy Efficiency,efficient,efficient,175,# We want to retrieve the clang version even if there are no; # reports. Assume that all reports were created using the same; # clang version (this is always true and is more efficient).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:58,Testability,assert,assertion,58,"# Python 3.10 offers zip(..., strict=True). The following assertion; # mimics it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:293,Integrability,depend,depend,293,"# FIXME: Add fuzzy matching. One simple and possible effective idea would; # be to bin the diagnostics, print them in a normalized form (based solely; # on the structure of the diagnostic), compute the diff, then use that as; # the basis for matching. This has the nice property that we don't depend; # in any way on the diagnostic format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:33,Usability,simpl,simple,33,"# FIXME: Add fuzzy matching. One simple and possible effective idea would; # be to bin the diagnostics, print them in a normalized form (based solely; # on the structure of the diagnostic), compute the diff, then use that as; # the basis for matching. This has the nice property that we don't depend; # in any way on the diagnostic format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:386,Testability,log,log,386,"""""""; Compare directories with analysis results and dump results. :param delete_empty: delete empty plist files; :param out: buffer to dump comparison results to.; :param show_stats: compare execution stats as well.; :param stats_only: compare ONLY execution stats.; :param histogram: optional histogram type to plot path differences.; :param verbose_log: optional path to an additional log file.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:19,Testability,log,log,19,"# Open the verbose log, if given.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py:48,Modifiability,rewrite,rewriter,48,"#!/usr/bin/env python; #; # ===- exploded-graph-rewriter.py - ExplodedGraph dump tool -----*- python -*--#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===-----------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py:15,Integrability,message,messages,15,# Deserialized messages from a single checker in a single program state.; # Basically a list of raw strings.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py:15,Integrability,message,messages,15,"# Deserialized messages of all checkers, separated by checker.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py:106,Testability,test,tests,106,"# Allow line breaks by waiting for ';'. This is not valid in; # a .dot file, but it is useful for writing tests.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py:21,Testability,test,tests,21,"# Note: when writing tests you don't need to escape everything,; # even though in a valid dot file everything is escaped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py:7,Safety,avoid,avoids,7,# This avoids pretty-printing huge statements such as CompoundStmt.; # Such statements show up only at [Pre|Post]StmtPurgeDeadSymbols,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py:43,Deployability,install,installed,43,# The fallback behavior if graphviz is not installed!,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATest.py:2,Security,validat,validate,2,# validate that given projects are present in the project map file,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATest.py:2,Deployability,update,update,2,# update subcommand,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATest.py:2,Testability,benchmark,benchmark,2,# benchmark subcommand,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:689,Availability,down,download,689,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:758,Availability,down,download,758,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:1395,Availability,down,download,1395,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:1414,Availability,down,download,1414,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:1205,Deployability,patch,patch,1205,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:1225,Deployability,patch,patch,1225,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:1379,Deployability,patch,patch,1379,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:1659,Deployability,patch,patch,1659,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:1270,Energy Efficiency,adapt,adapt,1270,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:636,Modifiability,config,configure,636,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:1270,Modifiability,adapt,adapt,1270,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:124,Testability,test,testing,124,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:27,Testability,test,testing,27,"""""""; Add a new project for testing: build it and add to the Project Map file.; :param name: is a short string used to identify a project.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py:401,Integrability,rout,routine,401,"""""""; Static Analyzer qualification infrastructure. This source file contains all the functionality related to benchmarking; the analyzer on a set projects. Right now, this includes measuring; execution time and peak memory usage. Benchmark runs analysis on every; project multiple times to get a better picture about the distribution; of measured values. Additionally, this file includes a comparison routine for two benchmarking; results that plots the result together on one chart.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py:110,Testability,benchmark,benchmarking,110,"""""""; Static Analyzer qualification infrastructure. This source file contains all the functionality related to benchmarking; the analyzer on a set projects. Right now, this includes measuring; execution time and peak memory usage. Benchmark runs analysis on every; project multiple times to get a better picture about the distribution; of measured values. Additionally, this file includes a comparison routine for two benchmarking; results that plots the result together on one chart.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py:417,Testability,benchmark,benchmarking,417,"""""""; Static Analyzer qualification infrastructure. This source file contains all the functionality related to benchmarking; the analyzer on a set projects. Right now, this includes measuring; execution time and peak memory usage. Benchmark runs analysis on every; project multiple times to get a better picture about the distribution; of measured values. Additionally, this file includes a comparison routine for two benchmarking; results that plots the result together on one chart.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py:17,Testability,benchmark,benchmarking,17,"""""""; Compare two benchmarking results stored as .csv files; and produce a plot in the specified file.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py:65,Testability,test,tests,65,# TODO: compare data in old and new dataframes using statistical tests; # to check if they belong to the same distribution,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:123,Availability,failure,failures,123,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:753,Availability,error,error,753,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:783,Availability,error,errors,783,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:853,Availability,failure,failure,853,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:1252,Modifiability,variab,variables,1252,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:1408,Modifiability,variab,variable,1408,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:1496,Modifiability,variab,variable,1496,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:162,Performance,perform,performance,162,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:66,Testability,test,test,66,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:525,Testability,test,test,525,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:768,Testability,log,logs,768,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:972,Testability,log,log,972,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:1231,Testability,log,logging,1231,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:1371,Testability,test,tested,1371,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:1423,Testability,test,testing,1423,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:37,Integrability,message,messages,37,# TODO: use debug levels for VERBOSE messages,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:60,Availability,down,downloads,60,# Names of the project specific scripts.; # The script that downloads the project.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:45,Integrability,wrap,wrapping,45,# A comment in a build script which disables wrapping.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:6,Testability,log,log,6,# The log file name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:45,Availability,failure,failures,45,# Summary file - contains the summary of the failures. Ex: This info can be be; # displayed when buildbot detects a build failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:122,Availability,failure,failure,122,# Summary file - contains the summary of the failures. Ex: This info can be be; # displayed when buildbot detects a build failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:106,Safety,detect,detects,106,# Summary file - contains the summary of the failures. Ex: This info can be be; # displayed when buildbot detects a build failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:104,Availability,down,download,104,"# The name of the directory storing the cached project source. If this; # directory does not exist, the download script will be executed.; # That script should create the ""CachedSource"" directory and download the; # project source into it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:200,Availability,down,download,200,"# The name of the directory storing the cached project source. If this; # directory does not exist, the download script will be executed.; # That script should create the ""CachedSource"" directory and download the; # project source into it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:40,Performance,cache,cached,40,"# The name of the directory storing the cached project source. If this; # directory does not exist, the download script will be executed.; # That script should create the ""CachedSource"" directory and download the; # project source into it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:225,Deployability,patch,patches,225,"# The name of the directory containing the source code that will be analyzed.; # Each time a project is analyzed, a fresh copy of its CachedSource directory; # will be copied to the PatchedSource directory and then the local patches; # in PATCHFILE_NAME will be applied (if PATCHFILE_NAME exists).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:18,Deployability,patch,patchfile,18,# The name of the patchfile specifying any changes that should be applied; # to the CachedSource before analyzing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:96,Testability,log,logic,96,###############################################################################; # Test harness logic.; ###############################################################################,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:133,Performance,queue,queue,133,"# typing package doesn't have a separate type for Queue, but has a generic stub; # We still want to have a type-safe checked project queue, for this reason,; # we specify generic type for mypy.; #; # It is a common workaround for this situation:; # https://mypy.readthedocs.io/en/stable/common_issues.html#using-classes-that-are-generic-in-stubs-but-not-at-runtime",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:112,Safety,safe,safe,112,"# typing package doesn't have a separate type for Queue, but has a generic stub; # We still want to have a type-safe checked project queue, for this reason,; # we specify generic type for mypy.; #; # It is a common workaround for this situation:; # https://mypy.readthedocs.io/en/stable/common_issues.html#using-classes-that-are-generic-in-stubs-but-not-at-runtime",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:75,Testability,stub,stub,75,"# typing package doesn't have a separate type for Queue, but has a generic stub; # We still want to have a type-safe checked project queue, for this reason,; # we specify generic type for mypy.; #; # It is a common workaround for this situation:; # https://mypy.readthedocs.io/en/stable/common_issues.html#using-classes-that-are-generic-in-stubs-but-not-at-runtime",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:340,Testability,stub,stubs-but-not-at-runtime,340,"# typing package doesn't have a separate type for Queue, but has a generic stub; # We still want to have a type-safe checked project queue, for this reason,; # we specify generic type for mypy.; #; # It is a common workaround for this situation:; # https://mypy.readthedocs.io/en/stable/common_issues.html#using-classes-that-are-generic-in-stubs-but-not-at-runtime",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:48,Testability,test,testing,48,"""""""; A component aggregating all of the project testing.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:41,Testability,test,tests,41,"""""""; Run all projects.; :return: whether tests have passed.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:71,Testability,test,testing,71,"""""""; Run each project in a separate thread. This is OK despite GIL, as testing is blocked; on launching external processes. :return: whether tests have passed.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:141,Testability,test,tests,141,"""""""; Run each project in a separate thread. This is OK despite GIL, as testing is blocked; on launching external processes. :return: whether tests have passed.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:29,Testability,test,testing,29,"""""""; A component aggregating testing for one project.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:58,Testability,test,tests,58,"""""""; Test a given project.; :return tests_passed: Whether tests have passed according; to the :param strictness: criteria.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:33,Deployability,patch,patched,33,# Run scan-build from within the patched source directory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:105,Modifiability,variab,variables,105,# Custom analyzer invocation specified by project.; # Communicate required information using environment variables; # instead.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:37,Testability,log,log,37,"# If command did not fail, erase the log file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:46,Deployability,patch,patchfile,46,"""""""; Download the project and apply the local patchfile if it exists.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:71,Availability,down,download,71,"# If the we don't already have the cached source, run the project's; # download script to download it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:90,Availability,down,download,90,"# If the we don't already have the cached source, run the project's; # download script to download it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:35,Performance,cache,cached,35,"# If the we don't already have the cached source, run the project's; # download script to download it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:27,Deployability,patch,patched,27,# Remove potentially stale patched source.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:39,Deployability,patch,patches,39,# Copy the cached source and apply any patches to the copy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:11,Performance,cache,cached,11,# Copy the cached source and apply any patches to the copy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:23,Availability,down,download,23,"""""""; Run the script to download the project, if it exists.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:130,Availability,failure,failure,130,"""""""; :param results_differ: Used to signify that results differ from; the canonical ones.; :param failure_flag: Used to signify a failure during the run.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:94,Availability,failure,failures,94,"""""""; Given the scan-build output directory, checks if the build failed; (by searching for the failures directories). If there are failures, it; creates a summary file in the output directory. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:130,Availability,failure,failures,130,"""""""; Given the scan-build output directory, checks if the build failed; (by searching for the failures directories). If there are failures, it; creates a summary file in the output directory. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:21,Availability,failure,failures,21,# Check if there are failures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:102,Testability,benchmark,benchmark,102,"""""""; Delete html, css, and js files from reference results. These can; include multiple copies of the benchmark source and so get very large.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:13,Testability,log,log,13,# Remove the log file. It leaks absolute path names.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:154,Availability,failure,failure,154,"""""""; Compare the warnings produced by scan-build.; strictness defines the success criteria for the test:; 0 - success if there are no crashes or analyzer failure.; 1 - success if there are no difference in the number of reported bugs.; 2 - success if all the bug reports are identical. :return success: Whether tests pass according to the strictness; criteria.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:99,Testability,test,test,99,"""""""; Compare the warnings produced by scan-build.; strictness defines the success criteria for the test:; 0 - success if there are no crashes or analyzer failure.; 1 - success if there are no difference in the number of reported bugs.; 2 - success if all the bug reports are identical. :return success: Whether tests pass according to the strictness; criteria.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:311,Testability,test,tests,311,"""""""; Compare the warnings produced by scan-build.; strictness defines the success criteria for the test:; 0 - success if there are no crashes or analyzer failure.; 1 - success if there are no difference in the number of reported bugs.; 2 - success if all the bug reports are identical. :return success: Whether tests pass according to the strictness; criteria.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:26,Availability,down,down,26,# We have to go one level down the directory tree.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:99,Modifiability,config,configure,99,# There might be more then one folder underneath - one per each scan-build; # command (Ex: one for configure and one for make).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:15,Testability,log,log,15,# Clean up the log file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestUtils.py:101,Modifiability,variab,variable,101,"""""""which(command, [paths]) - Look up the given command in the paths string; (or the PATH environment variable, if unspecified).""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestUtils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestUtils.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestUtils.py:15,Deployability,install,installed,15,"# no formatter installed, let's keep it in bytes",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestUtils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestUtils.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestUtils.py:106,Energy Efficiency,consumption,consumption,106,"""""""; Run command with arguments. Wait for command to complete and measure; execution time and peak memory consumption.; If the exit code was zero then return, otherwise raise; CalledProcessError. The CalledProcessError object will have the; return code in the returncode attribute. The arguments are the same as for the call and check_call functions. Return a tuple of execution time and peak memory.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestUtils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestUtils.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestUtils.py:49,Deployability,install,installed,49,# back off to subprocess if we don't have psutil installed,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestUtils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestUtils.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:66,Integrability,wrap,wrapper,66,"""""""Check CFC - Check Compile Flow Consistency. This is a compiler wrapper for testing that code generation is consistent with; different compilation processes. It checks that code is not unduly affected by; compiler options or other changes which should not have side effects. To use:; -Ensure that the compiler under test (i.e. clang, clang++) is on the PATH; -On Linux copy this script to the name of the compiler; e.g. cp check_cfc.py clang && cp check_cfc.py clang++; -On Windows use setup.py to generate check_cfc.exe and copy that to clang.exe; and clang++.exe; -Enable the desired checks in check_cfc.cfg (in the same directory as the; wrapper); e.g.; [Checks]; dash_g_no_change = true; dash_s_no_change = false. -The wrapper can be run using its absolute path or added to PATH before the; compiler under test; e.g. export PATH=<path to check_cfc>:$PATH; -Compile as normal. The wrapper intercepts normal -c compiles and will return; non-zero if the check fails.; e.g.; $ clang -c test.cpp; Code difference detected with -g; --- /tmp/tmp5nv893.o; +++ /tmp/tmp6Vwjnc.o; @@ -1 +1 @@; - 0: 48 8b 05 51 0b 20 00 mov 0x200b51(%rip),%rax; + 0: 48 39 3d 51 0b 20 00 cmp %rdi,0x200b51(%rip). -To run LNT with Check CFC specify the absolute path to the wrapper to the --cc; and --cxx options; e.g.; lnt runtest nt --cc <path to check_cfc>/clang \\; --cxx <path to check_cfc>/clang++ ... To add a new check:; -Create a new subclass of WrapperCheck; -Implement the perform_check() method. This should perform the alternate compile; and do the comparison.; -Add the new check to check_cfc.cfg. The check has the same name as the; subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:643,Integrability,wrap,wrapper,643,"""""""Check CFC - Check Compile Flow Consistency. This is a compiler wrapper for testing that code generation is consistent with; different compilation processes. It checks that code is not unduly affected by; compiler options or other changes which should not have side effects. To use:; -Ensure that the compiler under test (i.e. clang, clang++) is on the PATH; -On Linux copy this script to the name of the compiler; e.g. cp check_cfc.py clang && cp check_cfc.py clang++; -On Windows use setup.py to generate check_cfc.exe and copy that to clang.exe; and clang++.exe; -Enable the desired checks in check_cfc.cfg (in the same directory as the; wrapper); e.g.; [Checks]; dash_g_no_change = true; dash_s_no_change = false. -The wrapper can be run using its absolute path or added to PATH before the; compiler under test; e.g. export PATH=<path to check_cfc>:$PATH; -Compile as normal. The wrapper intercepts normal -c compiles and will return; non-zero if the check fails.; e.g.; $ clang -c test.cpp; Code difference detected with -g; --- /tmp/tmp5nv893.o; +++ /tmp/tmp6Vwjnc.o; @@ -1 +1 @@; - 0: 48 8b 05 51 0b 20 00 mov 0x200b51(%rip),%rax; + 0: 48 39 3d 51 0b 20 00 cmp %rdi,0x200b51(%rip). -To run LNT with Check CFC specify the absolute path to the wrapper to the --cc; and --cxx options; e.g.; lnt runtest nt --cc <path to check_cfc>/clang \\; --cxx <path to check_cfc>/clang++ ... To add a new check:; -Create a new subclass of WrapperCheck; -Implement the perform_check() method. This should perform the alternate compile; and do the comparison.; -Add the new check to check_cfc.cfg. The check has the same name as the; subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:725,Integrability,wrap,wrapper,725,"""""""Check CFC - Check Compile Flow Consistency. This is a compiler wrapper for testing that code generation is consistent with; different compilation processes. It checks that code is not unduly affected by; compiler options or other changes which should not have side effects. To use:; -Ensure that the compiler under test (i.e. clang, clang++) is on the PATH; -On Linux copy this script to the name of the compiler; e.g. cp check_cfc.py clang && cp check_cfc.py clang++; -On Windows use setup.py to generate check_cfc.exe and copy that to clang.exe; and clang++.exe; -Enable the desired checks in check_cfc.cfg (in the same directory as the; wrapper); e.g.; [Checks]; dash_g_no_change = true; dash_s_no_change = false. -The wrapper can be run using its absolute path or added to PATH before the; compiler under test; e.g. export PATH=<path to check_cfc>:$PATH; -Compile as normal. The wrapper intercepts normal -c compiles and will return; non-zero if the check fails.; e.g.; $ clang -c test.cpp; Code difference detected with -g; --- /tmp/tmp5nv893.o; +++ /tmp/tmp6Vwjnc.o; @@ -1 +1 @@; - 0: 48 8b 05 51 0b 20 00 mov 0x200b51(%rip),%rax; + 0: 48 39 3d 51 0b 20 00 cmp %rdi,0x200b51(%rip). -To run LNT with Check CFC specify the absolute path to the wrapper to the --cc; and --cxx options; e.g.; lnt runtest nt --cc <path to check_cfc>/clang \\; --cxx <path to check_cfc>/clang++ ... To add a new check:; -Create a new subclass of WrapperCheck; -Implement the perform_check() method. This should perform the alternate compile; and do the comparison.; -Add the new check to check_cfc.cfg. The check has the same name as the; subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:886,Integrability,wrap,wrapper,886,"""""""Check CFC - Check Compile Flow Consistency. This is a compiler wrapper for testing that code generation is consistent with; different compilation processes. It checks that code is not unduly affected by; compiler options or other changes which should not have side effects. To use:; -Ensure that the compiler under test (i.e. clang, clang++) is on the PATH; -On Linux copy this script to the name of the compiler; e.g. cp check_cfc.py clang && cp check_cfc.py clang++; -On Windows use setup.py to generate check_cfc.exe and copy that to clang.exe; and clang++.exe; -Enable the desired checks in check_cfc.cfg (in the same directory as the; wrapper); e.g.; [Checks]; dash_g_no_change = true; dash_s_no_change = false. -The wrapper can be run using its absolute path or added to PATH before the; compiler under test; e.g. export PATH=<path to check_cfc>:$PATH; -Compile as normal. The wrapper intercepts normal -c compiles and will return; non-zero if the check fails.; e.g.; $ clang -c test.cpp; Code difference detected with -g; --- /tmp/tmp5nv893.o; +++ /tmp/tmp6Vwjnc.o; @@ -1 +1 @@; - 0: 48 8b 05 51 0b 20 00 mov 0x200b51(%rip),%rax; + 0: 48 39 3d 51 0b 20 00 cmp %rdi,0x200b51(%rip). -To run LNT with Check CFC specify the absolute path to the wrapper to the --cc; and --cxx options; e.g.; lnt runtest nt --cc <path to check_cfc>/clang \\; --cxx <path to check_cfc>/clang++ ... To add a new check:; -Create a new subclass of WrapperCheck; -Implement the perform_check() method. This should perform the alternate compile; and do the comparison.; -Add the new check to check_cfc.cfg. The check has the same name as the; subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:1251,Integrability,wrap,wrapper,1251,"""""""Check CFC - Check Compile Flow Consistency. This is a compiler wrapper for testing that code generation is consistent with; different compilation processes. It checks that code is not unduly affected by; compiler options or other changes which should not have side effects. To use:; -Ensure that the compiler under test (i.e. clang, clang++) is on the PATH; -On Linux copy this script to the name of the compiler; e.g. cp check_cfc.py clang && cp check_cfc.py clang++; -On Windows use setup.py to generate check_cfc.exe and copy that to clang.exe; and clang++.exe; -Enable the desired checks in check_cfc.cfg (in the same directory as the; wrapper); e.g.; [Checks]; dash_g_no_change = true; dash_s_no_change = false. -The wrapper can be run using its absolute path or added to PATH before the; compiler under test; e.g. export PATH=<path to check_cfc>:$PATH; -Compile as normal. The wrapper intercepts normal -c compiles and will return; non-zero if the check fails.; e.g.; $ clang -c test.cpp; Code difference detected with -g; --- /tmp/tmp5nv893.o; +++ /tmp/tmp6Vwjnc.o; @@ -1 +1 @@; - 0: 48 8b 05 51 0b 20 00 mov 0x200b51(%rip),%rax; + 0: 48 39 3d 51 0b 20 00 cmp %rdi,0x200b51(%rip). -To run LNT with Check CFC specify the absolute path to the wrapper to the --cc; and --cxx options; e.g.; lnt runtest nt --cc <path to check_cfc>/clang \\; --cxx <path to check_cfc>/clang++ ... To add a new check:; -Create a new subclass of WrapperCheck; -Implement the perform_check() method. This should perform the alternate compile; and do the comparison.; -Add the new check to check_cfc.cfg. The check has the same name as the; subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:1497,Performance,perform,perform,1497,"""""""Check CFC - Check Compile Flow Consistency. This is a compiler wrapper for testing that code generation is consistent with; different compilation processes. It checks that code is not unduly affected by; compiler options or other changes which should not have side effects. To use:; -Ensure that the compiler under test (i.e. clang, clang++) is on the PATH; -On Linux copy this script to the name of the compiler; e.g. cp check_cfc.py clang && cp check_cfc.py clang++; -On Windows use setup.py to generate check_cfc.exe and copy that to clang.exe; and clang++.exe; -Enable the desired checks in check_cfc.cfg (in the same directory as the; wrapper); e.g.; [Checks]; dash_g_no_change = true; dash_s_no_change = false. -The wrapper can be run using its absolute path or added to PATH before the; compiler under test; e.g. export PATH=<path to check_cfc>:$PATH; -Compile as normal. The wrapper intercepts normal -c compiles and will return; non-zero if the check fails.; e.g.; $ clang -c test.cpp; Code difference detected with -g; --- /tmp/tmp5nv893.o; +++ /tmp/tmp6Vwjnc.o; @@ -1 +1 @@; - 0: 48 8b 05 51 0b 20 00 mov 0x200b51(%rip),%rax; + 0: 48 39 3d 51 0b 20 00 cmp %rdi,0x200b51(%rip). -To run LNT with Check CFC specify the absolute path to the wrapper to the --cc; and --cxx options; e.g.; lnt runtest nt --cc <path to check_cfc>/clang \\; --cxx <path to check_cfc>/clang++ ... To add a new check:; -Create a new subclass of WrapperCheck; -Implement the perform_check() method. This should perform the alternate compile; and do the comparison.; -Add the new check to check_cfc.cfg. The check has the same name as the; subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:1014,Safety,detect,detected,1014,"""""""Check CFC - Check Compile Flow Consistency. This is a compiler wrapper for testing that code generation is consistent with; different compilation processes. It checks that code is not unduly affected by; compiler options or other changes which should not have side effects. To use:; -Ensure that the compiler under test (i.e. clang, clang++) is on the PATH; -On Linux copy this script to the name of the compiler; e.g. cp check_cfc.py clang && cp check_cfc.py clang++; -On Windows use setup.py to generate check_cfc.exe and copy that to clang.exe; and clang++.exe; -Enable the desired checks in check_cfc.cfg (in the same directory as the; wrapper); e.g.; [Checks]; dash_g_no_change = true; dash_s_no_change = false. -The wrapper can be run using its absolute path or added to PATH before the; compiler under test; e.g. export PATH=<path to check_cfc>:$PATH; -Compile as normal. The wrapper intercepts normal -c compiles and will return; non-zero if the check fails.; e.g.; $ clang -c test.cpp; Code difference detected with -g; --- /tmp/tmp5nv893.o; +++ /tmp/tmp6Vwjnc.o; @@ -1 +1 @@; - 0: 48 8b 05 51 0b 20 00 mov 0x200b51(%rip),%rax; + 0: 48 39 3d 51 0b 20 00 cmp %rdi,0x200b51(%rip). -To run LNT with Check CFC specify the absolute path to the wrapper to the --cc; and --cxx options; e.g.; lnt runtest nt --cc <path to check_cfc>/clang \\; --cxx <path to check_cfc>/clang++ ... To add a new check:; -Create a new subclass of WrapperCheck; -Implement the perform_check() method. This should perform the alternate compile; and do the comparison.; -Add the new check to check_cfc.cfg. The check has the same name as the; subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:78,Testability,test,testing,78,"""""""Check CFC - Check Compile Flow Consistency. This is a compiler wrapper for testing that code generation is consistent with; different compilation processes. It checks that code is not unduly affected by; compiler options or other changes which should not have side effects. To use:; -Ensure that the compiler under test (i.e. clang, clang++) is on the PATH; -On Linux copy this script to the name of the compiler; e.g. cp check_cfc.py clang && cp check_cfc.py clang++; -On Windows use setup.py to generate check_cfc.exe and copy that to clang.exe; and clang++.exe; -Enable the desired checks in check_cfc.cfg (in the same directory as the; wrapper); e.g.; [Checks]; dash_g_no_change = true; dash_s_no_change = false. -The wrapper can be run using its absolute path or added to PATH before the; compiler under test; e.g. export PATH=<path to check_cfc>:$PATH; -Compile as normal. The wrapper intercepts normal -c compiles and will return; non-zero if the check fails.; e.g.; $ clang -c test.cpp; Code difference detected with -g; --- /tmp/tmp5nv893.o; +++ /tmp/tmp6Vwjnc.o; @@ -1 +1 @@; - 0: 48 8b 05 51 0b 20 00 mov 0x200b51(%rip),%rax; + 0: 48 39 3d 51 0b 20 00 cmp %rdi,0x200b51(%rip). -To run LNT with Check CFC specify the absolute path to the wrapper to the --cc; and --cxx options; e.g.; lnt runtest nt --cc <path to check_cfc>/clang \\; --cxx <path to check_cfc>/clang++ ... To add a new check:; -Create a new subclass of WrapperCheck; -Implement the perform_check() method. This should perform the alternate compile; and do the comparison.; -Add the new check to check_cfc.cfg. The check has the same name as the; subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:318,Testability,test,test,318,"""""""Check CFC - Check Compile Flow Consistency. This is a compiler wrapper for testing that code generation is consistent with; different compilation processes. It checks that code is not unduly affected by; compiler options or other changes which should not have side effects. To use:; -Ensure that the compiler under test (i.e. clang, clang++) is on the PATH; -On Linux copy this script to the name of the compiler; e.g. cp check_cfc.py clang && cp check_cfc.py clang++; -On Windows use setup.py to generate check_cfc.exe and copy that to clang.exe; and clang++.exe; -Enable the desired checks in check_cfc.cfg (in the same directory as the; wrapper); e.g.; [Checks]; dash_g_no_change = true; dash_s_no_change = false. -The wrapper can be run using its absolute path or added to PATH before the; compiler under test; e.g. export PATH=<path to check_cfc>:$PATH; -Compile as normal. The wrapper intercepts normal -c compiles and will return; non-zero if the check fails.; e.g.; $ clang -c test.cpp; Code difference detected with -g; --- /tmp/tmp5nv893.o; +++ /tmp/tmp6Vwjnc.o; @@ -1 +1 @@; - 0: 48 8b 05 51 0b 20 00 mov 0x200b51(%rip),%rax; + 0: 48 39 3d 51 0b 20 00 cmp %rdi,0x200b51(%rip). -To run LNT with Check CFC specify the absolute path to the wrapper to the --cc; and --cxx options; e.g.; lnt runtest nt --cc <path to check_cfc>/clang \\; --cxx <path to check_cfc>/clang++ ... To add a new check:; -Create a new subclass of WrapperCheck; -Implement the perform_check() method. This should perform the alternate compile; and do the comparison.; -Add the new check to check_cfc.cfg. The check has the same name as the; subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:812,Testability,test,test,812,"""""""Check CFC - Check Compile Flow Consistency. This is a compiler wrapper for testing that code generation is consistent with; different compilation processes. It checks that code is not unduly affected by; compiler options or other changes which should not have side effects. To use:; -Ensure that the compiler under test (i.e. clang, clang++) is on the PATH; -On Linux copy this script to the name of the compiler; e.g. cp check_cfc.py clang && cp check_cfc.py clang++; -On Windows use setup.py to generate check_cfc.exe and copy that to clang.exe; and clang++.exe; -Enable the desired checks in check_cfc.cfg (in the same directory as the; wrapper); e.g.; [Checks]; dash_g_no_change = true; dash_s_no_change = false. -The wrapper can be run using its absolute path or added to PATH before the; compiler under test; e.g. export PATH=<path to check_cfc>:$PATH; -Compile as normal. The wrapper intercepts normal -c compiles and will return; non-zero if the check fails.; e.g.; $ clang -c test.cpp; Code difference detected with -g; --- /tmp/tmp5nv893.o; +++ /tmp/tmp6Vwjnc.o; @@ -1 +1 @@; - 0: 48 8b 05 51 0b 20 00 mov 0x200b51(%rip),%rax; + 0: 48 39 3d 51 0b 20 00 cmp %rdi,0x200b51(%rip). -To run LNT with Check CFC specify the absolute path to the wrapper to the --cc; and --cxx options; e.g.; lnt runtest nt --cc <path to check_cfc>/clang \\; --cxx <path to check_cfc>/clang++ ... To add a new check:; -Create a new subclass of WrapperCheck; -Implement the perform_check() method. This should perform the alternate compile; and do the comparison.; -Add the new check to check_cfc.cfg. The check has the same name as the; subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:988,Testability,test,test,988,"""""""Check CFC - Check Compile Flow Consistency. This is a compiler wrapper for testing that code generation is consistent with; different compilation processes. It checks that code is not unduly affected by; compiler options or other changes which should not have side effects. To use:; -Ensure that the compiler under test (i.e. clang, clang++) is on the PATH; -On Linux copy this script to the name of the compiler; e.g. cp check_cfc.py clang && cp check_cfc.py clang++; -On Windows use setup.py to generate check_cfc.exe and copy that to clang.exe; and clang++.exe; -Enable the desired checks in check_cfc.cfg (in the same directory as the; wrapper); e.g.; [Checks]; dash_g_no_change = true; dash_s_no_change = false. -The wrapper can be run using its absolute path or added to PATH before the; compiler under test; e.g. export PATH=<path to check_cfc>:$PATH; -Compile as normal. The wrapper intercepts normal -c compiles and will return; non-zero if the check fails.; e.g.; $ clang -c test.cpp; Code difference detected with -g; --- /tmp/tmp5nv893.o; +++ /tmp/tmp6Vwjnc.o; @@ -1 +1 @@; - 0: 48 8b 05 51 0b 20 00 mov 0x200b51(%rip),%rax; + 0: 48 39 3d 51 0b 20 00 cmp %rdi,0x200b51(%rip). -To run LNT with Check CFC specify the absolute path to the wrapper to the --cc; and --cxx options; e.g.; lnt runtest nt --cc <path to check_cfc>/clang \\; --cxx <path to check_cfc>/clang++ ... To add a new check:; -Create a new subclass of WrapperCheck; -Implement the perform_check() method. This should perform the alternate compile; and do the comparison.; -Add the new check to check_cfc.cfg. The check has the same name as the; subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:20,Modifiability,variab,variable,20,"""""""Returns the PATH variable modified to remove the path to this program.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:20,Integrability,depend,dependency,20,# Options to output dependency files for make,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:43,Availability,failure,failure,43,"""""""Runs a step of the compilation. Reports failure as exception.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:20,Performance,perform,perform,20,"""""""Override this to perform the modified compilation and required; checks.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:9,Deployability,configurat,configuration,9,# Create configuration defaults from list of checks,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:9,Modifiability,config,configuration,9,# Create configuration defaults from list of checks,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:79,Availability,error,error,79,# Bail out here if we can't apply checks in this case.; # Does not indicate an error.; # Maybe not straight compilation (e.g. -S or --version or -flto); # or maybe > 1 input files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:37,Modifiability,config,config,37,"# Run checks, if they are enabled in config and if they are appropriate for; # this command line.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:8,Availability,failure,failure,8,# Check failure,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:15,Availability,failure,failure,15,# Compile step failure,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py:53,Testability,test,tests,53,# Test removing one entry and leaving others; # Also tests removing repeated path,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py:13,Integrability,depend,dependency,13,# Outputting dependency files is not a normal compile,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py:13,Integrability,depend,dependency,13,# Creating a dependency file as a side effect still outputs an object file,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/CIndex/completion_logger_server.py:11,Testability,log,logging,11,# Open the logging file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/CIndex/completion_logger_server.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/CIndex/completion_logger_server.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/CIndex/completion_logger_server.py:10,Integrability,message,messages,10,# Receive messages,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/CIndex/completion_logger_server.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/CIndex/completion_logger_server.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py:2,Usability,clear,clear,2,"# clear the profile file env, so that we don't generate profdata; # when capturing the cc1 command",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/perf-training/perf-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py:104,Testability,log,logging,104,"# Extract the list of symbols from the given file, which is assumed to be; # the output of a dtrace run logging either probefunc or ustack(1) and; # nothing else. The dtrace -xdemangle option needs to be used.; #; # This is particular to OS X at the moment, because of the '_' handling.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/perf-training/perf-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py:178,Deployability,patch,patched,178,"# If there is a '`' in the line, assume it is a ustack(1) entry in; # the form of <modulename>`<modulefunc>, where <modulefunc> is never; # truncated (but does need the mangling patched).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/perf-training/perf-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py:111,Modifiability,extend,extend,111,"# Otherwise, we have a symbol name which isn't present in the; # binary. We assume it is truncated, and try to extend it.; # Get all the symbols with this prefix.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/perf-training/perf-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py:86,Testability,test,test,86,"# More complicated strategy that tries to respect the call order across all; # of the test cases, instead of giving a huge preference to the first test; # case.; # First, uniq all the lists.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/perf-training/perf-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py:147,Testability,test,test,147,"# More complicated strategy that tries to respect the call order across all; # of the test cases, instead of giving a huge preference to the first test; # case.; # First, uniq all the lists.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/perf-training/perf-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/builtins.py:98,Integrability,depend,depending,98,"# Special unhandled cases:; # __builtin_ia32_vec_ext_*(__P, idx) -> _mm_store_sd/_mm_storeh_pd; # depending on index. No abstract insert/extract for these oddly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/www/builtins.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/builtins.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:55,Deployability,configurat,configuration,55,# -*- coding: utf-8 -*-; #; # LLVM documentation build configuration file.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:193,Deployability,configurat,configuration,193,# -*- coding: utf-8 -*-; #; # LLVM documentation build configuration file.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:267,Deployability,configurat,configuration,267,# -*- coding: utf-8 -*-; #; # LLVM documentation build configuration file.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:55,Modifiability,config,configuration,55,# -*- coding: utf-8 -*-; #; # LLVM documentation build configuration file.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:193,Modifiability,config,configuration,193,# -*- coding: utf-8 -*-; #; # LLVM documentation build configuration file.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:267,Modifiability,config,configuration,267,# -*- coding: utf-8 -*-; #; # LLVM documentation build configuration file.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:13,Deployability,configurat,configuration,13,"# -- General configuration -----------------------------------------------------; # If your documentation needs a minimal Sphinx version, state it here.; # needs_sphinx = '1.0'; # Add any Sphinx extension module names here, as strings. They can be extensions; # coming with Sphinx (named 'sphinx.ext.*') or your custom ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:13,Modifiability,config,configuration,13,"# -- General configuration -----------------------------------------------------; # If your documentation needs a minimal Sphinx version, state it here.; # needs_sphinx = '1.0'; # Add any Sphinx extension module names here, as strings. They can be extensions; # coming with Sphinx (named 'sphinx.ext.*') or your custom ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:112,Availability,avail,available,112,"# Theme options are theme-specific and customize the look and feel of a theme; # further. For a list of options available for each theme, see the; # documentation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:85,Deployability,release,release,85,"# The name for this set of Sphinx documents. If None, it defaults to; # ""<project> v<release> documentation"".; # html_title = None; # A shorter title for the navigation bar. Default is the same as html_title.; # html_short_title = None; # The name of an image file (relative to this directory) to place at the top; # of the sidebar.; # html_logo = None; # The name of an image file (within the static path) to use as favicon of the; # docs. This file should be a Windows icon file (.ico) being 16x16 or 32x32; # pixels large.; # html_favicon = None; # Add any paths that contain custom static files (such as style sheets) here,; # relative to this directory. They are copied after the builtin static files,; # so a file named ""default.css"" will overwrite the builtin ""default.css"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:21,Deployability,update,updated,21,"# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,; # using the given strftime format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:81,Usability,guid,guide,81,# Automatically derive the list of man pages from the contents of the command; # guide subdirectory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:106,Deployability,configurat,configuration,106,"# If true, show URL addresses after external links.; # man_show_urls = False; # FIXME: Define intersphinx configuration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:106,Modifiability,config,configuration,106,"# If true, show URL addresses after external links.; # man_show_urls = False; # FIXME: Define intersphinx configuration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:129,Safety,abort,abort,129,# Pygment lexer are sometimes out of date (when parsing LLVM for example) or; # wrong. Suppress the warning so the build doesn't abort.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/genk-timing.py:17,Modifiability,variab,variable,17,# Initialize the variable names to be rotated,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/genk-timing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/genk-timing.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/genk-timing.py:13,Modifiability,variab,variables,13,# Rotate the variables,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/genk-timing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/genk-timing.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/genk-timing.py:17,Modifiability,variab,variable,17,# Initialize the variable names to be rotated,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/genk-timing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/genk-timing.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/genk-timing.py:13,Modifiability,variab,variables,13,# Rotate the variables,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/genk-timing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/genk-timing.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/genk-timing.py:17,Modifiability,variab,variable,17,# Initialize the variable names to be rotated,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/genk-timing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/genk-timing.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/genk-timing.py:13,Modifiability,variab,variables,13,# Rotate the variables,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/genk-timing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/genk-timing.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-inline-oz-test-model.py:14,Testability,mock,mock,14,"""""""Generate a mock model for LLVM tests. The generated model is not a neural net - it is just a tf.function with the; correct input and output parameters. By construction, the mock model will always; output 1.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Analysis/models/gen-inline-oz-test-model.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-inline-oz-test-model.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-inline-oz-test-model.py:34,Testability,test,tests,34,"""""""Generate a mock model for LLVM tests. The generated model is not a neural net - it is just a tf.function with the; correct input and output parameters. By construction, the mock model will always; output 1.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Analysis/models/gen-inline-oz-test-model.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-inline-oz-test-model.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-inline-oz-test-model.py:176,Testability,mock,mock,176,"""""""Generate a mock model for LLVM tests. The generated model is not a neural net - it is just a tf.function with the; correct input and output parameters. By construction, the mock model will always; output 1.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Analysis/models/gen-inline-oz-test-model.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-inline-oz-test-model.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-inline-oz-test-model.py:22,Testability,mock,mock,22,"""""""Build and save the mock model with the given signature""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Analysis/models/gen-inline-oz-test-model.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-inline-oz-test-model.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-eviction-test-model.py:14,Testability,mock,mock,14,"""""""Generate a mock model for LLVM tests for Register Allocation.; The generated model is not a neural net - it is just a tf.function with the; correct input and output parameters. By construction, the mock model will always; output the first liverange that can be evicted.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-eviction-test-model.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-eviction-test-model.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-eviction-test-model.py:34,Testability,test,tests,34,"""""""Generate a mock model for LLVM tests for Register Allocation.; The generated model is not a neural net - it is just a tf.function with the; correct input and output parameters. By construction, the mock model will always; output the first liverange that can be evicted.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-eviction-test-model.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-eviction-test-model.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-eviction-test-model.py:201,Testability,mock,mock,201,"""""""Generate a mock model for LLVM tests for Register Allocation.; The generated model is not a neural net - it is just a tf.function with the; correct input and output parameters. By construction, the mock model will always; output the first liverange that can be evicted.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-eviction-test-model.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-eviction-test-model.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-eviction-test-model.py:22,Testability,mock,mock,22,"""""""Build and save the mock model with the given signature.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-eviction-test-model.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-eviction-test-model.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-eviction-test-model.py:30,Modifiability,variab,variable,30,# We have to set this useless variable in order for the TF C API to correctly; # intake it,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-eviction-test-model.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-eviction-test-model.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-priority-test-model.py:14,Testability,mock,mock,14,"""""""Generate a mock model for LLVM tests for Register Allocation.; The generated model is not a neural net - it is just a tf.function with the; correct input and output parameters. ; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-priority-test-model.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-priority-test-model.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-priority-test-model.py:34,Testability,test,tests,34,"""""""Generate a mock model for LLVM tests for Register Allocation.; The generated model is not a neural net - it is just a tf.function with the; correct input and output parameters. ; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-priority-test-model.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-priority-test-model.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-priority-test-model.py:24,Testability,mock,mock,24,"## By construction, the mock model will always output the first liverange that can be evicted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-priority-test-model.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-priority-test-model.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-priority-test-model.py:22,Testability,mock,mock,22,"""""""Build and save the mock model with the given signature.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-priority-test-model.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-priority-test-model.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-priority-test-model.py:30,Modifiability,variab,variable,30,# We have to set this useless variable in order for the TF C API to correctly; # intake it,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-priority-test-model.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-priority-test-model.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/interactive_host.py:15,Testability,test,testing,15,"""""""Utility for testing InteractiveModelRunner. Use it from pass-specific tests by providing a main .py which calls this library's; `run_interactive` with an appropriate callback to provide advice. From .ll tests, just call the above-mentioned main as a prefix to the opt/llc; invocation (with the appropriate flags enabling the interactive mode). Examples:; test/Transforms/Inline/ML/interactive-mode.ll; test/CodeGen/MLRegAlloc/interactive-mode.ll; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Analysis/models/interactive_host.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/interactive_host.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/interactive_host.py:73,Testability,test,tests,73,"""""""Utility for testing InteractiveModelRunner. Use it from pass-specific tests by providing a main .py which calls this library's; `run_interactive` with an appropriate callback to provide advice. From .ll tests, just call the above-mentioned main as a prefix to the opt/llc; invocation (with the appropriate flags enabling the interactive mode). Examples:; test/Transforms/Inline/ML/interactive-mode.ll; test/CodeGen/MLRegAlloc/interactive-mode.ll; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Analysis/models/interactive_host.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/interactive_host.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/interactive_host.py:206,Testability,test,tests,206,"""""""Utility for testing InteractiveModelRunner. Use it from pass-specific tests by providing a main .py which calls this library's; `run_interactive` with an appropriate callback to provide advice. From .ll tests, just call the above-mentioned main as a prefix to the opt/llc; invocation (with the appropriate flags enabling the interactive mode). Examples:; test/Transforms/Inline/ML/interactive-mode.ll; test/CodeGen/MLRegAlloc/interactive-mode.ll; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Analysis/models/interactive_host.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/interactive_host.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/interactive_host.py:358,Testability,test,test,358,"""""""Utility for testing InteractiveModelRunner. Use it from pass-specific tests by providing a main .py which calls this library's; `run_interactive` with an appropriate callback to provide advice. From .ll tests, just call the above-mentioned main as a prefix to the opt/llc; invocation (with the appropriate flags enabling the interactive mode). Examples:; test/Transforms/Inline/ML/interactive-mode.ll; test/CodeGen/MLRegAlloc/interactive-mode.ll; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Analysis/models/interactive_host.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/interactive_host.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/interactive_host.py:405,Testability,test,test,405,"""""""Utility for testing InteractiveModelRunner. Use it from pass-specific tests by providing a main .py which calls this library's; `run_interactive` with an appropriate callback to provide advice. From .ll tests, just call the above-mentioned main as a prefix to the opt/llc; invocation (with the appropriate flags enabling the interactive mode). Examples:; test/Transforms/Inline/ML/interactive-mode.ll; test/CodeGen/MLRegAlloc/interactive-mode.ll; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Analysis/models/interactive_host.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/interactive_host.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/interactive_host.py:702,Testability,test,testing,702,"""""""Host the compiler.; Args:; temp_rootname: the base file name from which to construct the 2 pipes for; communicating with the compiler.; make_response: a function that, given the current tensor values, provides a; response.; process_and_args: the full commandline for the compiler. It it assumed it; contains a flag poiting to `temp_rootname` so that the InteractiveModeRunner; would attempt communication on the same pair as this function opens. This function sets up the communication with the compiler - via 2 files named; `temp_rootname`.in and `temp_rootname`.out - prints out the received features,; and sends back to the compiler an advice (which it gets from `make_response`).; It's used for testing, and also to showcase how to set up communication in an; interactive ML (""gym"") environment.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Analysis/models/interactive_host.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/interactive_host.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/log_reader.py:23,Testability,log,log,23,"""""""Reader for training log. See lib/Analysis/TrainingLogger.cpp for a description of the format.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Analysis/models/log_reader.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/log_reader.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-diff.py:152,Integrability,depend,depending,152,"""""""Generate the difference of two YAML files into a new YAML file (works on; pair of directories too). A new attribute 'Added' is set to True or False; depending whether the entry is added or removed from the first input to the; next. The tools requires PyYAML.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-diff.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-diff.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-stats.py:29,Performance,optimiz,optimization,29,"""""""Generate statistics about optimization records from the YAML files; generated with -fsave-optimization-record and -fdiagnostics-show-hotness. The tools requires PyYAML and Pygments Python packages.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-stats.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-stats.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-stats.py:93,Performance,optimiz,optimization-record,93,"""""""Generate statistics about optimization records from the YAML files; generated with -fsave-optimization-record and -fdiagnostics-show-hotness. The tools requires PyYAML and Pygments Python packages.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-stats.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-stats.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py:37,Performance,optimiz,optimization,37,"""""""Generate HTML output to visualize optimization records from the YAML files; generated with -fsave-optimization-record and -fdiagnostics-show-hotness. The tools requires PyYAML and Pygments Python packages.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py:101,Performance,optimiz,optimization-record,101,"""""""Generate HTML output to visualize optimization records from the YAML files; generated with -fsave-optimization-record and -fdiagnostics-show-hotness. The tools requires PyYAML and Pygments Python packages.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py:18,Integrability,message,message,18,# Create expanded message and link if we have a multiline message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py:58,Integrability,message,message,58,# Create expanded message and link if we have a multiline message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py:215,Integrability,message,message,215,"""""""; <tr>; <td></td>; <td>{r.RelativeHotness}</td>; <td class=\""column-entry-{r.color}\"">{r.PassWithDiffPrefix}</td>; <td><pre style=""display:inline"">{indent}</pre><span class=\""column-entry-yellow\"">{expand_link} {message}&nbsp;</span>{expand_message}</td>; <td class=\""column-entry-yellow\"">{inlining_context}</td>; </tr>""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py:234,Deployability,toggle,toggleExpandedMessage,234,"""""""; <html>; <title>{}</title>; <meta charset=""utf-8"" />; <head>; <link rel='stylesheet' type='text/css' href='style.css'>; <script type=""text/javascript"">; /* Simple helper to show/hide the expanded message of a remark. */; function toggleExpandedMessage(e) {{; var FullTextElems = e.parentElement.parentElement.getElementsByClassName(""full-info"");; if (!FullTextElems || FullTextElems.length < 1) {{; return false;; }}; var FullText = FullTextElems[0];; if (FullText.style.display == 'none') {{; e.innerHTML = '-';; FullText.style.display = 'block';; }} else {{; e.innerHTML = '+';; FullText.style.display = 'none';; }}; }}; </script>; </head>; <body>; <div class=""centered"">; <table class=""source"">; <thead>; <tr>; <th style=""width: 2%"">Line</td>; <th style=""width: 3%"">Hotness</td>; <th style=""width: 10%"">Optimization</td>; <th style=""width: 70%"">Source</td>; <th style=""width: 15%"">Inline Context</td>; </tr>; </thead>; <tbody>""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py:200,Integrability,message,message,200,"""""""; <html>; <title>{}</title>; <meta charset=""utf-8"" />; <head>; <link rel='stylesheet' type='text/css' href='style.css'>; <script type=""text/javascript"">; /* Simple helper to show/hide the expanded message of a remark. */; function toggleExpandedMessage(e) {{; var FullTextElems = e.parentElement.parentElement.getElementsByClassName(""full-info"");; if (!FullTextElems || FullTextElems.length < 1) {{; return false;; }}; var FullText = FullTextElems[0];; if (FullText.style.display == 'none') {{; e.innerHTML = '-';; FullText.style.display = 'block';; }} else {{; e.innerHTML = '+';; FullText.style.display = 'none';; }}; }}; </script>; </head>; <body>; <div class=""centered"">; <table class=""source"">; <thead>; <tr>; <th style=""width: 2%"">Line</td>; <th style=""width: 3%"">Hotness</td>; <th style=""width: 10%"">Optimization</td>; <th style=""width: 70%"">Source</td>; <th style=""width: 15%"">Inline Context</td>; </tr>; </thead>; <tbody>""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py:28,Modifiability,variab,variable,28,# Do not make this a global variable. Values needed to be propagated through; # to individual classes and functions to be portable with multiprocessing across; # Windows and non-Windows.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py:122,Modifiability,portab,portable,122,# Do not make this a global variable. Values needed to be propagated through; # to individual classes and functions to be portable with multiprocessing across; # Windows and non-Windows.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py:372,Security,hash,hashable,372,"# Intern all strings since we have lot of duplication across filenames,; # remark text.; #; # Change Args from a list of dicts to a tuple of tuples. This saves; # memory in two ways. One, a small tuple is significantly smaller than a; # small dict. Two, using tuple instead of list allows Args to be directly; # used as part of the key (in Python only immutable types are hashable).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py:56,Performance,optimiz,optimization,56,"# The inverse operation of the dictonary-related memory optimization in; # _reduce_memory_dict. E.g.; # (('DebugLoc', (('File', ...) ... ))) -> [{'DebugLoc': {'File': ...} ....}]",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py:11,Performance,cache,cached,11,# Return a cached dictionary for the arguments. The key for each entry is; # the argument key (e.g. 'Callee' for inlining remarks. The value is a; # list containing the value (e.g. for 'Callee' the function) and; # optionally a DebugLoc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py:73,Integrability,depend,depend,73,# Bring max_hotness into the remarks so that; # RelativeHotness does not depend on an external global.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:65,Availability,down,down,65,"#!/usr/bin/env python; #; # Given a previous good compile narrow down miscompiles.; # Expects two directories named ""before"" and ""after"" each containing a set of; # assembly or object files where the ""after"" version is assumed to be broken.; # You also have to provide a script called ""link_test"". It is called with a; # list of files which should be linked together and result tested. ""link_test""; # should returns with exitcode 0 if the linking and testing succeeded.; #; # If a response file is provided, only the object files that are listed in the; # file are inspected. In addition, the ""link_test"" is called with a temporary; # response file representing one iteration of bisection.; #; # abtest.py operates by taking all files from the ""before"" directory and; # in each step replacing one of them with a file from the ""bad"" directory.; #; # Additionally you can perform the same steps with a single .s file. In this; # mode functions are identified by "" -- Begin function FunctionName"" and; # "" -- End function"" markers. The abtest.py then takes all; # function from the file in the ""before"" directory and replaces one function; # with the corresponding function from the ""bad"" file in each step.; #; # Example usage to identify miscompiled files:; # 1. Create a link_test script, make it executable. Simple Example:; # clang ""$@"" -o /tmp/test && /tmp/test || echo ""PROBLEM""; # 2. Run the script to figure out which files are miscompiled:; # > ./abtest.py; # somefile.s: ok; # someotherfile.s: skipped: same content; # anotherfile.s: failed: './link_test' exitcode != 0; # ...; # Example usage to identify miscompiled functions inside a file:; # 3. Run the tests on a single file (assuming before/file.s and; # after/file.s exist); # > ./abtest.py file.s; # funcname1 [0/XX]: ok; # funcname2 [1/XX]: ok; # funcname3 [2/XX]: skipped: same content; # funcname4 [3/XX]: failed: './link_test' exitcode != 0; # ...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/abtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:1368,Availability,echo,echo,1368,"#!/usr/bin/env python; #; # Given a previous good compile narrow down miscompiles.; # Expects two directories named ""before"" and ""after"" each containing a set of; # assembly or object files where the ""after"" version is assumed to be broken.; # You also have to provide a script called ""link_test"". It is called with a; # list of files which should be linked together and result tested. ""link_test""; # should returns with exitcode 0 if the linking and testing succeeded.; #; # If a response file is provided, only the object files that are listed in the; # file are inspected. In addition, the ""link_test"" is called with a temporary; # response file representing one iteration of bisection.; #; # abtest.py operates by taking all files from the ""before"" directory and; # in each step replacing one of them with a file from the ""bad"" directory.; #; # Additionally you can perform the same steps with a single .s file. In this; # mode functions are identified by "" -- Begin function FunctionName"" and; # "" -- End function"" markers. The abtest.py then takes all; # function from the file in the ""before"" directory and replaces one function; # with the corresponding function from the ""bad"" file in each step.; #; # Example usage to identify miscompiled files:; # 1. Create a link_test script, make it executable. Simple Example:; # clang ""$@"" -o /tmp/test && /tmp/test || echo ""PROBLEM""; # 2. Run the script to figure out which files are miscompiled:; # > ./abtest.py; # somefile.s: ok; # someotherfile.s: skipped: same content; # anotherfile.s: failed: './link_test' exitcode != 0; # ...; # Example usage to identify miscompiled functions inside a file:; # 3. Run the tests on a single file (assuming before/file.s and; # after/file.s exist); # > ./abtest.py file.s; # funcname1 [0/XX]: ok; # funcname2 [1/XX]: ok; # funcname3 [2/XX]: skipped: same content; # funcname4 [3/XX]: failed: './link_test' exitcode != 0; # ...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/abtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:870,Performance,perform,perform,870,"#!/usr/bin/env python; #; # Given a previous good compile narrow down miscompiles.; # Expects two directories named ""before"" and ""after"" each containing a set of; # assembly or object files where the ""after"" version is assumed to be broken.; # You also have to provide a script called ""link_test"". It is called with a; # list of files which should be linked together and result tested. ""link_test""; # should returns with exitcode 0 if the linking and testing succeeded.; #; # If a response file is provided, only the object files that are listed in the; # file are inspected. In addition, the ""link_test"" is called with a temporary; # response file representing one iteration of bisection.; #; # abtest.py operates by taking all files from the ""before"" directory and; # in each step replacing one of them with a file from the ""bad"" directory.; #; # Additionally you can perform the same steps with a single .s file. In this; # mode functions are identified by "" -- Begin function FunctionName"" and; # "" -- End function"" markers. The abtest.py then takes all; # function from the file in the ""before"" directory and replaces one function; # with the corresponding function from the ""bad"" file in each step.; #; # Example usage to identify miscompiled files:; # 1. Create a link_test script, make it executable. Simple Example:; # clang ""$@"" -o /tmp/test && /tmp/test || echo ""PROBLEM""; # 2. Run the script to figure out which files are miscompiled:; # > ./abtest.py; # somefile.s: ok; # someotherfile.s: skipped: same content; # anotherfile.s: failed: './link_test' exitcode != 0; # ...; # Example usage to identify miscompiled functions inside a file:; # 3. Run the tests on a single file (assuming before/file.s and; # after/file.s exist); # > ./abtest.py file.s; # funcname1 [0/XX]: ok; # funcname2 [1/XX]: ok; # funcname3 [2/XX]: skipped: same content; # funcname4 [3/XX]: failed: './link_test' exitcode != 0; # ...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/abtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:378,Testability,test,tested,378,"#!/usr/bin/env python; #; # Given a previous good compile narrow down miscompiles.; # Expects two directories named ""before"" and ""after"" each containing a set of; # assembly or object files where the ""after"" version is assumed to be broken.; # You also have to provide a script called ""link_test"". It is called with a; # list of files which should be linked together and result tested. ""link_test""; # should returns with exitcode 0 if the linking and testing succeeded.; #; # If a response file is provided, only the object files that are listed in the; # file are inspected. In addition, the ""link_test"" is called with a temporary; # response file representing one iteration of bisection.; #; # abtest.py operates by taking all files from the ""before"" directory and; # in each step replacing one of them with a file from the ""bad"" directory.; #; # Additionally you can perform the same steps with a single .s file. In this; # mode functions are identified by "" -- Begin function FunctionName"" and; # "" -- End function"" markers. The abtest.py then takes all; # function from the file in the ""before"" directory and replaces one function; # with the corresponding function from the ""bad"" file in each step.; #; # Example usage to identify miscompiled files:; # 1. Create a link_test script, make it executable. Simple Example:; # clang ""$@"" -o /tmp/test && /tmp/test || echo ""PROBLEM""; # 2. Run the script to figure out which files are miscompiled:; # > ./abtest.py; # somefile.s: ok; # someotherfile.s: skipped: same content; # anotherfile.s: failed: './link_test' exitcode != 0; # ...; # Example usage to identify miscompiled functions inside a file:; # 3. Run the tests on a single file (assuming before/file.s and; # after/file.s exist); # > ./abtest.py file.s; # funcname1 [0/XX]: ok; # funcname2 [1/XX]: ok; # funcname3 [2/XX]: skipped: same content; # funcname4 [3/XX]: failed: './link_test' exitcode != 0; # ...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/abtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:451,Testability,test,testing,451,"#!/usr/bin/env python; #; # Given a previous good compile narrow down miscompiles.; # Expects two directories named ""before"" and ""after"" each containing a set of; # assembly or object files where the ""after"" version is assumed to be broken.; # You also have to provide a script called ""link_test"". It is called with a; # list of files which should be linked together and result tested. ""link_test""; # should returns with exitcode 0 if the linking and testing succeeded.; #; # If a response file is provided, only the object files that are listed in the; # file are inspected. In addition, the ""link_test"" is called with a temporary; # response file representing one iteration of bisection.; #; # abtest.py operates by taking all files from the ""before"" directory and; # in each step replacing one of them with a file from the ""bad"" directory.; #; # Additionally you can perform the same steps with a single .s file. In this; # mode functions are identified by "" -- Begin function FunctionName"" and; # "" -- End function"" markers. The abtest.py then takes all; # function from the file in the ""before"" directory and replaces one function; # with the corresponding function from the ""bad"" file in each step.; #; # Example usage to identify miscompiled files:; # 1. Create a link_test script, make it executable. Simple Example:; # clang ""$@"" -o /tmp/test && /tmp/test || echo ""PROBLEM""; # 2. Run the script to figure out which files are miscompiled:; # > ./abtest.py; # somefile.s: ok; # someotherfile.s: skipped: same content; # anotherfile.s: failed: './link_test' exitcode != 0; # ...; # Example usage to identify miscompiled functions inside a file:; # 3. Run the tests on a single file (assuming before/file.s and; # after/file.s exist); # > ./abtest.py file.s; # funcname1 [0/XX]: ok; # funcname2 [1/XX]: ok; # funcname3 [2/XX]: skipped: same content; # funcname4 [3/XX]: failed: './link_test' exitcode != 0; # ...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/abtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:1347,Testability,test,test,1347,"#!/usr/bin/env python; #; # Given a previous good compile narrow down miscompiles.; # Expects two directories named ""before"" and ""after"" each containing a set of; # assembly or object files where the ""after"" version is assumed to be broken.; # You also have to provide a script called ""link_test"". It is called with a; # list of files which should be linked together and result tested. ""link_test""; # should returns with exitcode 0 if the linking and testing succeeded.; #; # If a response file is provided, only the object files that are listed in the; # file are inspected. In addition, the ""link_test"" is called with a temporary; # response file representing one iteration of bisection.; #; # abtest.py operates by taking all files from the ""before"" directory and; # in each step replacing one of them with a file from the ""bad"" directory.; #; # Additionally you can perform the same steps with a single .s file. In this; # mode functions are identified by "" -- Begin function FunctionName"" and; # "" -- End function"" markers. The abtest.py then takes all; # function from the file in the ""before"" directory and replaces one function; # with the corresponding function from the ""bad"" file in each step.; #; # Example usage to identify miscompiled files:; # 1. Create a link_test script, make it executable. Simple Example:; # clang ""$@"" -o /tmp/test && /tmp/test || echo ""PROBLEM""; # 2. Run the script to figure out which files are miscompiled:; # > ./abtest.py; # somefile.s: ok; # someotherfile.s: skipped: same content; # anotherfile.s: failed: './link_test' exitcode != 0; # ...; # Example usage to identify miscompiled functions inside a file:; # 3. Run the tests on a single file (assuming before/file.s and; # after/file.s exist); # > ./abtest.py file.s; # funcname1 [0/XX]: ok; # funcname2 [1/XX]: ok; # funcname3 [2/XX]: skipped: same content; # funcname4 [3/XX]: failed: './link_test' exitcode != 0; # ...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/abtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:1360,Testability,test,test,1360,"#!/usr/bin/env python; #; # Given a previous good compile narrow down miscompiles.; # Expects two directories named ""before"" and ""after"" each containing a set of; # assembly or object files where the ""after"" version is assumed to be broken.; # You also have to provide a script called ""link_test"". It is called with a; # list of files which should be linked together and result tested. ""link_test""; # should returns with exitcode 0 if the linking and testing succeeded.; #; # If a response file is provided, only the object files that are listed in the; # file are inspected. In addition, the ""link_test"" is called with a temporary; # response file representing one iteration of bisection.; #; # abtest.py operates by taking all files from the ""before"" directory and; # in each step replacing one of them with a file from the ""bad"" directory.; #; # Additionally you can perform the same steps with a single .s file. In this; # mode functions are identified by "" -- Begin function FunctionName"" and; # "" -- End function"" markers. The abtest.py then takes all; # function from the file in the ""before"" directory and replaces one function; # with the corresponding function from the ""bad"" file in each step.; #; # Example usage to identify miscompiled files:; # 1. Create a link_test script, make it executable. Simple Example:; # clang ""$@"" -o /tmp/test && /tmp/test || echo ""PROBLEM""; # 2. Run the script to figure out which files are miscompiled:; # > ./abtest.py; # somefile.s: ok; # someotherfile.s: skipped: same content; # anotherfile.s: failed: './link_test' exitcode != 0; # ...; # Example usage to identify miscompiled functions inside a file:; # 3. Run the tests on a single file (assuming before/file.s and; # after/file.s exist); # > ./abtest.py file.s; # funcname1 [0/XX]: ok; # funcname2 [1/XX]: ok; # funcname3 [2/XX]: skipped: same content; # funcname4 [3/XX]: failed: './link_test' exitcode != 0; # ...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/abtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:1665,Testability,test,tests,1665,"#!/usr/bin/env python; #; # Given a previous good compile narrow down miscompiles.; # Expects two directories named ""before"" and ""after"" each containing a set of; # assembly or object files where the ""after"" version is assumed to be broken.; # You also have to provide a script called ""link_test"". It is called with a; # list of files which should be linked together and result tested. ""link_test""; # should returns with exitcode 0 if the linking and testing succeeded.; #; # If a response file is provided, only the object files that are listed in the; # file are inspected. In addition, the ""link_test"" is called with a temporary; # response file representing one iteration of bisection.; #; # abtest.py operates by taking all files from the ""before"" directory and; # in each step replacing one of them with a file from the ""bad"" directory.; #; # Additionally you can perform the same steps with a single .s file. In this; # mode functions are identified by "" -- Begin function FunctionName"" and; # "" -- End function"" markers. The abtest.py then takes all; # function from the file in the ""before"" directory and replaces one function; # with the corresponding function from the ""bad"" file in each step.; #; # Example usage to identify miscompiled files:; # 1. Create a link_test script, make it executable. Simple Example:; # clang ""$@"" -o /tmp/test && /tmp/test || echo ""PROBLEM""; # 2. Run the script to figure out which files are miscompiled:; # > ./abtest.py; # somefile.s: ok; # someotherfile.s: skipped: same content; # anotherfile.s: failed: './link_test' exitcode != 0; # ...; # Example usage to identify miscompiled functions inside a file:; # 3. Run the tests on a single file (assuming before/file.s and; # after/file.s exist); # > ./abtest.py file.s; # funcname1 [0/XX]: ok; # funcname2 [1/XX]: ok; # funcname3 [2/XX]: skipped: same content; # funcname4 [3/XX]: failed: './link_test' exitcode != 0; # ...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/abtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:26,Testability,test,test,26,# Specify LINKTEST via `--test`. Default value is './link_test'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/abtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:191,Availability,failure,failure,191,# TODO:; # - We could optimize based on the knowledge that when splitting a failed; # partition into two and one side checks out okay then we can deduce that; # the other partition must be a failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/abtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:22,Performance,optimiz,optimize,22,# TODO:; # - We could optimize based on the knowledge that when splitting a failed; # partition into two and one side checks out okay then we can deduce that; # the other partition must be a failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/abtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:33,Safety,sanity check,sanity check,33,# This shouldn't happen when the sanity check works...; # Maybe link_test isn't deterministic?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/abtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py:22,Availability,failure,failures,22,"""""""Reduces GlobalISel failures. This script is a utility to reduce tests that GlobalISel; fails to compile. It runs llc to get the error message using a regex and creates; a custom command to check that specific error. Then, it runs bugpoint; with the custom command. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py:131,Availability,error,error,131,"""""""Reduces GlobalISel failures. This script is a utility to reduce tests that GlobalISel; fails to compile. It runs llc to get the error message using a regex and creates; a custom command to check that specific error. Then, it runs bugpoint; with the custom command. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py:212,Availability,error,error,212,"""""""Reduces GlobalISel failures. This script is a utility to reduce tests that GlobalISel; fails to compile. It runs llc to get the error message using a regex and creates; a custom command to check that specific error. Then, it runs bugpoint; with the custom command. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py:60,Energy Efficiency,reduce,reduce,60,"""""""Reduces GlobalISel failures. This script is a utility to reduce tests that GlobalISel; fails to compile. It runs llc to get the error message using a regex and creates; a custom command to check that specific error. Then, it runs bugpoint; with the custom command. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py:137,Integrability,message,message,137,"""""""Reduces GlobalISel failures. This script is a utility to reduce tests that GlobalISel; fails to compile. It runs llc to get the error message using a regex and creates; a custom command to check that specific error. Then, it runs bugpoint; with the custom command. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py:67,Testability,test,tests,67,"""""""Reduces GlobalISel failures. This script is a utility to reduce tests that GlobalISel; fails to compile. It runs llc to get the error message using a regex and creates; a custom command to check that specific error. Then, it runs bugpoint; with the custom command. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:440,Availability,failure,failure,440,"""""""Script to find missing formal dependencies in a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'pytho",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:821,Availability,reliab,reliably,821,"""""""Script to find missing formal dependencies in a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'pytho",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:862,Availability,failure,failure,862,"""""""Script to find missing formal dependencies in a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'pytho",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:1966,Availability,avail,available,1966,"a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'python3-pygraphviz' package in Debian and Ubuntu. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:507,Energy Efficiency,schedul,schedule,507,"""""""Script to find missing formal dependencies in a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'pytho",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:33,Integrability,depend,dependencies,33,"""""""Script to find missing formal dependencies in a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'pytho",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:296,Integrability,depend,dependency,296,"""""""Script to find missing formal dependencies in a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'pytho",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:462,Integrability,depend,depending,462,"""""""Script to find missing formal dependencies in a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'pytho",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:1092,Integrability,depend,dependencies,1092,"a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'python3-pygraphviz' package in Debian and Ubuntu. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:1193,Integrability,depend,dependencies,1193,"a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'python3-pygraphviz' package in Debian and Ubuntu. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:1380,Integrability,depend,dependencies,1380,"a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'python3-pygraphviz' package in Debian and Ubuntu. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:1442,Integrability,depend,dependencies,1442,"a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'python3-pygraphviz' package in Debian and Ubuntu. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:1735,Integrability,depend,dependency,1735,"a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'python3-pygraphviz' package in Debian and Ubuntu. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:1694,Performance,perform,perform,1694,"a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'python3-pygraphviz' package in Debian and Ubuntu. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:792,Safety,detect,detect,792,"""""""Script to find missing formal dependencies in a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'pytho",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:732,Testability,test,test,732,"""""""Script to find missing formal dependencies in a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'pytho",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:884,Testability,test,test,884,"""""""Script to find missing formal dependencies in a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'pytho",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:100,Usability,simpl,simply,100,# Count the number of immediate predecessors *not yet output* for each; # vertex. Initially this is simply their in-degrees.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:97,Integrability,depend,dependency,97,"# Remove v itself from the set before yielding it, so that the caller; # doesn't get the trivial dependency of v on itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:17,Integrability,depend,dependency,17,# Get the formal dependency graph and decode it using pygraphviz.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:19,Integrability,depend,dependency,19,# Fetch the cached dependency data and check it against our formal ancestry; # data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:12,Performance,cache,cached,12,# Fetch the cached dependency data and check it against our formal ancestry; # data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:226,Safety,detect,detecting,226,"# ninja -t deps output consists of stanzas of the following form,; # separated by a blank line:; #; # target: [other information we don't need]; # some_file.cpp; # some_header.h; # other_header.h; #; # We parse this ad-hoc by detecting the four leading spaces in a; # source-file line, and the colon in a target line. 'currtarget' stores; # the last target name we saw.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:32,Integrability,depend,dependency,32,"# We're only interested in this dependency if it's a *generated*; # file, i.e. it is in our set of targets. Also, we must check that; # currtarget is actually a target we know about: the dependency; # cache is not cleared when build.ninja changes, so it can contain; # stale data from targets that existed only in past builds in the; # same directory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:187,Integrability,depend,dependency,187,"# We're only interested in this dependency if it's a *generated*; # file, i.e. it is in our set of targets. Also, we must check that; # currtarget is actually a target we know about: the dependency; # cache is not cleared when build.ninja changes, so it can contain; # stale data from targets that existed only in past builds in the; # same directory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:201,Performance,cache,cache,201,"# We're only interested in this dependency if it's a *generated*; # file, i.e. it is in our set of targets. Also, we must check that; # currtarget is actually a target we know about: the dependency; # cache is not cleared when build.ninja changes, so it can contain; # stale data from targets that existed only in past builds in the; # same directory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:214,Usability,clear,cleared,214,"# We're only interested in this dependency if it's a *generated*; # file, i.e. it is in our set of targets. Also, we must check that; # currtarget is actually a target we know about: the dependency; # cache is not cleared when build.ninja changes, so it can contain; # stale data from targets that existed only in past builds in the; # same directory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/chunk-print-before-all.py:95,Testability,log,log,95,"#!/usr/bin/env python; # Given a -print-before-all and/or -print-after-all -print-module-scope log from; # an opt invocation, chunk it into a series of individual IR files, one for each; # pass invocation. If the log ends with an obvious stack trace, try to split off; # a separate ""crashinfo.txt"" file leaving only the valid input IR in the last; # chunk. Files are written to current working directory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/chunk-print-before-all.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/chunk-print-before-all.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/chunk-print-before-all.py:213,Testability,log,log,213,"#!/usr/bin/env python; # Given a -print-before-all and/or -print-after-all -print-module-scope log from; # an opt invocation, chunk it into a series of individual IR files, one for each; # pass invocation. If the log ends with an obvious stack trace, try to split off; # a separate ""crashinfo.txt"" file leaving only the valid input IR in the last; # chunk. Files are written to current working directory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/chunk-print-before-all.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/chunk-print-before-all.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:517,Deployability,update,updated,517,"""""""; This script:; - Builds clang with user-defined flags; - Uses that clang to build an instrumented clang, which can be used to collect; PGO samples; - Builds a user-defined set of sources (default: clang) to act as a; ""benchmark"" to generate a PGO profile; - Builds clang once more with the PGO profile generated above. This is a total of four clean builds of clang (by default). This may take a; while. :). This scripts duplicates https://llvm.org/docs/AdvancedBuilds.html#multi-stage-pgo; Eventually, it will be updated to instead call the cmake cache mentioned there.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:551,Performance,cache,cache,551,"""""""; This script:; - Builds clang with user-defined flags; - Uses that clang to build an instrumented clang, which can be used to collect; PGO samples; - Builds a user-defined set of sources (default: clang) to act as a; ""benchmark"" to generate a PGO profile; - Builds clang once more with the PGO profile generated above. This is a total of four clean builds of clang (by default). This may take a; while. :). This scripts duplicates https://llvm.org/docs/AdvancedBuilds.html#multi-stage-pgo; Eventually, it will be updated to instead call the cmake cache mentioned there.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:222,Testability,benchmark,benchmark,222,"""""""; This script:; - Builds clang with user-defined flags; - Uses that clang to build an instrumented clang, which can be used to collect; PGO samples; - Builds a user-defined set of sources (default: clang) to act as a; ""benchmark"" to generate a PGO profile; - Builds clang once more with the PGO profile generated above. This is a total of four clean builds of clang (by default). This may take a; while. :). This scripts duplicates https://llvm.org/docs/AdvancedBuilds.html#multi-stage-pgo; Eventually, it will be updated to instead call the cmake cache mentioned there.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:9,Deployability,configurat,configuration,9,"### User configuration; # If you want to use a different 'benchmark' than building clang, make this; # function do what you want. out_dir is the build directory for clang, so all; # of the clang binaries will live under ""${out_dir}/bin/"". Using clang in; # ${out_dir} will magically have the profiles go to the right place.; #; # You may assume that out_dir is a freshly-built directory that you can reach; # in to build more things, if you'd like.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:9,Modifiability,config,configuration,9,"### User configuration; # If you want to use a different 'benchmark' than building clang, make this; # function do what you want. out_dir is the build directory for clang, so all; # of the clang binaries will live under ""${out_dir}/bin/"". Using clang in; # ${out_dir} will magically have the profiles go to the right place.; #; # You may assume that out_dir is a freshly-built directory that you can reach; # in to build more things, if you'd like.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:58,Testability,benchmark,benchmark,58,"### User configuration; # If you want to use a different 'benchmark' than building clang, make this; # function do what you want. out_dir is the build directory for clang, so all; # of the clang binaries will live under ""${out_dir}/bin/"". Using clang in; # ${out_dir} will magically have the profiles go to the right place.; #; # You may assume that out_dir is a freshly-built directory that you can reach; # in to build more things, if you'd like.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:8,Testability,benchmark,benchmark,8,"""""""The 'benchmark' we run to generate profile data.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:131,Modifiability,config,configured,131,"# `check-llvm` and `check-clang` are cheap ways to increase coverage. The; # former lets us touch on the non-x86 backends a bit if configured, and the; # latter gives us more C to chew on (and will send us through diagnostic; # paths a fair amount, though the `if (stuff_is_broken) { diag() ... }`; # branches should still heavily be weighted in the not-taken direction,; # since we built all of LLVM/etc).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:11,Modifiability,config,configure,11,"# libcxx's configure step messes with our link order: we'll link; # libclang_rt.profile after libgcc, and the former requires atexit from the; # latter. So, configure checks fail.; #; # Since we don't need libcxx or compiler-rt anyway, just disable them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:157,Modifiability,config,configure,157,"# libcxx's configure step messes with our link order: we'll link; # libclang_rt.profile after libgcc, and the former requires atexit from the; # latter. So, configure checks fail.; #; # Since we don't need libcxx or compiler-rt anyway, just disable them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:29,Security,hash,hash,29,# We'll get complaints about hash mismatches in `main` in tools/etc. Ignore; # it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py:34,Testability,log,log,34,"""""""; Helper script to convert the log generated by '-debug-only=constraint-system'; to a Python script that uses Z3 to verify the decisions using Z3's Python API. Example usage:. > cat path/to/file.log; ---; x6 + -1 * x7 <= -1; x6 + -1 * x7 <= -2; sat. > ./convert-constraint-log-to-z3.py path/to/file.log > check.py && python ./check.py. > cat check.py; from z3 import *; x3 = Int(""x3""); x1 = Int(""x1""); x2 = Int(""x2""); s = Solver(); s.add(x1 + -1 * x2 <= 0); s.add(x2 + -1 * x3 <= 0); s.add(-1 * x1 + x3 <= -1); assert(s.check() == unsat); print('all checks passed'); """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py:198,Testability,log,log,198,"""""""; Helper script to convert the log generated by '-debug-only=constraint-system'; to a Python script that uses Z3 to verify the decisions using Z3's Python API. Example usage:. > cat path/to/file.log; ---; x6 + -1 * x7 <= -1; x6 + -1 * x7 <= -2; sat. > ./convert-constraint-log-to-z3.py path/to/file.log > check.py && python ./check.py. > cat check.py; from z3 import *; x3 = Int(""x3""); x1 = Int(""x1""); x2 = Int(""x2""); s = Solver(); s.add(x1 + -1 * x2 <= 0); s.add(x2 + -1 * x3 <= 0); s.add(-1 * x1 + x3 <= -1); assert(s.check() == unsat); print('all checks passed'); """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py:276,Testability,log,log-to-,276,"""""""; Helper script to convert the log generated by '-debug-only=constraint-system'; to a Python script that uses Z3 to verify the decisions using Z3's Python API. Example usage:. > cat path/to/file.log; ---; x6 + -1 * x7 <= -1; x6 + -1 * x7 <= -2; sat. > ./convert-constraint-log-to-z3.py path/to/file.log > check.py && python ./check.py. > cat check.py; from z3 import *; x3 = Int(""x3""); x1 = Int(""x1""); x2 = Int(""x2""); s = Solver(); s.add(x1 + -1 * x2 <= 0); s.add(x2 + -1 * x3 <= 0); s.add(-1 * x1 + x3 <= -1); assert(s.check() == unsat); print('all checks passed'); """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py:302,Testability,log,log,302,"""""""; Helper script to convert the log generated by '-debug-only=constraint-system'; to a Python script that uses Z3 to verify the decisions using Z3's Python API. Example usage:. > cat path/to/file.log; ---; x6 + -1 * x7 <= -1; x6 + -1 * x7 <= -2; sat. > ./convert-constraint-log-to-z3.py path/to/file.log > check.py && python ./check.py. > cat check.py; from z3 import *; x3 = Int(""x3""); x1 = Int(""x1""); x2 = Int(""x2""); s = Solver(); s.add(x1 + -1 * x2 <= 0); s.add(x2 + -1 * x3 <= 0); s.add(-1 * x1 + x3 <= -1); assert(s.check() == unsat); print('all checks passed'); """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py:514,Testability,assert,assert,514,"""""""; Helper script to convert the log generated by '-debug-only=constraint-system'; to a Python script that uses Z3 to verify the decisions using Z3's Python API. Example usage:. > cat path/to/file.log; ---; x6 + -1 * x7 <= -1; x6 + -1 * x7 <= -2; sat. > ./convert-constraint-log-to-z3.py path/to/file.log > check.py && python ./check.py. > cat check.py; from z3 import *; x3 = Int(""x3""); x1 = Int(""x1""); x2 = Int(""x2""); s = Solver(); s.add(x1 + -1 * x2 <= 0); s.add(x2 + -1 * x3 <= 0); s.add(-1 * x1 + x3 <= -1); assert(s.check() == unsat); print('all checks passed'); """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/create_ladder_graph.py:329,Testability,test,test,329,"""""""A ladder graph creation program. This is a python program that creates c source code that will generate; CFGs that are ladder graphs. Ladder graphs are generally the worst case; for a lot of dominance related algorithms (Dominance frontiers, etc),; and often generate N^2 or worse behavior. One good use of this program is to test whether your linear time algorithm is; really behaving linearly.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/create_ladder_graph.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/create_ladder_graph.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/demangle_tree.py:271,Testability,test,testing,271,"# Given a path to llvm-objdump and a directory tree, spider the directory tree; # dumping every object file encountered with correct options needed to demangle; # symbols in the object file, and collect statistics about failed / crashed; # demanglings. Useful for stress testing the demangler against a large corpus; # of inputs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/demangle_tree.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/demangle_tree.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/DSAclean.py:333,Availability,error,error,333,"#!/usr/bin/env python; # changelog:; # 10/13/2005b: replaced the # in tmp(.#*)* with alphanumeric and _, this will then remove; # nodes such as %tmp.1.i and %tmp._i.3; # 10/13/2005: exntended to remove variables of the form %tmp(.#)* rather than just; #%tmp.#, i.e. it now will remove %tmp.12.3.15 etc, additionally fixed a spelling error in; # the comments; # 10/12/2005: now it only removes nodes and edges for which the label is %tmp.# rather; # than removing all lines for which the lable CONTAINS %tmp.#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/DSAclean.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/DSAclean.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/DSAclean.py:202,Modifiability,variab,variables,202,"#!/usr/bin/env python; # changelog:; # 10/13/2005b: replaced the # in tmp(.#*)* with alphanumeric and _, this will then remove; # nodes such as %tmp.1.i and %tmp._i.3; # 10/13/2005: exntended to remove variables of the form %tmp(.#)* rather than just; #%tmp.#, i.e. it now will remove %tmp.12.3.15 etc, additionally fixed a spelling error in; # the comments; # 10/12/2005: now it only removes nodes and edges for which the label is %tmp.# rather; # than removing all lines for which the lable CONTAINS %tmp.#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/DSAclean.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/DSAclean.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/DSAextract.py:52,Modifiability,variab,variable,52,"# if this name is for the current node, add the dot variable name; # for the node (it will be Node(hex number)) to our set of nodes",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/DSAextract.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/DSAextract.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/DSAextract.py:2,Testability,test,test,2,# test code; # print '\n',MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/DSAextract.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/DSAextract.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/DSAextract.py:183,Availability,robust,robust,183,"# there are three types of lines we are looking for; # 1) node lines, 2) edge lines 3) support lines (like page size, etc); # is this an edge line?; # note that this is no completely robust, if a none edge line; # for some reason contains -> it will be missidentified; # hand edit the file if this happens",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/DSAextract.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/DSAextract.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract-section.py:280,Integrability,wrap,wrapper,280,"""""""; Helper script to print out the raw content of an ELF section.; Example usages:; ```; # print out as bits by default; extract-section.py .text --input-file=foo.o; ```; ```; # read from stdin and print out in hex; cat foo.o | extract-section.py -h .text; ```; This is merely a wrapper around `llvm-readobj` that focuses on the binary; content as well as providing more formatting options.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract-section.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract-section.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:30,Modifiability,portab,portable,30,"# '-P' means the output is in portable format,; # '-g' means we only get global symbols,; # '-Xany' enforce handling both 32- and 64-bit objects on AIX,; # '--no-demangle' ensure that C++ symbol names are not demangled; note; # that llvm-nm do not demangle by default, but the system nm on AIX does; # that, so the behavior may change in the future,; # '-p' do not waste time sorting the symbols.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:71,Integrability,depend,depending,71,"# Look for undefined symbols, which have type U and may or may not; # (depending on which nm is being used) have value and size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:52,Security,expose,exposed,52,"# Skip X86GenMnemonicTables functions, they are not exposed from llvm/include/.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:59,Safety,detect,detect,59,"# Keep mangled llvm:: and clang:: function symbols. How we detect these is a; # bit of a mess and imprecise, but that avoids having to completely demangle; # the symbol name. The outermost namespace is at the end of the identifier; # mangling, and the identifier mangling is followed by the type mangling, so; # we look for (llvm|clang)@@ followed by something that looks like a; # function type mangling. To spot a function type we use (this is derived; # from clang/lib/AST/MicrosoftMangle.cpp):; # <function-type> ::= <function-class> <this-cvr-qualifiers>; # <calling-convention> <return-type>; # <argument-list> <throw-spec>; # <function-class> ::= [A-Z]; # <this-cvr-qualifiers> ::= [A-Z0-9_]*; # <calling-convention> ::= [A-JQ]; # <return-type> ::= .+; # <argument-list> ::= X (void); # ::= .+@ (list of types); # ::= .*Z (list of types, varargs); # <throw-spec> ::= exceptions are not allowed",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:118,Safety,avoid,avoids,118,"# Keep mangled llvm:: and clang:: function symbols. How we detect these is a; # bit of a mess and imprecise, but that avoids having to completely demangle; # the symbol name. The outermost namespace is at the end of the identifier; # mangling, and the identifier mangling is followed by the type mangling, so; # we look for (llvm|clang)@@ followed by something that looks like a; # function type mangling. To spot a function type we use (this is derived; # from clang/lib/AST/MicrosoftMangle.cpp):; # <function-type> ::= <function-class> <this-cvr-qualifiers>; # <calling-convention> <return-type>; # <argument-list> <throw-spec>; # <function-class> ::= [A-Z]; # <this-cvr-qualifiers> ::= [A-Z0-9_]*; # <calling-convention> ::= [A-JQ]; # <return-type> ::= .+; # <argument-list> ::= X (void); # ::= .+@ (list of types); # ::= .*Z (list of types, varargs); # <throw-spec> ::= exceptions are not allowed",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:147,Safety,safe,safely,147,# Itanium manglings are of the form _Z<identifier_mangling><type_mangling>. We; # demangle the identifier mangling to identify symbols that can be safely; # discarded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:77,Integrability,interface,interface,77,"# Certain kinds of complex manglings we assume cannot be part of a public; # interface, and we handle them by raising an exception.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:14,Usability,simpl,simple,14,# Check for a simple name,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:62,Integrability,depend,depends,62,# How we determine which symbols to keep and which to discard depends on; # the mangling scheme,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:308,Availability,error,error,308,"# Extract symbols from libraries in parallel. This is a huge time saver when; # doing a debug build, as there are hundreds of thousands of symbols in each; # library.; # FIXME: On AIX, the default pool size can be too big for a logical; # partition's allocated memory, and can lead to an out of memory; # IO error. We are setting the pool size to 8 to avoid such; # errors at the moment, and will look for a graceful solution later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:366,Availability,error,errors,366,"# Extract symbols from libraries in parallel. This is a huge time saver when; # doing a debug build, as there are hundreds of thousands of symbols in each; # library.; # FIXME: On AIX, the default pool size can be too big for a logical; # partition's allocated memory, and can lead to an out of memory; # IO error. We are setting the pool size to 8 to avoid such; # errors at the moment, and will look for a graceful solution later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:251,Energy Efficiency,allocate,allocated,251,"# Extract symbols from libraries in parallel. This is a huge time saver when; # doing a debug build, as there are hundreds of thousands of symbols in each; # library.; # FIXME: On AIX, the default pool size can be too big for a logical; # partition's allocated memory, and can lead to an out of memory; # IO error. We are setting the pool size to 8 to avoid such; # errors at the moment, and will look for a graceful solution later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:352,Safety,avoid,avoid,352,"# Extract symbols from libraries in parallel. This is a huge time saver when; # doing a debug build, as there are hundreds of thousands of symbols in each; # library.; # FIXME: On AIX, the default pool size can be too big for a logical; # partition's allocated memory, and can lead to an out of memory; # IO error. We are setting the pool size to 8 to avoid such; # errors at the moment, and will look for a graceful solution later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:228,Testability,log,logical,228,"# Extract symbols from libraries in parallel. This is a huge time saver when; # doing a debug build, as there are hundreds of thousands of symbols in each; # library.; # FIXME: On AIX, the default pool size can be too big for a logical; # partition's allocated memory, and can lead to an out of memory; # IO error. We are setting the pool size to 8 to avoid such; # errors at the moment, and will look for a graceful solution later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_vplan.py:201,Deployability,install,installed,201,"#!/usr/bin/env python; # This script extracts the VPlan digraphs from the vectoriser debug messages; # and saves them in individual dot files (one for each plan). Optionally, and; # providing 'dot' is installed, it can also render the dot into a PNG file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_vplan.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_vplan.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_vplan.py:91,Integrability,message,messages,91,"#!/usr/bin/env python; # This script extracts the VPlan digraphs from the vectoriser debug messages; # and saves them in individual dot files (one for each plan). Optionally, and; # providing 'dot' is installed, it can also render the dot into a PNG file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_vplan.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_vplan.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lldbDataFormatters.py:127,Security,expose,expose,127,"# By default, DenseMap instances use DenseMapPair to hold key-value; # entries. When the entry is a DenseMapPair, unwrap it to expose the; # children as simple std::pair values.; #; # This entry type is customizable (a template parameter). For other; # types, expose the entry type as is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lldbDataFormatters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lldbDataFormatters.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lldbDataFormatters.py:260,Security,expose,expose,260,"# By default, DenseMap instances use DenseMapPair to hold key-value; # entries. When the entry is a DenseMapPair, unwrap it to expose the; # children as simple std::pair values.; #; # This entry type is customizable (a template parameter). For other; # types, expose the entry type as is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lldbDataFormatters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lldbDataFormatters.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lldbDataFormatters.py:153,Usability,simpl,simple,153,"# By default, DenseMap instances use DenseMapPair to hold key-value; # entries. When the entry is a DenseMapPair, unwrap it to expose the; # children as simple std::pair values.; #; # This entry type is customizable (a template parameter). For other; # types, expose the entry type as is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lldbDataFormatters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lldbDataFormatters.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-gisel-cov.py:129,Integrability,depend,depending,129,"""""""; Summarize the information in the given coverage files. Emits the number of rules covered or the percentage of rules covered depending; on whether --num-rules has been used to specify the total number of rules.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/llvm-gisel-cov.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-gisel-cov.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-original-di-preservation.py:73,Testability,test,testing,73,#!/usr/bin/env python; #; # Debugify summary for the original debug info testing.; #,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/llvm-original-di-preservation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-original-di-preservation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-original-di-preservation.py:103,Usability,simpl,simple,103,"# The file contains json object per line.; # An example of the line (formatted json):; # {; # ""file"": ""simple.c"",; # ""pass"": ""Deduce function attributes in RPO"",; # ""bugs"": [; # [; # {; # ""action"": ""drop"",; # ""metadata"": ""DISubprogram"",; # ""name"": ""fn2""; # },; # {; # ""action"": ""drop"",; # ""metadata"": ""DISubprogram"",; # ""name"": ""fn1""; # }; # ]; # ]; # }",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/llvm-original-di-preservation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-original-di-preservation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-original-di-preservation.py:29,Modifiability,variab,variable,29,# DIVarBugs with same pass & variable name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/llvm-original-di-preservation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-original-di-preservation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py:66,Deployability,pipeline,pipeline,66,"""""""Utility functions for creating and manipulating LLVM 'opt' NPM pipeline objects.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py:10,Deployability,pipeline,pipeline,10,"""""""Create pipeline object from string representation.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py:35,Deployability,pipeline,pipeline,35,"""""""Create string representation of pipeline object.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py:54,Deployability,pipeline,pipeline,54,"""""""Count number of passes (pass-managers excluded) in pipeline object.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py:18,Deployability,pipeline,pipeline,18,"""""""Create two new pipeline objects by splitting pipeObj in two directly after pass with index splitIndex.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py:14,Deployability,pipeline,pipeline,14,"""""""Create new pipeline object by removing pass with index removeIndex from pipeObj.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py:18,Deployability,pipeline,pipeline,18,"""""""Create copy of pipeline object srcPipeObj.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py:14,Deployability,pipeline,pipeline,14,"""""""Create new pipeline object by removing empty pass-managers (those with count = 0) from srcPipeObj.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:391,Availability,error,error,391,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:572,Availability,error,error,572,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:789,Availability,error,error,789,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:123,Deployability,pipeline,pipeline,123,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:213,Deployability,pipeline,pipeline-passes,213,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:358,Deployability,pipeline,pipeline,358,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:424,Deployability,pipeline,pipeline,424,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:497,Deployability,pipeline,pipeline,497,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:536,Deployability,pipeline,pipeline,536,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:647,Deployability,pipeline,pipeline,647,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:729,Deployability,pipeline,pipeline,729,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:753,Deployability,pipeline,pipeline,753,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:855,Deployability,pipeline,pipeline,855,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:45,Deployability,pipeline,pipeline-passes,45,# Step #-1; # Launch 'opt' once with '-print-pipeline-passes' to expand pipeline before; # starting reduction. Allows specifying a default pipelines (e.g.; # '-passes=default<O3>').,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:72,Deployability,pipeline,pipeline,72,# Step #-1; # Launch 'opt' once with '-print-pipeline-passes' to expand pipeline before; # starting reduction. Allows specifying a default pipelines (e.g.; # '-passes=default<O3>').,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:139,Deployability,pipeline,pipelines,139,# Step #-1; # Launch 'opt' once with '-print-pipeline-passes' to expand pipeline before; # starting reduction. Allows specifying a default pipelines (e.g.; # '-passes=default<O3>').,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:72,Availability,failure,failure,72,"# Step #0; # Confirm that the given input, passes and options result in failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:27,Availability,down,down,27,"# Step #1; # Try to narrow down the failing pass sequence by splitting the pipeline in two; # opt invocations (A and B) starting with invocation A only running the first; # pipeline pass and invocation B the remaining. Keep moving the split point; # forward as long as invocation A exits normally and invocation B fails with; # the expected error. This will accomplish two things first the input IR will be; # further reduced and second, with that IR, the reduced pipeline for invocation; # B will be sufficient to reproduce.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:341,Availability,error,error,341,"# Step #1; # Try to narrow down the failing pass sequence by splitting the pipeline in two; # opt invocations (A and B) starting with invocation A only running the first; # pipeline pass and invocation B the remaining. Keep moving the split point; # forward as long as invocation A exits normally and invocation B fails with; # the expected error. This will accomplish two things first the input IR will be; # further reduced and second, with that IR, the reduced pipeline for invocation; # B will be sufficient to reproduce.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:75,Deployability,pipeline,pipeline,75,"# Step #1; # Try to narrow down the failing pass sequence by splitting the pipeline in two; # opt invocations (A and B) starting with invocation A only running the first; # pipeline pass and invocation B the remaining. Keep moving the split point; # forward as long as invocation A exits normally and invocation B fails with; # the expected error. This will accomplish two things first the input IR will be; # further reduced and second, with that IR, the reduced pipeline for invocation; # B will be sufficient to reproduce.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:173,Deployability,pipeline,pipeline,173,"# Step #1; # Try to narrow down the failing pass sequence by splitting the pipeline in two; # opt invocations (A and B) starting with invocation A only running the first; # pipeline pass and invocation B the remaining. Keep moving the split point; # forward as long as invocation A exits normally and invocation B fails with; # the expected error. This will accomplish two things first the input IR will be; # further reduced and second, with that IR, the reduced pipeline for invocation; # B will be sufficient to reproduce.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:464,Deployability,pipeline,pipeline,464,"# Step #1; # Try to narrow down the failing pass sequence by splitting the pipeline in two; # opt invocations (A and B) starting with invocation A only running the first; # pipeline pass and invocation B the remaining. Keep moving the split point; # forward as long as invocation A exits normally and invocation B fails with; # the expected error. This will accomplish two things first the input IR will be; # further reduced and second, with that IR, the reduced pipeline for invocation; # B will be sufficient to reproduce.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:418,Energy Efficiency,reduce,reduced,418,"# Step #1; # Try to narrow down the failing pass sequence by splitting the pipeline in two; # opt invocations (A and B) starting with invocation A only running the first; # pipeline pass and invocation B the remaining. Keep moving the split point; # forward as long as invocation A exits normally and invocation B fails with; # the expected error. This will accomplish two things first the input IR will be; # further reduced and second, with that IR, the reduced pipeline for invocation; # B will be sufficient to reproduce.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:456,Energy Efficiency,reduce,reduced,456,"# Step #1; # Try to narrow down the failing pass sequence by splitting the pipeline in two; # opt invocations (A and B) starting with invocation A only running the first; # pipeline pass and invocation B the remaining. Keep moving the split point; # forward as long as invocation A exits normally and invocation B fails with; # the expected error. This will accomplish two things first the input IR will be; # further reduced and second, with that IR, the reduced pipeline for invocation; # B will be sufficient to reproduce.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:103,Availability,error,error,103,# Step #2; # Try removing passes from the end of the remaining pipeline while still; # reproducing the error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:63,Deployability,pipeline,pipeline,63,# Step #2; # Try removing passes from the end of the remaining pipeline while still; # reproducing the error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:32,Deployability,pipeline,pipeline,32,# Step #3; # Now that we have a pipeline that is reduced both front and back we do; # exhaustive sweeps over the remainder trying to remove one pass at a time.; # Repeat as long as reduction is possible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:49,Energy Efficiency,reduce,reduced,49,# Step #3; # Now that we have a pipeline that is reduced both front and back we do; # exhaustive sweeps over the remainder trying to remove one pass at a time.; # Repeat as long as reduction is possible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/relative_lines.py:41,Testability,test,tests,41,"""""""Replaces absolute line numbers in lit-tests with relative line numbers. Writing line numbers like 152 in 'RUN: or CHECK:' makes tests hard to maintain:; inserting lines in the middle of the test means updating all the line numbers. Encoding them relative to the current line helps, and tools support it:; Lit will substitute %(line+2) with the actual line number; FileCheck supports [[@LINE+2]]. This tool takes a regex which captures a line number, and a list of test files.; It searches for line numbers in the files and replaces them with a relative; line number reference.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/relative_lines.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/relative_lines.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/relative_lines.py:131,Testability,test,tests,131,"""""""Replaces absolute line numbers in lit-tests with relative line numbers. Writing line numbers like 152 in 'RUN: or CHECK:' makes tests hard to maintain:; inserting lines in the middle of the test means updating all the line numbers. Encoding them relative to the current line helps, and tools support it:; Lit will substitute %(line+2) with the actual line number; FileCheck supports [[@LINE+2]]. This tool takes a regex which captures a line number, and a list of test files.; It searches for line numbers in the files and replaces them with a relative; line number reference.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/relative_lines.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/relative_lines.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/relative_lines.py:193,Testability,test,test,193,"""""""Replaces absolute line numbers in lit-tests with relative line numbers. Writing line numbers like 152 in 'RUN: or CHECK:' makes tests hard to maintain:; inserting lines in the middle of the test means updating all the line numbers. Encoding them relative to the current line helps, and tools support it:; Lit will substitute %(line+2) with the actual line number; FileCheck supports [[@LINE+2]]. This tool takes a regex which captures a line number, and a list of test files.; It searches for line numbers in the files and replaces them with a relative; line number reference.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/relative_lines.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/relative_lines.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/relative_lines.py:467,Testability,test,test,467,"""""""Replaces absolute line numbers in lit-tests with relative line numbers. Writing line numbers like 152 in 'RUN: or CHECK:' makes tests hard to maintain:; inserting lines in the middle of the test means updating all the line numbers. Encoding them relative to the current line helps, and tools support it:; Lit will substitute %(line+2) with the actual line number; FileCheck supports [[@LINE+2]]. This tool takes a regex which captures a line number, and a list of test files.; It searches for line numbers in the files and replaces them with a relative; line number reference.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/relative_lines.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/relative_lines.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/relative_lines.py:38,Testability,test,test,38,"""""""Example usage:; find -type f clang/test/CodeCompletion | grep -v /Inputs/ | \\; xargs relative_lines.py --dry-run --verbose --near=100 \\; --pattern='-code-completion-at[ =]%s:(\d+)' \\; --pattern='requires fix-it: {(\d+):\d+-(\d+):\d+}'; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/relative_lines.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/relative_lines.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:123,Testability,test,tests,123,"""""""; Runs an executable on a remote host. This is meant to be used as an executor when running the LLVM and the Libraries; tests on a target.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:85,Testability,test,test,85,"# Note: The default value is for the backward compatibility with a hack in; # libcxx test suite.; # If an argument is a file that ends in `.tmp.exe`, assume it is the name; # of an executable generated by a test file. We call these test-executables; # below. This allows us to do custom processing like codesigning test-executables; # and changing their path when running on the remote host. It's also possible; # for there to be no such executable, for example in the case of a .sh.cpp; # test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:207,Testability,test,test,207,"# Note: The default value is for the backward compatibility with a hack in; # libcxx test suite.; # If an argument is a file that ends in `.tmp.exe`, assume it is the name; # of an executable generated by a test file. We call these test-executables; # below. This allows us to do custom processing like codesigning test-executables; # and changing their path when running on the remote host. It's also possible; # for there to be no such executable, for example in the case of a .sh.cpp; # test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:232,Testability,test,test-executables,232,"# Note: The default value is for the backward compatibility with a hack in; # libcxx test suite.; # If an argument is a file that ends in `.tmp.exe`, assume it is the name; # of an executable generated by a test file. We call these test-executables; # below. This allows us to do custom processing like codesigning test-executables; # and changing their path when running on the remote host. It's also possible; # for there to be no such executable, for example in the case of a .sh.cpp; # test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:315,Testability,test,test-executables,315,"# Note: The default value is for the backward compatibility with a hack in; # libcxx test suite.; # If an argument is a file that ends in `.tmp.exe`, assume it is the name; # of an executable generated by a test file. We call these test-executables; # below. This allows us to do custom processing like codesigning test-executables; # and changing their path when running on the remote host. It's also possible; # for there to be no such executable, for example in the case of a .sh.cpp; # test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:490,Testability,test,test,490,"# Note: The default value is for the backward compatibility with a hack in; # libcxx test suite.; # If an argument is a file that ends in `.tmp.exe`, assume it is the name; # of an executable generated by a test file. We call these test-executables; # below. This allows us to do custom processing like codesigning test-executables; # and changing their path when running on the remote host. It's also possible; # for there to be no such executable, for example in the case of a .sh.cpp; # test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:41,Testability,test,test,41,# Create a temporary directory where the test will be run.; # That is effectively the value of %T on the remote host.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:34,Testability,test,test-executables,34,# Do any necessary codesigning of test-executables found in the command line.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:88,Testability,test,test,88,"# tar up the execution directory (which contains everything that's needed; # to run the test), and copy the tarball over to the remote host.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:56,Security,access,accessing,56,"# Make sure we close the file before we scp it, because accessing; # the temporary file while still open doesn't work on Windows.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:12,Integrability,depend,dependencies,12,# Untar the dependencies in the temporary directory and remove the tarball.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:132,Testability,test,test-executable,132,# Make sure all executables in the remote command line have 'execute'; # permissions on the remote host. The host that compiled the test-executable; # might not have a notion of 'executable' permissions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:181,Testability,test,test-executables,181,"# Execute the command through SSH in the temporary directory, with the; # correct environment. We tweak the command line to run it on the remote; # host by transforming the path of test-executables to their path in the; # temporary directory on the remote host.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py:1104,Deployability,release,release,1104,"""""""Checks for reverts of commits across a given git commit. To clarify the meaning of 'across' with an example, if we had the following; commit history (where `a -> b` notes that `b` is a direct child of `a`):. 123abc -> 223abc -> 323abc -> 423abc -> 523abc. And where 423abc is a revert of 223abc, this revert is considered to be 'across'; 323abc. More generally, a revert A of a parent commit B is considered to be; 'across' a commit C if C is a parent of A and B is a parent of C. Please note that revert detection in general is really difficult, since merge; conflicts/etc always introduce _some_ amount of fuzziness. This script just; uses a bundle of heuristics, and is bound to ignore / incorrectly flag some; reverts. The hope is that it'll easily catch the vast majority (>90%) of them,; though. This is designed to be used in one of two ways: an import in Python, or run; directly from a shell. If you want to import this, the `find_reverts`; function is the thing to look at. If you'd rather use this from a shell, have a; usage example:. ```; ./revert_checker.py c47f97169 origin/main origin/release/12.x; ```. This checks for all reverts from the tip of origin/main to c47f97169, which are; across the latter. It then does the same for origin/release/12.x to c47f97169.; Duplicate reverts discovered when walking both roots (origin/main and; origin/release/12.x) are deduplicated in output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py:1256,Deployability,release,release,1256,"""""""Checks for reverts of commits across a given git commit. To clarify the meaning of 'across' with an example, if we had the following; commit history (where `a -> b` notes that `b` is a direct child of `a`):. 123abc -> 223abc -> 323abc -> 423abc -> 523abc. And where 423abc is a revert of 223abc, this revert is considered to be 'across'; 323abc. More generally, a revert A of a parent commit B is considered to be; 'across' a commit C if C is a parent of A and B is a parent of C. Please note that revert detection in general is really difficult, since merge; conflicts/etc always introduce _some_ amount of fuzziness. This script just; uses a bundle of heuristics, and is bound to ignore / incorrectly flag some; reverts. The hope is that it'll easily catch the vast majority (>90%) of them,; though. This is designed to be used in one of two ways: an import in Python, or run; directly from a shell. If you want to import this, the `find_reverts`; function is the thing to look at. If you'd rather use this from a shell, have a; usage example:. ```; ./revert_checker.py c47f97169 origin/main origin/release/12.x; ```. This checks for all reverts from the tip of origin/main to c47f97169, which are; across the latter. It then does the same for origin/release/12.x to c47f97169.; Duplicate reverts discovered when walking both roots (origin/main and; origin/release/12.x) are deduplicated in output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py:1362,Deployability,release,release,1362,"""""""Checks for reverts of commits across a given git commit. To clarify the meaning of 'across' with an example, if we had the following; commit history (where `a -> b` notes that `b` is a direct child of `a`):. 123abc -> 223abc -> 323abc -> 423abc -> 523abc. And where 423abc is a revert of 223abc, this revert is considered to be 'across'; 323abc. More generally, a revert A of a parent commit B is considered to be; 'across' a commit C if C is a parent of A and B is a parent of C. Please note that revert detection in general is really difficult, since merge; conflicts/etc always introduce _some_ amount of fuzziness. This script just; uses a bundle of heuristics, and is bound to ignore / incorrectly flag some; reverts. The hope is that it'll easily catch the vast majority (>90%) of them,; though. This is designed to be used in one of two ways: an import in Python, or run; directly from a shell. If you want to import this, the `find_reverts`; function is the thing to look at. If you'd rather use this from a shell, have a; usage example:. ```; ./revert_checker.py c47f97169 origin/main origin/release/12.x; ```. This checks for all reverts from the tip of origin/main to c47f97169, which are; across the latter. It then does the same for origin/release/12.x to c47f97169.; Duplicate reverts discovered when walking both roots (origin/main and; origin/release/12.x) are deduplicated in output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py:508,Safety,detect,detection,508,"""""""Checks for reverts of commits across a given git commit. To clarify the meaning of 'across' with an example, if we had the following; commit history (where `a -> b` notes that `b` is a direct child of `a`):. 123abc -> 223abc -> 323abc -> 423abc -> 523abc. And where 423abc is a revert of 223abc, this revert is considered to be 'across'; 323abc. More generally, a revert A of a parent commit B is considered to be; 'across' a commit C if C is a parent of A and B is a parent of C. Please note that revert detection in general is really difficult, since merge; conflicts/etc always introduce _some_ amount of fuzziness. This script just; uses a bundle of heuristics, and is bound to ignore / incorrectly flag some; reverts. The hope is that it'll easily catch the vast majority (>90%) of them,; though. This is designed to be used in one of two ways: an import in Python, or run; directly from a shell. If you want to import this, the `find_reverts`; function is the thing to look at. If you'd rather use this from a shell, have a; usage example:. ```; ./revert_checker.py c47f97169 origin/main origin/release/12.x; ```. This checks for all reverts from the tip of origin/main to c47f97169, which are; across the latter. It then does the same for origin/release/12.x to c47f97169.; Duplicate reverts discovered when walking both roots (origin/main and; origin/release/12.x) are deduplicated in output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py:54,Testability,log,log,54,"# Find the next separator line. If there's nothing to log, it may not exist.; # It might not be the first line if git feels complainy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py:42,Testability,log,log,42,"# Since `all_reverts` contains reverts in log order (e.g., newer comes before; # older), we need to reverse this to keep with our guarantee of older =; # earlier in the result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py:85,Availability,avail,available,85,"""""""Tests for revert_checker. Note that these tests require having LLVM's git history available, since our; repository has a few interesting instances of edge-cases.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker_test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py:45,Testability,test,tests,45,"""""""Tests for revert_checker. Note that these tests require having LLVM's git history available, since our; repository has a few interesting instances of edge-cases.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker_test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py:28,Security,access,access,28,# pylint: disable=protected-access,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker_test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py:20,Integrability,message,messages,20,"""""""Silences all log messages. Also collects info about log messages that would've been emitted.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker_test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py:59,Integrability,message,messages,59,"""""""Silences all log messages. Also collects info about log messages that would've been emitted.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker_test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py:16,Testability,log,log,16,"""""""Silences all log messages. Also collects info about log messages that would've been emitted.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker_test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py:55,Testability,log,log,55,"""""""Silences all log messages. Also collects info about log messages that would've been emitted.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker_test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:1064,Availability,failure,failure,1064,"""""""Script to bisect over files in an rsp file. This is mostly used for detecting which file contains a miscompile between two; compiler revisions. It does this by bisecting over an rsp file. Between two; build directories, this script will make the rsp file reference the current; build directory's version of some set of the rsp's object files/libraries, and; reference the other build directory's version of the same files for the; remaining set of object files/libraries. Build the target in two separate directories with the two compiler revisions,; keeping the rsp file around since ninja by default deletes the rsp file after; building.; $ ninja -d keeprsp mytarget. Create a script to build the target and run an interesting test. Get the; command to build the target via; $ ninja -t commands | grep mytarget; The command to build the target should reference the rsp file.; This script doesn't care if the test script returns 0 or 1 for specifically the; successful or failing test, just that the test script returns a different; return code for success vs failure.; Since the command that `ninja -t commands` is run from the build directory,; usually the test script cd's to the build directory. $ rsp_bisect.py --test=path/to/test_script --rsp=path/to/build/target.rsp; --other_rel_path=../Other; where --other_rel_path is the relative path from the first build directory to; the other build directory. This is prepended to files in the rsp. For a full example, if the foo target is suspected to contain a miscompile in; some file, have two different build directories, buildgood/ and buildbad/ and; run; $ ninja -d keeprsp foo; in both so we have two versions of all relevant object files that may contain a; miscompile, one built by a good compiler and one by a bad compiler. In buildgood/, run; $ ninja -t commands | grep '-o .*foo'; to get the command to link the files together. It may look something like; clang -o foo @foo.rsp. Now create a test script that runs the link step and what",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:71,Safety,detect,detecting,71,"""""""Script to bisect over files in an rsp file. This is mostly used for detecting which file contains a miscompile between two; compiler revisions. It does this by bisecting over an rsp file. Between two; build directories, this script will make the rsp file reference the current; build directory's version of some set of the rsp's object files/libraries, and; reference the other build directory's version of the same files for the; remaining set of object files/libraries. Build the target in two separate directories with the two compiler revisions,; keeping the rsp file around since ninja by default deletes the rsp file after; building.; $ ninja -d keeprsp mytarget. Create a script to build the target and run an interesting test. Get the; command to build the target via; $ ninja -t commands | grep mytarget; The command to build the target should reference the rsp file.; This script doesn't care if the test script returns 0 or 1 for specifically the; successful or failing test, just that the test script returns a different; return code for success vs failure.; Since the command that `ninja -t commands` is run from the build directory,; usually the test script cd's to the build directory. $ rsp_bisect.py --test=path/to/test_script --rsp=path/to/build/target.rsp; --other_rel_path=../Other; where --other_rel_path is the relative path from the first build directory to; the other build directory. This is prepended to files in the rsp. For a full example, if the foo target is suspected to contain a miscompile in; some file, have two different build directories, buildgood/ and buildbad/ and; run; $ ninja -d keeprsp foo; in both so we have two versions of all relevant object files that may contain a; miscompile, one built by a good compiler and one by a bad compiler. In buildgood/, run; $ ninja -t commands | grep '-o .*foo'; to get the command to link the files together. It may look something like; clang -o foo @foo.rsp. Now create a test script that runs the link step and what",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:732,Testability,test,test,732,"""""""Script to bisect over files in an rsp file. This is mostly used for detecting which file contains a miscompile between two; compiler revisions. It does this by bisecting over an rsp file. Between two; build directories, this script will make the rsp file reference the current; build directory's version of some set of the rsp's object files/libraries, and; reference the other build directory's version of the same files for the; remaining set of object files/libraries. Build the target in two separate directories with the two compiler revisions,; keeping the rsp file around since ninja by default deletes the rsp file after; building.; $ ninja -d keeprsp mytarget. Create a script to build the target and run an interesting test. Get the; command to build the target via; $ ninja -t commands | grep mytarget; The command to build the target should reference the rsp file.; This script doesn't care if the test script returns 0 or 1 for specifically the; successful or failing test, just that the test script returns a different; return code for success vs failure.; Since the command that `ninja -t commands` is run from the build directory,; usually the test script cd's to the build directory. $ rsp_bisect.py --test=path/to/test_script --rsp=path/to/build/target.rsp; --other_rel_path=../Other; where --other_rel_path is the relative path from the first build directory to; the other build directory. This is prepended to files in the rsp. For a full example, if the foo target is suspected to contain a miscompile in; some file, have two different build directories, buildgood/ and buildbad/ and; run; $ ninja -d keeprsp foo; in both so we have two versions of all relevant object files that may contain a; miscompile, one built by a good compiler and one by a bad compiler. In buildgood/, run; $ ninja -t commands | grep '-o .*foo'; to get the command to link the files together. It may look something like; clang -o foo @foo.rsp. Now create a test script that runs the link step and what",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:913,Testability,test,test,913,"""""""Script to bisect over files in an rsp file. This is mostly used for detecting which file contains a miscompile between two; compiler revisions. It does this by bisecting over an rsp file. Between two; build directories, this script will make the rsp file reference the current; build directory's version of some set of the rsp's object files/libraries, and; reference the other build directory's version of the same files for the; remaining set of object files/libraries. Build the target in two separate directories with the two compiler revisions,; keeping the rsp file around since ninja by default deletes the rsp file after; building.; $ ninja -d keeprsp mytarget. Create a script to build the target and run an interesting test. Get the; command to build the target via; $ ninja -t commands | grep mytarget; The command to build the target should reference the rsp file.; This script doesn't care if the test script returns 0 or 1 for specifically the; successful or failing test, just that the test script returns a different; return code for success vs failure.; Since the command that `ninja -t commands` is run from the build directory,; usually the test script cd's to the build directory. $ rsp_bisect.py --test=path/to/test_script --rsp=path/to/build/target.rsp; --other_rel_path=../Other; where --other_rel_path is the relative path from the first build directory to; the other build directory. This is prepended to files in the rsp. For a full example, if the foo target is suspected to contain a miscompile in; some file, have two different build directories, buildgood/ and buildbad/ and; run; $ ninja -d keeprsp foo; in both so we have two versions of all relevant object files that may contain a; miscompile, one built by a good compiler and one by a bad compiler. In buildgood/, run; $ ninja -t commands | grep '-o .*foo'; to get the command to link the files together. It may look something like; clang -o foo @foo.rsp. Now create a test script that runs the link step and what",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:984,Testability,test,test,984,"""""""Script to bisect over files in an rsp file. This is mostly used for detecting which file contains a miscompile between two; compiler revisions. It does this by bisecting over an rsp file. Between two; build directories, this script will make the rsp file reference the current; build directory's version of some set of the rsp's object files/libraries, and; reference the other build directory's version of the same files for the; remaining set of object files/libraries. Build the target in two separate directories with the two compiler revisions,; keeping the rsp file around since ninja by default deletes the rsp file after; building.; $ ninja -d keeprsp mytarget. Create a script to build the target and run an interesting test. Get the; command to build the target via; $ ninja -t commands | grep mytarget; The command to build the target should reference the rsp file.; This script doesn't care if the test script returns 0 or 1 for specifically the; successful or failing test, just that the test script returns a different; return code for success vs failure.; Since the command that `ninja -t commands` is run from the build directory,; usually the test script cd's to the build directory. $ rsp_bisect.py --test=path/to/test_script --rsp=path/to/build/target.rsp; --other_rel_path=../Other; where --other_rel_path is the relative path from the first build directory to; the other build directory. This is prepended to files in the rsp. For a full example, if the foo target is suspected to contain a miscompile in; some file, have two different build directories, buildgood/ and buildbad/ and; run; $ ninja -d keeprsp foo; in both so we have two versions of all relevant object files that may contain a; miscompile, one built by a good compiler and one by a bad compiler. In buildgood/, run; $ ninja -t commands | grep '-o .*foo'; to get the command to link the files together. It may look something like; clang -o foo @foo.rsp. Now create a test script that runs the link step and what",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:1004,Testability,test,test,1004,"""""""Script to bisect over files in an rsp file. This is mostly used for detecting which file contains a miscompile between two; compiler revisions. It does this by bisecting over an rsp file. Between two; build directories, this script will make the rsp file reference the current; build directory's version of some set of the rsp's object files/libraries, and; reference the other build directory's version of the same files for the; remaining set of object files/libraries. Build the target in two separate directories with the two compiler revisions,; keeping the rsp file around since ninja by default deletes the rsp file after; building.; $ ninja -d keeprsp mytarget. Create a script to build the target and run an interesting test. Get the; command to build the target via; $ ninja -t commands | grep mytarget; The command to build the target should reference the rsp file.; This script doesn't care if the test script returns 0 or 1 for specifically the; successful or failing test, just that the test script returns a different; return code for success vs failure.; Since the command that `ninja -t commands` is run from the build directory,; usually the test script cd's to the build directory. $ rsp_bisect.py --test=path/to/test_script --rsp=path/to/build/target.rsp; --other_rel_path=../Other; where --other_rel_path is the relative path from the first build directory to; the other build directory. This is prepended to files in the rsp. For a full example, if the foo target is suspected to contain a miscompile in; some file, have two different build directories, buildgood/ and buildbad/ and; run; $ ninja -d keeprsp foo; in both so we have two versions of all relevant object files that may contain a; miscompile, one built by a good compiler and one by a bad compiler. In buildgood/, run; $ ninja -t commands | grep '-o .*foo'; to get the command to link the files together. It may look something like; clang -o foo @foo.rsp. Now create a test script that runs the link step and what",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:1163,Testability,test,test,1163,"evisions. It does this by bisecting over an rsp file. Between two; build directories, this script will make the rsp file reference the current; build directory's version of some set of the rsp's object files/libraries, and; reference the other build directory's version of the same files for the; remaining set of object files/libraries. Build the target in two separate directories with the two compiler revisions,; keeping the rsp file around since ninja by default deletes the rsp file after; building.; $ ninja -d keeprsp mytarget. Create a script to build the target and run an interesting test. Get the; command to build the target via; $ ninja -t commands | grep mytarget; The command to build the target should reference the rsp file.; This script doesn't care if the test script returns 0 or 1 for specifically the; successful or failing test, just that the test script returns a different; return code for success vs failure.; Since the command that `ninja -t commands` is run from the build directory,; usually the test script cd's to the build directory. $ rsp_bisect.py --test=path/to/test_script --rsp=path/to/build/target.rsp; --other_rel_path=../Other; where --other_rel_path is the relative path from the first build directory to; the other build directory. This is prepended to files in the rsp. For a full example, if the foo target is suspected to contain a miscompile in; some file, have two different build directories, buildgood/ and buildbad/ and; run; $ ninja -d keeprsp foo; in both so we have two versions of all relevant object files that may contain a; miscompile, one built by a good compiler and one by a bad compiler. In buildgood/, run; $ ninja -t commands | grep '-o .*foo'; to get the command to link the files together. It may look something like; clang -o foo @foo.rsp. Now create a test script that runs the link step and whatever test reproduces a; miscompile and returns a non-zero exit code when there is a miscompile. For; example; ```; #!/bin/bash; # immedia",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:1222,Testability,test,test,1222,"the rsp file reference the current; build directory's version of some set of the rsp's object files/libraries, and; reference the other build directory's version of the same files for the; remaining set of object files/libraries. Build the target in two separate directories with the two compiler revisions,; keeping the rsp file around since ninja by default deletes the rsp file after; building.; $ ninja -d keeprsp mytarget. Create a script to build the target and run an interesting test. Get the; command to build the target via; $ ninja -t commands | grep mytarget; The command to build the target should reference the rsp file.; This script doesn't care if the test script returns 0 or 1 for specifically the; successful or failing test, just that the test script returns a different; return code for success vs failure.; Since the command that `ninja -t commands` is run from the build directory,; usually the test script cd's to the build directory. $ rsp_bisect.py --test=path/to/test_script --rsp=path/to/build/target.rsp; --other_rel_path=../Other; where --other_rel_path is the relative path from the first build directory to; the other build directory. This is prepended to files in the rsp. For a full example, if the foo target is suspected to contain a miscompile in; some file, have two different build directories, buildgood/ and buildbad/ and; run; $ ninja -d keeprsp foo; in both so we have two versions of all relevant object files that may contain a; miscompile, one built by a good compiler and one by a bad compiler. In buildgood/, run; $ ninja -t commands | grep '-o .*foo'; to get the command to link the files together. It may look something like; clang -o foo @foo.rsp. Now create a test script that runs the link step and whatever test reproduces a; miscompile and returns a non-zero exit code when there is a miscompile. For; example; ```; #!/bin/bash; # immediately bail out of script if any command returns a non-zero return code; set -e; clang -o foo @foo.rsp; ./foo;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:1957,Testability,test,test,1957,"t should reference the rsp file.; This script doesn't care if the test script returns 0 or 1 for specifically the; successful or failing test, just that the test script returns a different; return code for success vs failure.; Since the command that `ninja -t commands` is run from the build directory,; usually the test script cd's to the build directory. $ rsp_bisect.py --test=path/to/test_script --rsp=path/to/build/target.rsp; --other_rel_path=../Other; where --other_rel_path is the relative path from the first build directory to; the other build directory. This is prepended to files in the rsp. For a full example, if the foo target is suspected to contain a miscompile in; some file, have two different build directories, buildgood/ and buildbad/ and; run; $ ninja -d keeprsp foo; in both so we have two versions of all relevant object files that may contain a; miscompile, one built by a good compiler and one by a bad compiler. In buildgood/, run; $ ninja -t commands | grep '-o .*foo'; to get the command to link the files together. It may look something like; clang -o foo @foo.rsp. Now create a test script that runs the link step and whatever test reproduces a; miscompile and returns a non-zero exit code when there is a miscompile. For; example; ```; #!/bin/bash; # immediately bail out of script if any command returns a non-zero return code; set -e; clang -o foo @foo.rsp; ./foo; ```. With buildgood/ as the working directory, run; $ path/to/llvm-project/llvm/utils/rsp_bisect.py \; --test=path/to/test_script --rsp=./foo.rsp --other_rel_path=../buildbad/; If rsp_bisect is successful, it will print the first file in the rsp file that; when using the bad build directory's version causes the test script to return a; different return code. foo.rsp.0 and foo.rsp.1 will also be written. foo.rsp.0; will be a copy of foo.rsp with the relevant file using the version in; buildgood/, and foo.rsp.1 will be a copy of foo.rsp with the relevant file; using the version in buildbad/. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:2006,Testability,test,test,2006,"t should reference the rsp file.; This script doesn't care if the test script returns 0 or 1 for specifically the; successful or failing test, just that the test script returns a different; return code for success vs failure.; Since the command that `ninja -t commands` is run from the build directory,; usually the test script cd's to the build directory. $ rsp_bisect.py --test=path/to/test_script --rsp=path/to/build/target.rsp; --other_rel_path=../Other; where --other_rel_path is the relative path from the first build directory to; the other build directory. This is prepended to files in the rsp. For a full example, if the foo target is suspected to contain a miscompile in; some file, have two different build directories, buildgood/ and buildbad/ and; run; $ ninja -d keeprsp foo; in both so we have two versions of all relevant object files that may contain a; miscompile, one built by a good compiler and one by a bad compiler. In buildgood/, run; $ ninja -t commands | grep '-o .*foo'; to get the command to link the files together. It may look something like; clang -o foo @foo.rsp. Now create a test script that runs the link step and whatever test reproduces a; miscompile and returns a non-zero exit code when there is a miscompile. For; example; ```; #!/bin/bash; # immediately bail out of script if any command returns a non-zero return code; set -e; clang -o foo @foo.rsp; ./foo; ```. With buildgood/ as the working directory, run; $ path/to/llvm-project/llvm/utils/rsp_bisect.py \; --test=path/to/test_script --rsp=./foo.rsp --other_rel_path=../buildbad/; If rsp_bisect is successful, it will print the first file in the rsp file that; when using the bad build directory's version causes the test script to return a; different return code. foo.rsp.0 and foo.rsp.1 will also be written. foo.rsp.0; will be a copy of foo.rsp with the relevant file using the version in; buildgood/, and foo.rsp.1 will be a copy of foo.rsp with the relevant file; using the version in buildbad/. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:2352,Testability,test,test,2352,"t should reference the rsp file.; This script doesn't care if the test script returns 0 or 1 for specifically the; successful or failing test, just that the test script returns a different; return code for success vs failure.; Since the command that `ninja -t commands` is run from the build directory,; usually the test script cd's to the build directory. $ rsp_bisect.py --test=path/to/test_script --rsp=path/to/build/target.rsp; --other_rel_path=../Other; where --other_rel_path is the relative path from the first build directory to; the other build directory. This is prepended to files in the rsp. For a full example, if the foo target is suspected to contain a miscompile in; some file, have two different build directories, buildgood/ and buildbad/ and; run; $ ninja -d keeprsp foo; in both so we have two versions of all relevant object files that may contain a; miscompile, one built by a good compiler and one by a bad compiler. In buildgood/, run; $ ninja -t commands | grep '-o .*foo'; to get the command to link the files together. It may look something like; clang -o foo @foo.rsp. Now create a test script that runs the link step and whatever test reproduces a; miscompile and returns a non-zero exit code when there is a miscompile. For; example; ```; #!/bin/bash; # immediately bail out of script if any command returns a non-zero return code; set -e; clang -o foo @foo.rsp; ./foo; ```. With buildgood/ as the working directory, run; $ path/to/llvm-project/llvm/utils/rsp_bisect.py \; --test=path/to/test_script --rsp=./foo.rsp --other_rel_path=../buildbad/; If rsp_bisect is successful, it will print the first file in the rsp file that; when using the bad build directory's version causes the test script to return a; different return code. foo.rsp.0 and foo.rsp.1 will also be written. foo.rsp.0; will be a copy of foo.rsp with the relevant file using the version in; buildgood/, and foo.rsp.1 will be a copy of foo.rsp with the relevant file; using the version in buildbad/. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:2560,Testability,test,test,2560,"t should reference the rsp file.; This script doesn't care if the test script returns 0 or 1 for specifically the; successful or failing test, just that the test script returns a different; return code for success vs failure.; Since the command that `ninja -t commands` is run from the build directory,; usually the test script cd's to the build directory. $ rsp_bisect.py --test=path/to/test_script --rsp=path/to/build/target.rsp; --other_rel_path=../Other; where --other_rel_path is the relative path from the first build directory to; the other build directory. This is prepended to files in the rsp. For a full example, if the foo target is suspected to contain a miscompile in; some file, have two different build directories, buildgood/ and buildbad/ and; run; $ ninja -d keeprsp foo; in both so we have two versions of all relevant object files that may contain a; miscompile, one built by a good compiler and one by a bad compiler. In buildgood/, run; $ ninja -t commands | grep '-o .*foo'; to get the command to link the files together. It may look something like; clang -o foo @foo.rsp. Now create a test script that runs the link step and whatever test reproduces a; miscompile and returns a non-zero exit code when there is a miscompile. For; example; ```; #!/bin/bash; # immediately bail out of script if any command returns a non-zero return code; set -e; clang -o foo @foo.rsp; ./foo; ```. With buildgood/ as the working directory, run; $ path/to/llvm-project/llvm/utils/rsp_bisect.py \; --test=path/to/test_script --rsp=./foo.rsp --other_rel_path=../buildbad/; If rsp_bisect is successful, it will print the first file in the rsp file that; when using the bad build directory's version causes the test script to return a; different return code. foo.rsp.0 and foo.rsp.1 will also be written. foo.rsp.0; will be a copy of foo.rsp with the relevant file using the version in; buildgood/, and foo.rsp.1 will be a copy of foo.rsp with the relevant file; using the version in buildbad/. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:12,Testability,test,test,12,"""""""Runs the test and returns whether it was successful or not.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:42,Testability,test,test,42,"""""""Write the rsp file to disk and run the test.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:52,Testability,test,test,52,"""""""Bisect over rsp entries. Args:; zero_result: the test result when modify_after_num is 0. Returns:; The index of the file in the rsp file where the test result changes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:150,Testability,test,test,150,"""""""Bisect over rsp entries. Args:; zero_result: the test result when modify_after_num is 0. Returns:; The index of the file in the rsp file where the test result changes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:25,Testability,test,tester,25,"""""""A shuffle vector fuzz tester. This is a python program to fuzz test the LLVM shufflevector instruction. It; generates a function with a random sequnece of shufflevectors, maintaining the; element mapping accumulated across the function. It then generates a main; function which calls it with a different value in each element and checks that; the result matches the expected mapping. Take the output IR printed to stdout, compile it to an executable using whatever; set of transforms you want to test, and run the program. If it crashes, it found; a bug.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:66,Testability,test,test,66,"""""""A shuffle vector fuzz tester. This is a python program to fuzz test the LLVM shufflevector instruction. It; generates a function with a random sequnece of shufflevectors, maintaining the; element mapping accumulated across the function. It then generates a main; function which calls it with a different value in each element and checks that; the result matches the expected mapping. Take the output IR printed to stdout, compile it to an executable using whatever; set of transforms you want to test, and run the program. If it crashes, it found; a bug.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:499,Testability,test,test,499,"""""""A shuffle vector fuzz tester. This is a python program to fuzz test the LLVM shufflevector instruction. It; generates a function with a random sequnece of shufflevectors, maintaining the; element mapping accumulated across the function. It then generates a main; function which calls it with a different value in each element and checks that; the result matches the expected mapping. Take the output IR printed to stdout, compile it to an executable using whatever; set of transforms you want to test, and run the program. If it crashes, it found; a bug.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:661,Energy Efficiency,power,power,661,"# Because undef (-1) saturates and is indistinguishable when testing the; # correctness of a shuffle, we want to bias our fuzz toward having a decent; # mixture of non-undef lanes in the end. With a deep shuffle tree, the; # probabilies aren't good so we need to bias things. The math here is that if; # we uniformly select between -1 and the other inputs, each element of the; # result will have the following probability of being undef:; #; # 1 - (shuffle_range/(shuffle_range+1))^max_shuffle_height; #; # More generally, for any probability P of selecting a defined element in; # a single shuffle, the end result is:; #; # 1 - P^max_shuffle_height; #; # The power of the shuffle height is the real problem, as we want:; #; # 1 - shuffle_range/(shuffle_range+1); #; # So we bias the selection of undef at any given node based on the tree; # height. Below, let 'A' be 'len(shuffle_range)', 'C' be 'max_shuffle_height',; # and 'B' be the bias we use to compensate for; # C '((A+1)*A^(1/C))/(A*(A+1)^(1/C))':; #; # 1 - (B * A)/(A + 1)^C = 1 - A/(A + 1); #; # So at each node we use:; #; # 1 - (B * A)/(A + 1); # = 1 - ((A + 1) * A * A^(1/C))/(A * (A + 1) * (A + 1)^(1/C)); # = 1 - ((A + 1) * A^((C + 1)/C))/(A * (A + 1)^((C + 1)/C)); #; # This is the formula we use to select undef lanes in the shuffle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:61,Testability,test,testing,61,"# Because undef (-1) saturates and is indistinguishable when testing the; # correctness of a shuffle, we want to bias our fuzz toward having a decent; # mixture of non-undef lanes in the end. With a deep shuffle tree, the; # probabilies aren't good so we need to bias things. The math here is that if; # we uniformly select between -1 and the other inputs, each element of the; # result will have the following probability of being undef:; #; # 1 - (shuffle_range/(shuffle_range+1))^max_shuffle_height; #; # More generally, for any probability P of selecting a defined element in; # a single shuffle, the end result is:; #; # 1 - P^max_shuffle_height; #; # The power of the shuffle height is the real problem, as we want:; #; # 1 - shuffle_range/(shuffle_range+1); #; # So we bias the selection of undef at any given node based on the tree; # height. Below, let 'A' be 'len(shuffle_range)', 'C' be 'max_shuffle_height',; # and 'B' be the bias we use to compensate for; # C '((A+1)*A^(1/C))/(A*(A+1)^(1/C))':; #; # 1 - (B * A)/(A + 1)^C = 1 - A/(A + 1); #; # So at each node we use:; #; # 1 - (B * A)/(A + 1); # = 1 - ((A + 1) * A * A^(1/C))/(A * (A + 1) * (A + 1)^(1/C)); # = 1 - ((A + 1) * A^((C + 1)/C))/(A * (A + 1)^((C + 1)/C)); #; # This is the formula we use to select undef lanes in the shuffle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:45,Testability,test,test,45,"""""""; define internal fastcc <%(N)d x %(T)s> @test(%(arguments)s) noinline nounwind {; entry:""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:59,Availability,error,errors,59,# Generate some string constants that we can use to report errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:6,Availability,error,error,6,"""""""; @error.%(i)d = private unnamed_addr global [128 x i8] c""%(s)s""; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:11,Integrability,wrap,wrapper,11,# Define a wrapper function which is marked 'optnone' to prevent; # interprocedural optimizations from deleting the test.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:84,Performance,optimiz,optimizations,84,# Define a wrapper function which is marked 'optnone' to prevent; # interprocedural optimizations from deleting the test.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:116,Testability,test,test,116,# Define a wrapper function which is marked 'optnone' to prevent; # interprocedural optimizations from deleting the test.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:133,Testability,test,test,133,"""""""; define internal fastcc <%(N)d x %(T)s> @test_wrapper(%(arguments)s) optnone noinline {; %%result = call fastcc <%(N)d x %(T)s> @test(%(arguments)s); ret <%(N)d x %(T)s> %%result; }; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:69,Availability,error,error,69,"""""""; define i32 @main() {; entry:; ; Create a scratch space to print error messages.; %%str = alloca [128 x i8]; %%str.ptr = getelementptr inbounds [128 x i8], [128 x i8]* %%str, i32 0, i32 0. ; Build the input vector and call the test function.; %%v = call fastcc <%(N)d x %(T)s> @test_wrapper(%(inputs)s); ; We need to cast this back to an integer type vector to easily check the; ; result.; %%v.cast = bitcast <%(N)d x %(T)s> %%v to <%(N)d x %(IT)s>; br label %%test.0; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:75,Integrability,message,messages,75,"""""""; define i32 @main() {; entry:; ; Create a scratch space to print error messages.; %%str = alloca [128 x i8]; %%str.ptr = getelementptr inbounds [128 x i8], [128 x i8]* %%str, i32 0, i32 0. ; Build the input vector and call the test function.; %%v = call fastcc <%(N)d x %(T)s> @test_wrapper(%(inputs)s); ; We need to cast this back to an integer type vector to easily check the; ; result.; %%v.cast = bitcast <%(N)d x %(T)s> %%v to <%(N)d x %(IT)s>; br label %%test.0; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:231,Testability,test,test,231,"""""""; define i32 @main() {; entry:; ; Create a scratch space to print error messages.; %%str = alloca [128 x i8]; %%str.ptr = getelementptr inbounds [128 x i8], [128 x i8]* %%str, i32 0, i32 0. ; Build the input vector and call the test function.; %%v = call fastcc <%(N)d x %(T)s> @test_wrapper(%(inputs)s); ; We need to cast this back to an integer type vector to easily check the; ; result.; %%v.cast = bitcast <%(N)d x %(T)s> %%v to <%(N)d x %(IT)s>; br label %%test.0; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:465,Testability,test,test,465,"""""""; define i32 @main() {; entry:; ; Create a scratch space to print error messages.; %%str = alloca [128 x i8]; %%str.ptr = getelementptr inbounds [128 x i8], [128 x i8]* %%str, i32 0, i32 0. ; Build the input vector and call the test function.; %%v = call fastcc <%(N)d x %(T)s> @test_wrapper(%(inputs)s); ; We need to cast this back to an integer type vector to easily check the; ; result.; %%v.cast = bitcast <%(N)d x %(T)s> %%v to <%(N)d x %(IT)s>; br label %%test.0; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:5,Testability,test,test,5,"""""""; test.%(i)d:; ; Skip this lane, its value is undef.; br label %%test.%(next_i)d; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:68,Testability,test,test,68,"""""""; test.%(i)d:; ; Skip this lane, its value is undef.; br label %%test.%(next_i)d; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:245,Availability,error,error,245,"""""""; test.%(i)d:; %%v.%(i)d = extractelement <%(N)d x %(IT)s> %%v.cast, i32 %(i)d; %%cmp.%(i)d = icmp ne %(IT)s %%v.%(i)d, %(r)d; br i1 %%cmp.%(i)d, label %%die.%(i)d, label %%test.%(next_i)d. die.%(i)d:; ; Capture the actual value and print an error message.; %%tmp.%(i)d = zext %(IT)s %%v.%(i)d to i2048; %%bad.%(i)d = trunc i2048 %%tmp.%(i)d to i32; call i32 (i8*, i8*, ...) @sprintf(i8* %%str.ptr, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @error.%(i)d, i32 0, i32 0), i32 %%bad.%(i)d); %%length.%(i)d = call i32 @strlen(i8* %%str.ptr); call i32 @write(i32 2, i8* %%str.ptr, i32 %%length.%(i)d); call void @llvm.trap(); unreachable; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:455,Availability,error,error,455,"""""""; test.%(i)d:; %%v.%(i)d = extractelement <%(N)d x %(IT)s> %%v.cast, i32 %(i)d; %%cmp.%(i)d = icmp ne %(IT)s %%v.%(i)d, %(r)d; br i1 %%cmp.%(i)d, label %%die.%(i)d, label %%test.%(next_i)d. die.%(i)d:; ; Capture the actual value and print an error message.; %%tmp.%(i)d = zext %(IT)s %%v.%(i)d to i2048; %%bad.%(i)d = trunc i2048 %%tmp.%(i)d to i32; call i32 (i8*, i8*, ...) @sprintf(i8* %%str.ptr, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @error.%(i)d, i32 0, i32 0), i32 %%bad.%(i)d); %%length.%(i)d = call i32 @strlen(i8* %%str.ptr); call i32 @write(i32 2, i8* %%str.ptr, i32 %%length.%(i)d); call void @llvm.trap(); unreachable; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:251,Integrability,message,message,251,"""""""; test.%(i)d:; %%v.%(i)d = extractelement <%(N)d x %(IT)s> %%v.cast, i32 %(i)d; %%cmp.%(i)d = icmp ne %(IT)s %%v.%(i)d, %(r)d; br i1 %%cmp.%(i)d, label %%die.%(i)d, label %%test.%(next_i)d. die.%(i)d:; ; Capture the actual value and print an error message.; %%tmp.%(i)d = zext %(IT)s %%v.%(i)d to i2048; %%bad.%(i)d = trunc i2048 %%tmp.%(i)d to i32; call i32 (i8*, i8*, ...) @sprintf(i8* %%str.ptr, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @error.%(i)d, i32 0, i32 0), i32 %%bad.%(i)d); %%length.%(i)d = call i32 @strlen(i8* %%str.ptr); call i32 @write(i32 2, i8* %%str.ptr, i32 %%length.%(i)d); call void @llvm.trap(); unreachable; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:5,Testability,test,test,5,"""""""; test.%(i)d:; %%v.%(i)d = extractelement <%(N)d x %(IT)s> %%v.cast, i32 %(i)d; %%cmp.%(i)d = icmp ne %(IT)s %%v.%(i)d, %(r)d; br i1 %%cmp.%(i)d, label %%die.%(i)d, label %%test.%(next_i)d. die.%(i)d:; ; Capture the actual value and print an error message.; %%tmp.%(i)d = zext %(IT)s %%v.%(i)d to i2048; %%bad.%(i)d = trunc i2048 %%tmp.%(i)d to i32; call i32 (i8*, i8*, ...) @sprintf(i8* %%str.ptr, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @error.%(i)d, i32 0, i32 0), i32 %%bad.%(i)d); %%length.%(i)d = call i32 @strlen(i8* %%str.ptr); call i32 @write(i32 2, i8* %%str.ptr, i32 %%length.%(i)d); call void @llvm.trap(); unreachable; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:176,Testability,test,test,176,"""""""; test.%(i)d:; %%v.%(i)d = extractelement <%(N)d x %(IT)s> %%v.cast, i32 %(i)d; %%cmp.%(i)d = icmp ne %(IT)s %%v.%(i)d, %(r)d; br i1 %%cmp.%(i)d, label %%die.%(i)d, label %%test.%(next_i)d. die.%(i)d:; ; Capture the actual value and print an error message.; %%tmp.%(i)d = zext %(IT)s %%v.%(i)d to i2048; %%bad.%(i)d = trunc i2048 %%tmp.%(i)d to i32; call i32 (i8*, i8*, ...) @sprintf(i8* %%str.ptr, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @error.%(i)d, i32 0, i32 0), i32 %%bad.%(i)d); %%length.%(i)d = call i32 @strlen(i8* %%str.ptr); call i32 @write(i32 2, i8* %%str.ptr, i32 %%length.%(i)d); call void @llvm.trap(); unreachable; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:5,Testability,test,test,5,"""""""; test.%d:; ret i32 0; }. declare i32 @strlen(i8*); declare i32 @write(i32, i8*, i32); declare i32 @sprintf(i8*, i8*, ...); declare void @llvm.trap() noreturn nounwind; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:661,Availability,error,error,661,"""""""A shuffle-select vector fuzz tester. This is a python program to fuzz test the LLVM shufflevector and select; instructions. It generates a function with a random sequnece of shufflevectors; while optionally attaching it with a select instruction (regular or zero merge),; maintaining the element mapping accumulated across the function. It then; generates a main function which calls it with a different value in each element; and checks that the result matches the expected mapping. Take the output IR printed to stdout, compile it to an executable using whatever; set of transforms you want to test, and run the program. If it crashes, it found; a bug (an error message with the expected and actual result is printed).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:667,Integrability,message,message,667,"""""""A shuffle-select vector fuzz tester. This is a python program to fuzz test the LLVM shufflevector and select; instructions. It generates a function with a random sequnece of shufflevectors; while optionally attaching it with a select instruction (regular or zero merge),; maintaining the element mapping accumulated across the function. It then; generates a main function which calls it with a different value in each element; and checks that the result matches the expected mapping. Take the output IR printed to stdout, compile it to an executable using whatever; set of transforms you want to test, and run the program. If it crashes, it found; a bug (an error message with the expected and actual result is printed).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:32,Testability,test,tester,32,"""""""A shuffle-select vector fuzz tester. This is a python program to fuzz test the LLVM shufflevector and select; instructions. It generates a function with a random sequnece of shufflevectors; while optionally attaching it with a select instruction (regular or zero merge),; maintaining the element mapping accumulated across the function. It then; generates a main function which calls it with a different value in each element; and checks that the result matches the expected mapping. Take the output IR printed to stdout, compile it to an executable using whatever; set of transforms you want to test, and run the program. If it crashes, it found; a bug (an error message with the expected and actual result is printed).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:73,Testability,test,test,73,"""""""A shuffle-select vector fuzz tester. This is a python program to fuzz test the LLVM shufflevector and select; instructions. It generates a function with a random sequnece of shufflevectors; while optionally attaching it with a select instruction (regular or zero merge),; maintaining the element mapping accumulated across the function. It then; generates a main function which calls it with a different value in each element; and checks that the result matches the expected mapping. Take the output IR printed to stdout, compile it to an executable using whatever; set of transforms you want to test, and run the program. If it crashes, it found; a bug (an error message with the expected and actual result is printed).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:599,Testability,test,test,599,"""""""A shuffle-select vector fuzz tester. This is a python program to fuzz test the LLVM shufflevector and select; instructions. It generates a function with a random sequnece of shufflevectors; while optionally attaching it with a select instruction (regular or zero merge),; maintaining the element mapping accumulated across the function. It then; generates a main function which calls it with a different value in each element; and checks that the result matches the expected mapping. Take the output IR printed to stdout, compile it to an executable using whatever; set of transforms you want to test, and run the program. If it crashes, it found; a bug (an error message with the expected and actual result is printed).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:46,Availability,mask,mask,46,# Possibility of one undef index in generated mask for shufflevector instruction,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:46,Availability,mask,mask,46,# Possibility of one undef index in generated mask for select instruction,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:32,Modifiability,variab,variable,32,# Class to represent any value (variable) that can be used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:37,Testability,test,tested,37,"# Returns a random vector type to be tested; # In case one of the dimensions (scalar type/number of elements) is provided,; # fill the blank dimension and return appropriate Type object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:11,Availability,mask,mask,11,"# Generate mask for shufflevector IR instruction, with SHUF_UNDEF_POS possibility; # of one undef index.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:11,Availability,mask,mask,11,"# Generate mask for select IR instruction, with SEL_UNDEF_POS possibility; # of one undef index.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:11,Availability,avail,available,11,# Choose 2 available Values - remove them from inputs list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:69,Availability,avail,available,69,# Add the select instructions to the list of instructions and to the available Values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:70,Availability,avail,available,70,"# If the shuffle instruction is not followed by select, add it to the available Values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:32,Testability,test,tested,32,"""""""; Choose specific type to be tested.; i8, i16, i32, i64, f32 or f64.; (default: random)""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:19,Testability,test,test,19,# print the actual test function by dumping the generated instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:12,Availability,error,error,12,# Print the error message templates as global strings,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:18,Integrability,message,message,18,# Print the error message templates as global strings,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:33,Availability,failure,failure,33,# Prepare the runtime checks and failure handlers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:7,Availability,failure,failure,7,# Emit failure handler for each runtime check with proper error message,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:58,Availability,error,error,58,# Emit failure handler for each runtime check with proper error message,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:64,Integrability,message,message,64,# Emit failure handler for each runtime check with proper error message,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:41,Testability,test,test,41,# Prepare the input values passed to the test function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/sort_includes.py:45,Testability,test,test,45,# Skip files which are under INPUTS trees or test trees.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/sort_includes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/sort_includes.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/sysroot.py:255,Integrability,depend,depending,255,# The SDKs used by default in compiler-rt/cmake/base-config-ix.cmake.; # COMPILER_RT_ENABLE_IOS defaults to on.; # COMPILER_RT_ENABLE_WATCHOS and COMPILER_RT_ENABLE_TV default to off.; # compiler-rt/cmake/config-ix.cmake sets DARWIN_EMBEDDED_PLATFORMS; # depending on these.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/sysroot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/sysroot.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/sysroot.py:53,Modifiability,config,config-ix,53,# The SDKs used by default in compiler-rt/cmake/base-config-ix.cmake.; # COMPILER_RT_ENABLE_IOS defaults to on.; # COMPILER_RT_ENABLE_WATCHOS and COMPILER_RT_ENABLE_TV default to off.; # compiler-rt/cmake/config-ix.cmake sets DARWIN_EMBEDDED_PLATFORMS; # depending on these.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/sysroot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/sysroot.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/sysroot.py:205,Modifiability,config,config-ix,205,# The SDKs used by default in compiler-rt/cmake/base-config-ix.cmake.; # COMPILER_RT_ENABLE_IOS defaults to on.; # COMPILER_RT_ENABLE_WATCHOS and COMPILER_RT_ENABLE_TV default to off.; # compiler-rt/cmake/config-ix.cmake sets DARWIN_EMBEDDED_PLATFORMS; # depending on these.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/sysroot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/sysroot.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/sysroot.py:208,Deployability,update,updated,208,"# sdkpath is something like /.../SDKs/MacOSX11.1.sdk, which is a; # symlink to MacOSX.sdk in the same directory. Resolve the symlink,; # to make the symlink in out_dir less likely to break when the SDK; # is updated (which will bump the number on xcrun's output, but not; # on the symlink destination).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/sysroot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/sysroot.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/unicode-case-fold.py:460,Usability,simpl,simple,460,"""""""; Unicode case folding database conversion utility. Parses the database and generates a C++ function which implements the case; folding algorithm. The database entries are of the form:. <code>; <status>; <mapping>; # <name>. <status> can be one of four characters:; C - Common mappings; S - mappings for Simple case folding; F - mappings for Full case folding; T - special case for Turkish I characters. Right now this generates a function which implements simple case folding (C+S; entries).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/unicode-case-fold.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/unicode-case-fold.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/unicode-case-fold.py:7,Modifiability,variab,variable,7,# This variable will body of the mappings function,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/unicode-case-fold.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/unicode-case-fold.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:1171,Availability,down,down,1171,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:99,Deployability,update,update,99,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:179,Deployability,update,update,179,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:351,Deployability,patch,patch,351,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:451,Deployability,patch,patch,451,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:827,Deployability,patch,patch,827,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:1016,Deployability,patch,patch,1016,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:64,Testability,test,tests,64,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:124,Testability,test,test,124,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:197,Testability,test,tests,197,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:228,Testability,test,test,228,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:308,Testability,test,test,308,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:426,Testability,test,test,426,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:550,Testability,test,tests,550,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:924,Testability,test,tests,924,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:1047,Testability,test,test,1047,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:1268,Testability,test,test,1268,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:1356,Testability,test,test,1356,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_any_test_checks.py:86,Testability,test,test,86,"""""""Dispatch to update_*_test_checks.py scripts automatically in bulk. Given a list of test files, this script will invoke the correct; update_test_checks-style script, skipping any tests which have not previously; had assertions autogenerated.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_any_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_any_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_any_test_checks.py:181,Testability,test,tests,181,"""""""Dispatch to update_*_test_checks.py scripts automatically in bulk. Given a list of test files, this script will invoke the correct; update_test_checks-style script, skipping any tests which have not previously; had assertions autogenerated.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_any_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_any_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_any_test_checks.py:218,Testability,assert,assertions,218,"""""""Dispatch to update_*_test_checks.py scripts automatically in bulk. Given a list of test files, this script will invoke the correct; update_test_checks-style script, skipping any tests which have not previously; had assertions autogenerated.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_any_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_any_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:16,Deployability,update,update,16,"""""""A utility to update LLVM IR CHECK lines in C/C++ FileCheck test files. Example RUN lines in .c/.cc test files:. // RUN: %clang -emit-llvm -S %s -o - -O2 | FileCheck %s; // RUN: %clangxx -emit-llvm -S %s -o - -O2 | FileCheck -check-prefix=CHECK-A %s. Usage:. % utils/update_cc_test_checks.py --llvm-bin=release/bin test/a.cc; % utils/update_cc_test_checks.py --clang=release/bin/clang /tmp/c/a.cc; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:305,Deployability,release,release,305,"""""""A utility to update LLVM IR CHECK lines in C/C++ FileCheck test files. Example RUN lines in .c/.cc test files:. // RUN: %clang -emit-llvm -S %s -o - -O2 | FileCheck %s; // RUN: %clangxx -emit-llvm -S %s -o - -O2 | FileCheck -check-prefix=CHECK-A %s. Usage:. % utils/update_cc_test_checks.py --llvm-bin=release/bin test/a.cc; % utils/update_cc_test_checks.py --clang=release/bin/clang /tmp/c/a.cc; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:369,Deployability,release,release,369,"""""""A utility to update LLVM IR CHECK lines in C/C++ FileCheck test files. Example RUN lines in .c/.cc test files:. // RUN: %clang -emit-llvm -S %s -o - -O2 | FileCheck %s; // RUN: %clangxx -emit-llvm -S %s -o - -O2 | FileCheck -check-prefix=CHECK-A %s. Usage:. % utils/update_cc_test_checks.py --llvm-bin=release/bin test/a.cc; % utils/update_cc_test_checks.py --clang=release/bin/clang /tmp/c/a.cc; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:62,Testability,test,test,62,"""""""A utility to update LLVM IR CHECK lines in C/C++ FileCheck test files. Example RUN lines in .c/.cc test files:. // RUN: %clang -emit-llvm -S %s -o - -O2 | FileCheck %s; // RUN: %clangxx -emit-llvm -S %s -o - -O2 | FileCheck -check-prefix=CHECK-A %s. Usage:. % utils/update_cc_test_checks.py --llvm-bin=release/bin test/a.cc; % utils/update_cc_test_checks.py --clang=release/bin/clang /tmp/c/a.cc; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:102,Testability,test,test,102,"""""""A utility to update LLVM IR CHECK lines in C/C++ FileCheck test files. Example RUN lines in .c/.cc test files:. // RUN: %clang -emit-llvm -S %s -o - -O2 | FileCheck %s; // RUN: %clangxx -emit-llvm -S %s -o - -O2 | FileCheck -check-prefix=CHECK-A %s. Usage:. % utils/update_cc_test_checks.py --llvm-bin=release/bin test/a.cc; % utils/update_cc_test_checks.py --clang=release/bin/clang /tmp/c/a.cc; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:317,Testability,test,test,317,"""""""A utility to update LLVM IR CHECK lines in C/C++ FileCheck test files. Example RUN lines in .c/.cc test files:. // RUN: %clang -emit-llvm -S %s -o - -O2 | FileCheck %s; // RUN: %clangxx -emit-llvm -S %s -o - -O2 | FileCheck -check-prefix=CHECK-A %s. Usage:. % utils/update_cc_test_checks.py --llvm-bin=release/bin test/a.cc; % utils/update_cc_test_checks.py --clang=release/bin/clang /tmp/c/a.cc; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:6,Testability,test,tests,6,# For tests that invoke %clang instead if %clang_cc1 we have to use; # -Xclang -ast-dump=json instead:,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:107,Modifiability,variab,variables,107,# Parse the clang JSON and add all children of type FunctionDecl.; # TODO: Should we add checks for global variables being emitted?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:58,Deployability,update,update,58,# Determine the builtin includes directory so that we can update tests that; # depend on the builtin headers. See get_clang_builtin_include_dir() and; # use_clang() in llvm/utils/lit/lit/llvm/config.py.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:79,Integrability,depend,depend,79,# Determine the builtin includes directory so that we can update tests that; # depend on the builtin headers. See get_clang_builtin_include_dir() and; # use_clang() in llvm/utils/lit/lit/llvm/config.py.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:192,Modifiability,config,config,192,# Determine the builtin includes directory so that we can update tests that; # depend on the builtin headers. See get_clang_builtin_include_dir() and; # use_clang() in llvm/utils/lit/lit/llvm/config.py.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:65,Testability,test,tests,65,# Determine the builtin includes directory so that we can update tests that; # depend on the builtin headers. See get_clang_builtin_include_dir() and; # use_clang() in llvm/utils/lit/lit/llvm/config.py.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:157,Availability,error,error,157,"# Many uses of this tool will not need an opt binary, because it's only; # needed for updating a test that runs clang | opt | FileCheck. So we; # defer this error message until we find that opt is actually needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:163,Integrability,message,message,163,"# Many uses of this tool will not need an opt binary, because it's only; # needed for updating a test that runs clang | opt | FileCheck. So we; # defer this error message until we find that opt is actually needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:97,Testability,test,test,97,"# Many uses of this tool will not need an opt binary, because it's only; # needed for updating a test that runs clang | opt | FileCheck. So we; # defer this error message until we find that opt is actually needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:160,Usability,simpl,simply,160,"# One line may contain multiple function declarations.; # Skip if the mangled name has been added before.; # The line number may come from an included file, we simply require; # the search string (normally the function's spelling name, but is; # the class's spelling name for class specializations) to appear on; # the line to exclude functions from other files.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py:15,Deployability,update,update,15,"""""""A test case update script. This script is a utility to update LLVM 'llc' based test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_llc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py:58,Deployability,update,update,58,"""""""A test case update script. This script is a utility to update LLVM 'llc' based test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_llc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py:137,Deployability,update,update,137,"""""""A test case update script. This script is a utility to update LLVM 'llc' based test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_llc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py:5,Testability,test,test,5,"""""""A test case update script. This script is a utility to update LLVM 'llc' based test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_llc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py:82,Testability,test,test,82,"""""""A test case update script. This script is a utility to update LLVM 'llc' based test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_llc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py:155,Testability,test,tests,155,"""""""A test case update script. This script is a utility to update LLVM 'llc' based test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_llc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py:186,Testability,test,test,186,"""""""A test case update script. This script is a utility to update LLVM 'llc' based test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_llc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py:48,Availability,down,downstream,48,# llc is the only llc-like in the LLVM tree but downstream forks can add; # additional ones here if they have them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_llc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py:202,Safety,predict,predict,202,"# Generate the appropriate checks for each function. We need to emit; # these in the order according to the generated output so that CHECK-LABEL; # works properly. func_order provides that.; # We can't predict where various passes might insert functions so we can't; # be sure the input function order is maintained. Therefore, first spit; # out all the source lines.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_llc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:15,Deployability,update,update,15,"""""""A test case update script. This script is a utility to update LLVM 'llvm-mca' based test cases with new; FileCheck patterns.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:58,Deployability,update,update,58,"""""""A test case update script. This script is a utility to update LLVM 'llvm-mca' based test cases with new; FileCheck patterns.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:5,Testability,test,test,5,"""""""A test case update script. This script is a utility to update LLVM 'llvm-mca' based test cases with new; FileCheck patterns.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:87,Testability,test,test,87,"""""""A test case update script. This script is a utility to update LLVM 'llvm-mca' based test cases with new; FileCheck patterns.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:76,Availability,down,down,76,"""""""Given a block_info, see if we can analyze it further to let us break it; down by prefix per-line rather than per-block.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:5,Usability,simpl,simplify,5,"# To simplify output, we'll only proceed if the very first line of the block; # texts is common to each of them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:102,Availability,avail,available,102,"# The line is not common to each block, or we don't have a common prefix.; # If there are no prefixes available, warn and bail out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:9,Security,hash,hashable,9,"""""""Get a hashable key based on the current tool_args and prefixes.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:4,Performance,cache,cache,4,"# A cache of the furthest-back position in any block list of the first; # instance of each block, indexed by the block itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:53,Availability,down,down,53,"# If we have multiple block_texts, try to break them down further to avoid; # the case where we have very similar block_texts repeated after each; # other.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:69,Safety,avoid,avoid,69,"# If we have multiple block_texts, try to break them down further to avoid; # the case where we have very similar block_texts repeated after each; # other.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:16,Testability,test,test,16,# Call this per test. By default each warning will only be written once; # per source location. Reset the warning filter so that now each warning; # will be written once per source location per test.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:194,Testability,test,test,194,# Call this per test. By default each warning will only be written once; # per source location. Reset the warning filter so that now each warning; # will be written once per source location per test.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mir_test_checks.py:70,Deployability,update,update,70,"""""""Updates FileCheck checks in MIR tests. This script is a utility to update MIR based tests with new FileCheck; patterns. The checks added by this script will cover the entire body of each; function it handles. Virtual registers used are given names via; FileCheck patterns, so if you do want to check a subset of the body it; should be straightforward to trim out the irrelevant parts. None of; the YAML metadata will be checked, other than function names, and fixedStack; if the --print-fixed-stack option is used. If there are multiple llc commands in a test, the full set of checks; will be repeated for each different check pattern. Checks for patterns; that are common between different commands will be left as-is by; default, or removed if the --remove-common-prefixes flag is provided.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mir_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mir_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mir_test_checks.py:35,Testability,test,tests,35,"""""""Updates FileCheck checks in MIR tests. This script is a utility to update MIR based tests with new FileCheck; patterns. The checks added by this script will cover the entire body of each; function it handles. Virtual registers used are given names via; FileCheck patterns, so if you do want to check a subset of the body it; should be straightforward to trim out the irrelevant parts. None of; the YAML metadata will be checked, other than function names, and fixedStack; if the --print-fixed-stack option is used. If there are multiple llc commands in a test, the full set of checks; will be repeated for each different check pattern. Checks for patterns; that are common between different commands will be left as-is by; default, or removed if the --remove-common-prefixes flag is provided.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mir_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mir_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mir_test_checks.py:87,Testability,test,tests,87,"""""""Updates FileCheck checks in MIR tests. This script is a utility to update MIR based tests with new FileCheck; patterns. The checks added by this script will cover the entire body of each; function it handles. Virtual registers used are given names via; FileCheck patterns, so if you do want to check a subset of the body it; should be straightforward to trim out the irrelevant parts. None of; the YAML metadata will be checked, other than function names, and fixedStack; if the --print-fixed-stack option is used. If there are multiple llc commands in a test, the full set of checks; will be repeated for each different check pattern. Checks for patterns; that are common between different commands will be left as-is by; default, or removed if the --remove-common-prefixes flag is provided.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mir_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mir_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mir_test_checks.py:558,Testability,test,test,558,"""""""Updates FileCheck checks in MIR tests. This script is a utility to update MIR based tests with new FileCheck; patterns. The checks added by this script will cover the entire body of each; function it handles. Virtual registers used are given names via; FileCheck patterns, so if you do want to check a subset of the body it; should be straightforward to trim out the irrelevant parts. None of; the YAML metadata will be checked, other than function names, and fixedStack; if the --print-fixed-stack option is used. If there are multiple llc commands in a test, the full set of checks; will be repeated for each different check pattern. Checks for patterns; that are common between different commands will be left as-is by; default, or removed if the --remove-common-prefixes flag is provided.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mir_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mir_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:101,Deployability,update,update,101,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:172,Deployability,update,update,172,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:551,Deployability,patch,patch,551,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:651,Deployability,patch,patch,651,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:994,Deployability,patch,patch,994,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:1183,Deployability,patch,patch,1183,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:66,Testability,test,tests,66,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:117,Testability,test,test,117,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:190,Testability,test,tests,190,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:221,Testability,test,test,221,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:325,Testability,test,test,325,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:416,Testability,test,test,416,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:508,Testability,test,test,508,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:626,Testability,test,test,626,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:750,Testability,test,tests,750,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:1091,Testability,test,tests,1091,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:1214,Testability,test,test,1214,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:202,Safety,predict,predict,202,"# Generate the appropriate checks for each function. We need to emit; # these in the order according to the generated output so that CHECK-LABEL; # works properly. func_order provides that.; # We can't predict where various passes might insert functions so we can't; # be sure the input function order is maintained. Therefore, first spit; # out all the source lines.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/wciia.py:293,Usability,simpl,simplistic,293,"""""""; wciia - Whose Code Is It Anyway. Determines code owner of the file/folder relative to the llvm source root.; Code owner is determined from the content of the CODE_OWNERS.TXT ; by parsing the D: field. usage:. utils/wciia.py path. limitations:; - must be run from llvm source root; - very simplistic algorithm; - only handles * as a wildcard; - not very user friendly ; - does not handle the proposed F: field. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/wciia.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/wciia.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/wciia.py:7,Usability,simpl,simplistic,7,# very simplistic way of findning the best match,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/wciia.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/wciia.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:31,Security,checksum,checksums,31,""""""" A small program to compute checksums of LLVM checkout.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:11,Security,checksum,checksums,11,"""""""Compute checksums for LLVM sources checked out using svn. Args:; root_path: a directory of llvm checkout.; projects: a list of LLVMProject instances, which describe checkout paths,; relative to root_path. Returns:; A dict mapping from project name to project checksum.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:262,Security,checksum,checksum,262,"""""""Compute checksums for LLVM sources checked out using svn. Args:; root_path: a directory of llvm checkout.; projects: a list of LLVMProject instances, which describe checkout paths,; relative to root_path. Returns:; A dict mapping from project name to project checksum.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:16,Security,checksum,checksum,16,# Compute final checksum.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:10,Security,checksum,checksums,10,"""""""Writes checksums to a text file. Args:; checksums: a dict mapping from project name to project checksum (result of; ComputeLLVMChecksums).; f: a file object to write into.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:43,Security,checksum,checksums,43,"""""""Writes checksums to a text file. Args:; checksums: a dict mapping from project name to project checksum (result of; ComputeLLVMChecksums).; f: a file object to write into.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:98,Security,checksum,checksum,98,"""""""Writes checksums to a text file. Args:; checksums: a dict mapping from project name to project checksum (result of; ComputeLLVMChecksums).; f: a file object to write into.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:9,Security,checksum,checksums,9,"""""""Reads checksums from a text file, produced by WriteLLVMChecksums. Returns:; A dict, mapping from project name to project checksum.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:124,Security,checksum,checksum,124,"""""""Reads checksums from a text file, produced by WriteLLVMChecksums. Returns:; A dict, mapping from project name to project checksum.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:111,Security,checksum,checksums,111,"""""""Validates that reference_checksums and new_checksums match. Args:; reference_checksums: a dict of reference checksums, mapping from a project; name to a project checksum.; new_checksums: a dict of checksums to be checked, mapping from a project; name to a project checksum.; allow_missing_projects:; When True, reference_checksums may contain more projects than; new_checksums. Projects missing from new_checksums are ignored.; When False, new_checksums and reference_checksums must contain checksums; for the same set of projects. If there is a project in; reference_checksums, missing from new_checksums, ValidateChecksums; will return False. Returns:; True, if checksums match with regards to allow_missing_projects flag value.; False, otherwise.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:164,Security,checksum,checksum,164,"""""""Validates that reference_checksums and new_checksums match. Args:; reference_checksums: a dict of reference checksums, mapping from a project; name to a project checksum.; new_checksums: a dict of checksums to be checked, mapping from a project; name to a project checksum.; allow_missing_projects:; When True, reference_checksums may contain more projects than; new_checksums. Projects missing from new_checksums are ignored.; When False, new_checksums and reference_checksums must contain checksums; for the same set of projects. If there is a project in; reference_checksums, missing from new_checksums, ValidateChecksums; will return False. Returns:; True, if checksums match with regards to allow_missing_projects flag value.; False, otherwise.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:200,Security,checksum,checksums,200,"""""""Validates that reference_checksums and new_checksums match. Args:; reference_checksums: a dict of reference checksums, mapping from a project; name to a project checksum.; new_checksums: a dict of checksums to be checked, mapping from a project; name to a project checksum.; allow_missing_projects:; When True, reference_checksums may contain more projects than; new_checksums. Projects missing from new_checksums are ignored.; When False, new_checksums and reference_checksums must contain checksums; for the same set of projects. If there is a project in; reference_checksums, missing from new_checksums, ValidateChecksums; will return False. Returns:; True, if checksums match with regards to allow_missing_projects flag value.; False, otherwise.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:267,Security,checksum,checksum,267,"""""""Validates that reference_checksums and new_checksums match. Args:; reference_checksums: a dict of reference checksums, mapping from a project; name to a project checksum.; new_checksums: a dict of checksums to be checked, mapping from a project; name to a project checksum.; allow_missing_projects:; When True, reference_checksums may contain more projects than; new_checksums. Projects missing from new_checksums are ignored.; When False, new_checksums and reference_checksums must contain checksums; for the same set of projects. If there is a project in; reference_checksums, missing from new_checksums, ValidateChecksums; will return False. Returns:; True, if checksums match with regards to allow_missing_projects flag value.; False, otherwise.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:494,Security,checksum,checksums,494,"""""""Validates that reference_checksums and new_checksums match. Args:; reference_checksums: a dict of reference checksums, mapping from a project; name to a project checksum.; new_checksums: a dict of checksums to be checked, mapping from a project; name to a project checksum.; allow_missing_projects:; When True, reference_checksums may contain more projects than; new_checksums. Projects missing from new_checksums are ignored.; When False, new_checksums and reference_checksums must contain checksums; for the same set of projects. If there is a project in; reference_checksums, missing from new_checksums, ValidateChecksums; will return False. Returns:; True, if checksums match with regards to allow_missing_projects flag value.; False, otherwise.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:667,Security,checksum,checksums,667,"""""""Validates that reference_checksums and new_checksums match. Args:; reference_checksums: a dict of reference checksums, mapping from a project; name to a project checksum.; new_checksums: a dict of checksums to be checked, mapping from a project; name to a project checksum.; allow_missing_projects:; When True, reference_checksums may contain more projects than; new_checksums. Projects missing from new_checksums are ignored.; When False, new_checksums and reference_checksums must contain checksums; for the same set of projects. If there is a project in; reference_checksums, missing from new_checksums, ValidateChecksums; will return False. Returns:; True, if checksums match with regards to allow_missing_projects flag value.; False, otherwise.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:22,Security,checksum,checksum,22,# We never computed a checksum for this project.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/project_tree.py:40,Security,checksum,checksums,40,"""""""Contains helper functions to compute checksums for LLVM checkouts.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/project_tree.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/project_tree.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py:17,Safety,detect,detects,17,"""""""A linter that detects potential typos in FileCheck directive names. Consider a broken test foo.cpp:. // RUN: clang -cc1 -ast-dump %s | FileCheck %s --check-prefix=NEW; // RUN: clang -cc1 -ast-dump %s -std=c++98 | FileCheck %s --check-prefix=OLD; auto x = 42;; // NEWW: auto is a c++11 extension; // ODL-NOT: auto is a c++11 extension. We first detect the locally valid FileCheck directive prefixes by parsing the; --check-prefix flags. Here we get {CHECK, NEW, OLD}, so our directive names are; {CHECK, NEW, OLD, CHECK-NOT, NEW-NOT, ...}. Then we look for lines that look like directives. These are of the form 'FOO:',; usually at the beginning of a line or a comment. If any of these are a; ""near-miss"" for a directive name, then we suspect this is a typo and report it. Usage: filecheck_lint path/to/test/file/1 ... path/to/test/file/n; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py:347,Safety,detect,detect,347,"""""""A linter that detects potential typos in FileCheck directive names. Consider a broken test foo.cpp:. // RUN: clang -cc1 -ast-dump %s | FileCheck %s --check-prefix=NEW; // RUN: clang -cc1 -ast-dump %s -std=c++98 | FileCheck %s --check-prefix=OLD; auto x = 42;; // NEWW: auto is a c++11 extension; // ODL-NOT: auto is a c++11 extension. We first detect the locally valid FileCheck directive prefixes by parsing the; --check-prefix flags. Here we get {CHECK, NEW, OLD}, so our directive names are; {CHECK, NEW, OLD, CHECK-NOT, NEW-NOT, ...}. Then we look for lines that look like directives. These are of the form 'FOO:',; usually at the beginning of a line or a comment. If any of these are a; ""near-miss"" for a directive name, then we suspect this is a typo and report it. Usage: filecheck_lint path/to/test/file/1 ... path/to/test/file/n; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py:89,Testability,test,test,89,"""""""A linter that detects potential typos in FileCheck directive names. Consider a broken test foo.cpp:. // RUN: clang -cc1 -ast-dump %s | FileCheck %s --check-prefix=NEW; // RUN: clang -cc1 -ast-dump %s -std=c++98 | FileCheck %s --check-prefix=OLD; auto x = 42;; // NEWW: auto is a c++11 extension; // ODL-NOT: auto is a c++11 extension. We first detect the locally valid FileCheck directive prefixes by parsing the; --check-prefix flags. Here we get {CHECK, NEW, OLD}, so our directive names are; {CHECK, NEW, OLD, CHECK-NOT, NEW-NOT, ...}. Then we look for lines that look like directives. These are of the form 'FOO:',; usually at the beginning of a line or a comment. If any of these are a; ""near-miss"" for a directive name, then we suspect this is a typo and report it. Usage: filecheck_lint path/to/test/file/1 ... path/to/test/file/n; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py:805,Testability,test,test,805,"""""""A linter that detects potential typos in FileCheck directive names. Consider a broken test foo.cpp:. // RUN: clang -cc1 -ast-dump %s | FileCheck %s --check-prefix=NEW; // RUN: clang -cc1 -ast-dump %s -std=c++98 | FileCheck %s --check-prefix=OLD; auto x = 42;; // NEWW: auto is a c++11 extension; // ODL-NOT: auto is a c++11 extension. We first detect the locally valid FileCheck directive prefixes by parsing the; --check-prefix flags. Here we get {CHECK, NEW, OLD}, so our directive names are; {CHECK, NEW, OLD, CHECK-NOT, NEW-NOT, ...}. Then we look for lines that look like directives. These are of the form 'FOO:',; usually at the beginning of a line or a comment. If any of these are a; ""near-miss"" for a directive name, then we suspect this is a typo and report it. Usage: filecheck_lint path/to/test/file/1 ... path/to/test/file/n; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py:829,Testability,test,test,829,"""""""A linter that detects potential typos in FileCheck directive names. Consider a broken test foo.cpp:. // RUN: clang -cc1 -ast-dump %s | FileCheck %s --check-prefix=NEW; // RUN: clang -cc1 -ast-dump %s -std=c++98 | FileCheck %s --check-prefix=OLD; auto x = 42;; // NEWW: auto is a c++11 extension; // ODL-NOT: auto is a c++11 extension. We first detect the locally valid FileCheck directive prefixes by parsing the; --check-prefix flags. Here we get {CHECK, NEW, OLD}, so our directive names are; {CHECK, NEW, OLD, CHECK-NOT, NEW-NOT, ...}. Then we look for lines that look like directives. These are of the form 'FOO:',; usually at the beginning of a line or a comment. If any of these are a; ""near-miss"" for a directive name, then we suspect this is a typo and report it. Usage: filecheck_lint path/to/test/file/1 ... path/to/test/file/n; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py:160,Safety,avoid,avoid,160,"# 'NOTE' and 'TODO' are not directives, but are likely to be false positives; # if encountered and to generate noise as a result. We filter them out also to; # avoid this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py:153,Testability,log,logic,153,# TODO(bchetioui): match count directives more finely. We skip directives; # starting with 'CHECK-COUNT-' for the moment as they require more complex; # logic to be handled correctly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py:101,Safety,avoid,avoid,101,"# Ignoring potential typos that will not be matched later due to a too low; # threshold, in order to avoid potentially long computation times.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py:76,Availability,error,error,76,"# the following is invalid, GDB fails with:; # Python Exception <class 'gdb.error'> Attempt to take address of value; # not located in memory.; # because isEqual took parameter (for the unsigned long key I was testing); # by const ref, and GDB; # It's also not entirely general - we should be accessing the ""getFirst()""; # member function, not the 'first' member variable, but I've yet to figure; # out how to find/call member functions (especially (const) overloaded; # ones) on a gdb.Value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py:363,Modifiability,variab,variable,363,"# the following is invalid, GDB fails with:; # Python Exception <class 'gdb.error'> Attempt to take address of value; # not located in memory.; # because isEqual took parameter (for the unsigned long key I was testing); # by const ref, and GDB; # It's also not entirely general - we should be accessing the ""getFirst()""; # member function, not the 'first' member variable, but I've yet to figure; # out how to find/call member functions (especially (const) overloaded; # ones) on a gdb.Value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py:293,Security,access,accessing,293,"# the following is invalid, GDB fails with:; # Python Exception <class 'gdb.error'> Attempt to take address of value; # not located in memory.; # because isEqual took parameter (for the unsigned long key I was testing); # by const ref, and GDB; # It's also not entirely general - we should be accessing the ""getFirst()""; # member function, not the 'first' member variable, but I've yet to figure; # out how to find/call member functions (especially (const) overloaded; # ones) on a gdb.Value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py:210,Testability,test,testing,210,"# the following is invalid, GDB fails with:; # Python Exception <class 'gdb.error'> Attempt to take address of value; # not located in memory.; # because isEqual took parameter (for the unsigned long key I was testing); # by const ref, and GDB; # It's also not entirely general - we should be accessing the ""getFirst()""; # member function, not the 'first' member variable, but I've yet to figure; # out how to find/call member functions (especially (const) overloaded; # ones) on a gdb.Value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py:119,Availability,error,error,119,"""""""Lookup the default pretty-printer for val and use it. If no pretty-printer is defined for the type of val, print an error and; return a placeholder string.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py:26,Availability,error,error,26,# Note: this throws a gdb.error if the info type is not used (by means of a; # call to getPointer() or similar) in the current translation unit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py:127,Deployability,install,installed,127,"""""""; This script is run by GitHub actions to ensure that the code in PR's conform to; the coding style of LLVM. It can also be installed as a pre-commit git hook to; check the coding style before submitting it. The canonical source of this script; is in the LLVM source tree under llvm/utils/git. For C/C++ code it uses clang-format and for Python code it uses darker (which; in turn invokes black). You can learn more about the LLVM coding style on llvm.org:; https://llvm.org/docs/CodingStandards.html. You can install this script as a git hook by symlinking it to the .git/hooks; directory:. ln -s $(pwd)/llvm/utils/git/code-format-helper.py .git/hooks/pre-commit. You can control the exact path to clang-format or darker with the following; environment variables: $CLANG_FORMAT_PATH and $DARKER_FORMAT_PATH.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/code-format-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py:513,Deployability,install,install,513,"""""""; This script is run by GitHub actions to ensure that the code in PR's conform to; the coding style of LLVM. It can also be installed as a pre-commit git hook to; check the coding style before submitting it. The canonical source of this script; is in the LLVM source tree under llvm/utils/git. For C/C++ code it uses clang-format and for Python code it uses darker (which; in turn invokes black). You can learn more about the LLVM coding style on llvm.org:; https://llvm.org/docs/CodingStandards.html. You can install this script as a git hook by symlinking it to the .git/hooks; directory:. ln -s $(pwd)/llvm/utils/git/code-format-helper.py .git/hooks/pre-commit. You can control the exact path to clang-format or darker with the following; environment variables: $CLANG_FORMAT_PATH and $DARKER_FORMAT_PATH.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/code-format-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py:757,Modifiability,variab,variables,757,"""""""; This script is run by GitHub actions to ensure that the code in PR's conform to; the coding style of LLVM. It can also be installed as a pre-commit git hook to; check the coding style before submitting it. The canonical source of this script; is in the LLVM source tree under llvm/utils/git. For C/C++ code it uses clang-format and for Python code it uses darker (which; in turn invokes black). You can learn more about the LLVM coding style on llvm.org:; https://llvm.org/docs/CodingStandards.html. You can install this script as a git hook by symlinking it to the .git/hooks; directory:. ln -s $(pwd)/llvm/utils/git/code-format-helper.py .git/hooks/pre-commit. You can control the exact path to clang-format or darker with the following; environment variables: $CLANG_FORMAT_PATH and $DARKER_FORMAT_PATH.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/code-format-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py:408,Usability,learn,learn,408,"""""""; This script is run by GitHub actions to ensure that the code in PR's conform to; the coding style of LLVM. It can also be installed as a pre-commit git hook to; check the coding style before submitting it. The canonical source of this script; is in the LLVM source tree under llvm/utils/git. For C/C++ code it uses clang-format and for Python code it uses darker (which; in turn invokes black). You can learn more about the LLVM coding style on llvm.org:; https://llvm.org/docs/CodingStandards.html. You can install this script as a git hook by symlinking it to the .git/hooks; directory:. ln -s $(pwd)/llvm/utils/git/code-format-helper.py .git/hooks/pre-commit. You can control the exact path to clang-format or darker with the following; environment variables: $CLANG_FORMAT_PATH and $DARKER_FORMAT_PATH.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/code-format-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py:136,Deployability,install,installed,136,"# TODO: any type should be replaced with the correct github type, but it requires refactoring to; # not require the github module to be installed everywhere.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/code-format-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py:82,Modifiability,refactor,refactoring,82,"# TODO: any type should be replaced with the correct github type, but it requires refactoring to; # not require the github module to be installed everywhere.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/code-format-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py:85,Availability,failure,failure,85,# The formatter failed but didn't output a diff (e.g. some sort of; # infrastructure failure).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/code-format-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py:24,Testability,log,log,24,# Print the diff in the log so that it is viewable there,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/code-format-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py:24,Testability,log,log,24,# Print the diff in the log so that it is viewable there,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/code-format-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:620,Deployability,integrat,integration,620,"""""""; Hi!. This issue may be a good introductory issue for people new to working on LLVM. If you would like to work on this issue, your first steps are:. 1. In the comments of the issue, request for it to be assigned to you.; 2. Fix the issue locally.; 3. [Run the test suite](https://llvm.org/docs/TestingGuide.html#unit-and-regression-tests) locally. Remember that the subdirectories under `test/` create fine-grained testing targets, so you can e.g. use `make check-clang-ast` to only run Clang's AST tests.; 4. Create a Git commit.; 5. Run [`git clang-format HEAD~1`](https://clang.llvm.org/docs/ClangFormat.html#git-integration) to format your changes.; 6. Open a [pull request](https://github.com/llvm/llvm-project/pulls) to the [upstream repository](https://github.com/llvm/llvm-project) on GitHub. Detailed instructions can be found [in GitHub's documentation](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request). If you have any further questions about this issue, don't hesitate to ask via a comment in the thread below.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:620,Integrability,integrat,integration,620,"""""""; Hi!. This issue may be a good introductory issue for people new to working on LLVM. If you would like to work on this issue, your first steps are:. 1. In the comments of the issue, request for it to be assigned to you.; 2. Fix the issue locally.; 3. [Run the test suite](https://llvm.org/docs/TestingGuide.html#unit-and-regression-tests) locally. Remember that the subdirectories under `test/` create fine-grained testing targets, so you can e.g. use `make check-clang-ast` to only run Clang's AST tests.; 4. Create a Git commit.; 5. Run [`git clang-format HEAD~1`](https://clang.llvm.org/docs/ClangFormat.html#git-integration) to format your changes.; 6. Open a [pull request](https://github.com/llvm/llvm-project/pulls) to the [upstream repository](https://github.com/llvm/llvm-project) on GitHub. Detailed instructions can be found [in GitHub's documentation](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request). If you have any further questions about this issue, don't hesitate to ask via a comment in the thread below.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:264,Testability,test,test,264,"""""""; Hi!. This issue may be a good introductory issue for people new to working on LLVM. If you would like to work on this issue, your first steps are:. 1. In the comments of the issue, request for it to be assigned to you.; 2. Fix the issue locally.; 3. [Run the test suite](https://llvm.org/docs/TestingGuide.html#unit-and-regression-tests) locally. Remember that the subdirectories under `test/` create fine-grained testing targets, so you can e.g. use `make check-clang-ast` to only run Clang's AST tests.; 4. Create a Git commit.; 5. Run [`git clang-format HEAD~1`](https://clang.llvm.org/docs/ClangFormat.html#git-integration) to format your changes.; 6. Open a [pull request](https://github.com/llvm/llvm-project/pulls) to the [upstream repository](https://github.com/llvm/llvm-project) on GitHub. Detailed instructions can be found [in GitHub's documentation](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request). If you have any further questions about this issue, don't hesitate to ask via a comment in the thread below.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:336,Testability,test,tests,336,"""""""; Hi!. This issue may be a good introductory issue for people new to working on LLVM. If you would like to work on this issue, your first steps are:. 1. In the comments of the issue, request for it to be assigned to you.; 2. Fix the issue locally.; 3. [Run the test suite](https://llvm.org/docs/TestingGuide.html#unit-and-regression-tests) locally. Remember that the subdirectories under `test/` create fine-grained testing targets, so you can e.g. use `make check-clang-ast` to only run Clang's AST tests.; 4. Create a Git commit.; 5. Run [`git clang-format HEAD~1`](https://clang.llvm.org/docs/ClangFormat.html#git-integration) to format your changes.; 6. Open a [pull request](https://github.com/llvm/llvm-project/pulls) to the [upstream repository](https://github.com/llvm/llvm-project) on GitHub. Detailed instructions can be found [in GitHub's documentation](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request). If you have any further questions about this issue, don't hesitate to ask via a comment in the thread below.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:392,Testability,test,test,392,"""""""; Hi!. This issue may be a good introductory issue for people new to working on LLVM. If you would like to work on this issue, your first steps are:. 1. In the comments of the issue, request for it to be assigned to you.; 2. Fix the issue locally.; 3. [Run the test suite](https://llvm.org/docs/TestingGuide.html#unit-and-regression-tests) locally. Remember that the subdirectories under `test/` create fine-grained testing targets, so you can e.g. use `make check-clang-ast` to only run Clang's AST tests.; 4. Create a Git commit.; 5. Run [`git clang-format HEAD~1`](https://clang.llvm.org/docs/ClangFormat.html#git-integration) to format your changes.; 6. Open a [pull request](https://github.com/llvm/llvm-project/pulls) to the [upstream repository](https://github.com/llvm/llvm-project) on GitHub. Detailed instructions can be found [in GitHub's documentation](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request). If you have any further questions about this issue, don't hesitate to ask via a comment in the thread below.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:419,Testability,test,testing,419,"""""""; Hi!. This issue may be a good introductory issue for people new to working on LLVM. If you would like to work on this issue, your first steps are:. 1. In the comments of the issue, request for it to be assigned to you.; 2. Fix the issue locally.; 3. [Run the test suite](https://llvm.org/docs/TestingGuide.html#unit-and-regression-tests) locally. Remember that the subdirectories under `test/` create fine-grained testing targets, so you can e.g. use `make check-clang-ast` to only run Clang's AST tests.; 4. Create a Git commit.; 5. Run [`git clang-format HEAD~1`](https://clang.llvm.org/docs/ClangFormat.html#git-integration) to format your changes.; 6. Open a [pull request](https://github.com/llvm/llvm-project/pulls) to the [upstream repository](https://github.com/llvm/llvm-project) on GitHub. Detailed instructions can be found [in GitHub's documentation](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request). If you have any further questions about this issue, don't hesitate to ask via a comment in the thread below.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:503,Testability,test,tests,503,"""""""; Hi!. This issue may be a good introductory issue for people new to working on LLVM. If you would like to work on this issue, your first steps are:. 1. In the comments of the issue, request for it to be assigned to you.; 2. Fix the issue locally.; 3. [Run the test suite](https://llvm.org/docs/TestingGuide.html#unit-and-regression-tests) locally. Remember that the subdirectories under `test/` create fine-grained testing targets, so you can e.g. use `make check-clang-ast` to only run Clang's AST tests.; 4. Create a Git commit.; 5. Run [`git clang-format HEAD~1`](https://clang.llvm.org/docs/ClangFormat.html#git-integration) to format your changes.; 6. Open a [pull request](https://github.com/llvm/llvm-project/pulls) to the [upstream repository](https://github.com/llvm/llvm-project) on GitHub. Detailed instructions can be found [in GitHub's documentation](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request). If you have any further questions about this issue, don't hesitate to ask via a comment in the thread below.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:152,Availability,failure,failures,152,"# If the description of an issue/pull request is empty, the Github API; # library returns None instead of an empty string. Handle this here to; # avoid failures from trying to manipulate None.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:146,Safety,avoid,avoid,146,"# If the description of an issue/pull request is empty, the Github API; # library returns None instead of an empty string. Handle this here to; # avoid failures from trying to manipulate None.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:38,Testability,log,login,38,"""""""; Tries to translate a Phabricator login to a github login by; finding a commit made in Phabricator's Differential.; The commit's SHA1 is then looked up in the github repo and; the committer's login associated with that commit is returned. :param str phab_token: The Conduit API token to use for communication with Pabricator; :param github.Repository.Repository repo: The github repo to use when looking for the SHA1 found in Differential; :param str phab_login: The Phabricator login to be translated.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:56,Testability,log,login,56,"""""""; Tries to translate a Phabricator login to a github login by; finding a commit made in Phabricator's Differential.; The commit's SHA1 is then looked up in the github repo and; the committer's login associated with that commit is returned. :param str phab_token: The Conduit API token to use for communication with Pabricator; :param github.Repository.Repository repo: The github repo to use when looking for the SHA1 found in Differential; :param str phab_login: The Phabricator login to be translated.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:196,Testability,log,login,196,"""""""; Tries to translate a Phabricator login to a github login by; finding a commit made in Phabricator's Differential.; The commit's SHA1 is then looked up in the github repo and; the committer's login associated with that commit is returned. :param str phab_token: The Conduit API token to use for communication with Pabricator; :param github.Repository.Repository repo: The github repo to use when looking for the SHA1 found in Differential; :param str phab_login: The Phabricator login to be translated.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:483,Testability,log,login,483,"""""""; Tries to translate a Phabricator login to a github login by; finding a commit made in Phabricator's Differential.; The commit's SHA1 is then looked up in the github repo and; the committer's login associated with that commit is returned. :param str phab_token: The Conduit API token to use for communication with Pabricator; :param github.Repository.Repository repo: The github repo to use when looking for the SHA1 found in Differential; :param str phab_login: The Phabricator login to be translated.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:24,Security,hash,hash,24,"""""""; Extract the commit hash from the argument passed to /action github; comment actions. We currently only support passing the commit hash; directly or use the github URL, such as; https://github.com/llvm/llvm-project/commit/2832d7941f4207f1fcf813b27cf08cecc3086959; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:135,Security,hash,hash,135,"""""""; Extract the commit hash from the argument passed to /action github; comment actions. We currently only support passing the commit hash; directly or use the github URL, such as; https://github.com/llvm/llvm-project/commit/2832d7941f4207f1fcf813b27cf08cecc3086959; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:52,Deployability,release,release-workflow,52,"""""""; This class implements the sub-commands for the release-workflow command.; The current sub-commands are:; * create-branch; * create-pull-request. The execute_command method will automatically choose the correct sub-command; based on the text in stdin.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:263,Deployability,release,release,263,"""""""; Create a pull request in `self.repo_name`. The base branch of the; pull request will be chosen based on the the milestone attached to; the issue represented by `self.issue_number` For example if the milestone; is Release 13.0.1, then the base branch will be release/13.x. `branch`; will be used as the compare branch.; https://docs.github.com/en/get-started/quickstart/github-glossary#base-branch; https://docs.github.com/en/get-started/quickstart/github-glossary#compare-branch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py:23,Deployability,integrat,integration,23,"""""""; pre-push git hook integration; =============================. This script is intended to be setup as a pre-push hook, from the root of the; repo run:. ln -sf ../../llvm/utils/git/pre-push.py .git/hooks/pre-push. From the git doc:. The pre-push hook runs during git push, after the remote refs have been; updated but before any objects have been transferred. It receives the name; and location of the remote as parameters, and a list of to-be-updated refs; through stdin. You can use it to validate a set of ref updates before a push; occurs (a non-zero exit code will abort the push).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/pre-push.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py:309,Deployability,update,updated,309,"""""""; pre-push git hook integration; =============================. This script is intended to be setup as a pre-push hook, from the root of the; repo run:. ln -sf ../../llvm/utils/git/pre-push.py .git/hooks/pre-push. From the git doc:. The pre-push hook runs during git push, after the remote refs have been; updated but before any objects have been transferred. It receives the name; and location of the remote as parameters, and a list of to-be-updated refs; through stdin. You can use it to validate a set of ref updates before a push; occurs (a non-zero exit code will abort the push).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/pre-push.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py:447,Deployability,update,updated,447,"""""""; pre-push git hook integration; =============================. This script is intended to be setup as a pre-push hook, from the root of the; repo run:. ln -sf ../../llvm/utils/git/pre-push.py .git/hooks/pre-push. From the git doc:. The pre-push hook runs during git push, after the remote refs have been; updated but before any objects have been transferred. It receives the name; and location of the remote as parameters, and a list of to-be-updated refs; through stdin. You can use it to validate a set of ref updates before a push; occurs (a non-zero exit code will abort the push).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/pre-push.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py:516,Deployability,update,updates,516,"""""""; pre-push git hook integration; =============================. This script is intended to be setup as a pre-push hook, from the root of the; repo run:. ln -sf ../../llvm/utils/git/pre-push.py .git/hooks/pre-push. From the git doc:. The pre-push hook runs during git push, after the remote refs have been; updated but before any objects have been transferred. It receives the name; and location of the remote as parameters, and a list of to-be-updated refs; through stdin. You can use it to validate a set of ref updates before a push; occurs (a non-zero exit code will abort the push).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/pre-push.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py:23,Integrability,integrat,integration,23,"""""""; pre-push git hook integration; =============================. This script is intended to be setup as a pre-push hook, from the root of the; repo run:. ln -sf ../../llvm/utils/git/pre-push.py .git/hooks/pre-push. From the git doc:. The pre-push hook runs during git push, after the remote refs have been; updated but before any objects have been transferred. It receives the name; and location of the remote as parameters, and a list of to-be-updated refs; through stdin. You can use it to validate a set of ref updates before a push; occurs (a non-zero exit code will abort the push).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/pre-push.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py:573,Safety,abort,abort,573,"""""""; pre-push git hook integration; =============================. This script is intended to be setup as a pre-push hook, from the root of the; repo run:. ln -sf ../../llvm/utils/git/pre-push.py .git/hooks/pre-push. From the git doc:. The pre-push hook runs during git push, after the remote refs have been; updated but before any objects have been transferred. It receives the name; and location of the remote as parameters, and a list of to-be-updated refs; through stdin. You can use it to validate a set of ref updates before a push; occurs (a non-zero exit code will abort the push).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/pre-push.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py:494,Security,validat,validate,494,"""""""; pre-push git hook integration; =============================. This script is intended to be setup as a pre-push hook, from the root of the; repo run:. ln -sf ../../llvm/utils/git/pre-push.py .git/hooks/pre-push. From the git doc:. The pre-push hook runs during git push, after the remote refs have been; updated but before any objects have been transferred. It receives the name; and location of the remote as parameters, and a list of to-be-updated refs; through stdin. You can use it to validate a set of ref updates before a push; occurs (a non-zero exit code will abort the push).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/pre-push.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py:19,Testability,log,logging,19,# Escape args when logging for easy repro.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/pre-push.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py:10,Availability,error,errors,10,# Silence errors if requested.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/pre-push.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/setup.py:129,Deployability,install,install,129,"# setuptools expects to be invoked from within the directory of setup.py, but it; # is nice to allow:; # python path/to/setup.py install; # to work (for scripts, etc.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/setup.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py:497,Availability,error,error,497,# A simple evaluator of boolean expressions.; #; # Grammar:; # expr :: or_expr; # or_expr :: and_expr ('||' and_expr)*; # and_expr :: not_expr ('&&' not_expr)*; # not_expr :: '!' not_expr; # '(' or_expr ')'; # match_expr; # match_expr :: braced_regex; # identifier; # braced_regex match_expr; # identifier match_expr; # identifier :: [-+=._a-zA-Z0-9]+; # braced_regex :: '{{' python_regex '}}'; # Evaluates `string` as a boolean expression.; # Returns True or False. Throws a ValueError on syntax error.; #; # Variables in `variables` are true.; # Regexes that match any variable in `variables` are true.; # 'true' is true.; # All other identifiers are false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py:524,Modifiability,variab,variables,524,# A simple evaluator of boolean expressions.; #; # Grammar:; # expr :: or_expr; # or_expr :: and_expr ('||' and_expr)*; # and_expr :: not_expr ('&&' not_expr)*; # not_expr :: '!' not_expr; # '(' or_expr ')'; # match_expr; # match_expr :: braced_regex; # identifier; # braced_regex match_expr; # identifier match_expr; # identifier :: [-+=._a-zA-Z0-9]+; # braced_regex :: '{{' python_regex '}}'; # Evaluates `string` as a boolean expression.; # Returns True or False. Throws a ValueError on syntax error.; #; # Variables in `variables` are true.; # Regexes that match any variable in `variables` are true.; # 'true' is true.; # All other identifiers are false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py:571,Modifiability,variab,variable,571,# A simple evaluator of boolean expressions.; #; # Grammar:; # expr :: or_expr; # or_expr :: and_expr ('||' and_expr)*; # and_expr :: not_expr ('&&' not_expr)*; # not_expr :: '!' not_expr; # '(' or_expr ')'; # match_expr; # match_expr :: braced_regex; # identifier; # braced_regex match_expr; # identifier match_expr; # identifier :: [-+=._a-zA-Z0-9]+; # braced_regex :: '{{' python_regex '}}'; # Evaluates `string` as a boolean expression.; # Returns True or False. Throws a ValueError on syntax error.; #; # Variables in `variables` are true.; # Regexes that match any variable in `variables` are true.; # 'true' is true.; # All other identifiers are false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py:584,Modifiability,variab,variables,584,# A simple evaluator of boolean expressions.; #; # Grammar:; # expr :: or_expr; # or_expr :: and_expr ('||' and_expr)*; # and_expr :: not_expr ('&&' not_expr)*; # not_expr :: '!' not_expr; # '(' or_expr ')'; # match_expr; # match_expr :: braced_regex; # identifier; # braced_regex match_expr; # identifier match_expr; # identifier :: [-+=._a-zA-Z0-9]+; # braced_regex :: '{{' python_regex '}}'; # Evaluates `string` as a boolean expression.; # Returns True or False. Throws a ValueError on syntax error.; #; # Variables in `variables` are true.; # Regexes that match any variable in `variables` are true.; # 'true' is true.; # All other identifiers are false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py:4,Usability,simpl,simple,4,# A simple evaluator of boolean expressions.; #; # Grammar:; # expr :: or_expr; # or_expr :: and_expr ('||' and_expr)*; # and_expr :: not_expr ('&&' not_expr)*; # not_expr :: '!' not_expr; # '(' or_expr ')'; # match_expr; # match_expr :: braced_regex; # identifier; # braced_regex match_expr; # identifier match_expr; # identifier :: [-+=._a-zA-Z0-9]+; # braced_regex :: '{{' python_regex '}}'; # Evaluates `string` as a boolean expression.; # Returns True or False. Throws a ValueError on syntax error.; #; # Variables in `variables` are true.; # Regexes that match any variable in `variables` are true.; # 'true' is true.; # All other identifiers are false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py:101,Availability,error,error,101,# Evaluate boolean expression `expr`.; # Fail if it does not throw a ValueError containing the text `error`.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/cl_arguments.py:30,Modifiability,variab,variables,30,# LIT is special: environment variables override command line arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/cl_arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/cl_arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:33,Performance,cache,cache,33,"""""""getTestSuite(item, litConfig, cache) -> (suite, relative_path). Find the test suite containing @arg item. @retval (None, ...) - Indicates no test suite contains @arg item.; @retval (suite, relative_path) - The suite that @arg item is in, and its; relative path inside that suite.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:76,Testability,test,test,76,"""""""getTestSuite(item, litConfig, cache) -> (suite, relative_path). Find the test suite containing @arg item. @retval (None, ...) - Indicates no test suite contains @arg item.; @retval (suite, relative_path) - The suite that @arg item is in, and its; relative path inside that suite.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:144,Testability,test,test,144,"""""""getTestSuite(item, litConfig, cache) -> (suite, relative_path). Find the test suite containing @arg item. @retval (None, ...) - Indicates no test suite contains @arg item.; @retval (suite, relative_path) - The suite that @arg item is in, and its; relative path inside that suite.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:19,Modifiability,config,config,19,# Check for a site config or a lit config.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:35,Modifiability,config,config,35,# Check for a site config or a lit config.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:22,Modifiability,config,config,22,"# If we didn't find a config file, keep looking.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:85,Deployability,configurat,configuration,85,"# This is a private builtin parameter which can be used to perform; # translation of configuration paths. Specifically, this parameter; # can be set to a dictionary that the discovery process will consult; # when it finds a configuration it is about to load. If the given; # path is in the map, the value of that key is a path to the; # configuration to load instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:224,Deployability,configurat,configuration,224,"# This is a private builtin parameter which can be used to perform; # translation of configuration paths. Specifically, this parameter; # can be set to a dictionary that the discovery process will consult; # when it finds a configuration it is about to load. If the given; # path is in the map, the value of that key is a path to the; # configuration to load instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:337,Deployability,configurat,configuration,337,"# This is a private builtin parameter which can be used to perform; # translation of configuration paths. Specifically, this parameter; # can be set to a dictionary that the discovery process will consult; # when it finds a configuration it is about to load. If the given; # path is in the map, the value of that key is a path to the; # configuration to load instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:85,Modifiability,config,configuration,85,"# This is a private builtin parameter which can be used to perform; # translation of configuration paths. Specifically, this parameter; # can be set to a dictionary that the discovery process will consult; # when it finds a configuration it is about to load. If the given; # path is in the map, the value of that key is a path to the; # configuration to load instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:224,Modifiability,config,configuration,224,"# This is a private builtin parameter which can be used to perform; # translation of configuration paths. Specifically, this parameter; # can be set to a dictionary that the discovery process will consult; # when it finds a configuration it is about to load. If the given; # path is in the map, the value of that key is a path to the; # configuration to load instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:337,Modifiability,config,configuration,337,"# This is a private builtin parameter which can be used to perform; # translation of configuration paths. Specifically, this parameter; # can be set to a dictionary that the discovery process will consult; # when it finds a configuration it is about to load. If the given; # path is in the map, the value of that key is a path to the; # configuration to load instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:59,Performance,perform,perform,59,"# This is a private builtin parameter which can be used to perform; # translation of configuration paths. Specifically, this parameter; # can be set to a dictionary that the discovery process will consult; # when it finds a configuration it is about to load. If the given; # path is in the map, the value of that key is a path to the; # configuration to load instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:253,Performance,load,load,253,"# This is a private builtin parameter which can be used to perform; # translation of configuration paths. Specifically, this parameter; # can be set to a dictionary that the discovery process will consult; # when it finds a configuration it is about to load. If the given; # path is in the map, the value of that key is a path to the; # configuration to load instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:354,Performance,load,load,354,"# This is a private builtin parameter which can be used to perform; # translation of configuration paths. Specifically, this parameter; # can be set to a dictionary that the discovery process will consult; # when it finds a configuration it is about to load. If the given; # path is in the map, the value of that key is a path to the; # configuration to load instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:38,Modifiability,config,config,38,"# We found a test suite, create a new config for it and load it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:56,Performance,load,load,56,"# We found a test suite, create a new config for it and load it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:13,Testability,test,test,13,"# We found a test suite, create a new config for it and load it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:36,Testability,test,test,36,# Check for an already instantiated test suite.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:17,Modifiability,config,config,17,# Get the parent config.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:28,Deployability,configurat,configuration,28,# Check if there is a local configuration file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:28,Modifiability,config,configuration,28,# Check if there is a local configuration file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:32,Modifiability,config,config,32,"# If not, just reuse the parent config.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:56,Deployability,configurat,configuration,56,"# Otherwise, copy the current config and load the local configuration; # file into it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:30,Modifiability,config,config,30,"# Otherwise, copy the current config and load the local configuration; # file into it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:56,Modifiability,config,configuration,56,"# Otherwise, copy the current config and load the local configuration; # file into it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:41,Performance,load,load,41,"# Otherwise, copy the current config and load the local configuration; # file into it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:11,Testability,test,test,11,# Find the test suite for this input and its relative path.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:37,Availability,error,errors,37,# Check that the source path exists (errors here are reported by the; # caller).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:28,Testability,test,test,28,# Check if the user named a test directly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:174,Availability,error,error,174,"# If we don't have a test format or if we are running standalone tests,; # always ""find"" the test itself. Otherwise, we might find no tests at; # all, which is considered an error but isn't an error with standalone; # tests.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:193,Availability,error,error,193,"# If we don't have a test format or if we are running standalone tests,; # always ""find"" the test itself. Otherwise, we might find no tests at; # all, which is considered an error but isn't an error with standalone; # tests.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:21,Testability,test,test,21,"# If we don't have a test format or if we are running standalone tests,; # always ""find"" the test itself. Otherwise, we might find no tests at; # all, which is considered an error but isn't an error with standalone; # tests.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:65,Testability,test,tests,65,"# If we don't have a test format or if we are running standalone tests,; # always ""find"" the test itself. Otherwise, we might find no tests at; # all, which is considered an error but isn't an error with standalone; # tests.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:93,Testability,test,test,93,"# If we don't have a test format or if we are running standalone tests,; # always ""find"" the test itself. Otherwise, we might find no tests at; # all, which is considered an error but isn't an error with standalone; # tests.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:134,Testability,test,tests,134,"# If we don't have a test format or if we are running standalone tests,; # always ""find"" the test itself. Otherwise, we might find no tests at; # all, which is considered an error but isn't an error with standalone; # tests.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:218,Testability,test,tests,218,"# If we don't have a test format or if we are running standalone tests,; # always ""find"" the test itself. Otherwise, we might find no tests at; # all, which is considered an error but isn't an error with standalone; # tests.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:83,Deployability,configurat,configuration,83,"# Otherwise we have a directory to search for tests, start by getting the; # local configuration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:83,Modifiability,config,configuration,83,"# Otherwise we have a directory to search for tests, start by getting the; # local configuration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:46,Testability,test,tests,46,"# Otherwise we have a directory to search for tests, start by getting the; # local configuration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:21,Testability,test,tests,21,# Directory contains tests to be run standalone. Do not try to discover.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:13,Testability,test,tests,13,# Search for tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:81,Deployability,configurat,configuration,81,"# Check for nested test suites, first in the execpath in case there is a; # site configuration and then in the source path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:81,Modifiability,config,configuration,81,"# Check for nested test suites, first in the execpath in case there is a; # site configuration and then in the source path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:19,Testability,test,test,19,"# Check for nested test suites, first in the execpath in case there is a; # site configuration and then in the source path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:61,Testability,test,test,61,"# If the this directory recursively maps back to the current test suite,; # disregard it (this can happen if the exec root is located inside the; # current test suite, for example).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:156,Testability,test,test,156,"# If the this directory recursively maps back to the current test suite,; # disregard it (this can happen if the exec root is located inside the; # current test suite, for example).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:13,Performance,load,load,13,"# Otherwise, load from the nested test suite, if present.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:34,Testability,test,test,34,"# Otherwise, load from the nested test suite, if present.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:66,Deployability,configurat,configuration,66,"""""""; find_tests_for_inputs(lit_config, inputs) -> [Test]. Given a configuration object and a list of input specifiers, find all the; tests to execute.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:66,Modifiability,config,configuration,66,"""""""; find_tests_for_inputs(lit_config, inputs) -> [Test]. Given a configuration object and a list of input specifiers, find all the; tests to execute.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:133,Testability,test,tests,133,"""""""; find_tests_for_inputs(lit_config, inputs) -> [Test]. Given a configuration object and a list of input specifiers, find all the; tests to execute.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:11,Testability,test,tests,11,# Load the tests from the inputs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:70,Performance,perform,performance,70,# This data is no longer needed but keeping it around causes awful; # performance problems while the test suites run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:101,Testability,test,test,101,# This data is no longer needed but keeping it around causes awful; # performance problems while the test suites run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:20,Availability,error,errors,20,"# If there were any errors during test discovery, exit now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:34,Testability,test,test,34,"# If there were any errors during test discovery, exit now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py:11,Testability,test,test,11,# Show the test result line.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/display.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py:16,Availability,failure,failure,16,"# Show the test failure output, if requested.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/display.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py:11,Testability,test,test,11,"# Show the test failure output, if requested.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/display.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py:111,Availability,error,errors,111,# Python 2 can raise UnicodeDecodeError here too in cases; # where the stdout encoding is ASCII. Ignore decode errors; # in this case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/display.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py:9,Testability,test,test,9,"# Report test metrics, if present.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/display.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py:15,Testability,test,tests,15,"# Report micro-tests, if present",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/display.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:155,Deployability,configurat,configuration,155,"""""""LitConfig - Configuration data for a 'lit' test runner instance, shared; across all tests. The LitConfig object is also used to communicate with client configuration; files, it is always passed in as the global variable 'lit' so that; configuration files can access common functionality and internal components; easily.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:238,Deployability,configurat,configuration,238,"""""""LitConfig - Configuration data for a 'lit' test runner instance, shared; across all tests. The LitConfig object is also used to communicate with client configuration; files, it is always passed in as the global variable 'lit' so that; configuration files can access common functionality and internal components; easily.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:155,Modifiability,config,configuration,155,"""""""LitConfig - Configuration data for a 'lit' test runner instance, shared; across all tests. The LitConfig object is also used to communicate with client configuration; files, it is always passed in as the global variable 'lit' so that; configuration files can access common functionality and internal components; easily.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:214,Modifiability,variab,variable,214,"""""""LitConfig - Configuration data for a 'lit' test runner instance, shared; across all tests. The LitConfig object is also used to communicate with client configuration; files, it is always passed in as the global variable 'lit' so that; configuration files can access common functionality and internal components; easily.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:238,Modifiability,config,configuration,238,"""""""LitConfig - Configuration data for a 'lit' test runner instance, shared; across all tests. The LitConfig object is also used to communicate with client configuration; files, it is always passed in as the global variable 'lit' so that; configuration files can access common functionality and internal components; easily.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:262,Security,access,access,262,"""""""LitConfig - Configuration data for a 'lit' test runner instance, shared; across all tests. The LitConfig object is also used to communicate with client configuration; files, it is always passed in as the global variable 'lit' so that; configuration files can access common functionality and internal components; easily.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:46,Testability,test,test,46,"""""""LitConfig - Configuration data for a 'lit' test runner instance, shared; across all tests. The LitConfig object is also used to communicate with client configuration; files, it is always passed in as the global variable 'lit' so that; configuration files can access common functionality and internal components; easily.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:87,Testability,test,tests,87,"""""""LitConfig - Configuration data for a 'lit' test runner instance, shared; across all tests. The LitConfig object is also used to communicate with client configuration; files, it is always passed in as the global variable 'lit' so that; configuration files can access common functionality and internal components; easily.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:18,Testability,test,test,18,# The name of the test runner.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:43,Modifiability,variab,variable,43,# The items to add to the PATH environment variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:51,Testability,test,test,51,# Configuration files to look for when discovering test suites.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:69,Testability,test,test,69,"""""""; Interface for getting maximum time to spend executing; a single test; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:37,Availability,error,error,37,"""""""; Returns a tuple (<supported> , <error message>); where; `<supported>` is True if setting maxIndividualTestTime is supported; on the current host, returns False otherwise.; `<error message>` is an empty string if `<supported>` is True,; otherwise is contains a string describing why setting; maxIndividualTestTime is not supported.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:179,Availability,error,error,179,"""""""; Returns a tuple (<supported> , <error message>); where; `<supported>` is True if setting maxIndividualTestTime is supported; on the current host, returns False otherwise.; `<error message>` is an empty string if `<supported>` is True,; otherwise is contains a string describing why setting; maxIndividualTestTime is not supported.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:43,Integrability,message,message,43,"""""""; Returns a tuple (<supported> , <error message>); where; `<supported>` is True if setting maxIndividualTestTime is supported; on the current host, returns False otherwise.; `<error message>` is an empty string if `<supported>` is True,; otherwise is contains a string describing why setting; maxIndividualTestTime is not supported.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:185,Integrability,message,message,185,"""""""; Returns a tuple (<supported> , <error message>); where; `<supported>` is True if setting maxIndividualTestTime is supported; on the current host, returns False otherwise.; `<error message>` is an empty string if `<supported>` is True,; otherwise is contains a string describing why setting; maxIndividualTestTime is not supported.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:69,Testability,test,test,69,"""""""; Interface for setting maximum time to spend executing; a single test; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:101,Availability,avail,available,101,# The current implementation needs psutil on some platforms to set; # a timeout per test. Check it's available.; # See lit.util.killProcessAndChildren(),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:72,Safety,timeout,timeout,72,# The current implementation needs psutil on some platforms to set; # a timeout per test. Check it's available.; # See lit.util.killProcessAndChildren(),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:84,Testability,test,test,84,# The current implementation needs psutil on some platforms to set; # a timeout per test. Check it's available.; # See lit.util.killProcessAndChildren(),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:15,Modifiability,config,config,15,"""""""load_config(config, path) - Load a config object from an alternate; path.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:38,Modifiability,config,config,38,"""""""load_config(config, path) - Load a config object from an alternate; path.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:31,Integrability,message,message,31,# Get the file/line where this message was generated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:46,Integrability,wrap,wrapper,46,"# Step out of _write_message, and then out of wrapper.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:111,Safety,avoid,avoid,111,"# In a git bash terminal, the writes to sys.stderr aren't visible; # on screen immediately. Flush them here to avoid broken/misoredered; # output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:14,Energy Efficiency,adapt,adaptor,14,"""""""; TestCase adaptor for providing a Python 'unittest' compatible interface to 'lit'; tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:67,Integrability,interface,interface,67,"""""""; TestCase adaptor for providing a Python 'unittest' compatible interface to 'lit'; tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:14,Modifiability,adapt,adaptor,14,"""""""; TestCase adaptor for providing a Python 'unittest' compatible interface to 'lit'; tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:87,Testability,test,tests,87,"""""""; TestCase adaptor for providing a Python 'unittest' compatible interface to 'lit'; tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:10,Testability,test,test,10,# Run the test.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:20,Modifiability,config,config,20,# Create the global config object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:10,Testability,test,test,10,# Perform test discovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:20,Testability,test,test,20,# Return a unittest test suite which just runs the tests in order.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:51,Testability,test,tests,51,# Return a unittest test suite which just runs the tests in order.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py:25,Deployability,configurat,configuration,25,# Command line overrides configuration for maxIndividualTestTime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/main.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py:25,Modifiability,config,configuration,25,# Command line overrides configuration for maxIndividualTestTime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/main.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py:54,Testability,test,tests,54,"# When running multiple shards, don't include skipped tests in the xunit; # output since merging the files will result in duplicates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/main.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py:51,Testability,test,test,51,"# For clarity, generate a preview of the first few test indices in the shard; # to accompany the arithmetic expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/main.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py:256,Energy Efficiency,monitor,monitor,256,"# Create a temp directory inside the normal temp directory so that we can; # try to avoid temporary test file leaks. The user can avoid this behavior; # by setting LIT_PRESERVES_TMP in the environment, so they can easily use; # their own temp directory to monitor temporary file leaks or handle them at; # the buildbot level.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/main.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py:84,Safety,avoid,avoid,84,"# Create a temp directory inside the normal temp directory so that we can; # try to avoid temporary test file leaks. The user can avoid this behavior; # by setting LIT_PRESERVES_TMP in the environment, so they can easily use; # their own temp directory to monitor temporary file leaks or handle them at; # the buildbot level.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/main.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py:130,Safety,avoid,avoid,130,"# Create a temp directory inside the normal temp directory so that we can; # try to avoid temporary test file leaks. The user can avoid this behavior; # by setting LIT_PRESERVES_TMP in the environment, so they can easily use; # their own temp directory to monitor temporary file leaks or handle them at; # the buildbot level.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/main.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py:100,Testability,test,test,100,"# Create a temp directory inside the normal temp directory so that we can; # try to avoid temporary test file leaks. The user can avoid this behavior; # by setting LIT_PRESERVES_TMP in the environment, so they can easily use; # their own temp directory to monitor temporary file leaks or handle them at; # the buildbot level.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/main.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:364,Energy Efficiency,green,green,364,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:579,Energy Efficiency,green,green,579,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:33,Modifiability,portab,portably,33,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:131,Modifiability,variab,variables,131,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:692,Modifiability,variab,variable,692,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:999,Modifiability,variab,variable,999,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:209,Performance,perform,perform,209,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:488,Performance,perform,perform,488,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:883,Testability,test,test,883,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:944,Testability,test,testing,944,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:246,Usability,simpl,simply,246,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:937,Usability,simpl,simply,937,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:1104,Usability,clear,clearning,1104,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:19,Availability,down,down,19,#: Move the cursor down one line,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:65,Usability,clear,clear,65,"""""""; BOL=cr UP=cuu1 DOWN=cud1 LEFT=cub1 RIGHT=cuf1; CLEAR_SCREEN=clear CLEAR_EOL=el CLEAR_BOL=el1 CLEAR_EOS=ed BOLD=bold; BLINK=blink DIM=dim REVERSE=rev UNDERLINE=smul NORMAL=sgr0; HIDE_CURSOR=cinvis SHOW_CURSOR=cnorm""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:15,Availability,avail,available,15,# Curses isn't available on all platforms,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:93,Usability,progress bar,progress bar,93,#######################################################################; # Example use case: progress bar; #######################################################################,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:7,Usability,simpl,simple,7,"""""""; A simple progress bar which doesn't need any terminal support. This prints out a progress bar like:; 'Header: 0.. 10.. 20.. ...'; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:14,Usability,progress bar,progress bar,14,"""""""; A simple progress bar which doesn't need any terminal support. This prints out a progress bar like:; 'Header: 0.. 10.. 20.. ...'; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:86,Usability,progress bar,progress bar,86,"""""""; A simple progress bar which doesn't need any terminal support. This prints out a progress bar like:; 'Header: 0.. 10.. 20.. ...'; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:118,Integrability,message,message,118,"""""""; A 3-line progress bar, which looks like::. Header; 20% [===========----------------------------------]; progress message. The progress bar is colored, if the terminal supports color; output; and adjusts to the width of the terminal.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:14,Usability,progress bar,progress bar,14,"""""""; A 3-line progress bar, which looks like::. Header; 20% [===========----------------------------------]; progress message. The progress bar is colored, if the terminal supports color; output; and adjusts to the width of the terminal.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:131,Usability,progress bar,progress bar,131,"""""""; A 3-line progress bar, which looks like::. Header; 20% [===========----------------------------------]; progress message. The progress bar is colored, if the terminal supports color; output; and adjusts to the width of the terminal.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:7,Deployability,update,update,7,"# self.update(0, '')",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:84,Safety,avoid,avoid,84,# Suite names are not necessarily unique. Include object identity in sort; # key to avoid mixing tests of different suites.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:97,Testability,test,tests,97,# Suite names are not necessarily unique. Include object identity in sort; # key to avoid mixing tests of different suites.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:44,Deployability,configurat,configuration,44,# FIXME: Record some information on the lit configuration used?; # FIXME: Record information from the individual test suites?; # Encode the tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:44,Modifiability,config,configuration,44,# FIXME: Record some information on the lit configuration used?; # FIXME: Record information from the individual test suites?; # Encode the tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:113,Testability,test,test,113,# FIXME: Record some information on the lit configuration used?; # FIXME: Record information from the individual test suites?; # Encode the tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:140,Testability,test,tests,140,# FIXME: Record some information on the lit configuration used?; # FIXME: Record information from the individual test suites?; # Encode the tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:6,Testability,test,test,6,"# Add test metrics, if present.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:15,Testability,test,tests,15,"# Report micro-tests separately, if present",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:16,Testability,test,test,16,# Expand parent test name with micro test name,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:37,Testability,test,test,37,# Expand parent test name with micro test name,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:75,Integrability,wrap,wrap,75,# In the unlikely case that the output contains the CDATA; # terminator we wrap it by creating a new CDATA block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:10,Testability,test,test,10,"# Failing test output sometimes contains control characters like; # \x1b (e.g. if there was some -fcolor-diagnostics output) which are; # not allowed inside XML files.; # This causes problems with CI systems: for example, the Jenkins; # JUnit XML will throw an exception when ecountering those; # characters and similar problems also occur with GitLab CI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:13,Testability,test,tests,13,# Encode the tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:16,Testability,test,test,16,# Expand parent test name with micro test name,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:37,Testability,test,test,37,# Expand parent test name with micro test name,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:18,Testability,test,test,18,# Find when first test started so we can make start times relative.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:15,Modifiability,config,configured,15,"""""""A concrete, configured testing run.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:26,Testability,test,testing,26,"""""""A concrete, configured testing run.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:188,Availability,avail,available,188,"""""""; Execute the tests in the run using up to the specified number of; parallel tasks, and inform the caller of each individual result. The; provided tests should be a subset of the tests available in this run; object. The progress_callback will be invoked for each completed test. If timeout is non-None, it should be a time in seconds after which to; stop executing tests. Returns the elapsed testing time. Upon completion, each test in the run will have its result; computed. Tests which were not actually executed (for any reason) will; be marked SKIPPED.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:285,Safety,timeout,timeout,285,"""""""; Execute the tests in the run using up to the specified number of; parallel tasks, and inform the caller of each individual result. The; provided tests should be a subset of the tests available in this run; object. The progress_callback will be invoked for each completed test. If timeout is non-None, it should be a time in seconds after which to; stop executing tests. Returns the elapsed testing time. Upon completion, each test in the run will have its result; computed. Tests which were not actually executed (for any reason) will; be marked SKIPPED.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:17,Testability,test,tests,17,"""""""; Execute the tests in the run using up to the specified number of; parallel tasks, and inform the caller of each individual result. The; provided tests should be a subset of the tests available in this run; object. The progress_callback will be invoked for each completed test. If timeout is non-None, it should be a time in seconds after which to; stop executing tests. Returns the elapsed testing time. Upon completion, each test in the run will have its result; computed. Tests which were not actually executed (for any reason) will; be marked SKIPPED.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:150,Testability,test,tests,150,"""""""; Execute the tests in the run using up to the specified number of; parallel tasks, and inform the caller of each individual result. The; provided tests should be a subset of the tests available in this run; object. The progress_callback will be invoked for each completed test. If timeout is non-None, it should be a time in seconds after which to; stop executing tests. Returns the elapsed testing time. Upon completion, each test in the run will have its result; computed. Tests which were not actually executed (for any reason) will; be marked SKIPPED.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:182,Testability,test,tests,182,"""""""; Execute the tests in the run using up to the specified number of; parallel tasks, and inform the caller of each individual result. The; provided tests should be a subset of the tests available in this run; object. The progress_callback will be invoked for each completed test. If timeout is non-None, it should be a time in seconds after which to; stop executing tests. Returns the elapsed testing time. Upon completion, each test in the run will have its result; computed. Tests which were not actually executed (for any reason) will; be marked SKIPPED.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:276,Testability,test,test,276,"""""""; Execute the tests in the run using up to the specified number of; parallel tasks, and inform the caller of each individual result. The; provided tests should be a subset of the tests available in this run; object. The progress_callback will be invoked for each completed test. If timeout is non-None, it should be a time in seconds after which to; stop executing tests. Returns the elapsed testing time. Upon completion, each test in the run will have its result; computed. Tests which were not actually executed (for any reason) will; be marked SKIPPED.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:368,Testability,test,tests,368,"""""""; Execute the tests in the run using up to the specified number of; parallel tasks, and inform the caller of each individual result. The; provided tests should be a subset of the tests available in this run; object. The progress_callback will be invoked for each completed test. If timeout is non-None, it should be a time in seconds after which to; stop executing tests. Returns the elapsed testing time. Upon completion, each test in the run will have its result; computed. Tests which were not actually executed (for any reason) will; be marked SKIPPED.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:395,Testability,test,testing,395,"""""""; Execute the tests in the run using up to the specified number of; parallel tasks, and inform the caller of each individual result. The; provided tests should be a subset of the tests available in this run; object. The progress_callback will be invoked for each completed test. If timeout is non-None, it should be a time in seconds after which to; stop executing tests. Returns the elapsed testing time. Upon completion, each test in the run will have its result; computed. Tests which were not actually executed (for any reason) will; be marked SKIPPED.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:431,Testability,test,test,431,"""""""; Execute the tests in the run using up to the specified number of; parallel tasks, and inform the caller of each individual result. The; provided tests should be a subset of the tests available in this run; object. The progress_callback will be invoked for each completed test. If timeout is non-None, it should be a time in seconds after which to; stop executing tests. Returns the elapsed testing time. Upon completion, each test in the run will have its result; computed. Tests which were not actually executed (for any reason) will; be marked SKIPPED.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:9,Safety,timeout,timeouts,9,"# Larger timeouts (one year, positive infinity) don't work on Windows.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:15,Testability,test,test,15,"# Update local test object ""in place"" from remote test object. This; # ensures that the original test object which is used for printing test; # results reflects the changes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:50,Testability,test,test,50,"# Update local test object ""in place"" from remote test object. This; # ensures that the original test object which is used for printing test; # results reflects the changes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:97,Testability,test,test,97,"# Update local test object ""in place"" from remote test object. This; # ensures that the original test object which is used for printing test; # results reflects the changes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:136,Testability,test,test,136,"# Update local test object ""in place"" from remote test object. This; # ensures that the original test object which is used for printing test; # results reflects the changes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:50,Testability,test,tests,50,"# TODO(yln): interferes with progress bar; # Some tests use threads internally, and at least on Linux each of these; # threads counts toward the current process limit. Try to raise the (soft); # process limit so that tests don't fail due to resource exhaustion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:217,Testability,test,tests,217,"# TODO(yln): interferes with progress bar; # Some tests use threads internally, and at least on Linux each of these; # threads counts toward the current process limit. Try to raise the (soft); # process limit so that tests don't fail due to resource exhaustion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:29,Usability,progress bar,progress bar,29,"# TODO(yln): interferes with progress bar; # Some tests use threads internally, and at least on Linux each of these; # threads counts toward the current process limit. Try to raise the (soft); # process limit so that tests don't fail due to resource exhaustion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:13,Safety,safe,safety,13,# the 2 is a safety factor; # Importing the resource module will likely fail on Windows.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ShCommands.py:18,Security,validat,validation,18,# For debugging / validation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ShCommands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ShCommands.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ShUtil.py:737,Modifiability,portab,portable,737,"# If a quote character is present, lex_arg_quoted will remove the quotes; # and append the argument directly. This causes a problem when the; # quoted portion contains a glob character, as the character will no; # longer be treated literally. If glob characters occur *only* inside; # of quotes, then we can handle this by not globbing at all, and if; # glob characters occur *only* outside of quotes, we can still glob just; # fine. But if a glob character occurs both inside and outside of; # quotes this presents a problem. In practice this is such an obscure; # edge case that it doesn't seem worth the added complexity to support.; # By adding an assertion, it means some bot somewhere will catch this; # and flag the user of a non-portable test (which could almost certainly; # be re-written to work correctly without triggering this).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ShUtil.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ShUtil.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ShUtil.py:652,Testability,assert,assertion,652,"# If a quote character is present, lex_arg_quoted will remove the quotes; # and append the argument directly. This causes a problem when the; # quoted portion contains a glob character, as the character will no; # longer be treated literally. If glob characters occur *only* inside; # of quotes, then we can handle this by not globbing at all, and if; # glob characters occur *only* outside of quotes, we can still glob just; # fine. But if a glob character occurs both inside and outside of; # quotes this presents a problem. In practice this is such an obscure; # edge case that it doesn't seem worth the added complexity to support.; # By adding an assertion, it means some bot somewhere will catch this; # and flag the user of a non-portable test (which could almost certainly; # be re-written to work correctly without triggering this).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ShUtil.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ShUtil.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ShUtil.py:746,Testability,test,test,746,"# If a quote character is present, lex_arg_quoted will remove the quotes; # and append the argument directly. This causes a problem when the; # quoted portion contains a glob character, as the character will no; # longer be treated literally. If glob characters occur *only* inside; # of quotes, then we can handle this by not globbing at all, and if; # glob characters occur *only* outside of quotes, we can still glob just; # fine. But if a glob character occurs both inside and outside of; # quotes this presents a problem. In practice this is such an obscure; # edge case that it doesn't seem worth the added complexity to support.; # By adding an assertion, it means some bot somewhere will catch this; # and flag the user of a non-portable test (which could almost certainly; # be re-written to work correctly without triggering this).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ShUtil.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ShUtil.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:109,Testability,test,test,109,"""""""; todata() -> json-serializable data. Convert this metric to content suitable for serializing in the JSON test; output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:54,Testability,test,test,54,"""""""Wrapper for the results of executing an individual test.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:6,Testability,test,test,6,# The test output.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:33,Testability,test,test,33,"# The wall timing to execute the test, if timing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:31,Testability,test,test,31,# The metrics reported by this test.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:12,Testability,test,test,12,# The micro-test results reported by this test.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:42,Testability,test,test,42,# The micro-test results reported by this test.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:120,Availability,error,error,120,"""""""; addMetric(name, value). Attach a test metric to the test result, with the given name and list of; values. It is an error to attempt to attach the metrics with the same; name multiple times. Each value must be an instance of a MetricValue subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:38,Testability,test,test,38,"""""""; addMetric(name, value). Attach a test metric to the test result, with the given name and list of; values. It is an error to attempt to attach the metrics with the same; name multiple times. Each value must be an instance of a MetricValue subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:57,Testability,test,test,57,"""""""; addMetric(name, value). Attach a test metric to the test result, with the given name and list of; values. It is an error to attempt to attach the metrics with the same; name multiple times. Each value must be an instance of a MetricValue subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:123,Availability,error,error,123,"""""""; addMicroResult(microResult). Attach a micro-test result to the test result, with the given name and; result. It is an error to attempt to attach a micro-test with the; same name multiple times. Each micro-test result must be an instance of the Result class.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:49,Testability,test,test,49,"""""""; addMicroResult(microResult). Attach a micro-test result to the test result, with the given name and; result. It is an error to attempt to attach a micro-test with the; same name multiple times. Each micro-test result must be an instance of the Result class.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:68,Testability,test,test,68,"""""""; addMicroResult(microResult). Attach a micro-test result to the test result, with the given name and; result. It is an error to attempt to attach a micro-test with the; same name multiple times. Each micro-test result must be an instance of the Result class.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:158,Testability,test,test,158,"""""""; addMicroResult(microResult). Attach a micro-test result to the test result, with the given name and; result. It is an error to attempt to attach a micro-test with the; same name multiple times. Each micro-test result must be an instance of the Result class.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:210,Testability,test,test,210,"""""""; addMicroResult(microResult). Attach a micro-test result to the test result, with the given name and; result. It is an error to attempt to attach a micro-test with the; same name multiple times. Each micro-test result must be an instance of the Result class.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:41,Testability,test,tests,41,"""""""TestSuite - Information on a group of tests. A test suite groups together a set of logically related tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:50,Testability,test,test,50,"""""""TestSuite - Information on a group of tests. A test suite groups together a set of logically related tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:86,Testability,log,logically,86,"""""""TestSuite - Information on a group of tests. A test suite groups together a set of logically related tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:104,Testability,test,tests,104,"""""""TestSuite - Information on a group of tests. A test suite groups together a set of logically related tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:17,Deployability,configurat,configuration,17,# The test suite configuration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:17,Modifiability,config,configuration,17,# The test suite configuration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:6,Testability,test,test,6,# The test suite configuration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:34,Testability,test,test,34,"""""""Test - Information on a single test instance.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:40,Testability,test,test,40,"# A list of conditions under which this test is expected to fail.; # Each condition is a boolean expression of features, or '*'.; # These can optionally be provided by test format handlers,; # and will be honored when the test result is supplied.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:168,Testability,test,test,168,"# A list of conditions under which this test is expected to fail.; # Each condition is a boolean expression of features, or '*'.; # These can optionally be provided by test format handlers,; # and will be honored when the test result is supplied.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:222,Testability,test,test,222,"# A list of conditions under which this test is expected to fail.; # Each condition is a boolean expression of features, or '*'.; # These can optionally be provided by test format handlers,; # and will be honored when the test result is supplied.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:65,Testability,test,test,65,# A list of conditions that must be satisfied before running the test.; # Each condition is a boolean expression of features. All of them; # must be True for the test to run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:162,Testability,test,test,162,# A list of conditions that must be satisfied before running the test.; # Each condition is a boolean expression of features. All of them; # must be True for the test to run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:53,Testability,test,test,53,# A list of conditions that prevent execution of the test.; # Each condition is a boolean expression of features. All of them; # must be False for the test to run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:151,Testability,test,test,151,# A list of conditions that prevent execution of the test.; # Each condition is a boolean expression of features. All of them; # must be False for the test to run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:51,Testability,test,test,51,# An optional number of retries allowed before the test finally succeeds.; # The test is run at most once plus the number of retries specified here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:81,Testability,test,test,81,# An optional number of retries allowed before the test finally succeeds.; # The test is run at most once plus the number of retries specified here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:6,Testability,test,test,6,"# The test result, once complete.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:20,Availability,failure,failure,20,"# The previous test failure state, if applicable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:15,Testability,test,test,15,"# The previous test failure state, if applicable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:15,Testability,test,test,15,"# The previous test elapsed time, if applicable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:9,Availability,error,error,9,# Syntax error in an XFAIL line.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:292,Availability,error,error,292,"""""""; isExpectedToFail() -> bool. Check whether this test is expected to fail in the current; configuration. This check relies on the test xfails property which by; some test formats may not be computed until the test has first been; executed.; Throws ValueError if an XFAIL line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:93,Deployability,configurat,configuration,93,"""""""; isExpectedToFail() -> bool. Check whether this test is expected to fail in the current; configuration. This check relies on the test xfails property which by; some test formats may not be computed until the test has first been; executed.; Throws ValueError if an XFAIL line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:93,Modifiability,config,configuration,93,"""""""; isExpectedToFail() -> bool. Check whether this test is expected to fail in the current; configuration. This check relies on the test xfails property which by; some test formats may not be computed until the test has first been; executed.; Throws ValueError if an XFAIL line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:52,Testability,test,test,52,"""""""; isExpectedToFail() -> bool. Check whether this test is expected to fail in the current; configuration. This check relies on the test xfails property which by; some test formats may not be computed until the test has first been; executed.; Throws ValueError if an XFAIL line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:133,Testability,test,test,133,"""""""; isExpectedToFail() -> bool. Check whether this test is expected to fail in the current; configuration. This check relies on the test xfails property which by; some test formats may not be computed until the test has first been; executed.; Throws ValueError if an XFAIL line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:169,Testability,test,test,169,"""""""; isExpectedToFail() -> bool. Check whether this test is expected to fail in the current; configuration. This check relies on the test xfails property which by; some test formats may not be computed until the test has first been; executed.; Throws ValueError if an XFAIL line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:212,Testability,test,test,212,"""""""; isExpectedToFail() -> bool. Check whether this test is expected to fail in the current; configuration. This check relies on the test xfails property which by; some test formats may not be computed until the test has first been; executed.; Throws ValueError if an XFAIL line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:38,Availability,avail,available,38,# Check if any of the xfails match an available feature.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:148,Availability,avail,available,148,"""""""; isWithinFeatureLimits() -> bool. A test is within the feature limits set by run_only_tests if; 1. the test's requirements ARE satisfied by the available features; 2. the test's requirements ARE NOT satisfied after the limiting; features are removed from the available features. Throws ValueError if a REQUIRES line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:263,Availability,avail,available,263,"""""""; isWithinFeatureLimits() -> bool. A test is within the feature limits set by run_only_tests if; 1. the test's requirements ARE satisfied by the available features; 2. the test's requirements ARE NOT satisfied after the limiting; features are removed from the available features. Throws ValueError if a REQUIRES line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:333,Availability,error,error,333,"""""""; isWithinFeatureLimits() -> bool. A test is within the feature limits set by run_only_tests if; 1. the test's requirements ARE satisfied by the available features; 2. the test's requirements ARE NOT satisfied after the limiting; features are removed from the available features. Throws ValueError if a REQUIRES line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:40,Testability,test,test,40,"""""""; isWithinFeatureLimits() -> bool. A test is within the feature limits set by run_only_tests if; 1. the test's requirements ARE satisfied by the available features; 2. the test's requirements ARE NOT satisfied after the limiting; features are removed from the available features. Throws ValueError if a REQUIRES line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:107,Testability,test,test,107,"""""""; isWithinFeatureLimits() -> bool. A test is within the feature limits set by run_only_tests if; 1. the test's requirements ARE satisfied by the available features; 2. the test's requirements ARE NOT satisfied after the limiting; features are removed from the available features. Throws ValueError if a REQUIRES line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:175,Testability,test,test,175,"""""""; isWithinFeatureLimits() -> bool. A test is within the feature limits set by run_only_tests if; 1. the test's requirements ARE satisfied by the available features; 2. the test's requirements ARE NOT satisfied after the limiting; features are removed from the available features. Throws ValueError if a REQUIRES line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:171,Availability,error,error,171,"""""""; getMissingRequiredFeatures() -> list of strings. Returns a list of features from REQUIRES that are not satisfied.""; Throws ValueError if a REQUIRES line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:205,Availability,error,error,205,"""""""; getUnsupportedFeatures() -> list of strings. Returns a list of features from UNSUPPORTED that are present; in the test configuration's features.; Throws ValueError if an UNSUPPORTED line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:124,Deployability,configurat,configuration,124,"""""""; getUnsupportedFeatures() -> list of strings. Returns a list of features from UNSUPPORTED that are present; in the test configuration's features.; Throws ValueError if an UNSUPPORTED line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:124,Modifiability,config,configuration,124,"""""""; getUnsupportedFeatures() -> list of strings. Returns a list of features from UNSUPPORTED that are present; in the test configuration's features.; Throws ValueError if an UNSUPPORTED line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:119,Testability,test,test,119,"""""""; getUnsupportedFeatures() -> list of strings. Returns a list of features from UNSUPPORTED that are present; in the test configuration's features.; Throws ValueError if an UNSUPPORTED line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:141,Testability,test,test,141,"""""""; getUsedFeatures() -> list of strings. Returns a list of all features appearing in XFAIL, UNSUPPORTED and; REQUIRES annotations for this test.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:40,Testability,test,tests,40,"""""""; TestingConfig - Information on the tests inside a suite.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:57,Deployability,install,installer,57,"# Avoid Windows heuristics which try to detect potential installer; # programs (which may need to run with elevated privileges) and ask; # if the user wants to run them in that way. This heuristic may; # match for executables containing the substrings ""patch"" (which is; # a substring of ""dispatch""), ""update"", ""setup"", etc. Set this; # environment variable indicating that we want to execute them with; # the current user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:253,Deployability,patch,patch,253,"# Avoid Windows heuristics which try to detect potential installer; # programs (which may need to run with elevated privileges) and ask; # if the user wants to run them in that way. This heuristic may; # match for executables containing the substrings ""patch"" (which is; # a substring of ""dispatch""), ""update"", ""setup"", etc. Set this; # environment variable indicating that we want to execute them with; # the current user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:302,Deployability,update,update,302,"# Avoid Windows heuristics which try to detect potential installer; # programs (which may need to run with elevated privileges) and ask; # if the user wants to run them in that way. This heuristic may; # match for executables containing the substrings ""patch"" (which is; # a substring of ""dispatch""), ""update"", ""setup"", etc. Set this; # environment variable indicating that we want to execute them with; # the current user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:349,Modifiability,variab,variable,349,"# Avoid Windows heuristics which try to detect potential installer; # programs (which may need to run with elevated privileges) and ask; # if the user wants to run them in that way. This heuristic may; # match for executables containing the substrings ""patch"" (which is; # a substring of ""dispatch""), ""update"", ""setup"", etc. Set this; # environment variable indicating that we want to execute them with; # the current user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:40,Safety,detect,detect,40,"# Avoid Windows heuristics which try to detect potential installer; # programs (which may need to run with elevated privileges) and ask; # if the user wants to run them in that way. This heuristic may; # match for executables containing the substrings ""patch"" (which is; # a substring of ""dispatch""), ""update"", ""setup"", etc. Set this; # environment variable indicating that we want to execute them with; # the current user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:33,Modifiability,variab,variables,33,# Check for empty string as some variables such as LD_PRELOAD cannot be empty; # ('') for OS's such as OpenBSD.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:18,Availability,avail,available,18,# Set the default available features based on the LitConfig.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:47,Deployability,configurat,configuration,47,"""""""; load_from_path(path, litConfig). Load the configuration module at the provided path into the given config; object.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:47,Modifiability,config,configuration,47,"""""""; load_from_path(path, litConfig). Load the configuration module at the provided path into the given config; object.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:104,Modifiability,config,config,104,"""""""; load_from_path(path, litConfig). Load the configuration module at the provided path into the given config; object.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:11,Modifiability,config,config,11,# Load the config script data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:14,Modifiability,config,config,14,# Execute the config script to initialize the object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:85,Availability,error,error,85,# We allow normal system exit inside a config file to just; # return control without error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:39,Modifiability,config,config,39,# We allow normal system exit inside a config file to just; # return control without error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:62,Testability,test,tests,62,# This list is used by TestRunner.py to restrict running only tests that; # require one of the features in this list if this list is non-empty.; # Configurations can set this list to restrict the set of tests to run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:203,Testability,test,tests,203,# This list is used by TestRunner.py to restrict running only tests that; # require one of the features in this list if this list is non-empty.; # Configurations can set this list to restrict the set of tests to run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:26,Modifiability,config,config,26,"""""""finish() - Finish this config object, after loading is complete.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:47,Performance,load,loading,47,"""""""finish() - Finish this config object, after loading is complete.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:56,Modifiability,config,config,56,# FIXME: This should really only be suite in test suite config; # files. Should we distinguish them?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:45,Testability,test,test,45,# FIXME: This should really only be suite in test suite config; # files. Should we distinguish them?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:56,Modifiability,config,config,56,# FIXME: This should really only be suite in test suite config; # files. Should we distinguish them?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:45,Testability,test,test,45,# FIXME: This should really only be suite in test suite config; # files. Should we distinguish them?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:29,Deployability,configurat,configuration,29,"""""""root attribute - The root configuration for the test suite.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:29,Modifiability,config,configuration,29,"""""""root attribute - The root configuration for the test suite.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:51,Testability,test,test,51,"""""""root attribute - The root configuration for the test suite.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:174,Modifiability,config,config,174,"""""""; Helper class to indicate that the substitutions contains backreferences. This can be used as the following in lit.cfg to mark subsitutions as having; back-references::. config.substutions.append(('\b[^ ]*.cpp', SubstituteCaptures('\0.txt'))). """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:26,Availability,error,error,26,"""""""; A script had a fatal error such that there's no point in retrying. The; message has not been emitted on stdout or stderr but is instead included in; this exception.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:77,Integrability,message,message,77,"""""""; A script had a fatal error such that there's no point in retrying. The; message has not been emitted on stdout or stderr but is instead included in; this exception.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:92,Deployability,pipeline,pipeline,92,"# A regex that matches %dbg(ARG), which lit inserts at the beginning of each; # run command pipeline such that ARG specifies the pipeline's source line; # number. lit later expands each %dbg(ARG) to a command that behaves as a null; # command in the target shell so that the line number is seen in lit's verbose; # mode.; #; # This regex captures ARG. ARG must not contain a right parenthesis, which; # terminates %dbg. ARG must not contain quotes, in which ARG might be enclosed; # during expansion.; #; # COMMAND that follows %dbg(ARG) is also captured. COMMAND can be; # empty as a result of conditinal substitution.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:129,Deployability,pipeline,pipeline,129,"# A regex that matches %dbg(ARG), which lit inserts at the beginning of each; # run command pipeline such that ARG specifies the pipeline's source line; # number. lit later expands each %dbg(ARG) to a command that behaves as a null; # command in the target shell so that the line number is seen in lit's verbose; # mode.; #; # This regex captures ARG. ARG must not contain a right parenthesis, which; # terminates %dbg. ARG must not contain quotes, in which ARG might be enclosed; # during expansion.; #; # COMMAND that follows %dbg(ARG) is also captured. COMMAND can be; # empty as a result of conditinal substitution.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:82,Modifiability,variab,variables,82,"""""""Mutable shell environment containing things like CWD and env vars. Environment variables are not implemented, but cwd tracking is. In addition,; we maintain a dir stack for pushd/popd.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:46,Safety,timeout,timeout,46,"""""""; Object used to helper manage enforcing a timeout in; _executeShCmd(). It is passed through recursive calls; to collect processes that have been executed so that when; the timeout happens they can be killed.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:176,Safety,timeout,timeout,176,"""""""; Object used to helper manage enforcing a timeout in; _executeShCmd(). It is passed through recursive calls; to collect processes that have been executed so that when; the timeout happens they can be killed.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:36,Performance,concurren,concurrent,36,# This lock will be used to protect concurrent access; # to _procs and _doneKillPass,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:47,Security,access,access,47,# This lock will be used to protect concurrent access; # to _procs and _doneKillPass,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:204,Usability,clear,clearer,204,# Avoid re-entering the lock by finding out if kill needs to be run; # again here but call it if necessary once we have left the lock.; # We could use a reentrant lock here instead but this code seems; # clearer to me.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:180,Safety,timeout,timeout,180,"# The initial call to _kill() from the timer thread already happened so; # we need to call it again from this thread, otherwise this process; # will be left to run even though the timeout was already hit",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:66,Safety,timeout,timeout,66,# Do some late initialisation that's only needed; # if there is a timeout set,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:28,Usability,clear,clear,28,# Python2 doesn't have list.clear(),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:48,Safety,timeout,timeout,48,"""""""; Wrapper around _executeShCmd that handles; timeout; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:30,Safety,timeout,timeout,30,# Use the helper even when no timeout is required to make; # other code simpler (i.e. avoid bunch of ``!= None`` checks),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:86,Safety,avoid,avoid,86,# Use the helper even when no timeout is required to make; # other code simpler (i.e. avoid bunch of ``!= None`` checks),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:72,Usability,simpl,simpler,72,# Use the helper even when no timeout is required to make; # other code simpler (i.e. avoid bunch of ``!= None`` checks),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:7,Testability,log,logic,7,# This logic differs from upstream list2cmdline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:45,Modifiability,variab,variable,45,"""""""executeBuiltinExport - Set an environment variable.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:26,Availability,echo,echo,26,"""""""Interpret a redirected echo or @echo command""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:35,Availability,echo,echo,35,"""""""Interpret a redirected echo or @echo command""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:32,Availability,echo,echo,32,# Some tests have un-redirected echo commands to help debug test failures.; # Buffer our output and return it to the caller.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:65,Availability,failure,failures,65,# Some tests have un-redirected echo commands to help debug test failures.; # Buffer our output and return it to the caller.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:7,Testability,test,tests,7,# Some tests have un-redirected echo commands to help debug test failures.; # Buffer our output and return it to the caller.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:60,Testability,test,test,60,# Some tests have un-redirected echo commands to help debug test failures.; # Buffer our output and return it to the caller.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:77,Availability,echo,echo,77,"# Reopen stdout in binary mode to avoid CRLF translation. The versions; # of echo we are replacing on Windows all emit plain LF, and the LLVM; # tests now depend on this.; # When we open as binary, however, this also means that we have to write; # 'bytes' objects to stdout instead of 'str' objects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:155,Integrability,depend,depend,155,"# Reopen stdout in binary mode to avoid CRLF translation. The versions; # of echo we are replacing on Windows all emit plain LF, and the LLVM; # tests now depend on this.; # When we open as binary, however, this also means that we have to write; # 'bytes' objects to stdout instead of 'str' objects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:34,Safety,avoid,avoid,34,"# Reopen stdout in binary mode to avoid CRLF translation. The versions; # of echo we are replacing on Windows all emit plain LF, and the LLVM; # tests now depend on this.; # When we open as binary, however, this also means that we have to write; # 'bytes' objects to stdout instead of 'str' objects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:145,Testability,test,tests,145,"# Reopen stdout in binary mode to avoid CRLF translation. The versions; # of echo we are replacing on Windows all emit plain LF, and the LLVM; # tests now depend on this.; # When we open as binary, however, this also means that we have to write; # 'bytes' objects to stdout instead of 'str' objects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:12,Availability,echo,echo,12,"# Implement echo flags. We only support -e and -n, and not yet in; # combination. We have to ignore unknown flags, because `echo ""-D FOO""`; # prints the dash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:124,Availability,echo,echo,124,"# Implement echo flags. We only support -e and -n, and not yet in; # combination. We have to ignore unknown flags, because `echo ""-D FOO""`; # prints the dash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:22,Security,access,access,22,# NOTE: use ctypes to access `SHFileOperationsW` on Windows to; # use the NT style path to get access to long file paths which; # cannot be removed otherwise.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:95,Security,access,access,95,# NOTE: use ctypes to access `SHFileOperationsW` on Windows to; # use the NT style path to get access to long file paths which; # cannot be removed otherwise.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:35,Safety,timeout,timeout,35,# Prevent further recursion if the timeout has been hit; # as we should try avoid launching more processes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:76,Safety,avoid,avoid,76,# Prevent further recursion if the timeout has been hit; # as we should try avoid launching more processes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:5,Safety,avoid,avoid,5,"# To avoid deadlock, we use a single stderr stream for piped; # output. This is null until we have seen some output using; # stderr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:115,Deployability,pipeline,pipeline,115,"# Create a copy of the global environment and modify it for; # this one command. There might be multiple envs in a pipeline,; # and there might be multiple envs in a command (usually when; # one comes from a substitution):; # env FOO=1 llc < %s | env BAR=2 llvm-mc | FileCheck %s; # env FOO=1 %{another_env_plus_cmd} | FileCheck %s",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:44,Availability,echo,echo,44,"# Handle in-process builtins.; #; # Handle ""echo"" as a builtin if it is not part of a pipeline. This; # greatly speeds up tests that construct input files by repeatedly; # echo-appending to a file.; # FIXME: Standardize on the builtin echo implementation. We can use a; # temporary file to sidestep blocking pipe write issues.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:172,Availability,echo,echo-appending,172,"# Handle in-process builtins.; #; # Handle ""echo"" as a builtin if it is not part of a pipeline. This; # greatly speeds up tests that construct input files by repeatedly; # echo-appending to a file.; # FIXME: Standardize on the builtin echo implementation. We can use a; # temporary file to sidestep blocking pipe write issues.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:235,Availability,echo,echo,235,"# Handle in-process builtins.; #; # Handle ""echo"" as a builtin if it is not part of a pipeline. This; # greatly speeds up tests that construct input files by repeatedly; # echo-appending to a file.; # FIXME: Standardize on the builtin echo implementation. We can use a; # temporary file to sidestep blocking pipe write issues.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:86,Deployability,pipeline,pipeline,86,"# Handle in-process builtins.; #; # Handle ""echo"" as a builtin if it is not part of a pipeline. This; # greatly speeds up tests that construct input files by repeatedly; # echo-appending to a file.; # FIXME: Standardize on the builtin echo implementation. We can use a; # temporary file to sidestep blocking pipe write issues.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:122,Testability,test,tests,122,"# Handle in-process builtins.; #; # Handle ""echo"" as a builtin if it is not part of a pipeline. This; # greatly speeds up tests that construct input files by repeatedly; # echo-appending to a file.; # FIXME: Standardize on the builtin echo implementation. We can use a; # temporary file to sidestep blocking pipe write issues.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:63,Safety,safe,safe,63,"# env calling an in-process builtin is useless, so we take the safe; # approach of complaining.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:384,Modifiability,variab,variables,384,"# We had to search through the 'not' commands to find all the 'env'; # commands and any other in-process builtin command. We don't want to; # reimplement 'not' and its '--crash' here, so just push all 'not'; # commands back to be called as external commands. Because this; # approach effectively moves all 'env' commands up front, it relies on; # the assumptions that (1) environment variables are not intended to be; # relevant to 'not' commands and (2) the 'env' command should always; # blindly pass along the status it receives from any command it calls.; # For plain negations, either 'not' without '--crash', or the shell; # operator '!', leave them out from the command to execute and; # invert the result code afterwards.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:86,Deployability,release,release,86,"# Explicitly close any redirected files. We need to do this now because we; # need to release any handles we may have on the temporary files (important; # on Win32, for example). Since we have already spawned the subprocess, our; # handles have already been transferred so we do not need them anymore.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:43,Deployability,pipeline,pipeline,43,# Take the last failing exit code from the pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:55,Safety,timeout,timeoutInfo,55,"# Always either returns the tuple (out, err, exitCode, timeoutInfo) or raises a; # ScriptFatal exception.; #; # If debug is True (the normal lit behavior), err is empty, and out contains an; # execution trace, including stdout and stderr shown per command executed.; #; # If debug is False (set by some custom lit test formats that call this; # function), out contains only stdout from the script, err contains only stderr; # from the script, and there is no execution trace.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:314,Testability,test,test,314,"# Always either returns the tuple (out, err, exitCode, timeoutInfo) or raises a; # ScriptFatal exception.; #; # If debug is True (the normal lit behavior), err is empty, and out contains an; # execution trace, including stdout and stderr shown per command executed.; #; # If debug is False (set by some custom lit test formats that call this; # function), out contains only stdout from the script, err contains only stderr; # from the script, and there is no execution trace.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:187,Integrability,message,message,187,"# Within lit, we try to always add '%dbg(...)' to command lines in order; # to maximize debuggability. However, custom lit test formats might not; # always add it, so add a generic debug message in that case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:123,Testability,test,test,123,"# Within lit, we try to always add '%dbg(...)' to command lines in order; # to maximize debuggability. However, custom lit test formats might not; # always add it, so add a generic debug message in that case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:22,Availability,echo,echo,22,"# The purpose of an ""@echo"" command is merely to add a debugging message; # directly to lit's output. It is used internally by lit's internal; # shell and is not currently documented for use in lit tests. However,; # if someone misuses it (e.g., both ""echo"" and ""@echo"" complain about; # stdin redirection), produce the normal execution trace to facilitate; # debugging.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:252,Availability,echo,echo,252,"# The purpose of an ""@echo"" command is merely to add a debugging message; # directly to lit's output. It is used internally by lit's internal; # shell and is not currently documented for use in lit tests. However,; # if someone misuses it (e.g., both ""echo"" and ""@echo"" complain about; # stdin redirection), produce the normal execution trace to facilitate; # debugging.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:264,Availability,echo,echo,264,"# The purpose of an ""@echo"" command is merely to add a debugging message; # directly to lit's output. It is used internally by lit's internal; # shell and is not currently documented for use in lit tests. However,; # if someone misuses it (e.g., both ""echo"" and ""@echo"" complain about; # stdin redirection), produce the normal execution trace to facilitate; # debugging.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:65,Integrability,message,message,65,"# The purpose of an ""@echo"" command is merely to add a debugging message; # directly to lit's output. It is used internally by lit's internal; # shell and is not currently documented for use in lit tests. However,; # if someone misuses it (e.g., both ""echo"" and ""@echo"" complain about; # stdin redirection), produce the normal execution trace to facilitate; # debugging.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:198,Testability,test,tests,198,"# The purpose of an ""@echo"" command is merely to add a debugging message; # directly to lit's output. It is used internally by lit's internal; # shell and is not currently documented for use in lit tests. However,; # if someone misuses it (e.g., both ""echo"" and ""@echo"" complain about; # stdin redirection), produce the normal execution trace to facilitate; # debugging.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:11,Availability,error,error,11,# Show the error conditions:,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:58,Availability,echo,echo,58,"# Echo the debugging diagnostic to stderr.; #; # For that echo command, use 'set' commands to suppress the; # shell's execution trace, which would just add noise. Suppress; # the shell's execution trace for the 'set' commands by; # redirecting their stderr to /dev/null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:90,Deployability,integrat,integrated,90,"""""""; parseIntegratedTestScriptCommands(source_path) -> commands. Parse the commands in an integrated test script file into a list of; (line_number, command_type, line).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:90,Integrability,integrat,integrated,90,"""""""; parseIntegratedTestScriptCommands(source_path) -> commands. Parse the commands in an integrated test script file into a list of; (line_number, command_type, line).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:101,Testability,test,test,101,"""""""; parseIntegratedTestScriptCommands(source_path) -> commands. Parse the commands in an integrated test script file into a list of; (line_number, command_type, line).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:14,Deployability,update,updated,14,# Compute the updated line number by counting the intervening; # newlines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:142,Safety,avoid,avoid,142,"# Convert the keyword and line to UTF-8 strings and yield the; # command. Note that we take care to return regular strings in; # Python 2, to avoid other code having to differentiate between the; # str and unicode types.; #; # Opening the file in binary mode prevented Windows \r newline; # characters from being converted to Unix \n newlines, so manually; # strip those from the yielded lines.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:62,Testability,test,test,62,"""""""Get the temporary location, this is always relative to the test suite; root, not test source root.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:84,Testability,test,test,84,"""""""Get the temporary location, this is always relative to the test suite; root, not test source root.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:111,Safety,avoid,avoid,111,"# realpath variants; # Windows paths with substitute drives are not expanded by default; # as they are used to avoid MAX_PATH issues, but sometimes we do; # need the fully expanded path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:12,Integrability,interface,interface,12,"""""""; Common interface for lit directives for which any lit substitutions must be; expanded to produce the shell script. It includes directives (e.g., 'RUN:'); specifying shell commands that might have lit substitutions to be expanded.; It also includes lit directives (e.g., 'DEFINE:') that adjust substitutions. start_line_number: The directive's starting line number.; end_line_number: The directive's ending line number, which is; start_line_number if the directive has no line continuations.; keyword: The keyword that specifies the directive. For example, 'RUN:'.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:70,Availability,echo,echo,70,"""""""; A lit directive taking a shell command line. For example,; 'RUN: echo hello world'. command: The content accumulated so far from the directive and its; continuation lines.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:615,Availability,error,error,615,"# Check the substitution's name.; #; # Do not extend this to permit '.' or any sequence that's special in a; # python pattern. We could escape that automatically for; # DEFINE/REDEFINE directives in test files. However, lit configuration; # file authors would still have to remember to escape them manually in; # substitution names but not in values. Moreover, the manually chosen; # and automatically chosen escape sequences would have to be consistent; # (e.g., '\.' vs. '[.]') in order for REDEFINE to successfully redefine; # a substitution previously defined by a lit configuration file. All; # this seems too error prone and confusing to be worthwhile. If you; # want your name to express structure, use ':' instead of '.'.; #; # Actually, '{' and '}' are special if they contain only digits possibly; # separated by a comma. Requiring a leading letter avoids that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:224,Deployability,configurat,configuration,224,"# Check the substitution's name.; #; # Do not extend this to permit '.' or any sequence that's special in a; # python pattern. We could escape that automatically for; # DEFINE/REDEFINE directives in test files. However, lit configuration; # file authors would still have to remember to escape them manually in; # substitution names but not in values. Moreover, the manually chosen; # and automatically chosen escape sequences would have to be consistent; # (e.g., '\.' vs. '[.]') in order for REDEFINE to successfully redefine; # a substitution previously defined by a lit configuration file. All; # this seems too error prone and confusing to be worthwhile. If you; # want your name to express structure, use ':' instead of '.'.; #; # Actually, '{' and '}' are special if they contain only digits possibly; # separated by a comma. Requiring a leading letter avoids that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:573,Deployability,configurat,configuration,573,"# Check the substitution's name.; #; # Do not extend this to permit '.' or any sequence that's special in a; # python pattern. We could escape that automatically for; # DEFINE/REDEFINE directives in test files. However, lit configuration; # file authors would still have to remember to escape them manually in; # substitution names but not in values. Moreover, the manually chosen; # and automatically chosen escape sequences would have to be consistent; # (e.g., '\.' vs. '[.]') in order for REDEFINE to successfully redefine; # a substitution previously defined by a lit configuration file. All; # this seems too error prone and confusing to be worthwhile. If you; # want your name to express structure, use ':' instead of '.'.; #; # Actually, '{' and '}' are special if they contain only digits possibly; # separated by a comma. Requiring a leading letter avoids that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:46,Modifiability,extend,extend,46,"# Check the substitution's name.; #; # Do not extend this to permit '.' or any sequence that's special in a; # python pattern. We could escape that automatically for; # DEFINE/REDEFINE directives in test files. However, lit configuration; # file authors would still have to remember to escape them manually in; # substitution names but not in values. Moreover, the manually chosen; # and automatically chosen escape sequences would have to be consistent; # (e.g., '\.' vs. '[.]') in order for REDEFINE to successfully redefine; # a substitution previously defined by a lit configuration file. All; # this seems too error prone and confusing to be worthwhile. If you; # want your name to express structure, use ':' instead of '.'.; #; # Actually, '{' and '}' are special if they contain only digits possibly; # separated by a comma. Requiring a leading letter avoids that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:224,Modifiability,config,configuration,224,"# Check the substitution's name.; #; # Do not extend this to permit '.' or any sequence that's special in a; # python pattern. We could escape that automatically for; # DEFINE/REDEFINE directives in test files. However, lit configuration; # file authors would still have to remember to escape them manually in; # substitution names but not in values. Moreover, the manually chosen; # and automatically chosen escape sequences would have to be consistent; # (e.g., '\.' vs. '[.]') in order for REDEFINE to successfully redefine; # a substitution previously defined by a lit configuration file. All; # this seems too error prone and confusing to be worthwhile. If you; # want your name to express structure, use ':' instead of '.'.; #; # Actually, '{' and '}' are special if they contain only digits possibly; # separated by a comma. Requiring a leading letter avoids that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:573,Modifiability,config,configuration,573,"# Check the substitution's name.; #; # Do not extend this to permit '.' or any sequence that's special in a; # python pattern. We could escape that automatically for; # DEFINE/REDEFINE directives in test files. However, lit configuration; # file authors would still have to remember to escape them manually in; # substitution names but not in values. Moreover, the manually chosen; # and automatically chosen escape sequences would have to be consistent; # (e.g., '\.' vs. '[.]') in order for REDEFINE to successfully redefine; # a substitution previously defined by a lit configuration file. All; # this seems too error prone and confusing to be worthwhile. If you; # want your name to express structure, use ':' instead of '.'.; #; # Actually, '{' and '}' are special if they contain only digits possibly; # separated by a comma. Requiring a leading letter avoids that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:859,Safety,avoid,avoids,859,"# Check the substitution's name.; #; # Do not extend this to permit '.' or any sequence that's special in a; # python pattern. We could escape that automatically for; # DEFINE/REDEFINE directives in test files. However, lit configuration; # file authors would still have to remember to escape them manually in; # substitution names but not in values. Moreover, the manually chosen; # and automatically chosen escape sequences would have to be consistent; # (e.g., '\.' vs. '[.]') in order for REDEFINE to successfully redefine; # a substitution previously defined by a lit configuration file. All; # this seems too error prone and confusing to be worthwhile. If you; # want your name to express structure, use ':' instead of '.'.; #; # Actually, '{' and '}' are special if they contain only digits possibly; # separated by a comma. Requiring a leading letter avoids that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:199,Testability,test,test,199,"# Check the substitution's name.; #; # Do not extend this to permit '.' or any sequence that's special in a; # python pattern. We could escape that automatically for; # DEFINE/REDEFINE directives in test files. However, lit configuration; # file authors would still have to remember to escape them manually in; # substitution names but not in values. Moreover, the manually chosen; # and automatically chosen escape sequences would have to be consistent; # (e.g., '\.' vs. '[.]') in order for REDEFINE to successfully redefine; # a substitution previously defined by a lit configuration file. All; # this seems too error prone and confusing to be worthwhile. If you; # want your name to express structure, use ':' instead of '.'.; #; # Actually, '{' and '}' are special if they contain only digits possibly; # separated by a comma. Requiring a leading letter avoids that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:412,Availability,error,error,412,"""""""; Apply substitutions to the script. Allow full regular expression syntax.; Replace each matching occurrence of regular expression pattern a with; substitution b in line ln. If a substitution expands into another substitution, it is expanded; recursively until the line has no more expandable substitutions. If; the line can still can be substituted after being substituted; `recursion_limit` times, it is an error. If the `recursion_limit` is; `None` (the default), no recursive substitution is performed at all.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:499,Performance,perform,performed,499,"""""""; Apply substitutions to the script. Allow full regular expression syntax.; Replace each matching occurrence of regular expression pattern a with; substitution b in line ln. If a substitution expands into another substitution, it is expanded; recursively until the line has no more expandable substitutions. If; the line can still can be substituted after being substituted; `recursion_limit` times, it is an error. If the `recursion_limit` is; `None` (the default), no recursive substitution is performed at all.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:16,Safety,avoid,avoid,16,# early exit to avoid wasting time on lines without; # conditional substitutions,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:34,Performance,cache,cache,34,"# re.compile() has a built-in LRU cache with 512 entries. In some; # test suites lit ends up thrashing that cache, which made e.g.; # check-llvm run 50% slower. Use an explicit, unbounded cache; # to prevent that from happening. Since lit is fairly; # short-lived, since the set of substitutions is fairly small, and; # since thrashing has such bad consequences, not bounding the cache; # seems reasonable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:108,Performance,cache,cache,108,"# re.compile() has a built-in LRU cache with 512 entries. In some; # test suites lit ends up thrashing that cache, which made e.g.; # check-llvm run 50% slower. Use an explicit, unbounded cache; # to prevent that from happening. Since lit is fairly; # short-lived, since the set of substitutions is fairly small, and; # since thrashing has such bad consequences, not bounding the cache; # seems reasonable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:188,Performance,cache,cache,188,"# re.compile() has a built-in LRU cache with 512 entries. In some; # test suites lit ends up thrashing that cache, which made e.g.; # check-llvm run 50% slower. Use an explicit, unbounded cache; # to prevent that from happening. Since lit is fairly; # short-lived, since the set of substitutions is fairly small, and; # since thrashing has such bad consequences, not bounding the cache; # seems reasonable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:380,Performance,cache,cache,380,"# re.compile() has a built-in LRU cache with 512 entries. In some; # test suites lit ends up thrashing that cache, which made e.g.; # check-llvm run 50% slower. Use an explicit, unbounded cache; # to prevent that from happening. Since lit is fairly; # short-lived, since the set of substitutions is fairly small, and; # since thrashing has such bad consequences, not bounding the cache; # seems reasonable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:69,Testability,test,test,69,"# re.compile() has a built-in LRU cache with 512 entries. In some; # test suites lit ends up thrashing that cache, which made e.g.; # check-llvm run 50% slower. Use an explicit, unbounded cache; # to prevent that from happening. Since lit is fairly; # short-lived, since the set of substitutions is fairly small, and; # since thrashing has such bad consequences, not bounding the cache; # seems reasonable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:49,Deployability,integrat,integrated,49,"""""""; An enumeration representing the style of an integrated test keyword or; command. TAG: A keyword taking no value. Ex 'END.'; COMMAND: A keyword taking a list of shell commands. Ex 'RUN:'; LIST: A keyword taking a comma-separated list of values.; SPACE_LIST: A keyword taking a space-separated list of values.; BOOLEAN_EXPR: A keyword taking a comma-separated list of; boolean expressions. Ex 'XFAIL:'; INTEGER: A keyword taking a single integer. Ex 'ALLOW_RETRIES:'; CUSTOM: A keyword with custom parsing semantics.; DEFINE: A keyword taking a new lit substitution definition. Ex; 'DEFINE: %{name}=value'; REDEFINE: A keyword taking a lit substitution redefinition. Ex; 'REDEFINE: %{name}=value'; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:49,Integrability,integrat,integrated,49,"""""""; An enumeration representing the style of an integrated test keyword or; command. TAG: A keyword taking no value. Ex 'END.'; COMMAND: A keyword taking a list of shell commands. Ex 'RUN:'; LIST: A keyword taking a comma-separated list of values.; SPACE_LIST: A keyword taking a space-separated list of values.; BOOLEAN_EXPR: A keyword taking a comma-separated list of; boolean expressions. Ex 'XFAIL:'; INTEGER: A keyword taking a single integer. Ex 'ALLOW_RETRIES:'; CUSTOM: A keyword with custom parsing semantics.; DEFINE: A keyword taking a new lit substitution definition. Ex; 'DEFINE: %{name}=value'; REDEFINE: A keyword taking a lit substitution redefinition. Ex; 'REDEFINE: %{name}=value'; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:60,Testability,test,test,60,"""""""; An enumeration representing the style of an integrated test keyword or; command. TAG: A keyword taking no value. Ex 'END.'; COMMAND: A keyword taking a list of shell commands. Ex 'RUN:'; LIST: A keyword taking a comma-separated list of values.; SPACE_LIST: A keyword taking a space-separated list of values.; BOOLEAN_EXPR: A keyword taking a comma-separated list of; boolean expressions. Ex 'XFAIL:'; INTEGER: A keyword taking a single integer. Ex 'ALLOW_RETRIES:'; CUSTOM: A keyword with custom parsing semantics.; DEFINE: A keyword taking a new lit substitution definition. Ex; 'DEFINE: %{name}=value'; REDEFINE: A keyword taking a lit substitution redefinition. Ex; 'REDEFINE: %{name}=value'; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:33,Deployability,integrat,integrated,33,"""""""A parser for LLVM/Clang style integrated test scripts. keyword: The keyword to parse for. It must end in either '.' or ':'.; kind: An value of ParserKind.; parser: A custom parser. This value may only be specified with; ParserKind.CUSTOM.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:33,Integrability,integrat,integrated,33,"""""""A parser for LLVM/Clang style integrated test scripts. keyword: The keyword to parse for. It must end in either '.' or ':'.; kind: An value of ParserKind.; parser: A custom parser. This value may only be specified with; ParserKind.CUSTOM.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:44,Testability,test,test,44,"""""""A parser for LLVM/Clang style integrated test scripts. keyword: The keyword to parse for. It must end in either '.' or ':'.; kind: An value of ParserKind.; parser: A custom parser. This value may only be specified with; ParserKind.CUSTOM.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:84,Deployability,pipeline,pipeline,84,"# Collapse lines with trailing '\\', or add line with line number to; # start a new pipeline.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:44,Deployability,integrat,integrated,44,"""""""_parseKeywords. Scan an LLVM/Clang style integrated test script and extract all the lines; pertaining to a special parser. This includes 'RUN', 'XFAIL', 'REQUIRES',; 'UNSUPPORTED', 'ALLOW_RETRIES', 'END', 'DEFINE', 'REDEFINE', as well as; other specified custom parsers. Returns a dictionary mapping each custom parser to its value after; parsing the test.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:44,Integrability,integrat,integrated,44,"""""""_parseKeywords. Scan an LLVM/Clang style integrated test script and extract all the lines; pertaining to a special parser. This includes 'RUN', 'XFAIL', 'REQUIRES',; 'UNSUPPORTED', 'ALLOW_RETRIES', 'END', 'DEFINE', 'REDEFINE', as well as; other specified custom parsers. Returns a dictionary mapping each custom parser to its value after; parsing the test.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:55,Testability,test,test,55,"""""""_parseKeywords. Scan an LLVM/Clang style integrated test script and extract all the lines; pertaining to a special parser. This includes 'RUN', 'XFAIL', 'REQUIRES',; 'UNSUPPORTED', 'ALLOW_RETRIES', 'END', 'DEFINE', 'REDEFINE', as well as; other specified custom parsers. Returns a dictionary mapping each custom parser to its value after; parsing the test.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:354,Testability,test,test,354,"""""""_parseKeywords. Scan an LLVM/Clang style integrated test script and extract all the lines; pertaining to a special parser. This includes 'RUN', 'XFAIL', 'REQUIRES',; 'UNSUPPORTED', 'ALLOW_RETRIES', 'END', 'DEFINE', 'REDEFINE', as well as; other specified custom parsers. Returns a dictionary mapping each custom parser to its value after; parsing the test.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:14,Testability,test,test,14,# Collect the test lines from the script.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:56,Deployability,integrat,integrated,56,"""""""parseIntegratedTestScript - Scan an LLVM/Clang style integrated test; script and extract the lines to 'RUN' as well as 'XFAIL', 'REQUIRES',; 'UNSUPPORTED' and 'ALLOW_RETRIES' information into the given test. If additional parsers are specified then the test is also scanned for the; keywords they specify and all matches are passed to the custom parser. If 'require_script' is False an empty script; may be returned. This can be used for test formats where the actual script; is optional or ignored.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:56,Integrability,integrat,integrated,56,"""""""parseIntegratedTestScript - Scan an LLVM/Clang style integrated test; script and extract the lines to 'RUN' as well as 'XFAIL', 'REQUIRES',; 'UNSUPPORTED' and 'ALLOW_RETRIES' information into the given test. If additional parsers are specified then the test is also scanned for the; keywords they specify and all matches are passed to the custom parser. If 'require_script' is False an empty script; may be returned. This can be used for test formats where the actual script; is optional or ignored.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:67,Testability,test,test,67,"""""""parseIntegratedTestScript - Scan an LLVM/Clang style integrated test; script and extract the lines to 'RUN' as well as 'XFAIL', 'REQUIRES',; 'UNSUPPORTED' and 'ALLOW_RETRIES' information into the given test. If additional parsers are specified then the test is also scanned for the; keywords they specify and all matches are passed to the custom parser. If 'require_script' is False an empty script; may be returned. This can be used for test formats where the actual script; is optional or ignored.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:205,Testability,test,test,205,"""""""parseIntegratedTestScript - Scan an LLVM/Clang style integrated test; script and extract the lines to 'RUN' as well as 'XFAIL', 'REQUIRES',; 'UNSUPPORTED' and 'ALLOW_RETRIES' information into the given test. If additional parsers are specified then the test is also scanned for the; keywords they specify and all matches are passed to the custom parser. If 'require_script' is False an empty script; may be returned. This can be used for test formats where the actual script; is optional or ignored.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:256,Testability,test,test,256,"""""""parseIntegratedTestScript - Scan an LLVM/Clang style integrated test; script and extract the lines to 'RUN' as well as 'XFAIL', 'REQUIRES',; 'UNSUPPORTED' and 'ALLOW_RETRIES' information into the given test. If additional parsers are specified then the test is also scanned for the; keywords they specify and all matches are passed to the custom parser. If 'require_script' is False an empty script; may be returned. This can be used for test formats where the actual script; is optional or ignored.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:441,Testability,test,test,441,"""""""parseIntegratedTestScript - Scan an LLVM/Clang style integrated test; script and extract the lines to 'RUN' as well as 'XFAIL', 'REQUIRES',; 'UNSUPPORTED' and 'ALLOW_RETRIES' information into the given test. If additional parsers are specified then the test is also scanned for the; keywords they specify and all matches are passed to the custom parser. If 'require_script' is False an empty script; may be returned. This can be used for test formats where the actual script; is optional or ignored.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:12,Testability,test,test,12,# Parse the test sources and extract test properties,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:37,Testability,test,test,37,# Parse the test sources and extract test properties,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:48,Safety,timeout,timeoutInfo,48,"# Always returns the tuple (out, err, exitCode, timeoutInfo, status).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:14,Testability,test,test,14,"# Extract the test case name from the test object, and remove the; # file extension.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:38,Testability,test,test,38,"# Extract the test case name from the test object, and remove the; # file extension.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:16,Testability,test,tests,16,# Re-run failed tests up to test.allowed_retries times.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:28,Testability,test,test,28,# Re-run failed tests up to test.allowed_retries times.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:23,Testability,test,test,23,"# If we had to run the test more than once, count it as a flaky pass. These; # will be printed separately in the test summary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:113,Testability,test,test,113,"# If we had to run the test more than once, count it as a flaky pass. These; # will be printed separately in the test summary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:18,Testability,log,log,18,# Form the output log.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:114,Availability,error,error,114,"# On Windows with more than 60 processes, multiprocessing's call to; # _winapi.WaitForMultipleObjects() prints an error and lit hangs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:42,Performance,race condition,race condition,42,"# ignore EEXIST, which may occur during a race condition",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:101,Modifiability,variab,variable,101,"""""""which(command, [paths]) - Look up the given command in the paths string; (or the PATH environment variable, if unspecified).""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:549,Availability,error,error,549,"""""""Execute command ``command`` (list of arguments or string) with. * working directory ``cwd`` (str), use None to use the current; working directory; * environment ``env`` (dict), use None for none; * Input to the command ``input`` (str), use string to pass; no input.; * Max execution time ``timeout`` (int) seconds. Use 0 for no timeout.; * ``redirect_stderr`` (bool), use True if redirect stderr to stdout. Returns a tuple (out, err, exitCode) where; * ``out`` (str) is the standard output of running the command; * ``err`` (str) is the standard error of running the command; * ``exitCode`` (int) is the exitCode of running the command. If the timeout is hit an ``ExecuteCommandTimeoutException``; is raised. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:293,Safety,timeout,timeout,293,"""""""Execute command ``command`` (list of arguments or string) with. * working directory ``cwd`` (str), use None to use the current; working directory; * environment ``env`` (dict), use None for none; * Input to the command ``input`` (str), use string to pass; no input.; * Max execution time ``timeout`` (int) seconds. Use 0 for no timeout.; * ``redirect_stderr`` (bool), use True if redirect stderr to stdout. Returns a tuple (out, err, exitCode) where; * ``out`` (str) is the standard output of running the command; * ``err`` (str) is the standard error of running the command; * ``exitCode`` (int) is the exitCode of running the command. If the timeout is hit an ``ExecuteCommandTimeoutException``; is raised. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:331,Safety,timeout,timeout,331,"""""""Execute command ``command`` (list of arguments or string) with. * working directory ``cwd`` (str), use None to use the current; working directory; * environment ``env`` (dict), use None for none; * Input to the command ``input`` (str), use string to pass; no input.; * Max execution time ``timeout`` (int) seconds. Use 0 for no timeout.; * ``redirect_stderr`` (bool), use True if redirect stderr to stdout. Returns a tuple (out, err, exitCode) where; * ``out`` (str) is the standard output of running the command; * ``err`` (str) is the standard error of running the command; * ``exitCode`` (int) is the exitCode of running the command. If the timeout is hit an ``ExecuteCommandTimeoutException``; is raised. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:647,Safety,timeout,timeout,647,"""""""Execute command ``command`` (list of arguments or string) with. * working directory ``cwd`` (str), use None to use the current; working directory; * environment ``env`` (dict), use None for none; * Input to the command ``input`` (str), use string to pass; no input.; * Max execution time ``timeout`` (int) seconds. Use 0 for no timeout.; * ``redirect_stderr`` (bool), use True if redirect stderr to stdout. Returns a tuple (out, err, exitCode) where; * ``out`` (str) is the standard output of running the command; * ``err`` (str) is the standard error of running the command; * ``exitCode`` (int) is the exitCode of running the command. If the timeout is hit an ``ExecuteCommandTimeoutException``; is raised. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:37,Availability,error,error,37,"""""""; Returns a tuple (<supported> , <error message>); where; `<supported>` is True if `killProcessAndChildren()` is supported on; the current host, returns False otherwise.; `<error message>` is an empty string if `<supported>` is True,; otherwise is contains a string describing why the function is; not supported.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:176,Availability,error,error,176,"""""""; Returns a tuple (<supported> , <error message>); where; `<supported>` is True if `killProcessAndChildren()` is supported on; the current host, returns False otherwise.; `<error message>` is an empty string if `<supported>` is True,; otherwise is contains a string describing why the function is; not supported.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:43,Integrability,message,message,43,"""""""; Returns a tuple (<supported> , <error message>); where; `<supported>` is True if `killProcessAndChildren()` is supported on; the current host, returns False otherwise.; `<error message>` is an empty string if `<supported>` is True,; otherwise is contains a string describing why the function is; not supported.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:182,Integrability,message,message,182,"""""""; Returns a tuple (<supported> , <error message>); where; `<supported>` is True if `killProcessAndChildren()` is supported on; the current host, returns False otherwise.; `<error message>` is an empty string if `<supported>` is True,; otherwise is contains a string describing why the function is; not supported.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:302,Integrability,depend,dependency,302,"""""""This function kills a process with ``pid`` and all its running children; (recursively). It is currently implemented using the psutil module on some; platforms which provides a simple platform neutral implementation. TODO: Reimplement this without using psutil on all platforms so we can; remove our dependency on it. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:179,Usability,simpl,simple,179,"""""""This function kills a process with ``pid`` and all its running children; (recursively). It is currently implemented using the psutil module on some; platforms which provides a simple platform neutral implementation. TODO: Reimplement this without using psutil on all platforms so we can; remove our dependency on it. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py:263,Energy Efficiency,reduce,reduces,263,"""""""; The functions in this module are meant to run on a separate worker process.; Exception: in single process mode _execute is called directly. For efficiency, we copy all data needed to execute all tests into each worker; and store it in global variables. This reduces the cost of each task.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/worker.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py:247,Modifiability,variab,variables,247,"""""""; The functions in this module are meant to run on a separate worker process.; Exception: in single process mode _execute is called directly. For efficiency, we copy all data needed to execute all tests into each worker; and store it in global variables. This reduces the cost of each task.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/worker.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py:200,Testability,test,tests,200,"""""""; The functions in this module are meant to run on a separate worker process.; Exception: in single process mode _execute is called directly. For efficiency, we copy all data needed to execute all tests into each worker; and store it in global variables. This reduces the cost of each task.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/worker.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py:27,Testability,test,test,27,"""""""Copy data shared by all test executions into worker processes""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/worker.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py:11,Testability,test,test,11,"""""""Run one test in a multiprocessing.Pool. Side effects in this function and functions it calls are not visible in the; main lit process. Arguments and results of this function are pickled, so they should be cheap; to copy.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/worker.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:396,Modifiability,config,configs,396,"""""""; Given the path to a test in the test suite, generates the Lit tests associated; to that path. There can be zero, one or more tests. For example, some testing; formats allow expanding a single path in the test suite into multiple Lit tests; (e.g. they are generated on the fly). Note that this method is only used when Lit needs to actually perform test; discovery, which is not the case for configs with standalone tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:345,Performance,perform,perform,345,"""""""; Given the path to a test in the test suite, generates the Lit tests associated; to that path. There can be zero, one or more tests. For example, some testing; formats allow expanding a single path in the test suite into multiple Lit tests; (e.g. they are generated on the fly). Note that this method is only used when Lit needs to actually perform test; discovery, which is not the case for configs with standalone tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:25,Testability,test,test,25,"""""""; Given the path to a test in the test suite, generates the Lit tests associated; to that path. There can be zero, one or more tests. For example, some testing; formats allow expanding a single path in the test suite into multiple Lit tests; (e.g. they are generated on the fly). Note that this method is only used when Lit needs to actually perform test; discovery, which is not the case for configs with standalone tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:37,Testability,test,test,37,"""""""; Given the path to a test in the test suite, generates the Lit tests associated; to that path. There can be zero, one or more tests. For example, some testing; formats allow expanding a single path in the test suite into multiple Lit tests; (e.g. they are generated on the fly). Note that this method is only used when Lit needs to actually perform test; discovery, which is not the case for configs with standalone tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:67,Testability,test,tests,67,"""""""; Given the path to a test in the test suite, generates the Lit tests associated; to that path. There can be zero, one or more tests. For example, some testing; formats allow expanding a single path in the test suite into multiple Lit tests; (e.g. they are generated on the fly). Note that this method is only used when Lit needs to actually perform test; discovery, which is not the case for configs with standalone tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:130,Testability,test,tests,130,"""""""; Given the path to a test in the test suite, generates the Lit tests associated; to that path. There can be zero, one or more tests. For example, some testing; formats allow expanding a single path in the test suite into multiple Lit tests; (e.g. they are generated on the fly). Note that this method is only used when Lit needs to actually perform test; discovery, which is not the case for configs with standalone tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:155,Testability,test,testing,155,"""""""; Given the path to a test in the test suite, generates the Lit tests associated; to that path. There can be zero, one or more tests. For example, some testing; formats allow expanding a single path in the test suite into multiple Lit tests; (e.g. they are generated on the fly). Note that this method is only used when Lit needs to actually perform test; discovery, which is not the case for configs with standalone tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:209,Testability,test,test,209,"""""""; Given the path to a test in the test suite, generates the Lit tests associated; to that path. There can be zero, one or more tests. For example, some testing; formats allow expanding a single path in the test suite into multiple Lit tests; (e.g. they are generated on the fly). Note that this method is only used when Lit needs to actually perform test; discovery, which is not the case for configs with standalone tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:238,Testability,test,tests,238,"""""""; Given the path to a test in the test suite, generates the Lit tests associated; to that path. There can be zero, one or more tests. For example, some testing; formats allow expanding a single path in the test suite into multiple Lit tests; (e.g. they are generated on the fly). Note that this method is only used when Lit needs to actually perform test; discovery, which is not the case for configs with standalone tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:353,Testability,test,test,353,"""""""; Given the path to a test in the test suite, generates the Lit tests associated; to that path. There can be zero, one or more tests. For example, some testing; formats allow expanding a single path in the test suite into multiple Lit tests; (e.g. they are generated on the fly). Note that this method is only used when Lit needs to actually perform test; discovery, which is not the case for configs with standalone tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:420,Testability,test,tests,420,"""""""; Given the path to a test in the test suite, generates the Lit tests associated; to that path. There can be zero, one or more tests. For example, some testing; formats allow expanding a single path in the test suite into multiple Lit tests; (e.g. they are generated on the fly). Note that this method is only used when Lit needs to actually perform test; discovery, which is not the case for configs with standalone tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:148,Deployability,configurat,configuration,148,"""""""; Expand each path in a test suite to a Lit test using that path and assuming; it is a file containing the test. File extensions excluded by the configuration; or not contained in the allowed extensions are ignored.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:148,Modifiability,config,configuration,148,"""""""; Expand each path in a test suite to a Lit test using that path and assuming; it is a file containing the test. File extensions excluded by the configuration; or not contained in the allowed extensions are ignored.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:27,Testability,test,test,27,"""""""; Expand each path in a test suite to a Lit test using that path and assuming; it is a file containing the test. File extensions excluded by the configuration; or not contained in the allowed extensions are ignored.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:47,Testability,test,test,47,"""""""; Expand each path in a test suite to a Lit test using that path and assuming; it is a file containing the test. File extensions excluded by the configuration; or not contained in the allowed extensions are ignored.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:110,Testability,test,test,110,"""""""; Expand each path in a test suite to a Lit test using that path and assuming; it is a file containing the test. File extensions excluded by the configuration; or not contained in the allowed extensions are ignored.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:32,Testability,test,tests,32,# Ignore dot files and excluded tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:28,Usability,simpl,simple,28,###; # Check exit code of a simple executable with no input,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:21,Testability,test,tests,21,"# On Windows, assume tests will also end in '.exe'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:31,Testability,test,testing,31,# Also check for .py files for testing purposes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:12,Testability,test,tests,12,# number of tests in a shard,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:15,Testability,test,tests,15,# Discover the tests in this executable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:17,Testability,test,test,17,# Create one lit test for each shard.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:268,Availability,failure,failures,268,"# This doesn't look like a valid gtest file. This can; # have a number of causes, none of them good. For; # instance, we could have created a broken executable.; # Alternatively, someone has cruft in their test; # directory. If we don't return a test here, then no; # failures will get reported, so return a dummy test name; # so that the failure is reported later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:339,Availability,failure,failure,339,"# This doesn't look like a valid gtest file. This can; # have a number of causes, none of them good. For; # instance, we could have created a broken executable.; # Alternatively, someone has cruft in their test; # directory. If we don't return a test here, then no; # failures will get reported, so return a dummy test name; # so that the failure is reported later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:206,Testability,test,test,206,"# This doesn't look like a valid gtest file. This can; # have a number of causes, none of them good. For; # instance, we could have created a broken executable.; # Alternatively, someone has cruft in their test; # directory. If we don't return a test here, then no; # failures will get reported, so return a dummy test name; # so that the failure is reported later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:246,Testability,test,test,246,"# This doesn't look like a valid gtest file. This can; # have a number of causes, none of them good. For; # instance, we could have created a broken executable.; # Alternatively, someone has cruft in their test; # directory. If we don't return a test here, then no; # failures will get reported, so return a dummy test name; # so that the failure is reported later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:314,Testability,test,test,314,"# This doesn't look like a valid gtest file. This can; # have a number of causes, none of them good. For; # instance, we could have created a broken executable.; # Alternatively, someone has cruft in their test; # directory. If we don't return a test here, then no; # failures will get reported, so return a dummy test name; # so that the failure is reported later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:15,Modifiability,parameteriz,parameterized,15,"# Handle GTest parameterized and typed tests, whose name includes; # some '/'s.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:39,Testability,test,tests,39,"# Handle GTest parameterized and typed tests, whose name includes; # some '/'s.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:46,Security,sanitiz,sanitizers,46,"# In some situations, like running tests with sanitizers, all test passes but; # the shard could still fail due to memory issues.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:35,Testability,test,tests,35,"# In some situations, like running tests with sanitizers, all test passes but; # the shard could still fail due to memory issues.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:62,Testability,test,test,62,"# In some situations, like running tests with sanitizers, all test passes but; # the shard could still fail due to memory issues.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:18,Testability,test,tests,18,# Ignore disabled tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py:235,Deployability,pipeline,pipelines,235,"""""""ShTest is a format with one file per test. This is the primary format for regression tests as described in the LLVM; testing guide:. http://llvm.org/docs/TestingGuide.html. The ShTest files contain some number of shell-like command pipelines, along; with assertions about what should be in the output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py:40,Testability,test,test,40,"""""""ShTest is a format with one file per test. This is the primary format for regression tests as described in the LLVM; testing guide:. http://llvm.org/docs/TestingGuide.html. The ShTest files contain some number of shell-like command pipelines, along; with assertions about what should be in the output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py:88,Testability,test,tests,88,"""""""ShTest is a format with one file per test. This is the primary format for regression tests as described in the LLVM; testing guide:. http://llvm.org/docs/TestingGuide.html. The ShTest files contain some number of shell-like command pipelines, along; with assertions about what should be in the output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py:120,Testability,test,testing,120,"""""""ShTest is a format with one file per test. This is the primary format for regression tests as described in the LLVM; testing guide:. http://llvm.org/docs/TestingGuide.html. The ShTest files contain some number of shell-like command pipelines, along; with assertions about what should be in the output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py:258,Testability,assert,assertions,258,"""""""ShTest is a format with one file per test. This is the primary format for regression tests as described in the LLVM; testing guide:. http://llvm.org/docs/TestingGuide.html. The ShTest files contain some number of shell-like command pipelines, along; with assertions about what should be in the output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py:128,Usability,guid,guide,128,"""""""ShTest is a format with one file per test. This is the primary format for regression tests as described in the LLVM; testing guide:. http://llvm.org/docs/TestingGuide.html. The ShTest files contain some number of shell-like command pipelines, along; with assertions about what should be in the output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:21,Availability,avail,available,21,# os.getuid() is not available on all platforms,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:51,Modifiability,variab,variables,51,# Many tools behave strangely if these environment variables aren't; # set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:38,Deployability,pipeline,pipeline,38,"# Choose between lit's internal shell pipeline runner and a real shell.; # If LIT_USE_INTERNAL_SHELL is in the environment, we use that as an; # override.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:6,Testability,test,tests,6,# For tests that require Windows to run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:112,Modifiability,config,config,112,# Native compilation: host arch == default triple arch; # Both of these values should probably be in every site config (e.g. as; # part of the standard header. But currently they aren't),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:38,Testability,test,tests,38,# Check if we should run long running tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:11,Modifiability,config,config,11,# Ask llvm-config about the specified feature.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:180,Availability,error,error,180,"# Python's strerror may not supply the same message; # as C++ std::error_code. One example of such a platform is; # Visual Studio. errc_messages may be supplied which contains the error; # messages for ENOENT, EISDIR, EINVAL and EACCES as a semi colon; # separated string. LLVM testsuites can use get_errc_messages in cmake; # to automatically get the messages and pass them into lit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:44,Integrability,message,message,44,"# Python's strerror may not supply the same message; # as C++ std::error_code. One example of such a platform is; # Visual Studio. errc_messages may be supplied which contains the error; # messages for ENOENT, EISDIR, EINVAL and EACCES as a semi colon; # separated string. LLVM testsuites can use get_errc_messages in cmake; # to automatically get the messages and pass them into lit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:189,Integrability,message,messages,189,"# Python's strerror may not supply the same message; # as C++ std::error_code. One example of such a platform is; # Visual Studio. errc_messages may be supplied which contains the error; # messages for ENOENT, EISDIR, EINVAL and EACCES as a semi colon; # separated string. LLVM testsuites can use get_errc_messages in cmake; # to automatically get the messages and pass them into lit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:352,Integrability,message,messages,352,"# Python's strerror may not supply the same message; # as C++ std::error_code. One example of such a platform is; # Visual Studio. errc_messages may be supplied which contains the error; # messages for ENOENT, EISDIR, EINVAL and EACCES as a semi colon; # separated string. LLVM testsuites can use get_errc_messages in cmake; # to automatically get the messages and pass them into lit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:278,Testability,test,testsuites,278,"# Python's strerror may not supply the same message; # as C++ std::error_code. One example of such a platform is; # Visual Studio. errc_messages may be supplied which contains the error; # messages for ENOENT, EISDIR, EINVAL and EACCES as a semi colon; # separated string. LLVM testsuites can use get_errc_messages in cmake; # to automatically get the messages and pass them into lit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:68,Testability,test,testing,68,# Handle these specially as they are strings searched for during; # testing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:169,Deployability,configurat,configuration,169,"""""""Find the executable program 'name', optionally using the specified; environment variable as an override before searching the build directory; and then optionally the configuration's PATH.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:83,Modifiability,variab,variable,83,"""""""Find the executable program 'name', optionally using the specified; environment variable as an override before searching the build directory; and then optionally the configuration's PATH.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:169,Modifiability,config,configuration,169,"""""""Find the executable program 'name', optionally using the specified; environment variable as an override before searching the build directory; and then optionally the configuration's PATH.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:69,Security,validat,validation,69,"# If the override is specified in the environment, use it without; # validation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:150,Deployability,install,installed,150,"""""""Configure the test suite to be able to invoke clang. Sets up some environment variables important to clang, locates a; just-built or optionally an installed clang, and add a set of standard; substitutions useful to any test suite that makes use of clang. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:81,Modifiability,variab,variables,81,"""""""Configure the test suite to be able to invoke clang. Sets up some environment variables important to clang, locates a; just-built or optionally an installed clang, and add a set of standard; substitutions useful to any test suite that makes use of clang. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:17,Testability,test,test,17,"""""""Configure the test suite to be able to invoke clang. Sets up some environment variables important to clang, locates a; just-built or optionally an installed clang, and add a set of standard; substitutions useful to any test suite that makes use of clang. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:222,Testability,test,test,222,"""""""Configure the test suite to be able to invoke clang. Sets up some environment variables important to clang, locates a; just-built or optionally an installed clang, and add a set of standard; substitutions useful to any test suite that makes use of clang. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:25,Modifiability,variab,variables,25,"# Clear some environment variables that might affect Clang.; #; # This first set of vars are read by Clang, but shouldn't affect tests; # that aren't specifically looking for these features, or are required; # simply to run the tests at all.; #; # FIXME: Should we have a tool that enforces this?; # safe_env_vars = (; # 'TMPDIR', 'TEMP', 'TMP', 'USERPROFILE', 'PWD',; # 'MACOSX_DEPLOYMENT_TARGET', 'IPHONEOS_DEPLOYMENT_TARGET',; # 'VCINSTALLDIR', 'VC100COMNTOOLS', 'VC90COMNTOOLS',; # 'VC80COMNTOOLS')",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:129,Testability,test,tests,129,"# Clear some environment variables that might affect Clang.; #; # This first set of vars are read by Clang, but shouldn't affect tests; # that aren't specifically looking for these features, or are required; # simply to run the tests at all.; #; # FIXME: Should we have a tool that enforces this?; # safe_env_vars = (; # 'TMPDIR', 'TEMP', 'TMP', 'USERPROFILE', 'PWD',; # 'MACOSX_DEPLOYMENT_TARGET', 'IPHONEOS_DEPLOYMENT_TARGET',; # 'VCINSTALLDIR', 'VC100COMNTOOLS', 'VC90COMNTOOLS',; # 'VC80COMNTOOLS')",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:228,Testability,test,tests,228,"# Clear some environment variables that might affect Clang.; #; # This first set of vars are read by Clang, but shouldn't affect tests; # that aren't specifically looking for these features, or are required; # simply to run the tests at all.; #; # FIXME: Should we have a tool that enforces this?; # safe_env_vars = (; # 'TMPDIR', 'TEMP', 'TMP', 'USERPROFILE', 'PWD',; # 'MACOSX_DEPLOYMENT_TARGET', 'IPHONEOS_DEPLOYMENT_TARGET',; # 'VCINSTALLDIR', 'VC100COMNTOOLS', 'VC90COMNTOOLS',; # 'VC80COMNTOOLS')",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:210,Usability,simpl,simply,210,"# Clear some environment variables that might affect Clang.; #; # This first set of vars are read by Clang, but shouldn't affect tests; # that aren't specifically looking for these features, or are required; # simply to run the tests at all.; #; # FIXME: Should we have a tool that enforces this?; # safe_env_vars = (; # 'TMPDIR', 'TEMP', 'TMP', 'USERPROFILE', 'PWD',; # 'MACOSX_DEPLOYMENT_TARGET', 'IPHONEOS_DEPLOYMENT_TARGET',; # 'VCINSTALLDIR', 'VC100COMNTOOLS', 'VC90COMNTOOLS',; # 'VC80COMNTOOLS')",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:85,Safety,avoid,avoid,85,# Tweak the PATH to include the tools dir and the scripts dir.; # Put Clang first to avoid LLVM from overriding out-of-tree clang; # builds.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:89,Deployability,install,installed,89,"# The host triple might not be set, at least if we're compiling clang; # from an already installed llvm.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:13,Testability,test,tests,13,"# TODO: Many tests work across many language standards. Before; # https://discourse.llvm.org/t/lit-run-a-run-line-multiple-times-with-different-replacements/64932; # has a solution, provide substitutions to conveniently try every standard with LIT_CLANG_STD_GROUP.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:28,Testability,test,tests,28,"'''\""*** Do not use '%s' in tests, use '%s'. ***\""'''",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:146,Deployability,install,installed,146,"""""""Configure the test suite to be able to invoke lld. Sets up some environment variables important to lld, locates a; just-built or optionally an installed lld, and add a set of standard; substitutions useful to any test suite that makes use of lld. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:79,Modifiability,variab,variables,79,"""""""Configure the test suite to be able to invoke lld. Sets up some environment variables important to lld, locates a; just-built or optionally an installed lld, and add a set of standard; substitutions useful to any test suite that makes use of lld. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:17,Testability,test,test,17,"""""""Configure the test suite to be able to invoke lld. Sets up some environment variables important to lld, locates a; just-built or optionally an installed lld, and add a set of standard; substitutions useful to any test suite that makes use of lld. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:216,Testability,test,test,216,"""""""Configure the test suite to be able to invoke lld. Sets up some environment variables important to lld, locates a; just-built or optionally an installed lld, and add a set of standard; substitutions useful to any test suite that makes use of lld. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py:993,Availability,error,error,993,"""""""Construct a ToolSubst. key: The text which is to be substituted. command: The command to substitute when the key is matched. By default,; this will treat `key` as a tool name and search for it. If it is a; string, it is interpreted as an exact path. If it is an instance of; FindTool, the specified tool name is searched for on disk. pre: If specified, the substitution will not find matches where; the character immediately preceding the word-boundary that begins; `key` is any of the characters in the string `pre`. post: If specified, the substitution will not find matches where; the character immediately after the word-boundary that ends `key`; is any of the characters specified in the string `post`. verbatim: If True, `key` is an exact regex that is passed to the; underlying substitution. unresolved: Action to take if the tool substitution cannot be; resolved. Valid values:; 'warn' - log a warning but add the substitution anyway.; 'fatal' - Exit the test suite and log a fatal error.; 'break' - Don't add any of the substitutions from the current; group, and return a value indicating a failure.; 'ignore' - Don't add the substitution, and don't log an error. extra_args: If specified, represents a list of arguments that will be; appended to the tool's substitution. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py:1103,Availability,failure,failure,1103,"""""""Construct a ToolSubst. key: The text which is to be substituted. command: The command to substitute when the key is matched. By default,; this will treat `key` as a tool name and search for it. If it is a; string, it is interpreted as an exact path. If it is an instance of; FindTool, the specified tool name is searched for on disk. pre: If specified, the substitution will not find matches where; the character immediately preceding the word-boundary that begins; `key` is any of the characters in the string `pre`. post: If specified, the substitution will not find matches where; the character immediately after the word-boundary that ends `key`; is any of the characters specified in the string `post`. verbatim: If True, `key` is an exact regex that is passed to the; underlying substitution. unresolved: Action to take if the tool substitution cannot be; resolved. Valid values:; 'warn' - log a warning but add the substitution anyway.; 'fatal' - Exit the test suite and log a fatal error.; 'break' - Don't add any of the substitutions from the current; group, and return a value indicating a failure.; 'ignore' - Don't add the substitution, and don't log an error. extra_args: If specified, represents a list of arguments that will be; appended to the tool's substitution. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py:1169,Availability,error,error,1169,"""""""Construct a ToolSubst. key: The text which is to be substituted. command: The command to substitute when the key is matched. By default,; this will treat `key` as a tool name and search for it. If it is a; string, it is interpreted as an exact path. If it is an instance of; FindTool, the specified tool name is searched for on disk. pre: If specified, the substitution will not find matches where; the character immediately preceding the word-boundary that begins; `key` is any of the characters in the string `pre`. post: If specified, the substitution will not find matches where; the character immediately after the word-boundary that ends `key`; is any of the characters specified in the string `post`. verbatim: If True, `key` is an exact regex that is passed to the; underlying substitution. unresolved: Action to take if the tool substitution cannot be; resolved. Valid values:; 'warn' - log a warning but add the substitution anyway.; 'fatal' - Exit the test suite and log a fatal error.; 'break' - Don't add any of the substitutions from the current; group, and return a value indicating a failure.; 'ignore' - Don't add the substitution, and don't log an error. extra_args: If specified, represents a list of arguments that will be; appended to the tool's substitution. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py:899,Testability,log,log,899,"""""""Construct a ToolSubst. key: The text which is to be substituted. command: The command to substitute when the key is matched. By default,; this will treat `key` as a tool name and search for it. If it is a; string, it is interpreted as an exact path. If it is an instance of; FindTool, the specified tool name is searched for on disk. pre: If specified, the substitution will not find matches where; the character immediately preceding the word-boundary that begins; `key` is any of the characters in the string `pre`. post: If specified, the substitution will not find matches where; the character immediately after the word-boundary that ends `key`; is any of the characters specified in the string `post`. verbatim: If True, `key` is an exact regex that is passed to the; underlying substitution. unresolved: Action to take if the tool substitution cannot be; resolved. Valid values:; 'warn' - log a warning but add the substitution anyway.; 'fatal' - Exit the test suite and log a fatal error.; 'break' - Don't add any of the substitutions from the current; group, and return a value indicating a failure.; 'ignore' - Don't add the substitution, and don't log an error. extra_args: If specified, represents a list of arguments that will be; appended to the tool's substitution. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py:966,Testability,test,test,966,"""""""Construct a ToolSubst. key: The text which is to be substituted. command: The command to substitute when the key is matched. By default,; this will treat `key` as a tool name and search for it. If it is a; string, it is interpreted as an exact path. If it is an instance of; FindTool, the specified tool name is searched for on disk. pre: If specified, the substitution will not find matches where; the character immediately preceding the word-boundary that begins; `key` is any of the characters in the string `pre`. post: If specified, the substitution will not find matches where; the character immediately after the word-boundary that ends `key`; is any of the characters specified in the string `post`. verbatim: If True, `key` is an exact regex that is passed to the; underlying substitution. unresolved: Action to take if the tool substitution cannot be; resolved. Valid values:; 'warn' - log a warning but add the substitution anyway.; 'fatal' - Exit the test suite and log a fatal error.; 'break' - Don't add any of the substitutions from the current; group, and return a value indicating a failure.; 'ignore' - Don't add the substitution, and don't log an error. extra_args: If specified, represents a list of arguments that will be; appended to the tool's substitution. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py:981,Testability,log,log,981,"""""""Construct a ToolSubst. key: The text which is to be substituted. command: The command to substitute when the key is matched. By default,; this will treat `key` as a tool name and search for it. If it is a; string, it is interpreted as an exact path. If it is an instance of; FindTool, the specified tool name is searched for on disk. pre: If specified, the substitution will not find matches where; the character immediately preceding the word-boundary that begins; `key` is any of the characters in the string `pre`. post: If specified, the substitution will not find matches where; the character immediately after the word-boundary that ends `key`; is any of the characters specified in the string `post`. verbatim: If True, `key` is an exact regex that is passed to the; underlying substitution. unresolved: Action to take if the tool substitution cannot be; resolved. Valid values:; 'warn' - log a warning but add the substitution anyway.; 'fatal' - Exit the test suite and log a fatal error.; 'break' - Don't add any of the substitutions from the current; group, and return a value indicating a failure.; 'ignore' - Don't add the substitution, and don't log an error. extra_args: If specified, represents a list of arguments that will be; appended to the tool's substitution. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py:1162,Testability,log,log,1162,"""""""Construct a ToolSubst. key: The text which is to be substituted. command: The command to substitute when the key is matched. By default,; this will treat `key` as a tool name and search for it. If it is a; string, it is interpreted as an exact path. If it is an instance of; FindTool, the specified tool name is searched for on disk. pre: If specified, the substitution will not find matches where; the character immediately preceding the word-boundary that begins; `key` is any of the characters in the string `pre`. post: If specified, the substitution will not find matches where; the character immediately after the word-boundary that ends `key`; is any of the characters specified in the string `post`. verbatim: If True, `key` is an exact regex that is passed to the; underlying substitution. unresolved: Action to take if the tool substitution cannot be; resolved. Valid values:; 'warn' - log a warning but add the substitution anyway.; 'fatal' - Exit the test suite and log a fatal error.; 'break' - Don't add any of the substitutions from the current; group, and return a value indicating a failure.; 'ignore' - Don't add the substitution, and don't log an error. extra_args: If specified, represents a list of arguments that will be; appended to the tool's substitution. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py:84,Availability,failure,failure,84,"# By returning a valid result with an empty command, the; # caller treats this as a failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py:66,Availability,avail,availability,66,# Only if we are processing all the variables output the total; # availability.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py:36,Modifiability,variab,variables,36,# Only if we are processing all the variables output the total; # availability.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py:15,Availability,error,errors,15,# TODO: Handle errors that are coming from llvm-dwarfdump.; # Get the JSON and parse it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py:31,Modifiability,variab,variables,31,# Read the JSON only for local variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py:31,Modifiability,variab,variables,31,# Read the JSON for both local variables and formal parameters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py:249,Performance,perform,performed,249,"""""""Extract IR for training. Extract IR for training, either from a compile_commands.json file produced by; cmake, or a linker parameter list file. Only run with; 'python compiler_opt/tools/extract_ir.py ...'. The compilation is assumed to have been performed with clang, using; -fembed-bitcode=all passed to cc1 (i.e. pass clang -Xclang=-fembed-bitcode=all). In a distributed ThinLTO case, the compilation is assumed to have been performed; specifying -mllvm -lto-embed-bitcode=post-merge-pre-opt. In a local ThinLTO case, the compilation is assumedto have been performed; specifying -Wl,--save-temps=import -Wl,--thinlto-emit-index-files. To change the logging verbosity, pass an integer representing the desired; verbosity to the --verbosity flag. Use 0 for all logs, status information,; and detailed debug information, -1 for solely warnings, and -2 to not produce; any output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py:430,Performance,perform,performed,430,"""""""Extract IR for training. Extract IR for training, either from a compile_commands.json file produced by; cmake, or a linker parameter list file. Only run with; 'python compiler_opt/tools/extract_ir.py ...'. The compilation is assumed to have been performed with clang, using; -fembed-bitcode=all passed to cc1 (i.e. pass clang -Xclang=-fembed-bitcode=all). In a distributed ThinLTO case, the compilation is assumed to have been performed; specifying -mllvm -lto-embed-bitcode=post-merge-pre-opt. In a local ThinLTO case, the compilation is assumedto have been performed; specifying -Wl,--save-temps=import -Wl,--thinlto-emit-index-files. To change the logging verbosity, pass an integer representing the desired; verbosity to the --verbosity flag. Use 0 for all logs, status information,; and detailed debug information, -1 for solely warnings, and -2 to not produce; any output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py:562,Performance,perform,performed,562,"""""""Extract IR for training. Extract IR for training, either from a compile_commands.json file produced by; cmake, or a linker parameter list file. Only run with; 'python compiler_opt/tools/extract_ir.py ...'. The compilation is assumed to have been performed with clang, using; -fembed-bitcode=all passed to cc1 (i.e. pass clang -Xclang=-fembed-bitcode=all). In a distributed ThinLTO case, the compilation is assumed to have been performed; specifying -mllvm -lto-embed-bitcode=post-merge-pre-opt. In a local ThinLTO case, the compilation is assumedto have been performed; specifying -Wl,--save-temps=import -Wl,--thinlto-emit-index-files. To change the logging verbosity, pass an integer representing the desired; verbosity to the --verbosity flag. Use 0 for all logs, status information,; and detailed debug information, -1 for solely warnings, and -2 to not produce; any output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py:654,Testability,log,logging,654,"""""""Extract IR for training. Extract IR for training, either from a compile_commands.json file produced by; cmake, or a linker parameter list file. Only run with; 'python compiler_opt/tools/extract_ir.py ...'. The compilation is assumed to have been performed with clang, using; -fembed-bitcode=all passed to cc1 (i.e. pass clang -Xclang=-fembed-bitcode=all). In a distributed ThinLTO case, the compilation is assumed to have been performed; specifying -mllvm -lto-embed-bitcode=post-merge-pre-opt. In a local ThinLTO case, the compilation is assumedto have been performed; specifying -Wl,--save-temps=import -Wl,--thinlto-emit-index-files. To change the logging verbosity, pass an integer representing the desired; verbosity to the --verbosity flag. Use 0 for all logs, status information,; and detailed debug information, -1 for solely warnings, and -2 to not produce; any output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py:764,Testability,log,logs,764,"""""""Extract IR for training. Extract IR for training, either from a compile_commands.json file produced by; cmake, or a linker parameter list file. Only run with; 'python compiler_opt/tools/extract_ir.py ...'. The compilation is assumed to have been performed with clang, using; -fembed-bitcode=all passed to cc1 (i.e. pass clang -Xclang=-fembed-bitcode=all). In a distributed ThinLTO case, the compilation is assumed to have been performed; specifying -mllvm -lto-embed-bitcode=post-merge-pre-opt. In a local ThinLTO case, the compilation is assumedto have been performed; specifying -Wl,--save-temps=import -Wl,--thinlto-emit-index-files. To change the logging verbosity, pass an integer representing the desired; verbosity to the --verbosity flag. Use 0 for all logs, status information,; and detailed debug information, -1 for solely warnings, and -2 to not produce; any output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir_lib.py:417,Performance,perform,performed,417,"""""""Extracts all specified object files into the corpus directory. Args:; objs: A list of TrainingIRExtractor Objects that represent the object files; to extract bitcode/commands from.; num_workers: The number of parallel processes to spawn to run the; extraction.; llvm_objcopy_path: The path to the llvm-objcopy to use for dumping sections.; cmd_filter: A regular expression that is used to select for compilations; performed with specific flags. If you want to include all compilations,; set this to None.; thinlto_build: Whether or not this is a ThinLTO build, and if so, the type.; Set this to None if the build was not done with ThinLTO.; cmd_section_name: The name of the command line section created by the; bitcode embedding.; bitcode_section_name: The name of the bitcode section created by the; bitcode embedding.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir_lib.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir_lib.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir_lib.py:230,Performance,perform,performed,230,"""""""Writes a corpus_manifest.json containing all necessary information about; the corpus. Args:; thinlto_build: Whether or not the build was done with ThinLTO and if so,; what kind of ThinLTO. Set this to none if the build was not performed with; ThinLTO.; relative_output_paths: The relative (to the corpus directory) output paths; of all the bitcode files that should be placed in the corpus manifest; output_dir: The corpus directory where the corpus manifest should be; placed.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir_lib.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir_lib.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/make_corpus_lib.py:349,Availability,down,downstream,349,"""""""Creates a corpus manifest describing the bitcode that has been found. Args:; relative_output_paths: A list of paths to each bitcode file relative to the; output directory.; outout_dir: The output directory where the corpus is being created.; default_args: An array of compiler flags that should be used to compile; the bitcode when using further downstream tooling.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/make_corpus_lib.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/make_corpus_lib.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py:213,Deployability,pipeline,pipeline,213,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Fake 'opt' program that can be made to crash on request. For testing; # the 'reduce_pipeline.py' automatic 'opt' NPM pipeline reducer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py:222,Energy Efficiency,reduce,reducer,222,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Fake 'opt' program that can be made to crash on request. For testing; # the 'reduce_pipeline.py' automatic 'opt' NPM pipeline reducer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py:157,Testability,test,testing,157,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Fake 'opt' program that can be made to crash on request. For testing; # the 'reduce_pipeline.py' automatic 'opt' NPM pipeline reducer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py:9,Deployability,pipeline,pipeline,9,# Expand pipeline if '-print-pipeline-passes'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py:29,Deployability,pipeline,pipeline-passes,29,# Expand pipeline if '-print-pipeline-passes'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/bump-version.py:21,Usability,simpl,simple,21,"# LIT python file, a simple tuple",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/bump-version.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/bump-version.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/bump-version.py:16,Modifiability,config,config,16,# Handle libc++ config header,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/bump-version.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/bump-version.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/bump-version.py:6,Deployability,configurat,configuration,6,# Lit configuration,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/bump-version.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/bump-version.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/bump-version.py:6,Modifiability,config,configuration,6,# Lit configuration,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/bump-version.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/bump-version.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/findRegressions-nightly.py:15,Testability,test,test,15,# Check if the test passed or failed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/findRegressions-nightly.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/findRegressions-nightly.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/findRegressions-simple.py:15,Testability,test,test,15,# Check if the test passed or failed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/findRegressions-simple.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/findRegressions-simple.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:46,Deployability,release,release,46,"#!/usr/bin/env python3; # ===-- github-upload-release.py ------------------------------------------===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#; #; # Create and manage releases in the llvm github project.; #; # This script requires python3 and the PyGithub module.; #; # Example Usage:; #; # You will need to obtain a personal access token for your github account in; # order to use this script. Instructions for doing this can be found here:; # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line; #; # Create a new release from an existing tag:; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 create; #; # Upload files for a release; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files llvm-8.0.1rc4.src.tar.xz; #; # You can upload as many files as you want at a time and use wildcards e.g.; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files *.src.*; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:418,Deployability,release,releases,418,"#!/usr/bin/env python3; # ===-- github-upload-release.py ------------------------------------------===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#; #; # Create and manage releases in the llvm github project.; #; # This script requires python3 and the PyGithub module.; #; # Example Usage:; #; # You will need to obtain a personal access token for your github account in; # order to use this script. Instructions for doing this can be found here:; # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line; #; # Create a new release from an existing tag:; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 create; #; # Upload files for a release; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files llvm-8.0.1rc4.src.tar.xz; #; # You can upload as many files as you want at a time and use wildcards e.g.; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files *.src.*; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:805,Deployability,release,release,805,"#!/usr/bin/env python3; # ===-- github-upload-release.py ------------------------------------------===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#; #; # Create and manage releases in the llvm github project.; #; # This script requires python3 and the PyGithub module.; #; # Example Usage:; #; # You will need to obtain a personal access token for your github account in; # order to use this script. Instructions for doing this can be found here:; # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line; #; # Create a new release from an existing tag:; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 create; #; # Upload files for a release; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files llvm-8.0.1rc4.src.tar.xz; #; # You can upload as many files as you want at a time and use wildcards e.g.; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files *.src.*; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:854,Deployability,release,release,854,"#!/usr/bin/env python3; # ===-- github-upload-release.py ------------------------------------------===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#; #; # Create and manage releases in the llvm github project.; #; # This script requires python3 and the PyGithub module.; #; # Example Usage:; #; # You will need to obtain a personal access token for your github account in; # order to use this script. Instructions for doing this can be found here:; # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line; #; # Create a new release from an existing tag:; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 create; #; # Upload files for a release; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files llvm-8.0.1rc4.src.tar.xz; #; # You can upload as many files as you want at a time and use wildcards e.g.; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files *.src.*; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:889,Deployability,release,release,889,"#!/usr/bin/env python3; # ===-- github-upload-release.py ------------------------------------------===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#; #; # Create and manage releases in the llvm github project.; #; # This script requires python3 and the PyGithub module.; #; # Example Usage:; #; # You will need to obtain a personal access token for your github account in; # order to use this script. Instructions for doing this can be found here:; # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line; #; # Create a new release from an existing tag:; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 create; #; # Upload files for a release; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files llvm-8.0.1rc4.src.tar.xz; #; # You can upload as many files as you want at a time and use wildcards e.g.; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files *.src.*; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:939,Deployability,release,release,939,"#!/usr/bin/env python3; # ===-- github-upload-release.py ------------------------------------------===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#; #; # Create and manage releases in the llvm github project.; #; # This script requires python3 and the PyGithub module.; #; # Example Usage:; #; # You will need to obtain a personal access token for your github account in; # order to use this script. Instructions for doing this can be found here:; # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line; #; # Create a new release from an existing tag:; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 create; #; # Upload files for a release; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files llvm-8.0.1rc4.src.tar.xz; #; # You can upload as many files as you want at a time and use wildcards e.g.; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files *.src.*; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:966,Deployability,release,release,966,"#!/usr/bin/env python3; # ===-- github-upload-release.py ------------------------------------------===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#; #; # Create and manage releases in the llvm github project.; #; # This script requires python3 and the PyGithub module.; #; # Example Usage:; #; # You will need to obtain a personal access token for your github account in; # order to use this script. Instructions for doing this can be found here:; # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line; #; # Create a new release from an existing tag:; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 create; #; # Upload files for a release; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files llvm-8.0.1rc4.src.tar.xz; #; # You can upload as many files as you want at a time and use wildcards e.g.; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files *.src.*; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:1001,Deployability,release,release,1001,"#!/usr/bin/env python3; # ===-- github-upload-release.py ------------------------------------------===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#; #; # Create and manage releases in the llvm github project.; #; # This script requires python3 and the PyGithub module.; #; # Example Usage:; #; # You will need to obtain a personal access token for your github account in; # order to use this script. Instructions for doing this can be found here:; # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line; #; # Create a new release from an existing tag:; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 create; #; # Upload files for a release; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files llvm-8.0.1rc4.src.tar.xz; #; # You can upload as many files as you want at a time and use wildcards e.g.; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files *.src.*; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:1158,Deployability,release,release,1158,"#!/usr/bin/env python3; # ===-- github-upload-release.py ------------------------------------------===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#; #; # Create and manage releases in the llvm github project.; #; # This script requires python3 and the PyGithub module.; #; # Example Usage:; #; # You will need to obtain a personal access token for your github account in; # order to use this script. Instructions for doing this can be found here:; # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line; #; # Create a new release from an existing tag:; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 create; #; # Upload files for a release; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files llvm-8.0.1rc4.src.tar.xz; #; # You can upload as many files as you want at a time and use wildcards e.g.; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files *.src.*; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:1193,Deployability,release,release,1193,"#!/usr/bin/env python3; # ===-- github-upload-release.py ------------------------------------------===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#; #; # Create and manage releases in the llvm github project.; #; # This script requires python3 and the PyGithub module.; #; # Example Usage:; #; # You will need to obtain a personal access token for your github account in; # order to use this script. Instructions for doing this can be found here:; # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line; #; # Create a new release from an existing tag:; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 create; #; # Upload files for a release; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files llvm-8.0.1rc4.src.tar.xz; #; # You can upload as many files as you want at a time and use wildcards e.g.; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files *.src.*; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:577,Security,access,access,577,"#!/usr/bin/env python3; # ===-- github-upload-release.py ------------------------------------------===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#; #; # Create and manage releases in the llvm github project.; #; # This script requires python3 and the PyGithub module.; #; # Example Usage:; #; # You will need to obtain a personal access token for your github account in; # order to use this script. Instructions for doing this can be found here:; # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line; #; # Create a new release from an existing tag:; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 create; #; # Upload files for a release; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files llvm-8.0.1rc4.src.tar.xz; #; # You can upload as many files as you want at a time and use wildcards e.g.; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files *.src.*; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:752,Security,access,access-token-for-the-command-line,752,"#!/usr/bin/env python3; # ===-- github-upload-release.py ------------------------------------------===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#; #; # Create and manage releases in the llvm github project.; #; # This script requires python3 and the PyGithub module.; #; # Example Usage:; #; # You will need to obtain a personal access token for your github account in; # order to use this script. Instructions for doing this can be found here:; # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line; #; # Create a new release from an existing tag:; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 create; #; # Upload files for a release; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files llvm-8.0.1rc4.src.tar.xz; #; # You can upload as many files as you want at a time and use wildcards e.g.; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files *.src.*; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:193,Availability,avail,available,193,"""""""\; LLVM {} Release. # A note on binaries. Volunteers make binaries for the LLVM project, which will be uploaded; when they have had time to test and build these binaries. They might; not be available directly or not at all for each release. We suggest; you use the binaries from your distribution or build your own if you; rely on a specific platform or configuration.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:235,Deployability,release,release,235,"""""""\; LLVM {} Release. # A note on binaries. Volunteers make binaries for the LLVM project, which will be uploaded; when they have had time to test and build these binaries. They might; not be available directly or not at all for each release. We suggest; you use the binaries from your distribution or build your own if you; rely on a specific platform or configuration.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:357,Deployability,configurat,configuration,357,"""""""\; LLVM {} Release. # A note on binaries. Volunteers make binaries for the LLVM project, which will be uploaded; when they have had time to test and build these binaries. They might; not be available directly or not at all for each release. We suggest; you use the binaries from your distribution or build your own if you; rely on a specific platform or configuration.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:357,Modifiability,config,configuration,357,"""""""\; LLVM {} Release. # A note on binaries. Volunteers make binaries for the LLVM project, which will be uploaded; when they have had time to test and build these binaries. They might; not be available directly or not at all for each release. We suggest; you use the binaries from your distribution or build your own if you; rely on a specific platform or configuration.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:143,Testability,test,test,143,"""""""\; LLVM {} Release. # A note on binaries. Volunteers make binaries for the LLVM project, which will be uploaded; when they have had time to test and build these binaries. They might; not be available directly or not at all for each release. We suggest; you use the binaries from your distribution or build your own if you; rely on a specific platform or configuration.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:47,Deployability,release,releases,47,# Validate that this user is allowed to modify releases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py:152,Deployability,install,install,152,# Setting up a virtualenv to run this script can be done by running the; # following commands:; # $ virtualenv venv; # $ . ./venv/bin/activate; # $ pip install Phabricator,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py:56,Integrability,interoperab,interoperability,56,"""""""; FIXME: consider if serializing to JSON would bring interoperability; advantages over serializing to pickle.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py:49,Deployability,patch,patch,49,# line is a new line that got introduced in this patch.; # Do not record it as a changed line.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py:37,Performance,cache,cache,37,# We did fetch all records. Mark the cache to contain all info since; # the start of time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py:142,Testability,log,logic,142,"# All of the above code is about fetching data from Phabricator and caching it; # on local disk. The below code contains the actual ""business logic"" for this; # script.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py:296,Deployability,patch,patch,296,"# FIXME: the blame cache could probably be made more effective still if; # instead of storing the requested base_revision in the cache, the last; # revision before the base revision this file/path got changed in gets; # stored. That way multiple project revisions for which this specific; # file/patch hasn't changed would get cache hits (instead of misses in; # the current implementation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py:19,Performance,cache,cache,19,"# FIXME: the blame cache could probably be made more effective still if; # instead of storing the requested base_revision in the cache, the last; # revision before the base revision this file/path got changed in gets; # stored. That way multiple project revisions for which this specific; # file/patch hasn't changed would get cache hits (instead of misses in; # the current implementation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py:129,Performance,cache,cache,129,"# FIXME: the blame cache could probably be made more effective still if; # instead of storing the requested base_revision in the cache, the last; # revision before the base revision this file/path got changed in gets; # stored. That way multiple project revisions for which this specific; # file/patch hasn't changed would get cache hits (instead of misses in; # the current implementation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py:327,Performance,cache,cache,327,"# FIXME: the blame cache could probably be made more effective still if; # instead of storing the requested base_revision in the cache, the last; # revision before the base revision this file/path got changed in gets; # stored. That way multiple project revisions for which this specific; # file/patch hasn't changed would get cache hits (instead of misses in; # the current implementation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py:96,Deployability,patch,patch,96,# Heuristic 1: assume good reviewers are the ones that touched the same; # lines before as this patch is touching.; # Heuristic 2: assume good reviewers are the ones that touched the same; # files before as this patch is touching.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py:212,Deployability,patch,patch,212,# Heuristic 1: assume good reviewers are the ones that touched the same; # lines before as this patch is touching.; # Heuristic 2: assume good reviewers are the ones that touched the same; # files before as this patch is touching.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py:42,Deployability,patch,patch,42,# Compute heuristic 1: look at context of patch lines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py:673,Modifiability,config,config,673,"""""""Kernel using llvm-tblgen inside jupyter. All input is treated as TableGen unless the first non whitespace character; is ""%"" in which case it is a ""magic"" line. The supported cell magic is:; * %args - to set the arguments passed to llvm-tblgen.; * %reset - to reset the cached code and magic state.; * %noreset - to not reset the cached code and magic state; (useful when you have changed the default to always; reset the cache). These are ""cell magic"" meaning it applies to the whole cell. Therefore; it must be the first line, or part of a run of magic lines starting; from the first line. The following are global magic (that applies to all cells going; forward):; * %config - to change the behaviour of the kernel overall, including; changing defaults for things like resets. Global magic must be written in the same way as cell magic. ```tablgen; %args; %reset; %args --print-records --print-detailed-records; class Stuff {; string Name;; }. def a_thing : Stuff {}; ```. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py:272,Performance,cache,cached,272,"""""""Kernel using llvm-tblgen inside jupyter. All input is treated as TableGen unless the first non whitespace character; is ""%"" in which case it is a ""magic"" line. The supported cell magic is:; * %args - to set the arguments passed to llvm-tblgen.; * %reset - to reset the cached code and magic state.; * %noreset - to not reset the cached code and magic state; (useful when you have changed the default to always; reset the cache). These are ""cell magic"" meaning it applies to the whole cell. Therefore; it must be the first line, or part of a run of magic lines starting; from the first line. The following are global magic (that applies to all cells going; forward):; * %config - to change the behaviour of the kernel overall, including; changing defaults for things like resets. Global magic must be written in the same way as cell magic. ```tablgen; %args; %reset; %args --print-records --print-detailed-records; class Stuff {; string Name;; }. def a_thing : Stuff {}; ```. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py:332,Performance,cache,cached,332,"""""""Kernel using llvm-tblgen inside jupyter. All input is treated as TableGen unless the first non whitespace character; is ""%"" in which case it is a ""magic"" line. The supported cell magic is:; * %args - to set the arguments passed to llvm-tblgen.; * %reset - to reset the cached code and magic state.; * %noreset - to not reset the cached code and magic state; (useful when you have changed the default to always; reset the cache). These are ""cell magic"" meaning it applies to the whole cell. Therefore; it must be the first line, or part of a run of magic lines starting; from the first line. The following are global magic (that applies to all cells going; forward):; * %config - to change the behaviour of the kernel overall, including; changing defaults for things like resets. Global magic must be written in the same way as cell magic. ```tablgen; %args; %reset; %args --print-records --print-detailed-records; class Stuff {; string Name;; }. def a_thing : Stuff {}; ```. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py:424,Performance,cache,cache,424,"""""""Kernel using llvm-tblgen inside jupyter. All input is treated as TableGen unless the first non whitespace character; is ""%"" in which case it is a ""magic"" line. The supported cell magic is:; * %args - to set the arguments passed to llvm-tblgen.; * %reset - to reset the cached code and magic state.; * %noreset - to not reset the cached code and magic state; (useful when you have changed the default to always; reset the cache). These are ""cell magic"" meaning it applies to the whole cell. Therefore; it must be the first line, or part of a run of magic lines starting; from the first line. The following are global magic (that applies to all cells going; forward):; * %config - to change the behaviour of the kernel overall, including; changing defaults for things like resets. Global magic must be written in the same way as cell magic. ```tablgen; %args; %reset; %args --print-records --print-detailed-records; class Stuff {; string Name;; }. def a_thing : Stuff {}; ```. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py:14,Performance,cache,cache,14,# The default cache reset behaviour. True means do not cache anything; # between cells.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py:55,Performance,cache,cache,55,# The default cache reset behaviour. True means do not cache anything; # between cells.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py:75,Performance,cache,cached,75,"""""""If this is the first run, search for llvm-tblgen.; Otherwise return the cached path to it.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py:257,Availability,error,error,257,"""""""Config should be a list of parameters given to the %config command.; We allow only one setting per %config line and that setting can only; have one value. Assuming the parameters are valid, update the kernel's setting with; the new value. If there is an error, raise a TableGenKernelException. >>> k.parse_config_magic([]); Traceback (most recent call last):; ...; TableGenKernelException: Incorrect number of parameters to %config. Expected %config <setting> <value>.; >>> k._cell_reset; False; >>> k.parse_config_magic([""a"", ""b"", ""c""]); Traceback (most recent call last):; ...; TableGenKernelException: Incorrect number of parameters to %config. Expected %config <setting> <value>.; >>> k.parse_config_magic([""notasetting"", ""...""]); Traceback (most recent call last):; ...; TableGenKernelException: Unknown kernel setting ""notasetting"". Possible settings are: ""cellreset"".; >>> k.parse_config_magic([""cellreset"", ""food""]); Traceback (most recent call last):; ...; TableGenKernelException: Invalid value for setting ""cellreset"", expected ""on"" or ""off"".; >>> k.parse_config_magic([""cellreset"", ""on""]); >>> k._cell_reset; True; >>> k.parse_config_magic([""cellreset"", ""off""]); >>> k._cell_reset; False; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py:193,Deployability,update,update,193,"""""""Config should be a list of parameters given to the %config command.; We allow only one setting per %config line and that setting can only; have one value. Assuming the parameters are valid, update the kernel's setting with; the new value. If there is an error, raise a TableGenKernelException. >>> k.parse_config_magic([]); Traceback (most recent call last):; ...; TableGenKernelException: Incorrect number of parameters to %config. Expected %config <setting> <value>.; >>> k._cell_reset; False; >>> k.parse_config_magic([""a"", ""b"", ""c""]); Traceback (most recent call last):; ...; TableGenKernelException: Incorrect number of parameters to %config. Expected %config <setting> <value>.; >>> k.parse_config_magic([""notasetting"", ""...""]); Traceback (most recent call last):; ...; TableGenKernelException: Unknown kernel setting ""notasetting"". Possible settings are: ""cellreset"".; >>> k.parse_config_magic([""cellreset"", ""food""]); Traceback (most recent call last):; ...; TableGenKernelException: Invalid value for setting ""cellreset"", expected ""on"" or ""off"".; >>> k.parse_config_magic([""cellreset"", ""on""]); >>> k._cell_reset; True; >>> k.parse_config_magic([""cellreset"", ""off""]); >>> k._cell_reset; False; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py:55,Modifiability,config,config,55,"""""""Config should be a list of parameters given to the %config command.; We allow only one setting per %config line and that setting can only; have one value. Assuming the parameters are valid, update the kernel's setting with; the new value. If there is an error, raise a TableGenKernelException. >>> k.parse_config_magic([]); Traceback (most recent call last):; ...; TableGenKernelException: Incorrect number of parameters to %config. Expected %config <setting> <value>.; >>> k._cell_reset; False; >>> k.parse_config_magic([""a"", ""b"", ""c""]); Traceback (most recent call last):; ...; TableGenKernelException: Incorrect number of parameters to %config. Expected %config <setting> <value>.; >>> k.parse_config_magic([""notasetting"", ""...""]); Traceback (most recent call last):; ...; TableGenKernelException: Unknown kernel setting ""notasetting"". Possible settings are: ""cellreset"".; >>> k.parse_config_magic([""cellreset"", ""food""]); Traceback (most recent call last):; ...; TableGenKernelException: Invalid value for setting ""cellreset"", expected ""on"" or ""off"".; >>> k.parse_config_magic([""cellreset"", ""on""]); >>> k._cell_reset; True; >>> k.parse_config_magic([""cellreset"", ""off""]); >>> k._cell_reset; False; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py:103,Modifiability,config,config,103,"""""""Config should be a list of parameters given to the %config command.; We allow only one setting per %config line and that setting can only; have one value. Assuming the parameters are valid, update the kernel's setting with; the new value. If there is an error, raise a TableGenKernelException. >>> k.parse_config_magic([]); Traceback (most recent call last):; ...; TableGenKernelException: Incorrect number of parameters to %config. Expected %config <setting> <value>.; >>> k._cell_reset; False; >>> k.parse_config_magic([""a"", ""b"", ""c""]); Traceback (most recent call last):; ...; TableGenKernelException: Incorrect number of parameters to %config. Expected %config <setting> <value>.; >>> k.parse_config_magic([""notasetting"", ""...""]); Traceback (most recent call last):; ...; TableGenKernelException: Unknown kernel setting ""notasetting"". Possible settings are: ""cellreset"".; >>> k.parse_config_magic([""cellreset"", ""food""]); Traceback (most recent call last):; ...; TableGenKernelException: Invalid value for setting ""cellreset"", expected ""on"" or ""off"".; >>> k.parse_config_magic([""cellreset"", ""on""]); >>> k._cell_reset; True; >>> k.parse_config_magic([""cellreset"", ""off""]); >>> k._cell_reset; False; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py:428,Modifiability,config,config,428,"""""""Config should be a list of parameters given to the %config command.; We allow only one setting per %config line and that setting can only; have one value. Assuming the parameters are valid, update the kernel's setting with; the new value. If there is an error, raise a TableGenKernelException. >>> k.parse_config_magic([]); Traceback (most recent call last):; ...; TableGenKernelException: Incorrect number of parameters to %config. Expected %config <setting> <value>.; >>> k._cell_reset; False; >>> k.parse_config_magic([""a"", ""b"", ""c""]); Traceback (most recent call last):; ...; TableGenKernelException: Incorrect number of parameters to %config. Expected %config <setting> <value>.; >>> k.parse_config_magic([""notasetting"", ""...""]); Traceback (most recent call last):; ...; TableGenKernelException: Unknown kernel setting ""notasetting"". Possible settings are: ""cellreset"".; >>> k.parse_config_magic([""cellreset"", ""food""]); Traceback (most recent call last):; ...; TableGenKernelException: Invalid value for setting ""cellreset"", expected ""on"" or ""off"".; >>> k.parse_config_magic([""cellreset"", ""on""]); >>> k._cell_reset; True; >>> k.parse_config_magic([""cellreset"", ""off""]); >>> k._cell_reset; False; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py:446,Modifiability,config,config,446,"""""""Config should be a list of parameters given to the %config command.; We allow only one setting per %config line and that setting can only; have one value. Assuming the parameters are valid, update the kernel's setting with; the new value. If there is an error, raise a TableGenKernelException. >>> k.parse_config_magic([]); Traceback (most recent call last):; ...; TableGenKernelException: Incorrect number of parameters to %config. Expected %config <setting> <value>.; >>> k._cell_reset; False; >>> k.parse_config_magic([""a"", ""b"", ""c""]); Traceback (most recent call last):; ...; TableGenKernelException: Incorrect number of parameters to %config. Expected %config <setting> <value>.; >>> k.parse_config_magic([""notasetting"", ""...""]); Traceback (most recent call last):; ...; TableGenKernelException: Unknown kernel setting ""notasetting"". Possible settings are: ""cellreset"".; >>> k.parse_config_magic([""cellreset"", ""food""]); Traceback (most recent call last):; ...; TableGenKernelException: Invalid value for setting ""cellreset"", expected ""on"" or ""off"".; >>> k.parse_config_magic([""cellreset"", ""on""]); >>> k._cell_reset; True; >>> k.parse_config_magic([""cellreset"", ""off""]); >>> k._cell_reset; False; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py:643,Modifiability,config,config,643,"""""""Config should be a list of parameters given to the %config command.; We allow only one setting per %config line and that setting can only; have one value. Assuming the parameters are valid, update the kernel's setting with; the new value. If there is an error, raise a TableGenKernelException. >>> k.parse_config_magic([]); Traceback (most recent call last):; ...; TableGenKernelException: Incorrect number of parameters to %config. Expected %config <setting> <value>.; >>> k._cell_reset; False; >>> k.parse_config_magic([""a"", ""b"", ""c""]); Traceback (most recent call last):; ...; TableGenKernelException: Incorrect number of parameters to %config. Expected %config <setting> <value>.; >>> k.parse_config_magic([""notasetting"", ""...""]); Traceback (most recent call last):; ...; TableGenKernelException: Unknown kernel setting ""notasetting"". Possible settings are: ""cellreset"".; >>> k.parse_config_magic([""cellreset"", ""food""]); Traceback (most recent call last):; ...; TableGenKernelException: Invalid value for setting ""cellreset"", expected ""on"" or ""off"".; >>> k.parse_config_magic([""cellreset"", ""on""]); >>> k._cell_reset; True; >>> k.parse_config_magic([""cellreset"", ""off""]); >>> k._cell_reset; False; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py:661,Modifiability,config,config,661,"""""""Config should be a list of parameters given to the %config command.; We allow only one setting per %config line and that setting can only; have one value. Assuming the parameters are valid, update the kernel's setting with; the new value. If there is an error, raise a TableGenKernelException. >>> k.parse_config_magic([]); Traceback (most recent call last):; ...; TableGenKernelException: Incorrect number of parameters to %config. Expected %config <setting> <value>.; >>> k._cell_reset; False; >>> k.parse_config_magic([""a"", ""b"", ""c""]); Traceback (most recent call last):; ...; TableGenKernelException: Incorrect number of parameters to %config. Expected %config <setting> <value>.; >>> k.parse_config_magic([""notasetting"", ""...""]); Traceback (most recent call last):; ...; TableGenKernelException: Unknown kernel setting ""notasetting"". Possible settings are: ""cellreset"".; >>> k.parse_config_magic([""cellreset"", ""food""]); Traceback (most recent call last):; ...; TableGenKernelException: Invalid value for setting ""cellreset"", expected ""on"" or ""off"".; >>> k.parse_config_magic([""cellreset"", ""on""]); >>> k._cell_reset; True; >>> k.parse_config_magic([""cellreset"", ""off""]); >>> k._cell_reset; False; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py:38,Performance,cache,cache,38,"""""""Return true if we should reset the cache, based on the default; setting and the current cell's magic %reset and/or %noreset. >>> k._cell_reset = False; >>> k.should_reset({}); False; >>> k.should_reset({'reset': [], 'noreset': []}); Traceback (most recent call last):; ...; TableGenKernelException: %reset and %noreset in the same cell is not allowed. Use only one, or neither.; >>> k.should_reset({'reset': []}); True; >>> k.should_reset({'noreset': []}); False; >>> k._cell_reset = True; >>> k.should_reset({}); True; >>> k.should_reset({'reset': [], 'noreset': []}); Traceback (most recent call last):; ...; TableGenKernelException: %reset and %noreset in the same cell is not allowed. Use only one, or neither.; >>> k.should_reset({'reset': []}); True; >>> k.should_reset({'noreset': []}); False; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py:83,Performance,cache,cached,83,"""""""Get the code that do_execute should use, taking into account; the code from any cached cells. Returns the code to compile and the arguments to use to do so. >>> k._previous_code = """"; >>> k._previous_magic = {}; >>> k.get_code_and_args(""""); ('', []); >>> k.get_code_and_args(""%args 1\\nSome code""); ('Some code', ['1']); >>> k.get_code_and_args(""%args 2\\nSome more code""); ('Some code\\nSome more code', ['2']); >>> k.get_code_and_args(""%reset\\n%args 3 4\\nSome new code""); ('Some new code', ['3', '4']); >>> k.get_code_and_args(""%reset\\nSome new code""); ('Some new code', []); """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py:16,Deployability,configurat,configuration,16,"# Update kernel configuration first, if needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py:16,Modifiability,config,configuration,16,"# Update kernel configuration first, if needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py:47,Availability,error,error,47,"# If we cannot find llvm-tblgen, propogate the error to the notebook.; # (in case the user is not able to see the output from the Jupyter server)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/tablegen_kernel/kernel.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/testgen/mc-bundling-x86-gen.py:69,Testability,test,test,69,"#!/usr/bin/env python; # Auto-generates an exhaustive and repetitive test for correct bundle-locked; # alignment on x86.; # For every possible offset in an aligned bundle, a bundle-locked group of every; # size in the inclusive range [1, bundle_size] is inserted. An appropriate CHECK; # is added to verify that NOP padding occurred (or did not occur) as expected.; # Run with --align-to-end to generate a similar test with align_to_end for each; # .bundle_lock directive.; # This script runs with Python 2.7 and 3.2+",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/testgen/mc-bundling-x86-gen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/testgen/mc-bundling-x86-gen.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/testgen/mc-bundling-x86-gen.py:414,Testability,test,test,414,"#!/usr/bin/env python; # Auto-generates an exhaustive and repetitive test for correct bundle-locked; # alignment on x86.; # For every possible offset in an aligned bundle, a bundle-locked group of every; # size in the inclusive range [1, bundle_size] is inserted. An appropriate CHECK; # is added to verify that NOP padding occurred (or did not occur) as expected.; # Run with --align-to-end to generate a similar test with align_to_end for each; # .bundle_lock directive.; # This script runs with Python 2.7 and 3.2+",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/testgen/mc-bundling-x86-gen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/testgen/mc-bundling-x86-gen.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/testgen/mc-bundling-x86-gen.py:167,Testability,test,test,167,"""""""; # RUN: llvm-mc -filetype=obj -triple i386-pc-linux-gnu %s -o - \\; # RUN: | llvm-objdump -triple i386 -disassemble -no-show-raw-insn - | FileCheck %s. # !!! This test is auto-generated from utils/testgen/mc-bundling-x86-gen.py !!!; # It tests that bundle-aligned grouping works correctly in MC. Read the; # source of the script for more details. .text; .bundle_align_mode {0}; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/testgen/mc-bundling-x86-gen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/testgen/mc-bundling-x86-gen.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/testgen/mc-bundling-x86-gen.py:201,Testability,test,testgen,201,"""""""; # RUN: llvm-mc -filetype=obj -triple i386-pc-linux-gnu %s -o - \\; # RUN: | llvm-objdump -triple i386 -disassemble -no-show-raw-insn - | FileCheck %s. # !!! This test is auto-generated from utils/testgen/mc-bundling-x86-gen.py !!!; # It tests that bundle-aligned grouping works correctly in MC. Read the; # source of the script for more details. .text; .bundle_align_mode {0}; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/testgen/mc-bundling-x86-gen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/testgen/mc-bundling-x86-gen.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/testgen/mc-bundling-x86-gen.py:242,Testability,test,tests,242,"""""""; # RUN: llvm-mc -filetype=obj -triple i386-pc-linux-gnu %s -o - \\; # RUN: | llvm-objdump -triple i386 -disassemble -no-show-raw-insn - | FileCheck %s. # !!! This test is auto-generated from utils/testgen/mc-bundling-x86-gen.py !!!; # It tests that bundle-aligned grouping works correctly in MC. Read the; # source of the script for more details. .text; .bundle_align_mode {0}; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/testgen/mc-bundling-x86-gen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/testgen/mc-bundling-x86-gen.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/asm.py:55,Modifiability,variab,variable,55,"# We parse the function name from OpName, and grab the variable name 'var'; # for this function. Then we match that when the variable is assigned with; # OpFunction and match its body.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/asm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/asm.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/asm.py:125,Modifiability,variab,variable,125,"# We parse the function name from OpName, and grab the variable name 'var'; # for this function. Then we match that when the variable is assigned with; # OpFunction and match its body.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/asm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/asm.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:53,Testability,test,tests,53,"""""""; Version changelog:. 1: Initial version, used by tests that don't specify --version explicitly.; 2: --function-signature is now enabled by default and also checks return; type/attributes.; 3: Opening parenthesis of function args is kept on the first LABEL line; in case arguments are split to a separate SAME line.; 4: --check-globals now has a third option ('smart'). The others are now called; 'none' and 'all'. 'smart' is the default.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:106,Integrability,wrap,wraps,106,"""""""Add a regular expression option value to a list of regular expressions.; This compiles the expression, wraps it in a Regex and adds it to the option; value list.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:49,Testability,test,tests,49,# This is the default when regenerating existing tests. The default when; # generating new tests is determined by DEFAULT_VERSION.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:91,Testability,test,tests,91,# This is the default when regenerating existing tests. The default when; # generating new tests is determined by DEFAULT_VERSION.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:28,Testability,test,test,28,"# If we're generating a new test, set the default version to the latest.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:32,Testability,test,tested,32,# Invoke the tool that is being tested.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:106,Safety,safe,safer,106,# TODO Remove the str form which is used by update_test_checks.py and; # update_llc_test_checks.py; # The safer list form is used by update_cc_test_checks.py,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:41,Availability,error,error,41,"# FYI, if you crashed here with a decode error, your run line probably; # results in bitcode or other binary format being written to the pipe.; # For an opt test, you probably want to add -S or -disable-output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:157,Testability,test,test,157,"# FYI, if you crashed here with a decode error, your run line probably; # results in bitcode or other binary format being written to the pipe.; # For an opt test, you probably want to add -S or -disable-output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:60,Testability,test,tests,60,# We only use the last line of the function body for stress tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:117,Testability,test,tests,117,# An earlier RUN line used this check prefixes but didn't produce; # a body for this function. This happens in Clang tests that use; # preprocesser directives to exclude individual functions from some; # RUN lines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:7,Modifiability,variab,variable,7,"# Some variable numbers (e.g. MCINST1234) will change based on unrelated; # modifications to LLVM, replace those with an incrementing counter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:21,Modifiability,variab,variable,21,# Create a FileCheck variable name based on an IR name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:10,Modifiability,variab,variable,10,# Replace variable with an incrementing counter,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:21,Modifiability,variab,variable,21,# Create a FileCheck variable from regex.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:18,Modifiability,variab,variable,18,# Use a FileCheck variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:9,Modifiability,variab,variable,9,# global variable names should be matched literally,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:67,Modifiability,variab,variable,67,"# Build the regexp that matches an ""IR value"". This can be a local variable,; # argument, global, or metadata, anything that is ""named"". It is important that; # the PREFIX and SUFFIX below only contain a single group, if that changes; # other locations will need adjustment as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:73,Modifiability,variab,variables,73,"# This gets called for each match that occurs in; # a line. We transform variables we haven't seen; # into defs, and variables we have seen into uses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:117,Modifiability,variab,variables,117,"# This gets called for each match that occurs in; # a line. We transform variables we haven't seen; # into defs, and variables we have seen into uses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:55,Modifiability,variab,variables,55,"# We could have seen a different prefix for the global variables first,; # ensure we use that one instead of the prefix for the current match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:8,Modifiability,variab,variable,8,# An IR variable named '%.' matches the FileCheck regex string.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:48,Modifiability,variab,variables,48,# Replace IR value defs and uses with FileCheck variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:100,Testability,test,test,100,"# Add some space between different check prefixes, but not after the last; # check line (before the test code).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:22,Modifiability,variab,variables,22,# Remember new global variables we have not seen before,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:94,Testability,test,test,94,# Add space between different check prefixes and also before the first; # line of code in the test function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:22,Modifiability,variab,variables,22,# Remember new global variables we have not seen before,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:46,Modifiability,variab,variables,46,"# For IR output, change all defs to FileCheck variables, so we're immune; # to variable naming fashions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:79,Modifiability,variab,variable,79,"# For IR output, change all defs to FileCheck variables, so we're immune; # to variable naming fashions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:126,Safety,safe,safe,126,"# This could be selectively enabled with an optional invocation argument.; # Disabled for now: better to check everything. Be safe rather than sorry.; # Handle the first line of the function body as a special case because; # it's often just noise (a useless asm comment or entry label).; # if func_body[0].startswith(""#"") or func_body[0].startswith(""entry:""):; # is_blank_line = True; # else:; # output_lines.append('%s %s: %s' % (comment_marker, checkprefix, func_body[0])); # is_blank_line = False",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:94,Testability,test,test,94,# Add space between different check prefixes and also before the first; # line of code in the test function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:22,Modifiability,variab,variables,22,# Remember new global variables we have not seen before,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:21,Modifiability,variab,variables,21,# Remembe new global variables we have not seen before,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:63,Testability,test,tests,63,# Ignore parameters such as paths to the binary or the list of tests,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:114,Testability,test,test,114,"# See if this has been specified via UTC_ARGS. This is a ""global"" option; # that affects the entire generation of test checks. If it exists anywhere; # in the test, apply it to everything.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:159,Testability,test,test,159,"# See if this has been specified via UTC_ARGS. This is a ""global"" option; # that affects the entire generation of test checks. If it exists anywhere; # in the test, apply it to everything.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:47,Testability,test,test,47,# We saw the option after already reading some test input lines.; # Warn about it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:19,Integrability,rout,routines,19,"# The add_*_checks routines expect a run list whose items are; # tuples that have a list of prefixes as their first element and; # tool command args string as their second element. They output; # checks for each prefix in the list of prefixes. By doing so, it; # implicitly assumes that for each function every run line will; # generate something for that function. That is not the case for; # generated functions as some run lines might not generate them; # (e.g. -fopenmp vs. no -fopenmp).; #; # Therefore, pass just the prefix we're interested in. This has; # the effect of generating all of the checks for functions of a; # single prefix before moving on to the next prefix. So checks; # are ordered by prefix instead of by function as in ""normal""; # mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py
https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py:63,Modifiability,inherit,inheritable,63,"# copy stdout_fd before it is overwritten; # NOTE: `copied` is inheritable on Windows when duplicating a standard stream",MatchSource.CODE_COMMENT,main/python/cmdLineUtils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py
https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py:69,Modifiability,inherit,inheritable,69,"# restore source to its previous value; # NOTE: dup2 makes stdout_fd inheritable unconditionally",MatchSource.CODE_COMMENT,main/python/cmdLineUtils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py
https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py:58,Modifiability,inherit,inherits,58,"""""""; Return True if the object, corresponding to the key, inherits from TDirectory; """"""",MatchSource.CODE_COMMENT,main/python/cmdLineUtils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py
https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py:58,Modifiability,inherit,inherits,58,"""""""; Return True if the object, corresponding to the key, inherits from TTree; """"""",MatchSource.CODE_COMMENT,main/python/cmdLineUtils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py
https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py:58,Modifiability,inherit,inherits,58,"""""""; Return True if the object, corresponding to the key, inherits from THnSparse; """"""",MatchSource.CODE_COMMENT,main/python/cmdLineUtils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py
https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py:71,Modifiability,inherit,inherits,71,"""""""; Return True if the object, corresponding to (rootFile,pathSplit), inherits from TDirectory; """"""",MatchSource.CODE_COMMENT,main/python/cmdLineUtils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py
https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py:71,Modifiability,inherit,inherits,71,"""""""; Return True if the object, corresponding to (rootFile,pathSplit), inherits from TTree; """"""",MatchSource.CODE_COMMENT,main/python/cmdLineUtils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py
https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py:16,Safety,avoid,avoiding,16,"# Split pattern avoiding multiple slash problem",MatchSource.CODE_COMMENT,main/python/cmdLineUtils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py
https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py:201,Energy Efficiency,adapt,adaptation,201,"""""""; Copy objects from a file or directory (sourceFile,sourcePathSplit); to an other file or directory (destFile,destPathSplit); - Has the will to be unix-like; - that's a recursive function; - Python adaptation of a root input/output tutorial :; $ROOTSYS/tutorials/io/copyFiles.C; """"""",MatchSource.CODE_COMMENT,main/python/cmdLineUtils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py
https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py:201,Modifiability,adapt,adaptation,201,"""""""; Copy objects from a file or directory (sourceFile,sourcePathSplit); to an other file or directory (destFile,destPathSplit); - Has the will to be unix-like; - that's a recursive function; - Python adaptation of a root input/output tutorial :; $ROOTSYS/tutorials/io/copyFiles.C; """"""",MatchSource.CODE_COMMENT,main/python/cmdLineUtils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py
https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py:12,Testability,log,logic,12,"# Mimic the logic used in TDirectoryFile::ls(Option_t *option); # For any key in the list, we need to grab the previous one and the next one.; # To do this, we use the iterator returned by zip_longest. The three input; # lists to zip_longest can be visualized as follows:; #; # a = [""key_1"",""key_2"",""key_3""]; # a_lagright = [None] + a[:-1]; # a_lagleft = a[1:]; # list(zip_longest(a_lagright, a, a_lagleft)); # [(None, 'key_1', 'key_2'), ('key_1', 'key_2', 'key_3'), ('key_2', 'key_3', None)]; #; # So that for any key, we can have a correct reference to the previous and; # following keys of `keyList`. The first key has no previous key and the last; # key has no following key, so the respective elements of the zip_longest; # iterator are `None`.",MatchSource.CODE_COMMENT,main/python/cmdLineUtils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py
https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py:63,Energy Efficiency,green,green,63,"""""""Print list of strings in columns; - blue for directories; - green for trees""""""",MatchSource.CODE_COMMENT,main/python/cmdLineUtils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py
https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py:15,Energy Efficiency,adapt,adapted,15,"# This code is adapted from the pprint_list function here :; # http://stackoverflow.com/questions/25026556/output-list-like-ls; # Thanks hawkjo !!",MatchSource.CODE_COMMENT,main/python/cmdLineUtils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py
https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py:15,Modifiability,adapt,adapted,15,"# This code is adapted from the pprint_list function here :; # http://stackoverflow.com/questions/25026556/output-list-like-ls; # Thanks hawkjo !!",MatchSource.CODE_COMMENT,main/python/cmdLineUtils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py
https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py:48,Energy Efficiency,reduce,reduce,48,"# Start with max possible number of columns and reduce until it fits",MatchSource.CODE_COMMENT,main/python/cmdLineUtils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py
https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py:15,Integrability,rout,routine,15,"""""""rootls main routine for one file looping over paths in the file. sorts out directories and key, and loops over all paths, then forwards to; (_rootLsPrintLongLs or _rootLsPrintSimpleLs) - split in _rootLsPrint. args:; oneColumn (bool):; longListing (bool):; treeListing (bool):; recursiveListing(bool):; indent (int): how many columns the printout should be indented globally; manySources (bool): if more than one file is printed; fileName (str): the root file name; pathSplitList: a list of subdirectories,; each being represented as a list itself with a string per level; e.g.; [['Method_BDT','BDT']]; Returns:; retcode (int): 0 in case of success, 1 if the file could not be opened; """"""",MatchSource.CODE_COMMENT,main/python/cmdLineUtils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py
https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py:15,Integrability,rout,routine,15,"""""""rootls main routine for an arbitrary number of files. args:; oneColumn (bool):; longListing (bool):; treeListing (bool):; recursiveListing(bool):; sourceList: a list of tuples with one list element per file; the first tuple entry being the root file,; the second a list of subdirectories,; each being represented as a list itself with a string per level; e.g.; rootls tutorial/tmva/TMVA.root:Method_BDT/BDT turns into; [('tutorials/tmva/TMVA.root', [['Method_BDT','BDT']])]. returns:; retcode (int): 0 in case of success; """"""",MatchSource.CODE_COMMENT,main/python/cmdLineUtils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py
https://github.com/root-project/root/tree/v6-32-06/main/python/rootdrawtree.py:127,Deployability,configurat,configuration,127,"'''\; Python script that loops over a chain to create histograms.; There are two ways to do it: one is parsing the name of the configuration file as argument,; that must have a proper syntax as shown in the class documentation of TSimpleAnalysis. Example:; user@users-desktop:~$ rootdrawtree input_file.txt # input_file.txt is the configuration file. The other way is to pass as arguments the name of the output file, the name of the .root input; files, the expressions (that will be shown in the histograms) and the name of the tree (that; is optional if there is only one tree inside the first .root input file). Examples:; user@users-desktop:~$ rootdrawtree --output output.root --input hsimple.root --tree ntuple --histo 'hpxpy=px:py if px>2'; user@users-desktop:~$ rootdrawtree --output output.root --input hsimple.root hsimple2.root --histo 'hpx=px' 'hpxpy=px:py if px>2'. '''",MatchSource.CODE_COMMENT,main/python/rootdrawtree.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/rootdrawtree.py
https://github.com/root-project/root/tree/v6-32-06/main/python/rootdrawtree.py:331,Deployability,configurat,configuration,331,"'''\; Python script that loops over a chain to create histograms.; There are two ways to do it: one is parsing the name of the configuration file as argument,; that must have a proper syntax as shown in the class documentation of TSimpleAnalysis. Example:; user@users-desktop:~$ rootdrawtree input_file.txt # input_file.txt is the configuration file. The other way is to pass as arguments the name of the output file, the name of the .root input; files, the expressions (that will be shown in the histograms) and the name of the tree (that; is optional if there is only one tree inside the first .root input file). Examples:; user@users-desktop:~$ rootdrawtree --output output.root --input hsimple.root --tree ntuple --histo 'hpxpy=px:py if px>2'; user@users-desktop:~$ rootdrawtree --output output.root --input hsimple.root hsimple2.root --histo 'hpx=px' 'hpxpy=px:py if px>2'. '''",MatchSource.CODE_COMMENT,main/python/rootdrawtree.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/rootdrawtree.py
https://github.com/root-project/root/tree/v6-32-06/main/python/rootdrawtree.py:127,Modifiability,config,configuration,127,"'''\; Python script that loops over a chain to create histograms.; There are two ways to do it: one is parsing the name of the configuration file as argument,; that must have a proper syntax as shown in the class documentation of TSimpleAnalysis. Example:; user@users-desktop:~$ rootdrawtree input_file.txt # input_file.txt is the configuration file. The other way is to pass as arguments the name of the output file, the name of the .root input; files, the expressions (that will be shown in the histograms) and the name of the tree (that; is optional if there is only one tree inside the first .root input file). Examples:; user@users-desktop:~$ rootdrawtree --output output.root --input hsimple.root --tree ntuple --histo 'hpxpy=px:py if px>2'; user@users-desktop:~$ rootdrawtree --output output.root --input hsimple.root hsimple2.root --histo 'hpx=px' 'hpxpy=px:py if px>2'. '''",MatchSource.CODE_COMMENT,main/python/rootdrawtree.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/rootdrawtree.py
https://github.com/root-project/root/tree/v6-32-06/main/python/rootdrawtree.py:331,Modifiability,config,configuration,331,"'''\; Python script that loops over a chain to create histograms.; There are two ways to do it: one is parsing the name of the configuration file as argument,; that must have a proper syntax as shown in the class documentation of TSimpleAnalysis. Example:; user@users-desktop:~$ rootdrawtree input_file.txt # input_file.txt is the configuration file. The other way is to pass as arguments the name of the output file, the name of the .root input; files, the expressions (that will be shown in the histograms) and the name of the tree (that; is optional if there is only one tree inside the first .root input file). Examples:; user@users-desktop:~$ rootdrawtree --output output.root --input hsimple.root --tree ntuple --histo 'hpxpy=px:py if px>2'; user@users-desktop:~$ rootdrawtree --output output.root --input hsimple.root hsimple2.root --histo 'hpx=px' 'hpxpy=px:py if px>2'. '''",MatchSource.CODE_COMMENT,main/python/rootdrawtree.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/rootdrawtree.py
https://github.com/root-project/root/tree/v6-32-06/main/python/rooteventselector.py:940,Availability,avail,available,940,"""""""Examples:; - rooteventselector source.root:tree dest.root; Copy the tree 'tree' from 'source.root' to 'dest.root'. - rooteventselector -f 101 source.root:tree dest.root; Copy a subset of the tree 'tree' from 'source.root' to 'dest.root'. The new tree contains events from the old tree except the first hundred. - rooteventselector -l 100 source.root:tree dest.root; Copy a subset of the tree 'tree' from 'source.root' to 'dest.root'. The new tree contains the first hundred events from the old tree. - rooteventselector --recreate source.root:tree dest.root; Recreate the destination file 'dest.root' and copy the tree 'tree' from 'source.root' to 'dest.root'. - rooteventselector -c 1 source.root:tree dest.root; Change the compression factor of the destination file 'dest.root' and copy the tree 'tree' from 'source.root' to 'dest.root'. For more information about compression settings of ROOT file, please look at the reference guide available on the ROOT site. - rooteventselector -s ""(branch1Value > 100)&&( branch2Value )"" source.root:tree dest.root; Copy the tree 'tree' from 'source.root' to 'dest.root' and apply a selection to the output tree. - rooteventselector -e ""muon_*"" source.root:tree dest.root; Copy the tree 'tree' from 'source.root' to 'dest.root' and remove branches matching ""muon_*"". - rooteventselector -e ""*"" -i ""muon_*"" source.root:tree dest.root; Copy the tree 'tree' from 'source.root' to 'dest.root' and only write branches matching ""muon_*""; """"""",MatchSource.CODE_COMMENT,main/python/rooteventselector.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/rooteventselector.py
https://github.com/root-project/root/tree/v6-32-06/main/python/rooteventselector.py:934,Usability,guid,guide,934,"""""""Examples:; - rooteventselector source.root:tree dest.root; Copy the tree 'tree' from 'source.root' to 'dest.root'. - rooteventselector -f 101 source.root:tree dest.root; Copy a subset of the tree 'tree' from 'source.root' to 'dest.root'. The new tree contains events from the old tree except the first hundred. - rooteventselector -l 100 source.root:tree dest.root; Copy a subset of the tree 'tree' from 'source.root' to 'dest.root'. The new tree contains the first hundred events from the old tree. - rooteventselector --recreate source.root:tree dest.root; Recreate the destination file 'dest.root' and copy the tree 'tree' from 'source.root' to 'dest.root'. - rooteventselector -c 1 source.root:tree dest.root; Change the compression factor of the destination file 'dest.root' and copy the tree 'tree' from 'source.root' to 'dest.root'. For more information about compression settings of ROOT file, please look at the reference guide available on the ROOT site. - rooteventselector -s ""(branch1Value > 100)&&( branch2Value )"" source.root:tree dest.root; Copy the tree 'tree' from 'source.root' to 'dest.root' and apply a selection to the output tree. - rooteventselector -e ""muon_*"" source.root:tree dest.root; Copy the tree 'tree' from 'source.root' to 'dest.root' and remove branches matching ""muon_*"". - rooteventselector -e ""*"" -i ""muon_*"" source.root:tree dest.root; Copy the tree 'tree' from 'source.root' to 'dest.root' and only write branches matching ""muon_*""; """"""",MatchSource.CODE_COMMENT,main/python/rooteventselector.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/rooteventselector.py
https://github.com/root-project/root/tree/v6-32-06/main/python/rootmkdir.py:308,Availability,error,error,308,"""""""Examples:; - rootmkdir example.root:dir; Add the directory 'dir' to the ROOT file 'example.root'. - rootmkdir example.root:dir1/dir2; Add the directory 'dir2' in 'dir1' which is into the ROOT file 'example.root'. - rootmkdir -p example.root:dir1/dir2/dir3; Make parent directories of 'dir3' as needed, no error if existing. - rootmkdir example.root; Create an empty ROOT file named 'example.root'; """"""",MatchSource.CODE_COMMENT,main/python/rootmkdir.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/rootmkdir.py
https://github.com/root-project/root/tree/v6-32-06/main/python/rootslimtree.py:540,Availability,avail,available,540,"""""""Examples:; - rootslimtree source.root:tree dest.root; Copy the tree 'tree' from 'source.root' to 'dest.root'. - rootslimtree --recreate source.root:tree dest.root; Recreate the destination file 'dest.root' and copy the tree 'tree' from 'source.root' to 'dest.root'. - rootslimtree -c 1 source.root:tree dest.root; Change the compression factor of the destination file 'dest.root' and copy the tree 'tree' from 'source.root' to 'dest.root'. For more information about compression settings of ROOT file, please look at the reference guide available on the ROOT site. - rootslimtree -e ""muon_*"" source.root:tree dest.root; Copy the tree 'tree' from 'source.root' to 'dest.root' and remove branches matching ""muon_*"". - rootslimtree -e ""*"" -i ""muon_*"" source.root:tree dest.root; Copy the tree 'tree' from 'source.root' to 'dest.root' and only write branches matching ""muon_*""; """"""",MatchSource.CODE_COMMENT,main/python/rootslimtree.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/rootslimtree.py
https://github.com/root-project/root/tree/v6-32-06/main/python/rootslimtree.py:534,Usability,guid,guide,534,"""""""Examples:; - rootslimtree source.root:tree dest.root; Copy the tree 'tree' from 'source.root' to 'dest.root'. - rootslimtree --recreate source.root:tree dest.root; Recreate the destination file 'dest.root' and copy the tree 'tree' from 'source.root' to 'dest.root'. - rootslimtree -c 1 source.root:tree dest.root; Change the compression factor of the destination file 'dest.root' and copy the tree 'tree' from 'source.root' to 'dest.root'. For more information about compression settings of ROOT file, please look at the reference guide available on the ROOT site. - rootslimtree -e ""muon_*"" source.root:tree dest.root; Copy the tree 'tree' from 'source.root' to 'dest.root' and remove branches matching ""muon_*"". - rootslimtree -e ""*"" -i ""muon_*"" source.root:tree dest.root; Copy the tree 'tree' from 'source.root' to 'dest.root' and only write branches matching ""muon_*""; """"""",MatchSource.CODE_COMMENT,main/python/rootslimtree.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/rootslimtree.py
https://github.com/root-project/root/tree/v6-32-06/main/python/rootslimtree.py:31,Usability,simpl,simplified,31,"# Process rootEventselector in simplified slimtree mode",MatchSource.CODE_COMMENT,main/python/rootslimtree.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/rootslimtree.py
https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libCore.so-gdb.py:303,Deployability,install,installed,303,"# Pretty printers for gdb; # \author: Stephan Hageboeck, CERN; # These pretty printers will make ROOT objects more readable when printed in gdb.; # If the pretty-printed output is not sufficient, one can always use ""print /r <object>""; # for raw printing.; #; # When a debug build is used, they will be installed next to the ROOT libraries.; # gdb will load them automatically if the auto-load-safe-path is set to ROOT's library directory.; # For this, one has to add `add-auto-load-safe-path <ROOT lib dir>` to .gdbinit; #; # If loaded successfully, typing `info pretty-printer` at the gdb prompt should list the; # printers registered at the end of this file.",MatchSource.CODE_COMMENT,misc/gdbPrinters/libCore.so-gdb.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libCore.so-gdb.py
https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libCore.so-gdb.py:353,Performance,load,load,353,"# Pretty printers for gdb; # \author: Stephan Hageboeck, CERN; # These pretty printers will make ROOT objects more readable when printed in gdb.; # If the pretty-printed output is not sufficient, one can always use ""print /r <object>""; # for raw printing.; #; # When a debug build is used, they will be installed next to the ROOT libraries.; # gdb will load them automatically if the auto-load-safe-path is set to ROOT's library directory.; # For this, one has to add `add-auto-load-safe-path <ROOT lib dir>` to .gdbinit; #; # If loaded successfully, typing `info pretty-printer` at the gdb prompt should list the; # printers registered at the end of this file.",MatchSource.CODE_COMMENT,misc/gdbPrinters/libCore.so-gdb.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libCore.so-gdb.py
https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libCore.so-gdb.py:389,Performance,load,load-safe-path,389,"# Pretty printers for gdb; # \author: Stephan Hageboeck, CERN; # These pretty printers will make ROOT objects more readable when printed in gdb.; # If the pretty-printed output is not sufficient, one can always use ""print /r <object>""; # for raw printing.; #; # When a debug build is used, they will be installed next to the ROOT libraries.; # gdb will load them automatically if the auto-load-safe-path is set to ROOT's library directory.; # For this, one has to add `add-auto-load-safe-path <ROOT lib dir>` to .gdbinit; #; # If loaded successfully, typing `info pretty-printer` at the gdb prompt should list the; # printers registered at the end of this file.",MatchSource.CODE_COMMENT,misc/gdbPrinters/libCore.so-gdb.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libCore.so-gdb.py
https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libCore.so-gdb.py:478,Performance,load,load-safe-path,478,"# Pretty printers for gdb; # \author: Stephan Hageboeck, CERN; # These pretty printers will make ROOT objects more readable when printed in gdb.; # If the pretty-printed output is not sufficient, one can always use ""print /r <object>""; # for raw printing.; #; # When a debug build is used, they will be installed next to the ROOT libraries.; # gdb will load them automatically if the auto-load-safe-path is set to ROOT's library directory.; # For this, one has to add `add-auto-load-safe-path <ROOT lib dir>` to .gdbinit; #; # If loaded successfully, typing `info pretty-printer` at the gdb prompt should list the; # printers registered at the end of this file.",MatchSource.CODE_COMMENT,misc/gdbPrinters/libCore.so-gdb.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libCore.so-gdb.py
https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libCore.so-gdb.py:530,Performance,load,loaded,530,"# Pretty printers for gdb; # \author: Stephan Hageboeck, CERN; # These pretty printers will make ROOT objects more readable when printed in gdb.; # If the pretty-printed output is not sufficient, one can always use ""print /r <object>""; # for raw printing.; #; # When a debug build is used, they will be installed next to the ROOT libraries.; # gdb will load them automatically if the auto-load-safe-path is set to ROOT's library directory.; # For this, one has to add `add-auto-load-safe-path <ROOT lib dir>` to .gdbinit; #; # If loaded successfully, typing `info pretty-printer` at the gdb prompt should list the; # printers registered at the end of this file.",MatchSource.CODE_COMMENT,misc/gdbPrinters/libCore.so-gdb.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libCore.so-gdb.py
https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libCore.so-gdb.py:394,Safety,safe,safe-path,394,"# Pretty printers for gdb; # \author: Stephan Hageboeck, CERN; # These pretty printers will make ROOT objects more readable when printed in gdb.; # If the pretty-printed output is not sufficient, one can always use ""print /r <object>""; # for raw printing.; #; # When a debug build is used, they will be installed next to the ROOT libraries.; # gdb will load them automatically if the auto-load-safe-path is set to ROOT's library directory.; # For this, one has to add `add-auto-load-safe-path <ROOT lib dir>` to .gdbinit; #; # If loaded successfully, typing `info pretty-printer` at the gdb prompt should list the; # printers registered at the end of this file.",MatchSource.CODE_COMMENT,misc/gdbPrinters/libCore.so-gdb.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libCore.so-gdb.py
https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libCore.so-gdb.py:483,Safety,safe,safe-path,483,"# Pretty printers for gdb; # \author: Stephan Hageboeck, CERN; # These pretty printers will make ROOT objects more readable when printed in gdb.; # If the pretty-printed output is not sufficient, one can always use ""print /r <object>""; # for raw printing.; #; # When a debug build is used, they will be installed next to the ROOT libraries.; # gdb will load them automatically if the auto-load-safe-path is set to ROOT's library directory.; # For this, one has to add `add-auto-load-safe-path <ROOT lib dir>` to .gdbinit; #; # If loaded successfully, typing `info pretty-printer` at the gdb prompt should list the; # printers registered at the end of this file.",MatchSource.CODE_COMMENT,misc/gdbPrinters/libCore.so-gdb.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libCore.so-gdb.py
https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libRooFitCore.so-gdb.py:303,Deployability,install,installed,303,"# Pretty printers for gdb; # \author: Stephan Hageboeck, CERN; # These pretty printers will make ROOT objects more readable when printed in gdb.; # If the pretty-printed output is not sufficient, one can always use ""print /r <object>""; # for raw printing.; #; # When a debug build is used, they will be installed next to the ROOT libraries.; # gdb will load them automatically if the auto-load-safe-path is set to ROOT's library directory.; # For this, one has to add `add-auto-load-safe-path <ROOT lib dir>` to .gdbinit; #; # If loaded successfully, typing `info pretty-printer` at the gdb prompt should list the; # printers registered at the end of this file.",MatchSource.CODE_COMMENT,misc/gdbPrinters/libRooFitCore.so-gdb.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libRooFitCore.so-gdb.py
https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libRooFitCore.so-gdb.py:353,Performance,load,load,353,"# Pretty printers for gdb; # \author: Stephan Hageboeck, CERN; # These pretty printers will make ROOT objects more readable when printed in gdb.; # If the pretty-printed output is not sufficient, one can always use ""print /r <object>""; # for raw printing.; #; # When a debug build is used, they will be installed next to the ROOT libraries.; # gdb will load them automatically if the auto-load-safe-path is set to ROOT's library directory.; # For this, one has to add `add-auto-load-safe-path <ROOT lib dir>` to .gdbinit; #; # If loaded successfully, typing `info pretty-printer` at the gdb prompt should list the; # printers registered at the end of this file.",MatchSource.CODE_COMMENT,misc/gdbPrinters/libRooFitCore.so-gdb.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libRooFitCore.so-gdb.py
https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libRooFitCore.so-gdb.py:389,Performance,load,load-safe-path,389,"# Pretty printers for gdb; # \author: Stephan Hageboeck, CERN; # These pretty printers will make ROOT objects more readable when printed in gdb.; # If the pretty-printed output is not sufficient, one can always use ""print /r <object>""; # for raw printing.; #; # When a debug build is used, they will be installed next to the ROOT libraries.; # gdb will load them automatically if the auto-load-safe-path is set to ROOT's library directory.; # For this, one has to add `add-auto-load-safe-path <ROOT lib dir>` to .gdbinit; #; # If loaded successfully, typing `info pretty-printer` at the gdb prompt should list the; # printers registered at the end of this file.",MatchSource.CODE_COMMENT,misc/gdbPrinters/libRooFitCore.so-gdb.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libRooFitCore.so-gdb.py
https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libRooFitCore.so-gdb.py:478,Performance,load,load-safe-path,478,"# Pretty printers for gdb; # \author: Stephan Hageboeck, CERN; # These pretty printers will make ROOT objects more readable when printed in gdb.; # If the pretty-printed output is not sufficient, one can always use ""print /r <object>""; # for raw printing.; #; # When a debug build is used, they will be installed next to the ROOT libraries.; # gdb will load them automatically if the auto-load-safe-path is set to ROOT's library directory.; # For this, one has to add `add-auto-load-safe-path <ROOT lib dir>` to .gdbinit; #; # If loaded successfully, typing `info pretty-printer` at the gdb prompt should list the; # printers registered at the end of this file.",MatchSource.CODE_COMMENT,misc/gdbPrinters/libRooFitCore.so-gdb.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libRooFitCore.so-gdb.py
https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libRooFitCore.so-gdb.py:530,Performance,load,loaded,530,"# Pretty printers for gdb; # \author: Stephan Hageboeck, CERN; # These pretty printers will make ROOT objects more readable when printed in gdb.; # If the pretty-printed output is not sufficient, one can always use ""print /r <object>""; # for raw printing.; #; # When a debug build is used, they will be installed next to the ROOT libraries.; # gdb will load them automatically if the auto-load-safe-path is set to ROOT's library directory.; # For this, one has to add `add-auto-load-safe-path <ROOT lib dir>` to .gdbinit; #; # If loaded successfully, typing `info pretty-printer` at the gdb prompt should list the; # printers registered at the end of this file.",MatchSource.CODE_COMMENT,misc/gdbPrinters/libRooFitCore.so-gdb.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libRooFitCore.so-gdb.py
https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libRooFitCore.so-gdb.py:394,Safety,safe,safe-path,394,"# Pretty printers for gdb; # \author: Stephan Hageboeck, CERN; # These pretty printers will make ROOT objects more readable when printed in gdb.; # If the pretty-printed output is not sufficient, one can always use ""print /r <object>""; # for raw printing.; #; # When a debug build is used, they will be installed next to the ROOT libraries.; # gdb will load them automatically if the auto-load-safe-path is set to ROOT's library directory.; # For this, one has to add `add-auto-load-safe-path <ROOT lib dir>` to .gdbinit; #; # If loaded successfully, typing `info pretty-printer` at the gdb prompt should list the; # printers registered at the end of this file.",MatchSource.CODE_COMMENT,misc/gdbPrinters/libRooFitCore.so-gdb.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libRooFitCore.so-gdb.py
https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libRooFitCore.so-gdb.py:483,Safety,safe,safe-path,483,"# Pretty printers for gdb; # \author: Stephan Hageboeck, CERN; # These pretty printers will make ROOT objects more readable when printed in gdb.; # If the pretty-printed output is not sufficient, one can always use ""print /r <object>""; # for raw printing.; #; # When a debug build is used, they will be installed next to the ROOT libraries.; # gdb will load them automatically if the auto-load-safe-path is set to ROOT's library directory.; # For this, one has to add `add-auto-load-safe-path <ROOT lib dir>` to .gdbinit; #; # If loaded successfully, typing `info pretty-printer` at the gdb prompt should list the; # printers registered at the end of this file.",MatchSource.CODE_COMMENT,misc/gdbPrinters/libRooFitCore.so-gdb.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/libRooFitCore.so-gdb.py
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py:29,Performance,optimiz,optimizer,29,"#Construct loss function and optimizer",MatchSource.CODE_COMMENT,tmva/pymva/test/generatePyTorchModels.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py:21,Testability,test,test,21,"#Constructing random test dataset",MatchSource.CODE_COMMENT,tmva/pymva/test/generatePyTorchModels.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py:29,Performance,optimiz,optimizer,29,"#Construct loss function and optimizer",MatchSource.CODE_COMMENT,tmva/pymva/test/generatePyTorchModels.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py:21,Testability,test,test,21,"#Constructing random test dataset",MatchSource.CODE_COMMENT,tmva/pymva/test/generatePyTorchModels.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py:29,Performance,optimiz,optimizer,29,"#Construct loss function and optimizer",MatchSource.CODE_COMMENT,tmva/pymva/test/generatePyTorchModels.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py:21,Testability,test,test,21,"#Constructing random test dataset",MatchSource.CODE_COMMENT,tmva/pymva/test/generatePyTorchModels.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/Conv1dModelGenerator.py:20,Testability,test,test,20,"# evaluate model in test mode",MatchSource.CODE_COMMENT,tmva/sofie/test/Conv1dModelGenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/Conv1dModelGenerator.py
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/Conv2dModelGenerator.py:20,Testability,test,test,20,"# evaluate model in test mode",MatchSource.CODE_COMMENT,tmva/sofie/test/Conv2dModelGenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/Conv2dModelGenerator.py
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/Conv3dModelGenerator.py:20,Testability,test,test,20,"# evaluate model in test mode",MatchSource.CODE_COMMENT,tmva/sofie/test/Conv3dModelGenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/Conv3dModelGenerator.py
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/ConvTrans2dModelGenerator.py:20,Testability,test,test,20,"# evaluate model in test mode",MatchSource.CODE_COMMENT,tmva/sofie/test/ConvTrans2dModelGenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/ConvTrans2dModelGenerator.py
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/RecurrentModelGenerator.py:20,Testability,test,test,20,"# evaluate model in test mode",MatchSource.CODE_COMMENT,tmva/sofie/test/RecurrentModelGenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/RecurrentModelGenerator.py
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rbdt_xgboost.py:44,Safety,avoid,avoid,44,"# XGBoost has to be imported before ROOT to avoid crashes because of clashing; # std::regexp symbols that are exported by cppyy.; # See also: https://github.com/wlav/cppyy/issues/227",MatchSource.CODE_COMMENT,tmva/tmva/test/rbdt_xgboost.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rbdt_xgboost.py
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rbdt_xgboost.py:15,Integrability,interface,interface,15,"""""""; Test RBDT interface; """"""",MatchSource.CODE_COMMENT,tmva/tmva/test/rbdt_xgboost.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rbdt_xgboost.py
https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_cache.py:364,Testability,test,test,364,"# Necessary because in the new Cppyy if we want to instantiate; # a templated method with a type written as a string (e.g. 'float'); # we need to pass it in square brackets, otherwise it can be; # (mis)interpreted as string parameter and the method itself is; # called with 'float' as a parameter.; # For example the Take() method mentioned multiple times in this test; # has to be called e.g. with:; # Take['float'](); # instead of:; # Take('float')()",MatchSource.CODE_COMMENT,tree/dataframe/test/dataframe_cache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_cache.py
https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.py:364,Testability,test,test,364,"# Necessary because in the new Cppyy if we want to instantiate; # a templated method with a type written as a string (e.g. 'float'); # we need to pass it in square brackets, otherwise it can be; # (mis)interpreted as string parameter and the method itself is; # called with 'float' as a parameter.; # For example the Take() method mentioned multiple times in this test; # has to be called e.g. with:; # Take['float'](); # instead of:; # Take('float')()",MatchSource.CODE_COMMENT,tree/dataframe/test/dataframe_datasetspec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.py
https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.py:35,Testability,test,tests,35,"# reuse the code from the C++ unit tests to create some files",MatchSource.CODE_COMMENT,tree/dataframe/test/dataframe_datasetspec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.py
https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.py:108,Availability,error,error,108,"# TODO: this emits a warning: Maybe you need to load the corresponding shared library?; # cling JIT session error: Failed to materialize symbols: ... emplace_back; # Despite the warning, the result is correct; # spec.WithGlobalFriends([(""subTree1"", ""PYspecTestFile5.root""),; # (""subTree2"", ""PYspecTestFile6.root""),; # (""subTree"", ""PYspecTestFile4.root"")], ""friendChainN"")",MatchSource.CODE_COMMENT,tree/dataframe/test/dataframe_datasetspec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.py
https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.py:48,Performance,load,load,48,"# TODO: this emits a warning: Maybe you need to load the corresponding shared library?; # cling JIT session error: Failed to materialize symbols: ... emplace_back; # Despite the warning, the result is correct; # spec.WithGlobalFriends([(""subTree1"", ""PYspecTestFile5.root""),; # (""subTree2"", ""PYspecTestFile6.root""),; # (""subTree"", ""PYspecTestFile4.root"")], ""friendChainN"")",MatchSource.CODE_COMMENT,tree/dataframe/test/dataframe_datasetspec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.py
https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.py:7,Testability,assert,assertEqual,7,"# self.assertEqual(fr3[j], expectedRess[i][j])",MatchSource.CODE_COMMENT,tree/dataframe/test/dataframe_datasetspec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.py
https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_merge_results.py:11,Testability,test,tests,11,"""""""Various tests for the RMergeableValue family of classes.""""""",MatchSource.CODE_COMMENT,tree/dataframe/test/dataframe_merge_results.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_merge_results.py
https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_misc.py:2,Performance,load,load,2,"# load all libs and autoparse",MatchSource.CODE_COMMENT,tree/dataframe/test/dataframe_misc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_misc.py
https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_model.py:11,Testability,test,tests,11,"""""""Various tests for the RNTupleModel class""""""",MatchSource.CODE_COMMENT,tree/ntuple/v7/test/ntuple_model.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_model.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/.enableImplicitMTWrapper.py:52,Testability,test,tests,52,"# this is meant to be used only to run tutorials as tests",MatchSource.CODE_COMMENT,tutorials/.enableImplicitMTWrapper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/.enableImplicitMTWrapper.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df001_introduction.py:38,Testability,test,test,38,"""""""A simple helper function to fill a test tree: this makes the example stand-alone.""""""",MatchSource.CODE_COMMENT,tutorials/dataframe/df001_introduction.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df001_introduction.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df001_introduction.py:5,Usability,simpl,simple,5,"""""""A simple helper function to fill a test tree: this makes the example stand-alone.""""""",MatchSource.CODE_COMMENT,tutorials/dataframe/df001_introduction.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df001_introduction.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df001_introduction.py:206,Integrability,depend,depending,206,"# Operations on the dataframe; # We now review some *actions* which can be performed on the data frame.; # Actions can be divided into instant actions (e. g. Foreach()) and lazy; # actions (e. g. Count()), depending on whether they trigger the event ; # loop immediately or only when one of the results is accessed for the ; # first time. Actions that return ""something"" either return their result ; # wrapped in a RResultPtr or in a RDataFrame.; # But first of all, let us we define now our cut-flow with two strings.; # Filters can be expressed as strings. The content must be C++ code. The; # name of the variables must be the name of the branches. The code is; # just-in-time compiled.",MatchSource.CODE_COMMENT,tutorials/dataframe/df001_introduction.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df001_introduction.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df001_introduction.py:402,Integrability,wrap,wrapped,402,"# Operations on the dataframe; # We now review some *actions* which can be performed on the data frame.; # Actions can be divided into instant actions (e. g. Foreach()) and lazy; # actions (e. g. Count()), depending on whether they trigger the event ; # loop immediately or only when one of the results is accessed for the ; # first time. Actions that return ""something"" either return their result ; # wrapped in a RResultPtr or in a RDataFrame.; # But first of all, let us we define now our cut-flow with two strings.; # Filters can be expressed as strings. The content must be C++ code. The; # name of the variables must be the name of the branches. The code is; # just-in-time compiled.",MatchSource.CODE_COMMENT,tutorials/dataframe/df001_introduction.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df001_introduction.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df001_introduction.py:608,Modifiability,variab,variables,608,"# Operations on the dataframe; # We now review some *actions* which can be performed on the data frame.; # Actions can be divided into instant actions (e. g. Foreach()) and lazy; # actions (e. g. Count()), depending on whether they trigger the event ; # loop immediately or only when one of the results is accessed for the ; # first time. Actions that return ""something"" either return their result ; # wrapped in a RResultPtr or in a RDataFrame.; # But first of all, let us we define now our cut-flow with two strings.; # Filters can be expressed as strings. The content must be C++ code. The; # name of the variables must be the name of the branches. The code is; # just-in-time compiled.",MatchSource.CODE_COMMENT,tutorials/dataframe/df001_introduction.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df001_introduction.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df001_introduction.py:75,Performance,perform,performed,75,"# Operations on the dataframe; # We now review some *actions* which can be performed on the data frame.; # Actions can be divided into instant actions (e. g. Foreach()) and lazy; # actions (e. g. Count()), depending on whether they trigger the event ; # loop immediately or only when one of the results is accessed for the ; # first time. Actions that return ""something"" either return their result ; # wrapped in a RResultPtr or in a RDataFrame.; # But first of all, let us we define now our cut-flow with two strings.; # Filters can be expressed as strings. The content must be C++ code. The; # name of the variables must be the name of the branches. The code is; # just-in-time compiled.",MatchSource.CODE_COMMENT,tutorials/dataframe/df001_introduction.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df001_introduction.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df001_introduction.py:306,Security,access,accessed,306,"# Operations on the dataframe; # We now review some *actions* which can be performed on the data frame.; # Actions can be divided into instant actions (e. g. Foreach()) and lazy; # actions (e. g. Count()), depending on whether they trigger the event ; # loop immediately or only when one of the results is accessed for the ; # first time. Actions that return ""something"" either return their result ; # wrapped in a RResultPtr or in a RDataFrame.; # But first of all, let us we define now our cut-flow with two strings.; # Filters can be expressed as strings. The content must be C++ code. The; # name of the variables must be the name of the branches. The code is; # just-in-time compiled.",MatchSource.CODE_COMMENT,tutorials/dataframe/df001_introduction.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df001_introduction.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df001_introduction.py:137,Deployability,pipeline,pipelines,137,"# Express your chain of operations with clarity!; # We are discussing an example here but it is not hard to imagine much more; # complex pipelines of actions acting on data. Those might require code; # which is well organised, for example allowing to conditionally add filters; # or again to clearly separate filters and actions without the need of; # writing the entire pipeline on one line. This can be easily achieved.; # We'll show this re-working the `Count` example:",MatchSource.CODE_COMMENT,tutorials/dataframe/df001_introduction.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df001_introduction.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df001_introduction.py:371,Deployability,pipeline,pipeline,371,"# Express your chain of operations with clarity!; # We are discussing an example here but it is not hard to imagine much more; # complex pipelines of actions acting on data. Those might require code; # which is well organised, for example allowing to conditionally add filters; # or again to clearly separate filters and actions without the need of; # writing the entire pipeline on one line. This can be easily achieved.; # We'll show this re-working the `Count` example:",MatchSource.CODE_COMMENT,tutorials/dataframe/df001_introduction.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df001_introduction.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df001_introduction.py:292,Usability,clear,clearly,292,"# Express your chain of operations with clarity!; # We are discussing an example here but it is not hard to imagine much more; # complex pipelines of actions acting on data. Those might require code; # which is well organised, for example allowing to conditionally add filters; # or again to clearly separate filters and actions without the need of; # writing the entire pipeline on one line. This can be easily achieved.; # We'll show this re-working the `Count` example:",MatchSource.CODE_COMMENT,tutorials/dataframe/df001_introduction.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df001_introduction.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df002_dataModel.py:37,Testability,test,test,37,"# A simple helper function to fill a test tree: this makes the example stand-alone.",MatchSource.CODE_COMMENT,tutorials/dataframe/df002_dataModel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df002_dataModel.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df002_dataModel.py:4,Usability,simpl,simple,4,"# A simple helper function to fill a test tree: this makes the example stand-alone.",MatchSource.CODE_COMMENT,tutorials/dataframe/df002_dataModel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df002_dataModel.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df002_dataModel.py:738,Energy Efficiency,energy,energy,738,"'''; using FourVector = ROOT::Math::XYZTVector;; using FourVectorVec = std::vector<FourVector>;; using CylFourVector = ROOT::Math::RhoEtaPhiVector;. // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *filename, const char *treeName); {; const double M = 0.13957; // set pi+ mass; TRandom3 R(1);. auto genTracks = [&](){; FourVectorVec tracks;; const auto nPart = R.Poisson(15);; tracks.reserve(nPart);; for (int j = 0; j < nPart; ++j) {; const auto px = R.Gaus(0, 10);; const auto py = R.Gaus(0, 10);; const auto pt = sqrt(px * px + py * py);; const auto eta = R.Uniform(-3, 3);; const auto phi = R.Uniform(0.0, 2 * TMath::Pi());; CylFourVector vcyl(pt, eta, phi);; // set energy; auto E = sqrt(vcyl.R() * vcyl.R() + M * M);; // fill track vector; tracks.emplace_back(vcyl.X(), vcyl.Y(), vcyl.Z(), E);; }; return tracks;; };. ROOT::RDataFrame d(64);; d.Define(""tracks"", genTracks).Snapshot<FourVectorVec>(treeName, filename, {""tracks""});; }; '''",MatchSource.CODE_COMMENT,tutorials/dataframe/df002_dataModel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df002_dataModel.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df002_dataModel.py:187,Testability,test,test,187,"'''; using FourVector = ROOT::Math::XYZTVector;; using FourVectorVec = std::vector<FourVector>;; using CylFourVector = ROOT::Math::RhoEtaPhiVector;. // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *filename, const char *treeName); {; const double M = 0.13957; // set pi+ mass; TRandom3 R(1);. auto genTracks = [&](){; FourVectorVec tracks;; const auto nPart = R.Poisson(15);; tracks.reserve(nPart);; for (int j = 0; j < nPart; ++j) {; const auto px = R.Gaus(0, 10);; const auto py = R.Gaus(0, 10);; const auto pt = sqrt(px * px + py * py);; const auto eta = R.Uniform(-3, 3);; const auto phi = R.Uniform(0.0, 2 * TMath::Pi());; CylFourVector vcyl(pt, eta, phi);; // set energy; auto E = sqrt(vcyl.R() * vcyl.R() + M * M);; // fill track vector; tracks.emplace_back(vcyl.X(), vcyl.Y(), vcyl.Z(), E);; }; return tracks;; };. ROOT::RDataFrame d(64);; d.Define(""tracks"", genTracks).Snapshot<FourVectorVec>(treeName, filename, {""tracks""});; }; '''",MatchSource.CODE_COMMENT,tutorials/dataframe/df002_dataModel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df002_dataModel.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df002_dataModel.py:154,Usability,simpl,simple,154,"'''; using FourVector = ROOT::Math::XYZTVector;; using FourVectorVec = std::vector<FourVector>;; using CylFourVector = ROOT::Math::RhoEtaPhiVector;. // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *filename, const char *treeName); {; const double M = 0.13957; // set pi+ mass; TRandom3 R(1);. auto genTracks = [&](){; FourVectorVec tracks;; const auto nPart = R.Poisson(15);; tracks.reserve(nPart);; for (int j = 0; j < nPart; ++j) {; const auto px = R.Gaus(0, 10);; const auto py = R.Gaus(0, 10);; const auto pt = sqrt(px * px + py * py);; const auto eta = R.Uniform(-3, 3);; const auto phi = R.Uniform(0.0, 2 * TMath::Pi());; CylFourVector vcyl(pt, eta, phi);; // set energy; auto E = sqrt(vcyl.R() * vcyl.R() + M * M);; // fill track vector; tracks.emplace_back(vcyl.X(), vcyl.Y(), vcyl.Z(), E);; }; return tracks;; };. ROOT::RDataFrame d(64);; d.Define(""tracks"", genTracks).Snapshot<FourVectorVec>(treeName, filename, {""tracks""});; }; '''",MatchSource.CODE_COMMENT,tutorials/dataframe/df002_dataModel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df002_dataModel.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df002_dataModel.py:82,Usability,simpl,simplest,82,"# Operating on branches which are collections of objects; # Here we deal with the simplest of the cuts: we decide to accept the event; # only if the number of tracks is greater than 8.",MatchSource.CODE_COMMENT,tutorials/dataframe/df002_dataModel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df002_dataModel.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df003_profiles.py:37,Testability,test,test,37,"# A simple helper function to fill a test tree: this makes the example; # stand-alone.",MatchSource.CODE_COMMENT,tutorials/dataframe/df003_profiles.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df003_profiles.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df003_profiles.py:4,Usability,simpl,simple,4,"# A simple helper function to fill a test tree: this makes the example; # stand-alone.",MatchSource.CODE_COMMENT,tutorials/dataframe/df003_profiles.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df003_profiles.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df006_ranges.py:142,Integrability,depend,depends,142,"# An important thing to notice is that the counts of a filter are relative to the; # number of entries a filter ""sees"". Therefore, if a Range depends on a filter,; # the Range will act on the entries passing the filter only.",MatchSource.CODE_COMMENT,tutorials/dataframe/df006_ranges.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df006_ranges.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df006_ranges.py:14,Integrability,wrap,wrap,14,"# Ok, time to wrap up: let's print all counts!",MatchSource.CODE_COMMENT,tutorials/dataframe/df006_ranges.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df006_ranges.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df007_snapshot.py:37,Testability,test,test,37,"# A simple helper function to fill a test tree: this makes the example stand-alone.",MatchSource.CODE_COMMENT,tutorials/dataframe/df007_snapshot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df007_snapshot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df007_snapshot.py:4,Usability,simpl,simple,4,"# A simple helper function to fill a test tree: this makes the example stand-alone.",MatchSource.CODE_COMMENT,tutorials/dataframe/df007_snapshot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df007_snapshot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df007_snapshot.py:91,Modifiability,variab,variables,91,"# ## Write it to disk in ROOT format; # We now write to disk a new dataset with one of the variables originally; # present in the tree and the new variables.; # The user can explicitly specify the types of the columns as template; # arguments of the Snapshot method, otherwise they will be automatically; # inferred.",MatchSource.CODE_COMMENT,tutorials/dataframe/df007_snapshot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df007_snapshot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df007_snapshot.py:147,Modifiability,variab,variables,147,"# ## Write it to disk in ROOT format; # We now write to disk a new dataset with one of the variables originally; # present in the tree and the new variables.; # The user can explicitly specify the types of the columns as template; # arguments of the Snapshot method, otherwise they will be automatically; # inferred.",MatchSource.CODE_COMMENT,tutorials/dataframe/df007_snapshot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df007_snapshot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df010_trivialDataSource.py:328,Integrability,interface,interface,328,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## Use the ""trivial data source"", an example data source implementation.; ##; ## This tutorial illustrates how use the RDataFrame in combination with a; ## RDataSource. In this case we use a RTrivialDS, which is nothing more; ## than a simple generator: it does not interface to any existing dataset.; ## The RTrivialDS has a single column, col0, which has value n for entry n.; ##; ## Note that RTrivialDS is only a demo data source implementation and superior alternatives; ## typically exist for production use (e.g. constructing an empty RDataFrame as `RDataFrame(nEntries)`).; ##; ## \macro_code; ##; ## \date September 2017; ## \author Danilo Piparo (CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df010_trivialDataSource.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df010_trivialDataSource.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df010_trivialDataSource.py:298,Usability,simpl,simple,298,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## Use the ""trivial data source"", an example data source implementation.; ##; ## This tutorial illustrates how use the RDataFrame in combination with a; ## RDataSource. In this case we use a RTrivialDS, which is nothing more; ## than a simple generator: it does not interface to any existing dataset.; ## The RTrivialDS has a single column, col0, which has value n for entry n.; ##; ## Note that RTrivialDS is only a demo data source implementation and superior alternatives; ## typically exist for production use (e.g. constructing an empty RDataFrame as `RDataFrame(nEntries)`).; ##; ## \macro_code; ##; ## \date September 2017; ## \author Danilo Piparo (CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df010_trivialDataSource.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df010_trivialDataSource.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df012_DefinesAndFiltersAsStrings.py:101,Usability,simpl,simple,101,"## We will inefficiently calculate an approximation of pi by generating; ## some data and doing very simple filtering and analysis on it.; ## We start by creating an empty dataframe where we will insert 10 million; ## random points in a square of side 2.0 (that is, with an inscribed unit; ## circle).",MatchSource.CODE_COMMENT,tutorials/dataframe/df012_DefinesAndFiltersAsStrings.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df012_DefinesAndFiltersAsStrings.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df016_vecOps.py:89,Performance,perform,performed,89,"# Now we want to plot 2 quarters of a ring with radii .5 and 1.; # Note how the cuts are performed on RVecs, comparing them with integers and; # among themselves.",MatchSource.CODE_COMMENT,tutorials/dataframe/df016_vecOps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df016_vecOps.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df017_vecOpsHEP.py:189,Availability,down,down,189,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## Use RVecs to plot the transverse momentum of selected particles.; ##; ## This tutorial shows how VecOps can be used to slim down the programming; ## model typically adopted in HEP for analysis.; ## In this case we have a dataset containing the kinematic properties of; ## particles stored in individual arrays.; ## We want to plot the transverse momentum of these particles if the energy is; ## greater than 100 MeV.; ## \macro_code; ## \macro_image; ##; ## \date March 2018; ## \authors Danilo Piparo (CERN), Andre Vieira Silva",MatchSource.CODE_COMMENT,tutorials/dataframe/df017_vecOpsHEP.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df017_vecOpsHEP.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df017_vecOpsHEP.py:446,Energy Efficiency,energy,energy,446,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## Use RVecs to plot the transverse momentum of selected particles.; ##; ## This tutorial shows how VecOps can be used to slim down the programming; ## model typically adopted in HEP for analysis.; ## In this case we have a dataset containing the kinematic properties of; ## particles stored in individual arrays.; ## We want to plot the transverse momentum of these particles if the energy is; ## greater than 100 MeV.; ## \macro_code; ## \macro_image; ##; ## \date March 2018; ## \authors Danilo Piparo (CERN), Andre Vieira Silva",MatchSource.CODE_COMMENT,tutorials/dataframe/df017_vecOpsHEP.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df017_vecOpsHEP.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df019_Cache.py:777,Availability,checkpoint,checkpointing,777,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## Cache a processed RDataFrame in memory for further usage.; ##; ## This tutorial shows how the content of a data frame can be cached in memory; ## in form of a dataframe. The content of the columns is stored in memory in; ## contiguous slabs of memory and is ""ready to use"", i.e. no ROOT IO operation; ## is performed.; ##; ## Creating a cached data frame storing all of its content deserialised and uncompressed; ## in memory is particularly useful when dealing with datasets of a moderate size; ## (small enough to fit the RAM) over which several explorative loops need to be; ## performed as fast as possible. In addition, caching can be useful when no file; ## on disk needs to be created as a side effect of checkpointing part of the analysis.; ##; ## All steps in the caching are lazy, i.e. the cached data frame is actually filled; ## only when the event loop is triggered on it.; ##; ## \macro_code; ## \macro_image; ##; ## \date June 2018; ## \author Danilo Piparo (CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df019_Cache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df019_Cache.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df019_Cache.py:190,Performance,cache,cached,190,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## Cache a processed RDataFrame in memory for further usage.; ##; ## This tutorial shows how the content of a data frame can be cached in memory; ## in form of a dataframe. The content of the columns is stored in memory in; ## contiguous slabs of memory and is ""ready to use"", i.e. no ROOT IO operation; ## is performed.; ##; ## Creating a cached data frame storing all of its content deserialised and uncompressed; ## in memory is particularly useful when dealing with datasets of a moderate size; ## (small enough to fit the RAM) over which several explorative loops need to be; ## performed as fast as possible. In addition, caching can be useful when no file; ## on disk needs to be created as a side effect of checkpointing part of the analysis.; ##; ## All steps in the caching are lazy, i.e. the cached data frame is actually filled; ## only when the event loop is triggered on it.; ##; ## \macro_code; ## \macro_image; ##; ## \date June 2018; ## \author Danilo Piparo (CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df019_Cache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df019_Cache.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df019_Cache.py:372,Performance,perform,performed,372,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## Cache a processed RDataFrame in memory for further usage.; ##; ## This tutorial shows how the content of a data frame can be cached in memory; ## in form of a dataframe. The content of the columns is stored in memory in; ## contiguous slabs of memory and is ""ready to use"", i.e. no ROOT IO operation; ## is performed.; ##; ## Creating a cached data frame storing all of its content deserialised and uncompressed; ## in memory is particularly useful when dealing with datasets of a moderate size; ## (small enough to fit the RAM) over which several explorative loops need to be; ## performed as fast as possible. In addition, caching can be useful when no file; ## on disk needs to be created as a side effect of checkpointing part of the analysis.; ##; ## All steps in the caching are lazy, i.e. the cached data frame is actually filled; ## only when the event loop is triggered on it.; ##; ## \macro_code; ## \macro_image; ##; ## \date June 2018; ## \author Danilo Piparo (CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df019_Cache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df019_Cache.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df019_Cache.py:402,Performance,cache,cached,402,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## Cache a processed RDataFrame in memory for further usage.; ##; ## This tutorial shows how the content of a data frame can be cached in memory; ## in form of a dataframe. The content of the columns is stored in memory in; ## contiguous slabs of memory and is ""ready to use"", i.e. no ROOT IO operation; ## is performed.; ##; ## Creating a cached data frame storing all of its content deserialised and uncompressed; ## in memory is particularly useful when dealing with datasets of a moderate size; ## (small enough to fit the RAM) over which several explorative loops need to be; ## performed as fast as possible. In addition, caching can be useful when no file; ## on disk needs to be created as a side effect of checkpointing part of the analysis.; ##; ## All steps in the caching are lazy, i.e. the cached data frame is actually filled; ## only when the event loop is triggered on it.; ##; ## \macro_code; ## \macro_image; ##; ## \date June 2018; ## \author Danilo Piparo (CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df019_Cache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df019_Cache.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df019_Cache.py:646,Performance,perform,performed,646,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## Cache a processed RDataFrame in memory for further usage.; ##; ## This tutorial shows how the content of a data frame can be cached in memory; ## in form of a dataframe. The content of the columns is stored in memory in; ## contiguous slabs of memory and is ""ready to use"", i.e. no ROOT IO operation; ## is performed.; ##; ## Creating a cached data frame storing all of its content deserialised and uncompressed; ## in memory is particularly useful when dealing with datasets of a moderate size; ## (small enough to fit the RAM) over which several explorative loops need to be; ## performed as fast as possible. In addition, caching can be useful when no file; ## on disk needs to be created as a side effect of checkpointing part of the analysis.; ##; ## All steps in the caching are lazy, i.e. the cached data frame is actually filled; ## only when the event loop is triggered on it.; ##; ## \macro_code; ## \macro_image; ##; ## \date June 2018; ## \author Danilo Piparo (CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df019_Cache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df019_Cache.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df019_Cache.py:865,Performance,cache,cached,865,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## Cache a processed RDataFrame in memory for further usage.; ##; ## This tutorial shows how the content of a data frame can be cached in memory; ## in form of a dataframe. The content of the columns is stored in memory in; ## contiguous slabs of memory and is ""ready to use"", i.e. no ROOT IO operation; ## is performed.; ##; ## Creating a cached data frame storing all of its content deserialised and uncompressed; ## in memory is particularly useful when dealing with datasets of a moderate size; ## (small enough to fit the RAM) over which several explorative loops need to be; ## performed as fast as possible. In addition, caching can be useful when no file; ## on disk needs to be created as a side effect of checkpointing part of the analysis.; ##; ## All steps in the caching are lazy, i.e. the cached data frame is actually filled; ## only when the event loop is triggered on it.; ##; ## \macro_code; ## \macro_image; ##; ## \date June 2018; ## \author Danilo Piparo (CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df019_Cache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df019_Cache.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df019_Cache.py:13,Usability,simpl,simple,13,"# We apply a simple cut and define a new column.",MatchSource.CODE_COMMENT,tutorials/dataframe/df019_Cache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df019_Cache.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df019_Cache.py:5,Performance,cache,cache,5,"# We cache the content of the dataset. Nothing has happened yet: the work to accomplish; # has been described.",MatchSource.CODE_COMMENT,tutorials/dataframe/df019_Cache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df019_Cache.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df019_Cache.py:28,Performance,cache,cached,28,"# Now the event loop on the cached dataset is triggered by accessing the histogram.; # This event triggers the loop on the `df` data frame lazily.",MatchSource.CODE_COMMENT,tutorials/dataframe/df019_Cache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df019_Cache.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df019_Cache.py:59,Security,access,accessing,59,"# Now the event loop on the cached dataset is triggered by accessing the histogram.; # This event triggers the loop on the `df` data frame lazily.",MatchSource.CODE_COMMENT,tutorials/dataframe/df019_Cache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df019_Cache.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df026_AsNumpyArrays.py:17,Usability,simpl,simple,17,"# Let's create a simple dataframe with ten rows and two columns",MatchSource.CODE_COMMENT,tutorials/dataframe/df026_AsNumpyArrays.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df026_AsNumpyArrays.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df026_AsNumpyArrays.py:19,Security,access,access,19,"# Next, we want to access the data from Python as Numpy arrays. To do so, the; # content of the dataframe is converted using the AsNumpy method. The returned; # object is a dictionary with the column names as keys and 1D numpy arrays with; # the content as values.",MatchSource.CODE_COMMENT,tutorials/dataframe/df026_AsNumpyArrays.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df026_AsNumpyArrays.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df026_AsNumpyArrays.py:153,Energy Efficiency,reduce,reduce,153,"# Since reading out data to memory is expensive, always try to read-out only what; # is needed for your analysis. You can use all RDataFrame features to reduce your; # dataset, e.g., the Filter transformation. Furthermore, you can can pass to the; # AsNumpy method a whitelist of column names with the option `columns` or a blacklist; # with column names with the option `exclude`.",MatchSource.CODE_COMMENT,tutorials/dataframe/df026_AsNumpyArrays.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df026_AsNumpyArrays.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df026_AsNumpyArrays.py:63,Integrability,wrap,wrapped,63,"# You can read-out all objects from ROOT files since these are wrapped by PyROOT; # in the Python world. However, be aware that objects other than fundamental types,; # such as complex C++ objects and not int or float, are costly to read-out.",MatchSource.CODE_COMMENT,tutorials/dataframe/df026_AsNumpyArrays.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df026_AsNumpyArrays.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df102_NanoAODDimuonAnalysis.py:9,Performance,multi-thread,multi-threading,9,"# Enable multi-threading",MatchSource.CODE_COMMENT,tutorials/dataframe/df102_NanoAODDimuonAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df102_NanoAODDimuonAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df102_NanoAODDimuonAnalysis.py:81,Energy Efficiency,charge,charge,81,"# For simplicity, select only events with exactly two muons and require opposite charge",MatchSource.CODE_COMMENT,tutorials/dataframe/df102_NanoAODDimuonAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df102_NanoAODDimuonAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df102_NanoAODDimuonAnalysis.py:6,Usability,simpl,simplicity,6,"# For simplicity, select only events with exactly two muons and require opposite charge",MatchSource.CODE_COMMENT,tutorials/dataframe/df102_NanoAODDimuonAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df102_NanoAODDimuonAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df103_NanoAODHiggsAnalysis.py:922,Performance,perform,performed,922,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## An example of complex analysis with RDataFrame: reconstructing the Higgs boson.; ##; ## This tutorial is a simplified but yet complex example of an analysis reconstructing the Higgs boson decaying to two Z; ## bosons from events with four leptons. The data and simulated events are taken from CERN OpenData representing a; ## subset of the data recorded in 2012 with the CMS detector at the LHC. The tutorials follows the Higgs to four leptons; ## analysis published on CERN Open Data portal ([10.7483/OPENDATA.CMS.JKB8.RR42](http://opendata.cern.ch/record/5500)).; ## The resulting plots show the invariant mass of the selected four lepton systems in different decay modes (four muons,; ## four electrons and two of each kind) and in a combined plot indicating the decay of the Higgs boson with a mass of; ## about 125 GeV.; ##; ## The following steps are performed for each sample with data and simulated events in order to reconstruct the Higgs; ## boson from the selected muons and electrons:; ## 1. Select interesting events with multiple cuts on event properties, e.g., number of leptons, kinematics of the; ## leptons and quality of the tracks.; ## 2. Reconstruct two Z bosons of which only one on the mass shell from the selected events and apply additional cuts on; ## the reconstructed objects.; ## 3. Reconstruct the Higgs boson from the remaining Z boson candidates and calculate its invariant mass.; ##; ## Another aim of this version of the tutorial is to show a way to blend C++ and Python code. All the functions that; ## make computations on data to define new columns or filter existing ones in a precise way, better suited to be written; ## in C++, have been moved to a header that is then declared to the ROOT C++ interpreter. The functions that instead; ## create nodes of the computational graph (e.g. Filter, Define) remain inside the main Python script.; ##; ## The tutorial has the fast mode enabled by default,",MatchSource.CODE_COMMENT,tutorials/dataframe/df103_NanoAODHiggsAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df103_NanoAODHiggsAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df103_NanoAODHiggsAnalysis.py:440,Safety,detect,detector,440,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## An example of complex analysis with RDataFrame: reconstructing the Higgs boson.; ##; ## This tutorial is a simplified but yet complex example of an analysis reconstructing the Higgs boson decaying to two Z; ## bosons from events with four leptons. The data and simulated events are taken from CERN OpenData representing a; ## subset of the data recorded in 2012 with the CMS detector at the LHC. The tutorials follows the Higgs to four leptons; ## analysis published on CERN Open Data portal ([10.7483/OPENDATA.CMS.JKB8.RR42](http://opendata.cern.ch/record/5500)).; ## The resulting plots show the invariant mass of the selected four lepton systems in different decay modes (four muons,; ## four electrons and two of each kind) and in a combined plot indicating the decay of the Higgs boson with a mass of; ## about 125 GeV.; ##; ## The following steps are performed for each sample with data and simulated events in order to reconstruct the Higgs; ## boson from the selected muons and electrons:; ## 1. Select interesting events with multiple cuts on event properties, e.g., number of leptons, kinematics of the; ## leptons and quality of the tracks.; ## 2. Reconstruct two Z bosons of which only one on the mass shell from the selected events and apply additional cuts on; ## the reconstructed objects.; ## 3. Reconstruct the Higgs boson from the remaining Z boson candidates and calculate its invariant mass.; ##; ## Another aim of this version of the tutorial is to show a way to blend C++ and Python code. All the functions that; ## make computations on data to define new columns or filter existing ones in a precise way, better suited to be written; ## in C++, have been moved to a header that is then declared to the ROOT C++ interpreter. The functions that instead; ## create nodes of the computational graph (e.g. Filter, Define) remain inside the main Python script.; ##; ## The tutorial has the fast mode enabled by default,",MatchSource.CODE_COMMENT,tutorials/dataframe/df103_NanoAODHiggsAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df103_NanoAODHiggsAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df103_NanoAODHiggsAnalysis.py:172,Usability,simpl,simplified,172,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## An example of complex analysis with RDataFrame: reconstructing the Higgs boson.; ##; ## This tutorial is a simplified but yet complex example of an analysis reconstructing the Higgs boson decaying to two Z; ## bosons from events with four leptons. The data and simulated events are taken from CERN OpenData representing a; ## subset of the data recorded in 2012 with the CMS detector at the LHC. The tutorials follows the Higgs to four leptons; ## analysis published on CERN Open Data portal ([10.7483/OPENDATA.CMS.JKB8.RR42](http://opendata.cern.ch/record/5500)).; ## The resulting plots show the invariant mass of the selected four lepton systems in different decay modes (four muons,; ## four electrons and two of each kind) and in a combined plot indicating the decay of the Higgs boson with a mass of; ## about 125 GeV.; ##; ## The following steps are performed for each sample with data and simulated events in order to reconstruct the Higgs; ## boson from the selected muons and electrons:; ## 1. Select interesting events with multiple cuts on event properties, e.g., number of leptons, kinematics of the; ## leptons and quality of the tracks.; ## 2. Reconstruct two Z bosons of which only one on the mass shell from the selected events and apply additional cuts on; ## the reconstructed objects.; ## 3. Reconstruct the Higgs boson from the remaining Z boson candidates and calculate its invariant mass.; ##; ## Another aim of this version of the tutorial is to show a way to blend C++ and Python code. All the functions that; ## make computations on data to define new columns or filter existing ones in a precise way, better suited to be written; ## in C++, have been moved to a header that is then declared to the ROOT C++ interpreter. The functions that instead; ## create nodes of the computational graph (e.g. Filter, Define) remain inside the main Python script.; ##; ## The tutorial has the fast mode enabled by default,",MatchSource.CODE_COMMENT,tutorials/dataframe/df103_NanoAODHiggsAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df103_NanoAODHiggsAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df103_NanoAODHiggsAnalysis.py:9,Performance,multi-thread,multi-threading,9,"# Enable multi-threading",MatchSource.CODE_COMMENT,tutorials/dataframe/df103_NanoAODHiggsAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df103_NanoAODHiggsAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df103_NanoAODHiggsAnalysis.py:37,Deployability,integrat,integrated,37,"# CMS data taken in 2012 (11.6 fb^-1 integrated luminosity)",MatchSource.CODE_COMMENT,tutorials/dataframe/df103_NanoAODHiggsAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df103_NanoAODHiggsAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df103_NanoAODHiggsAnalysis.py:37,Integrability,integrat,integrated,37,"# CMS data taken in 2012 (11.6 fb^-1 integrated luminosity)",MatchSource.CODE_COMMENT,tutorials/dataframe/df103_NanoAODHiggsAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df103_NanoAODHiggsAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df103_NanoAODHiggsAnalysis.py:134,Availability,avail,available,134,"# RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.",MatchSource.CODE_COMMENT,tutorials/dataframe/df103_NanoAODHiggsAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df103_NanoAODHiggsAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df103_NanoAODHiggsAnalysis.py:205,Availability,avail,available,205,"# RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.",MatchSource.CODE_COMMENT,tutorials/dataframe/df103_NanoAODHiggsAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df103_NanoAODHiggsAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df103_NanoAODHiggsAnalysis.py:262,Availability,avail,available,262,"# RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.",MatchSource.CODE_COMMENT,tutorials/dataframe/df103_NanoAODHiggsAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df103_NanoAODHiggsAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df103_NanoAODHiggsAnalysis.py:79,Performance,concurren,concurrently,79,"# RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.",MatchSource.CODE_COMMENT,tutorials/dataframe/df103_NanoAODHiggsAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df103_NanoAODHiggsAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df104_HiggsToTwoPhotons.py:129,Deployability,release,release,129,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## The Higgs to two photons analysis from the ATLAS Open Data 2020 release, with RDataFrame.; ##; ## This tutorial is the Higgs to two photons analysis from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. Although the Higgs to two photons decay is very rare,; ## the contribution of the Higgs can be seen as a narrow peak around 125 GeV because of the excellent; ## reconstruction and identification efficiency of photons at the ATLAS experiment.; ##; ## The analysis is translated to a RDataFrame workflow processing 1.7 GB of simulated events and data.; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2020; ## \author Stefan Wunsch (KIT, CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df104_HiggsToTwoPhotons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df104_HiggsToTwoPhotons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df104_HiggsToTwoPhotons.py:239,Deployability,release,release,239,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## The Higgs to two photons analysis from the ATLAS Open Data 2020 release, with RDataFrame.; ##; ## This tutorial is the Higgs to two photons analysis from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. Although the Higgs to two photons decay is very rare,; ## the contribution of the Higgs can be seen as a narrow peak around 125 GeV because of the excellent; ## reconstruction and identification efficiency of photons at the ATLAS experiment.; ##; ## The analysis is translated to a RDataFrame workflow processing 1.7 GB of simulated events and data.; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2020; ## \author Stefan Wunsch (KIT, CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df104_HiggsToTwoPhotons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df104_HiggsToTwoPhotons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df104_HiggsToTwoPhotons.py:287,Deployability,release,release,287,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## The Higgs to two photons analysis from the ATLAS Open Data 2020 release, with RDataFrame.; ##; ## This tutorial is the Higgs to two photons analysis from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. Although the Higgs to two photons decay is very rare,; ## the contribution of the Higgs can be seen as a narrow peak around 125 GeV because of the excellent; ## reconstruction and identification efficiency of photons at the ATLAS experiment.; ##; ## The analysis is translated to a RDataFrame workflow processing 1.7 GB of simulated events and data.; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2020; ## \author Stefan Wunsch (KIT, CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df104_HiggsToTwoPhotons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df104_HiggsToTwoPhotons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df104_HiggsToTwoPhotons.py:396,Energy Efficiency,energy,energy,396,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## The Higgs to two photons analysis from the ATLAS Open Data 2020 release, with RDataFrame.; ##; ## This tutorial is the Higgs to two photons analysis from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. Although the Higgs to two photons decay is very rare,; ## the contribution of the Higgs can be seen as a narrow peak around 125 GeV because of the excellent; ## reconstruction and identification efficiency of photons at the ATLAS experiment.; ##; ## The analysis is translated to a RDataFrame workflow processing 1.7 GB of simulated events and data.; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2020; ## \author Stefan Wunsch (KIT, CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df104_HiggsToTwoPhotons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df104_HiggsToTwoPhotons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df104_HiggsToTwoPhotons.py:351,Safety,detect,detector,351,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## The Higgs to two photons analysis from the ATLAS Open Data 2020 release, with RDataFrame.; ##; ## This tutorial is the Higgs to two photons analysis from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. Although the Higgs to two photons decay is very rare,; ## the contribution of the Higgs can be seen as a narrow peak around 125 GeV because of the excellent; ## reconstruction and identification efficiency of photons at the ATLAS experiment.; ##; ## The analysis is translated to a RDataFrame workflow processing 1.7 GB of simulated events and data.; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2020; ## \author Stefan Wunsch (KIT, CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df104_HiggsToTwoPhotons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df104_HiggsToTwoPhotons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df104_HiggsToTwoPhotons.py:9,Performance,multi-thread,multi-threading,9,"# Enable multi-threading",MatchSource.CODE_COMMENT,tutorials/dataframe/df104_HiggsToTwoPhotons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df104_HiggsToTwoPhotons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df104_HiggsToTwoPhotons.py:50,Performance,perform,perform,50,"# Define a new column with the invariant mass and perform final event selection",MatchSource.CODE_COMMENT,tutorials/dataframe/df104_HiggsToTwoPhotons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df104_HiggsToTwoPhotons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df104_HiggsToTwoPhotons.py:156,Availability,avail,available,156,"# Run the event loop; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.",MatchSource.CODE_COMMENT,tutorials/dataframe/df104_HiggsToTwoPhotons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df104_HiggsToTwoPhotons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df104_HiggsToTwoPhotons.py:227,Availability,avail,available,227,"# Run the event loop; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.",MatchSource.CODE_COMMENT,tutorials/dataframe/df104_HiggsToTwoPhotons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df104_HiggsToTwoPhotons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df104_HiggsToTwoPhotons.py:284,Availability,avail,available,284,"# Run the event loop; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.",MatchSource.CODE_COMMENT,tutorials/dataframe/df104_HiggsToTwoPhotons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df104_HiggsToTwoPhotons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df104_HiggsToTwoPhotons.py:101,Performance,concurren,concurrently,101,"# Run the event loop; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.",MatchSource.CODE_COMMENT,tutorials/dataframe/df104_HiggsToTwoPhotons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df104_HiggsToTwoPhotons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py:116,Deployability,release,release,116,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## The W boson mass analysis from the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the analysis of the W boson mass taken from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. W bosons are produced frequently at the LHC and; ## are an important background to studies of Standard Model processes, for example the Higgs boson analyses.; ##; ## The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data.; ## By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with; ## the --full-dataset argument and you can also run only on a fraction of the original dataset using the argument --lumi-scale.; ##; ## See the [corresponding spec json file](https://github.com/root-project/root/blob/master/tutorials/dataframe/df105_WBosonAnalysis.json).; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date March 2020; ## \author Stefan Wunsch (KIT, CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df105_WBosonAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py:239,Deployability,release,release,239,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## The W boson mass analysis from the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the analysis of the W boson mass taken from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. W bosons are produced frequently at the LHC and; ## are an important background to studies of Standard Model processes, for example the Higgs boson analyses.; ##; ## The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data.; ## By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with; ## the --full-dataset argument and you can also run only on a fraction of the original dataset using the argument --lumi-scale.; ##; ## See the [corresponding spec json file](https://github.com/root-project/root/blob/master/tutorials/dataframe/df105_WBosonAnalysis.json).; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date March 2020; ## \author Stefan Wunsch (KIT, CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df105_WBosonAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py:287,Deployability,release,release,287,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## The W boson mass analysis from the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the analysis of the W boson mass taken from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. W bosons are produced frequently at the LHC and; ## are an important background to studies of Standard Model processes, for example the Higgs boson analyses.; ##; ## The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data.; ## By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with; ## the --full-dataset argument and you can also run only on a fraction of the original dataset using the argument --lumi-scale.; ##; ## See the [corresponding spec json file](https://github.com/root-project/root/blob/master/tutorials/dataframe/df105_WBosonAnalysis.json).; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date March 2020; ## \author Stefan Wunsch (KIT, CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df105_WBosonAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py:399,Energy Efficiency,energy,energy,399,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## The W boson mass analysis from the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the analysis of the W boson mass taken from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. W bosons are produced frequently at the LHC and; ## are an important background to studies of Standard Model processes, for example the Higgs boson analyses.; ##; ## The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data.; ## By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with; ## the --full-dataset argument and you can also run only on a fraction of the original dataset using the argument --lumi-scale.; ##; ## See the [corresponding spec json file](https://github.com/root-project/root/blob/master/tutorials/dataframe/df105_WBosonAnalysis.json).; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date March 2020; ## \author Stefan Wunsch (KIT, CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df105_WBosonAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py:748,Energy Efficiency,reduce,reduce,748,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## The W boson mass analysis from the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the analysis of the W boson mass taken from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. W bosons are produced frequently at the LHC and; ## are an important background to studies of Standard Model processes, for example the Higgs boson analyses.; ##; ## The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data.; ## By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with; ## the --full-dataset argument and you can also run only on a fraction of the original dataset using the argument --lumi-scale.; ##; ## See the [corresponding spec json file](https://github.com/root-project/root/blob/master/tutorials/dataframe/df105_WBosonAnalysis.json).; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date March 2020; ## \author Stefan Wunsch (KIT, CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df105_WBosonAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py:354,Safety,detect,detector,354,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## The W boson mass analysis from the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the analysis of the W boson mass taken from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. W bosons are produced frequently at the LHC and; ## are an important background to studies of Standard Model processes, for example the Higgs boson analyses.; ##; ## The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data.; ## By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with; ## the --full-dataset argument and you can also run only on a fraction of the original dataset using the argument --lumi-scale.; ##; ## See the [corresponding spec json file](https://github.com/root-project/root/blob/master/tutorials/dataframe/df105_WBosonAnalysis.json).; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date March 2020; ## \author Stefan Wunsch (KIT, CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df105_WBosonAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py:59,Performance,load,load,59,"# Create a ROOT dataframe for each dataset; # Note that we load the filenames from the external json file placed in the same folder than this script.",MatchSource.CODE_COMMENT,tutorials/dataframe/df105_WBosonAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py:8,Availability,down,down,8,"# Scale down the datasets if requested",MatchSource.CODE_COMMENT,tutorials/dataframe/df105_WBosonAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py:80,Performance,perform,performing,80,"# Select events for the analysis; # Just-in-time compile custom helper function performing complex computations",MatchSource.CODE_COMMENT,tutorials/dataframe/df105_WBosonAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py:78,Energy Efficiency,energy,energy,78,"# Select events with a muon or electron trigger and with a missing transverse energy larger than 30 GeV",MatchSource.CODE_COMMENT,tutorials/dataframe/df105_WBosonAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py:85,Energy Efficiency,energy,energy,85,"# Compute transverse mass of the W boson using the lepton and the missing transverse energy and make a histogram",MatchSource.CODE_COMMENT,tutorials/dataframe/df105_WBosonAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py:205,Availability,avail,available,205,"# Run the event loop and merge histograms of the respective processes; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.",MatchSource.CODE_COMMENT,tutorials/dataframe/df105_WBosonAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py:276,Availability,avail,available,276,"# Run the event loop and merge histograms of the respective processes; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.",MatchSource.CODE_COMMENT,tutorials/dataframe/df105_WBosonAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py:333,Availability,avail,available,333,"# Run the event loop and merge histograms of the respective processes; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.",MatchSource.CODE_COMMENT,tutorials/dataframe/df105_WBosonAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py:150,Performance,concurren,concurrently,150,"# Run the event loop and merge histograms of the respective processes; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.",MatchSource.CODE_COMMENT,tutorials/dataframe/df105_WBosonAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df105_WBosonAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py:702,Availability,error,errors,702,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the Higgs to four lepton analysis from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. The decay of the Standard Model Higgs boson; ## to two Z bosons and subsequently to four leptons is called the ""golden channel"". The selection leads; ## to a narrow invariant mass peak on top a relatively smooth and small background, revealing; ## the Higgs at 125 GeV.; ## Systematic errors for the MC scale factors are computed and the Vary function of RDataFrame is used for plotting.; ## The analysis is translated to an RDataFrame workflow processing about 300 MB of simulated events and data.; ##; ## See the [corresponding spec json file](https://github.com/root-project/root/blob/master/tutorials/dataframe/df106_HiggsToFourLeptons_spec.json).; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date March 2020, August 2022, August 2023; ## \authors Stefan Wunsch (KIT, CERN), Julia Mathe (CERN), Marta Czurylo (CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df106_HiggsToFourLeptons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py:124,Deployability,release,release,124,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the Higgs to four lepton analysis from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. The decay of the Standard Model Higgs boson; ## to two Z bosons and subsequently to four leptons is called the ""golden channel"". The selection leads; ## to a narrow invariant mass peak on top a relatively smooth and small background, revealing; ## the Higgs at 125 GeV.; ## Systematic errors for the MC scale factors are computed and the Vary function of RDataFrame is used for plotting.; ## The analysis is translated to an RDataFrame workflow processing about 300 MB of simulated events and data.; ##; ## See the [corresponding spec json file](https://github.com/root-project/root/blob/master/tutorials/dataframe/df106_HiggsToFourLeptons_spec.json).; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date March 2020, August 2022, August 2023; ## \authors Stefan Wunsch (KIT, CERN), Julia Mathe (CERN), Marta Czurylo (CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df106_HiggsToFourLeptons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py:242,Deployability,release,release,242,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the Higgs to four lepton analysis from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. The decay of the Standard Model Higgs boson; ## to two Z bosons and subsequently to four leptons is called the ""golden channel"". The selection leads; ## to a narrow invariant mass peak on top a relatively smooth and small background, revealing; ## the Higgs at 125 GeV.; ## Systematic errors for the MC scale factors are computed and the Vary function of RDataFrame is used for plotting.; ## The analysis is translated to an RDataFrame workflow processing about 300 MB of simulated events and data.; ##; ## See the [corresponding spec json file](https://github.com/root-project/root/blob/master/tutorials/dataframe/df106_HiggsToFourLeptons_spec.json).; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date March 2020, August 2022, August 2023; ## \authors Stefan Wunsch (KIT, CERN), Julia Mathe (CERN), Marta Czurylo (CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df106_HiggsToFourLeptons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py:290,Deployability,release,release,290,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the Higgs to four lepton analysis from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. The decay of the Standard Model Higgs boson; ## to two Z bosons and subsequently to four leptons is called the ""golden channel"". The selection leads; ## to a narrow invariant mass peak on top a relatively smooth and small background, revealing; ## the Higgs at 125 GeV.; ## Systematic errors for the MC scale factors are computed and the Vary function of RDataFrame is used for plotting.; ## The analysis is translated to an RDataFrame workflow processing about 300 MB of simulated events and data.; ##; ## See the [corresponding spec json file](https://github.com/root-project/root/blob/master/tutorials/dataframe/df106_HiggsToFourLeptons_spec.json).; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date March 2020, August 2022, August 2023; ## \authors Stefan Wunsch (KIT, CERN), Julia Mathe (CERN), Marta Czurylo (CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df106_HiggsToFourLeptons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py:399,Energy Efficiency,energy,energy,399,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the Higgs to four lepton analysis from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. The decay of the Standard Model Higgs boson; ## to two Z bosons and subsequently to four leptons is called the ""golden channel"". The selection leads; ## to a narrow invariant mass peak on top a relatively smooth and small background, revealing; ## the Higgs at 125 GeV.; ## Systematic errors for the MC scale factors are computed and the Vary function of RDataFrame is used for plotting.; ## The analysis is translated to an RDataFrame workflow processing about 300 MB of simulated events and data.; ##; ## See the [corresponding spec json file](https://github.com/root-project/root/blob/master/tutorials/dataframe/df106_HiggsToFourLeptons_spec.json).; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date March 2020, August 2022, August 2023; ## \authors Stefan Wunsch (KIT, CERN), Julia Mathe (CERN), Marta Czurylo (CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df106_HiggsToFourLeptons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py:354,Safety,detect,detector,354,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the Higgs to four lepton analysis from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. The decay of the Standard Model Higgs boson; ## to two Z bosons and subsequently to four leptons is called the ""golden channel"". The selection leads; ## to a narrow invariant mass peak on top a relatively smooth and small background, revealing; ## the Higgs at 125 GeV.; ## Systematic errors for the MC scale factors are computed and the Vary function of RDataFrame is used for plotting.; ## The analysis is translated to an RDataFrame workflow processing about 300 MB of simulated events and data.; ##; ## See the [corresponding spec json file](https://github.com/root-project/root/blob/master/tutorials/dataframe/df106_HiggsToFourLeptons_spec.json).; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date March 2020, August 2022, August 2023; ## \authors Stefan Wunsch (KIT, CERN), Julia Mathe (CERN), Marta Czurylo (CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df106_HiggsToFourLeptons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py:57,Modifiability,config,config,57,"# Access metadata information that is stored in the JSON config file of the RDataFrame.; # The metadata contained in the JSON file is accessible within a `DefinePerSample` call, through the `RSampleInfo` class.",MatchSource.CODE_COMMENT,tutorials/dataframe/df106_HiggsToFourLeptons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py:134,Security,access,accessible,134,"# Access metadata information that is stored in the JSON config file of the RDataFrame.; # The metadata contained in the JSON file is accessible within a `DefinePerSample` call, through the `RSampleInfo` class.",MatchSource.CODE_COMMENT,tutorials/dataframe/df106_HiggsToFourLeptons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py:143,Availability,mask,mask,143,"# Select events with exactly four good leptons conserving charge and lepton numbers; # Note that all collections are RVecs and good_lep is the mask for the good leptons.; # The lepton types are PDG numbers and set to 11 or 13 for an electron or muon; # irrespective of the charge.",MatchSource.CODE_COMMENT,tutorials/dataframe/df106_HiggsToFourLeptons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py:58,Energy Efficiency,charge,charge,58,"# Select events with exactly four good leptons conserving charge and lepton numbers; # Note that all collections are RVecs and good_lep is the mask for the good leptons.; # The lepton types are PDG numbers and set to 11 or 13 for an electron or muon; # irrespective of the charge.",MatchSource.CODE_COMMENT,tutorials/dataframe/df106_HiggsToFourLeptons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py:273,Energy Efficiency,charge,charge,273,"# Select events with exactly four good leptons conserving charge and lepton numbers; # Note that all collections are RVecs and good_lep is the mask for the good leptons.; # The lepton types are PDG numbers and set to 11 or 13 for an electron or muon; # irrespective of the charge.",MatchSource.CODE_COMMENT,tutorials/dataframe/df106_HiggsToFourLeptons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py:24,Integrability,depend,depending,24,"# Apply additional cuts depending on lepton flavour",MatchSource.CODE_COMMENT,tutorials/dataframe/df106_HiggsToFourLeptons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py:368,Availability,avail,available,368,"# Evaluate the systematic uncertainty; # The systematic uncertainty in this analysis is the MC scale factor uncertainty that depends on lepton; # kinematics such as pT or pseudorapidity.; # Muons uncertainties are negligible, as stated in https://atlas.web.cern.ch/Atlas/GROUPS/PHYSICS/PAPERS/MUON-2018-03/.; # Electrons uncertainties are evaluated based on the plots available in https://doi.org/10.48550/arXiv.1908.00005.; # The uncertainties are linearly interpolated, using the `TGraph::Eval()` method, to cover a range of pT values covered by the analysis.; # Create a VaryHelper to interpolate the available data.",MatchSource.CODE_COMMENT,tutorials/dataframe/df106_HiggsToFourLeptons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py:604,Availability,avail,available,604,"# Evaluate the systematic uncertainty; # The systematic uncertainty in this analysis is the MC scale factor uncertainty that depends on lepton; # kinematics such as pT or pseudorapidity.; # Muons uncertainties are negligible, as stated in https://atlas.web.cern.ch/Atlas/GROUPS/PHYSICS/PAPERS/MUON-2018-03/.; # Electrons uncertainties are evaluated based on the plots available in https://doi.org/10.48550/arXiv.1908.00005.; # The uncertainties are linearly interpolated, using the `TGraph::Eval()` method, to cover a range of pT values covered by the analysis.; # Create a VaryHelper to interpolate the available data.",MatchSource.CODE_COMMENT,tutorials/dataframe/df106_HiggsToFourLeptons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py:125,Integrability,depend,depends,125,"# Evaluate the systematic uncertainty; # The systematic uncertainty in this analysis is the MC scale factor uncertainty that depends on lepton; # kinematics such as pT or pseudorapidity.; # Muons uncertainties are negligible, as stated in https://atlas.web.cern.ch/Atlas/GROUPS/PHYSICS/PAPERS/MUON-2018-03/.; # Electrons uncertainties are evaluated based on the plots available in https://doi.org/10.48550/arXiv.1908.00005.; # The uncertainties are linearly interpolated, using the `TGraph::Eval()` method, to cover a range of pT values covered by the analysis.; # Create a VaryHelper to interpolate the available data.",MatchSource.CODE_COMMENT,tutorials/dataframe/df106_HiggsToFourLeptons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py:198,Performance,perform,performed,198,"# Retrieve values of the data and MC histograms in order to plot them.; # Draw cloned histograms to preserve graphics when original objects goes out of scope; # Note: GetValue() action operation is performed after all lazy actions of the RDF were defined first.",MatchSource.CODE_COMMENT,tutorials/dataframe/df106_HiggsToFourLeptons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py:21,Availability,error,errorbars,21,"# Draw raw data with errorbars; # Add legend",MatchSource.CODE_COMMENT,tutorials/dataframe/df106_HiggsToFourLeptons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py:113,Deployability,release,release,113,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## A single top analysis using the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the analysis of single top production adapted from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. Top quarks with a mass of about 172 GeV are mostly; ## produced in pairs but also appear alone, dominantly from the decays of a W boson in association with a light jet.; ##; ## The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data.; ## By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with; ## the --full-dataset argument and you can also run only on a fraction of the original dataset using the argument --lumi-scale.; ##; ## See the [corresponding spec json file](https://github.com/root-project/root/blob/master/tutorials/dataframe/df107_SingleTopAnalysis.json).; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date July 2020; ## \author Stefan Wunsch (KIT, CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df107_SingleTopAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py:243,Deployability,release,release,243,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## A single top analysis using the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the analysis of single top production adapted from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. Top quarks with a mass of about 172 GeV are mostly; ## produced in pairs but also appear alone, dominantly from the decays of a W boson in association with a light jet.; ##; ## The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data.; ## By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with; ## the --full-dataset argument and you can also run only on a fraction of the original dataset using the argument --lumi-scale.; ##; ## See the [corresponding spec json file](https://github.com/root-project/root/blob/master/tutorials/dataframe/df107_SingleTopAnalysis.json).; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date July 2020; ## \author Stefan Wunsch (KIT, CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df107_SingleTopAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py:291,Deployability,release,release,291,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## A single top analysis using the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the analysis of single top production adapted from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. Top quarks with a mass of about 172 GeV are mostly; ## produced in pairs but also appear alone, dominantly from the decays of a W boson in association with a light jet.; ##; ## The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data.; ## By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with; ## the --full-dataset argument and you can also run only on a fraction of the original dataset using the argument --lumi-scale.; ##; ## See the [corresponding spec json file](https://github.com/root-project/root/blob/master/tutorials/dataframe/df107_SingleTopAnalysis.json).; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date July 2020; ## \author Stefan Wunsch (KIT, CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df107_SingleTopAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py:210,Energy Efficiency,adapt,adapted,210,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## A single top analysis using the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the analysis of single top production adapted from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. Top quarks with a mass of about 172 GeV are mostly; ## produced in pairs but also appear alone, dominantly from the decays of a W boson in association with a light jet.; ##; ## The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data.; ## By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with; ## the --full-dataset argument and you can also run only on a fraction of the original dataset using the argument --lumi-scale.; ##; ## See the [corresponding spec json file](https://github.com/root-project/root/blob/master/tutorials/dataframe/df107_SingleTopAnalysis.json).; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date July 2020; ## \author Stefan Wunsch (KIT, CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df107_SingleTopAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py:403,Energy Efficiency,energy,energy,403,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## A single top analysis using the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the analysis of single top production adapted from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. Top quarks with a mass of about 172 GeV are mostly; ## produced in pairs but also appear alone, dominantly from the decays of a W boson in association with a light jet.; ##; ## The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data.; ## By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with; ## the --full-dataset argument and you can also run only on a fraction of the original dataset using the argument --lumi-scale.; ##; ## See the [corresponding spec json file](https://github.com/root-project/root/blob/master/tutorials/dataframe/df107_SingleTopAnalysis.json).; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date July 2020; ## \author Stefan Wunsch (KIT, CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df107_SingleTopAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py:763,Energy Efficiency,reduce,reduce,763,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## A single top analysis using the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the analysis of single top production adapted from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. Top quarks with a mass of about 172 GeV are mostly; ## produced in pairs but also appear alone, dominantly from the decays of a W boson in association with a light jet.; ##; ## The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data.; ## By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with; ## the --full-dataset argument and you can also run only on a fraction of the original dataset using the argument --lumi-scale.; ##; ## See the [corresponding spec json file](https://github.com/root-project/root/blob/master/tutorials/dataframe/df107_SingleTopAnalysis.json).; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date July 2020; ## \author Stefan Wunsch (KIT, CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df107_SingleTopAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py:210,Modifiability,adapt,adapted,210,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## A single top analysis using the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the analysis of single top production adapted from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. Top quarks with a mass of about 172 GeV are mostly; ## produced in pairs but also appear alone, dominantly from the decays of a W boson in association with a light jet.; ##; ## The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data.; ## By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with; ## the --full-dataset argument and you can also run only on a fraction of the original dataset using the argument --lumi-scale.; ##; ## See the [corresponding spec json file](https://github.com/root-project/root/blob/master/tutorials/dataframe/df107_SingleTopAnalysis.json).; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date July 2020; ## \author Stefan Wunsch (KIT, CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df107_SingleTopAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py:358,Safety,detect,detector,358,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## A single top analysis using the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the analysis of single top production adapted from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. Top quarks with a mass of about 172 GeV are mostly; ## produced in pairs but also appear alone, dominantly from the decays of a W boson in association with a light jet.; ##; ## The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data.; ## By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with; ## the --full-dataset argument and you can also run only on a fraction of the original dataset using the argument --lumi-scale.; ##; ## See the [corresponding spec json file](https://github.com/root-project/root/blob/master/tutorials/dataframe/df107_SingleTopAnalysis.json).; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date July 2020; ## \author Stefan Wunsch (KIT, CERN)",MatchSource.CODE_COMMENT,tutorials/dataframe/df107_SingleTopAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py:59,Performance,load,load,59,"# Create a ROOT dataframe for each dataset; # Note that we load the filenames from the external json file placed in the same folder than this script.",MatchSource.CODE_COMMENT,tutorials/dataframe/df107_SingleTopAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py:8,Availability,down,down,8,"# Scale down the datasets if requested",MatchSource.CODE_COMMENT,tutorials/dataframe/df107_SingleTopAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py:116,Performance,perform,performing,116,"# Select events for the analysis and make histograms of the top mass; # Just-in-time compile custom helper function performing complex computations",MatchSource.CODE_COMMENT,tutorials/dataframe/df107_SingleTopAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py:76,Energy Efficiency,energy,energy,76,"# Select events with electron or muon trigger and with a missing transverse energy above 30 GeV",MatchSource.CODE_COMMENT,tutorials/dataframe/df107_SingleTopAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py:70,Energy Efficiency,energy,energy,70,"# Compute transverse mass of the W boson using the missing transverse energy and the good lepton; # Use only events with a transverse mass of the reconstructed W boson larger than 60 GeV",MatchSource.CODE_COMMENT,tutorials/dataframe/df107_SingleTopAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py:67,Energy Efficiency,energy,energy,67,"# Reconstruct the top mass from the lepton, the missing transverse energy and the b-jet; # Just-in-time compile the function to compute the top mass from the constituents",MatchSource.CODE_COMMENT,tutorials/dataframe/df107_SingleTopAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py:499,Energy Efficiency,energy,energy,499,"""""""; float ComputeTopMass(float lep_pt, float lep_eta, float lep_phi, float lep_e, float jet_pt, float jet_eta, float jet_phi, float jet_e, float met_et, float met_phi); {; const ROOT::Math::PtEtaPhiEVector lep(lep_pt / 1000.0, lep_eta, lep_phi, lep_e / 1000.0);; const ROOT::Math::PtEtaPhiEVector met(met_et / 1000.0, 0, met_phi, met_et / 1000.0);; const ROOT::Math::PtEtaPhiEVector bjet(jet_pt / 1000.0, jet_eta, jet_phi, jet_e / 1000.0);; // Please note that we treat here the missing transverse energy as the neutrino, even though the z component is missing!; return (lep + met + bjet).M();; }; """"""",MatchSource.CODE_COMMENT,tutorials/dataframe/df107_SingleTopAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py:205,Availability,avail,available,205,"# Run the event loop and merge histograms of the respective processes; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.",MatchSource.CODE_COMMENT,tutorials/dataframe/df107_SingleTopAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py:276,Availability,avail,available,276,"# Run the event loop and merge histograms of the respective processes; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.",MatchSource.CODE_COMMENT,tutorials/dataframe/df107_SingleTopAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py:333,Availability,avail,available,333,"# Run the event loop and merge histograms of the respective processes; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.",MatchSource.CODE_COMMENT,tutorials/dataframe/df107_SingleTopAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py:150,Performance,concurren,concurrently,150,"# Run the event loop and merge histograms of the respective processes; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.",MatchSource.CODE_COMMENT,tutorials/dataframe/df107_SingleTopAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py:41,Security,validat,validation,41,"# Corrected normalization derived from a validation region",MatchSource.CODE_COMMENT,tutorials/dataframe/df107_SingleTopAnalysis.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py:266,Deployability,configurat,configuration,266,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## Configure a Spark connection and fill two histograms distributedly.; ##; ## This tutorial shows the ingredients needed to setup the connection to a Spark; ## cluster, namely a SparkConf object holding configuration parameters and a; ## SparkContext object created with the desired options. After this initial; ## setup, an RDataFrame with distributed capabilities is created and connected; ## to the SparkContext instance. Finally, a couple of histograms are drawn from; ## the created columns in the dataset.; ##; ## \macro_code; ## \macro_image; ##; ## \date March 2021; ## \author Vincenzo Eduardo Padulano",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf001_spark_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py:266,Modifiability,config,configuration,266,"## \file; ## \ingroup tutorial_dataframe; ## \notebook -draw; ## Configure a Spark connection and fill two histograms distributedly.; ##; ## This tutorial shows the ingredients needed to setup the connection to a Spark; ## cluster, namely a SparkConf object holding configuration parameters and a; ## SparkContext object created with the desired options. After this initial; ## setup, an RDataFrame with distributed capabilities is created and connected; ## to the SparkContext instance. Finally, a couple of histograms are drawn from; ## the created columns in the dataset.; ##; ## \macro_code; ## \macro_image; ##; ## \date March 2021; ## \author Vincenzo Eduardo Padulano",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf001_spark_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py:599,Availability,avail,available,599,"# Setup the connection to Spark; # First create a dictionary with keys representing Spark specific configuration; # parameters. In this tutorial we use the following configuration parameters:; #; # 1. spark.app.name: The name of the Spark application; # 2. spark.master: The Spark endpoint responsible for running the; # application. With the syntax ""local[2]"" we signal Spark we want to run; # locally on the same machine with 2 cores, each running a separate; # process. The default behaviour of a Spark application would run; # locally on the same machine with as many concurrent processes as; # available cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_nodes>,; # ""spark.executor.cores"" <cores_per_node>,}.items()); #; # You can find all configuration options and more details in the official Spark; # documentation at https://spark.apache.org/docs/latest/configuration.html .; # Create a SparkConf object with all the desired Spark configuration parameters",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf001_spark_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py:850,Availability,avail,availability,850,"# Setup the connection to Spark; # First create a dictionary with keys representing Spark specific configuration; # parameters. In this tutorial we use the following configuration parameters:; #; # 1. spark.app.name: The name of the Spark application; # 2. spark.master: The Spark endpoint responsible for running the; # application. With the syntax ""local[2]"" we signal Spark we want to run; # locally on the same machine with 2 cores, each running a separate; # process. The default behaviour of a Spark application would run; # locally on the same machine with as many concurrent processes as; # available cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_nodes>,; # ""spark.executor.cores"" <cores_per_node>,}.items()); #; # You can find all configuration options and more details in the official Spark; # documentation at https://spark.apache.org/docs/latest/configuration.html .; # Create a SparkConf object with all the desired Spark configuration parameters",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf001_spark_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py:99,Deployability,configurat,configuration,99,"# Setup the connection to Spark; # First create a dictionary with keys representing Spark specific configuration; # parameters. In this tutorial we use the following configuration parameters:; #; # 1. spark.app.name: The name of the Spark application; # 2. spark.master: The Spark endpoint responsible for running the; # application. With the syntax ""local[2]"" we signal Spark we want to run; # locally on the same machine with 2 cores, each running a separate; # process. The default behaviour of a Spark application would run; # locally on the same machine with as many concurrent processes as; # available cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_nodes>,; # ""spark.executor.cores"" <cores_per_node>,}.items()); #; # You can find all configuration options and more details in the official Spark; # documentation at https://spark.apache.org/docs/latest/configuration.html .; # Create a SparkConf object with all the desired Spark configuration parameters",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf001_spark_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py:166,Deployability,configurat,configuration,166,"# Setup the connection to Spark; # First create a dictionary with keys representing Spark specific configuration; # parameters. In this tutorial we use the following configuration parameters:; #; # 1. spark.app.name: The name of the Spark application; # 2. spark.master: The Spark endpoint responsible for running the; # application. With the syntax ""local[2]"" we signal Spark we want to run; # locally on the same machine with 2 cores, each running a separate; # process. The default behaviour of a Spark application would run; # locally on the same machine with as many concurrent processes as; # available cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_nodes>,; # ""spark.executor.cores"" <cores_per_node>,}.items()); #; # You can find all configuration options and more details in the official Spark; # documentation at https://spark.apache.org/docs/latest/configuration.html .; # Create a SparkConf object with all the desired Spark configuration parameters",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf001_spark_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py:952,Deployability,configurat,configuration,952,"# Setup the connection to Spark; # First create a dictionary with keys representing Spark specific configuration; # parameters. In this tutorial we use the following configuration parameters:; #; # 1. spark.app.name: The name of the Spark application; # 2. spark.master: The Spark endpoint responsible for running the; # application. With the syntax ""local[2]"" we signal Spark we want to run; # locally on the same machine with 2 cores, each running a separate; # process. The default behaviour of a Spark application would run; # locally on the same machine with as many concurrent processes as; # available cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_nodes>,; # ""spark.executor.cores"" <cores_per_node>,}.items()); #; # You can find all configuration options and more details in the official Spark; # documentation at https://spark.apache.org/docs/latest/configuration.html .; # Create a SparkConf object with all the desired Spark configuration parameters",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf001_spark_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py:1181,Deployability,configurat,configuration,1181,"# Setup the connection to Spark; # First create a dictionary with keys representing Spark specific configuration; # parameters. In this tutorial we use the following configuration parameters:; #; # 1. spark.app.name: The name of the Spark application; # 2. spark.master: The Spark endpoint responsible for running the; # application. With the syntax ""local[2]"" we signal Spark we want to run; # locally on the same machine with 2 cores, each running a separate; # process. The default behaviour of a Spark application would run; # locally on the same machine with as many concurrent processes as; # available cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_nodes>,; # ""spark.executor.cores"" <cores_per_node>,}.items()); #; # You can find all configuration options and more details in the official Spark; # documentation at https://spark.apache.org/docs/latest/configuration.html .; # Create a SparkConf object with all the desired Spark configuration parameters",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf001_spark_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py:1299,Deployability,configurat,configuration,1299,"# Setup the connection to Spark; # First create a dictionary with keys representing Spark specific configuration; # parameters. In this tutorial we use the following configuration parameters:; #; # 1. spark.app.name: The name of the Spark application; # 2. spark.master: The Spark endpoint responsible for running the; # application. With the syntax ""local[2]"" we signal Spark we want to run; # locally on the same machine with 2 cores, each running a separate; # process. The default behaviour of a Spark application would run; # locally on the same machine with as many concurrent processes as; # available cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_nodes>,; # ""spark.executor.cores"" <cores_per_node>,}.items()); #; # You can find all configuration options and more details in the official Spark; # documentation at https://spark.apache.org/docs/latest/configuration.html .; # Create a SparkConf object with all the desired Spark configuration parameters",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf001_spark_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py:1376,Deployability,configurat,configuration,1376,"# Setup the connection to Spark; # First create a dictionary with keys representing Spark specific configuration; # parameters. In this tutorial we use the following configuration parameters:; #; # 1. spark.app.name: The name of the Spark application; # 2. spark.master: The Spark endpoint responsible for running the; # application. With the syntax ""local[2]"" we signal Spark we want to run; # locally on the same machine with 2 cores, each running a separate; # process. The default behaviour of a Spark application would run; # locally on the same machine with as many concurrent processes as; # available cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_nodes>,; # ""spark.executor.cores"" <cores_per_node>,}.items()); #; # You can find all configuration options and more details in the official Spark; # documentation at https://spark.apache.org/docs/latest/configuration.html .; # Create a SparkConf object with all the desired Spark configuration parameters",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf001_spark_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py:99,Modifiability,config,configuration,99,"# Setup the connection to Spark; # First create a dictionary with keys representing Spark specific configuration; # parameters. In this tutorial we use the following configuration parameters:; #; # 1. spark.app.name: The name of the Spark application; # 2. spark.master: The Spark endpoint responsible for running the; # application. With the syntax ""local[2]"" we signal Spark we want to run; # locally on the same machine with 2 cores, each running a separate; # process. The default behaviour of a Spark application would run; # locally on the same machine with as many concurrent processes as; # available cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_nodes>,; # ""spark.executor.cores"" <cores_per_node>,}.items()); #; # You can find all configuration options and more details in the official Spark; # documentation at https://spark.apache.org/docs/latest/configuration.html .; # Create a SparkConf object with all the desired Spark configuration parameters",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf001_spark_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py:166,Modifiability,config,configuration,166,"# Setup the connection to Spark; # First create a dictionary with keys representing Spark specific configuration; # parameters. In this tutorial we use the following configuration parameters:; #; # 1. spark.app.name: The name of the Spark application; # 2. spark.master: The Spark endpoint responsible for running the; # application. With the syntax ""local[2]"" we signal Spark we want to run; # locally on the same machine with 2 cores, each running a separate; # process. The default behaviour of a Spark application would run; # locally on the same machine with as many concurrent processes as; # available cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_nodes>,; # ""spark.executor.cores"" <cores_per_node>,}.items()); #; # You can find all configuration options and more details in the official Spark; # documentation at https://spark.apache.org/docs/latest/configuration.html .; # Create a SparkConf object with all the desired Spark configuration parameters",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf001_spark_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py:952,Modifiability,config,configuration,952,"# Setup the connection to Spark; # First create a dictionary with keys representing Spark specific configuration; # parameters. In this tutorial we use the following configuration parameters:; #; # 1. spark.app.name: The name of the Spark application; # 2. spark.master: The Spark endpoint responsible for running the; # application. With the syntax ""local[2]"" we signal Spark we want to run; # locally on the same machine with 2 cores, each running a separate; # process. The default behaviour of a Spark application would run; # locally on the same machine with as many concurrent processes as; # available cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_nodes>,; # ""spark.executor.cores"" <cores_per_node>,}.items()); #; # You can find all configuration options and more details in the official Spark; # documentation at https://spark.apache.org/docs/latest/configuration.html .; # Create a SparkConf object with all the desired Spark configuration parameters",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf001_spark_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py:1181,Modifiability,config,configuration,1181,"# Setup the connection to Spark; # First create a dictionary with keys representing Spark specific configuration; # parameters. In this tutorial we use the following configuration parameters:; #; # 1. spark.app.name: The name of the Spark application; # 2. spark.master: The Spark endpoint responsible for running the; # application. With the syntax ""local[2]"" we signal Spark we want to run; # locally on the same machine with 2 cores, each running a separate; # process. The default behaviour of a Spark application would run; # locally on the same machine with as many concurrent processes as; # available cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_nodes>,; # ""spark.executor.cores"" <cores_per_node>,}.items()); #; # You can find all configuration options and more details in the official Spark; # documentation at https://spark.apache.org/docs/latest/configuration.html .; # Create a SparkConf object with all the desired Spark configuration parameters",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf001_spark_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py:1299,Modifiability,config,configuration,1299,"# Setup the connection to Spark; # First create a dictionary with keys representing Spark specific configuration; # parameters. In this tutorial we use the following configuration parameters:; #; # 1. spark.app.name: The name of the Spark application; # 2. spark.master: The Spark endpoint responsible for running the; # application. With the syntax ""local[2]"" we signal Spark we want to run; # locally on the same machine with 2 cores, each running a separate; # process. The default behaviour of a Spark application would run; # locally on the same machine with as many concurrent processes as; # available cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_nodes>,; # ""spark.executor.cores"" <cores_per_node>,}.items()); #; # You can find all configuration options and more details in the official Spark; # documentation at https://spark.apache.org/docs/latest/configuration.html .; # Create a SparkConf object with all the desired Spark configuration parameters",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf001_spark_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py:1376,Modifiability,config,configuration,1376,"# Setup the connection to Spark; # First create a dictionary with keys representing Spark specific configuration; # parameters. In this tutorial we use the following configuration parameters:; #; # 1. spark.app.name: The name of the Spark application; # 2. spark.master: The Spark endpoint responsible for running the; # application. With the syntax ""local[2]"" we signal Spark we want to run; # locally on the same machine with 2 cores, each running a separate; # process. The default behaviour of a Spark application would run; # locally on the same machine with as many concurrent processes as; # available cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_nodes>,; # ""spark.executor.cores"" <cores_per_node>,}.items()); #; # You can find all configuration options and more details in the official Spark; # documentation at https://spark.apache.org/docs/latest/configuration.html .; # Create a SparkConf object with all the desired Spark configuration parameters",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf001_spark_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py:572,Performance,concurren,concurrent,572,"# Setup the connection to Spark; # First create a dictionary with keys representing Spark specific configuration; # parameters. In this tutorial we use the following configuration parameters:; #; # 1. spark.app.name: The name of the Spark application; # 2. spark.master: The Spark endpoint responsible for running the; # application. With the syntax ""local[2]"" we signal Spark we want to run; # locally on the same machine with 2 cores, each running a separate; # process. The default behaviour of a Spark application would run; # locally on the same machine with as many concurrent processes as; # available cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_nodes>,; # ""spark.executor.cores"" <cores_per_node>,}.items()); #; # You can find all configuration options and more details in the official Spark; # documentation at https://spark.apache.org/docs/latest/configuration.html .; # Create a SparkConf object with all the desired Spark configuration parameters",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf001_spark_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py:676,Security,access,access,676,"# Setup the connection to Spark; # First create a dictionary with keys representing Spark specific configuration; # parameters. In this tutorial we use the following configuration parameters:; #; # 1. spark.app.name: The name of the Spark application; # 2. spark.master: The Spark endpoint responsible for running the; # application. With the syntax ""local[2]"" we signal Spark we want to run; # locally on the same machine with 2 cores, each running a separate; # process. The default behaviour of a Spark application would run; # locally on the same machine with as many concurrent processes as; # available cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_nodes>,; # ""spark.executor.cores"" <cores_per_node>,}.items()); #; # You can find all configuration options and more details in the official Spark; # documentation at https://spark.apache.org/docs/latest/configuration.html .; # Create a SparkConf object with all the desired Spark configuration parameters",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf001_spark_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py:33,Deployability,configurat,configuration,33,"# Create a SparkContext with the configuration stored in `sparkconf`",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf001_spark_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py:33,Modifiability,config,configuration,33,"# Create a SparkContext with the configuration stored in `sparkconf`",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf001_spark_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf002_dask_connection.py:1656,Availability,avail,available,1656,"ed. This step can be skipped if you have access to an existing Dask; cluster; in that case, the cluster administrator should provide you with a; URL to connect to the cluster in step 2. More options for cluster creation; can be found in the Dask docs at; http://distributed.dask.org/en/stable/api.html#cluster .; 2. Creating a Dask client object that connects to the cluster. This accepts; directly the object previously created. In case the cluster was setup; externally, you need to provide an endpoint URL to the client, e.g.; 'https://myscheduler.domain:8786'. Through Dask, you can connect to various types of cluster resources. For; example, you can connect together a set of machines through SSH and use them; to run your computations. This is done through the `SSHCluster` class. For; example:. ```python; from dask.distributed import SSHCluster; cluster = SSHCluster(; # A list with machine host names, the first name will be used as; # scheduler, following names will become workers.; hosts=[""machine1"",""machine2"",""machine3""],; # A dictionary of options for each worker node, here we set the number; # of cores to be used on each node.; worker_options={""nprocs"":4,},; ); ```. Another common usecase is interfacing Dask to a batch system like HTCondor or; Slurm. A separate package called dask-jobqueue (https://jobqueue.dask.org); extends the available Dask cluster classes to enable running Dask computations; as batch jobs. In this case, the cluster object usually receives the parameters; that would be written in the job description file. For example:. ```python; from dask_jobqueue import HTCondorCluster; cluster = HTCondorCluster(; cores=1,; memory='2000MB',; disk='1000MB',; ); # Use the scale method to send as many jobs as needed; cluster.scale(4); ```. In this tutorial, a cluster object is created for the local machine, using; multiprocessing (processes=True) on 2 workers (n_workers=2) each using only; 1 core (threads_per_worker=1) and 2GiB of RAM (memory_limit=""2GiB"").; """"""",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf002_dask_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf002_dask_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf002_dask_connection.py:1249,Energy Efficiency,schedul,scheduler,1249,"posal. To use; only the local machine (e.g. your laptop), a `LocalCluster` object can be; used. This step can be skipped if you have access to an existing Dask; cluster; in that case, the cluster administrator should provide you with a; URL to connect to the cluster in step 2. More options for cluster creation; can be found in the Dask docs at; http://distributed.dask.org/en/stable/api.html#cluster .; 2. Creating a Dask client object that connects to the cluster. This accepts; directly the object previously created. In case the cluster was setup; externally, you need to provide an endpoint URL to the client, e.g.; 'https://myscheduler.domain:8786'. Through Dask, you can connect to various types of cluster resources. For; example, you can connect together a set of machines through SSH and use them; to run your computations. This is done through the `SSHCluster` class. For; example:. ```python; from dask.distributed import SSHCluster; cluster = SSHCluster(; # A list with machine host names, the first name will be used as; # scheduler, following names will become workers.; hosts=[""machine1"",""machine2"",""machine3""],; # A dictionary of options for each worker node, here we set the number; # of cores to be used on each node.; worker_options={""nprocs"":4,},; ); ```. Another common usecase is interfacing Dask to a batch system like HTCondor or; Slurm. A separate package called dask-jobqueue (https://jobqueue.dask.org); extends the available Dask cluster classes to enable running Dask computations; as batch jobs. In this case, the cluster object usually receives the parameters; that would be written in the job description file. For example:. ```python; from dask_jobqueue import HTCondorCluster; cluster = HTCondorCluster(; cores=1,; memory='2000MB',; disk='1000MB',; ); # Use the scale method to send as many jobs as needed; cluster.scale(4); ```. In this tutorial, a cluster object is created for the local machine, using; multiprocessing (processes=True) on 2 workers (n_workers=2)",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf002_dask_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf002_dask_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf002_dask_connection.py:170,Integrability,depend,depending,170,"""""""; Setup connection to a Dask cluster. Two ingredients are needed:; 1. Creating a cluster object that represents computing resources. This can be; done in various ways depending on the type of resources at disposal. To use; only the local machine (e.g. your laptop), a `LocalCluster` object can be; used. This step can be skipped if you have access to an existing Dask; cluster; in that case, the cluster administrator should provide you with a; URL to connect to the cluster in step 2. More options for cluster creation; can be found in the Dask docs at; http://distributed.dask.org/en/stable/api.html#cluster .; 2. Creating a Dask client object that connects to the cluster. This accepts; directly the object previously created. In case the cluster was setup; externally, you need to provide an endpoint URL to the client, e.g.; 'https://myscheduler.domain:8786'. Through Dask, you can connect to various types of cluster resources. For; example, you can connect together a set of machines through SSH and use them; to run your computations. This is done through the `SSHCluster` class. For; example:. ```python; from dask.distributed import SSHCluster; cluster = SSHCluster(; # A list with machine host names, the first name will be used as; # scheduler, following names will become workers.; hosts=[""machine1"",""machine2"",""machine3""],; # A dictionary of options for each worker node, here we set the number; # of cores to be used on each node.; worker_options={""nprocs"":4,},; ); ```. Another common usecase is interfacing Dask to a batch system like HTCondor or; Slurm. A separate package called dask-jobqueue (https://jobqueue.dask.org); extends the available Dask cluster classes to enable running Dask computations; as batch jobs. In this case, the cluster object usually receives the parameters; that would be written in the job description file. For example:. ```python; from dask_jobqueue import HTCondorCluster; cluster = HTCondorCluster(; cores=1,; memory='2000MB',; disk='1000MB',; ); # ",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf002_dask_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf002_dask_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf002_dask_connection.py:1644,Modifiability,extend,extends,1644,"ed. This step can be skipped if you have access to an existing Dask; cluster; in that case, the cluster administrator should provide you with a; URL to connect to the cluster in step 2. More options for cluster creation; can be found in the Dask docs at; http://distributed.dask.org/en/stable/api.html#cluster .; 2. Creating a Dask client object that connects to the cluster. This accepts; directly the object previously created. In case the cluster was setup; externally, you need to provide an endpoint URL to the client, e.g.; 'https://myscheduler.domain:8786'. Through Dask, you can connect to various types of cluster resources. For; example, you can connect together a set of machines through SSH and use them; to run your computations. This is done through the `SSHCluster` class. For; example:. ```python; from dask.distributed import SSHCluster; cluster = SSHCluster(; # A list with machine host names, the first name will be used as; # scheduler, following names will become workers.; hosts=[""machine1"",""machine2"",""machine3""],; # A dictionary of options for each worker node, here we set the number; # of cores to be used on each node.; worker_options={""nprocs"":4,},; ); ```. Another common usecase is interfacing Dask to a batch system like HTCondor or; Slurm. A separate package called dask-jobqueue (https://jobqueue.dask.org); extends the available Dask cluster classes to enable running Dask computations; as batch jobs. In this case, the cluster object usually receives the parameters; that would be written in the job description file. For example:. ```python; from dask_jobqueue import HTCondorCluster; cluster = HTCondorCluster(; cores=1,; memory='2000MB',; disk='1000MB',; ); # Use the scale method to send as many jobs as needed; cluster.scale(4); ```. In this tutorial, a cluster object is created for the local machine, using; multiprocessing (processes=True) on 2 workers (n_workers=2) each using only; 1 core (threads_per_worker=1) and 2GiB of RAM (memory_limit=""2GiB"").; """"""",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf002_dask_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf002_dask_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf002_dask_connection.py:344,Security,access,access,344,"""""""; Setup connection to a Dask cluster. Two ingredients are needed:; 1. Creating a cluster object that represents computing resources. This can be; done in various ways depending on the type of resources at disposal. To use; only the local machine (e.g. your laptop), a `LocalCluster` object can be; used. This step can be skipped if you have access to an existing Dask; cluster; in that case, the cluster administrator should provide you with a; URL to connect to the cluster in step 2. More options for cluster creation; can be found in the Dask docs at; http://distributed.dask.org/en/stable/api.html#cluster .; 2. Creating a Dask client object that connects to the cluster. This accepts; directly the object previously created. In case the cluster was setup; externally, you need to provide an endpoint URL to the client, e.g.; 'https://myscheduler.domain:8786'. Through Dask, you can connect to various types of cluster resources. For; example, you can connect together a set of machines through SSH and use them; to run your computations. This is done through the `SSHCluster` class. For; example:. ```python; from dask.distributed import SSHCluster; cluster = SSHCluster(; # A list with machine host names, the first name will be used as; # scheduler, following names will become workers.; hosts=[""machine1"",""machine2"",""machine3""],; # A dictionary of options for each worker node, here we set the number; # of cores to be used on each node.; worker_options={""nprocs"":4,},; ); ```. Another common usecase is interfacing Dask to a batch system like HTCondor or; Slurm. A separate package called dask-jobqueue (https://jobqueue.dask.org); extends the available Dask cluster classes to enable running Dask computations; as batch jobs. In this case, the cluster object usually receives the parameters; that would be written in the job description file. For example:. ```python; from dask_jobqueue import HTCondorCluster; cluster = HTCondorCluster(; cores=1,; memory='2000MB',; disk='1000MB',; ); # ",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf002_dask_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf002_dask_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf002_dask_connection.py:91,Integrability,wrap,wrapped,91,"# This tutorial uses Python multiprocessing, so the creation of the cluster; # needs to be wrapped in the main clause as described in the Python docs; # https://docs.python.org/3/library/multiprocessing.html",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf002_dask_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf002_dask_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf002_dask_connection.py:31,Testability,mock,mock,31,"# Create the connection to the mock Dask cluster on the local machine",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf002_dask_connection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf002_dask_connection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf003_live_visualization.py:40,Modifiability,variab,variable,40,"# Define a gaussean distribution with a variable mean",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf003_live_visualization.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf003_live_visualization.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf004_dask_lxbatch.py:230,Deployability,release,release,230,"# \file; # \ingroup tutorial_dataframe; #; # Configure a Dask connection to a HTCondor cluster hosted by the CERN batch; # service. To reproduce this tutorial, run the following steps:; #; # 1. Login to lxplus; # 2. Source an LCG release (minimum LCG104). See; # https://lcgdocs.web.cern.ch/lcgdocs/lcgreleases/introduction/ for details; # 3. Install the `dask_lxplus` package, which provides the `CernCluster` class; # needed to properly connect to the CERN condor pools. See; # https://batchdocs.web.cern.ch/specialpayload/dask.html for instructions; # 4. Run this tutorial; #; # The tutorial defines resources that each job will request to the condor; # scheduler, then creates a Dask client that can be used by RDataFrame to; # distribute computations.; #; # \macro_code; #; # \date September 2023; # \author Vincenzo Eduardo Padulano CERN",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf004_dask_lxbatch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf004_dask_lxbatch.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf004_dask_lxbatch.py:657,Energy Efficiency,schedul,scheduler,657,"# \file; # \ingroup tutorial_dataframe; #; # Configure a Dask connection to a HTCondor cluster hosted by the CERN batch; # service. To reproduce this tutorial, run the following steps:; #; # 1. Login to lxplus; # 2. Source an LCG release (minimum LCG104). See; # https://lcgdocs.web.cern.ch/lcgdocs/lcgreleases/introduction/ for details; # 3. Install the `dask_lxplus` package, which provides the `CernCluster` class; # needed to properly connect to the CERN condor pools. See; # https://batchdocs.web.cern.ch/specialpayload/dask.html for instructions; # 4. Run this tutorial; #; # The tutorial defines resources that each job will request to the condor; # scheduler, then creates a Dask client that can be used by RDataFrame to; # distribute computations.; #; # \macro_code; #; # \date September 2023; # \author Vincenzo Eduardo Padulano CERN",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf004_dask_lxbatch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf004_dask_lxbatch.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf004_dask_lxbatch.py:166,Energy Efficiency,schedul,scheduler,166,"# The resources described in the specified arguments to this class represent; # the submission of a single job and will spawn a single Dask worker when; # the condor scheduler launches the job. Specifically, this example has Dask; # workers each with 1 core and 2 GB of memory.",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf004_dask_lxbatch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf004_dask_lxbatch.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf004_dask_lxbatch.py:231,Availability,avail,available,231,"# The Dask client can be created after the condor jobs have been submitted.; # At this point, the jobs may or may not have actually started. Thus, it is; # not guaranteed that the application already has the requested resources; # available.",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf004_dask_lxbatch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf004_dask_lxbatch.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf004_dask_lxbatch.py:66,Energy Efficiency,schedul,scheduler,66,"# It is possible to tell the Dask client to wait until the condor scheduler; # has started the requested jobs and launched the Dask workers.; # The client will wait until 'n_workers' workers have been launched. In this; # example, the client waits for all the jobs requested to start before; # continuing with the application.",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf004_dask_lxbatch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf004_dask_lxbatch.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf004_dask_lxbatch.py:11,Usability,simpl,simple,11,"""""""; Run a simple example with RDataFrame, using the previously created; connection to the HTCondor cluster.; """"""",MatchSource.CODE_COMMENT,tutorials/dataframe/distrdf004_dask_lxbatch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf004_dask_lxbatch.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/combinedFit.py:2,Performance,perform,perform,2,"# perform now global fit",MatchSource.CODE_COMMENT,tutorials/fit/combinedFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/combinedFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/combinedFit.py:83,Integrability,wrap,wrapped,83,"# we can't pass the Python object globalChi2 directly to FitFCN.; # It needs to be wrapped in a ROOT::Math::Functor.",MatchSource.CODE_COMMENT,tutorials/fit/combinedFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/combinedFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/fitConvolution.py:54,Modifiability,variab,variables,54,"# Probability density function of the addition of two variables is the; # convolution of two density functions.",MatchSource.CODE_COMMENT,tutorials/fit/fitConvolution.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/fitConvolution.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/fitNormSum.py:332,Modifiability,variab,variable,332,"# Note: in the C++ tutorial, the parameter value sync is done in one line with:; # ```C++; # f_sum->SetParameters(fnorm_exp_cb->GetParameters().data());; # ```; # However, TF1NormSum::GetParameters() returns an std::vector by value, which; # doesn't survive long enough in Python. That's why we have to explicitly; # assign it to a variable first and can't use a temporary.",MatchSource.CODE_COMMENT,tutorials/fit/fitNormSum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/fitNormSum.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/fitNormSum.py:23,Availability,avail,available,23,"# fit - use Minuit2 if available",MatchSource.CODE_COMMENT,tutorials/fit/fitNormSum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/fitNormSum.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/fitNormSum.py:2,Testability,test,test,2,"# test if parameters are fine",MatchSource.CODE_COMMENT,tutorials/fit/fitNormSum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/fitNormSum.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/multifit.py:245,Availability,error,errors,245,"## \file; ## \ingroup tutorial_fit; ## \notebook; ## Fitting multiple functions to different ranges of a 1-D histogram; ## Example showing how to fit in a sub-range of an histogram; ## A histogram is created and filled with the bin contents and errors; ## defined in the table below.; ## Three Gaussians are fitted in sub-ranges of this histogram.; ## A new function (a sum of 3 Gaussians) is fitted on another subrange; ## Note that when fitting simple functions, such as Gaussians, the initial; ## values of parameters are automatically computed by ROOT.; ## In the more complicated case of the sum of 3 Gaussians, the initial values; ## of parameters must be given. In this particular case, the initial values; ## are taken from the result of the individual fits.; ##; ## \macro_image; ## \macro_output; ## \macro_code; ##; ## \authors Jonas Rembser, Rene Brun (C++ version)",MatchSource.CODE_COMMENT,tutorials/fit/multifit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/multifit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/multifit.py:447,Usability,simpl,simple,447,"## \file; ## \ingroup tutorial_fit; ## \notebook; ## Fitting multiple functions to different ranges of a 1-D histogram; ## Example showing how to fit in a sub-range of an histogram; ## A histogram is created and filled with the bin contents and errors; ## defined in the table below.; ## Three Gaussians are fitted in sub-ranges of this histogram.; ## A new function (a sum of 3 Gaussians) is fitted on another subrange; ## Note that when fitting simple functions, such as Gaussians, the initial; ## values of parameters are automatically computed by ROOT.; ## In the more complicated case of the sum of 3 Gaussians, the initial values; ## of parameters must be given. In this particular case, the initial values; ## are taken from the result of the individual fits.; ##; ## \macro_image; ## \macro_output; ## \macro_code; ##; ## \authors Jonas Rembser, Rene Brun (C++ version)",MatchSource.CODE_COMMENT,tutorials/fit/multifit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/multifit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/NumericalMinimization.py:6,Availability,toler,tolerance,6,"# Set tolerance and other minimizer parameters, one can also use default; # values",MatchSource.CODE_COMMENT,tutorials/fit/NumericalMinimization.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/NumericalMinimization.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/NumericalMinimization.py:18,Integrability,wrap,wrapper,18,"# Create function wrapper for minimizer",MatchSource.CODE_COMMENT,tutorials/fit/NumericalMinimization.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/NumericalMinimization.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/NumericalMinimization.py:15,Modifiability,variab,variables,15,"# Set the free variables to be minimized !",MatchSource.CODE_COMMENT,tutorials/fit/NumericalMinimization.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/NumericalMinimization.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/graphs/bent.py:65,Availability,error,error,65,"## \file; ## \ingroup tutorial_graphs; ## \notebook -js; ## Bent error bars. Inspired from work of Olivier Couet.; ##; ## \macro_image; ## \macro_code; ##; ## \author Alberto Ferro",MatchSource.CODE_COMMENT,tutorials/graphs/bent.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/graphs/bent.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/hist/ratioplot1.py:73,Usability,simpl,simple,73,"## \file; ## \ingroup tutorial_hist; ## \notebook; ## Example creating a simple ratio plot of two histograms using the `pois` division option.; ## Two histograms are set up and filled with random numbers. The constructor of `TRatioPlot`; ## takes the to histograms, name and title for the object, drawing options for the histograms (`hist` and `E` in this case); ## and a drawing option for the output graph.; ## Inspired by the tutorial of Paul Gessinger.; ##; ## \macro_image; ## \macro_code; ##; ## \author Alberto Ferro",MatchSource.CODE_COMMENT,tutorials/hist/ratioplot1.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/hist/ratioplot1.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py:275,Availability,error,errors,275,"#!/usr/bin/env python; #; # A pyROOT script that allows one to; # make quick measuremenst.; #; # This is a command-line script that; # takes in signal and background values,; # as well as potentially uncertainties on those; # values, and returns a fitted signal value; # and errors",MatchSource.CODE_COMMENT,tutorials/histfactory/makeQuickModel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py:46,Testability,test,tests,46,""""""" Create a simple model and run statistical tests . This script can be used to make simple statistical using histfactory.; It takes values for signal, background, and data as input, and; can optionally take uncertainties on signal or background.; The model is created and saved to an output ROOT file, and; the model can be fit if requested. """"""",MatchSource.CODE_COMMENT,tutorials/histfactory/makeQuickModel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py:13,Usability,simpl,simple,13,""""""" Create a simple model and run statistical tests . This script can be used to make simple statistical using histfactory.; It takes values for signal, background, and data as input, and; can optionally take uncertainties on signal or background.; The model is created and saved to an output ROOT file, and; the model can be fit if requested. """"""",MatchSource.CODE_COMMENT,tutorials/histfactory/makeQuickModel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py:86,Usability,simpl,simple,86,""""""" Create a simple model and run statistical tests . This script can be used to make simple statistical using histfactory.; It takes values for signal, background, and data as input, and; can optionally take uncertainties on signal or background.; The model is created and saved to an output ROOT file, and; the model can be fit if requested. """"""",MatchSource.CODE_COMMENT,tutorials/histfactory/makeQuickModel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py:42,Integrability,message,messages,42,"# Make a log; # Set the format of the log messages:",MatchSource.CODE_COMMENT,tutorials/histfactory/makeQuickModel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py:9,Testability,log,log,9,"# Make a log; # Set the format of the log messages:",MatchSource.CODE_COMMENT,tutorials/histfactory/makeQuickModel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py:38,Testability,log,log,38,"# Make a log; # Set the format of the log messages:",MatchSource.CODE_COMMENT,tutorials/histfactory/makeQuickModel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py:13,Testability,log,logger,13,"# Create the logger object:",MatchSource.CODE_COMMENT,tutorials/histfactory/makeQuickModel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py:13,Safety,sanity check,sanity check,13,"# So a small sanity check:",MatchSource.CODE_COMMENT,tutorials/histfactory/makeQuickModel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py:39,Usability,simpl,simply,39,"# Okay, if all input is acceptable, we simply pass; # it to the MakeSimpleMeasurement function, which; # does the real work.",MatchSource.CODE_COMMENT,tutorials/histfactory/makeQuickModel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py:11,Usability,simpl,simple,11,""""""" Make a simple measurement using HistFactory; ; Take in simple values for signal, background data, ; and potentially uncertainty on signal and background. """"""",MatchSource.CODE_COMMENT,tutorials/histfactory/makeQuickModel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py:59,Usability,simpl,simple,59,""""""" Make a simple measurement using HistFactory; ; Take in simple values for signal, background data, ; and potentially uncertainty on signal and background. """"""",MatchSource.CODE_COMMENT,tutorials/histfactory/makeQuickModel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/math/Bessel.py:99,Availability,avail,available,99,"## \file; ## \ingroup tutorial_math; ## \notebook; ## Show the different kinds of Bessel functions available in ROOT; ## To execute the macro type in:; ##; ## ~~~{.cpp}; ## root[0] .x Bessel.C; ## ~~~; ##; ## It will create one canvas with the representation; ## of the cylindrical and spherical Bessel functions; ## regular and modified; ##; ## Based on Bessel.C by Magdalena Slawinska; ##; ## \macro_image; ## \macro_code; ##; ## \author Juan Fernando Jaramillo Botero",MatchSource.CODE_COMMENT,tutorials/math/Bessel.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/math/Bessel.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/math/mathcoreStatFunc.py:189,Modifiability,variab,variables,189,"## \file; ## \ingroup tutorial_math; ## \notebook; ## Example macro showing some major probability density functions in ROOT.; ## The macro shows four of them with; ## respect to their two variables. In order to run the macro type:; ##; ## ~~~{.cpp}; ## root [0] .x mathcoreStatFunc.C; ## ~~~; ##; ## Original tutorial by Andras Zsenei.; ## \macro_image; ## \macro_code; ##; ## \author Alberto Ferro",MatchSource.CODE_COMMENT,tutorials/math/mathcoreStatFunc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/math/mathcoreStatFunc.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/math/normalDist.py:10,Deployability,configurat,configuration,10,"# Set the configuration for the X and Y axis.",MatchSource.CODE_COMMENT,tutorials/math/normalDist.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/math/normalDist.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/math/normalDist.py:10,Modifiability,config,configuration,10,"# Set the configuration for the X and Y axis.",MatchSource.CODE_COMMENT,tutorials/math/normalDist.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/math/normalDist.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/math/normalDist.py:10,Deployability,configurat,configuration,10,"# Set the configuration for the X and Y axis for the cumulative normal; # distribution.",MatchSource.CODE_COMMENT,tutorials/math/normalDist.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/math/normalDist.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/math/normalDist.py:10,Modifiability,config,configuration,10,"# Set the configuration for the X and Y axis for the cumulative normal; # distribution.",MatchSource.CODE_COMMENT,tutorials/math/normalDist.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/math/normalDist.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/math/normalDist.py:109,Energy Efficiency,green,green,109,"# Set sigma to 1 and mean to zero, for the survival function of normal; # distribution, and set the color to green and title to none",MatchSource.CODE_COMMENT,tutorials/math/normalDist.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/math/normalDist.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/math/normalDist.py:10,Deployability,configurat,configuration,10,"# Set the configuration of X and Y axis",MatchSource.CODE_COMMENT,tutorials/math/normalDist.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/math/normalDist.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/math/normalDist.py:10,Modifiability,config,configuration,10,"# Set the configuration of X and Y axis",MatchSource.CODE_COMMENT,tutorials/math/normalDist.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/math/normalDist.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/math/normalDist.py:111,Energy Efficiency,green,green,111,"# Set sigma to 1 and mean to zero of survival function of quantile of normal; # distribution, and set color to green and title to none.",MatchSource.CODE_COMMENT,tutorials/math/normalDist.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/math/normalDist.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/math/principal.py:289,Modifiability,variab,variables,289,"## \file; ## \ingroup tutorial_math; ## \notebook; ## Principal Components Analysis (PCA) example; ##; ## Example of using TPrincipal as a stand alone class.; ##; ## I create n-dimensional data points, where c = trunc(n / 5) + 1; ## are correlated with the rest n - c randomly distributed variables.; ##; ## Based on principal.C by Rene Brun and Christian Holm Christensen; ##; ## \macro_output; ## \macro_code; ##; ## \authors Juan Fernando, Jaramillo Botero",MatchSource.CODE_COMMENT,tutorials/math/principal.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/math/principal.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/math/principal.py:173,Integrability,depend,dependent,173,"""""""*************************************************; * Principal Component Analysis *; * *; * Number of variables: {0:4d} *; * Number of data points: {1:8d} *; * Number of dependent variables: {2:4d} *; * *; *************************************************""""""",MatchSource.CODE_COMMENT,tutorials/math/principal.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/math/principal.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/math/principal.py:105,Modifiability,variab,variables,105,"""""""*************************************************; * Principal Component Analysis *; * *; * Number of variables: {0:4d} *; * Number of data points: {1:8d} *; * Number of dependent variables: {2:4d} *; * *; *************************************************""""""",MatchSource.CODE_COMMENT,tutorials/math/principal.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/math/principal.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/math/principal.py:183,Modifiability,variab,variables,183,"""""""*************************************************; * Principal Component Analysis *; * *; * Number of variables: {0:4d} *; * Number of data points: {1:8d} *; * Number of dependent variables: {2:4d} *; * *; *************************************************""""""",MatchSource.CODE_COMMENT,tutorials/math/principal.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/math/principal.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/math/principal.py:188,Modifiability,variab,variables,188,"# Initilase the TPrincipal object. Use the empty string for the; # final argument, if you don't wan't the covariance; # matrix. Normalising the covariance matrix is a good idea if your; # variables have different orders of magnitude.",MatchSource.CODE_COMMENT,tutorials/math/principal.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/math/principal.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/math/principal.py:35,Modifiability,variab,variable,35,"# Make the m data-points; # Make a variable to hold our data; # Allocate memory for the data point",MatchSource.CODE_COMMENT,tutorials/math/principal.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/math/principal.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/math/principal.py:44,Modifiability,variab,variables,44,"# First we create the un-correlated, random variables, according; # to one of three distributions",MatchSource.CODE_COMMENT,tutorials/math/principal.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/math/principal.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/math/principal.py:32,Modifiability,variab,variables,32,"# Then we create the correlated variables",MatchSource.CODE_COMMENT,tutorials/math/principal.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/math/principal.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/math/tStudent.py:27,Performance,load,load,27,"# This is the way to force load of MathMore in Cling",MatchSource.CODE_COMMENT,tutorials/math/tStudent.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/math/tStudent.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/demo.py:75,Availability,alive,alive,75,"## wait for input to keep the GUI (which lives on a ROOT event dispatcher) alive",MatchSource.CODE_COMMENT,tutorials/pyroot/demo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/demo.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/DynamicSlice.py:464,Energy Efficiency,power,powerful,464,"## \file; ## \ingroup tutorial_pyroot; ## \notebook; ## Example of function called when a mouse event occurs in a pad.; ## When moving the mouse in the canvas, a second canvas shows the; ## projection along X of the bin corresponding to the Y position; ## of the mouse. The resulting histogram is fitted with a gaussian.; ## A ""dynamic"" line shows the current bin position in Y.; ## This more elaborated example can be used as a starting point; ## to develop more powerful interactive applications exploiting CINT; ## as a development engine.; ##; ## Note that a class is used to hold on to the canvas that display; ## the selected slice.; ##; ## \macro_image; ## \macro_code; ##; ## \author Rene Brun, Johann Cohen-Tanugi, Wim Lavrijsen, Enric Tejedor",MatchSource.CODE_COMMENT,tutorials/pyroot/DynamicSlice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/DynamicSlice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/formula1.py:104,Modifiability,variab,variable,104,"# We create a formula object and compute the value of this formula; # for two different values of the x variable.",MatchSource.CODE_COMMENT,tutorials/pyroot/formula1.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/formula1.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/gerrors.py:80,Availability,error,error,80,"## \file; ## \ingroup tutorial_pyroot; ## \notebook -js; ## A Simple Graph with error bars; ##; ## \macro_image; ## \macro_code; ##; ## \author Wim Lavrijsen",MatchSource.CODE_COMMENT,tutorials/pyroot/gerrors.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/gerrors.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/graph.py:96,Security,access,access,96,"# If the graph does not appear, try using the ""i"" flag, e.g. ""python3 -i graph.py""; # This will access the interactive mode after executing the script, and thereby persist; # long enough for the graph to appear.",MatchSource.CODE_COMMENT,tutorials/pyroot/graph.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/graph.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/h1ReadAndDraw.py:88,Usability,guid,guide,88,"#; # Draw hpx as a lego. Clicking on the lego area will show; # a ""transparent cube"" to guide you rotating the lego in real time.",MatchSource.CODE_COMMENT,tutorials/pyroot/h1ReadAndDraw.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/h1ReadAndDraw.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/h1ReadAndDraw.py:23,Availability,error,errors,23,"#; # Draw hpx with its errors and a marker.",MatchSource.CODE_COMMENT,tutorials/pyroot/h1ReadAndDraw.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/h1ReadAndDraw.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/hsimple.py:157,Safety,detect,detector,157,"# Create a new ROOT binary machine independent file.; # Note that this file may contain any kind of ROOT objects, histograms,; # pictures, graphics objects, detector geometries, tracks, events, etc..; # This file is now becoming the current directory.",MatchSource.CODE_COMMENT,tutorials/pyroot/hsimple.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/hsimple.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/hsimple.py:22,Performance,cache,cache,22,"# For speed, bind and cache the Fill member functions,",MatchSource.CODE_COMMENT,tutorials/pyroot/hsimple.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/hsimple.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/hsimple.py:27,Performance,cache,cache,27,"# Destroy member functions cache.",MatchSource.CODE_COMMENT,tutorials/pyroot/hsimple.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/hsimple.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/hsum.py:22,Performance,cache,cache,22,"# for speed, bind and cache the Fill member functions",MatchSource.CODE_COMMENT,tutorials/pyroot/hsum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/hsum.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/hsum.py:27,Performance,cache,cache,27,"# Destroy member functions cache.",MatchSource.CODE_COMMENT,tutorials/pyroot/hsum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/hsum.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/hsum.py:33,Deployability,update,update,33,"# Done, finalized and trigger an update.",MatchSource.CODE_COMMENT,tutorials/pyroot/hsum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/hsum.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/na49view.py:85,Safety,detect,detector,85,"## \file; ## \ingroup tutorial_pyroot; ## This macro generates two views of the NA49 detector.; ##; ## To have a better and dynamic view of any of these pads,; ## you can click with the middle button of your mouse to select it.; ## Then select ""View with x3d"" in the VIEW menu of the Canvas.; ## Once in x3d, you are in wireframe mode by default.; ## You can switch to:; ## - Hidden Line mode by typing E; ## - Solid mode by typing R; ## - Wireframe mode by typing W; ## - Stereo mode by clicking S (and you need special glasses); ## - To leave x3d type Q; ##; ## \macro_code; ##; ## \author Wim Lavrijsen",MatchSource.CODE_COMMENT,tutorials/pyroot/na49view.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/na49view.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/numberEntry.py:150,Deployability,update,updated,150,"## \file; ## \ingroup tutorial_pyroot; ## Example frame with one box where the user can increase or decrease a number; ## and the shown value will be updated accordingly.; ##; ## \macro_code; ##; ## \author Wim Lavrijsen",MatchSource.CODE_COMMENT,tutorials/pyroot/numberEntry.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/numberEntry.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/parse_CSV_file_with_TTree_ReadStream.py:242,Safety,avoid,avoiding,242,"# Clean the data entries: remove the first (header) row.; # Ensure empty strings are tagged as such since; # ROOT doesn't differentiate between different types; # of white space. Therefore, we change all of these; # entries to 'empty'. Also, avoiding any lines that begin; # with '#'",MatchSource.CODE_COMMENT,tutorials/pyroot/parse_CSV_file_with_TTree_ReadStream.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/parse_CSV_file_with_TTree_ReadStream.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py:402,Performance,load,loading,402,"# Let's first define a new C++ class. In this tutorial, we will see how we can; # ""pythonize"" this class, i.e. how we can add some extra behaviour to it to; # make it more pythonic or easier to use from Python.; #; # Note: In this example, the class is defined dynamically for demonstration; # purposes, but it could also be a C++ class defined in some library or header.; # For more information about loading C++ user code to be used from Python with; # PyROOT, please see:; # https://root.cern.ch/manual/python/#loading-user-libraries-and-just-in-time-compilation-jitting",MatchSource.CODE_COMMENT,tutorials/pyroot/pyroot002_pythonizationDecorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py:514,Performance,load,loading-user-libraries-and-just-in-time-compilation-jitting,514,"# Let's first define a new C++ class. In this tutorial, we will see how we can; # ""pythonize"" this class, i.e. how we can add some extra behaviour to it to; # make it more pythonic or easier to use from Python.; #; # Note: In this example, the class is defined dynamically for demonstration; # purposes, but it could also be a C++ class defined in some library or header.; # For more information about loading C++ user code to be used from Python with; # PyROOT, please see:; # https://root.cern.ch/manual/python/#loading-user-libraries-and-just-in-time-compilation-jitting",MatchSource.CODE_COMMENT,tutorials/pyroot/pyroot002_pythonizationDecorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py:86,Integrability,inject,injecting,86,"# Next, we define a pythonizor function: the function that will be responsible; # for injecting new behaviour in our C++ class `MyClass`.; #; # To convert a given Python function into a pythonizor, we need to decorate it; # with the @pythonization decorator. Such decorator allows us to define which; # which class we want to pythonize by providing its class name and its; # namespace (if the latter is not specified, it defaults to the global; # namespace, i.e. '::').; #; # The decorated function - the pythonizor - must accept either one or two; # parameters:; # 1. The class to be pythonized (proxy object where new behaviour can be; # injected); # 2. The fully-qualified name of that class (optional).; #; # Let's see all this with a simple example. Suppose I would like to define how; # `MyClass` objects are represented as a string in Python (i.e. what would be; # shown when I print that object). For that purpose, I can define the following; # pythonizor function. There are two important things to be noted here:; # - The @pythonization decorator has one argument that specifies our target; # class is `MyClass`.; # - The pythonizor function `pythonizor_of_myclass` provides and injects a new; # implementation for `__str__`, the mechanism that Python provides to define; # how to represent objects as strings. This new implementation; # always returns the string ""This is a MyClass object"".",MatchSource.CODE_COMMENT,tutorials/pyroot/pyroot002_pythonizationDecorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py:640,Integrability,inject,injected,640,"# Next, we define a pythonizor function: the function that will be responsible; # for injecting new behaviour in our C++ class `MyClass`.; #; # To convert a given Python function into a pythonizor, we need to decorate it; # with the @pythonization decorator. Such decorator allows us to define which; # which class we want to pythonize by providing its class name and its; # namespace (if the latter is not specified, it defaults to the global; # namespace, i.e. '::').; #; # The decorated function - the pythonizor - must accept either one or two; # parameters:; # 1. The class to be pythonized (proxy object where new behaviour can be; # injected); # 2. The fully-qualified name of that class (optional).; #; # Let's see all this with a simple example. Suppose I would like to define how; # `MyClass` objects are represented as a string in Python (i.e. what would be; # shown when I print that object). For that purpose, I can define the following; # pythonizor function. There are two important things to be noted here:; # - The @pythonization decorator has one argument that specifies our target; # class is `MyClass`.; # - The pythonizor function `pythonizor_of_myclass` provides and injects a new; # implementation for `__str__`, the mechanism that Python provides to define; # how to represent objects as strings. This new implementation; # always returns the string ""This is a MyClass object"".",MatchSource.CODE_COMMENT,tutorials/pyroot/pyroot002_pythonizationDecorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py:1189,Integrability,inject,injects,1189,"# Next, we define a pythonizor function: the function that will be responsible; # for injecting new behaviour in our C++ class `MyClass`.; #; # To convert a given Python function into a pythonizor, we need to decorate it; # with the @pythonization decorator. Such decorator allows us to define which; # which class we want to pythonize by providing its class name and its; # namespace (if the latter is not specified, it defaults to the global; # namespace, i.e. '::').; #; # The decorated function - the pythonizor - must accept either one or two; # parameters:; # 1. The class to be pythonized (proxy object where new behaviour can be; # injected); # 2. The fully-qualified name of that class (optional).; #; # Let's see all this with a simple example. Suppose I would like to define how; # `MyClass` objects are represented as a string in Python (i.e. what would be; # shown when I print that object). For that purpose, I can define the following; # pythonizor function. There are two important things to be noted here:; # - The @pythonization decorator has one argument that specifies our target; # class is `MyClass`.; # - The pythonizor function `pythonizor_of_myclass` provides and injects a new; # implementation for `__str__`, the mechanism that Python provides to define; # how to represent objects as strings. This new implementation; # always returns the string ""This is a MyClass object"".",MatchSource.CODE_COMMENT,tutorials/pyroot/pyroot002_pythonizationDecorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py:86,Security,inject,injecting,86,"# Next, we define a pythonizor function: the function that will be responsible; # for injecting new behaviour in our C++ class `MyClass`.; #; # To convert a given Python function into a pythonizor, we need to decorate it; # with the @pythonization decorator. Such decorator allows us to define which; # which class we want to pythonize by providing its class name and its; # namespace (if the latter is not specified, it defaults to the global; # namespace, i.e. '::').; #; # The decorated function - the pythonizor - must accept either one or two; # parameters:; # 1. The class to be pythonized (proxy object where new behaviour can be; # injected); # 2. The fully-qualified name of that class (optional).; #; # Let's see all this with a simple example. Suppose I would like to define how; # `MyClass` objects are represented as a string in Python (i.e. what would be; # shown when I print that object). For that purpose, I can define the following; # pythonizor function. There are two important things to be noted here:; # - The @pythonization decorator has one argument that specifies our target; # class is `MyClass`.; # - The pythonizor function `pythonizor_of_myclass` provides and injects a new; # implementation for `__str__`, the mechanism that Python provides to define; # how to represent objects as strings. This new implementation; # always returns the string ""This is a MyClass object"".",MatchSource.CODE_COMMENT,tutorials/pyroot/pyroot002_pythonizationDecorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py:640,Security,inject,injected,640,"# Next, we define a pythonizor function: the function that will be responsible; # for injecting new behaviour in our C++ class `MyClass`.; #; # To convert a given Python function into a pythonizor, we need to decorate it; # with the @pythonization decorator. Such decorator allows us to define which; # which class we want to pythonize by providing its class name and its; # namespace (if the latter is not specified, it defaults to the global; # namespace, i.e. '::').; #; # The decorated function - the pythonizor - must accept either one or two; # parameters:; # 1. The class to be pythonized (proxy object where new behaviour can be; # injected); # 2. The fully-qualified name of that class (optional).; #; # Let's see all this with a simple example. Suppose I would like to define how; # `MyClass` objects are represented as a string in Python (i.e. what would be; # shown when I print that object). For that purpose, I can define the following; # pythonizor function. There are two important things to be noted here:; # - The @pythonization decorator has one argument that specifies our target; # class is `MyClass`.; # - The pythonizor function `pythonizor_of_myclass` provides and injects a new; # implementation for `__str__`, the mechanism that Python provides to define; # how to represent objects as strings. This new implementation; # always returns the string ""This is a MyClass object"".",MatchSource.CODE_COMMENT,tutorials/pyroot/pyroot002_pythonizationDecorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py:1189,Security,inject,injects,1189,"# Next, we define a pythonizor function: the function that will be responsible; # for injecting new behaviour in our C++ class `MyClass`.; #; # To convert a given Python function into a pythonizor, we need to decorate it; # with the @pythonization decorator. Such decorator allows us to define which; # which class we want to pythonize by providing its class name and its; # namespace (if the latter is not specified, it defaults to the global; # namespace, i.e. '::').; #; # The decorated function - the pythonizor - must accept either one or two; # parameters:; # 1. The class to be pythonized (proxy object where new behaviour can be; # injected); # 2. The fully-qualified name of that class (optional).; #; # Let's see all this with a simple example. Suppose I would like to define how; # `MyClass` objects are represented as a string in Python (i.e. what would be; # shown when I print that object). For that purpose, I can define the following; # pythonizor function. There are two important things to be noted here:; # - The @pythonization decorator has one argument that specifies our target; # class is `MyClass`.; # - The pythonizor function `pythonizor_of_myclass` provides and injects a new; # implementation for `__str__`, the mechanism that Python provides to define; # how to represent objects as strings. This new implementation; # always returns the string ""This is a MyClass object"".",MatchSource.CODE_COMMENT,tutorials/pyroot/pyroot002_pythonizationDecorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py:739,Usability,simpl,simple,739,"# Next, we define a pythonizor function: the function that will be responsible; # for injecting new behaviour in our C++ class `MyClass`.; #; # To convert a given Python function into a pythonizor, we need to decorate it; # with the @pythonization decorator. Such decorator allows us to define which; # which class we want to pythonize by providing its class name and its; # namespace (if the latter is not specified, it defaults to the global; # namespace, i.e. '::').; #; # The decorated function - the pythonizor - must accept either one or two; # parameters:; # 1. The class to be pythonized (proxy object where new behaviour can be; # injected); # 2. The fully-qualified name of that class (optional).; #; # Let's see all this with a simple example. Suppose I would like to define how; # `MyClass` objects are represented as a string in Python (i.e. what would be; # shown when I print that object). For that purpose, I can define the following; # pythonizor function. There are two important things to be noted here:; # - The @pythonization decorator has one argument that specifies our target; # class is `MyClass`.; # - The pythonizor function `pythonizor_of_myclass` provides and injects a new; # implementation for `__str__`, the mechanism that Python provides to define; # how to represent objects as strings. This new implementation; # always returns the string ""This is a MyClass object"".",MatchSource.CODE_COMMENT,tutorials/pyroot/pyroot002_pythonizationDecorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py:33,Usability,simpl,simple,33,"# The previous example is just a simple one, but there are many ways in which a; # class can be pythonized. Typical examples are the redefinition of dunder; # methods (e.g. `__iter__` and `__next__` to make your objects iterable from; # Python). If you need some inspiration, many ROOT classes are pythonized in; # the way we just saw; their pythonizations can be seen at:; # https://github.com/root-project/root/tree/master/bindings/pyroot/pythonizations/python/ROOT/pythonization; # The @pythonization decorator offers a few more options when it comes to; # matching classes that you want to pythonize. We saw that we can match a; # single class, but we can also specify a list of classes to pythonize.; #; # The following code defines a couple of new classes:",MatchSource.CODE_COMMENT,tutorials/pyroot/pyroot002_pythonizationDecorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py:12,Security,access,access,12,"# If we now access both classes, we should see that the pythonizor runs twice.",MatchSource.CODE_COMMENT,tutorials/pyroot/pyroot002_pythonizationDecorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py:735,Integrability,inject,inject,735,"# So far we have seen how pythonizations can be registered for classes that; # have not been used yet. We have discussed how, in that case, the pythonizor; # functions are executed lazily when their target class/es are used for the; # first time in the application.; # However, it can also happen that our target class/es have already been; # accessed by the time we register a pythonization. In such a scenario, the; # pythonizor is applied immediately (at registration time) to the target; # class/es.; # Let's see an example of what was just explained. We will define a new class; # and immediately create an object of that class. We can check how the object; # still does not have a new attribute `pythonized` that we are going to inject; # in the next step.",MatchSource.CODE_COMMENT,tutorials/pyroot/pyroot002_pythonizationDecorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py:343,Security,access,accessed,343,"# So far we have seen how pythonizations can be registered for classes that; # have not been used yet. We have discussed how, in that case, the pythonizor; # functions are executed lazily when their target class/es are used for the; # first time in the application.; # However, it can also happen that our target class/es have already been; # accessed by the time we register a pythonization. In such a scenario, the; # pythonizor is applied immediately (at registration time) to the target; # class/es.; # Let's see an example of what was just explained. We will define a new class; # and immediately create an object of that class. We can check how the object; # still does not have a new attribute `pythonized` that we are going to inject; # in the next step.",MatchSource.CODE_COMMENT,tutorials/pyroot/pyroot002_pythonizationDecorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py:735,Security,inject,inject,735,"# So far we have seen how pythonizations can be registered for classes that; # have not been used yet. We have discussed how, in that case, the pythonizor; # functions are executed lazily when their target class/es are used for the; # first time in the application.; # However, it can also happen that our target class/es have already been; # accessed by the time we register a pythonization. In such a scenario, the; # pythonizor is applied immediately (at registration time) to the target; # class/es.; # Let's see an example of what was just explained. We will define a new class; # and immediately create an object of that class. We can check how the object; # still does not have a new attribute `pythonized` that we are going to inject; # in the next step.",MatchSource.CODE_COMMENT,tutorials/pyroot/pyroot002_pythonizationDecorator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot003_prettyPrinting.py:305,Energy Efficiency,power,powered,305,"## \file; ## \ingroup tutorial_pyroot; ## \notebook -nodraw; ## This tutorial illustrates the pretty printing feature of PyROOT, which reveals; ## the content of the object if a string representation is requested, e.g., by; ## Python's print statement. The printing behaves similar to the ROOT prompt; ## powered by the C++ interpreter cling.; ##; ## \macro_code; ## \macro_output; ##; ## \date June 2018; ## \author Stefan Wunsch, Enric Tejedor",MatchSource.CODE_COMMENT,tutorials/pyroot/pyroot003_prettyPrinting.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot003_prettyPrinting.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot004_NumbaDeclare.py:186,Usability,usab,usable,186,"## \file; ## \ingroup tutorial_pyroot; ## \notebook -nodraw; ## This tutorial illustrates how PyROOT supports declaring C++ callables from; ## Python callables making them, for example, usable with RDataFrame. The feature; ## uses the numba Python package for just-in-time compilation of the Python callable; ## and supports fundamental types and ROOT::RVec thereof.; ##; ## \macro_code; ## \macro_output; ##; ## \date March 2020; ## \author Stefan Wunsch",MatchSource.CODE_COMMENT,tutorials/pyroot/pyroot004_NumbaDeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot004_NumbaDeclare.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot004_NumbaDeclare.py:29,Availability,avail,available,29,"# The Python callable is now available from C++ in the Numba namespace.; # For example, we can use it from the interpreter.",MatchSource.CODE_COMMENT,tutorials/pyroot/pyroot004_NumbaDeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot004_NumbaDeclare.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot004_NumbaDeclare.py:221,Energy Efficiency,power,power,221,"# ROOT uses the numba Python package to create C++ functions from python ones.; # We support as input and return types of the callable fundamental types and; # ROOT::RVec thereof. See the following callable computing the power of the; # elements in an array.",MatchSource.CODE_COMMENT,tutorials/pyroot/pyroot004_NumbaDeclare.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot004_NumbaDeclare.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot005_tfile_context_manager.py:419,Availability,alive,alive,419,"# Also reading data from a TFile can be done in a context manager. Information; # stored in the objects of the file can be queried and used inside the context.; # After the context, the objects are not usable anymore because the file is; # automatically closed. This means you should use this pattern as a quick way; # to get information or modify objects from a certain file, without needing to; # keep the histograms alive afterwards.",MatchSource.CODE_COMMENT,tutorials/pyroot/pyroot005_tfile_context_manager.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot005_tfile_context_manager.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot005_tfile_context_manager.py:202,Usability,usab,usable,202,"# Also reading data from a TFile can be done in a context manager. Information; # stored in the objects of the file can be queried and used inside the context.; # After the context, the objects are not usable anymore because the file is; # automatically closed. This means you should use this pattern as a quick way; # to get information or modify objects from a certain file, without needing to; # keep the histograms alive afterwards.",MatchSource.CODE_COMMENT,tutorials/pyroot/pyroot005_tfile_context_manager.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot005_tfile_context_manager.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot006_tcontext_context_manager.py:46,Safety,safe,safely,46,"# Changing directory into another file can be safely done through a TContext; # context manager.",MatchSource.CODE_COMMENT,tutorials/pyroot/pyroot006_tcontext_context_manager.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot006_tcontext_context_manager.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot006_tcontext_context_manager.py:191,Availability,avail,available,191,"# After the context, the current directory is restored back to file_2. Also, the; # two files are kept open. This means that objects read, written or modified; # inside the context are still available afterwards.",MatchSource.CODE_COMMENT,tutorials/pyroot/pyroot006_tcontext_context_manager.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot006_tcontext_context_manager.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot006_tcontext_context_manager.py:87,Safety,safe,safely,87,"# TContext and TFile context managers can also be used in conjunction, allowing; # for safely:; # - Opening a file, creating, modifying, writing and reading objects in it.; # - Closing the file, storing it on disk.; # - Restoring the previous value of gDirectory to the latest file opened before; # this context, rather than to the global ROOT.gROOT; # Remember that the TContext must be initialized before the TFile, otherwise the; # current directory would already be set to the file opened for this context.",MatchSource.CODE_COMMENT,tutorials/pyroot/pyroot006_tcontext_context_manager.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot006_tcontext_context_manager.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/ratioplot.py:30,Availability,error,errors,30,"# Set up plot for markers and errors",MatchSource.CODE_COMMENT,tutorials/pyroot/ratioplot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/ratioplot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/ratioplot.py:5,Safety,avoid,avoid,5,"# to avoid clipping the bottom zero, redraw a small axis",MatchSource.CODE_COMMENT,tutorials/pyroot/ratioplot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/ratioplot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/staff.py:56,Security,access,access,56,"## A C/C++ structure is required, to allow memory based access",MatchSource.CODE_COMMENT,tutorials/pyroot/staff.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/staff.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/zdemo.py:161,Safety,predict,predictions,161,"## \file; ## \ingroup tutorial_pyroot; ## \notebook; ## This macro is an example of graphs in log scales with annotations.; ##; ## The presented results; ## are predictions of invariant cross-section of Direct Photons produced; ## at RHIC energies, based on the universality of scaling function H(z).; ##; ##; ## These Figures were published in JINR preprint E2-98-64, Dubna,; ## 1998 and submitted to CPC.; ##; ## \macro_image; ## \macro_code; ##; ## \authors Michael Tokarev, Elena Potrebenikova (JINR Dubna)",MatchSource.CODE_COMMENT,tutorials/pyroot/zdemo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/zdemo.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/zdemo.py:94,Testability,log,log,94,"## \file; ## \ingroup tutorial_pyroot; ## \notebook; ## This macro is an example of graphs in log scales with annotations.; ##; ## The presented results; ## are predictions of invariant cross-section of Direct Photons produced; ## at RHIC energies, based on the universality of scaling function H(z).; ##; ##; ## These Figures were published in JINR preprint E2-98-64, Dubna,; ## 1998 and submitted to CPC.; ##; ## \macro_image; ## \macro_code; ##; ## \authors Michael Tokarev, Elena Potrebenikova (JINR Dubna)",MatchSource.CODE_COMMENT,tutorials/pyroot/zdemo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/zdemo.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/zdemo.py:9,Performance,load,loaded,9,"# run if loaded as script",MatchSource.CODE_COMMENT,tutorials/pyroot/zdemo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/zdemo.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df104.py:107,Deployability,release,release,107,"## \file; ## \ingroup tutorial_rcanvas; ## The Higgs to two photons analysis from the ATLAS Open Data 2020 release, with RDataFrame.; ##; ## This tutorial is the Higgs to two photons analysis from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. Although the Higgs to two photons decay is very rare,; ## the contribution of the Higgs can be seen as a narrow peak around 125 GeV because of the excellent; ## reconstruction and identification efficiency of photons at the ATLAS experiment.; ##; ## The analysis is translated to a RDataFrame workflow processing 1.7 GB of simulated events and data.; ##; ## This macro is replica of tutorials/dataframe/df104_HiggsToTwoPhotons.py, but with usage of ROOT7 graphics; ## Run macro with python3 -i df104.py command to get interactive canvas; ##; ## \macro_image (df104.png); ## \macro_code; ##; ## \date 2021-06-15; ## \authors Stefan Wunsch (KIT, CERN) Sergey Linev (GSI)",MatchSource.CODE_COMMENT,tutorials/rcanvas/df104.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df104.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df104.py:217,Deployability,release,release,217,"## \file; ## \ingroup tutorial_rcanvas; ## The Higgs to two photons analysis from the ATLAS Open Data 2020 release, with RDataFrame.; ##; ## This tutorial is the Higgs to two photons analysis from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. Although the Higgs to two photons decay is very rare,; ## the contribution of the Higgs can be seen as a narrow peak around 125 GeV because of the excellent; ## reconstruction and identification efficiency of photons at the ATLAS experiment.; ##; ## The analysis is translated to a RDataFrame workflow processing 1.7 GB of simulated events and data.; ##; ## This macro is replica of tutorials/dataframe/df104_HiggsToTwoPhotons.py, but with usage of ROOT7 graphics; ## Run macro with python3 -i df104.py command to get interactive canvas; ##; ## \macro_image (df104.png); ## \macro_code; ##; ## \date 2021-06-15; ## \authors Stefan Wunsch (KIT, CERN) Sergey Linev (GSI)",MatchSource.CODE_COMMENT,tutorials/rcanvas/df104.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df104.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df104.py:265,Deployability,release,release,265,"## \file; ## \ingroup tutorial_rcanvas; ## The Higgs to two photons analysis from the ATLAS Open Data 2020 release, with RDataFrame.; ##; ## This tutorial is the Higgs to two photons analysis from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. Although the Higgs to two photons decay is very rare,; ## the contribution of the Higgs can be seen as a narrow peak around 125 GeV because of the excellent; ## reconstruction and identification efficiency of photons at the ATLAS experiment.; ##; ## The analysis is translated to a RDataFrame workflow processing 1.7 GB of simulated events and data.; ##; ## This macro is replica of tutorials/dataframe/df104_HiggsToTwoPhotons.py, but with usage of ROOT7 graphics; ## Run macro with python3 -i df104.py command to get interactive canvas; ##; ## \macro_image (df104.png); ## \macro_code; ##; ## \date 2021-06-15; ## \authors Stefan Wunsch (KIT, CERN) Sergey Linev (GSI)",MatchSource.CODE_COMMENT,tutorials/rcanvas/df104.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df104.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df104.py:374,Energy Efficiency,energy,energy,374,"## \file; ## \ingroup tutorial_rcanvas; ## The Higgs to two photons analysis from the ATLAS Open Data 2020 release, with RDataFrame.; ##; ## This tutorial is the Higgs to two photons analysis from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. Although the Higgs to two photons decay is very rare,; ## the contribution of the Higgs can be seen as a narrow peak around 125 GeV because of the excellent; ## reconstruction and identification efficiency of photons at the ATLAS experiment.; ##; ## The analysis is translated to a RDataFrame workflow processing 1.7 GB of simulated events and data.; ##; ## This macro is replica of tutorials/dataframe/df104_HiggsToTwoPhotons.py, but with usage of ROOT7 graphics; ## Run macro with python3 -i df104.py command to get interactive canvas; ##; ## \macro_image (df104.png); ## \macro_code; ##; ## \date 2021-06-15; ## \authors Stefan Wunsch (KIT, CERN) Sergey Linev (GSI)",MatchSource.CODE_COMMENT,tutorials/rcanvas/df104.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df104.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df104.py:329,Safety,detect,detector,329,"## \file; ## \ingroup tutorial_rcanvas; ## The Higgs to two photons analysis from the ATLAS Open Data 2020 release, with RDataFrame.; ##; ## This tutorial is the Higgs to two photons analysis from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. Although the Higgs to two photons decay is very rare,; ## the contribution of the Higgs can be seen as a narrow peak around 125 GeV because of the excellent; ## reconstruction and identification efficiency of photons at the ATLAS experiment.; ##; ## The analysis is translated to a RDataFrame workflow processing 1.7 GB of simulated events and data.; ##; ## This macro is replica of tutorials/dataframe/df104_HiggsToTwoPhotons.py, but with usage of ROOT7 graphics; ## Run macro with python3 -i df104.py command to get interactive canvas; ##; ## \macro_image (df104.png); ## \macro_code; ##; ## \date 2021-06-15; ## \authors Stefan Wunsch (KIT, CERN) Sergey Linev (GSI)",MatchSource.CODE_COMMENT,tutorials/rcanvas/df104.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df104.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df104.py:9,Performance,multi-thread,multi-threading,9,"# Enable multi-threading",MatchSource.CODE_COMMENT,tutorials/rcanvas/df104.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df104.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df104.py:50,Performance,perform,perform,50,"# Define a new column with the invariant mass and perform final event selection",MatchSource.CODE_COMMENT,tutorials/rcanvas/df104.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df104.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df104.py:156,Availability,avail,available,156,"# Run the event loop; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.",MatchSource.CODE_COMMENT,tutorials/rcanvas/df104.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df104.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df104.py:227,Availability,avail,available,227,"# Run the event loop; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.",MatchSource.CODE_COMMENT,tutorials/rcanvas/df104.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df104.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df104.py:284,Availability,avail,available,284,"# Run the event loop; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.",MatchSource.CODE_COMMENT,tutorials/rcanvas/df104.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df104.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df104.py:101,Performance,concurren,concurrently,101,"# Run the event loop; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.",MatchSource.CODE_COMMENT,tutorials/rcanvas/df104.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df104.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df104.py:42,Availability,avail,available,42,"# Create the plot; # Set styles - not yet available for v7; # ROOT.gROOT.SetStyle(""ATLAS""); # Create canvas with pads for main plot and data/MC ratio",MatchSource.CODE_COMMENT,tutorials/rcanvas/df104.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df104.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py:94,Deployability,release,release,94,"## \file; ## \ingroup tutorial_rcanvas; ## The W boson mass analysis from the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the analysis of the W boson mass taken from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. W bosons are produced frequently at the LHC and; ## are an important background to studies of Standard Model processes, for example the Higgs boson analyses.; ##; ## The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data.; ## By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with; ## the --full-dataset argument and you can also run only on a fraction of the original dataset using the argument --lumi-scale.; ##; ## This macro is replica of tutorials/dataframe/df105_WBosonAnalysis.py, but with usage of ROOT7 graphics; ## Run macro with python3 -i df105.py command to get interactive canvas; ##; ## \macro_image (rcanvas_js); ## \macro_code; ##; ## \date March 2020; ## \authors Stefan Wunsch (KIT, CERN) Sergey Linev (GSI)",MatchSource.CODE_COMMENT,tutorials/rcanvas/df105.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py:217,Deployability,release,release,217,"## \file; ## \ingroup tutorial_rcanvas; ## The W boson mass analysis from the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the analysis of the W boson mass taken from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. W bosons are produced frequently at the LHC and; ## are an important background to studies of Standard Model processes, for example the Higgs boson analyses.; ##; ## The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data.; ## By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with; ## the --full-dataset argument and you can also run only on a fraction of the original dataset using the argument --lumi-scale.; ##; ## This macro is replica of tutorials/dataframe/df105_WBosonAnalysis.py, but with usage of ROOT7 graphics; ## Run macro with python3 -i df105.py command to get interactive canvas; ##; ## \macro_image (rcanvas_js); ## \macro_code; ##; ## \date March 2020; ## \authors Stefan Wunsch (KIT, CERN) Sergey Linev (GSI)",MatchSource.CODE_COMMENT,tutorials/rcanvas/df105.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py:265,Deployability,release,release,265,"## \file; ## \ingroup tutorial_rcanvas; ## The W boson mass analysis from the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the analysis of the W boson mass taken from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. W bosons are produced frequently at the LHC and; ## are an important background to studies of Standard Model processes, for example the Higgs boson analyses.; ##; ## The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data.; ## By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with; ## the --full-dataset argument and you can also run only on a fraction of the original dataset using the argument --lumi-scale.; ##; ## This macro is replica of tutorials/dataframe/df105_WBosonAnalysis.py, but with usage of ROOT7 graphics; ## Run macro with python3 -i df105.py command to get interactive canvas; ##; ## \macro_image (rcanvas_js); ## \macro_code; ##; ## \date March 2020; ## \authors Stefan Wunsch (KIT, CERN) Sergey Linev (GSI)",MatchSource.CODE_COMMENT,tutorials/rcanvas/df105.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py:377,Energy Efficiency,energy,energy,377,"## \file; ## \ingroup tutorial_rcanvas; ## The W boson mass analysis from the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the analysis of the W boson mass taken from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. W bosons are produced frequently at the LHC and; ## are an important background to studies of Standard Model processes, for example the Higgs boson analyses.; ##; ## The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data.; ## By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with; ## the --full-dataset argument and you can also run only on a fraction of the original dataset using the argument --lumi-scale.; ##; ## This macro is replica of tutorials/dataframe/df105_WBosonAnalysis.py, but with usage of ROOT7 graphics; ## Run macro with python3 -i df105.py command to get interactive canvas; ##; ## \macro_image (rcanvas_js); ## \macro_code; ##; ## \date March 2020; ## \authors Stefan Wunsch (KIT, CERN) Sergey Linev (GSI)",MatchSource.CODE_COMMENT,tutorials/rcanvas/df105.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py:726,Energy Efficiency,reduce,reduce,726,"## \file; ## \ingroup tutorial_rcanvas; ## The W boson mass analysis from the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the analysis of the W boson mass taken from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. W bosons are produced frequently at the LHC and; ## are an important background to studies of Standard Model processes, for example the Higgs boson analyses.; ##; ## The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data.; ## By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with; ## the --full-dataset argument and you can also run only on a fraction of the original dataset using the argument --lumi-scale.; ##; ## This macro is replica of tutorials/dataframe/df105_WBosonAnalysis.py, but with usage of ROOT7 graphics; ## Run macro with python3 -i df105.py command to get interactive canvas; ##; ## \macro_image (rcanvas_js); ## \macro_code; ##; ## \date March 2020; ## \authors Stefan Wunsch (KIT, CERN) Sergey Linev (GSI)",MatchSource.CODE_COMMENT,tutorials/rcanvas/df105.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py:332,Safety,detect,detector,332,"## \file; ## \ingroup tutorial_rcanvas; ## The W boson mass analysis from the ATLAS Open Data release of 2020, with RDataFrame.; ##; ## This tutorial is the analysis of the W boson mass taken from the ATLAS Open Data release in 2020; ## (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector; ## during 2016 at a center-of-mass energy of 13 TeV. W bosons are produced frequently at the LHC and; ## are an important background to studies of Standard Model processes, for example the Higgs boson analyses.; ##; ## The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data.; ## By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with; ## the --full-dataset argument and you can also run only on a fraction of the original dataset using the argument --lumi-scale.; ##; ## This macro is replica of tutorials/dataframe/df105_WBosonAnalysis.py, but with usage of ROOT7 graphics; ## Run macro with python3 -i df105.py command to get interactive canvas; ##; ## \macro_image (rcanvas_js); ## \macro_code; ##; ## \date March 2020; ## \authors Stefan Wunsch (KIT, CERN) Sergey Linev (GSI)",MatchSource.CODE_COMMENT,tutorials/rcanvas/df105.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py:59,Performance,load,load,59,"# Create a ROOT dataframe for each dataset; # Note that we load the filenames from the external json file placed in the same folder than this script.",MatchSource.CODE_COMMENT,tutorials/rcanvas/df105.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py:8,Availability,down,down,8,"# Scale down the datasets if requested",MatchSource.CODE_COMMENT,tutorials/rcanvas/df105.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py:80,Performance,perform,performing,80,"# Select events for the analysis; # Just-in-time compile custom helper function performing complex computations",MatchSource.CODE_COMMENT,tutorials/rcanvas/df105.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py:78,Energy Efficiency,energy,energy,78,"# Select events with a muon or electron trigger and with a missing transverse energy larger than 30 GeV",MatchSource.CODE_COMMENT,tutorials/rcanvas/df105.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py:85,Energy Efficiency,energy,energy,85,"# Compute transverse mass of the W boson using the lepton and the missing transverse energy and make a histogram",MatchSource.CODE_COMMENT,tutorials/rcanvas/df105.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py:205,Availability,avail,available,205,"# Run the event loop and merge histograms of the respective processes; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.",MatchSource.CODE_COMMENT,tutorials/rcanvas/df105.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py:276,Availability,avail,available,276,"# Run the event loop and merge histograms of the respective processes; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.",MatchSource.CODE_COMMENT,tutorials/rcanvas/df105.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py:333,Availability,avail,available,333,"# Run the event loop and merge histograms of the respective processes; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.",MatchSource.CODE_COMMENT,tutorials/rcanvas/df105.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py:150,Performance,concurren,concurrently,150,"# Run the event loop and merge histograms of the respective processes; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.",MatchSource.CODE_COMMENT,tutorials/rcanvas/df105.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py:20,Modifiability,config,configure,20,"# Create canvas and configure frame with axis attributes",MatchSource.CODE_COMMENT,tutorials/rcanvas/df105.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/df105.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf101_basics.py:51,Modifiability,variab,variables,51,"# Set up model; # ---------------------; # Declare variables x,mean,sigma with associated name, title, initial; # value and allowed range",MatchSource.CODE_COMMENT,tutorials/roofit/rf101_basics.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf101_basics.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf101_basics.py:72,Availability,error,errors,72,"# Print values of mean and sigma (that now reflect fitted values and; # errors)",MatchSource.CODE_COMMENT,tutorials/roofit/rf101_basics.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf101_basics.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf102_dataimport.py:131,Availability,error,error,131,"# Plot and fit a RooDataHist; # ---------------------------------------------------; # Make plot of binned dataset showing Poisson error bars (RooFit default)",MatchSource.CODE_COMMENT,tutorials/roofit/rf102_dataimport.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf102_dataimport.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf102_dataimport.py:43,Availability,error,errors,43,"# Plot and fit a RooDataHist with internal errors; # ---------------------------------------------------------------------------------------------; # If histogram has custom error (i.e. its contents is does not originate from a Poisson process; # but e.g. is a sum of weighted events) you can data with symmetric 'sum-of-weights' error instead; # (same error bars as shown by ROOT)",MatchSource.CODE_COMMENT,tutorials/roofit/rf102_dataimport.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf102_dataimport.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf102_dataimport.py:174,Availability,error,error,174,"# Plot and fit a RooDataHist with internal errors; # ---------------------------------------------------------------------------------------------; # If histogram has custom error (i.e. its contents is does not originate from a Poisson process; # but e.g. is a sum of weighted events) you can data with symmetric 'sum-of-weights' error instead; # (same error bars as shown by ROOT)",MatchSource.CODE_COMMENT,tutorials/roofit/rf102_dataimport.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf102_dataimport.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf102_dataimport.py:330,Availability,error,error,330,"# Plot and fit a RooDataHist with internal errors; # ---------------------------------------------------------------------------------------------; # If histogram has custom error (i.e. its contents is does not originate from a Poisson process; # but e.g. is a sum of weighted events) you can data with symmetric 'sum-of-weights' error instead; # (same error bars as shown by ROOT)",MatchSource.CODE_COMMENT,tutorials/roofit/rf102_dataimport.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf102_dataimport.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf102_dataimport.py:353,Availability,error,error,353,"# Plot and fit a RooDataHist with internal errors; # ---------------------------------------------------------------------------------------------; # If histogram has custom error (i.e. its contents is does not originate from a Poisson process; # but e.g. is a sum of weighted events) you can data with symmetric 'sum-of-weights' error instead; # (same error bars as shown by ROOT)",MatchSource.CODE_COMMENT,tutorials/roofit/rf102_dataimport.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf102_dataimport.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf102_dataimport.py:19,Availability,error,error,19,"# Please note that error bars shown (Poisson or SumW2) are for visualization only, the are NOT used; # in a maximum likelihood fit; #; # A (binned) ML fit will ALWAYS assume the Poisson error interpretation of data (the mathematical definition; # of likelihood does not take any external definition of errors). Data with non-unit weights can only be correctly; # fitted with a chi^2 fit (see rf602_chi2fit.py); #; # Importing ROOT TTrees; # -----------------------------------------------------------; # Import ROOT TTree into a RooDataSet",MatchSource.CODE_COMMENT,tutorials/roofit/rf102_dataimport.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf102_dataimport.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf102_dataimport.py:186,Availability,error,error,186,"# Please note that error bars shown (Poisson or SumW2) are for visualization only, the are NOT used; # in a maximum likelihood fit; #; # A (binned) ML fit will ALWAYS assume the Poisson error interpretation of data (the mathematical definition; # of likelihood does not take any external definition of errors). Data with non-unit weights can only be correctly; # fitted with a chi^2 fit (see rf602_chi2fit.py); #; # Importing ROOT TTrees; # -----------------------------------------------------------; # Import ROOT TTree into a RooDataSet",MatchSource.CODE_COMMENT,tutorials/roofit/rf102_dataimport.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf102_dataimport.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf102_dataimport.py:302,Availability,error,errors,302,"# Please note that error bars shown (Poisson or SumW2) are for visualization only, the are NOT used; # in a maximum likelihood fit; #; # A (binned) ML fit will ALWAYS assume the Poisson error interpretation of data (the mathematical definition; # of likelihood does not take any external definition of errors). Data with non-unit weights can only be correctly; # fitted with a chi^2 fit (see rf602_chi2fit.py); #; # Importing ROOT TTrees; # -----------------------------------------------------------; # Import ROOT TTree into a RooDataSet",MatchSource.CODE_COMMENT,tutorials/roofit/rf102_dataimport.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf102_dataimport.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf102_dataimport.py:35,Modifiability,variab,variables,35,"# Read data from input stream. The variables of the dataset need to be supplied; # to the RooDataSet::read() function.",MatchSource.CODE_COMMENT,tutorials/roofit/rf102_dataimport.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf102_dataimport.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf102_dataimport.py:2,Modifiability,variab,variables,2,"# variables to be read. If the file has more fields, these are ignored.",MatchSource.CODE_COMMENT,tutorials/roofit/rf102_dataimport.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf102_dataimport.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf102_dataimport.py:21,Integrability,message,message,21,"# Prints if a RooFit message stream listens for debug messages. Use Q for quiet.",MatchSource.CODE_COMMENT,tutorials/roofit/rf102_dataimport.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf102_dataimport.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf102_dataimport.py:54,Integrability,message,messages,54,"# Prints if a RooFit message stream listens for debug messages. Use Q for quiet.",MatchSource.CODE_COMMENT,tutorials/roofit/rf102_dataimport.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf102_dataimport.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf104_classfactory.py:115,Modifiability,variab,variable,115,"# Write class skeleton code; # --------------------------------------------------; # Write skeleton pdf class with variable x,a,b; # To use this class,; # - Edit the file MyPdfV1.cxx and implement the evaluate() method in terms of x,a and b; # - Compile and link class with '.x MyPdfV1.cxx+'; #",MatchSource.CODE_COMMENT,tutorials/roofit/rf104_classfactory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf104_classfactory.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf104_classfactory.py:144,Modifiability,variab,variable,144,"# With added initial value expression; # ---------------------------------------------------------------------; # Write skeleton pdf class with variable x,a,b and given formula expression; # To use this class,; # - Compile and link class with '.x MyPdfV2.cxx+'; #",MatchSource.CODE_COMMENT,tutorials/roofit/rf104_classfactory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf104_classfactory.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf104_classfactory.py:162,Modifiability,variab,variable,162,"# With added analytical integral expression; # ---------------------------------------------------------------------------------; # Write skeleton pdf class with variable x,a,b, given formula expression _and_; # given expression for analytical integral over x; # To use this class,; # - Compile and link class with '.x MyPdfV3.cxx+'; #",MatchSource.CODE_COMMENT,tutorials/roofit/rf104_classfactory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf104_classfactory.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf104_classfactory.py:54,Performance,perform,performs,54,"# The ROOT.RooClassFactory.makePdfInstance() function performs code writing, compiling, linking; # and object instantiation in one go and can serve as a straight; # replacement of ROOT.RooGenericPdf",MatchSource.CODE_COMMENT,tutorials/roofit/rf104_classfactory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf104_classfactory.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf105_funcbinding.py:152,Modifiability,variab,variables,152,"# Bind ROOT::Math::beta_pdf C function; # -----------------------------------------------------------------------; # Bind pdf ROOT.Math.Beta with three variables as ROOT.RooAbsPdf function",MatchSource.CODE_COMMENT,tutorials/roofit/rf105_funcbinding.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf105_funcbinding.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf107_plotstyles.py:94,Availability,error,error,94,"# Data plotting styles; # ---------------------------------------; # Use sqrt(sum(weights^2)) error instead of Poisson errors",MatchSource.CODE_COMMENT,tutorials/roofit/rf107_plotstyles.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf107_plotstyles.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf107_plotstyles.py:119,Availability,error,errors,119,"# Data plotting styles; # ---------------------------------------; # Use sqrt(sum(weights^2)) error instead of Poisson errors",MatchSource.CODE_COMMENT,tutorials/roofit/rf107_plotstyles.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf107_plotstyles.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf107_plotstyles.py:20,Availability,error,error,20,"# Remove horizontal error bars",MatchSource.CODE_COMMENT,tutorials/roofit/rf107_plotstyles.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf107_plotstyles.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf107_plotstyles.py:19,Availability,error,error,19,"# Blue markers and error bors",MatchSource.CODE_COMMENT,tutorials/roofit/rf107_plotstyles.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf107_plotstyles.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf107_plotstyles.py:19,Energy Efficiency,green,green,19,"# Filled shapes in green color",MatchSource.CODE_COMMENT,tutorials/roofit/rf107_plotstyles.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf107_plotstyles.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf108_plotbinning.py:119,Modifiability,variab,variable,119,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Basic functionality: plotting unbinned data with alternate and variable binnings; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf108_plotbinning.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf108_plotbinning.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf108_plotbinning.py:420,Modifiability,variab,variable,420,"# NB: Note that bin density for each bin is adjusted to that of default frame binning as shown; # in Y axis label (100 bins -. Events/0.4*Xaxis-dim) so that all bins; # represent a consistent density distribution; # Show mixstate asymmetry with custom binning; # ------------------------------------------------------------------------------------; # Make plot of dt distribution of data asymmetry in 'mixState' with; # variable binning; # Create binning object with range (-10,10)",MatchSource.CODE_COMMENT,tutorials/roofit/rf108_plotbinning.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf108_plotbinning.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf110_normintegration.py:107,Deployability,integrat,integration,107,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Basic functionality: examples on normalization and integration of pdfs, construction; ## of cumulative distribution functions from monodimensional pdfs; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf110_normintegration.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf110_normintegration.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf110_normintegration.py:107,Integrability,integrat,integration,107,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Basic functionality: examples on normalization and integration of pdfs, construction; ## of cumulative distribution functions from monodimensional pdfs; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf110_normintegration.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf110_normintegration.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf111_derivatives.py:51,Modifiability,variab,variables,51,"# Set up model; # ---------------------; # Declare variables x,mean, with associated name, title, value and allowed; # range",MatchSource.CODE_COMMENT,tutorials/roofit/rf111_derivatives.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf111_derivatives.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf202_extendedmlfit.py:96,Modifiability,extend,extended,96,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Addition and convolution: setting up an extended maximum likelihood fit; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf202_extendedmlfit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf202_extendedmlfit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf202_extendedmlfit.py:23,Modifiability,extend,extended,23,"# Method 1 - Construct extended composite model; # -------------------------------------------------------------------; # Sum the composite signal and background into an extended pdf; # nsig*sig+nbkg*bkg",MatchSource.CODE_COMMENT,tutorials/roofit/rf202_extendedmlfit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf202_extendedmlfit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf202_extendedmlfit.py:170,Modifiability,extend,extended,170,"# Method 1 - Construct extended composite model; # -------------------------------------------------------------------; # Sum the composite signal and background into an extended pdf; # nsig*sig+nbkg*bkg",MatchSource.CODE_COMMENT,tutorials/roofit/rf202_extendedmlfit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf202_extendedmlfit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf202_extendedmlfit.py:23,Modifiability,extend,extended,23,"# Sample, fit and plot extended model; # ---------------------------------------------------------------------; # Generate a data sample of expected number events in x from model; # = model.expectedEvents() = nsig+nbkg",MatchSource.CODE_COMMENT,tutorials/roofit/rf202_extendedmlfit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf202_extendedmlfit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf202_extendedmlfit.py:23,Modifiability,extend,extended,23,"# Method 2 - Construct extended components first; # ---------------------------------------------------------------------; # Associated nsig/nbkg as expected number of events with sig/bkg",MatchSource.CODE_COMMENT,tutorials/roofit/rf202_extendedmlfit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf202_extendedmlfit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf202_extendedmlfit.py:6,Modifiability,extend,extended,6,"# Sum extended components without coefs; # -------------------------------------------------------------------------; # Construct sum of two extended pdf (no coefficients required)",MatchSource.CODE_COMMENT,tutorials/roofit/rf202_extendedmlfit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf202_extendedmlfit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf202_extendedmlfit.py:141,Modifiability,extend,extended,141,"# Sum extended components without coefs; # -------------------------------------------------------------------------; # Construct sum of two extended pdf (no coefficients required)",MatchSource.CODE_COMMENT,tutorials/roofit/rf202_extendedmlfit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf202_extendedmlfit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204a_extendedLikelihood.py:16,Modifiability,extend,extend,16,"# Use AddPdf to extend the model. Giving as many coefficients as pdfs switches on extension.",MatchSource.CODE_COMMENT,tutorials/roofit/rf204a_extendedLikelihood.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204a_extendedLikelihood.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py:152,Modifiability,extend,extended,152,"## \file; ## \ingroup tutorial_roofit; ## \notebook -nodraw; ## This macro demonstrates how to set up a fit in two ranges for plain; ## likelihoods and extended likelihoods.; ##; ## ### 1. Shape fits (plain likelihood); ##; ## If you fit a non-extended pdf in two ranges, e.g. `pdf.fitTo(data,Range=""Range1,Range2"")`,; ## it will fit the shapes in the two selected ranges and also take into account the relative; ## predicted yields in those ranges.; ##; ## This is useful for example to represent a full-range fit, but with a; ## blinded signal region inside it.; ##; ##; ## ### 2. Shape+rate fits (extended likelihood); ##; ## If your pdf is extended, i.e. measuring both the distribution in the observable as well; ## as the event count in the fitted region, some intervention is needed to make fits in ranges; ## work in a way that corresponds to intuition.; ##; ## If an extended fit is performed in a sub-range, the observed yield is only that of the subrange, hence; ## the expected event count will converge to a number that is smaller than what's visible in a plot.; ## In such cases, it is often preferred to interpret the extended term with respect to the full range; ## that's plotted, i.e., apply a correction to the extended likelihood term in such a way; ## that the interpretation of the expected event count remains that of the full range. This can; ## be done by applying a correcion factor (equal to the fraction of the pdf that is contained in the; ## fitted range) in the Poisson term that represents the extended likelihood term.; ##; ## If an extended likelihood fit is performed over *two* sub-ranges, this correction is; ## even more important: without it, each component likelihood would have a different interpretation; ## of the expected event count (each corresponding to the count in its own region), and a joint; ## fit of these regions with different interpretations of the same model parameter results; ## in a number that is not easily interpreted.; ##; ## If both re",MatchSource.CODE_COMMENT,tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py:244,Modifiability,extend,extended,244,"## \file; ## \ingroup tutorial_roofit; ## \notebook -nodraw; ## This macro demonstrates how to set up a fit in two ranges for plain; ## likelihoods and extended likelihoods.; ##; ## ### 1. Shape fits (plain likelihood); ##; ## If you fit a non-extended pdf in two ranges, e.g. `pdf.fitTo(data,Range=""Range1,Range2"")`,; ## it will fit the shapes in the two selected ranges and also take into account the relative; ## predicted yields in those ranges.; ##; ## This is useful for example to represent a full-range fit, but with a; ## blinded signal region inside it.; ##; ##; ## ### 2. Shape+rate fits (extended likelihood); ##; ## If your pdf is extended, i.e. measuring both the distribution in the observable as well; ## as the event count in the fitted region, some intervention is needed to make fits in ranges; ## work in a way that corresponds to intuition.; ##; ## If an extended fit is performed in a sub-range, the observed yield is only that of the subrange, hence; ## the expected event count will converge to a number that is smaller than what's visible in a plot.; ## In such cases, it is often preferred to interpret the extended term with respect to the full range; ## that's plotted, i.e., apply a correction to the extended likelihood term in such a way; ## that the interpretation of the expected event count remains that of the full range. This can; ## be done by applying a correcion factor (equal to the fraction of the pdf that is contained in the; ## fitted range) in the Poisson term that represents the extended likelihood term.; ##; ## If an extended likelihood fit is performed over *two* sub-ranges, this correction is; ## even more important: without it, each component likelihood would have a different interpretation; ## of the expected event count (each corresponding to the count in its own region), and a joint; ## fit of these regions with different interpretations of the same model parameter results; ## in a number that is not easily interpreted.; ##; ## If both re",MatchSource.CODE_COMMENT,tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py:600,Modifiability,extend,extended,600,"## \file; ## \ingroup tutorial_roofit; ## \notebook -nodraw; ## This macro demonstrates how to set up a fit in two ranges for plain; ## likelihoods and extended likelihoods.; ##; ## ### 1. Shape fits (plain likelihood); ##; ## If you fit a non-extended pdf in two ranges, e.g. `pdf.fitTo(data,Range=""Range1,Range2"")`,; ## it will fit the shapes in the two selected ranges and also take into account the relative; ## predicted yields in those ranges.; ##; ## This is useful for example to represent a full-range fit, but with a; ## blinded signal region inside it.; ##; ##; ## ### 2. Shape+rate fits (extended likelihood); ##; ## If your pdf is extended, i.e. measuring both the distribution in the observable as well; ## as the event count in the fitted region, some intervention is needed to make fits in ranges; ## work in a way that corresponds to intuition.; ##; ## If an extended fit is performed in a sub-range, the observed yield is only that of the subrange, hence; ## the expected event count will converge to a number that is smaller than what's visible in a plot.; ## In such cases, it is often preferred to interpret the extended term with respect to the full range; ## that's plotted, i.e., apply a correction to the extended likelihood term in such a way; ## that the interpretation of the expected event count remains that of the full range. This can; ## be done by applying a correcion factor (equal to the fraction of the pdf that is contained in the; ## fitted range) in the Poisson term that represents the extended likelihood term.; ##; ## If an extended likelihood fit is performed over *two* sub-ranges, this correction is; ## even more important: without it, each component likelihood would have a different interpretation; ## of the expected event count (each corresponding to the count in its own region), and a joint; ## fit of these regions with different interpretations of the same model parameter results; ## in a number that is not easily interpreted.; ##; ## If both re",MatchSource.CODE_COMMENT,tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py:644,Modifiability,extend,extended,644,"## \file; ## \ingroup tutorial_roofit; ## \notebook -nodraw; ## This macro demonstrates how to set up a fit in two ranges for plain; ## likelihoods and extended likelihoods.; ##; ## ### 1. Shape fits (plain likelihood); ##; ## If you fit a non-extended pdf in two ranges, e.g. `pdf.fitTo(data,Range=""Range1,Range2"")`,; ## it will fit the shapes in the two selected ranges and also take into account the relative; ## predicted yields in those ranges.; ##; ## This is useful for example to represent a full-range fit, but with a; ## blinded signal region inside it.; ##; ##; ## ### 2. Shape+rate fits (extended likelihood); ##; ## If your pdf is extended, i.e. measuring both the distribution in the observable as well; ## as the event count in the fitted region, some intervention is needed to make fits in ranges; ## work in a way that corresponds to intuition.; ##; ## If an extended fit is performed in a sub-range, the observed yield is only that of the subrange, hence; ## the expected event count will converge to a number that is smaller than what's visible in a plot.; ## In such cases, it is often preferred to interpret the extended term with respect to the full range; ## that's plotted, i.e., apply a correction to the extended likelihood term in such a way; ## that the interpretation of the expected event count remains that of the full range. This can; ## be done by applying a correcion factor (equal to the fraction of the pdf that is contained in the; ## fitted range) in the Poisson term that represents the extended likelihood term.; ##; ## If an extended likelihood fit is performed over *two* sub-ranges, this correction is; ## even more important: without it, each component likelihood would have a different interpretation; ## of the expected event count (each corresponding to the count in its own region), and a joint; ## fit of these regions with different interpretations of the same model parameter results; ## in a number that is not easily interpreted.; ##; ## If both re",MatchSource.CODE_COMMENT,tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py:876,Modifiability,extend,extended,876,"## \file; ## \ingroup tutorial_roofit; ## \notebook -nodraw; ## This macro demonstrates how to set up a fit in two ranges for plain; ## likelihoods and extended likelihoods.; ##; ## ### 1. Shape fits (plain likelihood); ##; ## If you fit a non-extended pdf in two ranges, e.g. `pdf.fitTo(data,Range=""Range1,Range2"")`,; ## it will fit the shapes in the two selected ranges and also take into account the relative; ## predicted yields in those ranges.; ##; ## This is useful for example to represent a full-range fit, but with a; ## blinded signal region inside it.; ##; ##; ## ### 2. Shape+rate fits (extended likelihood); ##; ## If your pdf is extended, i.e. measuring both the distribution in the observable as well; ## as the event count in the fitted region, some intervention is needed to make fits in ranges; ## work in a way that corresponds to intuition.; ##; ## If an extended fit is performed in a sub-range, the observed yield is only that of the subrange, hence; ## the expected event count will converge to a number that is smaller than what's visible in a plot.; ## In such cases, it is often preferred to interpret the extended term with respect to the full range; ## that's plotted, i.e., apply a correction to the extended likelihood term in such a way; ## that the interpretation of the expected event count remains that of the full range. This can; ## be done by applying a correcion factor (equal to the fraction of the pdf that is contained in the; ## fitted range) in the Poisson term that represents the extended likelihood term.; ##; ## If an extended likelihood fit is performed over *two* sub-ranges, this correction is; ## even more important: without it, each component likelihood would have a different interpretation; ## of the expected event count (each corresponding to the count in its own region), and a joint; ## fit of these regions with different interpretations of the same model parameter results; ## in a number that is not easily interpreted.; ##; ## If both re",MatchSource.CODE_COMMENT,tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py:1133,Modifiability,extend,extended,1133,"ikelihoods and extended likelihoods.; ##; ## ### 1. Shape fits (plain likelihood); ##; ## If you fit a non-extended pdf in two ranges, e.g. `pdf.fitTo(data,Range=""Range1,Range2"")`,; ## it will fit the shapes in the two selected ranges and also take into account the relative; ## predicted yields in those ranges.; ##; ## This is useful for example to represent a full-range fit, but with a; ## blinded signal region inside it.; ##; ##; ## ### 2. Shape+rate fits (extended likelihood); ##; ## If your pdf is extended, i.e. measuring both the distribution in the observable as well; ## as the event count in the fitted region, some intervention is needed to make fits in ranges; ## work in a way that corresponds to intuition.; ##; ## If an extended fit is performed in a sub-range, the observed yield is only that of the subrange, hence; ## the expected event count will converge to a number that is smaller than what's visible in a plot.; ## In such cases, it is often preferred to interpret the extended term with respect to the full range; ## that's plotted, i.e., apply a correction to the extended likelihood term in such a way; ## that the interpretation of the expected event count remains that of the full range. This can; ## be done by applying a correcion factor (equal to the fraction of the pdf that is contained in the; ## fitted range) in the Poisson term that represents the extended likelihood term.; ##; ## If an extended likelihood fit is performed over *two* sub-ranges, this correction is; ## even more important: without it, each component likelihood would have a different interpretation; ## of the expected event count (each corresponding to the count in its own region), and a joint; ## fit of these regions with different interpretations of the same model parameter results; ## in a number that is not easily interpreted.; ##; ## If both regions correct their interpretation such that N_expected refers to the full range,; ## it is interpreted easily, and consistent in both r",MatchSource.CODE_COMMENT,tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py:1230,Modifiability,extend,extended,1230,"df.fitTo(data,Range=""Range1,Range2"")`,; ## it will fit the shapes in the two selected ranges and also take into account the relative; ## predicted yields in those ranges.; ##; ## This is useful for example to represent a full-range fit, but with a; ## blinded signal region inside it.; ##; ##; ## ### 2. Shape+rate fits (extended likelihood); ##; ## If your pdf is extended, i.e. measuring both the distribution in the observable as well; ## as the event count in the fitted region, some intervention is needed to make fits in ranges; ## work in a way that corresponds to intuition.; ##; ## If an extended fit is performed in a sub-range, the observed yield is only that of the subrange, hence; ## the expected event count will converge to a number that is smaller than what's visible in a plot.; ## In such cases, it is often preferred to interpret the extended term with respect to the full range; ## that's plotted, i.e., apply a correction to the extended likelihood term in such a way; ## that the interpretation of the expected event count remains that of the full range. This can; ## be done by applying a correcion factor (equal to the fraction of the pdf that is contained in the; ## fitted range) in the Poisson term that represents the extended likelihood term.; ##; ## If an extended likelihood fit is performed over *two* sub-ranges, this correction is; ## even more important: without it, each component likelihood would have a different interpretation; ## of the expected event count (each corresponding to the count in its own region), and a joint; ## fit of these regions with different interpretations of the same model parameter results; ## in a number that is not easily interpreted.; ##; ## If both regions correct their interpretation such that N_expected refers to the full range,; ## it is interpreted easily, and consistent in both regions.; ##; ## This requires that the likelihood model is extended using RooAddPdf in the; ## form SumPdf = Nsig * sigPdf + Nbkg * bkgPdf.; #",MatchSource.CODE_COMMENT,tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py:1526,Modifiability,extend,extended,1526,"e into account the relative; ## predicted yields in those ranges.; ##; ## This is useful for example to represent a full-range fit, but with a; ## blinded signal region inside it.; ##; ##; ## ### 2. Shape+rate fits (extended likelihood); ##; ## If your pdf is extended, i.e. measuring both the distribution in the observable as well; ## as the event count in the fitted region, some intervention is needed to make fits in ranges; ## work in a way that corresponds to intuition.; ##; ## If an extended fit is performed in a sub-range, the observed yield is only that of the subrange, hence; ## the expected event count will converge to a number that is smaller than what's visible in a plot.; ## In such cases, it is often preferred to interpret the extended term with respect to the full range; ## that's plotted, i.e., apply a correction to the extended likelihood term in such a way; ## that the interpretation of the expected event count remains that of the full range. This can; ## be done by applying a correcion factor (equal to the fraction of the pdf that is contained in the; ## fitted range) in the Poisson term that represents the extended likelihood term.; ##; ## If an extended likelihood fit is performed over *two* sub-ranges, this correction is; ## even more important: without it, each component likelihood would have a different interpretation; ## of the expected event count (each corresponding to the count in its own region), and a joint; ## fit of these regions with different interpretations of the same model parameter results; ## in a number that is not easily interpreted.; ##; ## If both regions correct their interpretation such that N_expected refers to the full range,; ## it is interpreted easily, and consistent in both regions.; ##; ## This requires that the likelihood model is extended using RooAddPdf in the; ## form SumPdf = Nsig * sigPdf + Nbkg * bkgPdf.; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \authors Stephan Hageboeck, Wouter Verkerke",MatchSource.CODE_COMMENT,tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py:1566,Modifiability,extend,extended,1566,"e into account the relative; ## predicted yields in those ranges.; ##; ## This is useful for example to represent a full-range fit, but with a; ## blinded signal region inside it.; ##; ##; ## ### 2. Shape+rate fits (extended likelihood); ##; ## If your pdf is extended, i.e. measuring both the distribution in the observable as well; ## as the event count in the fitted region, some intervention is needed to make fits in ranges; ## work in a way that corresponds to intuition.; ##; ## If an extended fit is performed in a sub-range, the observed yield is only that of the subrange, hence; ## the expected event count will converge to a number that is smaller than what's visible in a plot.; ## In such cases, it is often preferred to interpret the extended term with respect to the full range; ## that's plotted, i.e., apply a correction to the extended likelihood term in such a way; ## that the interpretation of the expected event count remains that of the full range. This can; ## be done by applying a correcion factor (equal to the fraction of the pdf that is contained in the; ## fitted range) in the Poisson term that represents the extended likelihood term.; ##; ## If an extended likelihood fit is performed over *two* sub-ranges, this correction is; ## even more important: without it, each component likelihood would have a different interpretation; ## of the expected event count (each corresponding to the count in its own region), and a joint; ## fit of these regions with different interpretations of the same model parameter results; ## in a number that is not easily interpreted.; ##; ## If both regions correct their interpretation such that N_expected refers to the full range,; ## it is interpreted easily, and consistent in both regions.; ##; ## This requires that the likelihood model is extended using RooAddPdf in the; ## form SumPdf = Nsig * sigPdf + Nbkg * bkgPdf.; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \authors Stephan Hageboeck, Wouter Verkerke",MatchSource.CODE_COMMENT,tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py:2196,Modifiability,extend,extended,2196,"e into account the relative; ## predicted yields in those ranges.; ##; ## This is useful for example to represent a full-range fit, but with a; ## blinded signal region inside it.; ##; ##; ## ### 2. Shape+rate fits (extended likelihood); ##; ## If your pdf is extended, i.e. measuring both the distribution in the observable as well; ## as the event count in the fitted region, some intervention is needed to make fits in ranges; ## work in a way that corresponds to intuition.; ##; ## If an extended fit is performed in a sub-range, the observed yield is only that of the subrange, hence; ## the expected event count will converge to a number that is smaller than what's visible in a plot.; ## In such cases, it is often preferred to interpret the extended term with respect to the full range; ## that's plotted, i.e., apply a correction to the extended likelihood term in such a way; ## that the interpretation of the expected event count remains that of the full range. This can; ## be done by applying a correcion factor (equal to the fraction of the pdf that is contained in the; ## fitted range) in the Poisson term that represents the extended likelihood term.; ##; ## If an extended likelihood fit is performed over *two* sub-ranges, this correction is; ## even more important: without it, each component likelihood would have a different interpretation; ## of the expected event count (each corresponding to the count in its own region), and a joint; ## fit of these regions with different interpretations of the same model parameter results; ## in a number that is not easily interpreted.; ##; ## If both regions correct their interpretation such that N_expected refers to the full range,; ## it is interpreted easily, and consistent in both regions.; ##; ## This requires that the likelihood model is extended using RooAddPdf in the; ## form SumPdf = Nsig * sigPdf + Nbkg * bkgPdf.; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \authors Stephan Hageboeck, Wouter Verkerke",MatchSource.CODE_COMMENT,tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py:892,Performance,perform,performed,892,"## \file; ## \ingroup tutorial_roofit; ## \notebook -nodraw; ## This macro demonstrates how to set up a fit in two ranges for plain; ## likelihoods and extended likelihoods.; ##; ## ### 1. Shape fits (plain likelihood); ##; ## If you fit a non-extended pdf in two ranges, e.g. `pdf.fitTo(data,Range=""Range1,Range2"")`,; ## it will fit the shapes in the two selected ranges and also take into account the relative; ## predicted yields in those ranges.; ##; ## This is useful for example to represent a full-range fit, but with a; ## blinded signal region inside it.; ##; ##; ## ### 2. Shape+rate fits (extended likelihood); ##; ## If your pdf is extended, i.e. measuring both the distribution in the observable as well; ## as the event count in the fitted region, some intervention is needed to make fits in ranges; ## work in a way that corresponds to intuition.; ##; ## If an extended fit is performed in a sub-range, the observed yield is only that of the subrange, hence; ## the expected event count will converge to a number that is smaller than what's visible in a plot.; ## In such cases, it is often preferred to interpret the extended term with respect to the full range; ## that's plotted, i.e., apply a correction to the extended likelihood term in such a way; ## that the interpretation of the expected event count remains that of the full range. This can; ## be done by applying a correcion factor (equal to the fraction of the pdf that is contained in the; ## fitted range) in the Poisson term that represents the extended likelihood term.; ##; ## If an extended likelihood fit is performed over *two* sub-ranges, this correction is; ## even more important: without it, each component likelihood would have a different interpretation; ## of the expected event count (each corresponding to the count in its own region), and a joint; ## fit of these regions with different interpretations of the same model parameter results; ## in a number that is not easily interpreted.; ##; ## If both re",MatchSource.CODE_COMMENT,tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py:1593,Performance,perform,performed,1593,"e into account the relative; ## predicted yields in those ranges.; ##; ## This is useful for example to represent a full-range fit, but with a; ## blinded signal region inside it.; ##; ##; ## ### 2. Shape+rate fits (extended likelihood); ##; ## If your pdf is extended, i.e. measuring both the distribution in the observable as well; ## as the event count in the fitted region, some intervention is needed to make fits in ranges; ## work in a way that corresponds to intuition.; ##; ## If an extended fit is performed in a sub-range, the observed yield is only that of the subrange, hence; ## the expected event count will converge to a number that is smaller than what's visible in a plot.; ## In such cases, it is often preferred to interpret the extended term with respect to the full range; ## that's plotted, i.e., apply a correction to the extended likelihood term in such a way; ## that the interpretation of the expected event count remains that of the full range. This can; ## be done by applying a correcion factor (equal to the fraction of the pdf that is contained in the; ## fitted range) in the Poisson term that represents the extended likelihood term.; ##; ## If an extended likelihood fit is performed over *two* sub-ranges, this correction is; ## even more important: without it, each component likelihood would have a different interpretation; ## of the expected event count (each corresponding to the count in its own region), and a joint; ## fit of these regions with different interpretations of the same model parameter results; ## in a number that is not easily interpreted.; ##; ## If both regions correct their interpretation such that N_expected refers to the full range,; ## it is interpreted easily, and consistent in both regions.; ##; ## This requires that the likelihood model is extended using RooAddPdf in the; ## form SumPdf = Nsig * sigPdf + Nbkg * bkgPdf.; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \authors Stephan Hageboeck, Wouter Verkerke",MatchSource.CODE_COMMENT,tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py:416,Safety,predict,predicted,416,"## \file; ## \ingroup tutorial_roofit; ## \notebook -nodraw; ## This macro demonstrates how to set up a fit in two ranges for plain; ## likelihoods and extended likelihoods.; ##; ## ### 1. Shape fits (plain likelihood); ##; ## If you fit a non-extended pdf in two ranges, e.g. `pdf.fitTo(data,Range=""Range1,Range2"")`,; ## it will fit the shapes in the two selected ranges and also take into account the relative; ## predicted yields in those ranges.; ##; ## This is useful for example to represent a full-range fit, but with a; ## blinded signal region inside it.; ##; ##; ## ### 2. Shape+rate fits (extended likelihood); ##; ## If your pdf is extended, i.e. measuring both the distribution in the observable as well; ## as the event count in the fitted region, some intervention is needed to make fits in ranges; ## work in a way that corresponds to intuition.; ##; ## If an extended fit is performed in a sub-range, the observed yield is only that of the subrange, hence; ## the expected event count will converge to a number that is smaller than what's visible in a plot.; ## In such cases, it is often preferred to interpret the extended term with respect to the full range; ## that's plotted, i.e., apply a correction to the extended likelihood term in such a way; ## that the interpretation of the expected event count remains that of the full range. This can; ## be done by applying a correcion factor (equal to the fraction of the pdf that is contained in the; ## fitted range) in the Poisson term that represents the extended likelihood term.; ##; ## If an extended likelihood fit is performed over *two* sub-ranges, this correction is; ## even more important: without it, each component likelihood would have a different interpretation; ## of the expected event count (each corresponding to the count in its own region), and a joint; ## fit of these regions with different interpretations of the same model parameter results; ## in a number that is not easily interpreted.; ##; ## If both re",MatchSource.CODE_COMMENT,tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py:851,Usability,intuit,intuition,851,"## \file; ## \ingroup tutorial_roofit; ## \notebook -nodraw; ## This macro demonstrates how to set up a fit in two ranges for plain; ## likelihoods and extended likelihoods.; ##; ## ### 1. Shape fits (plain likelihood); ##; ## If you fit a non-extended pdf in two ranges, e.g. `pdf.fitTo(data,Range=""Range1,Range2"")`,; ## it will fit the shapes in the two selected ranges and also take into account the relative; ## predicted yields in those ranges.; ##; ## This is useful for example to represent a full-range fit, but with a; ## blinded signal region inside it.; ##; ##; ## ### 2. Shape+rate fits (extended likelihood); ##; ## If your pdf is extended, i.e. measuring both the distribution in the observable as well; ## as the event count in the fitted region, some intervention is needed to make fits in ranges; ## work in a way that corresponds to intuition.; ##; ## If an extended fit is performed in a sub-range, the observed yield is only that of the subrange, hence; ## the expected event count will converge to a number that is smaller than what's visible in a plot.; ## In such cases, it is often preferred to interpret the extended term with respect to the full range; ## that's plotted, i.e., apply a correction to the extended likelihood term in such a way; ## that the interpretation of the expected event count remains that of the full range. This can; ## be done by applying a correcion factor (equal to the fraction of the pdf that is contained in the; ## fitted range) in the Poisson term that represents the extended likelihood term.; ##; ## If an extended likelihood fit is performed over *two* sub-ranges, this correction is; ## even more important: without it, each component likelihood would have a different interpretation; ## of the expected event count (each corresponding to the count in its own region), and a joint; ## fit of these regions with different interpretations of the same model parameter results; ## in a number that is not easily interpreted.; ##; ## If both re",MatchSource.CODE_COMMENT,tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py:15,Modifiability,extend,extended,15,"# Construct an extended pdf, which measures the event count N **on the full range**.; # If the actual domain of x that is fitted is identical to FULL, this has no affect.; #; # If the fitted domain is a subset of `FULL`, though, the expected event count is divided by; # \f[; # \mathrm{frac} = \frac{; # \int_{\mathrm{Fit range}} \mathrm{model}(x) \; \mathrm{d}x }{; # \int_{\mathrm{Full range}} \mathrm{model}(x) \; \mathrm{d}x }.; # \f]; # `N` will therefore return the count extrapolated to the full range instead of the fit range.; #; # **Note**: When using a RooAddPdf for extending the likelihood, the same effect can be achieved with; # [RooAddPdf::fixCoefRange()](https://root.cern.ch/doc/master/classRooAddPdf.html#ab631caf4b59e4c4221f8967aecbf2a65),",MatchSource.CODE_COMMENT,tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py:578,Modifiability,extend,extending,578,"# Construct an extended pdf, which measures the event count N **on the full range**.; # If the actual domain of x that is fitted is identical to FULL, this has no affect.; #; # If the fitted domain is a subset of `FULL`, though, the expected event count is divided by; # \f[; # \mathrm{frac} = \frac{; # \int_{\mathrm{Fit range}} \mathrm{model}(x) \; \mathrm{d}x }{; # \int_{\mathrm{Full range}} \mathrm{model}(x) \; \mathrm{d}x }.; # \f]; # `N` will therefore return the count extrapolated to the full range instead of the fit range.; #; # **Note**: When using a RooAddPdf for extending the likelihood, the same effect can be achieved with; # [RooAddPdf::fixCoefRange()](https://root.cern.ch/doc/master/classRooAddPdf.html#ab631caf4b59e4c4221f8967aecbf2a65),",MatchSource.CODE_COMMENT,tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py:41,Modifiability,extend,extended,41,"# If we now do a simultaneous fit to the extended model, instead of the; # original model, the LEFT and RIGHT range will each correct their local `N`; # such that it refers to the `FULL` range.; #; # This joint fit of the extmodel will include (w.r.t. the plain model fit) a product of extended terms; # \f[; # L_\mathrm{ext} = L; # \cdot \mathrm{Poisson} \left( N_\mathrm{obs}^\mathrm{LEFT} | N_\mathrm{exp} / \mathrm{frac LEFT} \right); # \cdot \mathrm{Poisson} \left( N_\mathrm{obs}^\mathrm{RIGHT} | N_\mathrm{exp} / \mathrm{frac RIGHT} \right); # \f]",MatchSource.CODE_COMMENT,tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py:286,Modifiability,extend,extended,286,"# If we now do a simultaneous fit to the extended model, instead of the; # original model, the LEFT and RIGHT range will each correct their local `N`; # such that it refers to the `FULL` range.; #; # This joint fit of the extmodel will include (w.r.t. the plain model fit) a product of extended terms; # \f[; # L_\mathrm{ext} = L; # \cdot \mathrm{Poisson} \left( N_\mathrm{obs}^\mathrm{LEFT} | N_\mathrm{exp} / \mathrm{frac LEFT} \right); # \cdot \mathrm{Poisson} \left( N_\mathrm{obs}^\mathrm{RIGHT} | N_\mathrm{exp} / \mathrm{frac RIGHT} \right); # \f]",MatchSource.CODE_COMMENT,tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py:147,Modifiability,extend,extended,147,"# PART 2: Extending with RooAddPdf; # --------------------------------; #; # Now we repeat the above exercise, but instead of explicitly adding an extended term to a single shape pdf (RooExponential),; # we assume that we already have an extended likelihood model in the form of a RooAddPdf constructed in the form `Nsig * sigPdf + Nbkg * bkgPdf`.; #; # We add a Gaussian to the previously defined exponential background.; # The signal shape parameters are chosen constant, since the signal region is entirely in the blinded region, i.e., the fit has no sensitivity.",MatchSource.CODE_COMMENT,tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py:238,Modifiability,extend,extended,238,"# PART 2: Extending with RooAddPdf; # --------------------------------; #; # Now we repeat the above exercise, but instead of explicitly adding an extended term to a single shape pdf (RooExponential),; # we assume that we already have an extended likelihood model in the form of a RooAddPdf constructed in the form `Nsig * sigPdf + Nbkg * bkgPdf`.; #; # We add a Gaussian to the previously defined exponential background.; # The signal shape parameters are chosen constant, since the signal region is entirely in the blinded region, i.e., the fit has no sensitivity.",MatchSource.CODE_COMMENT,tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf206_treevistools.py:69,Availability,avail,available,69,"# Make graphic output file with one of the GraphViz tools; # (freely available from www.graphviz.org); #; # 'Top-to-bottom graph'; # unix> dot -Tgif -o rf207_model_dot.gif rf207_model.dot; #; # 'Spring-model graph'; # unix> fdp -Tgif -o rf207_model_fdp.gif rf207_model.dot",MatchSource.CODE_COMMENT,tutorials/roofit/rf206_treevistools.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf206_treevistools.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf207_comptools.py:261,Modifiability,variab,variables,261,"# Basic information requests; # ---------------------------------------------; # Get list of observables; # ---------------------------------------------; # Get list of observables of pdf in context of a dataset; #; # Observables are define each context as the variables; # shared between a model and a dataset. In self case; # that is the variable 'x'",MatchSource.CODE_COMMENT,tutorials/roofit/rf207_comptools.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf207_comptools.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf207_comptools.py:340,Modifiability,variab,variable,340,"# Basic information requests; # ---------------------------------------------; # Get list of observables; # ---------------------------------------------; # Get list of observables of pdf in context of a dataset; #; # Observables are define each context as the variables; # shared between a model and a dataset. In self case; # that is the variable 'x'",MatchSource.CODE_COMMENT,tutorials/roofit/rf207_comptools.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf207_comptools.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf210_angularconv.py:226,Performance,perform,performed,226,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Convolution in cyclical angular observables theta, and; ## construction of p.d.f in terms of transformed angular; ## coordinates, e.g. cos(theta), the convolution; ## is performed in theta rather than cos(theta); ##; ## (require ROOT to be compiled with --enable-fftw3); ##; ## pdf(theta) = ROOT.T(theta) (x) gauss(theta); ## pdf(cosTheta) = ROOT.T(acos(cosTheta)) (x) gauss(acos(cosTheta)); ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf210_angularconv.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf210_angularconv.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf211_paramconv.py:43,Performance,cache,cache,43,"# Configure convolution to construct a 2-D cache in (x,mean); # rather than a 1-d cache in mean that needs to be recalculated; # for each value of x",MatchSource.CODE_COMMENT,tutorials/roofit/rf211_paramconv.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf211_paramconv.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf211_paramconv.py:82,Performance,cache,cache,82,"# Configure convolution to construct a 2-D cache in (x,mean); # rather than a 1-d cache in mean that needs to be recalculated; # for each value of x",MatchSource.CODE_COMMENT,tutorials/roofit/rf211_paramconv.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf211_paramconv.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf212_plottingInRanges_blinding.py:289,Energy Efficiency,adapt,adapt,289,"# Kick tau a bit, and run an unbinned fit where the blinded data are missing.; # ----------------------------------------------------------------------------------------------------------; # The fit should be done only in the unblinded regions, otherwise it would try; # to make the model adapt to the empty bins in the blinded region.",MatchSource.CODE_COMMENT,tutorials/roofit/rf212_plottingInRanges_blinding.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf212_plottingInRanges_blinding.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf212_plottingInRanges_blinding.py:289,Modifiability,adapt,adapt,289,"# Kick tau a bit, and run an unbinned fit where the blinded data are missing.; # ----------------------------------------------------------------------------------------------------------; # The fit should be done only in the unblinded regions, otherwise it would try; # to make the model adapt to the empty bins in the blinded region.",MatchSource.CODE_COMMENT,tutorials/roofit/rf212_plottingInRanges_blinding.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf212_plottingInRanges_blinding.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf212_plottingInRanges_blinding.py:145,Safety,avoid,avoid,145,"# Clear the ""fitrange"" attribute of the PDF. Otherwise, the fitrange would be; # automatically taken as the NormRange() for plotting. We want to avoid this,; # because the point of this tutorial is to show what can go wrong when the; # NormRange() is not specified.",MatchSource.CODE_COMMENT,tutorials/roofit/rf212_plottingInRanges_blinding.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf212_plottingInRanges_blinding.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf212_plottingInRanges_blinding.py:309,Deployability,integrat,integrated,309,"# Right:; # ----------------------------------------------------------------------------------------------------------; # Make the same plot, but normalise each piece with respect to the regions ""left"" AND ""right"". This requires setting; # a ""NormRange"", which tells RooFit over which range the PDF has to be integrated to normalise.; # This means that the normalisation of the blue and green curves is slightly different from the left plot,; # because they get a common scale factor.",MatchSource.CODE_COMMENT,tutorials/roofit/rf212_plottingInRanges_blinding.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf212_plottingInRanges_blinding.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf212_plottingInRanges_blinding.py:387,Energy Efficiency,green,green,387,"# Right:; # ----------------------------------------------------------------------------------------------------------; # Make the same plot, but normalise each piece with respect to the regions ""left"" AND ""right"". This requires setting; # a ""NormRange"", which tells RooFit over which range the PDF has to be integrated to normalise.; # This means that the normalisation of the blue and green curves is slightly different from the left plot,; # because they get a common scale factor.",MatchSource.CODE_COMMENT,tutorials/roofit/rf212_plottingInRanges_blinding.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf212_plottingInRanges_blinding.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf212_plottingInRanges_blinding.py:309,Integrability,integrat,integrated,309,"# Right:; # ----------------------------------------------------------------------------------------------------------; # Make the same plot, but normalise each piece with respect to the regions ""left"" AND ""right"". This requires setting; # a ""NormRange"", which tells RooFit over which range the PDF has to be integrated to normalise.; # This means that the normalisation of the blue and green curves is slightly different from the left plot,; # because they get a common scale factor.",MatchSource.CODE_COMMENT,tutorials/roofit/rf212_plottingInRanges_blinding.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf212_plottingInRanges_blinding.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf301_composition.py:184,Integrability,depend,depends,184,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Multidimensional models: multi-dimensional pdfs through composition, e.g. substituting; ## a pdf parameter with a function that depends on other observables; ##; ## `pdf = gauss(x,f(y),s)` with `f(y) = a0 + a1*y`; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf301_composition.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf301_composition.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf302_utilfuncs.py:107,Availability,avail,available,107,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Multidimensional models: utility functions classes available for use in tailoring of; ## composite (multidimensional) pdfs; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf302_utilfuncs.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf302_utilfuncs.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf304_uncorrprod.py:81,Usability,simpl,simple,81,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Multidimensional models: simple uncorrelated multi-dimensional pdfs; ##; ## `pdf = gauss(x,mx,sx) * gauss(y,my,sy)`; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf304_uncorrprod.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf304_uncorrprod.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf304_uncorrprod.py:179,Modifiability,variab,variables,179,"# Create component pdfs in x and y; # ----------------------------------------------------------------; # Create two pdfs gaussx(x,meanx,sigmax) gaussy(y,meany,sigmay) and its; # variables",MatchSource.CODE_COMMENT,tutorials/roofit/rf304_uncorrprod.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf304_uncorrprod.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf306_condpereventerrors.py:141,Availability,error,errors,141,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Multidimensional models: complete example with use of conditional pdf with per-event errors; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf306_condpereventerrors.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf306_condpereventerrors.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf306_condpereventerrors.py:54,Availability,error,error,54,"# Build a gaussian resolution model scaled by the per-error =; # gauss(dt,bias,sigma*dterr)",MatchSource.CODE_COMMENT,tutorials/roofit/rf306_condpereventerrors.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf306_condpereventerrors.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf306_condpereventerrors.py:48,Availability,error,error,48,"# Construct fake 'external' data with per-event error; # ------------------------------------------------------------------------------------------------------; # Use landau pdf to get somewhat realistic distribution with long tail",MatchSource.CODE_COMMENT,tutorials/roofit/rf306_condpereventerrors.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf306_condpereventerrors.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf306_condpereventerrors.py:61,Deployability,integrat,integrating,61,"# Make projection of decay(dt|dterr) on dt.; #; # Instead of integrating out dterr, a weighted average of curves; # at values dterr_i as given in the external dataset.; # (The kTRUE argument bins the data before projection to speed up the process)",MatchSource.CODE_COMMENT,tutorials/roofit/rf306_condpereventerrors.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf306_condpereventerrors.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf306_condpereventerrors.py:61,Integrability,integrat,integrating,61,"# Make projection of decay(dt|dterr) on dt.; #; # Instead of integrating out dterr, a weighted average of curves; # at values dterr_i as given in the external dataset.; # (The kTRUE argument bins the data before projection to speed up the process)",MatchSource.CODE_COMMENT,tutorials/roofit/rf306_condpereventerrors.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf306_condpereventerrors.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf307_fullpereventerrors.py:114,Availability,error,errors,114,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Multidimensional models: usage of full pdf with per-event errors; ##; ## \macro_code; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf307_fullpereventerrors.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf307_fullpereventerrors.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf307_fullpereventerrors.py:54,Availability,error,error,54,"# Build a gaussian resolution model scaled by the per-error =; # gauss(dt,bias,sigma*dterr)",MatchSource.CODE_COMMENT,tutorials/roofit/rf307_fullpereventerrors.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf307_fullpereventerrors.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf307_fullpereventerrors.py:40,Availability,error,error,40,"# Construct empirical pdf for per-event error; # -----------------------------------------------------------------; # Use landau pdf to get empirical distribution with long tail",MatchSource.CODE_COMMENT,tutorials/roofit/rf307_fullpereventerrors.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf307_fullpereventerrors.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf308_normintegration2d.py:99,Deployability,integrat,integration,99,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Multidimensional models: normalization and integration of pdfs, construction of; ## cumulative distribution functions from pdfs in two dimensions; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf308_normintegration2d.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf308_normintegration2d.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf308_normintegration2d.py:99,Integrability,integrat,integration,99,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Multidimensional models: normalization and integration of pdfs, construction of; ## cumulative distribution functions from pdfs in two dimensions; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf308_normintegration2d.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf308_normintegration2d.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf310_sliceplot.py:48,Availability,error,errors,48,"# Generate BMixing data with above set of event errors",MatchSource.CODE_COMMENT,tutorials/roofit/rf310_sliceplot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf310_sliceplot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf310_sliceplot.py:135,Deployability,integrat,integrated,135,"# Plot full decay distribution; # ----------------------------------------------------------; # Create frame, data and pdf projection (integrated over tagFlav and; # mixState)",MatchSource.CODE_COMMENT,tutorials/roofit/rf310_sliceplot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf310_sliceplot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf310_sliceplot.py:135,Integrability,integrat,integrated,135,"# Plot full decay distribution; # ----------------------------------------------------------; # Create frame, data and pdf projection (integrated over tagFlav and; # mixState)",MatchSource.CODE_COMMENT,tutorials/roofit/rf310_sliceplot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf310_sliceplot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf310_sliceplot.py:88,Deployability,integrat,integrated,88,"# Position slice in mixState at ""mixed"" and plot slice of pdf in mixstate; # over data (integrated over tagFlav)",MatchSource.CODE_COMMENT,tutorials/roofit/rf310_sliceplot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf310_sliceplot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf310_sliceplot.py:88,Integrability,integrat,integrated,88,"# Position slice in mixState at ""mixed"" and plot slice of pdf in mixstate; # over data (integrated over tagFlav)",MatchSource.CODE_COMMENT,tutorials/roofit/rf310_sliceplot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf310_sliceplot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf310_sliceplot.py:90,Deployability,integrat,integrated,90,"# Position slice in mixState at ""unmixed"" and plot slice of pdf in; # mixstate over data (integrated over tagFlav)",MatchSource.CODE_COMMENT,tutorials/roofit/rf310_sliceplot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf310_sliceplot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf310_sliceplot.py:90,Integrability,integrat,integrated,90,"# Position slice in mixState at ""unmixed"" and plot slice of pdf in; # mixstate over data (integrated over tagFlav)",MatchSource.CODE_COMMENT,tutorials/roofit/rf310_sliceplot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf310_sliceplot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf311_rangeplot.py:115,Deployability,continuous,continuous,115,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Multidimensional models: projecting pdf and data ranges in continuous observables; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf311_rangeplot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf311_rangeplot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf312_multirangefit.py:89,Performance,perform,performing,89,"## \file; ## \ingroup tutorial_roofit; ## \notebook -nodraw; ## Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions; ##; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf312_multirangefit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf312_multirangefit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf312_multirangefit.py:129,Performance,perform,perform,129,"# Perform fits in joint sideband regions; # -----------------------------------------------------------------------------; # Now perform fit to joint 'L-shaped' sideband region 'SB1|SB2'; # (ROOT.RooAddPdf coefficients will be interpreted in full range)",MatchSource.CODE_COMMENT,tutorials/roofit/rf312_multirangefit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf312_multirangefit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf313_paramranges.py:169,Deployability,integrat,integration,169,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Multidimensional models: working with parameterized ranges to define non-rectangular; ## regions for fitting and integration; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf313_paramranges.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf313_paramranges.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf313_paramranges.py:169,Integrability,integrat,integration,169,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Multidimensional models: working with parameterized ranges to define non-rectangular; ## regions for fitting and integration; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf313_paramranges.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf313_paramranges.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf313_paramranges.py:94,Modifiability,parameteriz,parameterized,94,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Multidimensional models: working with parameterized ranges to define non-rectangular; ## regions for fitting and integration; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf313_paramranges.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf313_paramranges.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf313_paramranges.py:215,Modifiability,parameteriz,parameterized,215,"# Defined non-rectangular region R in (x, y, z); # -------------------------------------------------------------------------------------; #; # R = Z[0 - 0.1*Y^2] * Y[0.1*X - 0.9*X] * X[0 - 10]; #; # Construct range parameterized in ""R"" in y [ 0.1*x, 0.9*x ]",MatchSource.CODE_COMMENT,tutorials/roofit/rf313_paramranges.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf313_paramranges.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf313_paramranges.py:12,Modifiability,parameteriz,parameterized,12,"# Construct parameterized ranged ""R"" in z [ 0, 0.1*y^2 ]",MatchSource.CODE_COMMENT,tutorials/roofit/rf313_paramranges.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf313_paramranges.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf314_paramfitrange.py:94,Modifiability,parameteriz,parameterized,94,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Multidimensional models: working with parameterized ranges in a fit.; ## This an example of a fit with an acceptance that changes per-event; ##; ## `pdf = exp(-t/tau)` with `t[tmin,5]`; ##; ## where `t` and `tmin` are both observables in the dataset; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf314_paramfitrange.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf314_paramfitrange.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf314_paramfitrange.py:7,Modifiability,parameteriz,parameterized,7,"# Make parameterized range in t : [tmin,5]",MatchSource.CODE_COMMENT,tutorials/roofit/rf314_paramfitrange.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf314_paramfitrange.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf315_projectpdf.py:133,Deployability,integrat,integration,133,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Multidimensional models: marginizalization of multi-dimensional pdfs through integration; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf315_projectpdf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf315_projectpdf.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf315_projectpdf.py:133,Integrability,integrat,integration,133,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Multidimensional models: marginizalization of multi-dimensional pdfs through integration; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf315_projectpdf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf315_projectpdf.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf315_projectpdf.py:144,Deployability,integrat,integration,144,"# Create pdf m(x,y) = gx(x|y) * g(y); # --------------------------------------------------------------; # Increase default precision of numeric integration; # as self exercise has high sensitivity to numeric integration precision",MatchSource.CODE_COMMENT,tutorials/roofit/rf315_projectpdf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf315_projectpdf.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf315_projectpdf.py:208,Deployability,integrat,integration,208,"# Create pdf m(x,y) = gx(x|y) * g(y); # --------------------------------------------------------------; # Increase default precision of numeric integration; # as self exercise has high sensitivity to numeric integration precision",MatchSource.CODE_COMMENT,tutorials/roofit/rf315_projectpdf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf315_projectpdf.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf315_projectpdf.py:144,Integrability,integrat,integration,144,"# Create pdf m(x,y) = gx(x|y) * g(y); # --------------------------------------------------------------; # Increase default precision of numeric integration; # as self exercise has high sensitivity to numeric integration precision",MatchSource.CODE_COMMENT,tutorials/roofit/rf315_projectpdf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf315_projectpdf.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf315_projectpdf.py:208,Integrability,integrat,integration,208,"# Create pdf m(x,y) = gx(x|y) * g(y); # --------------------------------------------------------------; # Increase default precision of numeric integration; # as self exercise has high sensitivity to numeric integration precision",MatchSource.CODE_COMMENT,tutorials/roofit/rf315_projectpdf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf315_projectpdf.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf316_llratioplot.py:144,Modifiability,enhance,enhanced,144,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Multidimensional models: using the likelihood ratio technique to construct a signal; ## enhanced one-dimensional projection of a multi-dimensional pdf; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf316_llratioplot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf316_llratioplot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf316_llratioplot.py:213,Deployability,integrat,integrate,213,"# Define projected signal likelihood ratio; # ----------------------------------------------------------------------------------; # Calculate projection of signal and total likelihood on (y,z) observables; # i.e. integrate signal and composite model over x",MatchSource.CODE_COMMENT,tutorials/roofit/rf316_llratioplot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf316_llratioplot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf316_llratioplot.py:213,Integrability,integrat,integrate,213,"# Define projected signal likelihood ratio; # ----------------------------------------------------------------------------------; # Calculate projection of signal and total likelihood on (y,z) observables; # i.e. integrate signal and composite model over x",MatchSource.CODE_COMMENT,tutorials/roofit/rf316_llratioplot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf316_llratioplot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf316_llratioplot.py:16,Testability,log,log,16,"# Construct the log of the signal / signal+background probability",MatchSource.CODE_COMMENT,tutorials/roofit/rf316_llratioplot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf316_llratioplot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf316_llratioplot.py:190,Deployability,integrat,integration,190,"# Make MC projection of pdf with same LL ratio cut; # ---------------------------------------------------------------------------------------------; # Generate large number of events for MC integration of pdf projection",MatchSource.CODE_COMMENT,tutorials/roofit/rf316_llratioplot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf316_llratioplot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf316_llratioplot.py:190,Integrability,integrat,integration,190,"# Make MC projection of pdf with same LL ratio cut; # ---------------------------------------------------------------------------------------------; # Generate large number of events for MC integration of pdf projection",MatchSource.CODE_COMMENT,tutorials/roofit/rf316_llratioplot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf316_llratioplot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf402_datahandling.py:188,Integrability,interface,interface,188,"# WVE Add reduction by range; # Binned (RooDataHist) and unbinned datasets (RooDataSet) share; # many properties and inherit from a common abstract base class; # (RooAbsData), provides an interface for all operations; # that can be performed regardless of the data format",MatchSource.CODE_COMMENT,tutorials/roofit/rf402_datahandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf402_datahandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf402_datahandling.py:117,Modifiability,inherit,inherit,117,"# WVE Add reduction by range; # Binned (RooDataHist) and unbinned datasets (RooDataSet) share; # many properties and inherit from a common abstract base class; # (RooAbsData), provides an interface for all operations; # that can be performed regardless of the data format",MatchSource.CODE_COMMENT,tutorials/roofit/rf402_datahandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf402_datahandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf402_datahandling.py:232,Performance,perform,performed,232,"# WVE Add reduction by range; # Binned (RooDataHist) and unbinned datasets (RooDataSet) share; # many properties and inherit from a common abstract base class; # (RooAbsData), provides an interface for all operations; # that can be performed regardless of the data format",MatchSource.CODE_COMMENT,tutorials/roofit/rf402_datahandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf402_datahandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf402_datahandling.py:103,Modifiability,variab,variables,103,"# Unlike ROOT.RooAbsArgs (ROOT.RooAbsPdf, ROOT.RooFormulaVar,....) datasets are not attached to; # the variables they are constructed from. Instead they are attached to an internal; # clone of the supplied set of arguments; # Fill d with dummy values",MatchSource.CODE_COMMENT,tutorials/roofit/rf402_datahandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf402_datahandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf402_datahandling.py:23,Performance,load,loads,23,"# Get with an argument loads a specific data point in row and returns; # a pointer to row argset. get() always returns the same pointer, unless; # an invalid row number is specified. In that case a null ptr is returned",MatchSource.CODE_COMMENT,tutorials/roofit/rf402_datahandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf402_datahandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf402_datahandling.py:106,Energy Efficiency,reduce,reduce,106,"# Reducing, appending and merging; # -------------------------------------------------------------; # The reduce() function returns a dataset which is a subset of the; # original",MatchSource.CODE_COMMENT,tutorials/roofit/rf402_datahandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf402_datahandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf402_datahandling.py:22,Modifiability,variab,variables,22,"# The binning of real variables (like x,y) is done using their fit range; # 'get/setRange()' and number of specified fit bins 'get/setBins()'.; # Category dimensions of binned datasets get one bin per defined category; # state",MatchSource.CODE_COMMENT,tutorials/roofit/rf402_datahandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf402_datahandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf402_datahandling.py:2,Performance,load,load,2,"# load bin center coordinates in internal buffer",MatchSource.CODE_COMMENT,tutorials/roofit/rf402_datahandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf402_datahandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf402_datahandling.py:130,Energy Efficiency,reduce,reduce,130,"# return weight of last loaded coordinates; # Reduce the 2-dimensional binned dataset to a 1-dimensional binned dataset; #; # All reduce() methods are interfaced in RooAbsData. All reduction techniques; # demonstrated on unbinned datasets can be applied to binned datasets as; # well.",MatchSource.CODE_COMMENT,tutorials/roofit/rf402_datahandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf402_datahandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf402_datahandling.py:151,Integrability,interface,interfaced,151,"# return weight of last loaded coordinates; # Reduce the 2-dimensional binned dataset to a 1-dimensional binned dataset; #; # All reduce() methods are interfaced in RooAbsData. All reduction techniques; # demonstrated on unbinned datasets can be applied to binned datasets as; # well.",MatchSource.CODE_COMMENT,tutorials/roofit/rf402_datahandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf402_datahandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf402_datahandling.py:24,Performance,load,loaded,24,"# return weight of last loaded coordinates; # Reduce the 2-dimensional binned dataset to a 1-dimensional binned dataset; #; # All reduce() methods are interfaced in RooAbsData. All reduction techniques; # demonstrated on unbinned datasets can be applied to binned datasets as; # well.",MatchSource.CODE_COMMENT,tutorials/roofit/rf402_datahandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf402_datahandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf402_datahandling.py:13,Performance,load,loading,13,"# Saving and loading from file; # -------------------------------------------------------; # Datasets can be persisted with ROOT I/O",MatchSource.CODE_COMMENT,tutorials/roofit/rf402_datahandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf402_datahandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py:18,Modifiability,variab,variable,18,"# Add column with variable w to previously generated dataset",MatchSource.CODE_COMMENT,tutorials/roofit/rf403_weightedevts.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py:142,Availability,error,error,142,"# Fit quadratic polynomial to weighted data; # NOTE: A plain Maximum likelihood fit to weighted data does in general; # NOT result in correct error estimates, individual; # event weights represent Poisson statistics themselves.; #; # Fit with 'wrong' errors",MatchSource.CODE_COMMENT,tutorials/roofit/rf403_weightedevts.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py:251,Availability,error,errors,251,"# Fit quadratic polynomial to weighted data; # NOTE: A plain Maximum likelihood fit to weighted data does in general; # NOT result in correct error estimates, individual; # event weights represent Poisson statistics themselves.; #; # Fit with 'wrong' errors",MatchSource.CODE_COMMENT,tutorials/roofit/rf403_weightedevts.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py:50,Availability,error,errors,50,"# A first order correction to estimated parameter errors in an; # (unbinned) ML fit can be obtained by calculating the; # covariance matrix as; #; # V' = V C-1 V; #; # where V is the covariance matrix calculated from a fit; # to -logL = - sum [ w_i log f(x_i) ] and C is the covariance; # matrix calculated from -logL' = -sum [ w_i^2 log f(x_i) ]; # (i.e. the weights are applied squared); #; # A fit in self mode can be performed as follows:",MatchSource.CODE_COMMENT,tutorials/roofit/rf403_weightedevts.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py:421,Performance,perform,performed,421,"# A first order correction to estimated parameter errors in an; # (unbinned) ML fit can be obtained by calculating the; # covariance matrix as; #; # V' = V C-1 V; #; # where V is the covariance matrix calculated from a fit; # to -logL = - sum [ w_i log f(x_i) ] and C is the covariance; # matrix calculated from -logL' = -sum [ w_i^2 log f(x_i) ]; # (i.e. the weights are applied squared); #; # A fit in self mode can be performed as follows:",MatchSource.CODE_COMMENT,tutorials/roofit/rf403_weightedevts.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py:230,Testability,log,logL,230,"# A first order correction to estimated parameter errors in an; # (unbinned) ML fit can be obtained by calculating the; # covariance matrix as; #; # V' = V C-1 V; #; # where V is the covariance matrix calculated from a fit; # to -logL = - sum [ w_i log f(x_i) ] and C is the covariance; # matrix calculated from -logL' = -sum [ w_i^2 log f(x_i) ]; # (i.e. the weights are applied squared); #; # A fit in self mode can be performed as follows:",MatchSource.CODE_COMMENT,tutorials/roofit/rf403_weightedevts.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py:249,Testability,log,log,249,"# A first order correction to estimated parameter errors in an; # (unbinned) ML fit can be obtained by calculating the; # covariance matrix as; #; # V' = V C-1 V; #; # where V is the covariance matrix calculated from a fit; # to -logL = - sum [ w_i log f(x_i) ] and C is the covariance; # matrix calculated from -logL' = -sum [ w_i^2 log f(x_i) ]; # (i.e. the weights are applied squared); #; # A fit in self mode can be performed as follows:",MatchSource.CODE_COMMENT,tutorials/roofit/rf403_weightedevts.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py:313,Testability,log,logL,313,"# A first order correction to estimated parameter errors in an; # (unbinned) ML fit can be obtained by calculating the; # covariance matrix as; #; # V' = V C-1 V; #; # where V is the covariance matrix calculated from a fit; # to -logL = - sum [ w_i log f(x_i) ] and C is the covariance; # matrix calculated from -logL' = -sum [ w_i^2 log f(x_i) ]; # (i.e. the weights are applied squared); #; # A fit in self mode can be performed as follows:",MatchSource.CODE_COMMENT,tutorials/roofit/rf403_weightedevts.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py:334,Testability,log,log,334,"# A first order correction to estimated parameter errors in an; # (unbinned) ML fit can be obtained by calculating the; # covariance matrix as; #; # V' = V C-1 V; #; # where V is the covariance matrix calculated from a fit; # to -logL = - sum [ w_i log f(x_i) ] and C is the covariance; # matrix calculated from -logL' = -sum [ w_i^2 log f(x_i) ]; # (i.e. the weights are applied squared); #; # A fit in self mode can be performed as follows:",MatchSource.CODE_COMMENT,tutorials/roofit/rf403_weightedevts.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py:41,Availability,error,error,41,"# Plot data using sum-of-weights-squared error rather than Poisson errors",MatchSource.CODE_COMMENT,tutorials/roofit/rf403_weightedevts.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py:67,Availability,error,errors,67,"# Plot data using sum-of-weights-squared error rather than Poisson errors",MatchSource.CODE_COMMENT,tutorials/roofit/rf403_weightedevts.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py:67,Availability,error,errors,67,"# Perform chi2 fit to binned weighted dataset using sum-of-weights errors; #; # NB: Within the usual approximations of a chi2 fit, chi2 fit to weighted; # data using sum-of-weights-squared errors does give correct error; # estimates",MatchSource.CODE_COMMENT,tutorials/roofit/rf403_weightedevts.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py:189,Availability,error,errors,189,"# Perform chi2 fit to binned weighted dataset using sum-of-weights errors; #; # NB: Within the usual approximations of a chi2 fit, chi2 fit to weighted; # data using sum-of-weights-squared errors does give correct error; # estimates",MatchSource.CODE_COMMENT,tutorials/roofit/rf403_weightedevts.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py:214,Availability,error,error,214,"# Perform chi2 fit to binned weighted dataset using sum-of-weights errors; #; # NB: Within the usual approximations of a chi2 fit, chi2 fit to weighted; # data using sum-of-weights-squared errors does give correct error; # estimates",MatchSource.CODE_COMMENT,tutorials/roofit/rf403_weightedevts.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py:300,Availability,error,error,300,"# Compare fit results of chi2, L fits to (un)weighted data; # ------------------------------------------------------------; # Note that ML fit on 1Kevt of weighted data is closer to result of ML fit on 43Kevt of unweighted data; # than to 1Kevt of unweighted data, the reference chi^2 fit with SumW2 error gives a result closer to; # that of an unbinned ML fit to 1Kevt of unweighted data.",MatchSource.CODE_COMMENT,tutorials/roofit/rf403_weightedevts.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf404_categories.py:144,Modifiability,variab,variables,144,"## \file; ## \ingroup tutorial_roofit; ## \notebook -nodraw; ## Data and categories: working with ROOT.RooCategory objects to describe discrete variables; ##; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf404_categories.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf404_categories.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf405_realtocatfuncs.py:331,Modifiability,variab,variable,331,"# Create a binning real -> cat function; # ----------------------------------------------------------------------; # A RooBinningCategory is a category function that maps bins of a (named) binning definition; # in a real-valued input observable observables to state names. The state names are automatically; # constructed from the variable name, binning name and the bin number. If no binning name; # is specified the default binning is mapped",MatchSource.CODE_COMMENT,tutorials/roofit/rf405_realtocatfuncs.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf405_realtocatfuncs.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf407_latextables.py:25,Availability,error,error,25,"# Do fit to data, obtain error estimates on parameters",MatchSource.CODE_COMMENT,tutorials/roofit/rf407_latextables.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf407_latextables.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf408_RDataFrameToRooFit.py:19,Modifiability,variab,variables,19,"# We create RooFit variables that will represent the dataset.",MatchSource.CODE_COMMENT,tutorials/roofit/rf408_RDataFrameToRooFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf408_RDataFrameToRooFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf408_RDataFrameToRooFit.py:513,Modifiability,variab,variables,513,"# Booking the creation of RooDataSet / RooDataHist in RDataFrame; # ----------------------------------------------------------------; # Method 1:; # ---------; # We directly book the RooDataSetHelper action.; # We need to pass; # - the RDataFrame column types as template parameters; # - the constructor arguments for RooDataSet (they follow the same syntax as the usual RooDataSet constructors); # - the column names that RDataFrame should fill into the dataset; # NOTE: RDataFrame columns are matched to RooFit variables by position, *not by name*!; #; # The returned object is not yet a RooDataSet, but an RResultPtr that will be; # lazy-evaluated once you call GetValue() on it. We will only evaluate the; # RResultPtr once all other RDataFrame related actions are declared. This way; # we trigger the event loop computation only once, which will improve the; # runtime significantly.; #; # To learn more about lazy actions, see:; # https://root.cern/doc/master/classROOT_1_1RDataFrame.html#actions",MatchSource.CODE_COMMENT,tutorials/roofit/rf408_RDataFrameToRooFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf408_RDataFrameToRooFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf408_RDataFrameToRooFit.py:898,Usability,learn,learn,898,"# Booking the creation of RooDataSet / RooDataHist in RDataFrame; # ----------------------------------------------------------------; # Method 1:; # ---------; # We directly book the RooDataSetHelper action.; # We need to pass; # - the RDataFrame column types as template parameters; # - the constructor arguments for RooDataSet (they follow the same syntax as the usual RooDataSet constructors); # - the column names that RDataFrame should fill into the dataset; # NOTE: RDataFrame columns are matched to RooFit variables by position, *not by name*!; #; # The returned object is not yet a RooDataSet, but an RResultPtr that will be; # lazy-evaluated once you call GetValue() on it. We will only evaluate the; # RResultPtr once all other RDataFrame related actions are declared. This way; # we trigger the event loop computation only once, which will improve the; # runtime significantly.; #; # To learn more about lazy actions, see:; # https://root.cern/doc/master/classROOT_1_1RDataFrame.html#actions",MatchSource.CODE_COMMENT,tutorials/roofit/rf408_RDataFrameToRooFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf408_RDataFrameToRooFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf409_NumPyPandasToRooFit.py:50,Deployability,update,updated,50,"# Let's fit the Gaussian to the data. The mean is updated accordingly.",MatchSource.CODE_COMMENT,tutorials/roofit/rf409_NumPyPandasToRooFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf409_NumPyPandasToRooFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf409_NumPyPandasToRooFit.py:269,Integrability,interface,interface,269,"# The array values should be the same!; # Importing a RooDataHist from NumPy arrays with histogram counts and bin edges; # -----------------------------------------------------------------------------; # There is also a `RooDataHist.from_numpy` function, again with an interface; # inspired by `numpy.histogramdd`. You need to pass at least the histogram; # counts and the list of variables. The binning is optional: the default; # binning of the RooRealVars is used if not explicitly specified.",MatchSource.CODE_COMMENT,tutorials/roofit/rf409_NumPyPandasToRooFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf409_NumPyPandasToRooFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf409_NumPyPandasToRooFit.py:381,Modifiability,variab,variables,381,"# The array values should be the same!; # Importing a RooDataHist from NumPy arrays with histogram counts and bin edges; # -----------------------------------------------------------------------------; # There is also a `RooDataHist.from_numpy` function, again with an interface; # inspired by `numpy.histogramdd`. You need to pass at least the histogram; # counts and the list of variables. The binning is optional: the default; # binning of the RooRealVars is used if not explicitly specified.",MatchSource.CODE_COMMENT,tutorials/roofit/rf409_NumPyPandasToRooFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf409_NumPyPandasToRooFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf409_NumPyPandasToRooFit.py:232,Performance,optimiz,optimizations,232,"# Alternatively, you can specify only the number of bins and the range if your; # binning is uniform. This is preferred over passing the full list of bin; # edges, because RooFit will know that the binning is uniform and do some; # optimizations.",MatchSource.CODE_COMMENT,tutorials/roofit/rf409_NumPyPandasToRooFit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf409_NumPyPandasToRooFit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf501_simultaneouspdf.py:224,Deployability,integrat,integrated,224,"# Plot ""physics"" slice of simultaneous pdf.; # NB: You *must* project the sample index category with data using ProjWData as; # a RooSimultaneous makes no prediction on the shape in the index category and; # can thus not be integrated. In other words: Since the PDF doesn't know the; # number of events in the different category states, it doesn't know how much; # of each component it has to project out. This info is read from the data.",MatchSource.CODE_COMMENT,tutorials/roofit/rf501_simultaneouspdf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf501_simultaneouspdf.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf501_simultaneouspdf.py:224,Integrability,integrat,integrated,224,"# Plot ""physics"" slice of simultaneous pdf.; # NB: You *must* project the sample index category with data using ProjWData as; # a RooSimultaneous makes no prediction on the shape in the index category and; # can thus not be integrated. In other words: Since the PDF doesn't know the; # number of events in the different category states, it doesn't know how much; # of each component it has to project out. This info is read from the data.",MatchSource.CODE_COMMENT,tutorials/roofit/rf501_simultaneouspdf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf501_simultaneouspdf.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf501_simultaneouspdf.py:155,Safety,predict,prediction,155,"# Plot ""physics"" slice of simultaneous pdf.; # NB: You *must* project the sample index category with data using ProjWData as; # a RooSimultaneous makes no prediction on the shape in the index category and; # can thus not be integrated. In other words: Since the PDF doesn't know the; # number of events in the different category states, it doesn't know how much; # of each component it has to project out. This info is read from the data.",MatchSource.CODE_COMMENT,tutorials/roofit/rf501_simultaneouspdf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf501_simultaneouspdf.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf501_simultaneouspdf.py:344,Testability,log,logical,344,"# The same plot for the control sample slice. We do this with a different; # approach this time, for illustration purposes. Here, we are slicing the; # dataset and then use the data slice for the projection, because then the; # RooFit::Slice() becomes unnecessary. This approach is more general,; # because you can plot sums of slices by using logical or in the Cut(); # command.",MatchSource.CODE_COMMENT,tutorials/roofit/rf501_simultaneouspdf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf501_simultaneouspdf.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf505_asciicfg.py:144,Deployability,configurat,configuration,144,"## \file rf505_asciicfg.py; ## \ingroup tutorial_roofit; ## \notebook -nodraw; ## Organization and simultaneous fits: reading and writing ASCII configuration files; ##; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf505_asciicfg.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf505_asciicfg.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf505_asciicfg.py:144,Modifiability,config,configuration,144,"## \file rf505_asciicfg.py; ## \ingroup tutorial_roofit; ## \notebook -nodraw; ## Organization and simultaneous fits: reading and writing ASCII configuration files; ##; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf505_asciicfg.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf505_asciicfg.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf505_asciicfg.py:63,Modifiability,variab,variables,63,"# Read parameters from section 'Section3' of file. Mark all; # variables that were processed with the ""READ"" attribute",MatchSource.CODE_COMMENT,tutorials/roofit/rf505_asciicfg.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf505_asciicfg.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:139,Integrability,message,message,139,"## \file; ## \ingroup tutorial_roofit; ## \notebook -nodraw; ## Organization and simultaneous fits: tuning and customizing the ROOT.RooFit message logging facility; ##; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:147,Testability,log,logging,147,"## \file; ## \ingroup tutorial_roofit; ## \notebook -nodraw; ## Organization and simultaneous fits: tuning and customizing the ROOT.RooFit message logging facility; ##; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:8,Deployability,configurat,configuration,8,"# Print configuration of message service; # ------------------------------------------; # Print streams configuration",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:104,Deployability,configurat,configuration,104,"# Print configuration of message service; # ------------------------------------------; # Print streams configuration",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:25,Integrability,message,message,25,"# Print configuration of message service; # ------------------------------------------; # Print streams configuration",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:8,Modifiability,config,configuration,8,"# Print configuration of message service; # ------------------------------------------; # Print streams configuration",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:104,Modifiability,config,configuration,104,"# Print configuration of message service; # ------------------------------------------; # Print streams configuration",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:9,Deployability,integrat,integration,9,"# Adding integration topic to existing INFO stream; # ---------------------------------------------------; # Print streams configuration",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:123,Deployability,configurat,configuration,123,"# Adding integration topic to existing INFO stream; # ---------------------------------------------------; # Print streams configuration",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:9,Integrability,integrat,integration,9,"# Adding integration topic to existing INFO stream; # ---------------------------------------------------; # Print streams configuration",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:123,Modifiability,config,configuration,123,"# Adding integration topic to existing INFO stream; # ---------------------------------------------------; # Print streams configuration",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:47,Integrability,message,message,47,"# Construct integral over gauss to demonstrate message stream",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:16,Deployability,configurat,configuration,16,"# Print streams configuration in verbose, also shows inactive streams",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:16,Modifiability,config,configuration,16,"# Print streams configuration in verbose, also shows inactive streams",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:127,Integrability,message,message,127,"# Examples of pdf value tracing; # -----------------------------------------------------------------------; # Show DEBUG level message on function tracing, ROOT.RooGaussian only",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:41,Integrability,message,messages,41,"# Perform a fit to generate some tracing messages",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:42,Deployability,configurat,configuration,42,"# Reset message service to default stream configuration",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:8,Integrability,message,message,8,"# Reset message service to default stream configuration",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:42,Modifiability,config,configuration,42,"# Reset message service to default stream configuration",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:19,Integrability,message,message,19,"# Show DEBUG level message on function tracing on all objects, output to; # file",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:41,Integrability,message,messages,41,"# Perform a fit to generate some tracing messages",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:42,Deployability,configurat,configuration,42,"# Reset message service to default stream configuration",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:8,Integrability,message,message,8,"# Reset message service to default stream configuration",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:42,Modifiability,config,configuration,42,"# Reset message service to default stream configuration",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:131,Integrability,message,messages,131,"# Example of another debugging stream; # ---------------------------------------------------------------------; # Show DEBUG level messages on client/server link state management",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:42,Deployability,configurat,configuration,42,"# Reset message service to default stream configuration",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:8,Integrability,message,message,8,"# Reset message service to default stream configuration",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:42,Modifiability,config,configuration,42,"# Reset message service to default stream configuration",MatchSource.CODE_COMMENT,tutorials/roofit/rf506_msgservice.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf508_listsetmanip.py:81,Modifiability,variab,variables,81,"# Create dummy objects; # ---------------------------------------; # Create some variables",MatchSource.CODE_COMMENT,tutorials/roofit/rf508_listsetmanip.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf508_listsetmanip.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf508_listsetmanip.py:293,Availability,error,error,293,"# Owning RooArgSets; # ---------------------------------; # You can create a RooArgSet that owns copies of the objects instead of; # referencing the originals. A set either owns all of its components or none,; # so once addClone() is used, add() can no longer be used and will result in an; # error message",MatchSource.CODE_COMMENT,tutorials/roofit/rf508_listsetmanip.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf508_listsetmanip.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf508_listsetmanip.py:299,Integrability,message,message,299,"# Owning RooArgSets; # ---------------------------------; # You can create a RooArgSet that owns copies of the objects instead of; # referencing the originals. A set either owns all of its components or none,; # so once addClone() is used, add() can no longer be used and will result in an; # error message",MatchSource.CODE_COMMENT,tutorials/roofit/rf508_listsetmanip.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf508_listsetmanip.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf508_listsetmanip.py:284,Integrability,depend,dependencies,284,"# If a set contains function objects, the head node; # is cloned in a snapshot. To make a snapshot of all; # servers of a function object do as follows. The result; # of a RooArgSet snapshot with deepCloning option is a set; # of cloned objects, all their clone (recursive) server; # dependencies, together form a self-consistent; # set that is free of external dependencies",MatchSource.CODE_COMMENT,tutorials/roofit/rf508_listsetmanip.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf508_listsetmanip.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf508_listsetmanip.py:362,Integrability,depend,dependencies,362,"# If a set contains function objects, the head node; # is cloned in a snapshot. To make a snapshot of all; # servers of a function object do as follows. The result; # of a RooArgSet snapshot with deepCloning option is a set; # of cloned objects, all their clone (recursive) server; # dependencies, together form a self-consistent; # set that is free of external dependencies",MatchSource.CODE_COMMENT,tutorials/roofit/rf508_listsetmanip.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf508_listsetmanip.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf509_wsinteractive.py:109,Security,access,access,109,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Organization and simultaneous fits: easy interactive access to workspace contents - CINT; ## to CLING code migration; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf509_wsinteractive.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf509_wsinteractive.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf509_wsinteractive.py:209,Security,access,access,209,"# self does not work anymore with CLING; # use normal workspace functionality; # Use workspace contents; # ----------------------------------------------; # Old syntax to use the name space prefix operator to access the workspace contents; #; # d = w.model.generate(w.x,1000); # r = w.model.fitTo(*d); # use normal workspace methods",MatchSource.CODE_COMMENT,tutorials/roofit/rf509_wsinteractive.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf509_wsinteractive.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf509_wsinteractive.py:27,Modifiability,variab,variable,27,"# old syntax to access the variable x; # frame = w.x.frame()",MatchSource.CODE_COMMENT,tutorials/roofit/rf509_wsinteractive.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf509_wsinteractive.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf509_wsinteractive.py:16,Security,access,access,16,"# old syntax to access the variable x; # frame = w.x.frame()",MatchSource.CODE_COMMENT,tutorials/roofit/rf509_wsinteractive.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf509_wsinteractive.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf510_wsnamedsets.py:202,Modifiability,variab,variables,202,"# Encode definition of parameters in workspace; # ---------------------------------------------------------------------------------------; # Define named sets ""parameters"" and ""observables"", list which variables should be considered; # parameters and observables by the users convention; #; # Variables appearing in sets _must_ live in the workspace already, the autoImport flag; # of defineSet must be set to import them on the fly. Named sets contain only references; # to the original variables, the value of observables in named sets already; # reflect their 'current' value",MatchSource.CODE_COMMENT,tutorials/roofit/rf510_wsnamedsets.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf510_wsnamedsets.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf510_wsnamedsets.py:488,Modifiability,variab,variables,488,"# Encode definition of parameters in workspace; # ---------------------------------------------------------------------------------------; # Define named sets ""parameters"" and ""observables"", list which variables should be considered; # parameters and observables by the users convention; #; # Variables appearing in sets _must_ live in the workspace already, the autoImport flag; # of defineSet must be set to import them on the fly. Named sets contain only references; # to the original variables, the value of observables in named sets already; # reflect their 'current' value",MatchSource.CODE_COMMENT,tutorials/roofit/rf510_wsnamedsets.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf510_wsnamedsets.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf510_wsnamedsets.py:509,Availability,error,errors,509,"# Encode reference value for parameters in workspace; # ---------------------------------------------------------------------------------------------------; # Define a parameter 'snapshot' in the p.d.f.; # Unlike a named set, parameter snapshot stores an independent set of values for; # a given set of variables in the workspace. The values can be stored and reloaded; # into the workspace variable objects using the loadSnapshot() and saveSnapshot(); # methods. A snapshot saves the value of each variable, errors that are stored; # with it as well as the 'Constant' flag that is used in fits to determine if a; # parameter is kept fixed or not.; # Do a dummy fit to a (supposedly) reference dataset here and store the results; # of that fit into a snapshot",MatchSource.CODE_COMMENT,tutorials/roofit/rf510_wsnamedsets.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf510_wsnamedsets.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf510_wsnamedsets.py:303,Modifiability,variab,variables,303,"# Encode reference value for parameters in workspace; # ---------------------------------------------------------------------------------------------------; # Define a parameter 'snapshot' in the p.d.f.; # Unlike a named set, parameter snapshot stores an independent set of values for; # a given set of variables in the workspace. The values can be stored and reloaded; # into the workspace variable objects using the loadSnapshot() and saveSnapshot(); # methods. A snapshot saves the value of each variable, errors that are stored; # with it as well as the 'Constant' flag that is used in fits to determine if a; # parameter is kept fixed or not.; # Do a dummy fit to a (supposedly) reference dataset here and store the results; # of that fit into a snapshot",MatchSource.CODE_COMMENT,tutorials/roofit/rf510_wsnamedsets.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf510_wsnamedsets.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf510_wsnamedsets.py:391,Modifiability,variab,variable,391,"# Encode reference value for parameters in workspace; # ---------------------------------------------------------------------------------------------------; # Define a parameter 'snapshot' in the p.d.f.; # Unlike a named set, parameter snapshot stores an independent set of values for; # a given set of variables in the workspace. The values can be stored and reloaded; # into the workspace variable objects using the loadSnapshot() and saveSnapshot(); # methods. A snapshot saves the value of each variable, errors that are stored; # with it as well as the 'Constant' flag that is used in fits to determine if a; # parameter is kept fixed or not.; # Do a dummy fit to a (supposedly) reference dataset here and store the results; # of that fit into a snapshot",MatchSource.CODE_COMMENT,tutorials/roofit/rf510_wsnamedsets.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf510_wsnamedsets.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf510_wsnamedsets.py:499,Modifiability,variab,variable,499,"# Encode reference value for parameters in workspace; # ---------------------------------------------------------------------------------------------------; # Define a parameter 'snapshot' in the p.d.f.; # Unlike a named set, parameter snapshot stores an independent set of values for; # a given set of variables in the workspace. The values can be stored and reloaded; # into the workspace variable objects using the loadSnapshot() and saveSnapshot(); # methods. A snapshot saves the value of each variable, errors that are stored; # with it as well as the 'Constant' flag that is used in fits to determine if a; # parameter is kept fixed or not.; # Do a dummy fit to a (supposedly) reference dataset here and store the results; # of that fit into a snapshot",MatchSource.CODE_COMMENT,tutorials/roofit/rf510_wsnamedsets.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf510_wsnamedsets.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf510_wsnamedsets.py:418,Performance,load,loadSnapshot,418,"# Encode reference value for parameters in workspace; # ---------------------------------------------------------------------------------------------------; # Define a parameter 'snapshot' in the p.d.f.; # Unlike a named set, parameter snapshot stores an independent set of values for; # a given set of variables in the workspace. The values can be stored and reloaded; # into the workspace variable objects using the loadSnapshot() and saveSnapshot(); # methods. A snapshot saves the value of each variable, errors that are stored; # with it as well as the 'Constant' flag that is used in fits to determine if a; # parameter is kept fixed or not.; # Do a dummy fit to a (supposedly) reference dataset here and store the results; # of that fit into a snapshot",MatchSource.CODE_COMMENT,tutorials/roofit/rf510_wsnamedsets.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf510_wsnamedsets.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf511_wsfactory_basic.py:295,Integrability,depend,depending,295,"# Advanced pdf constructor arguments; # ----------------------------------------------------------------; #; # P.d.f. constructor arguments may by any type of ROOT.RooAbsArg, also; #; # Double_t -. converted to ROOT.RooConst(...); # {a,b,c} -. converted to ROOT.RooArgSet() or ROOT.RooArgList() depending on required ctor arg; # dataset name -. converted to ROOT.RooAbsData reference for any dataset residing in the workspace; # enum -. Any enum label that belongs to an enum defined in the (base); # class; # Make a dummy dataset pdf 'model' and import it in the workspace",MatchSource.CODE_COMMENT,tutorials/roofit/rf511_wsfactory_basic.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf511_wsfactory_basic.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf513_wsfactory_tools.py:165,Integrability,interface,interface,165,"## \file; ## \ingroup tutorial_roofit; ## \notebook -nodraw; ## Organization and simultaneous fits: illustration use of ROOT.RooCustomizer and; ## ROOT.RooSimWSTool interface in factory workspace tool in a complex standalone B physics example; ##; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf513_wsfactory_tools.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf513_wsfactory_tools.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf513_wsfactory_tools.py:26,Integrability,interface,interface,26,"# Example of RooSimWSTool interface; # ------------------------------------------------------------------; # Introduce a flavour tagging category tagCat as observable with 4 states corresponding; # to 4 flavour tagging techniques with different performance that require different; # parameterizations of the fit model; #; # ROOT.RooSimWSTool operation:; # - Make 4 clones of model (for each tagCat) state, will gain an individual; # copy of parameters w, and biasC. The other parameters remain common; # - Make a simultaneous pdf of the 4 clones assigning each to the appropriate; # state of the tagCat index category; # ROOT.RooSimWSTool is interfaced as meta-type SIMCLONE in the factory. The $SplitParam(); # argument maps to the SplitParam() named argument in the; # ROOT.RooSimWSTool constructor",MatchSource.CODE_COMMENT,tutorials/roofit/rf513_wsfactory_tools.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf513_wsfactory_tools.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf513_wsfactory_tools.py:642,Integrability,interface,interfaced,642,"# Example of RooSimWSTool interface; # ------------------------------------------------------------------; # Introduce a flavour tagging category tagCat as observable with 4 states corresponding; # to 4 flavour tagging techniques with different performance that require different; # parameterizations of the fit model; #; # ROOT.RooSimWSTool operation:; # - Make 4 clones of model (for each tagCat) state, will gain an individual; # copy of parameters w, and biasC. The other parameters remain common; # - Make a simultaneous pdf of the 4 clones assigning each to the appropriate; # state of the tagCat index category; # ROOT.RooSimWSTool is interfaced as meta-type SIMCLONE in the factory. The $SplitParam(); # argument maps to the SplitParam() named argument in the; # ROOT.RooSimWSTool constructor",MatchSource.CODE_COMMENT,tutorials/roofit/rf513_wsfactory_tools.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf513_wsfactory_tools.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf513_wsfactory_tools.py:283,Modifiability,parameteriz,parameterizations,283,"# Example of RooSimWSTool interface; # ------------------------------------------------------------------; # Introduce a flavour tagging category tagCat as observable with 4 states corresponding; # to 4 flavour tagging techniques with different performance that require different; # parameterizations of the fit model; #; # ROOT.RooSimWSTool operation:; # - Make 4 clones of model (for each tagCat) state, will gain an individual; # copy of parameters w, and biasC. The other parameters remain common; # - Make a simultaneous pdf of the 4 clones assigning each to the appropriate; # state of the tagCat index category; # ROOT.RooSimWSTool is interfaced as meta-type SIMCLONE in the factory. The $SplitParam(); # argument maps to the SplitParam() named argument in the; # ROOT.RooSimWSTool constructor",MatchSource.CODE_COMMENT,tutorials/roofit/rf513_wsfactory_tools.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf513_wsfactory_tools.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf513_wsfactory_tools.py:245,Performance,perform,performance,245,"# Example of RooSimWSTool interface; # ------------------------------------------------------------------; # Introduce a flavour tagging category tagCat as observable with 4 states corresponding; # to 4 flavour tagging techniques with different performance that require different; # parameterizations of the fit model; #; # ROOT.RooSimWSTool operation:; # - Make 4 clones of model (for each tagCat) state, will gain an individual; # copy of parameters w, and biasC. The other parameters remain common; # - Make a simultaneous pdf of the 4 clones assigning each to the appropriate; # state of the tagCat index category; # ROOT.RooSimWSTool is interfaced as meta-type SIMCLONE in the factory. The $SplitParam(); # argument maps to the SplitParam() named argument in the; # ROOT.RooSimWSTool constructor",MatchSource.CODE_COMMENT,tutorials/roofit/rf513_wsfactory_tools.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf513_wsfactory_tools.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf513_wsfactory_tools.py:27,Integrability,interface,interface,27,"# Example of RooCustomizer interface; # -------------------------------------------------------------------; #; # Class ROOT.RooCustomizer makes clones of existing pdfs with certain prescribed; # modifications (branch of leaf node replacements); #; # Here we take our model (the original before ROOT.RooSimWSTool modifications); # and request that the parameter w (the mistag rate) is replaced with; # an expression-based function that calculates w in terms of the Dilution; # parameter D that is defined D = 1-2*w; # Make a clone model_D of original 'model' replacing 'w' with; # 'expr('0.5-D/2',D[0,1])'",MatchSource.CODE_COMMENT,tutorials/roofit/rf513_wsfactory_tools.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf513_wsfactory_tools.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf514_RooCustomizer.py:141,Modifiability,variab,variable,141,"# 2. Each sample should have its own signal yield, but there is an extra complication:; # We need the yields 1 and 2 to be a function of the variable ""mass"".; # For this, we pre-define nodes with exactly the names that the customiser would have created automatically,; # that is, ""<nodeName>_<categoryName>"", and we register them in the set of customiser nodes.; # The customiser will pick them up instead of creating new ones.; # If we don't provide one (e.g. for ""yieldSig_Sample3""), it will be created automatically by cloning `yieldSig`.",MatchSource.CODE_COMMENT,tutorials/roofit/rf514_RooCustomizer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf514_RooCustomizer.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf515_hfJSON.py:236,Usability,simpl,simple,236,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Code HistFactory Models in JSON.; ##; ## With the HS3 standard, it is possible to code RooFit-Models of any kind as JSON files.; ## In this tutorial, you can see how to code up a (simple) HistFactory-based model in JSON and import it into a RooWorkspace.; ##; ## \macro_code; ##; ## \date November 2021; ## \author Carsten Burgard",MatchSource.CODE_COMMENT,tutorials/roofit/rf515_hfJSON.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf515_hfJSON.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf515_hfJSON.py:93,Modifiability,config,config,93,"# now, you can easily use your workspace to run your fit (as you usually would); # the model config is named after your pdf, i.e. <the pdf name>_modelConfig",MatchSource.CODE_COMMENT,tutorials/roofit/rf515_hfJSON.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf515_hfJSON.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf601_intminuit.py:28,Availability,error,error,28,"# Interactive minimization, error analysis; # -------------------------------------------------------------------------------; # Create MINUIT interface object",MatchSource.CODE_COMMENT,tutorials/roofit/rf601_intminuit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf601_intminuit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf601_intminuit.py:143,Integrability,interface,interface,143,"# Interactive minimization, error analysis; # -------------------------------------------------------------------------------; # Create MINUIT interface object",MatchSource.CODE_COMMENT,tutorials/roofit/rf601_intminuit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf601_intminuit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf601_intminuit.py:19,Testability,log,logging,19,"# Activate verbose logging of MINUIT parameter space stepping",MatchSource.CODE_COMMENT,tutorials/roofit/rf601_intminuit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf601_intminuit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf601_intminuit.py:54,Availability,error,error,54,"# Print values of all parameters, reflect values (and error estimates); # that are back propagated from MINUIT",MatchSource.CODE_COMMENT,tutorials/roofit/rf601_intminuit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf601_intminuit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf601_intminuit.py:18,Testability,log,logging,18,"# Disable verbose logging",MatchSource.CODE_COMMENT,tutorials/roofit/rf601_intminuit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf601_intminuit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf601_intminuit.py:25,Availability,error,errors,25,"# Run HESSE to calculate errors from d2L/dp2",MatchSource.CODE_COMMENT,tutorials/roofit/rf601_intminuit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf601_intminuit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf601_intminuit.py:19,Availability,error,error,19,"# Print value (and error) of sigma_g2 parameter, reflects; # value and error back propagated from MINUIT",MatchSource.CODE_COMMENT,tutorials/roofit/rf601_intminuit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf601_intminuit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf601_intminuit.py:71,Availability,error,error,71,"# Print value (and error) of sigma_g2 parameter, reflects; # value and error back propagated from MINUIT",MatchSource.CODE_COMMENT,tutorials/roofit/rf601_intminuit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf601_intminuit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf601_intminuit.py:19,Availability,error,error,19,"# Print value (and error) of sigma_g2 parameter, reflects; # value and error back propagated from MINUIT",MatchSource.CODE_COMMENT,tutorials/roofit/rf601_intminuit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf601_intminuit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf601_intminuit.py:71,Availability,error,error,71,"# Print value (and error) of sigma_g2 parameter, reflects; # value and error back propagated from MINUIT",MatchSource.CODE_COMMENT,tutorials/roofit/rf601_intminuit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf601_intminuit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf602_chi2fit.py:202,Modifiability,extend,extended,202,"# Construct a chi^2 of the data and the model.; # When a p.d.f. is used in a chi^2 fit, probability density scaled; # by the number of events in the dataset to obtain the fit function; # If model is an extended p.d.f, expected number events is used; # instead of the observed number of events.",MatchSource.CODE_COMMENT,tutorials/roofit/rf602_chi2fit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf602_chi2fit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf602_chi2fit.py:206,Availability,error,error,206,"# NB: It is also possible to fit a ROOT.RooAbsReal function to a ROOT.RooDataHist; # using chi2FitTo().; # Note that entries with zero bins are _not_ allowed; # for a proper chi^2 calculation and will give error; # messages",MatchSource.CODE_COMMENT,tutorials/roofit/rf602_chi2fit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf602_chi2fit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf602_chi2fit.py:215,Integrability,message,messages,215,"# NB: It is also possible to fit a ROOT.RooAbsReal function to a ROOT.RooDataHist; # using chi2FitTo().; # Note that entries with zero bins are _not_ allowed; # for a proper chi^2 calculation and will give error; # messages",MatchSource.CODE_COMMENT,tutorials/roofit/rf602_chi2fit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf602_chi2fit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf603_multicpu.py:39,Deployability,integrat,integration,39,"# Perform parallel projection using MC integration of pdf using given input dataSet.; # In self mode the data-weighted average of the pdf is calculated by splitting the; # input dataset in N equal pieces and calculating in parallel the weighted average; # one each subset. The N results of those calculations are then weighted into the; # final result; # Use four processes",MatchSource.CODE_COMMENT,tutorials/roofit/rf603_multicpu.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf603_multicpu.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf603_multicpu.py:39,Integrability,integrat,integration,39,"# Perform parallel projection using MC integration of pdf using given input dataSet.; # In self mode the data-weighted average of the pdf is calculated by splitting the; # input dataset in N equal pieces and calculating in parallel the weighted average; # one each subset. The N results of those calculations are then weighted into the; # final result; # Use four processes",MatchSource.CODE_COMMENT,tutorials/roofit/rf603_multicpu.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf603_multicpu.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py:151,Availability,error,error,151,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## 'LIKELIHOOD AND MINIMIZATION' RooFit tutorial macro #606; ##; ## Understanding and customizing error handling in likelihood evaluations; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf606_nllerrorhandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py:154,Availability,error,errors,154,"# Fit model to data; # ---------------------------------; # The ARGUS background shape has a sharp kinematic cutoff at m=m0; # and is prone to evaluation errors if the cutoff parameter m0; # is floated: when the pdf cutoff value is lower than that in data; # events with m>m0 will have zero probability; # Perform unbinned ML fit. Print detailed error messages for up to; # 10 events per likelihood evaluation. The default error handling strategy; # is to return a very high value of the likelihood to MINUIT if errors occur,; # which will force MINUIT to retreat from the problematic area",MatchSource.CODE_COMMENT,tutorials/roofit/rf606_nllerrorhandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py:346,Availability,error,error,346,"# Fit model to data; # ---------------------------------; # The ARGUS background shape has a sharp kinematic cutoff at m=m0; # and is prone to evaluation errors if the cutoff parameter m0; # is floated: when the pdf cutoff value is lower than that in data; # events with m>m0 will have zero probability; # Perform unbinned ML fit. Print detailed error messages for up to; # 10 events per likelihood evaluation. The default error handling strategy; # is to return a very high value of the likelihood to MINUIT if errors occur,; # which will force MINUIT to retreat from the problematic area",MatchSource.CODE_COMMENT,tutorials/roofit/rf606_nllerrorhandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py:423,Availability,error,error,423,"# Fit model to data; # ---------------------------------; # The ARGUS background shape has a sharp kinematic cutoff at m=m0; # and is prone to evaluation errors if the cutoff parameter m0; # is floated: when the pdf cutoff value is lower than that in data; # events with m>m0 will have zero probability; # Perform unbinned ML fit. Print detailed error messages for up to; # 10 events per likelihood evaluation. The default error handling strategy; # is to return a very high value of the likelihood to MINUIT if errors occur,; # which will force MINUIT to retreat from the problematic area",MatchSource.CODE_COMMENT,tutorials/roofit/rf606_nllerrorhandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py:512,Availability,error,errors,512,"# Fit model to data; # ---------------------------------; # The ARGUS background shape has a sharp kinematic cutoff at m=m0; # and is prone to evaluation errors if the cutoff parameter m0; # is floated: when the pdf cutoff value is lower than that in data; # events with m>m0 will have zero probability; # Perform unbinned ML fit. Print detailed error messages for up to; # 10 events per likelihood evaluation. The default error handling strategy; # is to return a very high value of the likelihood to MINUIT if errors occur,; # which will force MINUIT to retreat from the problematic area",MatchSource.CODE_COMMENT,tutorials/roofit/rf606_nllerrorhandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py:352,Integrability,message,messages,352,"# Fit model to data; # ---------------------------------; # The ARGUS background shape has a sharp kinematic cutoff at m=m0; # and is prone to evaluation errors if the cutoff parameter m0; # is floated: when the pdf cutoff value is lower than that in data; # events with m>m0 will have zero probability; # Perform unbinned ML fit. Print detailed error messages for up to; # 10 events per likelihood evaluation. The default error handling strategy; # is to return a very high value of the likelihood to MINUIT if errors occur,; # which will force MINUIT to retreat from the problematic area",MatchSource.CODE_COMMENT,tutorials/roofit/rf606_nllerrorhandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py:64,Availability,error,errors,64,"# Perform another fit. In self configuration only the number of errors per; # likelihood evaluation is shown, it is greater than zero. The; # EvalErrorWall(kFALSE) arguments disables the default error handling strategy; # and will cause the actual (problematic) value of the likelihood to be passed; # to MINUIT.; #; # NB: Use of self option is NOT recommended as default strategt as broken -log(L) values; # can often be lower than 'good' ones because offending events are removed.; # ROOT.This may effectively create a False minimum in problem areas. ROOT.This is clearly; # illustrated in the second plot",MatchSource.CODE_COMMENT,tutorials/roofit/rf606_nllerrorhandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py:195,Availability,error,error,195,"# Perform another fit. In self configuration only the number of errors per; # likelihood evaluation is shown, it is greater than zero. The; # EvalErrorWall(kFALSE) arguments disables the default error handling strategy; # and will cause the actual (problematic) value of the likelihood to be passed; # to MINUIT.; #; # NB: Use of self option is NOT recommended as default strategt as broken -log(L) values; # can often be lower than 'good' ones because offending events are removed.; # ROOT.This may effectively create a False minimum in problem areas. ROOT.This is clearly; # illustrated in the second plot",MatchSource.CODE_COMMENT,tutorials/roofit/rf606_nllerrorhandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py:31,Deployability,configurat,configuration,31,"# Perform another fit. In self configuration only the number of errors per; # likelihood evaluation is shown, it is greater than zero. The; # EvalErrorWall(kFALSE) arguments disables the default error handling strategy; # and will cause the actual (problematic) value of the likelihood to be passed; # to MINUIT.; #; # NB: Use of self option is NOT recommended as default strategt as broken -log(L) values; # can often be lower than 'good' ones because offending events are removed.; # ROOT.This may effectively create a False minimum in problem areas. ROOT.This is clearly; # illustrated in the second plot",MatchSource.CODE_COMMENT,tutorials/roofit/rf606_nllerrorhandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py:31,Modifiability,config,configuration,31,"# Perform another fit. In self configuration only the number of errors per; # likelihood evaluation is shown, it is greater than zero. The; # EvalErrorWall(kFALSE) arguments disables the default error handling strategy; # and will cause the actual (problematic) value of the likelihood to be passed; # to MINUIT.; #; # NB: Use of self option is NOT recommended as default strategt as broken -log(L) values; # can often be lower than 'good' ones because offending events are removed.; # ROOT.This may effectively create a False minimum in problem areas. ROOT.This is clearly; # illustrated in the second plot",MatchSource.CODE_COMMENT,tutorials/roofit/rf606_nllerrorhandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py:392,Testability,log,log,392,"# Perform another fit. In self configuration only the number of errors per; # likelihood evaluation is shown, it is greater than zero. The; # EvalErrorWall(kFALSE) arguments disables the default error handling strategy; # and will cause the actual (problematic) value of the likelihood to be passed; # to MINUIT.; #; # NB: Use of self option is NOT recommended as default strategt as broken -log(L) values; # can often be lower than 'good' ones because offending events are removed.; # ROOT.This may effectively create a False minimum in problem areas. ROOT.This is clearly; # illustrated in the second plot",MatchSource.CODE_COMMENT,tutorials/roofit/rf606_nllerrorhandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py:566,Usability,clear,clearly,566,"# Perform another fit. In self configuration only the number of errors per; # likelihood evaluation is shown, it is greater than zero. The; # EvalErrorWall(kFALSE) arguments disables the default error handling strategy; # and will cause the actual (problematic) value of the likelihood to be passed; # to MINUIT.; #; # NB: Use of self option is NOT recommended as default strategt as broken -log(L) values; # can often be lower than 'good' ones because offending events are removed.; # ROOT.This may effectively create a False minimum in problem areas. ROOT.This is clearly; # illustrated in the second plot",MatchSource.CODE_COMMENT,tutorials/roofit/rf606_nllerrorhandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py:141,Availability,error,errors,141,"# Plot likelihood in m0 in range that includes problematic values; # In self configuration no messages are printed for likelihood evaluation errors,; # but if an likelihood value evaluates with error, corresponding value; # on the curve will be set to the value given in EvalErrorValue().",MatchSource.CODE_COMMENT,tutorials/roofit/rf606_nllerrorhandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py:194,Availability,error,error,194,"# Plot likelihood in m0 in range that includes problematic values; # In self configuration no messages are printed for likelihood evaluation errors,; # but if an likelihood value evaluates with error, corresponding value; # on the curve will be set to the value given in EvalErrorValue().",MatchSource.CODE_COMMENT,tutorials/roofit/rf606_nllerrorhandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py:77,Deployability,configurat,configuration,77,"# Plot likelihood in m0 in range that includes problematic values; # In self configuration no messages are printed for likelihood evaluation errors,; # but if an likelihood value evaluates with error, corresponding value; # on the curve will be set to the value given in EvalErrorValue().",MatchSource.CODE_COMMENT,tutorials/roofit/rf606_nllerrorhandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py:94,Integrability,message,messages,94,"# Plot likelihood in m0 in range that includes problematic values; # In self configuration no messages are printed for likelihood evaluation errors,; # but if an likelihood value evaluates with error, corresponding value; # on the curve will be set to the value given in EvalErrorValue().",MatchSource.CODE_COMMENT,tutorials/roofit/rf606_nllerrorhandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py:77,Modifiability,config,configuration,77,"# Plot likelihood in m0 in range that includes problematic values; # In self configuration no messages are printed for likelihood evaluation errors,; # but if an likelihood value evaluates with error, corresponding value; # on the curve will be set to the value given in EvalErrorValue().",MatchSource.CODE_COMMENT,tutorials/roofit/rf606_nllerrorhandling.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf608_fitresultaspdf.py:59,Availability,error,error,59,"# Sample a 3-D histogram of the pdf to be visualized as an error; # ellipsoid using the GLISO draw option",MatchSource.CODE_COMMENT,tutorials/roofit/rf608_fitresultaspdf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf608_fitresultaspdf.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf608_fitresultaspdf.py:27,Availability,down,down,27,"# Project 3D parameter pdf down to 3 permutations of two-dimensional pdfs; # The integrations corresponding to these projections are performed analytically; # by the MV Gaussian pdf",MatchSource.CODE_COMMENT,tutorials/roofit/rf608_fitresultaspdf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf608_fitresultaspdf.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf608_fitresultaspdf.py:81,Deployability,integrat,integrations,81,"# Project 3D parameter pdf down to 3 permutations of two-dimensional pdfs; # The integrations corresponding to these projections are performed analytically; # by the MV Gaussian pdf",MatchSource.CODE_COMMENT,tutorials/roofit/rf608_fitresultaspdf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf608_fitresultaspdf.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf608_fitresultaspdf.py:81,Integrability,integrat,integrations,81,"# Project 3D parameter pdf down to 3 permutations of two-dimensional pdfs; # The integrations corresponding to these projections are performed analytically; # by the MV Gaussian pdf",MatchSource.CODE_COMMENT,tutorials/roofit/rf608_fitresultaspdf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf608_fitresultaspdf.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf608_fitresultaspdf.py:133,Performance,perform,performed,133,"# Project 3D parameter pdf down to 3 permutations of two-dimensional pdfs; # The integrations corresponding to these projections are performed analytically; # by the MV Gaussian pdf",MatchSource.CODE_COMMENT,tutorials/roofit/rf608_fitresultaspdf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf608_fitresultaspdf.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf609_xychi2fit.py:152,Availability,error,errors,152,"# Create dataset with X and Y values; # -------------------------------------------------------------------; # Make weighted XY dataset with asymmetric errors stored; # The StoreError() argument is essential as it makes; # the dataset store the error in addition to the values; # of the observables. If errors on one or more observables; # are asymmetric, can store the asymmetric error; # using the StoreAsymError() argument",MatchSource.CODE_COMMENT,tutorials/roofit/rf609_xychi2fit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf609_xychi2fit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf609_xychi2fit.py:245,Availability,error,error,245,"# Create dataset with X and Y values; # -------------------------------------------------------------------; # Make weighted XY dataset with asymmetric errors stored; # The StoreError() argument is essential as it makes; # the dataset store the error in addition to the values; # of the observables. If errors on one or more observables; # are asymmetric, can store the asymmetric error; # using the StoreAsymError() argument",MatchSource.CODE_COMMENT,tutorials/roofit/rf609_xychi2fit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf609_xychi2fit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf609_xychi2fit.py:303,Availability,error,errors,303,"# Create dataset with X and Y values; # -------------------------------------------------------------------; # Make weighted XY dataset with asymmetric errors stored; # The StoreError() argument is essential as it makes; # the dataset store the error in addition to the values; # of the observables. If errors on one or more observables; # are asymmetric, can store the asymmetric error; # using the StoreAsymError() argument",MatchSource.CODE_COMMENT,tutorials/roofit/rf609_xychi2fit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf609_xychi2fit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf609_xychi2fit.py:381,Availability,error,error,381,"# Create dataset with X and Y values; # -------------------------------------------------------------------; # Make weighted XY dataset with asymmetric errors stored; # The StoreError() argument is essential as it makes; # the dataset store the error in addition to the values; # of the observables. If errors on one or more observables; # are asymmetric, can store the asymmetric error; # using the StoreAsymError() argument",MatchSource.CODE_COMMENT,tutorials/roofit/rf609_xychi2fit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf609_xychi2fit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf609_xychi2fit.py:18,Availability,error,error,18,"# Set Y value and error",MatchSource.CODE_COMMENT,tutorials/roofit/rf609_xychi2fit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf609_xychi2fit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf609_xychi2fit.py:26,Availability,error,errors,26,"# Fit chi^2 using X and Y errors",MatchSource.CODE_COMMENT,tutorials/roofit/rf609_xychi2fit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf609_xychi2fit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf609_xychi2fit.py:67,Availability,error,errors,67,"# Alternative: fit chi^2 integrating f(x) over ranges defined by X errors, rather; # than taking point at center of bin",MatchSource.CODE_COMMENT,tutorials/roofit/rf609_xychi2fit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf609_xychi2fit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf609_xychi2fit.py:25,Deployability,integrat,integrating,25,"# Alternative: fit chi^2 integrating f(x) over ranges defined by X errors, rather; # than taking point at center of bin",MatchSource.CODE_COMMENT,tutorials/roofit/rf609_xychi2fit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf609_xychi2fit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf609_xychi2fit.py:25,Integrability,integrat,integrating,25,"# Alternative: fit chi^2 integrating f(x) over ranges defined by X errors, rather; # than taking point at center of bin",MatchSource.CODE_COMMENT,tutorials/roofit/rf609_xychi2fit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf609_xychi2fit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py:102,Availability,error,errors,102,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Likelihood and minimization: visualization of errors from a covariance matrix; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf610_visualerror.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py:16,Availability,error,error,16,"# Visualize fit error; # -------------------------------------; # Make plot frame",MatchSource.CODE_COMMENT,tutorials/roofit/rf610_visualerror.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py:20,Availability,error,error,20,"# Visualize 1-sigma error encoded in fit result 'r' as orange band using linear error propagation; # ROOT.This results in an error band that is by construction symmetric; #; # The linear error is calculated as; # error(x) = Z* F_a(x) * Corr(a,a') F_a'(x); #; # where F_a(x) = [ f(x,a+da) - f(x,a-da) ] / 2,; #; # with f(x) = the plotted curve; # 'da' = error taken from the fit result; # Corr(a,a') = the correlation matrix from the fit result; # Z = requested significance 'Z sigma band'; #; # The linear method is fast (required 2*N evaluations of the curve, N is the number of parameters),; # but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and; # Gaussian approximations made; #",MatchSource.CODE_COMMENT,tutorials/roofit/rf610_visualerror.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py:80,Availability,error,error,80,"# Visualize 1-sigma error encoded in fit result 'r' as orange band using linear error propagation; # ROOT.This results in an error band that is by construction symmetric; #; # The linear error is calculated as; # error(x) = Z* F_a(x) * Corr(a,a') F_a'(x); #; # where F_a(x) = [ f(x,a+da) - f(x,a-da) ] / 2,; #; # with f(x) = the plotted curve; # 'da' = error taken from the fit result; # Corr(a,a') = the correlation matrix from the fit result; # Z = requested significance 'Z sigma band'; #; # The linear method is fast (required 2*N evaluations of the curve, N is the number of parameters),; # but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and; # Gaussian approximations made; #",MatchSource.CODE_COMMENT,tutorials/roofit/rf610_visualerror.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py:125,Availability,error,error,125,"# Visualize 1-sigma error encoded in fit result 'r' as orange band using linear error propagation; # ROOT.This results in an error band that is by construction symmetric; #; # The linear error is calculated as; # error(x) = Z* F_a(x) * Corr(a,a') F_a'(x); #; # where F_a(x) = [ f(x,a+da) - f(x,a-da) ] / 2,; #; # with f(x) = the plotted curve; # 'da' = error taken from the fit result; # Corr(a,a') = the correlation matrix from the fit result; # Z = requested significance 'Z sigma band'; #; # The linear method is fast (required 2*N evaluations of the curve, N is the number of parameters),; # but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and; # Gaussian approximations made; #",MatchSource.CODE_COMMENT,tutorials/roofit/rf610_visualerror.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py:187,Availability,error,error,187,"# Visualize 1-sigma error encoded in fit result 'r' as orange band using linear error propagation; # ROOT.This results in an error band that is by construction symmetric; #; # The linear error is calculated as; # error(x) = Z* F_a(x) * Corr(a,a') F_a'(x); #; # where F_a(x) = [ f(x,a+da) - f(x,a-da) ] / 2,; #; # with f(x) = the plotted curve; # 'da' = error taken from the fit result; # Corr(a,a') = the correlation matrix from the fit result; # Z = requested significance 'Z sigma band'; #; # The linear method is fast (required 2*N evaluations of the curve, N is the number of parameters),; # but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and; # Gaussian approximations made; #",MatchSource.CODE_COMMENT,tutorials/roofit/rf610_visualerror.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py:213,Availability,error,error,213,"# Visualize 1-sigma error encoded in fit result 'r' as orange band using linear error propagation; # ROOT.This results in an error band that is by construction symmetric; #; # The linear error is calculated as; # error(x) = Z* F_a(x) * Corr(a,a') F_a'(x); #; # where F_a(x) = [ f(x,a+da) - f(x,a-da) ] / 2,; #; # with f(x) = the plotted curve; # 'da' = error taken from the fit result; # Corr(a,a') = the correlation matrix from the fit result; # Z = requested significance 'Z sigma band'; #; # The linear method is fast (required 2*N evaluations of the curve, N is the number of parameters),; # but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and; # Gaussian approximations made; #",MatchSource.CODE_COMMENT,tutorials/roofit/rf610_visualerror.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py:353,Availability,error,error,353,"# Visualize 1-sigma error encoded in fit result 'r' as orange band using linear error propagation; # ROOT.This results in an error band that is by construction symmetric; #; # The linear error is calculated as; # error(x) = Z* F_a(x) * Corr(a,a') F_a'(x); #; # where F_a(x) = [ f(x,a+da) - f(x,a-da) ] / 2,; #; # with f(x) = the plotted curve; # 'da' = error taken from the fit result; # Corr(a,a') = the correlation matrix from the fit result; # Z = requested significance 'Z sigma band'; #; # The linear method is fast (required 2*N evaluations of the curve, N is the number of parameters),; # but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and; # Gaussian approximations made; #",MatchSource.CODE_COMMENT,tutorials/roofit/rf610_visualerror.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py:12,Availability,error,error,12,"# Calculate error using sampling method and visualize as dashed red line.; #; # In self method a number of curves is calculated with variations of the parameter values, sampled; # from a multi-variate Gaussian pdf that is constructed from the fit results covariance matrix.; # The error(x) is determined by calculating a central interval that capture N% of the variations; # for each value of x, N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves; # is chosen to be such that at least 100 curves are expected to be outside the N% interval, is minimally; # 100 (e.g. Z=1.Ncurve=356, Z=2.Ncurve=2156)) Intervals from the sampling method can be asymmetric,; # and may perform better in the presence of strong correlations, may take; # (much) longer to calculate",MatchSource.CODE_COMMENT,tutorials/roofit/rf610_visualerror.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py:281,Availability,error,error,281,"# Calculate error using sampling method and visualize as dashed red line.; #; # In self method a number of curves is calculated with variations of the parameter values, sampled; # from a multi-variate Gaussian pdf that is constructed from the fit results covariance matrix.; # The error(x) is determined by calculating a central interval that capture N% of the variations; # for each value of x, N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves; # is chosen to be such that at least 100 curves are expected to be outside the N% interval, is minimally; # 100 (e.g. Z=1.Ncurve=356, Z=2.Ncurve=2156)) Intervals from the sampling method can be asymmetric,; # and may perform better in the presence of strong correlations, may take; # (much) longer to calculate",MatchSource.CODE_COMMENT,tutorials/roofit/rf610_visualerror.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py:690,Performance,perform,perform,690,"# Calculate error using sampling method and visualize as dashed red line.; #; # In self method a number of curves is calculated with variations of the parameter values, sampled; # from a multi-variate Gaussian pdf that is constructed from the fit results covariance matrix.; # The error(x) is determined by calculating a central interval that capture N% of the variations; # for each value of x, N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves; # is chosen to be such that at least 100 curves are expected to be outside the N% interval, is minimally; # 100 (e.g. Z=1.Ncurve=356, Z=2.Ncurve=2156)) Intervals from the sampling method can be asymmetric,; # and may perform better in the presence of strong correlations, may take; # (much) longer to calculate",MatchSource.CODE_COMMENT,tutorials/roofit/rf610_visualerror.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py:27,Availability,error,error,27,"# Perform the same type of error visualization on the background component only.; # The VisualizeError() option can generally applied to _any_ kind of; # plot (components, asymmetries, etc..)",MatchSource.CODE_COMMENT,tutorials/roofit/rf610_visualerror.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py:24,Availability,error,error,24,"# Visualize partial fit error; # ------------------------------------------------------; # Make plot frame",MatchSource.CODE_COMMENT,tutorials/roofit/rf610_visualerror.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py:20,Availability,error,error,20,"# Visualize partial error. For partial error visualization the covariance matrix is first reduced as follows; # ___ -1; # Vred = V22 = V11 - V12 * V22 * V21; #; # Where V11,V12,V21, represent a block decomposition of the covariance matrix into observables that; # are propagated (labeled by index '1') and that are not propagated (labeled by index '2'), V22bar; # is the Shur complement of V22, as shown above; #; # (Note that Vred is _not_ a simple sub-matrix of V); # Propagate partial error due to shape parameters (m,m2) using linear and; # sampling method",MatchSource.CODE_COMMENT,tutorials/roofit/rf610_visualerror.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py:39,Availability,error,error,39,"# Visualize partial error. For partial error visualization the covariance matrix is first reduced as follows; # ___ -1; # Vred = V22 = V11 - V12 * V22 * V21; #; # Where V11,V12,V21, represent a block decomposition of the covariance matrix into observables that; # are propagated (labeled by index '1') and that are not propagated (labeled by index '2'), V22bar; # is the Shur complement of V22, as shown above; #; # (Note that Vred is _not_ a simple sub-matrix of V); # Propagate partial error due to shape parameters (m,m2) using linear and; # sampling method",MatchSource.CODE_COMMENT,tutorials/roofit/rf610_visualerror.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py:488,Availability,error,error,488,"# Visualize partial error. For partial error visualization the covariance matrix is first reduced as follows; # ___ -1; # Vred = V22 = V11 - V12 * V22 * V21; #; # Where V11,V12,V21, represent a block decomposition of the covariance matrix into observables that; # are propagated (labeled by index '1') and that are not propagated (labeled by index '2'), V22bar; # is the Shur complement of V22, as shown above; #; # (Note that Vred is _not_ a simple sub-matrix of V); # Propagate partial error due to shape parameters (m,m2) using linear and; # sampling method",MatchSource.CODE_COMMENT,tutorials/roofit/rf610_visualerror.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py:90,Energy Efficiency,reduce,reduced,90,"# Visualize partial error. For partial error visualization the covariance matrix is first reduced as follows; # ___ -1; # Vred = V22 = V11 - V12 * V22 * V21; #; # Where V11,V12,V21, represent a block decomposition of the covariance matrix into observables that; # are propagated (labeled by index '1') and that are not propagated (labeled by index '2'), V22bar; # is the Shur complement of V22, as shown above; #; # (Note that Vred is _not_ a simple sub-matrix of V); # Propagate partial error due to shape parameters (m,m2) using linear and; # sampling method",MatchSource.CODE_COMMENT,tutorials/roofit/rf610_visualerror.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py:443,Usability,simpl,simple,443,"# Visualize partial error. For partial error visualization the covariance matrix is first reduced as follows; # ___ -1; # Vred = V22 = V11 - V12 * V22 * V21; #; # Where V11,V12,V21, represent a block decomposition of the covariance matrix into observables that; # are propagated (labeled by index '1') and that are not propagated (labeled by index '2'), V22bar; # is the Shur complement of V22, as shown above; #; # (Note that Vred is _not_ a simple sub-matrix of V); # Propagate partial error due to shape parameters (m,m2) using linear and; # sampling method",MatchSource.CODE_COMMENT,tutorials/roofit/rf610_visualerror.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py:20,Availability,error,error,20,"# Propagate partial error due to yield parameter using linear and sampling; # method",MatchSource.CODE_COMMENT,tutorials/roofit/rf610_visualerror.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py:20,Availability,error,error,20,"# Propagate partial error due to yield parameter using linear and sampling; # method",MatchSource.CODE_COMMENT,tutorials/roofit/rf610_visualerror.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf610_visualerror.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py:173,Availability,recover,recovery,173,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Likelihood and minimization: Recover from regions where the function is not defined.; ##; ## We demonstrate improved recovery from disallowed parameters. For this, we use a polynomial PDF of the form; ## \f[; ## \mathrm{Pol2} = \mathcal{N} \left( c + a_1 \cdot x + a_2 \cdot x^2 + 0.01 \cdot x^3 \right),; ## \f]; ## where \f$ \mathcal{N} \f$ is a normalisation factor. Unless the parameters are chosen carefully,; ## this function can be negative, and hence, it cannot be used as a PDF. In this case, RooFit passes; ## an error to the minimiser, which might try to recover.; ##; ## \macro_code; ## \macro_output; ##; ## \date June 2021; ## \author Harshal Shende, Stephan Hageboeck (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf612_recoverFromInvalidParameters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py:579,Availability,error,error,579,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Likelihood and minimization: Recover from regions where the function is not defined.; ##; ## We demonstrate improved recovery from disallowed parameters. For this, we use a polynomial PDF of the form; ## \f[; ## \mathrm{Pol2} = \mathcal{N} \left( c + a_1 \cdot x + a_2 \cdot x^2 + 0.01 \cdot x^3 \right),; ## \f]; ## where \f$ \mathcal{N} \f$ is a normalisation factor. Unless the parameters are chosen carefully,; ## this function can be negative, and hence, it cannot be used as a PDF. In this case, RooFit passes; ## an error to the minimiser, which might try to recover.; ##; ## \macro_code; ## \macro_output; ##; ## \date June 2021; ## \author Harshal Shende, Stephan Hageboeck (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf612_recoverFromInvalidParameters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py:622,Availability,recover,recover,622,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Likelihood and minimization: Recover from regions where the function is not defined.; ##; ## We demonstrate improved recovery from disallowed parameters. For this, we use a polynomial PDF of the form; ## \f[; ## \mathrm{Pol2} = \mathcal{N} \left( c + a_1 \cdot x + a_2 \cdot x^2 + 0.01 \cdot x^3 \right),; ## \f]; ## where \f$ \mathcal{N} \f$ is a normalisation factor. Unless the parameters are chosen carefully,; ## this function can be negative, and hence, it cannot be used as a PDF. In this case, RooFit passes; ## an error to the minimiser, which might try to recover.; ##; ## \macro_code; ## \macro_output; ##; ## \date June 2021; ## \author Harshal Shende, Stephan Hageboeck (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf612_recoverFromInvalidParameters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py:173,Safety,recover,recovery,173,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Likelihood and minimization: Recover from regions where the function is not defined.; ##; ## We demonstrate improved recovery from disallowed parameters. For this, we use a polynomial PDF of the form; ## \f[; ## \mathrm{Pol2} = \mathcal{N} \left( c + a_1 \cdot x + a_2 \cdot x^2 + 0.01 \cdot x^3 \right),; ## \f]; ## where \f$ \mathcal{N} \f$ is a normalisation factor. Unless the parameters are chosen carefully,; ## this function can be negative, and hence, it cannot be used as a PDF. In this case, RooFit passes; ## an error to the minimiser, which might try to recover.; ##; ## \macro_code; ## \macro_output; ##; ## \date June 2021; ## \author Harshal Shende, Stephan Hageboeck (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf612_recoverFromInvalidParameters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py:622,Safety,recover,recover,622,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Likelihood and minimization: Recover from regions where the function is not defined.; ##; ## We demonstrate improved recovery from disallowed parameters. For this, we use a polynomial PDF of the form; ## \f[; ## \mathrm{Pol2} = \mathcal{N} \left( c + a_1 \cdot x + a_2 \cdot x^2 + 0.01 \cdot x^3 \right),; ## \f]; ## where \f$ \mathcal{N} \f$ is a normalisation factor. Unless the parameters are chosen carefully,; ## this function can be negative, and hence, it cannot be used as a PDF. In this case, RooFit passes; ## an error to the minimiser, which might try to recover.; ##; ## \macro_code; ## \macro_output; ##; ## \date June 2021; ## \author Harshal Shende, Stephan Hageboeck (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf612_recoverFromInvalidParameters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py:80,Availability,error,error,80,"# Plotting a PDF with disallowed parameters doesn't work. We would get a lot of error messages.; # Therefore, we disable plotting messages in RooFit's message streams:",MatchSource.CODE_COMMENT,tutorials/roofit/rf612_recoverFromInvalidParameters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py:86,Integrability,message,messages,86,"# Plotting a PDF with disallowed parameters doesn't work. We would get a lot of error messages.; # Therefore, we disable plotting messages in RooFit's message streams:",MatchSource.CODE_COMMENT,tutorials/roofit/rf612_recoverFromInvalidParameters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py:130,Integrability,message,messages,130,"# Plotting a PDF with disallowed parameters doesn't work. We would get a lot of error messages.; # Therefore, we disable plotting messages in RooFit's message streams:",MatchSource.CODE_COMMENT,tutorials/roofit/rf612_recoverFromInvalidParameters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py:151,Integrability,message,message,151,"# Plotting a PDF with disallowed parameters doesn't work. We would get a lot of error messages.; # Therefore, we disable plotting messages in RooFit's message streams:",MatchSource.CODE_COMMENT,tutorials/roofit/rf612_recoverFromInvalidParameters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py:100,Availability,recover,recover,100,"# RooFit before ROOT 6.24; # --------------------------------; # Before 6.24, RooFit wasn't able to recover from invalid parameters. The minimiser just errs around; # the starting values of the parameters without finding any improvement.; # Set up the parameters such that the PDF would come out negative. The PDF is now undefined.",MatchSource.CODE_COMMENT,tutorials/roofit/rf612_recoverFromInvalidParameters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py:100,Safety,recover,recover,100,"# RooFit before ROOT 6.24; # --------------------------------; # Before 6.24, RooFit wasn't able to recover from invalid parameters. The minimiser just errs around; # the starting values of the parameters without finding any improvement.; # Set up the parameters such that the PDF would come out negative. The PDF is now undefined.",MatchSource.CODE_COMMENT,tutorials/roofit/rf612_recoverFromInvalidParameters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py:39,Availability,error,errors,39,"# We are expecting a lot of evaluation errors. -1 switches off printing.",MatchSource.CODE_COMMENT,tutorials/roofit/rf612_recoverFromInvalidParameters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py:22,Availability,recover,recovery,22,"# Fit again, but pass recovery information to the minimiser:",MatchSource.CODE_COMMENT,tutorials/roofit/rf612_recoverFromInvalidParameters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py:22,Safety,recover,recovery,22,"# Fit again, but pass recovery information to the minimiser:",MatchSource.CODE_COMMENT,tutorials/roofit/rf612_recoverFromInvalidParameters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py:23,Availability,recover,recovery,23,"# The magnitude of the recovery information can be chosen here.; # Higher values mean more aggressive recovery.",MatchSource.CODE_COMMENT,tutorials/roofit/rf612_recoverFromInvalidParameters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py:102,Availability,recover,recovery,102,"# The magnitude of the recovery information can be chosen here.; # Higher values mean more aggressive recovery.",MatchSource.CODE_COMMENT,tutorials/roofit/rf612_recoverFromInvalidParameters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py:23,Safety,recover,recovery,23,"# The magnitude of the recovery information can be chosen here.; # Higher values mean more aggressive recovery.",MatchSource.CODE_COMMENT,tutorials/roofit/rf612_recoverFromInvalidParameters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py:102,Safety,recover,recovery,102,"# The magnitude of the recovery information can be chosen here.; # Higher values mean more aggressive recovery.",MatchSource.CODE_COMMENT,tutorials/roofit/rf612_recoverFromInvalidParameters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py:42,Availability,error,errors,42,"# We are still expecting a few evaluation errors.",MatchSource.CODE_COMMENT,tutorials/roofit/rf612_recoverFromInvalidParameters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py:157,Availability,recover,recovery,157,"# Collect results and plot.; # --------------------------------; # We print the two fit results, and plot the fitted curves.; # The curve of the fit without recovery cannot be plotted, because the PDF is undefined if a2 < 0.",MatchSource.CODE_COMMENT,tutorials/roofit/rf612_recoverFromInvalidParameters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py:157,Safety,recover,recovery,157,"# Collect results and plot.; # --------------------------------; # We print the two fit results, and plot the fitted curves.; # The curve of the fit without recovery cannot be plotted, because the PDF is undefined if a2 < 0.",MatchSource.CODE_COMMENT,tutorials/roofit/rf612_recoverFromInvalidParameters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf612_recoverFromInvalidParameters.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf613_global_observables.py:832,Integrability,depend,depend,832,"## \file; ## \ingroup tutorial_roofit; ## \notebook -js; ## This tutorial explains the concept of global observables in RooFit, and; ## showcases how their values can be stored either in the model or in the; ## dataset.; ##; ## ### Introduction; ##; ## Note: in this tutorial, we are multiplying the likelihood with an additional; ## likelihood to constrain the parameters with auxiliary measurements. This is; ## different from the `rf604_constraints` tutorial, where the likelihood is; ## multiplied with a Bayesian prior to constrain the parameters.; ##; ##; ## With RooFit, you usually optimize some model parameters `p` to maximize the; ## likelihood `L` given the per-event or per-bin observations `x`:; ##; ## \f[ L( x | p ) \f]; ##; ## Often, the parameters are constrained with some prior likelihood `C`, which; ## doesn't depend on the observables `x`:; ##; ## \f[ L'( x | p ) = L( x | p ) * C( p ) \f]; ##; ## Usually, these constraint terms depend on some auxiliary measurements of; ## other observables `g`. The constraint term is then the likelihood of the; ## so-called global observables:; ##; ## \f[ L'( x | p ) = L( x | p ) * C( g | p ) \f]; ##; ## For example, think of a model where the true luminosity `lumi` is a; ## nuisance parameter that is constrained by an auxiliary measurement; ## `lumi_obs` with uncertainty `lumi_obs_sigma`:; ##; ## \f[ L'(data | mu, lumi) = L(data | mu, lumi) * \text{Gauss}(lumi_obs | lumi, lumi_obs_sigma) \f]; ##; ## As a Gaussian is symmetric under exchange of the observable and the mean; ## parameter, you can also sometimes find this equivalent but less conventional; ## formulation for Gaussian constraints:; ##; ## \f[ L'(data | mu, lumi) = L(data | mu, lumi) * \text{Gauss}(lumi | lumi_obs, lumi_obs_sigma) \f]; ##; ## If you wanted to constrain a parameter that represents event counts, you; ## would use a Poissonian constraint, e.g.:; ##; ## \f[ L'(data | mu, count) = L(data | mu, count) * \text{Poisson}(count_obs | count) \f]; ##; ## Un",MatchSource.CODE_COMMENT,tutorials/roofit/rf613_global_observables.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf613_global_observables.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf613_global_observables.py:953,Integrability,depend,depend,953,"## \file; ## \ingroup tutorial_roofit; ## \notebook -js; ## This tutorial explains the concept of global observables in RooFit, and; ## showcases how their values can be stored either in the model or in the; ## dataset.; ##; ## ### Introduction; ##; ## Note: in this tutorial, we are multiplying the likelihood with an additional; ## likelihood to constrain the parameters with auxiliary measurements. This is; ## different from the `rf604_constraints` tutorial, where the likelihood is; ## multiplied with a Bayesian prior to constrain the parameters.; ##; ##; ## With RooFit, you usually optimize some model parameters `p` to maximize the; ## likelihood `L` given the per-event or per-bin observations `x`:; ##; ## \f[ L( x | p ) \f]; ##; ## Often, the parameters are constrained with some prior likelihood `C`, which; ## doesn't depend on the observables `x`:; ##; ## \f[ L'( x | p ) = L( x | p ) * C( p ) \f]; ##; ## Usually, these constraint terms depend on some auxiliary measurements of; ## other observables `g`. The constraint term is then the likelihood of the; ## so-called global observables:; ##; ## \f[ L'( x | p ) = L( x | p ) * C( g | p ) \f]; ##; ## For example, think of a model where the true luminosity `lumi` is a; ## nuisance parameter that is constrained by an auxiliary measurement; ## `lumi_obs` with uncertainty `lumi_obs_sigma`:; ##; ## \f[ L'(data | mu, lumi) = L(data | mu, lumi) * \text{Gauss}(lumi_obs | lumi, lumi_obs_sigma) \f]; ##; ## As a Gaussian is symmetric under exchange of the observable and the mean; ## parameter, you can also sometimes find this equivalent but less conventional; ## formulation for Gaussian constraints:; ##; ## \f[ L'(data | mu, lumi) = L(data | mu, lumi) * \text{Gauss}(lumi | lumi_obs, lumi_obs_sigma) \f]; ##; ## If you wanted to constrain a parameter that represents event counts, you; ## would use a Poissonian constraint, e.g.:; ##; ## \f[ L'(data | mu, count) = L(data | mu, count) * \text{Poisson}(count_obs | count) \f]; ##; ## Un",MatchSource.CODE_COMMENT,tutorials/roofit/rf613_global_observables.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf613_global_observables.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf613_global_observables.py:590,Performance,optimiz,optimize,590,"## \file; ## \ingroup tutorial_roofit; ## \notebook -js; ## This tutorial explains the concept of global observables in RooFit, and; ## showcases how their values can be stored either in the model or in the; ## dataset.; ##; ## ### Introduction; ##; ## Note: in this tutorial, we are multiplying the likelihood with an additional; ## likelihood to constrain the parameters with auxiliary measurements. This is; ## different from the `rf604_constraints` tutorial, where the likelihood is; ## multiplied with a Bayesian prior to constrain the parameters.; ##; ##; ## With RooFit, you usually optimize some model parameters `p` to maximize the; ## likelihood `L` given the per-event or per-bin observations `x`:; ##; ## \f[ L( x | p ) \f]; ##; ## Often, the parameters are constrained with some prior likelihood `C`, which; ## doesn't depend on the observables `x`:; ##; ## \f[ L'( x | p ) = L( x | p ) * C( p ) \f]; ##; ## Usually, these constraint terms depend on some auxiliary measurements of; ## other observables `g`. The constraint term is then the likelihood of the; ## so-called global observables:; ##; ## \f[ L'( x | p ) = L( x | p ) * C( g | p ) \f]; ##; ## For example, think of a model where the true luminosity `lumi` is a; ## nuisance parameter that is constrained by an auxiliary measurement; ## `lumi_obs` with uncertainty `lumi_obs_sigma`:; ##; ## \f[ L'(data | mu, lumi) = L(data | mu, lumi) * \text{Gauss}(lumi_obs | lumi, lumi_obs_sigma) \f]; ##; ## As a Gaussian is symmetric under exchange of the observable and the mean; ## parameter, you can also sometimes find this equivalent but less conventional; ## formulation for Gaussian constraints:; ##; ## \f[ L'(data | mu, lumi) = L(data | mu, lumi) * \text{Gauss}(lumi | lumi_obs, lumi_obs_sigma) \f]; ##; ## If you wanted to constrain a parameter that represents event counts, you; ## would use a Poissonian constraint, e.g.:; ##; ## \f[ L'(data | mu, count) = L(data | mu, count) * \text{Poisson}(count_obs | count) \f]; ##; ## Un",MatchSource.CODE_COMMENT,tutorials/roofit/rf613_global_observables.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf613_global_observables.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:429,Deployability,integrat,integrating,429,"## \file; ## \ingroup tutorial_roofit; ## \notebook -js; ## A tutorial that explains you how to solve problems with binning effects and; ## numerical stability in binned fits.; ##; ## ### Introduction; ##; ## In this tutorial, you will learn three new things:; ##; ## 1. How to reduce the bias in binned fits by changing the definition of the; ## normalization integral; ##; ## 2. How to completely get rid of binning effects by integrating the pdf over each bin; ##; ## 3. How to improve the numeric stability of fits with a greatly different; ## number of events per bin, using a constant per-bin counterterm; ##; ## \macro_code; ## \macro_output; ##; ## \date January 2023; ## \author Jonas Rembser",MatchSource.CODE_COMMENT,tutorials/roofit/rf614_binned_fit_problems.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:278,Energy Efficiency,reduce,reduce,278,"## \file; ## \ingroup tutorial_roofit; ## \notebook -js; ## A tutorial that explains you how to solve problems with binning effects and; ## numerical stability in binned fits.; ##; ## ### Introduction; ##; ## In this tutorial, you will learn three new things:; ##; ## 1. How to reduce the bias in binned fits by changing the definition of the; ## normalization integral; ##; ## 2. How to completely get rid of binning effects by integrating the pdf over each bin; ##; ## 3. How to improve the numeric stability of fits with a greatly different; ## number of events per bin, using a constant per-bin counterterm; ##; ## \macro_code; ## \macro_output; ##; ## \date January 2023; ## \author Jonas Rembser",MatchSource.CODE_COMMENT,tutorials/roofit/rf614_binned_fit_problems.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:429,Integrability,integrat,integrating,429,"## \file; ## \ingroup tutorial_roofit; ## \notebook -js; ## A tutorial that explains you how to solve problems with binning effects and; ## numerical stability in binned fits.; ##; ## ### Introduction; ##; ## In this tutorial, you will learn three new things:; ##; ## 1. How to reduce the bias in binned fits by changing the definition of the; ## normalization integral; ##; ## 2. How to completely get rid of binning effects by integrating the pdf over each bin; ##; ## 3. How to improve the numeric stability of fits with a greatly different; ## number of events per bin, using a constant per-bin counterterm; ##; ## \macro_code; ## \macro_output; ##; ## \date January 2023; ## \author Jonas Rembser",MatchSource.CODE_COMMENT,tutorials/roofit/rf614_binned_fit_problems.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:236,Usability,learn,learn,236,"## \file; ## \ingroup tutorial_roofit; ## \notebook -js; ## A tutorial that explains you how to solve problems with binning effects and; ## numerical stability in binned fits.; ##; ## ### Introduction; ##; ## In this tutorial, you will learn three new things:; ##; ## 1. How to reduce the bias in binned fits by changing the definition of the; ## normalization integral; ##; ## 2. How to completely get rid of binning effects by integrating the pdf over each bin; ##; ## 3. How to improve the numeric stability of fits with a greatly different; ## number of events per bin, using a constant per-bin counterterm; ##; ## \macro_code; ## \macro_output; ##; ## \date January 2023; ## \author Jonas Rembser",MatchSource.CODE_COMMENT,tutorials/roofit/rf614_binned_fit_problems.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:42,Deployability,continuous,continuous,42,"""""""; Generate binned Asimov dataset for a continuous pdf.; One should in principle be able to use; pdf.generateBinned(x, n_events, RooFit::ExpectedData()).; Unfortunately it has a problem: it also has the bin bias that this tutorial; demonstrates, to if we would use it, the biases would cancel out.; """"""",MatchSource.CODE_COMMENT,tutorials/roofit/rf614_binned_fit_problems.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:19,Deployability,integrat,integration,19,"""""""; Force numeric integration and do this numeric integration with the; RooBinIntegrator, which sums the function values at the bin centers.; """"""",MatchSource.CODE_COMMENT,tutorials/roofit/rf614_binned_fit_problems.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:51,Deployability,integrat,integration,51,"""""""; Force numeric integration and do this numeric integration with the; RooBinIntegrator, which sums the function values at the bin centers.; """"""",MatchSource.CODE_COMMENT,tutorials/roofit/rf614_binned_fit_problems.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:19,Integrability,integrat,integration,19,"""""""; Force numeric integration and do this numeric integration with the; RooBinIntegrator, which sums the function values at the bin centers.; """"""",MatchSource.CODE_COMMENT,tutorials/roofit/rf614_binned_fit_problems.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:51,Integrability,integrat,integration,51,"""""""; Force numeric integration and do this numeric integration with the; RooBinIntegrator, which sums the function values at the bin centers.; """"""",MatchSource.CODE_COMMENT,tutorials/roofit/rf614_binned_fit_problems.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:15,Deployability,integrat,integrator,15,"""""""; Reset the integrator config to disable the RooBinIntegrator.; """"""",MatchSource.CODE_COMMENT,tutorials/roofit/rf614_binned_fit_problems.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:15,Integrability,integrat,integrator,15,"""""""; Reset the integrator config to disable the RooBinIntegrator.; """"""",MatchSource.CODE_COMMENT,tutorials/roofit/rf614_binned_fit_problems.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:26,Modifiability,config,config,26,"""""""; Reset the integrator config to disable the RooBinIntegrator.; """"""",MatchSource.CODE_COMMENT,tutorials/roofit/rf614_binned_fit_problems.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:103,Deployability,continuous,continuous,103,"# If you do the fit the usual was in RooFit, you will get a bias in the; # result. This is because the continuous, normalized pdf is evaluated only; # at the bin centers.",MatchSource.CODE_COMMENT,tutorials/roofit/rf614_binned_fit_problems.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:446,Deployability,integrat,integrated,446,"# In the case of an exponential function, the bias that you get by; # evaluating the pdf only at the bin centers is a constant scale factor in; # each bin. Here, we can do a trick to get rid of the bias: we also; # evaluate the normalization integral for the pdf the same way, i.e.,; # summing the values of the unnormalized pdf at the bin centers. Like this; # the bias cancels out. You can achieve this by customizing the way how the; # pdf is integrated (see also the rf901_numintconfig tutorial).",MatchSource.CODE_COMMENT,tutorials/roofit/rf614_binned_fit_problems.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:446,Integrability,integrat,integrated,446,"# In the case of an exponential function, the bias that you get by; # evaluating the pdf only at the bin centers is a constant scale factor in; # each bin. Here, we can do a trick to get rid of the bias: we also; # evaluate the normalization integral for the pdf the same way, i.e.,; # summing the values of the unnormalized pdf at the bin centers. Like this; # the bias cancels out. You can achieve this by customizing the way how the; # pdf is integrated (see also the rf901_numintconfig tutorial).",MatchSource.CODE_COMMENT,tutorials/roofit/rf614_binned_fit_problems.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:81,Energy Efficiency,power,power,81,"# Power law example; # -----------------; # Let's not look at another example: a power law \f[x^a\f].",MatchSource.CODE_COMMENT,tutorials/roofit/rf614_binned_fit_problems.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:332,Deployability,integrat,integrating,332,"# This time, the bias is not the same factor in each bin! This means our; # trick by sampling the integral in the same way doesn't cancel out the; # bias completely. The average bias is canceled, but there are per-bin; # biases that remain. Still, this method has some value: it is cheaper than; # rigurously correcting the bias by integrating the pdf in each bin. So if; # you know your per-bin bias variations are small or performance is an; # issue, this approach can be sufficient.",MatchSource.CODE_COMMENT,tutorials/roofit/rf614_binned_fit_problems.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:332,Integrability,integrat,integrating,332,"# This time, the bias is not the same factor in each bin! This means our; # trick by sampling the integral in the same way doesn't cancel out the; # bias completely. The average bias is canceled, but there are per-bin; # biases that remain. Still, this method has some value: it is cheaper than; # rigurously correcting the bias by integrating the pdf in each bin. So if; # you know your per-bin bias variations are small or performance is an; # issue, this approach can be sufficient.",MatchSource.CODE_COMMENT,tutorials/roofit/rf614_binned_fit_problems.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:425,Performance,perform,performance,425,"# This time, the bias is not the same factor in each bin! This means our; # trick by sampling the integral in the same way doesn't cancel out the; # bias completely. The average bias is canceled, but there are per-bin; # biases that remain. Still, this method has some value: it is cheaper than; # rigurously correcting the bias by integrating the pdf in each bin. So if; # you know your per-bin bias variations are small or performance is an; # issue, this approach can be sufficient.",MatchSource.CODE_COMMENT,tutorials/roofit/rf614_binned_fit_problems.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:179,Deployability,integrat,integrated,179,"# To get rid of the binning effects in the general case, one can use the; # IntegrateBins() command argument. Now, the pdf is not evaluated at the; # bin centers, but numerically integrated over each bin and divided by the; # bin width. The parameter for IntegrateBins() is the required precision; # for the numeric integrals. This is computationally expensive, but the; # bias is now not a problem anymore.",MatchSource.CODE_COMMENT,tutorials/roofit/rf614_binned_fit_problems.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:179,Integrability,integrat,integrated,179,"# To get rid of the binning effects in the general case, one can use the; # IntegrateBins() command argument. Now, the pdf is not evaluated at the; # bin centers, but numerically integrated over each bin and divided by the; # bin width. The parameter for IntegrateBins() is the required precision; # for the numeric integrals. This is computationally expensive, but the; # bias is now not a problem anymore.",MatchSource.CODE_COMMENT,tutorials/roofit/rf614_binned_fit_problems.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:452,Safety,predict,predicted,452,"# Improving numerical stability; # -----------------------------; # There is one more problem with binned fits that is related to the binning; # effects because often, a binned fit is affected by both problems.; #; # The issue is numerical stability for fits with a greatly different number; # of events in each bin. For each bin, you have a term \f[n\log(p)\f] in; # the NLL, where \f[n\f] is the number of observations in the bin, and; # \f[p\f] the predicted probability to have an event in that bin. The; # difference in the logarithms for each bin is small, but the difference in; # \f[n\f] can be orders of magnitudes! Therefore, when summing these terms,; # lots of numerical precision is lost for the bins with less events.; # We can study this with the example of an exponential plus a Gaussian. The; # Gaussian is only a faint signal in the tail of the exponential where; # there are not so many events. And we can't afford any precision loss for; # these bins, otherwise we can't fit the Gaussian.",MatchSource.CODE_COMMENT,tutorials/roofit/rf614_binned_fit_problems.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:352,Testability,log,log,352,"# Improving numerical stability; # -----------------------------; # There is one more problem with binned fits that is related to the binning; # effects because often, a binned fit is affected by both problems.; #; # The issue is numerical stability for fits with a greatly different number; # of events in each bin. For each bin, you have a term \f[n\log(p)\f] in; # the NLL, where \f[n\f] is the number of observations in the bin, and; # \f[p\f] the predicted probability to have an event in that bin. The; # difference in the logarithms for each bin is small, but the difference in; # \f[n\f] can be orders of magnitudes! Therefore, when summing these terms,; # lots of numerical precision is lost for the bins with less events.; # We can study this with the example of an exponential plus a Gaussian. The; # Gaussian is only a faint signal in the tail of the exponential where; # there are not so many events. And we can't afford any precision loss for; # these bins, otherwise we can't fit the Gaussian.",MatchSource.CODE_COMMENT,tutorials/roofit/rf614_binned_fit_problems.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:529,Testability,log,logarithms,529,"# Improving numerical stability; # -----------------------------; # There is one more problem with binned fits that is related to the binning; # effects because often, a binned fit is affected by both problems.; #; # The issue is numerical stability for fits with a greatly different number; # of events in each bin. For each bin, you have a term \f[n\log(p)\f] in; # the NLL, where \f[n\f] is the number of observations in the bin, and; # \f[p\f] the predicted probability to have an event in that bin. The; # difference in the logarithms for each bin is small, but the difference in; # \f[n\f] can be orders of magnitudes! Therefore, when summing these terms,; # lots of numerical precision is lost for the bins with less events.; # We can study this with the example of an exponential plus a Gaussian. The; # Gaussian is only a faint signal in the tail of the exponential where; # there are not so many events. And we can't afford any precision loss for; # these bins, otherwise we can't fit the Gaussian.",MatchSource.CODE_COMMENT,tutorials/roofit/rf614_binned_fit_problems.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:276,Testability,log,log,276,"# You should see in the previous fit result that the fit did not converge:; # the `MINIMIZE` return code should be -1 (a successful fit has status code zero).; # To improve the situation, we can apply a numeric trick: if we subtract in; # each bin a constant counterterm \f[n\log(n/N)\f], we get terms for each; # bin that are closer to each other in order of magnitude as long as the; # initial model is not extremely off. Proving this mathematically is left; # as an exercise to the reader.; # This counterterms can be enabled by passing the Offset(""bin"") option to; # RooAbsPdf::fitTo() or RooAbsPdf::createNLL().",MatchSource.CODE_COMMENT,tutorials/roofit/rf614_binned_fit_problems.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py:1348,Testability,log,logarithmic,1348,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Use Simulation Based Inference (SBI) in RooFit.; ##; ## This tutorial shows how to use SBI in ROOT. As reference distribution we; ## choose a simple uniform distribution. The target distribution is chosen to; ## be gaussian with different mean values.; ## The classifier is trained to discriminate between the reference and target; ## distribution.; ## We see how the neural networks generalize to unknown mean values.; ##; ## We compare the approach of using the likelihood ratio trick to morphing.; ##; ## An introduction of SBI can be found in https://arxiv.org/pdf/2010.06439.; ##; ## A short recap:; ## The idea of SBI is to fit a surrogate model to the data, in order to really; ## learn the likelihood function instead of calculating it. Therefore, a classifier is trained to discriminate between; ## samples from a target distribution (here the Gaussian) $$x\sim p(x|\theta)$$ and a reference distribution (here the Uniform); ## $$x\sim p_{ref}(x|\theta)$$.; ##; ## The output of the classifier $$\hat{s}(\theta)$$ is a monotonic function of the likelihood ration and can be turned into an estimate of the likelihood ratio; ## via $$\hat{r}(\theta)=\frac{1-\hat{s}(\theta)}{\hat{s}(\theta)}.$$; ## This is called the likelihood ratio trick.; ##; ## In the end we compare the negative logarithmic likelihoods of the learned, morphed and analytical likelihood with minuit and as a plot.; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date July 2024; ## \author Robin Syring",MatchSource.CODE_COMMENT,tutorials/roofit/rf615_simulation_based_inference.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py:198,Usability,simpl,simple,198,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Use Simulation Based Inference (SBI) in RooFit.; ##; ## This tutorial shows how to use SBI in ROOT. As reference distribution we; ## choose a simple uniform distribution. The target distribution is chosen to; ## be gaussian with different mean values.; ## The classifier is trained to discriminate between the reference and target; ## distribution.; ## We see how the neural networks generalize to unknown mean values.; ##; ## We compare the approach of using the likelihood ratio trick to morphing.; ##; ## An introduction of SBI can be found in https://arxiv.org/pdf/2010.06439.; ##; ## A short recap:; ## The idea of SBI is to fit a surrogate model to the data, in order to really; ## learn the likelihood function instead of calculating it. Therefore, a classifier is trained to discriminate between; ## samples from a target distribution (here the Gaussian) $$x\sim p(x|\theta)$$ and a reference distribution (here the Uniform); ## $$x\sim p_{ref}(x|\theta)$$.; ##; ## The output of the classifier $$\hat{s}(\theta)$$ is a monotonic function of the likelihood ration and can be turned into an estimate of the likelihood ratio; ## via $$\hat{r}(\theta)=\frac{1-\hat{s}(\theta)}{\hat{s}(\theta)}.$$; ## This is called the likelihood ratio trick.; ##; ## In the end we compare the negative logarithmic likelihoods of the learned, morphed and analytical likelihood with minuit and as a plot.; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date July 2024; ## \author Robin Syring",MatchSource.CODE_COMMENT,tutorials/roofit/rf615_simulation_based_inference.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py:744,Usability,learn,learn,744,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Use Simulation Based Inference (SBI) in RooFit.; ##; ## This tutorial shows how to use SBI in ROOT. As reference distribution we; ## choose a simple uniform distribution. The target distribution is chosen to; ## be gaussian with different mean values.; ## The classifier is trained to discriminate between the reference and target; ## distribution.; ## We see how the neural networks generalize to unknown mean values.; ##; ## We compare the approach of using the likelihood ratio trick to morphing.; ##; ## An introduction of SBI can be found in https://arxiv.org/pdf/2010.06439.; ##; ## A short recap:; ## The idea of SBI is to fit a surrogate model to the data, in order to really; ## learn the likelihood function instead of calculating it. Therefore, a classifier is trained to discriminate between; ## samples from a target distribution (here the Gaussian) $$x\sim p(x|\theta)$$ and a reference distribution (here the Uniform); ## $$x\sim p_{ref}(x|\theta)$$.; ##; ## The output of the classifier $$\hat{s}(\theta)$$ is a monotonic function of the likelihood ration and can be turned into an estimate of the likelihood ratio; ## via $$\hat{r}(\theta)=\frac{1-\hat{s}(\theta)}{\hat{s}(\theta)}.$$; ## This is called the likelihood ratio trick.; ##; ## In the end we compare the negative logarithmic likelihoods of the learned, morphed and analytical likelihood with minuit and as a plot.; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date July 2024; ## \author Robin Syring",MatchSource.CODE_COMMENT,tutorials/roofit/rf615_simulation_based_inference.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py:1379,Usability,learn,learned,1379,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Use Simulation Based Inference (SBI) in RooFit.; ##; ## This tutorial shows how to use SBI in ROOT. As reference distribution we; ## choose a simple uniform distribution. The target distribution is chosen to; ## be gaussian with different mean values.; ## The classifier is trained to discriminate between the reference and target; ## distribution.; ## We see how the neural networks generalize to unknown mean values.; ##; ## We compare the approach of using the likelihood ratio trick to morphing.; ##; ## An introduction of SBI can be found in https://arxiv.org/pdf/2010.06439.; ##; ## A short recap:; ## The idea of SBI is to fit a surrogate model to the data, in order to really; ## learn the likelihood function instead of calculating it. Therefore, a classifier is trained to discriminate between; ## samples from a target distribution (here the Gaussian) $$x\sim p(x|\theta)$$ and a reference distribution (here the Uniform); ## $$x\sim p_{ref}(x|\theta)$$.; ##; ## The output of the classifier $$\hat{s}(\theta)$$ is a monotonic function of the likelihood ration and can be turned into an estimate of the likelihood ratio; ## via $$\hat{r}(\theta)=\frac{1-\hat{s}(\theta)}{\hat{s}(\theta)}.$$; ## This is called the likelihood ratio trick.; ##; ## In the end we compare the negative logarithmic likelihoods of the learned, morphed and analytical likelihood with minuit and as a plot.; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date July 2024; ## \author Robin Syring",MatchSource.CODE_COMMENT,tutorials/roofit/rf615_simulation_based_inference.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py:16,Integrability,message,messages,16,"# Kills warning messages",MatchSource.CODE_COMMENT,tutorials/roofit/rf615_simulation_based_inference.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py:14,Usability,learn,learned,14,"# Compute the learned likelihood ratio",MatchSource.CODE_COMMENT,tutorials/roofit/rf615_simulation_based_inference.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py:28,Testability,log,log,28,"# Create the exact negative log likelihood functions for Gaussian model",MatchSource.CODE_COMMENT,tutorials/roofit/rf615_simulation_based_inference.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py:13,Usability,learn,learned,13,"# Create the learned pdf and NLL sum based on the learned likelihood ratio",MatchSource.CODE_COMMENT,tutorials/roofit/rf615_simulation_based_inference.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py:50,Usability,learn,learned,50,"# Create the learned pdf and NLL sum based on the learned likelihood ratio",MatchSource.CODE_COMMENT,tutorials/roofit/rf615_simulation_based_inference.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py:20,Testability,log,logarithmic,20,"# Plot the negative logarithmic summed likelihood",MatchSource.CODE_COMMENT,tutorials/roofit/rf615_simulation_based_inference.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py:13,Availability,error,error,13,"# Adjust the error level in the minimization to work with likelihoods",MatchSource.CODE_COMMENT,tutorials/roofit/rf615_simulation_based_inference.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf616_morphing.py:378,Testability,log,log,378,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Use Morphing in RooFit.; ##; ## This tutorial shows how to use template morphing inside RooFit. As input we have several; ## Gaussian distributions. The output is one gaussian, with a specific mean value.; ## Since likelihoods are often used within the framework of morphing, we provide a; ## way to estimate the negative log likelihood (nll).; ##; ## Based on example of Kyle Cranmer https://gist.github.com/cranmer/46fff8d22015e5a26619.; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date August 2024; ## \author Robin Syring",MatchSource.CODE_COMMENT,tutorials/roofit/rf616_morphing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf616_morphing.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf616_morphing.py:16,Integrability,message,messages,16,"# Kills warning messages",MatchSource.CODE_COMMENT,tutorials/roofit/rf616_morphing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf616_morphing.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf616_morphing.py:77,Integrability,message,messages,77,"# Normalizes the morphed object to be a pdf, set it false to prevent warning messages and gain computational speed up",MatchSource.CODE_COMMENT,tutorials/roofit/rf616_morphing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf616_morphing.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf616_morphing.py:28,Testability,log,log,28,"# Create the exact negative log likelihood functions for Gaussian model",MatchSource.CODE_COMMENT,tutorials/roofit/rf616_morphing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf616_morphing.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf616_morphing.py:20,Testability,log,logarithmic,20,"# Plot the negative logarithmic summed likelihood",MatchSource.CODE_COMMENT,tutorials/roofit/rf616_morphing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf616_morphing.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py:873,Testability,log,log,873,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Use Simulation Based Inference (SBI) in multiple dimensions in RooFit.; ##; ## This tutorial shows how to use SBI in higher dimension in ROOT.; ## This tutorial transfers the simple concepts of the 1D case introduced in; ## rf615_simulation_based_inference.py onto the higher dimensional case.; ##; ## Again as reference distribution we; ## choose a simple uniform distribution. The target distribution is chosen to; ## be Gaussian with different mean values.; ## The classifier is trained to discriminate between the reference and target; ## distribution.; ## We see how the neural networks generalize to unknown mean values.; ##; ## Furthermore, we compare SBI to the approach of moment morphing. In this case,; ## we can conclude, that SBI is way more sample eficcient when it comes to; ## estimating the negative log likelihood ratio.; ##; ## For an introductory background see rf615_simulation_based_inference.py; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date July 2024; ## \author Robin Syring",MatchSource.CODE_COMMENT,tutorials/roofit/rf617_simulation_based_inference_multidimensional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py:231,Usability,simpl,simple,231,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Use Simulation Based Inference (SBI) in multiple dimensions in RooFit.; ##; ## This tutorial shows how to use SBI in higher dimension in ROOT.; ## This tutorial transfers the simple concepts of the 1D case introduced in; ## rf615_simulation_based_inference.py onto the higher dimensional case.; ##; ## Again as reference distribution we; ## choose a simple uniform distribution. The target distribution is chosen to; ## be Gaussian with different mean values.; ## The classifier is trained to discriminate between the reference and target; ## distribution.; ## We see how the neural networks generalize to unknown mean values.; ##; ## Furthermore, we compare SBI to the approach of moment morphing. In this case,; ## we can conclude, that SBI is way more sample eficcient when it comes to; ## estimating the negative log likelihood ratio.; ##; ## For an introductory background see rf615_simulation_based_inference.py; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date July 2024; ## \author Robin Syring",MatchSource.CODE_COMMENT,tutorials/roofit/rf617_simulation_based_inference_multidimensional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py:406,Usability,simpl,simple,406,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Use Simulation Based Inference (SBI) in multiple dimensions in RooFit.; ##; ## This tutorial shows how to use SBI in higher dimension in ROOT.; ## This tutorial transfers the simple concepts of the 1D case introduced in; ## rf615_simulation_based_inference.py onto the higher dimensional case.; ##; ## Again as reference distribution we; ## choose a simple uniform distribution. The target distribution is chosen to; ## be Gaussian with different mean values.; ## The classifier is trained to discriminate between the reference and target; ## distribution.; ## We see how the neural networks generalize to unknown mean values.; ##; ## Furthermore, we compare SBI to the approach of moment morphing. In this case,; ## we can conclude, that SBI is way more sample eficcient when it comes to; ## estimating the negative log likelihood ratio.; ##; ## For an introductory background see rf615_simulation_based_inference.py; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date July 2024; ## \author Robin Syring",MatchSource.CODE_COMMENT,tutorials/roofit/rf617_simulation_based_inference_multidimensional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py:16,Integrability,message,messages,16,"# Kills warning messages",MatchSource.CODE_COMMENT,tutorials/roofit/rf617_simulation_based_inference_multidimensional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py:22,Modifiability,variab,variable,22,"# Set bins for each x variable",MatchSource.CODE_COMMENT,tutorials/roofit/rf617_simulation_based_inference_multidimensional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py:34,Modifiability,variab,variables,34,"# Build the workspace and extract variables",MatchSource.CODE_COMMENT,tutorials/roofit/rf617_simulation_based_inference_multidimensional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py:18,Modifiability,variab,variable,18,"# Create combined variable list for ROOT",MatchSource.CODE_COMMENT,tutorials/roofit/rf617_simulation_based_inference_multidimensional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py:35,Testability,log,logarithmic,35,"# Define the 'analytical' negative logarithmic likelihood ratio",MatchSource.CODE_COMMENT,tutorials/roofit/rf617_simulation_based_inference_multidimensional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py:13,Usability,learn,learned,13,"# Create the learned pdf and NLL sum based on the learned likelihood ratio",MatchSource.CODE_COMMENT,tutorials/roofit/rf617_simulation_based_inference_multidimensional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py:50,Usability,learn,learned,50,"# Create the learned pdf and NLL sum based on the learned likelihood ratio",MatchSource.CODE_COMMENT,tutorials/roofit/rf617_simulation_based_inference_multidimensional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py:11,Usability,learn,learned,11,"# Plot the learned and analytical summed negativelogarithmic likelihood",MatchSource.CODE_COMMENT,tutorials/roofit/rf617_simulation_based_inference_multidimensional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf618_mixture_models.py:1465,Integrability,depend,dependence,1465,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Use of mixture models in RooFit.; ##; ## This tutorial shows, how to use mixture models for Likelihood Calculation in ROOT. Instead of directly; ## calculating the likelihood we use simulation based inference (SBI) as shown in tutorial 'rf615_simulation_based_inference.py'.; ## We train the classifier to discriminate between samples from an background hypothesis here the zz samples and a target; ## hypothesis, here the higgs samples. The data preparation is based on the tutorial 'df106_HiggsToFourLeptons.py'.; ##; ## An introduction to mixture models can be found here https://arxiv.org/pdf/1506.02169.; ##; ## A short summary:; ## We assume the whole probability distribution can be written as a mixture of several components, i.e.; ## $$p(x|\theta)= \sum_{c}w_{c}(\theta)p_{c}(x|\theta)$$; ## We can write the likelihood ratio in terms of pairwise classification problems; ## \begin{align*}; ## \frac{p(x|\mu)}{p(x|0)}&= \frac{\sum_{c}w_{c}(\mu)p_{c}(x|\mu)}{\sum_{c'}w_{c'}(0)p_{c'}(x|0)}\\; ## &=\sum_{c}\Bigg[\sum_{c'}\frac{w_{c'}(0)}{w_{c}(\mu)}\frac{p_{c'}(x|0)}{p_{c}(x|\mu)}\Bigg]^{-1},; ## \end{align*}; ## where mu is the signal strength, and a value of 0 corresponds to the background hypothesis. Using this decomposition, one is able to use the pairwise likelihood ratios.; ##; ## Since the only free parameter in our case is mu, the distributions are independent of this parameter and the dependence on the signal strength can be encoded into the weights.; ## Thus, the subratios simplify dramatically since they are independent of theta and these ratios can be pre-computed and the classifier does; ## not need to be parametrized.; ##; ## If you wish to see an analysis done with template histograms see 'hf001_example.py'.; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date September 2024; ## \author Robin Syring",MatchSource.CODE_COMMENT,tutorials/roofit/rf618_mixture_models.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf618_mixture_models.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf618_mixture_models.py:1556,Usability,simpl,simplify,1556,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Use of mixture models in RooFit.; ##; ## This tutorial shows, how to use mixture models for Likelihood Calculation in ROOT. Instead of directly; ## calculating the likelihood we use simulation based inference (SBI) as shown in tutorial 'rf615_simulation_based_inference.py'.; ## We train the classifier to discriminate between samples from an background hypothesis here the zz samples and a target; ## hypothesis, here the higgs samples. The data preparation is based on the tutorial 'df106_HiggsToFourLeptons.py'.; ##; ## An introduction to mixture models can be found here https://arxiv.org/pdf/1506.02169.; ##; ## A short summary:; ## We assume the whole probability distribution can be written as a mixture of several components, i.e.; ## $$p(x|\theta)= \sum_{c}w_{c}(\theta)p_{c}(x|\theta)$$; ## We can write the likelihood ratio in terms of pairwise classification problems; ## \begin{align*}; ## \frac{p(x|\mu)}{p(x|0)}&= \frac{\sum_{c}w_{c}(\mu)p_{c}(x|\mu)}{\sum_{c'}w_{c'}(0)p_{c'}(x|0)}\\; ## &=\sum_{c}\Bigg[\sum_{c'}\frac{w_{c'}(0)}{w_{c}(\mu)}\frac{p_{c'}(x|0)}{p_{c}(x|\mu)}\Bigg]^{-1},; ## \end{align*}; ## where mu is the signal strength, and a value of 0 corresponds to the background hypothesis. Using this decomposition, one is able to use the pairwise likelihood ratios.; ##; ## Since the only free parameter in our case is mu, the distributions are independent of this parameter and the dependence on the signal strength can be encoded into the weights.; ## Thus, the subratios simplify dramatically since they are independent of theta and these ratios can be pre-computed and the classifier does; ## not need to be parametrized.; ##; ## If you wish to see an analysis done with template histograms see 'hf001_example.py'.; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date September 2024; ## \author Robin Syring",MatchSource.CODE_COMMENT,tutorials/roofit/rf618_mixture_models.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf618_mixture_models.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf618_mixture_models.py:40,Safety,avoid,avoid,40,"# Extract the relevant columns once and avoid repeated calls",MatchSource.CODE_COMMENT,tutorials/roofit/rf618_mixture_models.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf618_mixture_models.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf618_mixture_models.py:34,Usability,learn,learned,34,"# Define functions to compute the learned likelihood.",MatchSource.CODE_COMMENT,tutorials/roofit/rf618_mixture_models.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf618_mixture_models.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf618_mixture_models.py:13,Availability,error,error,13,"# Adjust the error level in the minimization to work with likelihoods",MatchSource.CODE_COMMENT,tutorials/roofit/rf618_mixture_models.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf618_mixture_models.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf701_efficiencyfit.py:119,Modifiability,variab,variables,119,"# Construct efficiency function e(x); # -------------------------------------------------------------------; # Declare variables x,mean, with associated name, title, value and allowed; # range",MatchSource.CODE_COMMENT,tutorials/roofit/rf701_efficiencyfit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf701_efficiencyfit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf702_efficiencyfit_2D.py:125,Modifiability,variab,variables,125,"# Construct efficiency function e(x,y); # -----------------------------------------------------------------------; # Declare variables x,mean, with associated name, title, value and allowed; # range",MatchSource.CODE_COMMENT,tutorials/roofit/rf702_efficiencyfit_2D.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf702_efficiencyfit_2D.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf703_effpdfprod.py:91,Availability,error,error,91,"# Define efficiency function; # ---------------------------------------------------; # Use error function to simulate turn-on slope",MatchSource.CODE_COMMENT,tutorials/roofit/rf703_effpdfprod.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf703_effpdfprod.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf705_linearmorph.py:102,Modifiability,variab,variable,102,"# Create interpolating pdf; # -----------------------------------------------; # Create interpolation variable",MatchSource.CODE_COMMENT,tutorials/roofit/rf705_linearmorph.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf705_linearmorph.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf705_linearmorph.py:59,Modifiability,variab,variable,59,"# Specify sampling density on observable and interpolation variable",MatchSource.CODE_COMMENT,tutorials/roofit/rf705_linearmorph.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf705_linearmorph.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf705_linearmorph.py:8,Testability,log,log,8,"# Scan -log(L) vs alpha; # -----------------------------------------; # Show scan -log(L) of dataset w.r.t alpha",MatchSource.CODE_COMMENT,tutorials/roofit/rf705_linearmorph.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf705_linearmorph.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf705_linearmorph.py:83,Testability,log,log,83,"# Scan -log(L) vs alpha; # -----------------------------------------; # Show scan -log(L) of dataset w.r.t alpha",MatchSource.CODE_COMMENT,tutorials/roofit/rf705_linearmorph.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf705_linearmorph.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf707_kernelestimation.py:151,Deployability,configurat,configuration,151,"# Create 1D kernel estimation pdf; # ---------------------------------------------------------------; # Create adaptive kernel estimation pdf. In self configuration the input data; # is mirrored over the boundaries to minimize edge effects in distribution; # that do not fall to zero towards the edges",MatchSource.CODE_COMMENT,tutorials/roofit/rf707_kernelestimation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf707_kernelestimation.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf707_kernelestimation.py:111,Energy Efficiency,adapt,adaptive,111,"# Create 1D kernel estimation pdf; # ---------------------------------------------------------------; # Create adaptive kernel estimation pdf. In self configuration the input data; # is mirrored over the boundaries to minimize edge effects in distribution; # that do not fall to zero towards the edges",MatchSource.CODE_COMMENT,tutorials/roofit/rf707_kernelestimation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf707_kernelestimation.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf707_kernelestimation.py:111,Modifiability,adapt,adaptive,111,"# Create 1D kernel estimation pdf; # ---------------------------------------------------------------; # Create adaptive kernel estimation pdf. In self configuration the input data; # is mirrored over the boundaries to minimize edge effects in distribution; # that do not fall to zero towards the edges",MatchSource.CODE_COMMENT,tutorials/roofit/rf707_kernelestimation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf707_kernelestimation.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf707_kernelestimation.py:151,Modifiability,config,configuration,151,"# Create 1D kernel estimation pdf; # ---------------------------------------------------------------; # Create adaptive kernel estimation pdf. In self configuration the input data; # is mirrored over the boundaries to minimize edge effects in distribution; # that do not fall to zero towards the edges",MatchSource.CODE_COMMENT,tutorials/roofit/rf707_kernelestimation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf707_kernelestimation.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf707_kernelestimation.py:5,Energy Efficiency,adapt,adaptive,5,"# An adaptive kernel estimation pdf on the same data without mirroring option; # for comparison",MatchSource.CODE_COMMENT,tutorials/roofit/rf707_kernelestimation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf707_kernelestimation.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf707_kernelestimation.py:5,Modifiability,adapt,adaptive,5,"# An adaptive kernel estimation pdf on the same data without mirroring option; # for comparison",MatchSource.CODE_COMMENT,tutorials/roofit/rf707_kernelestimation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf707_kernelestimation.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf707_kernelestimation.py:114,Energy Efficiency,adapt,adaptive,114,"# Create 2D kernel estimation pdf; # ---------------------------------------------------------------; # Create 2D adaptive kernel estimation pdf with mirroring",MatchSource.CODE_COMMENT,tutorials/roofit/rf707_kernelestimation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf707_kernelestimation.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf707_kernelestimation.py:114,Modifiability,adapt,adaptive,114,"# Create 2D kernel estimation pdf; # ---------------------------------------------------------------; # Create 2D adaptive kernel estimation pdf with mirroring",MatchSource.CODE_COMMENT,tutorials/roofit/rf707_kernelestimation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf707_kernelestimation.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf707_kernelestimation.py:12,Energy Efficiency,adapt,adaptive,12,"# Create 2D adaptive kernel estimation pdf with mirroring and double; # bandwidth",MatchSource.CODE_COMMENT,tutorials/roofit/rf707_kernelestimation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf707_kernelestimation.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf707_kernelestimation.py:12,Modifiability,adapt,adaptive,12,"# Create 2D adaptive kernel estimation pdf with mirroring and double; # bandwidth",MatchSource.CODE_COMMENT,tutorials/roofit/rf707_kernelestimation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf707_kernelestimation.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf709_BarlowBeeston.py:41,Modifiability,parameteriz,parameterized,41,"# Case 1 - 'Barlow Beeston'; # Construct parameterized histogram shapes for signal and background",MatchSource.CODE_COMMENT,tutorials/roofit/rf709_BarlowBeeston.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf709_BarlowBeeston.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf709_BarlowBeeston.py:408,Availability,down,down,408,"# Case 2 - 'Barlow Beeston' light (one parameter per bin for all samples); # Construct the histogram shapes, using the same parameters for signal and background; # This requires passing the first histogram to the second, so that their common parameters; # can be re-used.; # The first ParamHistFunc will create one parameter per bin, such as `p_ph_sig2_gamma_bin_0`.; # This allows bin 0 to fluctuate up and down.; # Then, the SAME parameters are connected to the background histogram, so the bins fluctuate; # synchronously. This reduces the number of parameters.",MatchSource.CODE_COMMENT,tutorials/roofit/rf709_BarlowBeeston.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf709_BarlowBeeston.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf709_BarlowBeeston.py:531,Energy Efficiency,reduce,reduces,531,"# Case 2 - 'Barlow Beeston' light (one parameter per bin for all samples); # Construct the histogram shapes, using the same parameters for signal and background; # This requires passing the first histogram to the second, so that their common parameters; # can be re-used.; # The first ParamHistFunc will create one parameter per bin, such as `p_ph_sig2_gamma_bin_0`.; # This allows bin 0 to fluctuate up and down.; # Then, the SAME parameters are connected to the background histogram, so the bins fluctuate; # synchronously. This reduces the number of parameters.",MatchSource.CODE_COMMENT,tutorials/roofit/rf709_BarlowBeeston.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf709_BarlowBeeston.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf709_BarlowBeeston.py:46,Availability,error,error,46,"# Plot data again to show it on top of model0 error bands:",MatchSource.CODE_COMMENT,tutorials/roofit/rf709_BarlowBeeston.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf709_BarlowBeeston.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf709_BarlowBeeston.py:39,Availability,error,error,39,"# Plot data again to show it on top of error bands:",MatchSource.CODE_COMMENT,tutorials/roofit/rf709_BarlowBeeston.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf709_BarlowBeeston.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf709_BarlowBeeston.py:46,Availability,error,error,46,"# Plot data again to show it on top of model0 error bands:",MatchSource.CODE_COMMENT,tutorials/roofit/rf709_BarlowBeeston.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf709_BarlowBeeston.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf711_lagrangianmorph.py:12,Modifiability,coupling,couplings,12,"# Setup two couplings that enters the morphing function; # kSM -> SM coupling set to constant (1); # cHq3 -> EFT parameter with NewPhysics attribute set to true",MatchSource.CODE_COMMENT,tutorials/roofit/rf711_lagrangianmorph.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf711_lagrangianmorph.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf711_lagrangianmorph.py:69,Modifiability,coupling,coupling,69,"# Setup two couplings that enters the morphing function; # kSM -> SM coupling set to constant (1); # cHq3 -> EFT parameter with NewPhysics attribute set to true",MatchSource.CODE_COMMENT,tutorials/roofit/rf711_lagrangianmorph.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf711_lagrangianmorph.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf711_lagrangianmorph.py:18,Modifiability,config,config,18,"# Inputs to setup config; # -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -",MatchSource.CODE_COMMENT,tutorials/roofit/rf711_lagrangianmorph.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf711_lagrangianmorph.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf711_lagrangianmorph.py:9,Integrability,wrap,wrapped,9,"# Create wrapped pdf to generate 2D dataset of cHq3 as a function of pTV; # -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -",MatchSource.CODE_COMMENT,tutorials/roofit/rf711_lagrangianmorph.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf711_lagrangianmorph.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf712_lagrangianmorphfit.py:73,Usability,simpl,simple,73,"## \file; ## \ingroup tutorial_roofit; ## \notebook -js; ## Performing a simple fit with RooLagrangianMorphFunc; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date January 2022; ## \author Rahul Balasubramanian",MatchSource.CODE_COMMENT,tutorials/roofit/rf712_lagrangianmorphfit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf712_lagrangianmorphfit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf712_lagrangianmorphfit.py:18,Modifiability,config,config,18,"# Inputs to setup config; # -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -",MatchSource.CODE_COMMENT,tutorials/roofit/rf712_lagrangianmorphfit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf712_lagrangianmorphfit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf712_lagrangianmorphfit.py:6,Availability,error,error,6,"# set error to set initial step size in fit",MatchSource.CODE_COMMENT,tutorials/roofit/rf712_lagrangianmorphfit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf712_lagrangianmorphfit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf712_lagrangianmorphfit.py:148,Integrability,wrap,wrapper,148,"# Wrap pdf on morphfunc and fit to data histogram; # -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -; # wrapper pdf to normalise morphing function to a morphing pdf",MatchSource.CODE_COMMENT,tutorials/roofit/rf712_lagrangianmorphfit.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf712_lagrangianmorphfit.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf801_mcstudy.py:110,Performance,perform,perform,110,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf801_mcstudy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf801_mcstudy.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf801_mcstudy.py:271,Availability,error,error,271,"# Create manager; # ---------------------------; # Instantiate ROOT.RooMCStudy manager on model with x as observable and given choice of fit options; #; # The Silence() option kills all messages below the PROGRESS level, only a single message; # per sample executed, any error message that occur during fitting; #; # The Extended() option has two effects:; # 1) The extended ML term is included in the likelihood and; # 2) A poisson fluctuation is introduced on the number of generated events; #; # The FitOptions() given here are passed to the fitting stage of each toy experiment.; # If Save() is specified, fit result of each experiment is saved by the manager; #; # A Binned() option is added in self example to bin the data between generation and fitting; # to speed up the study at the expemse of some precision",MatchSource.CODE_COMMENT,tutorials/roofit/rf801_mcstudy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf801_mcstudy.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf801_mcstudy.py:186,Integrability,message,messages,186,"# Create manager; # ---------------------------; # Instantiate ROOT.RooMCStudy manager on model with x as observable and given choice of fit options; #; # The Silence() option kills all messages below the PROGRESS level, only a single message; # per sample executed, any error message that occur during fitting; #; # The Extended() option has two effects:; # 1) The extended ML term is included in the likelihood and; # 2) A poisson fluctuation is introduced on the number of generated events; #; # The FitOptions() given here are passed to the fitting stage of each toy experiment.; # If Save() is specified, fit result of each experiment is saved by the manager; #; # A Binned() option is added in self example to bin the data between generation and fitting; # to speed up the study at the expemse of some precision",MatchSource.CODE_COMMENT,tutorials/roofit/rf801_mcstudy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf801_mcstudy.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf801_mcstudy.py:235,Integrability,message,message,235,"# Create manager; # ---------------------------; # Instantiate ROOT.RooMCStudy manager on model with x as observable and given choice of fit options; #; # The Silence() option kills all messages below the PROGRESS level, only a single message; # per sample executed, any error message that occur during fitting; #; # The Extended() option has two effects:; # 1) The extended ML term is included in the likelihood and; # 2) A poisson fluctuation is introduced on the number of generated events; #; # The FitOptions() given here are passed to the fitting stage of each toy experiment.; # If Save() is specified, fit result of each experiment is saved by the manager; #; # A Binned() option is added in self example to bin the data between generation and fitting; # to speed up the study at the expemse of some precision",MatchSource.CODE_COMMENT,tutorials/roofit/rf801_mcstudy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf801_mcstudy.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf801_mcstudy.py:277,Integrability,message,message,277,"# Create manager; # ---------------------------; # Instantiate ROOT.RooMCStudy manager on model with x as observable and given choice of fit options; #; # The Silence() option kills all messages below the PROGRESS level, only a single message; # per sample executed, any error message that occur during fitting; #; # The Extended() option has two effects:; # 1) The extended ML term is included in the likelihood and; # 2) A poisson fluctuation is introduced on the number of generated events; #; # The FitOptions() given here are passed to the fitting stage of each toy experiment.; # If Save() is specified, fit result of each experiment is saved by the manager; #; # A Binned() option is added in self example to bin the data between generation and fitting; # to speed up the study at the expemse of some precision",MatchSource.CODE_COMMENT,tutorials/roofit/rf801_mcstudy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf801_mcstudy.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf801_mcstudy.py:366,Modifiability,extend,extended,366,"# Create manager; # ---------------------------; # Instantiate ROOT.RooMCStudy manager on model with x as observable and given choice of fit options; #; # The Silence() option kills all messages below the PROGRESS level, only a single message; # per sample executed, any error message that occur during fitting; #; # The Extended() option has two effects:; # 1) The extended ML term is included in the likelihood and; # 2) A poisson fluctuation is introduced on the number of generated events; #; # The FitOptions() given here are passed to the fitting stage of each toy experiment.; # If Save() is specified, fit result of each experiment is saved by the manager; #; # A Binned() option is added in self example to bin the data between generation and fitting; # to speed up the study at the expemse of some precision",MatchSource.CODE_COMMENT,tutorials/roofit/rf801_mcstudy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf801_mcstudy.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf801_mcstudy.py:123,Availability,error,error,123,"# Explore results of study; # ------------------------------------------------; # Make plots of the distributions of mean, error on mean and the pull of; # mean",MatchSource.CODE_COMMENT,tutorials/roofit/rf801_mcstudy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf801_mcstudy.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf801_mcstudy.py:30,Availability,avail,available,30,"# Make ROOT.RooMCStudy object available on command line after; # macro finishes",MatchSource.CODE_COMMENT,tutorials/roofit/rf801_mcstudy.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf801_mcstudy.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf802_mcstudy_addons.py:73,Deployability,configurat,configuration,73,"# Create study manager with separate generation and fit model. ROOT.This configuration; # is set up to generate bad fits as the fit and generator model have different means; # and the mean parameter is not floating in the fit",MatchSource.CODE_COMMENT,tutorials/roofit/rf802_mcstudy_addons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf802_mcstudy_addons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf802_mcstudy_addons.py:73,Modifiability,config,configuration,73,"# Create study manager with separate generation and fit model. ROOT.This configuration; # is set up to generate bad fits as the fit and generator model have different means; # and the mean parameter is not floating in the fit",MatchSource.CODE_COMMENT,tutorials/roofit/rf802_mcstudy_addons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf802_mcstudy_addons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf802_mcstudy_addons.py:365,Safety,risk,risky,365,"# Request a the pull plot of mean. The pulls will be one-sided because; # `mean` is limited to 1.8.; # Note that RooFit will have trouble to compute the pulls because the parameters; # are called `mean` in the fit, but `mean2` in the generator model. It is not obvious; # that these are related. RooFit will nevertheless compute pulls, but complain that; # this is risky.",MatchSource.CODE_COMMENT,tutorials/roofit/rf802_mcstudy_addons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf802_mcstudy_addons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf802_mcstudy_addons.py:25,Availability,avail,available,25,"# Make RooMCStudy object available on command line after; # macro finishes",MatchSource.CODE_COMMENT,tutorials/roofit/rf802_mcstudy_addons.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf802_mcstudy_addons.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf803_mcstudy_addons2.py:87,Modifiability,extend,extended,87,"# Create manager; # ---------------------------; # Configure manager to perform binned extended likelihood fits (Binned=True, Extended=True) on data generated; # with a Poisson fluctuation on Nobs (Extended=True)",MatchSource.CODE_COMMENT,tutorials/roofit/rf803_mcstudy_addons2.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf803_mcstudy_addons2.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf803_mcstudy_addons2.py:72,Performance,perform,perform,72,"# Create manager; # ---------------------------; # Configure manager to perform binned extended likelihood fits (Binned=True, Extended=True) on data generated; # with a Poisson fluctuation on Nobs (Extended=True)",MatchSource.CODE_COMMENT,tutorials/roofit/rf803_mcstudy_addons2.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf803_mcstudy_addons2.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf803_mcstudy_addons2.py:151,Testability,log,log,151,"# Add profile likelihood calculation of significance. Redo each; # fit while keeping parameter nsig fixed to zero. For each toy,; # the difference in -log(L) of both fits is stored, well; # a simple significance interpretation of the delta(-logL); # Dnll = 0.5 sigma^2",MatchSource.CODE_COMMENT,tutorials/roofit/rf803_mcstudy_addons2.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf803_mcstudy_addons2.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf803_mcstudy_addons2.py:241,Testability,log,logL,241,"# Add profile likelihood calculation of significance. Redo each; # fit while keeping parameter nsig fixed to zero. For each toy,; # the difference in -log(L) of both fits is stored, well; # a simple significance interpretation of the delta(-logL); # Dnll = 0.5 sigma^2",MatchSource.CODE_COMMENT,tutorials/roofit/rf803_mcstudy_addons2.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf803_mcstudy_addons2.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf803_mcstudy_addons2.py:192,Usability,simpl,simple,192,"# Add profile likelihood calculation of significance. Redo each; # fit while keeping parameter nsig fixed to zero. For each toy,; # the difference in -log(L) of both fits is stored, well; # a simple significance interpretation of the delta(-logL); # Dnll = 0.5 sigma^2",MatchSource.CODE_COMMENT,tutorials/roofit/rf803_mcstudy_addons2.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf803_mcstudy_addons2.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf803_mcstudy_addons2.py:110,Deployability,configurat,configuration,110,"# Run manager, make plots; # ---------------------------------------------; # Run 1000 experiments. ROOT.This configuration will generate a fair number; # of (harmless) MINUIT warnings due to the instability of the Chebychev polynomial fit; # at low statistics.",MatchSource.CODE_COMMENT,tutorials/roofit/rf803_mcstudy_addons2.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf803_mcstudy_addons2.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf803_mcstudy_addons2.py:110,Modifiability,config,configuration,110,"# Run manager, make plots; # ---------------------------------------------; # Run 1000 experiments. ROOT.This configuration will generate a fair number; # of (harmless) MINUIT warnings due to the instability of the Chebychev polynomial fit; # at low statistics.",MatchSource.CODE_COMMENT,tutorials/roofit/rf803_mcstudy_addons2.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf803_mcstudy_addons2.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf803_mcstudy_addons2.py:30,Availability,avail,available,30,"# Make ROOT.RooMCStudy object available on command line after; # macro finishes",MatchSource.CODE_COMMENT,tutorials/roofit/rf803_mcstudy_addons2.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf803_mcstudy_addons2.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:90,Deployability,configurat,configuration,90,"## \file; ## \ingroup tutorial_roofit; ## \notebook -nodraw; ## Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed; ##; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:90,Modifiability,config,configuration,90,"## \file; ## \ingroup tutorial_roofit; ## \notebook -nodraw; ## Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed; ##; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:19,Deployability,integrat,integration,19,"# Adjust global 1D integration precision; # ----------------------------------------------------------------------------; # Print current global default configuration for numeric integration; # strategies",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:153,Deployability,configurat,configuration,153,"# Adjust global 1D integration precision; # ----------------------------------------------------------------------------; # Print current global default configuration for numeric integration; # strategies",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:179,Deployability,integrat,integration,179,"# Adjust global 1D integration precision; # ----------------------------------------------------------------------------; # Print current global default configuration for numeric integration; # strategies",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:19,Integrability,integrat,integration,19,"# Adjust global 1D integration precision; # ----------------------------------------------------------------------------; # Print current global default configuration for numeric integration; # strategies",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:179,Integrability,integrat,integration,179,"# Adjust global 1D integration precision; # ----------------------------------------------------------------------------; # Print current global default configuration for numeric integration; # strategies",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:153,Modifiability,config,configuration,153,"# Adjust global 1D integration precision; # ----------------------------------------------------------------------------; # Print current global default configuration for numeric integration; # strategies",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:382,Deployability,integrat,integrate,382,"# Example: Change global precision for 1D integrals from 1e-7 to 1e-6; #; # The relative epsilon (change as fraction of current best integral estimate) and; # absolute epsilon (absolute change w.r.t last best integral estimate) can be specified; # separately. For most pdf integrals the relative change criterium is the most important,; # however for certain non-pdf functions that integrate out to zero a separate absolute; # change criterium is necessary to declare convergence of the integral; #; # NB: ROOT.This change is for illustration only. In general the precision should be at least 1e-7; # for normalization integrals for MINUIT to succeed.; #",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:382,Integrability,integrat,integrate,382,"# Example: Change global precision for 1D integrals from 1e-7 to 1e-6; #; # The relative epsilon (change as fraction of current best integral estimate) and; # absolute epsilon (absolute change w.r.t last best integral estimate) can be specified; # separately. For most pdf integrals the relative change criterium is the most important,; # however for certain non-pdf functions that integrate out to zero a separate absolute; # change criterium is necessary to declare convergence of the integral; #; # NB: ROOT.This change is for illustration only. In general the precision should be at least 1e-7; # for normalization integrals for MINUIT to succeed.; #",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:19,Deployability,integrat,integration,19,"# Disable analytic integration from demonstration purposes",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:19,Integrability,integrat,integration,19,"# Disable analytic integration from demonstration purposes",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:42,Deployability,integrat,integration,42,"# Activate debug-level messages for topic integration to be able to follow; # actions below",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:23,Integrability,message,messages,23,"# Activate debug-level messages for topic integration to be able to follow; # actions below",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:42,Integrability,integrat,integration,42,"# Activate debug-level messages for topic integration to be able to follow; # actions below",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:64,Deployability,integrat,integrator,64,"# Calculate integral over landau with default choice of numeric integrator",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:64,Integrability,integrat,integrator,64,"# Calculate integral over landau with default choice of numeric integrator",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:39,Deployability,configurat,configuration,39,"# setprecision(15); # Same with custom configuration; # -----------------------------------------------------------; # Construct a custom configuration which uses the adaptive Gauss-Kronrod technique; # for closed 1D integrals",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:138,Deployability,configurat,configuration,138,"# setprecision(15); # Same with custom configuration; # -----------------------------------------------------------; # Construct a custom configuration which uses the adaptive Gauss-Kronrod technique; # for closed 1D integrals",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:167,Energy Efficiency,adapt,adaptive,167,"# setprecision(15); # Same with custom configuration; # -----------------------------------------------------------; # Construct a custom configuration which uses the adaptive Gauss-Kronrod technique; # for closed 1D integrals",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:39,Modifiability,config,configuration,39,"# setprecision(15); # Same with custom configuration; # -----------------------------------------------------------; # Construct a custom configuration which uses the adaptive Gauss-Kronrod technique; # for closed 1D integrals",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:138,Modifiability,config,configuration,138,"# setprecision(15); # Same with custom configuration; # -----------------------------------------------------------; # Construct a custom configuration which uses the adaptive Gauss-Kronrod technique; # for closed 1D integrals",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:167,Modifiability,adapt,adaptive,167,"# setprecision(15); # Same with custom configuration; # -----------------------------------------------------------; # Construct a custom configuration which uses the adaptive Gauss-Kronrod technique; # for closed 1D integrals",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:184,Deployability,integrat,integration,184,"# Adjusting default config for a specific pdf; # -------------------------------------------------------------------------------------; # Another possibility: associate custom numeric integration configuration; # as default for object 'landau'",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:196,Deployability,configurat,configuration,196,"# Adjusting default config for a specific pdf; # -------------------------------------------------------------------------------------; # Another possibility: associate custom numeric integration configuration; # as default for object 'landau'",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:184,Integrability,integrat,integration,184,"# Adjusting default config for a specific pdf; # -------------------------------------------------------------------------------------; # Another possibility: associate custom numeric integration configuration; # as default for object 'landau'",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:20,Modifiability,config,config,20,"# Adjusting default config for a specific pdf; # -------------------------------------------------------------------------------------; # Another possibility: associate custom numeric integration configuration; # as default for object 'landau'",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:196,Modifiability,config,configuration,196,"# Adjusting default config for a specific pdf; # -------------------------------------------------------------------------------------; # Another possibility: associate custom numeric integration configuration; # as default for object 'landau'",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:48,Deployability,integrat,integrator,48,"# Calculate integral over landau custom numeric integrator specified as; # object default",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:48,Integrability,integrat,integrator,48,"# Calculate integral over landau custom numeric integrator specified as; # object default",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:60,Deployability,integrat,integration,60,"# Another possibility: Change global default for 1D numeric integration; # strategy on finite domains",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:60,Integrability,integrat,integration,60,"# Another possibility: Change global default for 1D numeric integration; # strategy on finite domains",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:221,Deployability,configurat,configuration,221,"# Adjusting parameters of a specific technique; # ---------------------------------------------------------------------------------------; # Adjust maximum number of steps of ROOT.RooIntegrator1D in the global; # default configuration",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:221,Modifiability,config,configuration,221,"# Adjusting parameters of a specific technique; # ---------------------------------------------------------------------------------------; # Adjust maximum number of steps of ROOT.RooIntegrator1D in the global; # default configuration",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:55,Deployability,integrat,integrator,55,"# Example of how to change the parameters of a numeric integrator; # (Each config section is a ROOT.RooArgSet with ROOT.RooRealVars holding real-valued parameters; # and ROOT.RooCategories holding parameters with a finite set of options)",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:55,Integrability,integrat,integrator,55,"# Example of how to change the parameters of a numeric integrator; # (Each config section is a ROOT.RooArgSet with ROOT.RooRealVars holding real-valued parameters; # and ROOT.RooCategories holding parameters with a finite set of options)",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py:75,Modifiability,config,config,75,"# Example of how to change the parameters of a numeric integrator; # (Each config section is a ROOT.RooArgSet with ROOT.RooRealVars holding real-valued parameters; # and ROOT.RooCategories holding parameters with a finite set of options)",MatchSource.CODE_COMMENT,tutorials/roofit/rf901_numintconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf901_numintconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py:90,Deployability,configurat,configuration,90,"## \file; ## \ingroup tutorial_roofit; ## \notebook -nodraw; ## Numeric algorithm tuning: configuration and customization of how MC sampling algorithms; ## on specific pdfs are executed; ##; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf902_numgenconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py:90,Modifiability,config,configuration,90,"## \file; ## \ingroup tutorial_roofit; ## \notebook -nodraw; ## Numeric algorithm tuning: configuration and customization of how MC sampling algorithms; ## on specific pdfs are executed; ##; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf902_numgenconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py:224,Energy Efficiency,adapt,adaptive,224,"# Change global strategy for 1D sampling problems without conditional observable; # (1st kFALSE) and without discrete observable (2nd kFALSE) from ROOT.RooFoamGenerator,; # ( an interface to the ROOT.TFoam MC generator with adaptive subdivisioning strategy ) to ROOT.RooAcceptReject,; # a plain accept/reject sampling algorithm [ ROOT.RooFit default before; # ROOT 5.23/04 ]",MatchSource.CODE_COMMENT,tutorials/roofit/rf902_numgenconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py:178,Integrability,interface,interface,178,"# Change global strategy for 1D sampling problems without conditional observable; # (1st kFALSE) and without discrete observable (2nd kFALSE) from ROOT.RooFoamGenerator,; # ( an interface to the ROOT.TFoam MC generator with adaptive subdivisioning strategy ) to ROOT.RooAcceptReject,; # a plain accept/reject sampling algorithm [ ROOT.RooFit default before; # ROOT 5.23/04 ]",MatchSource.CODE_COMMENT,tutorials/roofit/rf902_numgenconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py:224,Modifiability,adapt,adaptive,224,"# Change global strategy for 1D sampling problems without conditional observable; # (1st kFALSE) and without discrete observable (2nd kFALSE) from ROOT.RooFoamGenerator,; # ( an interface to the ROOT.TFoam MC generator with adaptive subdivisioning strategy ) to ROOT.RooAcceptReject,; # a plain accept/reject sampling algorithm [ ROOT.RooFit default before; # ROOT 5.23/04 ]",MatchSource.CODE_COMMENT,tutorials/roofit/rf902_numgenconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py:188,Deployability,configurat,configuration,188,"# Adjusting default config for a specific pdf; # -------------------------------------------------------------------------------------; # Another possibility: associate custom MC sampling configuration as default for object 'model'; # The kTRUE argument will install a clone of the default configuration as specialized configuration; # for self model if none existed so far",MatchSource.CODE_COMMENT,tutorials/roofit/rf902_numgenconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py:259,Deployability,install,install,259,"# Adjusting default config for a specific pdf; # -------------------------------------------------------------------------------------; # Another possibility: associate custom MC sampling configuration as default for object 'model'; # The kTRUE argument will install a clone of the default configuration as specialized configuration; # for self model if none existed so far",MatchSource.CODE_COMMENT,tutorials/roofit/rf902_numgenconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py:290,Deployability,configurat,configuration,290,"# Adjusting default config for a specific pdf; # -------------------------------------------------------------------------------------; # Another possibility: associate custom MC sampling configuration as default for object 'model'; # The kTRUE argument will install a clone of the default configuration as specialized configuration; # for self model if none existed so far",MatchSource.CODE_COMMENT,tutorials/roofit/rf902_numgenconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py:319,Deployability,configurat,configuration,319,"# Adjusting default config for a specific pdf; # -------------------------------------------------------------------------------------; # Another possibility: associate custom MC sampling configuration as default for object 'model'; # The kTRUE argument will install a clone of the default configuration as specialized configuration; # for self model if none existed so far",MatchSource.CODE_COMMENT,tutorials/roofit/rf902_numgenconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py:20,Modifiability,config,config,20,"# Adjusting default config for a specific pdf; # -------------------------------------------------------------------------------------; # Another possibility: associate custom MC sampling configuration as default for object 'model'; # The kTRUE argument will install a clone of the default configuration as specialized configuration; # for self model if none existed so far",MatchSource.CODE_COMMENT,tutorials/roofit/rf902_numgenconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py:188,Modifiability,config,configuration,188,"# Adjusting default config for a specific pdf; # -------------------------------------------------------------------------------------; # Another possibility: associate custom MC sampling configuration as default for object 'model'; # The kTRUE argument will install a clone of the default configuration as specialized configuration; # for self model if none existed so far",MatchSource.CODE_COMMENT,tutorials/roofit/rf902_numgenconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py:290,Modifiability,config,configuration,290,"# Adjusting default config for a specific pdf; # -------------------------------------------------------------------------------------; # Another possibility: associate custom MC sampling configuration as default for object 'model'; # The kTRUE argument will install a clone of the default configuration as specialized configuration; # for self model if none existed so far",MatchSource.CODE_COMMENT,tutorials/roofit/rf902_numgenconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py:319,Modifiability,config,configuration,319,"# Adjusting default config for a specific pdf; # -------------------------------------------------------------------------------------; # Another possibility: associate custom MC sampling configuration as default for object 'model'; # The kTRUE argument will install a clone of the default configuration as specialized configuration; # for self model if none existed so far",MatchSource.CODE_COMMENT,tutorials/roofit/rf902_numgenconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py:221,Deployability,configurat,configuration,221,"# Adjusting parameters of a specific technique; # ---------------------------------------------------------------------------------------; # Adjust maximum number of steps of ROOT.RooIntegrator1D in the global; # default configuration",MatchSource.CODE_COMMENT,tutorials/roofit/rf902_numgenconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py:221,Modifiability,config,configuration,221,"# Adjusting parameters of a specific technique; # ---------------------------------------------------------------------------------------; # Adjust maximum number of steps of ROOT.RooIntegrator1D in the global; # default configuration",MatchSource.CODE_COMMENT,tutorials/roofit/rf902_numgenconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py:55,Deployability,integrat,integrator,55,"# Example of how to change the parameters of a numeric integrator; # (Each config section is a ROOT.RooArgSet with ROOT.RooRealVars holding real-valued parameters; # and ROOT.RooCategories holding parameters with a finite set of options)",MatchSource.CODE_COMMENT,tutorials/roofit/rf902_numgenconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py:55,Integrability,integrat,integrator,55,"# Example of how to change the parameters of a numeric integrator; # (Each config section is a ROOT.RooArgSet with ROOT.RooRealVars holding real-valued parameters; # and ROOT.RooCategories holding parameters with a finite set of options)",MatchSource.CODE_COMMENT,tutorials/roofit/rf902_numgenconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py:75,Modifiability,config,config,75,"# Example of how to change the parameters of a numeric integrator; # (Each config section is a ROOT.RooArgSet with ROOT.RooRealVars holding real-valued parameters; # and ROOT.RooCategories holding parameters with a finite set of options)",MatchSource.CODE_COMMENT,tutorials/roofit/rf902_numgenconfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf902_numgenconfig.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py:120,Modifiability,parameteriz,parameterizations,120,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Numeric algorithm tuning: caching of slow numeric integrals and parameterizations of slow numeric integrals; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,tutorials/roofit/rf903_numintcache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py:18,Performance,load,load,18,"# Create, save or load workspace with pdf; # -----------------------------------------------------------------------------------; #; # Mode = 0 : Create workspace for plain running (no integral caching); # Mode = 1 : Generate workspace with precalculated integral and store it on file; # Mode = 2 : Load previously stored workspace from file",MatchSource.CODE_COMMENT,tutorials/roofit/rf903_numintcache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py:63,Deployability,integrat,integrated,63,"# Make a difficult to normalize pdf in 3 dimensions that is; # integrated numerically.",MatchSource.CODE_COMMENT,tutorials/roofit/rf903_numintcache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py:63,Integrability,integrat,integrated,63,"# Make a difficult to normalize pdf in 3 dimensions that is; # integrated numerically.",MatchSource.CODE_COMMENT,tutorials/roofit/rf903_numintcache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py:217,Availability,avail,available,217,"# Instruct model to precalculate normalization integral that integrate at least; # two dimensions numerically. In self specific case the integral value for; # all values of parameter 'a' are stored in a histogram and available for use; # in subsequent fitting and plotting operations (interpolation is; # applied); # w.pdf(""model"").setNormValueCaching(3)",MatchSource.CODE_COMMENT,tutorials/roofit/rf903_numintcache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py:61,Deployability,integrat,integrate,61,"# Instruct model to precalculate normalization integral that integrate at least; # two dimensions numerically. In self specific case the integral value for; # all values of parameter 'a' are stored in a histogram and available for use; # in subsequent fitting and plotting operations (interpolation is; # applied); # w.pdf(""model"").setNormValueCaching(3)",MatchSource.CODE_COMMENT,tutorials/roofit/rf903_numintcache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py:61,Integrability,integrat,integrate,61,"# Instruct model to precalculate normalization integral that integrate at least; # two dimensions numerically. In self specific case the integral value for; # all values of parameter 'a' are stored in a histogram and available for use; # in subsequent fitting and plotting operations (interpolation is; # applied); # w.pdf(""model"").setNormValueCaching(3)",MatchSource.CODE_COMMENT,tutorials/roofit/rf903_numintcache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py:42,Performance,cache,cache,42,"# Evaluate pdf once to trigger filling of cache",MatchSource.CODE_COMMENT,tutorials/roofit/rf903_numintcache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py:20,Performance,load,loaded,20,"# Return created or loaded workspace",MatchSource.CODE_COMMENT,tutorials/roofit/rf903_numintcache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py:215,Performance,cache,cached,215,"# Mode = 0 : Run plain fit (slow); # Mode = 1 : Generate workspace with precalculated integral and store it on file (prepare for accelerated running); # Mode = 2 : Run fit from previously stored workspace including cached; # integrals (fast, run in mode=1 first); # Create, save or load workspace with pdf; # -----------------------------------------------------------------------------------; # Make/load workspace, here in mode 1",MatchSource.CODE_COMMENT,tutorials/roofit/rf903_numintcache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py:282,Performance,load,load,282,"# Mode = 0 : Run plain fit (slow); # Mode = 1 : Generate workspace with precalculated integral and store it on file (prepare for accelerated running); # Mode = 2 : Run fit from previously stored workspace including cached; # integrals (fast, run in mode=1 first); # Create, save or load workspace with pdf; # -----------------------------------------------------------------------------------; # Make/load workspace, here in mode 1",MatchSource.CODE_COMMENT,tutorials/roofit/rf903_numintcache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py:401,Performance,load,load,401,"# Mode = 0 : Run plain fit (slow); # Mode = 1 : Generate workspace with precalculated integral and store it on file (prepare for accelerated running); # Mode = 2 : Run fit from previously stored workspace including cached; # integrals (fast, run in mode=1 first); # Create, save or load workspace with pdf; # -----------------------------------------------------------------------------------; # Make/load workspace, here in mode 1",MatchSource.CODE_COMMENT,tutorials/roofit/rf903_numintcache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py:15,Performance,cache,cached,15,"# Show plot of cached integral values",MatchSource.CODE_COMMENT,tutorials/roofit/rf903_numintcache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py:85,Performance,cache,cached,85,"# Projection on x (always slow as 2D integral over Y, at fitted value of a; # is not cached)",MatchSource.CODE_COMMENT,tutorials/roofit/rf903_numintcache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py:17,Availability,avail,available,17,"# Make workspace available on command line after macro finishes",MatchSource.CODE_COMMENT,tutorials/roofit/rf903_numintcache.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf903_numintcache.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py:2110,Availability,error,errors,2110," ## joint distribution for ""x"" and ""y"" can be factorized.; ## Generally, these regions have many events, so it the ratio can be; ## measured very precisely there. So we extend the model to describe the; ## left two boxes... denoted with ""bar"".; ## - In the upper left we observe nonbar events and expect bbar events; ## - In the bottom left we observe noffbar events and expect tau bbar events; ## Note again we have:; ##; ## ~~~{.cpp}; ## tau ~ <expectation off bar> / <expectation on bar>; ## ~~~; ##; ## One can further expand the model to account for the systematic associated; ## to assuming the distribution of ""x"" and ""y"" factorizes (eg. that; ## tau is the same for off/on and offbar/onbar). This can be done in several; ## ways, but here we introduce an additional parameter rho, which so that; ## one set of models will use tau and the other tau*rho. The choice is arbitrary,; ## but it has consequences on the numerical stability of the algorithms.; ## The ""bar"" measurements typically have more events (& smaller relative errors).; ## If we choose; ##; ## ~~~{.cpp}; ## <expectation noffbar> = tau * rho * <expectation noonbar>; ## ~~~; ##; ## the product tau*rho will be known very precisely (~1/sqrt(bbar)) and the contour; ## in those parameters will be narrow and have a non-trivial tau~1/rho shape.; ## However, if we choose to put rho on the non/noff measurements (where the; ## product will have an error `~1/sqrt(b))`, the contours will be more amenable; ## to numerical techniques. Thus, here we choose to define:; ##; ## ~~~{.cpp}; ## tau := <expectation off bar> / (<expectation on bar>); ## rho := <expectation off> / (<expectation on> * tau); ##; ## ^ y; ## |; ## |---------------------------+; ## | | |; ## | nonbar | non |; ## | bbar | s+b |; ## | | |; ## |---------------+-----------|; ## | | |; ## | noffbar | noff |; ## | tau bbar | tau b rho |; ## | | |; ## +-----------------------------> x; ## ~~~; ##; ## Left in this way, the problem is under-constrained. However, o",MatchSource.CODE_COMMENT,tutorials/roostats/FourBinInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py:2494,Availability,error,error,2494," we have:; ##; ## ~~~{.cpp}; ## tau ~ <expectation off bar> / <expectation on bar>; ## ~~~; ##; ## One can further expand the model to account for the systematic associated; ## to assuming the distribution of ""x"" and ""y"" factorizes (eg. that; ## tau is the same for off/on and offbar/onbar). This can be done in several; ## ways, but here we introduce an additional parameter rho, which so that; ## one set of models will use tau and the other tau*rho. The choice is arbitrary,; ## but it has consequences on the numerical stability of the algorithms.; ## The ""bar"" measurements typically have more events (& smaller relative errors).; ## If we choose; ##; ## ~~~{.cpp}; ## <expectation noffbar> = tau * rho * <expectation noonbar>; ## ~~~; ##; ## the product tau*rho will be known very precisely (~1/sqrt(bbar)) and the contour; ## in those parameters will be narrow and have a non-trivial tau~1/rho shape.; ## However, if we choose to put rho on the non/noff measurements (where the; ## product will have an error `~1/sqrt(b))`, the contours will be more amenable; ## to numerical techniques. Thus, here we choose to define:; ##; ## ~~~{.cpp}; ## tau := <expectation off bar> / (<expectation on bar>); ## rho := <expectation off> / (<expectation on> * tau); ##; ## ^ y; ## |; ## |---------------------------+; ## | | |; ## | nonbar | non |; ## | bbar | s+b |; ## | | |; ## |---------------+-----------|; ## | | |; ## | noffbar | noff |; ## | tau bbar | tau b rho |; ## | | |; ## +-----------------------------> x; ## ~~~; ##; ## Left in this way, the problem is under-constrained. However, one may; ## have some auxiliary measurement (usually based on Monte Carlo) to; ## constrain rho. Let us call this auxiliary measurement that gives; ## the nominal value of rho ""rhonom"". Thus, there is a 'constraint' term in; ## the full model: P(rhonom | rho). In this case, we consider a Gaussian; ## constraint with standard deviation sigma.; ##; ## In the example, the initial values of the parameters are:",MatchSource.CODE_COMMENT,tutorials/roostats/FourBinInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py:4409,Availability,error,error,4409,"#; ## ~~~{.cpp}; ## - s = 40; ## - b = 100; ## - tau = 5; ## - bbar = 1000; ## - rho = 1; ## (sigma for rho = 20%); ## ~~~; ##; ## and in the toy dataset:; ##; ## ~~~{.cpp}; ## - non = 139; ## - noff = 528; ## - nonbar = 993; ## - noffbar = 4906; ## - rhonom = 1.27824; ## ~~~; ##; ## Note, the covariance matrix of the parameters has large off-diagonal terms.; ## Clearly s,b are anti-correlated. Similarly, since noffbar >> nonbar, one would; ## expect bbar,tau to be anti-correlated.; ##; ## This can be seen below.; ##; ## ~~~{.cpp}; ## GLOBAL b bbar rho s tau; ## b 0.96820 1.000 0.191 -0.942 -0.762 -0.209; ## bbar 0.91191 0.191 1.000 0.000 -0.146 -0.912; ## rho 0.96348 -0.942 0.000 1.000 0.718 -0.000; ## s 0.76250 -0.762 -0.146 0.718 1.000 0.160; ## tau 0.92084 -0.209 -0.912 -0.000 0.160 1.000; ## ~~~; ##; ## Similarly, since tau*rho appears as a product, we expect rho,tau; ## to be anti-correlated. When the error on rho is significantly; ## larger than 1/sqrt(bbar), tau is essentially known and the; ## correlation is minimal (tau mainly cares about bbar, and rho about b,s).; ## In the alternate parametrization (bbar* tau * rho) the correlation coefficient; ## for rho,tau is large (and negative).; ##; ## The code below uses best-practices for RooFit & RooStats as of June 2010.; ##; ## It proceeds as follows:; ## - create a workspace to hold the model; ## - use workspace factory to quickly create the terms of the model; ## - use workspace factory to define total model (a prod pdf); ## - create a RooStats ModelConfig to specify observables, parameters of interest; ## - add to the ModelConfig a prior on the parameters for Bayesian techniques; ## note, the pdf it is factorized for parameters of interest & nuisance params; ## - visualize the model; ## - write the workspace to a file; ## - use several of RooStats IntervalCalculators & compare results; ##; ## \macro_image; ## \macro_output; ## \macro_code; ##; ## \date July 2022; ## \authors Artem Busorgin, Kyle Cranmer and ",MatchSource.CODE_COMMENT,tutorials/roostats/FourBinInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py:1045,Integrability,depend,depends,1045,"le is a generalization of the on/off problem.; ##; ## This example is a generalization of the on/off problem.; ## It's a common setup for SUSY searches. Imagine that one has two; ## variables ""x"" and ""y"" (eg. missing ET and SumET), see figure.; ## The signal region has high values of both of these variables (top right).; ## One can see low values of ""x"" or ""y"" acting as side-bands. If we; ## just used ""y"" as a sideband, we would have the on/off problem.; ## - In the signal region we observe non events and expect s+b events.; ## - In the region with low values of ""y"" (bottom right); ## we observe noff events and expect tau*b events.; ## Note the significance of tau. In the background only case:; ##; ## ~~~{.cpp}; ## tau ~ <expectation off> / <expectation on>; ## ~~~; ##; ## If tau is known, this model is sufficient, but often tau is not known exactly.; ## So one can use low values of ""x"" as an additional constraint for tau.; ## Note that this technique critically depends on the notion that the; ## joint distribution for ""x"" and ""y"" can be factorized.; ## Generally, these regions have many events, so it the ratio can be; ## measured very precisely there. So we extend the model to describe the; ## left two boxes... denoted with ""bar"".; ## - In the upper left we observe nonbar events and expect bbar events; ## - In the bottom left we observe noffbar events and expect tau bbar events; ## Note again we have:; ##; ## ~~~{.cpp}; ## tau ~ <expectation off bar> / <expectation on bar>; ## ~~~; ##; ## One can further expand the model to account for the systematic associated; ## to assuming the distribution of ""x"" and ""y"" factorizes (eg. that; ## tau is the same for off/on and offbar/onbar). This can be done in several; ## ways, but here we introduce an additional parameter rho, which so that; ## one set of models will use tau and the other tau*rho. The choice is arbitrary,; ## but it has consequences on the numerical stability of the algorithms.; ## The ""bar"" measurements typica",MatchSource.CODE_COMMENT,tutorials/roostats/FourBinInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py:250,Modifiability,variab,variables,250,"## \file; ## \ingroup tutorial_roostats; ## \notebook; ## This example is a generalization of the on/off problem.; ##; ## This example is a generalization of the on/off problem.; ## It's a common setup for SUSY searches. Imagine that one has two; ## variables ""x"" and ""y"" (eg. missing ET and SumET), see figure.; ## The signal region has high values of both of these variables (top right).; ## One can see low values of ""x"" or ""y"" acting as side-bands. If we; ## just used ""y"" as a sideband, we would have the on/off problem.; ## - In the signal region we observe non events and expect s+b events.; ## - In the region with low values of ""y"" (bottom right); ## we observe noff events and expect tau*b events.; ## Note the significance of tau. In the background only case:; ##; ## ~~~{.cpp}; ## tau ~ <expectation off> / <expectation on>; ## ~~~; ##; ## If tau is known, this model is sufficient, but often tau is not known exactly.; ## So one can use low values of ""x"" as an additional constraint for tau.; ## Note that this technique critically depends on the notion that the; ## joint distribution for ""x"" and ""y"" can be factorized.; ## Generally, these regions have many events, so it the ratio can be; ## measured very precisely there. So we extend the model to describe the; ## left two boxes... denoted with ""bar"".; ## - In the upper left we observe nonbar events and expect bbar events; ## - In the bottom left we observe noffbar events and expect tau bbar events; ## Note again we have:; ##; ## ~~~{.cpp}; ## tau ~ <expectation off bar> / <expectation on bar>; ## ~~~; ##; ## One can further expand the model to account for the systematic associated; ## to assuming the distribution of ""x"" and ""y"" factorizes (eg. that; ## tau is the same for off/on and offbar/onbar). This can be done in several; ## ways, but here we introduce an additional parameter rho, which so that; ## one set of models will use tau and the other tau*rho. The choice is arbitrary,; ## but it has consequences on the nume",MatchSource.CODE_COMMENT,tutorials/roostats/FourBinInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py:367,Modifiability,variab,variables,367,"## \file; ## \ingroup tutorial_roostats; ## \notebook; ## This example is a generalization of the on/off problem.; ##; ## This example is a generalization of the on/off problem.; ## It's a common setup for SUSY searches. Imagine that one has two; ## variables ""x"" and ""y"" (eg. missing ET and SumET), see figure.; ## The signal region has high values of both of these variables (top right).; ## One can see low values of ""x"" or ""y"" acting as side-bands. If we; ## just used ""y"" as a sideband, we would have the on/off problem.; ## - In the signal region we observe non events and expect s+b events.; ## - In the region with low values of ""y"" (bottom right); ## we observe noff events and expect tau*b events.; ## Note the significance of tau. In the background only case:; ##; ## ~~~{.cpp}; ## tau ~ <expectation off> / <expectation on>; ## ~~~; ##; ## If tau is known, this model is sufficient, but often tau is not known exactly.; ## So one can use low values of ""x"" as an additional constraint for tau.; ## Note that this technique critically depends on the notion that the; ## joint distribution for ""x"" and ""y"" can be factorized.; ## Generally, these regions have many events, so it the ratio can be; ## measured very precisely there. So we extend the model to describe the; ## left two boxes... denoted with ""bar"".; ## - In the upper left we observe nonbar events and expect bbar events; ## - In the bottom left we observe noffbar events and expect tau bbar events; ## Note again we have:; ##; ## ~~~{.cpp}; ## tau ~ <expectation off bar> / <expectation on bar>; ## ~~~; ##; ## One can further expand the model to account for the systematic associated; ## to assuming the distribution of ""x"" and ""y"" factorizes (eg. that; ## tau is the same for off/on and offbar/onbar). This can be done in several; ## ways, but here we introduce an additional parameter rho, which so that; ## one set of models will use tau and the other tau*rho. The choice is arbitrary,; ## but it has consequences on the nume",MatchSource.CODE_COMMENT,tutorials/roostats/FourBinInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py:1245,Modifiability,extend,extend,1245," ""y"" (eg. missing ET and SumET), see figure.; ## The signal region has high values of both of these variables (top right).; ## One can see low values of ""x"" or ""y"" acting as side-bands. If we; ## just used ""y"" as a sideband, we would have the on/off problem.; ## - In the signal region we observe non events and expect s+b events.; ## - In the region with low values of ""y"" (bottom right); ## we observe noff events and expect tau*b events.; ## Note the significance of tau. In the background only case:; ##; ## ~~~{.cpp}; ## tau ~ <expectation off> / <expectation on>; ## ~~~; ##; ## If tau is known, this model is sufficient, but often tau is not known exactly.; ## So one can use low values of ""x"" as an additional constraint for tau.; ## Note that this technique critically depends on the notion that the; ## joint distribution for ""x"" and ""y"" can be factorized.; ## Generally, these regions have many events, so it the ratio can be; ## measured very precisely there. So we extend the model to describe the; ## left two boxes... denoted with ""bar"".; ## - In the upper left we observe nonbar events and expect bbar events; ## - In the bottom left we observe noffbar events and expect tau bbar events; ## Note again we have:; ##; ## ~~~{.cpp}; ## tau ~ <expectation off bar> / <expectation on bar>; ## ~~~; ##; ## One can further expand the model to account for the systematic associated; ## to assuming the distribution of ""x"" and ""y"" factorizes (eg. that; ## tau is the same for off/on and offbar/onbar). This can be done in several; ## ways, but here we introduce an additional parameter rho, which so that; ## one set of models will use tau and the other tau*rho. The choice is arbitrary,; ## but it has consequences on the numerical stability of the algorithms.; ## The ""bar"" measurements typically have more events (& smaller relative errors).; ## If we choose; ##; ## ~~~{.cpp}; ## <expectation noffbar> = tau * rho * <expectation noonbar>; ## ~~~; ##; ## the product tau*rho will be known ve",MatchSource.CODE_COMMENT,tutorials/roostats/FourBinInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py:79,Testability,test,test,79,"# for 2-d plots to inspect correlations:; # wspace.defineSet(""poi"",""s,rho""); # test simpler cases where parameters are known.; # wspace[""tau""].setConstant(); # wspace[""rho""].setConstant(); # wspace[""b""].setConstant(); # wspace[""bbar""].setConstant(); # inspect workspace; # wspace.Print(); # ----------------------------------------------------------; # Generate toy data; # generate toy data assuming current value of the parameters; # import into workspace.; # add Verbose() to see how it's being generated",MatchSource.CODE_COMMENT,tutorials/roostats/FourBinInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py:84,Usability,simpl,simpler,84,"# for 2-d plots to inspect correlations:; # wspace.defineSet(""poi"",""s,rho""); # test simpler cases where parameters are known.; # wspace[""tau""].setConstant(); # wspace[""rho""].setConstant(); # wspace[""b""].setConstant(); # wspace[""bbar""].setConstant(); # inspect workspace; # wspace.Print(); # ----------------------------------------------------------; # Generate toy data; # generate toy data assuming current value of the parameters; # import into workspace.; # add Verbose() to see how it's being generated",MatchSource.CODE_COMMENT,tutorials/roostats/FourBinInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py:75,Modifiability,config,config,75,"# ----------------------------------; # Now the statistical tests; # model config",MatchSource.CODE_COMMENT,tutorials/roostats/FourBinInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py:60,Testability,test,tests,60,"# ----------------------------------; # Now the statistical tests; # model config",MatchSource.CODE_COMMENT,tutorials/roostats/FourBinInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py:52,Energy Efficiency,efficient,efficient,52,"# use MCMCCalculator (takes about 1 min); # Want an efficient proposal function, so derive it from covariance; # matrix of fit",MatchSource.CODE_COMMENT,tutorials/roostats/FourBinInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py:47,Availability,error,error,47,"# the plot takes a long time and print lots of error; # using a scan it is better",MatchSource.CODE_COMMENT,tutorials/roostats/FourBinInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py:91,Availability,fault,faults,91,"# TODO: The calculators have to be destructed first. Otherwise, we can get; # segmentation faults depending on the destruction order, which is random in; # Python. Probably the issue is that some object has a non-owning pointer to; # another object, which it uses in its destructor. This should be fixed either; # in the design of RooStats in C++, or with phythonizations.",MatchSource.CODE_COMMENT,tutorials/roostats/FourBinInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py:98,Integrability,depend,depending,98,"# TODO: The calculators have to be destructed first. Otherwise, we can get; # segmentation faults depending on the destruction order, which is random in; # Python. Probably the issue is that some object has a non-owning pointer to; # another object, which it uses in its destructor. This should be fixed either; # in the design of RooStats in C++, or with phythonizations.",MatchSource.CODE_COMMENT,tutorials/roostats/FourBinInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:420,Deployability,integrat,integration,420,"# \file; # \ingroup tutorial_roostats; # \notebook -js; # Example demonstrating usage of HybridCalcultor; #; # A hypothesis testing example based on number counting; # with background uncertainty.; #; # NOTE: This example must be run with the ACLIC (the + option ) due to the; # new class that is defined.; #; # This example:; # - demonstrates the usage of the HybridCalcultor (Part 4-6); # - demonstrates the numerical integration of RooFit (Part 2); # - validates the RooStats against an example with a known analytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to base it on an auxiliary measurement. In this case, the auxiliary; # measurement (aka control measurement, sideband) is another counting experiment; # with measurement y and expectation tau*b. With an 'original prior' on b,; # called \f$\eta(b)\f$ then one can obtain a posterior from the auxiliary measurement; # \f$\pi(b) = \eta(b) * Pois(y|tau*b).\f$ This is a principled choice for a prior; # on b in the main measurement of x, which can then be treated in a hybrid; # Bayesian/Frequentist way. Additionally, one can try to treat the two; # measurements simultaneously, which is detailed in Part 6 of the tutorial.; #; # This tutorial is related to the FourBin.C tutorial in the modeling, but; # focuses on hypothesis testing instead of interval estimation.; #; # More background on this 'prototype problem' can be found in the; # following papers:; #; # - Evaluation of three methods for calculating statistical significance; # when incorporating a systematic uncertainty into a test of the; # background-only hypothesis for a Poisson process; # Authors: Robert D. Cous",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:420,Integrability,integrat,integration,420,"# \file; # \ingroup tutorial_roostats; # \notebook -js; # Example demonstrating usage of HybridCalcultor; #; # A hypothesis testing example based on number counting; # with background uncertainty.; #; # NOTE: This example must be run with the ACLIC (the + option ) due to the; # new class that is defined.; #; # This example:; # - demonstrates the usage of the HybridCalcultor (Part 4-6); # - demonstrates the numerical integration of RooFit (Part 2); # - validates the RooStats against an example with a known analytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to base it on an auxiliary measurement. In this case, the auxiliary; # measurement (aka control measurement, sideband) is another counting experiment; # with measurement y and expectation tau*b. With an 'original prior' on b,; # called \f$\eta(b)\f$ then one can obtain a posterior from the auxiliary measurement; # \f$\pi(b) = \eta(b) * Pois(y|tau*b).\f$ This is a principled choice for a prior; # on b in the main measurement of x, which can then be treated in a hybrid; # Bayesian/Frequentist way. Additionally, one can try to treat the two; # measurements simultaneously, which is detailed in Part 6 of the tutorial.; #; # This tutorial is related to the FourBin.C tutorial in the modeling, but; # focuses on hypothesis testing instead of interval estimation.; #; # More background on this 'prototype problem' can be found in the; # following papers:; #; # - Evaluation of three methods for calculating statistical significance; # when incorporating a systematic uncertainty into a test of the; # background-only hypothesis for a Poisson process; # Authors: Robert D. Cous",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:456,Security,validat,validates,456,"# \file; # \ingroup tutorial_roostats; # \notebook -js; # Example demonstrating usage of HybridCalcultor; #; # A hypothesis testing example based on number counting; # with background uncertainty.; #; # NOTE: This example must be run with the ACLIC (the + option ) due to the; # new class that is defined.; #; # This example:; # - demonstrates the usage of the HybridCalcultor (Part 4-6); # - demonstrates the numerical integration of RooFit (Part 2); # - validates the RooStats against an example with a known analytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to base it on an auxiliary measurement. In this case, the auxiliary; # measurement (aka control measurement, sideband) is another counting experiment; # with measurement y and expectation tau*b. With an 'original prior' on b,; # called \f$\eta(b)\f$ then one can obtain a posterior from the auxiliary measurement; # \f$\pi(b) = \eta(b) * Pois(y|tau*b).\f$ This is a principled choice for a prior; # on b in the main measurement of x, which can then be treated in a hybrid; # Bayesian/Frequentist way. Additionally, one can try to treat the two; # measurements simultaneously, which is detailed in Part 6 of the tutorial.; #; # This tutorial is related to the FourBin.C tutorial in the modeling, but; # focuses on hypothesis testing instead of interval estimation.; #; # More background on this 'prototype problem' can be found in the; # following papers:; #; # - Evaluation of three methods for calculating statistical significance; # when incorporating a systematic uncertainty into a test of the; # background-only hypothesis for a Poisson process; # Authors: Robert D. Cous",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:124,Testability,test,testing,124,"# \file; # \ingroup tutorial_roostats; # \notebook -js; # Example demonstrating usage of HybridCalcultor; #; # A hypothesis testing example based on number counting; # with background uncertainty.; #; # NOTE: This example must be run with the ACLIC (the + option ) due to the; # new class that is defined.; #; # This example:; # - demonstrates the usage of the HybridCalcultor (Part 4-6); # - demonstrates the numerical integration of RooFit (Part 2); # - validates the RooStats against an example with a known analytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to base it on an auxiliary measurement. In this case, the auxiliary; # measurement (aka control measurement, sideband) is another counting experiment; # with measurement y and expectation tau*b. With an 'original prior' on b,; # called \f$\eta(b)\f$ then one can obtain a posterior from the auxiliary measurement; # \f$\pi(b) = \eta(b) * Pois(y|tau*b).\f$ This is a principled choice for a prior; # on b in the main measurement of x, which can then be treated in a hybrid; # Bayesian/Frequentist way. Additionally, one can try to treat the two; # measurements simultaneously, which is detailed in Part 6 of the tutorial.; #; # This tutorial is related to the FourBin.C tutorial in the modeling, but; # focuses on hypothesis testing instead of interval estimation.; #; # More background on this 'prototype problem' can be found in the; # following papers:; #; # - Evaluation of three methods for calculating statistical significance; # when incorporating a systematic uncertainty into a test of the; # background-only hypothesis for a Poisson process; # Authors: Robert D. Cous",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:564,Testability,test,test,564,"# \file; # \ingroup tutorial_roostats; # \notebook -js; # Example demonstrating usage of HybridCalcultor; #; # A hypothesis testing example based on number counting; # with background uncertainty.; #; # NOTE: This example must be run with the ACLIC (the + option ) due to the; # new class that is defined.; #; # This example:; # - demonstrates the usage of the HybridCalcultor (Part 4-6); # - demonstrates the numerical integration of RooFit (Part 2); # - validates the RooStats against an example with a known analytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to base it on an auxiliary measurement. In this case, the auxiliary; # measurement (aka control measurement, sideband) is another counting experiment; # with measurement y and expectation tau*b. With an 'original prior' on b,; # called \f$\eta(b)\f$ then one can obtain a posterior from the auxiliary measurement; # \f$\pi(b) = \eta(b) * Pois(y|tau*b).\f$ This is a principled choice for a prior; # on b in the main measurement of x, which can then be treated in a hybrid; # Bayesian/Frequentist way. Additionally, one can try to treat the two; # measurements simultaneously, which is detailed in Part 6 of the tutorial.; #; # This tutorial is related to the FourBin.C tutorial in the modeling, but; # focuses on hypothesis testing instead of interval estimation.; #; # More background on this 'prototype problem' can be found in the; # following papers:; #; # - Evaluation of three methods for calculating statistical significance; # when incorporating a systematic uncertainty into a test of the; # background-only hypothesis for a Poisson process; # Authors: Robert D. Cous",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:1649,Testability,test,testing,1649,"lytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to base it on an auxiliary measurement. In this case, the auxiliary; # measurement (aka control measurement, sideband) is another counting experiment; # with measurement y and expectation tau*b. With an 'original prior' on b,; # called \f$\eta(b)\f$ then one can obtain a posterior from the auxiliary measurement; # \f$\pi(b) = \eta(b) * Pois(y|tau*b).\f$ This is a principled choice for a prior; # on b in the main measurement of x, which can then be treated in a hybrid; # Bayesian/Frequentist way. Additionally, one can try to treat the two; # measurements simultaneously, which is detailed in Part 6 of the tutorial.; #; # This tutorial is related to the FourBin.C tutorial in the modeling, but; # focuses on hypothesis testing instead of interval estimation.; #; # More background on this 'prototype problem' can be found in the; # following papers:; #; # - Evaluation of three methods for calculating statistical significance; # when incorporating a systematic uncertainty into a test of the; # background-only hypothesis for a Poisson process; # Authors: Robert D. Cousins, James T. Linnemann, Jordan Tucker; # http://arxiv.org/abs/physics/0702156; # NIM A 595 (2008) 480--501; #; # - Statistical Challenges for Searches for New Physics at the LHC; # Author: Kyle Cranmer; # http://arxiv.org/abs/physics/0511028; #; # - Measures of Significance in HEP and Astrophysics; # Authors J. T. Linnemann; # http://arxiv.org/abs/physics/0312059; #; # \macro_image; # \macro_output; # \macro_code; #; # \authors Kyle Cranmer, Wouter Verkerke, Sven Kreiss, and Jolly Chen (Python translation)",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:1911,Testability,test,test,1911,"lytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to base it on an auxiliary measurement. In this case, the auxiliary; # measurement (aka control measurement, sideband) is another counting experiment; # with measurement y and expectation tau*b. With an 'original prior' on b,; # called \f$\eta(b)\f$ then one can obtain a posterior from the auxiliary measurement; # \f$\pi(b) = \eta(b) * Pois(y|tau*b).\f$ This is a principled choice for a prior; # on b in the main measurement of x, which can then be treated in a hybrid; # Bayesian/Frequentist way. Additionally, one can try to treat the two; # measurements simultaneously, which is detailed in Part 6 of the tutorial.; #; # This tutorial is related to the FourBin.C tutorial in the modeling, but; # focuses on hypothesis testing instead of interval estimation.; #; # More background on this 'prototype problem' can be found in the; # following papers:; #; # - Evaluation of three methods for calculating statistical significance; # when incorporating a systematic uncertainty into a test of the; # background-only hypothesis for a Poisson process; # Authors: Robert D. Cousins, James T. Linnemann, Jordan Tucker; # http://arxiv.org/abs/physics/0702156; # NIM A 595 (2008) 480--501; #; # - Statistical Challenges for Searches for New Physics at the LHC; # Author: Kyle Cranmer; # http://arxiv.org/abs/physics/0511028; #; # - Measures of Significance in HEP and Astrophysics; # Authors J. T. Linnemann; # http://arxiv.org/abs/physics/0312059; #; # \macro_image; # \macro_output; # \macro_code; #; # \authors Kyle Cranmer, Wouter Verkerke, Sven Kreiss, and Jolly Chen (Python translation)",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:7,Deployability,configurat,configuration,7,"# User configuration parameters",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:7,Modifiability,config,configuration,7,"# User configuration parameters",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:121,Usability,simpl,simply,121,"# ratio Ntoys Null/ntoys ALT; # ----------------------------------; # A New Test Statistic Class for this example.; # It simply returns the sum of the values in a particular; # column of a dataset.; # You can ignore this class and focus on the macro below",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:336,Integrability,interface,interface,336,"""""""; using namespace RooFit;; using namespace RooStats;. class BinCountTestStat : public TestStatistic {; public:; BinCountTestStat(void) : fColumnName(""tmp"") {}; BinCountTestStat(string columnName) : fColumnName(columnName) {}. virtual Double_t Evaluate(RooAbsData &data, RooArgSet & /*nullPOI*/); {; // This is the main method in the interface; Double_t value = 0.0;; for (int i = 0; i < data.numEntries(); i++) {; value += data.get(i)->getRealValue(fColumnName.c_str());; }; return value;; }; virtual const TString GetVarName() const { return fColumnName; }. private:; string fColumnName;. protected:; ClassDef(BinCountTestStat, 1); };; """"""",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:217,Deployability,integrat,integration,217,"# ----------------------------------; # The Actual Tutorial Macro; # This tutorial has 6 parts; # Table of Contents; # Setup; # 1. Make the model for the 'prototype problem'; # Special cases; # 2. Use RooFit's direct integration to get p-value & significance; # 3. Use RooStats analytic solution for this problem; # RooStats HybridCalculator -- can be generalized; # 4. RooStats ToyMC version of 2. & 3.; # 5. RooStats ToyMC with an equivalent test statistic; # 6. RooStats ToyMC with simultaneous control & main measurement; # It takes ~4 min without PROOF and ~2 min with PROOF on 4 cores.; # Of course, everything looks nicer with more toys, which takes longer.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:217,Integrability,integrat,integration,217,"# ----------------------------------; # The Actual Tutorial Macro; # This tutorial has 6 parts; # Table of Contents; # Setup; # 1. Make the model for the 'prototype problem'; # Special cases; # 2. Use RooFit's direct integration to get p-value & significance; # 3. Use RooStats analytic solution for this problem; # RooStats HybridCalculator -- can be generalized; # 4. RooStats ToyMC version of 2. & 3.; # 5. RooStats ToyMC with an equivalent test statistic; # 6. RooStats ToyMC with simultaneous control & main measurement; # It takes ~4 min without PROOF and ~2 min with PROOF on 4 cores.; # Of course, everything looks nicer with more toys, which takes longer.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:444,Testability,test,test,444,"# ----------------------------------; # The Actual Tutorial Macro; # This tutorial has 6 parts; # Table of Contents; # Setup; # 1. Make the model for the 'prototype problem'; # Special cases; # 2. Use RooFit's direct integration to get p-value & significance; # 3. Use RooStats analytic solution for this problem; # RooStats HybridCalculator -- can be generalized; # 4. RooStats ToyMC version of 2. & 3.; # 5. RooStats ToyMC with an equivalent test statistic; # 6. RooStats ToyMC with simultaneous control & main measurement; # It takes ~4 min without PROOF and ~2 min with PROOF on 4 cores.; # Of course, everything looks nicer with more toys, which takes longer.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:80,Integrability,message,messages,80,"# We will control the output level in a few places to avoid; # verbose progress messages. We start by keeping track; # of the current threshold on messages.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:147,Integrability,message,messages,147,"# We will control the output level in a few places to avoid; # verbose progress messages. We start by keeping track; # of the current threshold on messages.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:54,Safety,avoid,avoid,54,"# We will control the output level in a few places to avoid; # verbose progress messages. We start by keeping track; # of the current threshold on messages.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:337,Deployability,integrat,integration,337,"# ----------------------------------------------------; # P A R T 2 : D I R E C T I N T E G R A T I O N; # ====================================================; # This is not the 'RooStats' way, but in this case the distribution; # of the test statistic is simply x and can be calculated directly; # from the PDF using RooFit's built-in integration.; # Note, this does not generalize to situations in which the test statistic; # depends on many events (rows in a dataset).; # construct the Bayesian-averaged model (eg. a projection pdf); # $p'(x|s) = \int db p(x|s+b) * [ p(y|b) * prior(b) ]$",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:337,Integrability,integrat,integration,337,"# ----------------------------------------------------; # P A R T 2 : D I R E C T I N T E G R A T I O N; # ====================================================; # This is not the 'RooStats' way, but in this case the distribution; # of the test statistic is simply x and can be calculated directly; # from the PDF using RooFit's built-in integration.; # Note, this does not generalize to situations in which the test statistic; # depends on many events (rows in a dataset).; # construct the Bayesian-averaged model (eg. a projection pdf); # $p'(x|s) = \int db p(x|s+b) * [ p(y|b) * prior(b) ]$",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:429,Integrability,depend,depends,429,"# ----------------------------------------------------; # P A R T 2 : D I R E C T I N T E G R A T I O N; # ====================================================; # This is not the 'RooStats' way, but in this case the distribution; # of the test statistic is simply x and can be calculated directly; # from the PDF using RooFit's built-in integration.; # Note, this does not generalize to situations in which the test statistic; # depends on many events (rows in a dataset).; # construct the Bayesian-averaged model (eg. a projection pdf); # $p'(x|s) = \int db p(x|s+b) * [ p(y|b) * prior(b) ]$",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:239,Testability,test,test,239,"# ----------------------------------------------------; # P A R T 2 : D I R E C T I N T E G R A T I O N; # ====================================================; # This is not the 'RooStats' way, but in this case the distribution; # of the test statistic is simply x and can be calculated directly; # from the PDF using RooFit's built-in integration.; # Note, this does not generalize to situations in which the test statistic; # depends on many events (rows in a dataset).; # construct the Bayesian-averaged model (eg. a projection pdf); # $p'(x|s) = \int db p(x|s+b) * [ p(y|b) * prior(b) ]$",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:411,Testability,test,test,411,"# ----------------------------------------------------; # P A R T 2 : D I R E C T I N T E G R A T I O N; # ====================================================; # This is not the 'RooStats' way, but in this case the distribution; # of the test statistic is simply x and can be calculated directly; # from the PDF using RooFit's built-in integration.; # Note, this does not generalize to situations in which the test statistic; # depends on many events (rows in a dataset).; # construct the Bayesian-averaged model (eg. a projection pdf); # $p'(x|s) = \int db p(x|s+b) * [ p(y|b) * prior(b) ]$",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:257,Usability,simpl,simply,257,"# ----------------------------------------------------; # P A R T 2 : D I R E C T I N T E G R A T I O N; # ====================================================; # This is not the 'RooStats' way, but in this case the distribution; # of the test statistic is simply x and can be calculated directly; # from the PDF using RooFit's built-in integration.; # Note, this does not generalize to situations in which the test statistic; # depends on many events (rows in a dataset).; # construct the Bayesian-averaged model (eg. a projection pdf); # $p'(x|s) = \int db p(x|s+b) * [ p(y|b) * prior(b) ]$",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:57,Energy Efficiency,green,green,57,"# lower message level; # plot it, red is averaged model, green is b known exactly, blue is s+b av model",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:8,Integrability,message,message,8,"# lower message level; # plot it, red is averaged model, green is b known exactly, blue is s+b av model",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:17,Integrability,message,messages,17,"# get ugly print messages out of the way",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:771,Modifiability,variab,variables,771,"# -------------------------------------------------------------; # P A R T 4 : U S I N G H Y B R I D C A L C U L A T O R; # =============================================================; # Now we demonstrate the RooStats HybridCalculator.; #; # Like all RooStats calculators it needs the data and a ModelConfig; # for the relevant hypotheses. Since we are doing hypothesis testing; # we need a ModelConfig for the null (background only) and the alternate; # (signal+background) hypotheses. We also need to specify the PDF,; # the parameters of interest, and the observables. Furthermore, since; # the parameter of interest is floating, we need to specify which values; # of the parameter corresponds to the null and alternate (eg. s=0 and s=50); #; # define some sets of variables obs={x} and poi={s}; # note here, x is the only observable in the main measurement; # and y is treated as a separate measurement, which is used; # to produce the prior that will be used in this calculation; # to randomize the nuisance parameters.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:373,Testability,test,testing,373,"# -------------------------------------------------------------; # P A R T 4 : U S I N G H Y B R I D C A L C U L A T O R; # =============================================================; # Now we demonstrate the RooStats HybridCalculator.; #; # Like all RooStats calculators it needs the data and a ModelConfig; # for the relevant hypotheses. Since we are doing hypothesis testing; # we need a ModelConfig for the null (background only) and the alternate; # (signal+background) hypotheses. We also need to specify the PDF,; # the parameters of interest, and the observables. Furthermore, since; # the parameter of interest is floating, we need to specify which values; # of the parameter corresponds to the null and alternate (eg. s=0 and s=50); #; # define some sets of variables obs={x} and poi={s}; # note here, x is the only observable in the main measurement; # and y is treated as a separate measurement, which is used; # to produce the prior that will be used in this calculation; # to randomize the nuisance parameters.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:277,Integrability,interface,interface,277,"# Part 3b : Choose Test Statistic; # ----------------------------------; # To make an equivalent calculation we need to use x as the test; # statistic. This is not a built-in test statistic in RooStats; # so we define it above. The new class inherits from the; # TestStatistic interface, and simply returns the value; # of x in the dataset.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:242,Modifiability,inherit,inherits,242,"# Part 3b : Choose Test Statistic; # ----------------------------------; # To make an equivalent calculation we need to use x as the test; # statistic. This is not a built-in test statistic in RooStats; # so we define it above. The new class inherits from the; # TestStatistic interface, and simply returns the value; # of x in the dataset.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:133,Testability,test,test,133,"# Part 3b : Choose Test Statistic; # ----------------------------------; # To make an equivalent calculation we need to use x as the test; # statistic. This is not a built-in test statistic in RooStats; # so we define it above. The new class inherits from the; # TestStatistic interface, and simply returns the value; # of x in the dataset.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:175,Testability,test,test,175,"# Part 3b : Choose Test Statistic; # ----------------------------------; # To make an equivalent calculation we need to use x as the test; # statistic. This is not a built-in test statistic in RooStats; # so we define it above. The new class inherits from the; # TestStatistic interface, and simply returns the value; # of x in the dataset.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:292,Usability,simpl,simply,292,"# Part 3b : Choose Test Statistic; # ----------------------------------; # To make an equivalent calculation we need to use x as the test; # statistic. This is not a built-in test statistic in RooStats; # so we define it above. The new class inherits from the; # TestStatistic interface, and simply returns the value; # of x in the dataset.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:82,Testability,log,log-normal,82,"# this corresponds to the ""Z_N"" calculation.; #; # or one could use the analogous log-normal prior",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:682,Modifiability,config,configure,682,"#; # Ideally, the HybridCalculator would be able to inspect the full; # model $Pois(x | s+b) * Pois(y | tau b )$ and be given the original; # prior $\eta(b)$ to form $\pi(b) = Pois(y|tau*b) * \eta(b)$.; # This is not yet implemented because in the general case; # it is not easy to identify the terms in the PDF that correspond; # to the auxiliary measurement. So for now, it must be set; # explicitly with:; # - ForcePriorNuisanceNull(); # - ForcePriorNuisanceAlt(); # the name ""ForcePriorNuisance"" was chosen because we anticipate; # this to be auto-detected, but will leave the option open; # to force to a different prior for the nuisance parameters.; # Part 3d : Construct and configure the HybridCalculator; # -------------------------------------------------------",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:552,Safety,detect,detected,552,"#; # Ideally, the HybridCalculator would be able to inspect the full; # model $Pois(x | s+b) * Pois(y | tau b )$ and be given the original; # prior $\eta(b)$ to form $\pi(b) = Pois(y|tau*b) * \eta(b)$.; # This is not yet implemented because in the general case; # it is not easy to identify the terms in the PDF that correspond; # to the auxiliary measurement. So for now, it must be set; # explicitly with:; # - ForcePriorNuisanceNull(); # - ForcePriorNuisanceAlt(); # the name ""ForcePriorNuisance"" was chosen because we anticipate; # this to be auto-detected, but will leave the option open; # to force to a different prior for the nuisance parameters.; # Part 3d : Construct and configure the HybridCalculator; # -------------------------------------------------------",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:10,Testability,test,test,10,"# set the test statistic",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:411,Integrability,message,messages,411,"# if you wanted to use the ad hoc Gaussian prior instead; # ~~~; # hc1.ForcePriorNuisanceAlt(w.pdf(""gauss_prior"")); # hc1.ForcePriorNuisanceNull(w.pdf(""gauss_prior"")); # ~~~; # if you wanted to use the ad hoc log-normal prior instead; # ~~~; # hc1.ForcePriorNuisanceAlt(w.pdf(""lognorm_prior"")); # hc1.ForcePriorNuisanceNull(w.pdf(""lognorm_prior"")); # ~~~; # these lines save current msg level and then kill any messages below ERROR",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:209,Testability,log,log-normal,209,"# if you wanted to use the ad hoc Gaussian prior instead; # ~~~; # hc1.ForcePriorNuisanceAlt(w.pdf(""gauss_prior"")); # hc1.ForcePriorNuisanceNull(w.pdf(""gauss_prior"")); # ~~~; # if you wanted to use the ad hoc log-normal prior instead; # ~~~; # hc1.ForcePriorNuisanceAlt(w.pdf(""lognorm_prior"")); # hc1.ForcePriorNuisanceNull(w.pdf(""lognorm_prior"")); # ~~~; # these lines save current msg level and then kill any messages below ERROR",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:225,Testability,test,test,225,"# -------------------------------------------------------------------------; # # P A R T 5 : U S I N G H Y B R I D C A L C U L A T O R; # # W I T H A N A L T E R N A T I V E T E S T S T A T I S T I C; #; # A likelihood ratio test statistics should be 1-to-1 with the count x; # when the value of b is fixed in the likelihood. This is implemented; # by the SimpleLikelihoodRatioTestStat",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:411,Integrability,message,messages,411,"# if you wanted to use the ad hoc Gaussian prior instead; # ~~~; # hc2.ForcePriorNuisanceAlt(w.pdf(""gauss_prior"")); # hc2.ForcePriorNuisanceNull(w.pdf(""gauss_prior"")); # ~~~; # if you wanted to use the ad hoc log-normal prior instead; # ~~~; # hc2.ForcePriorNuisanceAlt(w.pdf(""lognorm_prior"")); # hc2.ForcePriorNuisanceNull(w.pdf(""lognorm_prior"")); # ~~~; # these lines save current msg level and then kill any messages below ERROR",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:209,Testability,log,log-normal,209,"# if you wanted to use the ad hoc Gaussian prior instead; # ~~~; # hc2.ForcePriorNuisanceAlt(w.pdf(""gauss_prior"")); # hc2.ForcePriorNuisanceNull(w.pdf(""gauss_prior"")); # ~~~; # if you wanted to use the ad hoc log-normal prior instead; # ~~~; # hc2.ForcePriorNuisanceAlt(w.pdf(""lognorm_prior"")); # hc2.ForcePriorNuisanceNull(w.pdf(""lognorm_prior"")); # ~~~; # these lines save current msg level and then kill any messages below ERROR",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:272,Testability,test,test,272,"# -----------------------------------------------------------------------------; # # P A R T 6 : U S I N G H Y B R I D C A L C U L A T O R W I T H A N A L T E R N A T I V E T E S T; # # S T A T I S T I C A N D S I M U L T A N E O U S M O D E L; #; # If one wants to use a test statistic in which the nuisance parameters; # are profiled (in one way or another), then the PDF must constrain b.; # Otherwise any observation x can always be explained with s=0 and b=x/tau.; #; # In this case, one is really thinking about the problem in a; # different way. They are considering x,y simultaneously.; # and the PDF should be $Pois(x | s+b) * Pois(y | tau b )$; # and the set 'obs' should be {x,y}.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:24,Modifiability,config,configs,24,"# now we need new model configs, with PDF=""model""",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:478,Testability,log,log,478,"# without this print, their can be a crash when using PROOF. Strange.; # w.Print(); # Test statistics like the profile likelihood ratio; # (or the ratio of profiled likelihoods (Tevatron) or the MLE for s); # will now work, since the nuisance parameter b is constrained by y.; # ratio of alt and null likelihoods with background yield profiled.; #; # NOTE: These are slower because they have to run fits for each toy; # Tevatron-style Ratio of profiled likelihoods; # $Q_Tev = -log L(s=0,\hat\hat{b})/L(s=50,\hat\hat{b})$",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:89,Testability,log,log,89,"# profile likelihood where alternate is best fit value of signal yield; # $\lambda(0) = -log L(s=0,\hat\hat{b})/L(\hat{s},\hat{b})$",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:22,Usability,clear,clear,22,"# However, it is less clear how to justify the prior used in randomizing; # the nuisance parameters (since that is a property of the ensemble,; # and y is a property of each toy pseudo experiment. In that case,; # one probably wants to consider a different y0 which will be held; # constant and the prior $\pi(b) = Pois(y0 | tau b) * \eta(b)$.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:206,Testability,test,test,206,"# if you wanted to use the ad hoc Gaussian prior instead; # ~~~{.cpp}; # hc3.ForcePriorNuisanceAlt(w.pdf(""gauss_prior_y0"")); # hc3.ForcePriorNuisanceNull(w.pdf(""gauss_prior_y0"")); # ~~~; # choose fit-based test statistic",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:124,Integrability,message,messages,124,"# toymcs3.SetTestStatistic(ropl); # toymcs3.SetTestStatistic(mlets); # these lines save current msg level and then kill any messages below ERROR",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:219,Deployability,integrat,integration,219,"# -----------------------------------------; # OUTPUT W/O PROOF (2.66 GHz Intel Core i7); # =========================================; # -----------------------------------------; # Part 2; # Hybrid p-value from direct integration = 0.00094165; # Z_Gamma Significance = 3.10804; # -----------------------------------------; #; # Part 3; # Z_Bi p-value (analytic): 0.00094165; # Z_Bi significance (analytic): 3.10804; # Real time 0:00:00, CP time 0.610; # -----------------------------------------; # Part 4; # Results HybridCalculator_result:; # - Null p-value = 0.00115 +/- 0.000228984; # - Significance = 3.04848 sigma; # - Number of S+B toys: 1000; # - Number of B toys: 20000; # - Test statistic evaluated on data: 150; # - CL_b: 0.99885 +/- 0.000239654; # - CL_s+b: 0.476 +/- 0.0157932; # - CL_s: 0.476548 +/- 0.0158118; # Real time 0:00:07, CP time 7.620; # -----------------------------------------; # Part 5; # Results HybridCalculator_result:; # - Null p-value = 0.0009 +/- 0.000206057; # - Significance = 3.12139 sigma; # - Number of S+B toys: 1000; # - Number of B toys: 20000; # - Test statistic evaluated on data: 10.8198; # - CL_b: 0.9991 +/- 0.000212037; # - CL_s+b: 0.465 +/- 0.0157726; # - CL_s: 0.465419 +/- 0.0157871; # Real time 0:00:34, CP time 34.360; # -----------------------------------------; # Part 6; # Results HybridCalculator_result:; # - Null p-value = 0.000666667 +/- 0.000149021; # - Significance = 3.20871 sigma; # - Number of S+B toys: 1000; # - Number of B toys: 30000; # - Test statistic evaluated on data: 5.03388; # - CL_b: 0.999333 +/- 0.000149021; # - CL_s+b: 0.511 +/- 0.0158076; # - CL_s: 0.511341 +/- 0.0158183; # Real time 0:05:06, CP time 306.330; # ---------------------------------------------------------; # OUTPUT w/ PROOF (2.66 GHz Intel Core i7, 4 virtual cores); # =========================================================; # -----------------------------------------; # Part 5; # Results HybridCalculator_result:; # - Null p-value = 0.00075 +/- 0.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:219,Integrability,integrat,integration,219,"# -----------------------------------------; # OUTPUT W/O PROOF (2.66 GHz Intel Core i7); # =========================================; # -----------------------------------------; # Part 2; # Hybrid p-value from direct integration = 0.00094165; # Z_Gamma Significance = 3.10804; # -----------------------------------------; #; # Part 3; # Z_Bi p-value (analytic): 0.00094165; # Z_Bi significance (analytic): 3.10804; # Real time 0:00:00, CP time 0.610; # -----------------------------------------; # Part 4; # Results HybridCalculator_result:; # - Null p-value = 0.00115 +/- 0.000228984; # - Significance = 3.04848 sigma; # - Number of S+B toys: 1000; # - Number of B toys: 20000; # - Test statistic evaluated on data: 150; # - CL_b: 0.99885 +/- 0.000239654; # - CL_s+b: 0.476 +/- 0.0157932; # - CL_s: 0.476548 +/- 0.0158118; # Real time 0:00:07, CP time 7.620; # -----------------------------------------; # Part 5; # Results HybridCalculator_result:; # - Null p-value = 0.0009 +/- 0.000206057; # - Significance = 3.12139 sigma; # - Number of S+B toys: 1000; # - Number of B toys: 20000; # - Test statistic evaluated on data: 10.8198; # - CL_b: 0.9991 +/- 0.000212037; # - CL_s+b: 0.465 +/- 0.0157726; # - CL_s: 0.465419 +/- 0.0157871; # Real time 0:00:34, CP time 34.360; # -----------------------------------------; # Part 6; # Results HybridCalculator_result:; # - Null p-value = 0.000666667 +/- 0.000149021; # - Significance = 3.20871 sigma; # - Number of S+B toys: 1000; # - Number of B toys: 30000; # - Test statistic evaluated on data: 5.03388; # - CL_b: 0.999333 +/- 0.000149021; # - CL_s+b: 0.511 +/- 0.0158076; # - CL_s: 0.511341 +/- 0.0158183; # Real time 0:05:06, CP time 306.330; # ---------------------------------------------------------; # OUTPUT w/ PROOF (2.66 GHz Intel Core i7, 4 virtual cores); # =========================================================; # -----------------------------------------; # Part 5; # Results HybridCalculator_result:; # - Null p-value = 0.00075 +/- 0.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridInstructional.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:1493,Deployability,integrat,integration,1493,"onding to N events; # and the extended term is Pois(N|S+B); #; # - fractional form: non-extended PDF of some discriminating variable m:; # eg: P(m) ~ s*fs(m) + (1-s)*fb(m), where s is a signal fraction; # in this case the dataset has N rows corresponding to N events; # and there is no extended term; #; # - number counting form: in which there is no discriminating variable; # and the counts are modeled directly (see HybridInstructional); # eg: P(N) = Pois(N|S+B); # in this case the dataset has 1 row corresponding to N events; # and the extended term is the PDF itself.; #; # Here we convert the number counting form into the standard form by; # introducing a dummy discriminating variable m with a uniform distribution.; #; # This example:; # - demonstrates the usage of the HybridCalcultor (Part 4-6); # - demonstrates the numerical integration of RooFit (Part 2); # - validates the RooStats against an example with a known analytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to base it on an auxiliary measurement. In this case, the auxiliary; # measurement (aka control measurement, sideband) is another counting experiment; # with measurement y and expectation tau*b. With an 'original prior' on b,; # called \f$ \eta(b) \f$ then one can obtain a posterior from the auxiliary measurement; # \f$ \pi(b) = \eta(b) * Pois(y|tau*b) \f$. This is a principled choice for a prior; # on b in the main measurement of x, which can then be treated in a hybrid; # Bayesian/Frequentist way. Additionally, one can try to treat the two; # measurements simultaneously, which is detailed in Part 6 of the tutorial.; #; # This tutorial is related ",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:1493,Integrability,integrat,integration,1493,"onding to N events; # and the extended term is Pois(N|S+B); #; # - fractional form: non-extended PDF of some discriminating variable m:; # eg: P(m) ~ s*fs(m) + (1-s)*fb(m), where s is a signal fraction; # in this case the dataset has N rows corresponding to N events; # and there is no extended term; #; # - number counting form: in which there is no discriminating variable; # and the counts are modeled directly (see HybridInstructional); # eg: P(N) = Pois(N|S+B); # in this case the dataset has 1 row corresponding to N events; # and the extended term is the PDF itself.; #; # Here we convert the number counting form into the standard form by; # introducing a dummy discriminating variable m with a uniform distribution.; #; # This example:; # - demonstrates the usage of the HybridCalcultor (Part 4-6); # - demonstrates the numerical integration of RooFit (Part 2); # - validates the RooStats against an example with a known analytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to base it on an auxiliary measurement. In this case, the auxiliary; # measurement (aka control measurement, sideband) is another counting experiment; # with measurement y and expectation tau*b. With an 'original prior' on b,; # called \f$ \eta(b) \f$ then one can obtain a posterior from the auxiliary measurement; # \f$ \pi(b) = \eta(b) * Pois(y|tau*b) \f$. This is a principled choice for a prior; # on b in the main measurement of x, which can then be treated in a hybrid; # Bayesian/Frequentist way. Additionally, one can try to treat the two; # measurements simultaneously, which is detailed in Part 6 of the tutorial.; #; # This tutorial is related ",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:502,Modifiability,extend,extended,502,"# \file; # \ingroup tutorial_roostats; # \notebook -js; # A hypothesis testing example based on number counting with background uncertainty.; #; # A hypothesis testing example based on number counting; # with background uncertainty.; #; # NOTE: This example is like HybridInstructional, but the model is more clearly; # generalizable to an analysis with shapes. There is a lot of flexibility; # for how one models a problem in RooFit/RooStats. Models come in a few; # common forms:; # - standard form: extended PDF of some discriminating variable m:; # eg: P(m) ~ S*fs(m) + B*fb(m), with S+B events expected; # in this case the dataset has N rows corresponding to N events; # and the extended term is Pois(N|S+B); #; # - fractional form: non-extended PDF of some discriminating variable m:; # eg: P(m) ~ s*fs(m) + (1-s)*fb(m), where s is a signal fraction; # in this case the dataset has N rows corresponding to N events; # and there is no extended term; #; # - number counting form: in which there is no discriminating variable; # and the counts are modeled directly (see HybridInstructional); # eg: P(N) = Pois(N|S+B); # in this case the dataset has 1 row corresponding to N events; # and the extended term is the PDF itself.; #; # Here we convert the number counting form into the standard form by; # introducing a dummy discriminating variable m with a uniform distribution.; #; # This example:; # - demonstrates the usage of the HybridCalcultor (Part 4-6); # - demonstrates the numerical integration of RooFit (Part 2); # - validates the RooStats against an example with a known analytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to ",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:538,Modifiability,variab,variable,538,"# \file; # \ingroup tutorial_roostats; # \notebook -js; # A hypothesis testing example based on number counting with background uncertainty.; #; # A hypothesis testing example based on number counting; # with background uncertainty.; #; # NOTE: This example is like HybridInstructional, but the model is more clearly; # generalizable to an analysis with shapes. There is a lot of flexibility; # for how one models a problem in RooFit/RooStats. Models come in a few; # common forms:; # - standard form: extended PDF of some discriminating variable m:; # eg: P(m) ~ S*fs(m) + B*fb(m), with S+B events expected; # in this case the dataset has N rows corresponding to N events; # and the extended term is Pois(N|S+B); #; # - fractional form: non-extended PDF of some discriminating variable m:; # eg: P(m) ~ s*fs(m) + (1-s)*fb(m), where s is a signal fraction; # in this case the dataset has N rows corresponding to N events; # and there is no extended term; #; # - number counting form: in which there is no discriminating variable; # and the counts are modeled directly (see HybridInstructional); # eg: P(N) = Pois(N|S+B); # in this case the dataset has 1 row corresponding to N events; # and the extended term is the PDF itself.; #; # Here we convert the number counting form into the standard form by; # introducing a dummy discriminating variable m with a uniform distribution.; #; # This example:; # - demonstrates the usage of the HybridCalcultor (Part 4-6); # - demonstrates the numerical integration of RooFit (Part 2); # - validates the RooStats against an example with a known analytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to ",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:684,Modifiability,extend,extended,684,"# \file; # \ingroup tutorial_roostats; # \notebook -js; # A hypothesis testing example based on number counting with background uncertainty.; #; # A hypothesis testing example based on number counting; # with background uncertainty.; #; # NOTE: This example is like HybridInstructional, but the model is more clearly; # generalizable to an analysis with shapes. There is a lot of flexibility; # for how one models a problem in RooFit/RooStats. Models come in a few; # common forms:; # - standard form: extended PDF of some discriminating variable m:; # eg: P(m) ~ S*fs(m) + B*fb(m), with S+B events expected; # in this case the dataset has N rows corresponding to N events; # and the extended term is Pois(N|S+B); #; # - fractional form: non-extended PDF of some discriminating variable m:; # eg: P(m) ~ s*fs(m) + (1-s)*fb(m), where s is a signal fraction; # in this case the dataset has N rows corresponding to N events; # and there is no extended term; #; # - number counting form: in which there is no discriminating variable; # and the counts are modeled directly (see HybridInstructional); # eg: P(N) = Pois(N|S+B); # in this case the dataset has 1 row corresponding to N events; # and the extended term is the PDF itself.; #; # Here we convert the number counting form into the standard form by; # introducing a dummy discriminating variable m with a uniform distribution.; #; # This example:; # - demonstrates the usage of the HybridCalcultor (Part 4-6); # - demonstrates the numerical integration of RooFit (Part 2); # - validates the RooStats against an example with a known analytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to ",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:742,Modifiability,extend,extended,742,"# \file; # \ingroup tutorial_roostats; # \notebook -js; # A hypothesis testing example based on number counting with background uncertainty.; #; # A hypothesis testing example based on number counting; # with background uncertainty.; #; # NOTE: This example is like HybridInstructional, but the model is more clearly; # generalizable to an analysis with shapes. There is a lot of flexibility; # for how one models a problem in RooFit/RooStats. Models come in a few; # common forms:; # - standard form: extended PDF of some discriminating variable m:; # eg: P(m) ~ S*fs(m) + B*fb(m), with S+B events expected; # in this case the dataset has N rows corresponding to N events; # and the extended term is Pois(N|S+B); #; # - fractional form: non-extended PDF of some discriminating variable m:; # eg: P(m) ~ s*fs(m) + (1-s)*fb(m), where s is a signal fraction; # in this case the dataset has N rows corresponding to N events; # and there is no extended term; #; # - number counting form: in which there is no discriminating variable; # and the counts are modeled directly (see HybridInstructional); # eg: P(N) = Pois(N|S+B); # in this case the dataset has 1 row corresponding to N events; # and the extended term is the PDF itself.; #; # Here we convert the number counting form into the standard form by; # introducing a dummy discriminating variable m with a uniform distribution.; #; # This example:; # - demonstrates the usage of the HybridCalcultor (Part 4-6); # - demonstrates the numerical integration of RooFit (Part 2); # - validates the RooStats against an example with a known analytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to ",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:778,Modifiability,variab,variable,778,"# \file; # \ingroup tutorial_roostats; # \notebook -js; # A hypothesis testing example based on number counting with background uncertainty.; #; # A hypothesis testing example based on number counting; # with background uncertainty.; #; # NOTE: This example is like HybridInstructional, but the model is more clearly; # generalizable to an analysis with shapes. There is a lot of flexibility; # for how one models a problem in RooFit/RooStats. Models come in a few; # common forms:; # - standard form: extended PDF of some discriminating variable m:; # eg: P(m) ~ S*fs(m) + B*fb(m), with S+B events expected; # in this case the dataset has N rows corresponding to N events; # and the extended term is Pois(N|S+B); #; # - fractional form: non-extended PDF of some discriminating variable m:; # eg: P(m) ~ s*fs(m) + (1-s)*fb(m), where s is a signal fraction; # in this case the dataset has N rows corresponding to N events; # and there is no extended term; #; # - number counting form: in which there is no discriminating variable; # and the counts are modeled directly (see HybridInstructional); # eg: P(N) = Pois(N|S+B); # in this case the dataset has 1 row corresponding to N events; # and the extended term is the PDF itself.; #; # Here we convert the number counting form into the standard form by; # introducing a dummy discriminating variable m with a uniform distribution.; #; # This example:; # - demonstrates the usage of the HybridCalcultor (Part 4-6); # - demonstrates the numerical integration of RooFit (Part 2); # - validates the RooStats against an example with a known analytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to ",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:940,Modifiability,extend,extended,940,"# \file; # \ingroup tutorial_roostats; # \notebook -js; # A hypothesis testing example based on number counting with background uncertainty.; #; # A hypothesis testing example based on number counting; # with background uncertainty.; #; # NOTE: This example is like HybridInstructional, but the model is more clearly; # generalizable to an analysis with shapes. There is a lot of flexibility; # for how one models a problem in RooFit/RooStats. Models come in a few; # common forms:; # - standard form: extended PDF of some discriminating variable m:; # eg: P(m) ~ S*fs(m) + B*fb(m), with S+B events expected; # in this case the dataset has N rows corresponding to N events; # and the extended term is Pois(N|S+B); #; # - fractional form: non-extended PDF of some discriminating variable m:; # eg: P(m) ~ s*fs(m) + (1-s)*fb(m), where s is a signal fraction; # in this case the dataset has N rows corresponding to N events; # and there is no extended term; #; # - number counting form: in which there is no discriminating variable; # and the counts are modeled directly (see HybridInstructional); # eg: P(N) = Pois(N|S+B); # in this case the dataset has 1 row corresponding to N events; # and the extended term is the PDF itself.; #; # Here we convert the number counting form into the standard form by; # introducing a dummy discriminating variable m with a uniform distribution.; #; # This example:; # - demonstrates the usage of the HybridCalcultor (Part 4-6); # - demonstrates the numerical integration of RooFit (Part 2); # - validates the RooStats against an example with a known analytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to ",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:1020,Modifiability,variab,variable,1020,"# \file; # \ingroup tutorial_roostats; # \notebook -js; # A hypothesis testing example based on number counting with background uncertainty.; #; # A hypothesis testing example based on number counting; # with background uncertainty.; #; # NOTE: This example is like HybridInstructional, but the model is more clearly; # generalizable to an analysis with shapes. There is a lot of flexibility; # for how one models a problem in RooFit/RooStats. Models come in a few; # common forms:; # - standard form: extended PDF of some discriminating variable m:; # eg: P(m) ~ S*fs(m) + B*fb(m), with S+B events expected; # in this case the dataset has N rows corresponding to N events; # and the extended term is Pois(N|S+B); #; # - fractional form: non-extended PDF of some discriminating variable m:; # eg: P(m) ~ s*fs(m) + (1-s)*fb(m), where s is a signal fraction; # in this case the dataset has N rows corresponding to N events; # and there is no extended term; #; # - number counting form: in which there is no discriminating variable; # and the counts are modeled directly (see HybridInstructional); # eg: P(N) = Pois(N|S+B); # in this case the dataset has 1 row corresponding to N events; # and the extended term is the PDF itself.; #; # Here we convert the number counting form into the standard form by; # introducing a dummy discriminating variable m with a uniform distribution.; #; # This example:; # - demonstrates the usage of the HybridCalcultor (Part 4-6); # - demonstrates the numerical integration of RooFit (Part 2); # - validates the RooStats against an example with a known analytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to ",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:1195,Modifiability,extend,extended,1195,"# \file; # \ingroup tutorial_roostats; # \notebook -js; # A hypothesis testing example based on number counting with background uncertainty.; #; # A hypothesis testing example based on number counting; # with background uncertainty.; #; # NOTE: This example is like HybridInstructional, but the model is more clearly; # generalizable to an analysis with shapes. There is a lot of flexibility; # for how one models a problem in RooFit/RooStats. Models come in a few; # common forms:; # - standard form: extended PDF of some discriminating variable m:; # eg: P(m) ~ S*fs(m) + B*fb(m), with S+B events expected; # in this case the dataset has N rows corresponding to N events; # and the extended term is Pois(N|S+B); #; # - fractional form: non-extended PDF of some discriminating variable m:; # eg: P(m) ~ s*fs(m) + (1-s)*fb(m), where s is a signal fraction; # in this case the dataset has N rows corresponding to N events; # and there is no extended term; #; # - number counting form: in which there is no discriminating variable; # and the counts are modeled directly (see HybridInstructional); # eg: P(N) = Pois(N|S+B); # in this case the dataset has 1 row corresponding to N events; # and the extended term is the PDF itself.; #; # Here we convert the number counting form into the standard form by; # introducing a dummy discriminating variable m with a uniform distribution.; #; # This example:; # - demonstrates the usage of the HybridCalcultor (Part 4-6); # - demonstrates the numerical integration of RooFit (Part 2); # - validates the RooStats against an example with a known analytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to ",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:1339,Modifiability,variab,variable,1339,"s more clearly; # generalizable to an analysis with shapes. There is a lot of flexibility; # for how one models a problem in RooFit/RooStats. Models come in a few; # common forms:; # - standard form: extended PDF of some discriminating variable m:; # eg: P(m) ~ S*fs(m) + B*fb(m), with S+B events expected; # in this case the dataset has N rows corresponding to N events; # and the extended term is Pois(N|S+B); #; # - fractional form: non-extended PDF of some discriminating variable m:; # eg: P(m) ~ s*fs(m) + (1-s)*fb(m), where s is a signal fraction; # in this case the dataset has N rows corresponding to N events; # and there is no extended term; #; # - number counting form: in which there is no discriminating variable; # and the counts are modeled directly (see HybridInstructional); # eg: P(N) = Pois(N|S+B); # in this case the dataset has 1 row corresponding to N events; # and the extended term is the PDF itself.; #; # Here we convert the number counting form into the standard form by; # introducing a dummy discriminating variable m with a uniform distribution.; #; # This example:; # - demonstrates the usage of the HybridCalcultor (Part 4-6); # - demonstrates the numerical integration of RooFit (Part 2); # - validates the RooStats against an example with a known analytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to base it on an auxiliary measurement. In this case, the auxiliary; # measurement (aka control measurement, sideband) is another counting experiment; # with measurement y and expectation tau*b. With an 'original prior' on b,; # called \f$ \eta(b) \f$ then one can obtain a posterior from the auxiliary me",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:1529,Security,validat,validates,1529,"onding to N events; # and the extended term is Pois(N|S+B); #; # - fractional form: non-extended PDF of some discriminating variable m:; # eg: P(m) ~ s*fs(m) + (1-s)*fb(m), where s is a signal fraction; # in this case the dataset has N rows corresponding to N events; # and there is no extended term; #; # - number counting form: in which there is no discriminating variable; # and the counts are modeled directly (see HybridInstructional); # eg: P(N) = Pois(N|S+B); # in this case the dataset has 1 row corresponding to N events; # and the extended term is the PDF itself.; #; # Here we convert the number counting form into the standard form by; # introducing a dummy discriminating variable m with a uniform distribution.; #; # This example:; # - demonstrates the usage of the HybridCalcultor (Part 4-6); # - demonstrates the numerical integration of RooFit (Part 2); # - validates the RooStats against an example with a known analytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to base it on an auxiliary measurement. In this case, the auxiliary; # measurement (aka control measurement, sideband) is another counting experiment; # with measurement y and expectation tau*b. With an 'original prior' on b,; # called \f$ \eta(b) \f$ then one can obtain a posterior from the auxiliary measurement; # \f$ \pi(b) = \eta(b) * Pois(y|tau*b) \f$. This is a principled choice for a prior; # on b in the main measurement of x, which can then be treated in a hybrid; # Bayesian/Frequentist way. Additionally, one can try to treat the two; # measurements simultaneously, which is detailed in Part 6 of the tutorial.; #; # This tutorial is related ",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:71,Testability,test,testing,71,"# \file; # \ingroup tutorial_roostats; # \notebook -js; # A hypothesis testing example based on number counting with background uncertainty.; #; # A hypothesis testing example based on number counting; # with background uncertainty.; #; # NOTE: This example is like HybridInstructional, but the model is more clearly; # generalizable to an analysis with shapes. There is a lot of flexibility; # for how one models a problem in RooFit/RooStats. Models come in a few; # common forms:; # - standard form: extended PDF of some discriminating variable m:; # eg: P(m) ~ S*fs(m) + B*fb(m), with S+B events expected; # in this case the dataset has N rows corresponding to N events; # and the extended term is Pois(N|S+B); #; # - fractional form: non-extended PDF of some discriminating variable m:; # eg: P(m) ~ s*fs(m) + (1-s)*fb(m), where s is a signal fraction; # in this case the dataset has N rows corresponding to N events; # and there is no extended term; #; # - number counting form: in which there is no discriminating variable; # and the counts are modeled directly (see HybridInstructional); # eg: P(N) = Pois(N|S+B); # in this case the dataset has 1 row corresponding to N events; # and the extended term is the PDF itself.; #; # Here we convert the number counting form into the standard form by; # introducing a dummy discriminating variable m with a uniform distribution.; #; # This example:; # - demonstrates the usage of the HybridCalcultor (Part 4-6); # - demonstrates the numerical integration of RooFit (Part 2); # - validates the RooStats against an example with a known analytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to ",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:160,Testability,test,testing,160,"# \file; # \ingroup tutorial_roostats; # \notebook -js; # A hypothesis testing example based on number counting with background uncertainty.; #; # A hypothesis testing example based on number counting; # with background uncertainty.; #; # NOTE: This example is like HybridInstructional, but the model is more clearly; # generalizable to an analysis with shapes. There is a lot of flexibility; # for how one models a problem in RooFit/RooStats. Models come in a few; # common forms:; # - standard form: extended PDF of some discriminating variable m:; # eg: P(m) ~ S*fs(m) + B*fb(m), with S+B events expected; # in this case the dataset has N rows corresponding to N events; # and the extended term is Pois(N|S+B); #; # - fractional form: non-extended PDF of some discriminating variable m:; # eg: P(m) ~ s*fs(m) + (1-s)*fb(m), where s is a signal fraction; # in this case the dataset has N rows corresponding to N events; # and there is no extended term; #; # - number counting form: in which there is no discriminating variable; # and the counts are modeled directly (see HybridInstructional); # eg: P(N) = Pois(N|S+B); # in this case the dataset has 1 row corresponding to N events; # and the extended term is the PDF itself.; #; # Here we convert the number counting form into the standard form by; # introducing a dummy discriminating variable m with a uniform distribution.; #; # This example:; # - demonstrates the usage of the HybridCalcultor (Part 4-6); # - demonstrates the numerical integration of RooFit (Part 2); # - validates the RooStats against an example with a known analytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to ",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:1637,Testability,test,test,1637,"onding to N events; # and the extended term is Pois(N|S+B); #; # - fractional form: non-extended PDF of some discriminating variable m:; # eg: P(m) ~ s*fs(m) + (1-s)*fb(m), where s is a signal fraction; # in this case the dataset has N rows corresponding to N events; # and there is no extended term; #; # - number counting form: in which there is no discriminating variable; # and the counts are modeled directly (see HybridInstructional); # eg: P(N) = Pois(N|S+B); # in this case the dataset has 1 row corresponding to N events; # and the extended term is the PDF itself.; #; # Here we convert the number counting form into the standard form by; # introducing a dummy discriminating variable m with a uniform distribution.; #; # This example:; # - demonstrates the usage of the HybridCalcultor (Part 4-6); # - demonstrates the numerical integration of RooFit (Part 2); # - validates the RooStats against an example with a known analytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to base it on an auxiliary measurement. In this case, the auxiliary; # measurement (aka control measurement, sideband) is another counting experiment; # with measurement y and expectation tau*b. With an 'original prior' on b,; # called \f$ \eta(b) \f$ then one can obtain a posterior from the auxiliary measurement; # \f$ \pi(b) = \eta(b) * Pois(y|tau*b) \f$. This is a principled choice for a prior; # on b in the main measurement of x, which can then be treated in a hybrid; # Bayesian/Frequentist way. Additionally, one can try to treat the two; # measurements simultaneously, which is detailed in Part 6 of the tutorial.; #; # This tutorial is related ",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:2726,Testability,test,testing,2726,"ytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to base it on an auxiliary measurement. In this case, the auxiliary; # measurement (aka control measurement, sideband) is another counting experiment; # with measurement y and expectation tau*b. With an 'original prior' on b,; # called \f$ \eta(b) \f$ then one can obtain a posterior from the auxiliary measurement; # \f$ \pi(b) = \eta(b) * Pois(y|tau*b) \f$. This is a principled choice for a prior; # on b in the main measurement of x, which can then be treated in a hybrid; # Bayesian/Frequentist way. Additionally, one can try to treat the two; # measurements simultaneously, which is detailed in Part 6 of the tutorial.; #; # This tutorial is related to the FourBin.C tutorial in the modeling, but; # focuses on hypothesis testing instead of interval estimation.; #; # More background on this 'prototype problem' can be found in the; # following papers:; #; # - Evaluation of three methods for calculating statistical significance; # when incorporating a systematic uncertainty into a test of the; # background-only hypothesis for a Poisson process; # Authors: Robert D. Cousins, James T. Linnemann, Jordan Tucker; # http:#arxiv.org/abs/physics/0702156; # NIM A 595 (2008) 480--501; #; # - Statistical Challenges for Searches for New Physics at the LHC; # Author: Kyle Cranmer; # http:#arxiv.org/abs/physics/0511028; #; # - Measures of Significance in HEP and Astrophysics; # Author: J. T. Linnemann; # http:#arxiv.org/abs/physics/0312059; #; # \macro_image; # \macro_output; # \macro_code; #; # \authors Kyle Cranmer, Wouter Verkerke, Sven Kreiss, and Jolly Chen (Python translation)",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:2988,Testability,test,test,2988,"ytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to base it on an auxiliary measurement. In this case, the auxiliary; # measurement (aka control measurement, sideband) is another counting experiment; # with measurement y and expectation tau*b. With an 'original prior' on b,; # called \f$ \eta(b) \f$ then one can obtain a posterior from the auxiliary measurement; # \f$ \pi(b) = \eta(b) * Pois(y|tau*b) \f$. This is a principled choice for a prior; # on b in the main measurement of x, which can then be treated in a hybrid; # Bayesian/Frequentist way. Additionally, one can try to treat the two; # measurements simultaneously, which is detailed in Part 6 of the tutorial.; #; # This tutorial is related to the FourBin.C tutorial in the modeling, but; # focuses on hypothesis testing instead of interval estimation.; #; # More background on this 'prototype problem' can be found in the; # following papers:; #; # - Evaluation of three methods for calculating statistical significance; # when incorporating a systematic uncertainty into a test of the; # background-only hypothesis for a Poisson process; # Authors: Robert D. Cousins, James T. Linnemann, Jordan Tucker; # http:#arxiv.org/abs/physics/0702156; # NIM A 595 (2008) 480--501; #; # - Statistical Challenges for Searches for New Physics at the LHC; # Author: Kyle Cranmer; # http:#arxiv.org/abs/physics/0511028; #; # - Measures of Significance in HEP and Astrophysics; # Author: J. T. Linnemann; # http:#arxiv.org/abs/physics/0312059; #; # \macro_image; # \macro_output; # \macro_code; #; # \authors Kyle Cranmer, Wouter Verkerke, Sven Kreiss, and Jolly Chen (Python translation)",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:309,Usability,clear,clearly,309,"# \file; # \ingroup tutorial_roostats; # \notebook -js; # A hypothesis testing example based on number counting with background uncertainty.; #; # A hypothesis testing example based on number counting; # with background uncertainty.; #; # NOTE: This example is like HybridInstructional, but the model is more clearly; # generalizable to an analysis with shapes. There is a lot of flexibility; # for how one models a problem in RooFit/RooStats. Models come in a few; # common forms:; # - standard form: extended PDF of some discriminating variable m:; # eg: P(m) ~ S*fs(m) + B*fb(m), with S+B events expected; # in this case the dataset has N rows corresponding to N events; # and the extended term is Pois(N|S+B); #; # - fractional form: non-extended PDF of some discriminating variable m:; # eg: P(m) ~ s*fs(m) + (1-s)*fb(m), where s is a signal fraction; # in this case the dataset has N rows corresponding to N events; # and there is no extended term; #; # - number counting form: in which there is no discriminating variable; # and the counts are modeled directly (see HybridInstructional); # eg: P(N) = Pois(N|S+B); # in this case the dataset has 1 row corresponding to N events; # and the extended term is the PDF itself.; #; # Here we convert the number counting form into the standard form by; # introducing a dummy discriminating variable m with a uniform distribution.; #; # This example:; # - demonstrates the usage of the HybridCalcultor (Part 4-6); # - demonstrates the numerical integration of RooFit (Part 2); # - validates the RooStats against an example with a known analytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to ",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:7,Deployability,configurat,configuration,7,"# User configuration parameters",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:7,Modifiability,config,configuration,7,"# User configuration parameters",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:142,Usability,simpl,simply,142,"# ratio Ntoys Null/ntoys ALT; # -------------------------------------------------------; # A New Test Statistic Class for this example.; # It simply returns the sum of the values in a particular; # column of a dataset.; # You can ignore this class and focus on the macro below",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:336,Integrability,interface,interface,336,"""""""; using namespace RooFit;; using namespace RooStats;. class BinCountTestStat : public TestStatistic {; public:; BinCountTestStat(void) : fColumnName(""tmp"") {}; BinCountTestStat(string columnName) : fColumnName(columnName) {}. virtual Double_t Evaluate(RooAbsData &data, RooArgSet & /*nullPOI*/); {; // This is the main method in the interface; Double_t value = 0.0;; for (int i = 0; i < data.numEntries(); i++) {; value += data.get(i)->getRealValue(fColumnName.c_str());; }; return value;; }; virtual const TString GetVarName() const { return fColumnName; }. private:; string fColumnName;. protected:; ClassDef(BinCountTestStat, 1); };; """"""",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:428,Testability,test,test,428,"# -----------------------------; # The Actual Tutorial Macro; # -----------------------------; # This tutorial has 6 parts; # Table of Contents; # Setup; # 1. Make the model for the 'prototype problem'; # Special cases; # 2. NOT RELEVANT HERE; # 3. Use RooStats analytic solution for this problem; # RooStats HybridCalculator -- can be generalized; # 4. RooStats ToyMC version of 2. & 3.; # 5. RooStats ToyMC with an equivalent test statistic; # 6. RooStats ToyMC with simultaneous control & main measurement; # Part 4 takes ~4 min without PROOF.; # Part 5 takes about ~2 min with PROOF on 4 cores.; # Of course, everything looks nicer with more toys, which takes longer.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:30,Modifiability,variab,variable,30,"# m is a dummy discriminating variable",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:80,Integrability,message,messages,80,"# We will control the output level in a few places to avoid; # verbose progress messages. We start by keeping track; # of the current threshold on messages.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:147,Integrability,message,messages,147,"# We will control the output level in a few places to avoid; # verbose progress messages. We start by keeping track; # of the current threshold on messages.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:54,Safety,avoid,avoid,54,"# We will control the output level in a few places to avoid; # verbose progress messages. We start by keeping track; # of the current threshold on messages.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:773,Modifiability,variab,variables,773,"# --------------------------------------------------------------; # P A R T 4 : U S I N G H Y B R I D C A L C U L A T O R; # ==============================================================; # Now we demonstrate the RooStats HybridCalculator.; #; # Like all RooStats calculators it needs the data and a ModelConfig; # for the relevant hypotheses. Since we are doing hypothesis testing; # we need a ModelConfig for the null (background only) and the alternate; # (signal+background) hypotheses. We also need to specify the PDF,; # the parameters of interest, and the observables. Furthermore, since; # the parameter of interest is floating, we need to specify which values; # of the parameter corresponds to the null and alternate (eg. s=0 and s=50); #; # define some sets of variables obs={x} and poi={s}; # note here, x is the only observable in the main measurement; # and y is treated as a separate measurement, which is used; # to produce the prior that will be used in this calculation; # to randomize the nuisance parameters.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:375,Testability,test,testing,375,"# --------------------------------------------------------------; # P A R T 4 : U S I N G H Y B R I D C A L C U L A T O R; # ==============================================================; # Now we demonstrate the RooStats HybridCalculator.; #; # Like all RooStats calculators it needs the data and a ModelConfig; # for the relevant hypotheses. Since we are doing hypothesis testing; # we need a ModelConfig for the null (background only) and the alternate; # (signal+background) hypotheses. We also need to specify the PDF,; # the parameters of interest, and the observables. Furthermore, since; # the parameter of interest is floating, we need to specify which values; # of the parameter corresponds to the null and alternate (eg. s=0 and s=50); #; # define some sets of variables obs={x} and poi={s}; # note here, x is the only observable in the main measurement; # and y is treated as a separate measurement, which is used; # to produce the prior that will be used in this calculation; # to randomize the nuisance parameters.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:314,Integrability,interface,interface,314,"# Part 3b : Choose Test Statistic; # --------------------------------------------------------------; # To make an equivalent calculation we need to use x as the test; # statistic. This is not a built-in test statistic in RooStats; # so we define it above. The new class inherits from the; # RooStats.TestStatistic interface, and simply returns the value; # of x in the dataset.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:270,Modifiability,inherit,inherits,270,"# Part 3b : Choose Test Statistic; # --------------------------------------------------------------; # To make an equivalent calculation we need to use x as the test; # statistic. This is not a built-in test statistic in RooStats; # so we define it above. The new class inherits from the; # RooStats.TestStatistic interface, and simply returns the value; # of x in the dataset.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:161,Testability,test,test,161,"# Part 3b : Choose Test Statistic; # --------------------------------------------------------------; # To make an equivalent calculation we need to use x as the test; # statistic. This is not a built-in test statistic in RooStats; # so we define it above. The new class inherits from the; # RooStats.TestStatistic interface, and simply returns the value; # of x in the dataset.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:203,Testability,test,test,203,"# Part 3b : Choose Test Statistic; # --------------------------------------------------------------; # To make an equivalent calculation we need to use x as the test; # statistic. This is not a built-in test statistic in RooStats; # so we define it above. The new class inherits from the; # RooStats.TestStatistic interface, and simply returns the value; # of x in the dataset.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:329,Usability,simpl,simply,329,"# Part 3b : Choose Test Statistic; # --------------------------------------------------------------; # To make an equivalent calculation we need to use x as the test; # statistic. This is not a built-in test statistic in RooStats; # so we define it above. The new class inherits from the; # RooStats.TestStatistic interface, and simply returns the value; # of x in the dataset.",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:82,Testability,log,log-normal,82,"# this corresponds to the ""Z_N"" calculation.; #; # or one could use the analogous log-normal prior",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:680,Modifiability,config,configure,680,"#; # Ideally, the HybridCalculator would be able to inspect the full; # model Pois(x | s+b) * Pois(y | tau b ) and be given the original; # prior $\eta(b)$ to form $\pi(b) = Pois(y|tau*b) * \eta(b)$.; # This is not yet implemented because in the general case; # it is not easy to identify the terms in the PDF that correspond; # to the auxiliary measurement. So for now, it must be set; # explicitly with:; # - ForcePriorNuisanceNull(); # - ForcePriorNuisanceAlt(); # the name ""ForcePriorNuisance"" was chosen because we anticipate; # this to be auto-detected, but will leave the option open; # to force to a different prior for the nuisance parameters.; # Part 3d : Construct and configure the HybridCalculator; # -------------------------------------------------------",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:550,Safety,detect,detected,550,"#; # Ideally, the HybridCalculator would be able to inspect the full; # model Pois(x | s+b) * Pois(y | tau b ) and be given the original; # prior $\eta(b)$ to form $\pi(b) = Pois(y|tau*b) * \eta(b)$.; # This is not yet implemented because in the general case; # it is not easy to identify the terms in the PDF that correspond; # to the auxiliary measurement. So for now, it must be set; # explicitly with:; # - ForcePriorNuisanceNull(); # - ForcePriorNuisanceAlt(); # the name ""ForcePriorNuisance"" was chosen because we anticipate; # this to be auto-detected, but will leave the option open; # to force to a different prior for the nuisance parameters.; # Part 3d : Construct and configure the HybridCalculator; # -------------------------------------------------------",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:10,Testability,test,test,10,"# set the test statistic; # toymcs1.SetGenerateBinned()",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:411,Integrability,message,messages,411,"# if you wanted to use the ad hoc Gaussian prior instead; # ~~~; # hc1.ForcePriorNuisanceAlt(w.pdf(""gauss_prior"")); # hc1.ForcePriorNuisanceNull(w.pdf(""gauss_prior"")); # ~~~; # if you wanted to use the ad hoc log-normal prior instead; # ~~~; # hc1.ForcePriorNuisanceAlt(w.pdf(""lognorm_prior"")); # hc1.ForcePriorNuisanceNull(w.pdf(""lognorm_prior"")); # ~~~; # these lines save current msg level and then kill any messages below ERROR",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:209,Testability,log,log-normal,209,"# if you wanted to use the ad hoc Gaussian prior instead; # ~~~; # hc1.ForcePriorNuisanceAlt(w.pdf(""gauss_prior"")); # hc1.ForcePriorNuisanceNull(w.pdf(""gauss_prior"")); # ~~~; # if you wanted to use the ad hoc log-normal prior instead; # ~~~; # hc1.ForcePriorNuisanceAlt(w.pdf(""lognorm_prior"")); # hc1.ForcePriorNuisanceNull(w.pdf(""lognorm_prior"")); # ~~~; # these lines save current msg level and then kill any messages below ERROR",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:267,Testability,test,test,267,"# keep the running time short by default; # -------------------------------------------------------------------------; # # P A R T 5 : U S I N G H Y B R I D C A L C U L A T O R W I T H; # # A N A L T E R N A T I V E T E S T S T A T I S T I C; #; # A likelihood ratio test statistics should be 1-to-1 with the count x; # when the value of b is fixed in the likelihood. This is implemented; # by the SimpleLikelihoodRatioTestStat",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:411,Integrability,message,messages,411,"# if you wanted to use the ad hoc Gaussian prior instead; # ~~~; # hc2.ForcePriorNuisanceAlt(w.pdf(""gauss_prior"")); # hc2.ForcePriorNuisanceNull(w.pdf(""gauss_prior"")); # ~~~; # if you wanted to use the ad hoc log-normal prior instead; # ~~~; # hc2.ForcePriorNuisanceAlt(w.pdf(""lognorm_prior"")); # hc2.ForcePriorNuisanceNull(w.pdf(""lognorm_prior"")); # ~~~; # these lines save current msg level and then kill any messages below ERROR",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:209,Testability,log,log-normal,209,"# if you wanted to use the ad hoc Gaussian prior instead; # ~~~; # hc2.ForcePriorNuisanceAlt(w.pdf(""gauss_prior"")); # hc2.ForcePriorNuisanceNull(w.pdf(""gauss_prior"")); # ~~~; # if you wanted to use the ad hoc log-normal prior instead; # ~~~; # hc2.ForcePriorNuisanceAlt(w.pdf(""lognorm_prior"")); # hc2.ForcePriorNuisanceNull(w.pdf(""lognorm_prior"")); # ~~~; # these lines save current msg level and then kill any messages below ERROR",MatchSource.CODE_COMMENT,tutorials/roostats/HybridStandardForm.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/IntervalExamples.py:329,Security,validat,validate,329,"## \file; ## \ingroup tutorial_roostats; ## \notebook; ## Example showing confidence intervals with four techniques.; ##; ## An example that shows confidence intervals with four techniques.; ## The model is a Normal Gaussian G(x|mu,sigma) with 100 samples of x.; ## The answer is known analytically, so this is a good example to validate; ## the RooStats tools.; ##; ## - expected interval is [-0.162917, 0.229075]; ## - plc interval is [-0.162917, 0.229075]; ## - fc interval is [-0.17 , 0.23] // stepsize is 0.01; ## - bc interval is [-0.162918, 0.229076]; ## - mcmc interval is [-0.166999, 0.230224]; ##; ## \macro_image; ## \macro_output; ## \macro_code; ##; ## \date July 2022; ## \authors Artem Busorgin, Kyle Cranmer (C++ version)",MatchSource.CODE_COMMENT,tutorials/roostats/IntervalExamples.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/IntervalExamples.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/IntervalExamples.py:9,Usability,simpl,simple,9,"# make a simple model via the workspace factory",MatchSource.CODE_COMMENT,tutorials/roostats/IntervalExamples.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/IntervalExamples.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/IntervalExamples.py:22,Testability,test,test,22,"# number of points to test per parameter",MatchSource.CODE_COMMENT,tutorials/roostats/IntervalExamples.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/IntervalExamples.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/IntervalExamples.py:92,Modifiability,extend,extended,92,"# make it go faster; # Here, we consider only ensembles with 100 events; # The PDF could be extended and this could be removed",MatchSource.CODE_COMMENT,tutorials/roostats/IntervalExamples.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/IntervalExamples.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/IntervalExamples.py:117,Availability,fault,faults,117,"# TODO: The BayesianCalculator and MCMCCalculator have to be destructed first.; # Otherwise, we can get segmentation faults depending on the destruction order,; # which is random in Python. Probably the issue is that some object has a; # non-owning pointer to another object, which it uses in its destructor. This; # should be fixed either in the design of RooStats in C++, or with; # phythonizations.",MatchSource.CODE_COMMENT,tutorials/roostats/IntervalExamples.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/IntervalExamples.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/IntervalExamples.py:124,Integrability,depend,depending,124,"# TODO: The BayesianCalculator and MCMCCalculator have to be destructed first.; # Otherwise, we can get segmentation faults depending on the destruction order,; # which is random in Python. Probably the issue is that some object has a; # non-owning pointer to another object, which it uses in its destructor. This; # should be fixed either in the design of RooStats in C++, or with; # phythonizations.",MatchSource.CODE_COMMENT,tutorials/roostats/IntervalExamples.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/IntervalExamples.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/MultivariateGaussianTest.py:405,Testability,test,test,405,"## \file; ## \ingroup tutorial_roostats; ## \notebook; ## Comparison of MCMC and PLC in a multi-variate gaussian problem; ##; ## This tutorial produces an N-dimensional multivariate Gaussian; ## with a non-trivial covariance matrix. By default N=4 (called ""dim"").; ##; ## A subset of these are considered parameters of interest.; ## This problem is tractable analytically.; ##; ## We use this mainly as a test of Markov Chain Monte Carlo; ## and we compare the result to the profile likelihood ratio.; ##; ## We use the proposal helper to create a customized; ## proposal function for this problem.; ##; ## For N=4 and 2 parameters of interest it takes about 10-20 seconds; ## and the acceptance rate is 37%; ##; ## \macro_image; ## \macro_output; ## \macro_code; ##; ## \date July 2022; ## \authors Artem Busorgin, Kevin Belasco and Kyle Cranmer (C++ version)",MatchSource.CODE_COMMENT,tutorials/roostats/MultivariateGaussianTest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/MultivariateGaussianTest.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/MultivariateGaussianTest.py:23,Modifiability,config,config,23,"# now create the model config for this problem",MatchSource.CODE_COMMENT,tutorials/roostats/MultivariateGaussianTest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/MultivariateGaussianTest.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/MultivariateGaussianTest.py:110,Energy Efficiency,efficient,efficient,110,"# -------------------------------------------------------; # Setup calculators; # MCMC; # we want to setup an efficient proposal function; # using the covariance matrix from a fit to the data",MatchSource.CODE_COMMENT,tutorials/roostats/MultivariateGaussianTest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/MultivariateGaussianTest.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/MultivariateGaussianTest.py:93,Availability,fault,faults,93,"# TODO: The MCMCCalculator has to be destructed first. Otherwise, we can get; # segmentation faults depending on the destruction order, which is random in; # Python. Probably the issue is that some object has a non-owning pointer to; # another object, which it uses in its destructor. This should be fixed either; # in the design of RooStats in C++, or with phythonizations.",MatchSource.CODE_COMMENT,tutorials/roostats/MultivariateGaussianTest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/MultivariateGaussianTest.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/MultivariateGaussianTest.py:100,Integrability,depend,depending,100,"# TODO: The MCMCCalculator has to be destructed first. Otherwise, we can get; # segmentation faults depending on the destruction order, which is random in; # Python. Probably the issue is that some object has a non-owning pointer to; # another object, which it uses in its destructor. This should be fixed either; # in the design of RooStats in C++, or with phythonizations.",MatchSource.CODE_COMMENT,tutorials/roostats/MultivariateGaussianTest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/MultivariateGaussianTest.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs101_limitexample.py:22,Testability,test,test,22,"# number of points to test per parameter",MatchSource.CODE_COMMENT,tutorials/roostats/rs101_limitexample.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs101_limitexample.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs101_limitexample.py:70,Modifiability,config,configuring,70,"# Third, use a Calculator based on Markov Chain monte carlo; # Before configuring the calculator, let's make a ProposalFunction; # that will achieve a high acceptance rate",MatchSource.CODE_COMMENT,tutorials/roostats/rs101_limitexample.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs101_limitexample.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py:347,Modifiability,variab,variable,347,"# \file; # \ingroup roostats_python_tutorials; # \notebook -js; # SPlot tutorial; #; # This tutorial shows an example of using SPlot to unfold two distributions.; # The physics context for the example is that we want to know; # the isolation distribution for real electrons from Z events; # and fake electrons from QCD. Isolation is our 'control' variable.; # To unfold them, we need a model for an uncorrelated variable that; # discriminates between Z and QCD. To do this, we use the invariant; # mass of two electrons. We model the Z with a Gaussian and the QCD; # with a falling exponential.; #; # Note, since we don't have real data in this tutorial, we need to generate; # toy data. To do that we need a model for the isolation variable for; # both Z and QCD. This is only used to generate the toy data, and would; # not be needed if we had real data.; #; # \macro_image; # \macro_code; # \macro_output; #; # \authors P. P., Kyle Cranmer (C++ version)",MatchSource.CODE_COMMENT,tutorials/roostats/rs301_splot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py:412,Modifiability,variab,variable,412,"# \file; # \ingroup roostats_python_tutorials; # \notebook -js; # SPlot tutorial; #; # This tutorial shows an example of using SPlot to unfold two distributions.; # The physics context for the example is that we want to know; # the isolation distribution for real electrons from Z events; # and fake electrons from QCD. Isolation is our 'control' variable.; # To unfold them, we need a model for an uncorrelated variable that; # discriminates between Z and QCD. To do this, we use the invariant; # mass of two electrons. We model the Z with a Gaussian and the QCD; # with a falling exponential.; #; # Note, since we don't have real data in this tutorial, we need to generate; # toy data. To do that we need a model for the isolation variable for; # both Z and QCD. This is only used to generate the toy data, and would; # not be needed if we had real data.; #; # \macro_image; # \macro_code; # \macro_output; #; # \authors P. P., Kyle Cranmer (C++ version)",MatchSource.CODE_COMMENT,tutorials/roostats/rs301_splot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py:733,Modifiability,variab,variable,733,"# \file; # \ingroup roostats_python_tutorials; # \notebook -js; # SPlot tutorial; #; # This tutorial shows an example of using SPlot to unfold two distributions.; # The physics context for the example is that we want to know; # the isolation distribution for real electrons from Z events; # and fake electrons from QCD. Isolation is our 'control' variable.; # To unfold them, we need a model for an uncorrelated variable that; # discriminates between Z and QCD. To do this, we use the invariant; # mass of two electrons. We model the Z with a Gaussian and the QCD; # with a falling exponential.; #; # Note, since we don't have real data in this tutorial, we need to generate; # toy data. To do that we need a model for the isolation variable for; # both Z and QCD. This is only used to generate the toy data, and would; # not be needed if we had real data.; #; # \macro_image; # \macro_code; # \macro_output; #; # \authors P. P., Kyle Cranmer (C++ version)",MatchSource.CODE_COMMENT,tutorials/roostats/rs301_splot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py:26,Modifiability,variab,variables,26,"# combined model; # These variables represent the number of Z or QCD events; # They will be fitted.",MatchSource.CODE_COMMENT,tutorials/roostats/rs301_splot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py:63,Modifiability,variab,variable,63,"# Now we use the SPlot class to add SWeights for the isolation variable to; # our data set based on fitting the yields to the invariant mass variable.; # Any keyword arguments will be forwarded to the underlying call to RooAbsPdf::fitTo().",MatchSource.CODE_COMMENT,tutorials/roostats/rs301_splot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py:141,Modifiability,variab,variable,141,"# Now we use the SPlot class to add SWeights for the isolation variable to; # our data set based on fitting the yields to the invariant mass variable.; # Any keyword arguments will be forwarded to the underlying call to RooAbsPdf::fitTo().",MatchSource.CODE_COMMENT,tutorials/roostats/rs301_splot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py:43,Modifiability,variab,variable,43,"# Here we make plots of the discriminating variable (invMass) after the fit; # and of the control variable (isolation) after unfolding with sPlot.; # make our canvas",MatchSource.CODE_COMMENT,tutorials/roostats/rs301_splot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py:98,Modifiability,variab,variable,98,"# Here we make plots of the discriminating variable (invMass) after the fit; # and of the control variable (isolation) after unfolding with sPlot.; # make our canvas",MatchSource.CODE_COMMENT,tutorials/roostats/rs301_splot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py:402,Modifiability,variab,variable,402,"# Now use the sWeights to show isolation distribution for Z and QCD.; # The SPlot class can make this easier, but here we demonstrate in more; # detail how the sWeights are used. The SPlot class should make this; # very easy and needs some more development.; # Plot isolation for Z component.; # Do this by plotting all events weighted by the sWeight for the Z component.; # The SPlot class adds a new variable that has the name of the corresponding; # yield + ""_sw"".",MatchSource.CODE_COMMENT,tutorials/roostats/rs301_splot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py:59,Availability,error,errors,59,"# Since the data are weighted, we use SumW2 to compute the errors.",MatchSource.CODE_COMMENT,tutorials/roostats/rs301_splot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py:136,Modifiability,variab,variable,136,"# Plot isolation for QCD component.; # Eg. plot all events weighted by the sWeight for the QCD component.; # The SPlot class adds a new variable that has the name of the corresponding; # yield + ""_sw"".",MatchSource.CODE_COMMENT,tutorials/roostats/rs301_splot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py:45,Modifiability,variab,variable,45,"# Make some plots showing the discriminating variable and; # the control variable after unfolding.",MatchSource.CODE_COMMENT,tutorials/roostats/rs301_splot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py:73,Modifiability,variab,variable,73,"# Make some plots showing the discriminating variable and; # the control variable after unfolding.",MatchSource.CODE_COMMENT,tutorials/roostats/rs301_splot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs301_splot.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs401c_FeldmanCousins.py:9,Usability,simpl,simple,9,"# make a simple model",MatchSource.CODE_COMMENT,tutorials/roostats/rs401c_FeldmanCousins.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs401c_FeldmanCousins.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs401c_FeldmanCousins.py:14,Testability,test,test,14,"# set size of test",MatchSource.CODE_COMMENT,tutorials/roostats/rs401c_FeldmanCousins.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs401c_FeldmanCousins.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs401c_FeldmanCousins.py:22,Testability,test,test,22,"# number of points to test per parameter; # use the Feldman-Cousins tool",MatchSource.CODE_COMMENT,tutorials/roostats/rs401c_FeldmanCousins.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs401c_FeldmanCousins.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs401c_FeldmanCousins.py:22,Testability,test,test,22,"# loop over points to test",MatchSource.CODE_COMMENT,tutorials/roostats/rs401c_FeldmanCousins.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs401c_FeldmanCousins.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs401c_FeldmanCousins.py:51,Testability,test,test,51,"# get a parameter point from the list of points to test.",MatchSource.CODE_COMMENT,tutorials/roostats/rs401c_FeldmanCousins.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs401c_FeldmanCousins.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs601_HLFactoryexample.py:96,Usability,simpl,simple,96,"## \file; ## \ingroup tutorial_roostats; ## \notebook -js; ## High Level Factory: creation of a simple model; ##; ## \macro_image; ## \macro_output; ## \macro_code; ##; ## \date July 2022; ## \authors Artem Busorgin, Danilo Piparo (C++ version)",MatchSource.CODE_COMMENT,tutorials/roostats/rs601_HLFactoryexample.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs601_HLFactoryexample.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs601_HLFactoryexample.py:14,Modifiability,extend,extended,14,"# --- Perform extended ML fit of composite PDF to toy data ---",MatchSource.CODE_COMMENT,tutorials/roostats/rs601_HLFactoryexample.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs601_HLFactoryexample.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs701_BayesianCalculator.py:14,Integrability,message,messages,14,"# to suppress messages when pdf goes to zero",MatchSource.CODE_COMMENT,tutorials/roostats/rs701_BayesianCalculator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs701_BayesianCalculator.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs701_BayesianCalculator.py:97,Availability,fault,faults,97,"# TODO: The BayesianCalculator has to be destructed first. Otherwise, we can get; # segmentation faults depending on the destruction order, which is random in; # Python. Probably the issue is that some object has a non-owning pointer to; # another object, which it uses in its destructor. This should be fixed either; # in the design of RooStats in C++, or with phythonizations.",MatchSource.CODE_COMMENT,tutorials/roostats/rs701_BayesianCalculator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs701_BayesianCalculator.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs701_BayesianCalculator.py:104,Integrability,depend,depending,104,"# TODO: The BayesianCalculator has to be destructed first. Otherwise, we can get; # segmentation faults depending on the destruction order, which is random in; # Python. Probably the issue is that some object has a non-owning pointer to; # another object, which it uses in its destructor. This should be fixed either; # in the design of RooStats in C++, or with phythonizations.",MatchSource.CODE_COMMENT,tutorials/roostats/rs701_BayesianCalculator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs701_BayesianCalculator.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_bernsteinCorrection.py:775,Availability,toler,tolerance,775,"## \file; ## \ingroup tutorial_roostats; ## \notebook -js; ## Example of the BernsteinCorrection utility in RooStats.; ##; ## The idea is that one has a distribution coming either from data or Monte Carlo; ## (called ""reality"" in the macro) and a nominal model that is not sufficiently; ## flexible to take into account the real distribution. One wants to take into; ## account the systematic associated with this imperfect modeling by augmenting; ## the nominal model with some correction term (in this case a polynomial).; ## The BernsteinCorrection utility will import into your workspace a corrected model; ## given by nominal(x) * poly_N(x), where poly_N is an n-th order polynomial in; ## the Bernstein basis. The degree N of the polynomial is chosen by specifying the tolerance; ## one has in adding an extra term to the polynomial.; ## The Bernstein basis is nice because it only has positive-definite terms; ## and works well with PDFs.; ## Finally, the macro makes a plot of:; ## - the data (drawn from 'reality'),; ## - the best fit of the nominal model (blue); ## - and the best fit corrected model.; ##; ## \macro_image; ## \macro_output; ## \macro_code; ##; ## \date June 2022; ## \authors Artem Busorgin, Kyle Cranmer (C++ version)",MatchSource.CODE_COMMENT,tutorials/roostats/rs_bernsteinCorrection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_bernsteinCorrection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_bernsteinCorrection.py:290,Modifiability,flexible,flexible,290,"## \file; ## \ingroup tutorial_roostats; ## \notebook -js; ## Example of the BernsteinCorrection utility in RooStats.; ##; ## The idea is that one has a distribution coming either from data or Monte Carlo; ## (called ""reality"" in the macro) and a nominal model that is not sufficiently; ## flexible to take into account the real distribution. One wants to take into; ## account the systematic associated with this imperfect modeling by augmenting; ## the nominal model with some correction term (in this case a polynomial).; ## The BernsteinCorrection utility will import into your workspace a corrected model; ## given by nominal(x) * poly_N(x), where poly_N is an n-th order polynomial in; ## the Bernstein basis. The degree N of the polynomial is chosen by specifying the tolerance; ## one has in adding an extra term to the polynomial.; ## The Bernstein basis is nice because it only has positive-definite terms; ## and works well with PDFs.; ## Finally, the macro makes a plot of:; ## - the data (drawn from 'reality'),; ## - the best fit of the nominal model (blue); ## - and the best fit corrected model.; ##; ## \macro_image; ## \macro_output; ## \macro_code; ##; ## \date June 2022; ## \authors Artem Busorgin, Kyle Cranmer (C++ version)",MatchSource.CODE_COMMENT,tutorials/roostats/rs_bernsteinCorrection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_bernsteinCorrection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_bernsteinCorrection.py:6,Availability,toler,tolerance,6,"# The tolerance sets the probability to add an unnecessary term.; # lower tolerance will add fewer terms, while higher tolerance; # will add more terms and provide a more flexible function.",MatchSource.CODE_COMMENT,tutorials/roostats/rs_bernsteinCorrection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_bernsteinCorrection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_bernsteinCorrection.py:74,Availability,toler,tolerance,74,"# The tolerance sets the probability to add an unnecessary term.; # lower tolerance will add fewer terms, while higher tolerance; # will add more terms and provide a more flexible function.",MatchSource.CODE_COMMENT,tutorials/roostats/rs_bernsteinCorrection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_bernsteinCorrection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_bernsteinCorrection.py:119,Availability,toler,tolerance,119,"# The tolerance sets the probability to add an unnecessary term.; # lower tolerance will add fewer terms, while higher tolerance; # will add more terms and provide a more flexible function.",MatchSource.CODE_COMMENT,tutorials/roostats/rs_bernsteinCorrection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_bernsteinCorrection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_bernsteinCorrection.py:171,Modifiability,flexible,flexible,171,"# The tolerance sets the probability to add an unnecessary term.; # lower tolerance will add fewer terms, while higher tolerance; # will add more terms and provide a more flexible function.",MatchSource.CODE_COMMENT,tutorials/roostats/rs_bernsteinCorrection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_bernsteinCorrection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_bernsteinCorrection.py:55,Energy Efficiency,green,green,55,"# plot the correction term (* norm constant) in dashed green; # should make norm constant just be 1, not depend on binning of data",MatchSource.CODE_COMMENT,tutorials/roostats/rs_bernsteinCorrection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_bernsteinCorrection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_bernsteinCorrection.py:105,Integrability,depend,depend,105,"# plot the correction term (* norm constant) in dashed green; # should make norm constant just be 1, not depend on binning of data",MatchSource.CODE_COMMENT,tutorials/roostats/rs_bernsteinCorrection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_bernsteinCorrection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_bernsteinCorrection.py:260,Availability,toler,tolerance,260,"# this is a switch to check the sampling distribution; # of -2 log LR for two comparisons:; # the first is for n-1 vs. n degree polynomial corrections; # the second is for n vs. n+1 degree polynomial corrections; # Here we choose n to be the one chosen by the tolerance; # criterion above, eg. n = ""degree"" in the code.; # Setting this to true is takes about 10 min.",MatchSource.CODE_COMMENT,tutorials/roostats/rs_bernsteinCorrection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_bernsteinCorrection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_bernsteinCorrection.py:63,Testability,log,log,63,"# this is a switch to check the sampling distribution; # of -2 log LR for two comparisons:; # the first is for n-1 vs. n degree polynomial corrections; # the second is for n vs. n+1 degree polynomial corrections; # Here we choose n to be the one chosen by the tolerance; # criterion above, eg. n = ""degree"" in the code.; # Setting this to true is takes about 10 min.",MatchSource.CODE_COMMENT,tutorials/roostats/rs_bernsteinCorrection.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_bernsteinCorrection.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_numbercountingutils.py:706,Energy Efficiency,energy,energy,706,"## \file; ## \ingroup tutorial_roostats; ## \notebook -nodraw; ## 'Number Counting Utils' RooStats tutorial; ##; ## This tutorial shows an example of the RooStats standalone; ## utilities that calculate the p-value or Z value (eg. significance in; ## 1-sided Gaussian standard deviations) for a number counting experiment.; ## This is a hypothesis test between background only and signal-plus-background.; ## The background estimate has uncertainty derived from an auxiliary or sideband; ## measurement.; ##; ## Documentation for these utilities can be found here:; ## https://root.cern.ch/doc/master/namespaceNumberCountingUtils.html; ##; ##; ## This problem is often called a proto-type problem for high energy physics.; ## In some references it is referred to as the on/off problem.; ##; ## The problem is treated in a fully frequentist fashion by; ## interpreting the relative background uncertainty as; ## being due to an auxiliary or sideband observation; ## that is also Poisson distributed with only background.; ## Finally, one considers the test as a ratio of Poisson means; ## where an interval is well known based on the conditioning on the total; ## number of events and the binomial distribution.; ## For more on this, see; ## - http://arxiv.org/abs/0905.3831; ## - http://arxiv.org/abs/physics/physics/0702156; ## - http://arxiv.org/abs/physics/0511028; ##; ##; ## \macro_image; ## \macro_output; ## \macro_code; ##; ## \date July 2022; ## \authors Artem Busorgin, Kyle Cranmer (C++ version)",MatchSource.CODE_COMMENT,tutorials/roostats/rs_numbercountingutils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_numbercountingutils.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_numbercountingutils.py:348,Testability,test,test,348,"## \file; ## \ingroup tutorial_roostats; ## \notebook -nodraw; ## 'Number Counting Utils' RooStats tutorial; ##; ## This tutorial shows an example of the RooStats standalone; ## utilities that calculate the p-value or Z value (eg. significance in; ## 1-sided Gaussian standard deviations) for a number counting experiment.; ## This is a hypothesis test between background only and signal-plus-background.; ## The background estimate has uncertainty derived from an auxiliary or sideband; ## measurement.; ##; ## Documentation for these utilities can be found here:; ## https://root.cern.ch/doc/master/namespaceNumberCountingUtils.html; ##; ##; ## This problem is often called a proto-type problem for high energy physics.; ## In some references it is referred to as the on/off problem.; ##; ## The problem is treated in a fully frequentist fashion by; ## interpreting the relative background uncertainty as; ## being due to an auxiliary or sideband observation; ## that is also Poisson distributed with only background.; ## Finally, one considers the test as a ratio of Poisson means; ## where an interval is well known based on the conditioning on the total; ## number of events and the binomial distribution.; ## For more on this, see; ## - http://arxiv.org/abs/0905.3831; ## - http://arxiv.org/abs/physics/physics/0702156; ## - http://arxiv.org/abs/physics/0511028; ##; ##; ## \macro_image; ## \macro_output; ## \macro_code; ##; ## \date July 2022; ## \authors Artem Busorgin, Kyle Cranmer (C++ version)",MatchSource.CODE_COMMENT,tutorials/roostats/rs_numbercountingutils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_numbercountingutils.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_numbercountingutils.py:1051,Testability,test,test,1051,"## \file; ## \ingroup tutorial_roostats; ## \notebook -nodraw; ## 'Number Counting Utils' RooStats tutorial; ##; ## This tutorial shows an example of the RooStats standalone; ## utilities that calculate the p-value or Z value (eg. significance in; ## 1-sided Gaussian standard deviations) for a number counting experiment.; ## This is a hypothesis test between background only and signal-plus-background.; ## The background estimate has uncertainty derived from an auxiliary or sideband; ## measurement.; ##; ## Documentation for these utilities can be found here:; ## https://root.cern.ch/doc/master/namespaceNumberCountingUtils.html; ##; ##; ## This problem is often called a proto-type problem for high energy physics.; ## In some references it is referred to as the on/off problem.; ##; ## The problem is treated in a fully frequentist fashion by; ## interpreting the relative background uncertainty as; ## being due to an auxiliary or sideband observation; ## that is also Poisson distributed with only background.; ## Finally, one considers the test as a ratio of Poisson means; ## where an interval is well known based on the conditioning on the total; ## number of events and the binomial distribution.; ## For more on this, see; ## - http://arxiv.org/abs/0905.3831; ## - http://arxiv.org/abs/physics/physics/0702156; ## - http://arxiv.org/abs/physics/0511028; ##; ##; ## \macro_image; ## \macro_output; ## \macro_code; ##; ## \date July 2022; ## \authors Artem Busorgin, Kyle Cranmer (C++ version)",MatchSource.CODE_COMMENT,tutorials/roostats/rs_numbercountingutils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_numbercountingutils.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/StandardProfileInspectorDemo.py:83,Security,access,access,83,"# -------------------------------------------------------; # First part is just to access a user-defined file; # or create the standard example file if it doesn't exist",MatchSource.CODE_COMMENT,tutorials/roostats/StandardProfileInspectorDemo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/StandardProfileInspectorDemo.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/StandardProfileLikelihoodDemo.py:207,Modifiability,config,config,207,"# ---------------------------------------------; # create and use the ProfileLikelihoodCalculator; # to find and plot the 95% confidence interval; # on the parameter of interest as specified; # in the model config",MatchSource.CODE_COMMENT,tutorials/roostats/StandardProfileLikelihoodDemo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/StandardProfileLikelihoodDemo.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/StandardProfileLikelihoodDemo.py:63,Performance,perform,perform,63,"# use option TF1 if too slow (plot.Draw(""tf1""); # if requested perform also an hypothesis test for the significance",MatchSource.CODE_COMMENT,tutorials/roostats/StandardProfileLikelihoodDemo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/StandardProfileLikelihoodDemo.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/StandardProfileLikelihoodDemo.py:90,Testability,test,test,90,"# use option TF1 if too slow (plot.Draw(""tf1""); # if requested perform also an hypothesis test for the significance",MatchSource.CODE_COMMENT,tutorials/roostats/StandardProfileLikelihoodDemo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/StandardProfileLikelihoodDemo.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TestNonCentral.py:27,Testability,test,test,27,"# w.var(""kk"").setVal(4.) # test a large kk",MatchSource.CODE_COMMENT,tutorials/roostats/TestNonCentral.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TestNonCentral.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:2839,Deployability,install,installed,2839,"ce; # interval for any particular dataset by finding the intersection; # of the observed test statistic and the confidence belt. First; # this is done on the observed data to get an observed 1-sided upper limt.; #; # Finally, there expected limit and bands (from background-only) are; # formed by generating background-only data and finding the upper limit.; # The background-only is defined as such that the nuisance parameters are; # fixed to their best fit value based on the data with the signal rate fixed to 0.; # The bands are done by hand for now, will later be part of the RooStats tools.; #; # On a technical note, this technique IS the generalization of Feldman-Cousins; # with nuisance parameters.; #; # Building the confidence belt can be computationally expensive.; # Once it is built, one could save it to a file and use it in a separate step.; #; # We can use PROOF to speed things along in parallel, however,; # the test statistic has to be installed on the workers; # so either turn off PROOF or include the modified test statistic; # in your $ROOTSYS/roofit/roostats/inc directory,; # add the additional line to the LinkDef.h file,; # and recompile root.; #; # Note, if you have a boundary on the parameter of interest (eg. cross-section); # the threshold on the two-sided test statistic starts off at moderate values and plateaus.; #; # [#0] PROGRESS:Generation -- generated toys: 500 / 999; # NeymanConstruction: Prog: 12/50 total MC = 39 this test stat = 0; # SigXsecOverSM=0.69 alpha_syst1=0.136515 alpha_syst3=0.425415 beta_syst2=1.08496 [-1e+30, 0.011215] in interval = 1; #; # this tells you the values of the parameters being used to generate the pseudo-experiments; # and the threshold in this case is 0.011215. One would expect for 95% that the threshold; # would be ~1.35 once the cross-section is far enough away from 0 that it is essentially; # unaffected by the boundary. As one reaches the last points in the scan, the; # threshold starts to get artificially high. Th",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:781,Testability,test,test,781,"# \file; # \ingroup tutorial_roostats; # \notebook -js; # TwoSidedFrequentistUpperLimitWithBands; #; #; # This is a standard demo that can be used with any ROOT file; # prepared in the standard way. You specify:; # - name for input ROOT file; # - name of workspace inside ROOT file that holds model and data; # - name of ModelConfig that specifies details for calculator tools; # - name of dataset; #; # With default parameters the macro will attempt to run the; # standard hist2workspace example and read the ROOT file; # that it produces.; #; # You may want to control:; # ~~~{.cpp}; # double confidenceLevel=0.95;; # double additionalToysFac = 1.;; # int nPointsToScan = 12;; # int nToyMC = 200;; # ~~~; #; # This uses a modified version of the profile likelihood ratio as; # a test statistic for upper limits (eg. test stat = 0 if muhat>mu).; #; # Based on the observed data, one defines a set of parameter points; # to be tested based on the value of the parameter of interest; # and the conditional MLE (eg. profiled) values of the nuisance parameters.; #; # At each parameter point, pseudo-experiments are generated using this; # fixed reference model and then the test statistic is evaluated.; # The auxiliary measurements (global observables) associated with the; # constraint terms in nuisance parameters are also fluctuated in the; # process of generating the pseudo-experiments in a frequentist manner; # forming an 'unconditional ensemble'. One could form a 'conditional'; # ensemble in which these auxiliary measurements are fixed. Note that the; # nuisance parameters are not randomized, which is a Bayesian procedure.; # Note, the nuisance parameters are floating in the fits. For each point,; # the threshold that defines the 95% acceptance region is found. This; # forms a ""Confidence Belt"".; #; # After constructing the confidence belt, one can find the confidence; # interval for any particular dataset by finding the intersection; # of the observed test statistic and the confiden",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:818,Testability,test,test,818,"# \file; # \ingroup tutorial_roostats; # \notebook -js; # TwoSidedFrequentistUpperLimitWithBands; #; #; # This is a standard demo that can be used with any ROOT file; # prepared in the standard way. You specify:; # - name for input ROOT file; # - name of workspace inside ROOT file that holds model and data; # - name of ModelConfig that specifies details for calculator tools; # - name of dataset; #; # With default parameters the macro will attempt to run the; # standard hist2workspace example and read the ROOT file; # that it produces.; #; # You may want to control:; # ~~~{.cpp}; # double confidenceLevel=0.95;; # double additionalToysFac = 1.;; # int nPointsToScan = 12;; # int nToyMC = 200;; # ~~~; #; # This uses a modified version of the profile likelihood ratio as; # a test statistic for upper limits (eg. test stat = 0 if muhat>mu).; #; # Based on the observed data, one defines a set of parameter points; # to be tested based on the value of the parameter of interest; # and the conditional MLE (eg. profiled) values of the nuisance parameters.; #; # At each parameter point, pseudo-experiments are generated using this; # fixed reference model and then the test statistic is evaluated.; # The auxiliary measurements (global observables) associated with the; # constraint terms in nuisance parameters are also fluctuated in the; # process of generating the pseudo-experiments in a frequentist manner; # forming an 'unconditional ensemble'. One could form a 'conditional'; # ensemble in which these auxiliary measurements are fixed. Note that the; # nuisance parameters are not randomized, which is a Bayesian procedure.; # Note, the nuisance parameters are floating in the fits. For each point,; # the threshold that defines the 95% acceptance region is found. This; # forms a ""Confidence Belt"".; #; # After constructing the confidence belt, one can find the confidence; # interval for any particular dataset by finding the intersection; # of the observed test statistic and the confiden",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:927,Testability,test,tested,927,"# \file; # \ingroup tutorial_roostats; # \notebook -js; # TwoSidedFrequentistUpperLimitWithBands; #; #; # This is a standard demo that can be used with any ROOT file; # prepared in the standard way. You specify:; # - name for input ROOT file; # - name of workspace inside ROOT file that holds model and data; # - name of ModelConfig that specifies details for calculator tools; # - name of dataset; #; # With default parameters the macro will attempt to run the; # standard hist2workspace example and read the ROOT file; # that it produces.; #; # You may want to control:; # ~~~{.cpp}; # double confidenceLevel=0.95;; # double additionalToysFac = 1.;; # int nPointsToScan = 12;; # int nToyMC = 200;; # ~~~; #; # This uses a modified version of the profile likelihood ratio as; # a test statistic for upper limits (eg. test stat = 0 if muhat>mu).; #; # Based on the observed data, one defines a set of parameter points; # to be tested based on the value of the parameter of interest; # and the conditional MLE (eg. profiled) values of the nuisance parameters.; #; # At each parameter point, pseudo-experiments are generated using this; # fixed reference model and then the test statistic is evaluated.; # The auxiliary measurements (global observables) associated with the; # constraint terms in nuisance parameters are also fluctuated in the; # process of generating the pseudo-experiments in a frequentist manner; # forming an 'unconditional ensemble'. One could form a 'conditional'; # ensemble in which these auxiliary measurements are fixed. Note that the; # nuisance parameters are not randomized, which is a Bayesian procedure.; # Note, the nuisance parameters are floating in the fits. For each point,; # the threshold that defines the 95% acceptance region is found. This; # forms a ""Confidence Belt"".; #; # After constructing the confidence belt, one can find the confidence; # interval for any particular dataset by finding the intersection; # of the observed test statistic and the confiden",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:1172,Testability,test,test,1172," that can be used with any ROOT file; # prepared in the standard way. You specify:; # - name for input ROOT file; # - name of workspace inside ROOT file that holds model and data; # - name of ModelConfig that specifies details for calculator tools; # - name of dataset; #; # With default parameters the macro will attempt to run the; # standard hist2workspace example and read the ROOT file; # that it produces.; #; # You may want to control:; # ~~~{.cpp}; # double confidenceLevel=0.95;; # double additionalToysFac = 1.;; # int nPointsToScan = 12;; # int nToyMC = 200;; # ~~~; #; # This uses a modified version of the profile likelihood ratio as; # a test statistic for upper limits (eg. test stat = 0 if muhat>mu).; #; # Based on the observed data, one defines a set of parameter points; # to be tested based on the value of the parameter of interest; # and the conditional MLE (eg. profiled) values of the nuisance parameters.; #; # At each parameter point, pseudo-experiments are generated using this; # fixed reference model and then the test statistic is evaluated.; # The auxiliary measurements (global observables) associated with the; # constraint terms in nuisance parameters are also fluctuated in the; # process of generating the pseudo-experiments in a frequentist manner; # forming an 'unconditional ensemble'. One could form a 'conditional'; # ensemble in which these auxiliary measurements are fixed. Note that the; # nuisance parameters are not randomized, which is a Bayesian procedure.; # Note, the nuisance parameters are floating in the fits. For each point,; # the threshold that defines the 95% acceptance region is found. This; # forms a ""Confidence Belt"".; #; # After constructing the confidence belt, one can find the confidence; # interval for any particular dataset by finding the intersection; # of the observed test statistic and the confidence belt. First; # this is done on the observed data to get an observed 1-sided upper limt.; #; # Finally, there expected limit a",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:1970,Testability,test,test,1970,"r points; # to be tested based on the value of the parameter of interest; # and the conditional MLE (eg. profiled) values of the nuisance parameters.; #; # At each parameter point, pseudo-experiments are generated using this; # fixed reference model and then the test statistic is evaluated.; # The auxiliary measurements (global observables) associated with the; # constraint terms in nuisance parameters are also fluctuated in the; # process of generating the pseudo-experiments in a frequentist manner; # forming an 'unconditional ensemble'. One could form a 'conditional'; # ensemble in which these auxiliary measurements are fixed. Note that the; # nuisance parameters are not randomized, which is a Bayesian procedure.; # Note, the nuisance parameters are floating in the fits. For each point,; # the threshold that defines the 95% acceptance region is found. This; # forms a ""Confidence Belt"".; #; # After constructing the confidence belt, one can find the confidence; # interval for any particular dataset by finding the intersection; # of the observed test statistic and the confidence belt. First; # this is done on the observed data to get an observed 1-sided upper limt.; #; # Finally, there expected limit and bands (from background-only) are; # formed by generating background-only data and finding the upper limit.; # The background-only is defined as such that the nuisance parameters are; # fixed to their best fit value based on the data with the signal rate fixed to 0.; # The bands are done by hand for now, will later be part of the RooStats tools.; #; # On a technical note, this technique IS the generalization of Feldman-Cousins; # with nuisance parameters.; #; # Building the confidence belt can be computationally expensive.; # Once it is built, one could save it to a file and use it in a separate step.; #; # We can use PROOF to speed things along in parallel, however,; # the test statistic has to be installed on the workers; # so either turn off PROOF or include the mo",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:2814,Testability,test,test,2814,"ce; # interval for any particular dataset by finding the intersection; # of the observed test statistic and the confidence belt. First; # this is done on the observed data to get an observed 1-sided upper limt.; #; # Finally, there expected limit and bands (from background-only) are; # formed by generating background-only data and finding the upper limit.; # The background-only is defined as such that the nuisance parameters are; # fixed to their best fit value based on the data with the signal rate fixed to 0.; # The bands are done by hand for now, will later be part of the RooStats tools.; #; # On a technical note, this technique IS the generalization of Feldman-Cousins; # with nuisance parameters.; #; # Building the confidence belt can be computationally expensive.; # Once it is built, one could save it to a file and use it in a separate step.; #; # We can use PROOF to speed things along in parallel, however,; # the test statistic has to be installed on the workers; # so either turn off PROOF or include the modified test statistic; # in your $ROOTSYS/roofit/roostats/inc directory,; # add the additional line to the LinkDef.h file,; # and recompile root.; #; # Note, if you have a boundary on the parameter of interest (eg. cross-section); # the threshold on the two-sided test statistic starts off at moderate values and plateaus.; #; # [#0] PROGRESS:Generation -- generated toys: 500 / 999; # NeymanConstruction: Prog: 12/50 total MC = 39 this test stat = 0; # SigXsecOverSM=0.69 alpha_syst1=0.136515 alpha_syst3=0.425415 beta_syst2=1.08496 [-1e+30, 0.011215] in interval = 1; #; # this tells you the values of the parameters being used to generate the pseudo-experiments; # and the threshold in this case is 0.011215. One would expect for 95% that the threshold; # would be ~1.35 once the cross-section is far enough away from 0 that it is essentially; # unaffected by the boundary. As one reaches the last points in the scan, the; # threshold starts to get artificially high. Th",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:2916,Testability,test,test,2916,"ce; # interval for any particular dataset by finding the intersection; # of the observed test statistic and the confidence belt. First; # this is done on the observed data to get an observed 1-sided upper limt.; #; # Finally, there expected limit and bands (from background-only) are; # formed by generating background-only data and finding the upper limit.; # The background-only is defined as such that the nuisance parameters are; # fixed to their best fit value based on the data with the signal rate fixed to 0.; # The bands are done by hand for now, will later be part of the RooStats tools.; #; # On a technical note, this technique IS the generalization of Feldman-Cousins; # with nuisance parameters.; #; # Building the confidence belt can be computationally expensive.; # Once it is built, one could save it to a file and use it in a separate step.; #; # We can use PROOF to speed things along in parallel, however,; # the test statistic has to be installed on the workers; # so either turn off PROOF or include the modified test statistic; # in your $ROOTSYS/roofit/roostats/inc directory,; # add the additional line to the LinkDef.h file,; # and recompile root.; #; # Note, if you have a boundary on the parameter of interest (eg. cross-section); # the threshold on the two-sided test statistic starts off at moderate values and plateaus.; #; # [#0] PROGRESS:Generation -- generated toys: 500 / 999; # NeymanConstruction: Prog: 12/50 total MC = 39 this test stat = 0; # SigXsecOverSM=0.69 alpha_syst1=0.136515 alpha_syst3=0.425415 beta_syst2=1.08496 [-1e+30, 0.011215] in interval = 1; #; # this tells you the values of the parameters being used to generate the pseudo-experiments; # and the threshold in this case is 0.011215. One would expect for 95% that the threshold; # would be ~1.35 once the cross-section is far enough away from 0 that it is essentially; # unaffected by the boundary. As one reaches the last points in the scan, the; # threshold starts to get artificially high. Th",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:3173,Testability,test,test,3173," generating background-only data and finding the upper limit.; # The background-only is defined as such that the nuisance parameters are; # fixed to their best fit value based on the data with the signal rate fixed to 0.; # The bands are done by hand for now, will later be part of the RooStats tools.; #; # On a technical note, this technique IS the generalization of Feldman-Cousins; # with nuisance parameters.; #; # Building the confidence belt can be computationally expensive.; # Once it is built, one could save it to a file and use it in a separate step.; #; # We can use PROOF to speed things along in parallel, however,; # the test statistic has to be installed on the workers; # so either turn off PROOF or include the modified test statistic; # in your $ROOTSYS/roofit/roostats/inc directory,; # add the additional line to the LinkDef.h file,; # and recompile root.; #; # Note, if you have a boundary on the parameter of interest (eg. cross-section); # the threshold on the two-sided test statistic starts off at moderate values and plateaus.; #; # [#0] PROGRESS:Generation -- generated toys: 500 / 999; # NeymanConstruction: Prog: 12/50 total MC = 39 this test stat = 0; # SigXsecOverSM=0.69 alpha_syst1=0.136515 alpha_syst3=0.425415 beta_syst2=1.08496 [-1e+30, 0.011215] in interval = 1; #; # this tells you the values of the parameters being used to generate the pseudo-experiments; # and the threshold in this case is 0.011215. One would expect for 95% that the threshold; # would be ~1.35 once the cross-section is far enough away from 0 that it is essentially; # unaffected by the boundary. As one reaches the last points in the scan, the; # threshold starts to get artificially high. This is because the range of the parameter in; # the fit is the same as the range in the scan. In the future, these should be independently; # controlled, but they are not now. As a result the ~50% of pseudo-experiments that have an; # upward fluctuation end up with muhat = muMax. Because of this",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:3346,Testability,test,test,3346,"ters are; # fixed to their best fit value based on the data with the signal rate fixed to 0.; # The bands are done by hand for now, will later be part of the RooStats tools.; #; # On a technical note, this technique IS the generalization of Feldman-Cousins; # with nuisance parameters.; #; # Building the confidence belt can be computationally expensive.; # Once it is built, one could save it to a file and use it in a separate step.; #; # We can use PROOF to speed things along in parallel, however,; # the test statistic has to be installed on the workers; # so either turn off PROOF or include the modified test statistic; # in your $ROOTSYS/roofit/roostats/inc directory,; # add the additional line to the LinkDef.h file,; # and recompile root.; #; # Note, if you have a boundary on the parameter of interest (eg. cross-section); # the threshold on the two-sided test statistic starts off at moderate values and plateaus.; #; # [#0] PROGRESS:Generation -- generated toys: 500 / 999; # NeymanConstruction: Prog: 12/50 total MC = 39 this test stat = 0; # SigXsecOverSM=0.69 alpha_syst1=0.136515 alpha_syst3=0.425415 beta_syst2=1.08496 [-1e+30, 0.011215] in interval = 1; #; # this tells you the values of the parameters being used to generate the pseudo-experiments; # and the threshold in this case is 0.011215. One would expect for 95% that the threshold; # would be ~1.35 once the cross-section is far enough away from 0 that it is essentially; # unaffected by the boundary. As one reaches the last points in the scan, the; # threshold starts to get artificially high. This is because the range of the parameter in; # the fit is the same as the range in the scan. In the future, these should be independently; # controlled, but they are not now. As a result the ~50% of pseudo-experiments that have an; # upward fluctuation end up with muhat = muMax. Because of this, the upper range of the; # parameter should be well above the expected upper limit... but not too high or one will; # need a ve",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:4904,Testability,test,test,4904," at moderate values and plateaus.; #; # [#0] PROGRESS:Generation -- generated toys: 500 / 999; # NeymanConstruction: Prog: 12/50 total MC = 39 this test stat = 0; # SigXsecOverSM=0.69 alpha_syst1=0.136515 alpha_syst3=0.425415 beta_syst2=1.08496 [-1e+30, 0.011215] in interval = 1; #; # this tells you the values of the parameters being used to generate the pseudo-experiments; # and the threshold in this case is 0.011215. One would expect for 95% that the threshold; # would be ~1.35 once the cross-section is far enough away from 0 that it is essentially; # unaffected by the boundary. As one reaches the last points in the scan, the; # threshold starts to get artificially high. This is because the range of the parameter in; # the fit is the same as the range in the scan. In the future, these should be independently; # controlled, but they are not now. As a result the ~50% of pseudo-experiments that have an; # upward fluctuation end up with muhat = muMax. Because of this, the upper range of the; # parameter should be well above the expected upper limit... but not too high or one will; # need a very large value of nPointsToScan to resolve the relevant region. This can be; # improved, but this is the first version of this script.; #; # Important note: when the model includes external constraint terms, like a Gaussian; # constraint to a nuisance parameter centered around some nominal value there is; # a subtlety. The asymptotic results are all based on the assumption that all the; # measurements fluctuate... including the nominal values from auxiliary measurements.; # If these do not fluctuate, this corresponds to an ""conditional ensemble"". The; # result is that the distribution of the test statistic can become very non-chi^2.; # This results in thresholds that become very large.; #; # \macro_image; # \macro_output; # \macro_code; #; # \authors Kyle Cranmer, contributions from Aaron Armbruster, Haoshuang Ji, Haichen Wang, Daniel Whiteson, and Jolly Chen (Python translation)",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:66,Deployability,configurat,configuration,66,"# -------------------------------------------------------; # User configuration parameters",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:66,Modifiability,config,configuration,66,"# -------------------------------------------------------; # User configuration parameters",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:144,Security,access,access,144,"# number of toys used to define the expected limit and band; # -------------------------------------------------------; # First part is just to access a user-defined file; # or create the standard example file if it doesn't exist",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:254,Modifiability,config,config,254,"# firstPOI.setMin(0); # firstPOI.setMax(10); # -------------------------------------------------------; # create and use the FeldmanCousins tool; # to find and plot the 95% confidence interval; # on the parameter of interest as specified; # in the model config; # REMEMBER, we will change the test statistic; # so this is NOT a Feldman-Cousins interval",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:293,Testability,test,test,293,"# firstPOI.setMin(0); # firstPOI.setMax(10); # -------------------------------------------------------; # create and use the FeldmanCousins tool; # to find and plot the 95% confidence interval; # on the parameter of interest as specified; # in the model config; # REMEMBER, we will change the test statistic; # so this is NOT a Feldman-Cousins interval",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:318,Testability,test,test,318,"# save the information in the belt for plotting; # -------------------------------------------------------; # Feldman-Cousins is a unified limit by definition; # but the tool takes care of a few things for us like which values; # of the nuisance parameters should be used to generate toys.; # so let's just change the test statistic and realize this is; # no longer ""Feldman-Cousins"" but is a fully frequentist Neyman-Construction.; # fc.GetTestStatSampler().SetTestStatistic(onesided); # fc.GetTestStatSampler().SetGenerateBinned(True)",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:63,Modifiability,extend,extended,63,"# Since this tool needs to throw toy MC the PDF needs to be; # extended or the tool needs to know how many entries in a dataset; # per pseudo experiment.; # In the 'number counting form' where the entries in the dataset; # are counts, and not values of discriminating variables, the; # datasets typically only have one entry and the PDF is not; # extended.",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:268,Modifiability,variab,variables,268,"# Since this tool needs to throw toy MC the PDF needs to be; # extended or the tool needs to know how many entries in a dataset; # per pseudo experiment.; # In the 'number counting form' where the entries in the dataset; # are counts, and not values of discriminating variables, the; # datasets typically only have one entry and the PDF is not; # extended.",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:347,Modifiability,extend,extended,347,"# Since this tool needs to throw toy MC the PDF needs to be; # extended or the tool needs to know how many entries in a dataset; # per pseudo experiment.; # In the 'number counting form' where the entries in the dataset; # are counts, and not values of discriminating variables, the; # datasets typically only have one entry and the PDF is not; # extended.",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:31,Testability,test,test,31,"# get observed UL and value of test statistic evaluated there",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:36,Testability,test,tested,36,"# loop through the points that were tested and ask confidence belt; # what the upper/lower thresholds were.; # For FeldmanCousins, the lower cut off is always 0",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:100,Energy Efficiency,power,power-constraint,100,"# -------------------------------------------------------; # Now we generate the expected bands and power-constraint; # First: find parameter point for mu=0, with conditional MLEs for nuisance parameters",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:20,Modifiability,extend,extended,20,"# print(""generating extended dataset"")",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:282,Integrability,interface,interface,282,"# generate global observables; # need to be careful for simpdf.; # In ROOT 5.28 there is a problem with generating global observables; # with a simultaneous PDF. In 5.29 there is a solution with; # RooSimultaneous::generateSimGlobal, but this may change to; # the standard generate interface in 5.30.",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:6,Testability,test,test,6,"# get test stat at observed UL in observed data",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:467,Energy Efficiency,power,power,467,"# if you want to see a plot of the sampling distribution for a particular scan point:; #; # sampPlot = ROOT.RooStats.SamplingDistPlot(); # indexInScan = 0; # tmpPoint = parameterScan.get(indexInScan).clone(""temp""); # firstPOI.setVal( tmpPoint.getRealValue(firstPOI.GetName()) ); # toymcsampler.SetParametersForTestStat(tmpPOI); # samp = toymcsampler.GetSamplingDistribution(tmpPoint); # sampPlot.AddSamplingDistribution(samp); # sampPlot.Draw(); # Now find bands and power constraint",MatchSource.CODE_COMMENT,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/Zbi_Zgamma.py:17,Integrability,message,messages,17,"# get ugly print messages out of the way",MatchSource.CODE_COMMENT,tutorials/roostats/Zbi_Zgamma.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/Zbi_Zgamma.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlcreatedb.py:98,Testability,test,test,98,"## \file; ## \ingroup tutorial_sql; ## \notebook -nodraw; ## Create a runcatalog table in a MySQL test database.; ##; ## Based on the code sqlcreatedb.C by Sergey Linev; ##; ## \macro_code; ##; ## \author Juan Fernando Jaramillo Botero",MatchSource.CODE_COMMENT,tutorials/sql/sqlcreatedb.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlcreatedb.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlselect.py:175,Deployability,install,installed,175,"## \file; ## \ingroup tutorial_sql; ##; ## Query example to MySQL test database.; ## Example of query by using the test database made in MySQL, you need the; ## database test installed in localhost, with user nobody without password.; ##; ## Based on sqlselect.C by Sergey Linev; ##; ## \macro_code; ##; ## \author Juan Fernando Jaramillo Botero",MatchSource.CODE_COMMENT,tutorials/sql/sqlselect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlselect.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlselect.py:224,Security,password,password,224,"## \file; ## \ingroup tutorial_sql; ##; ## Query example to MySQL test database.; ## Example of query by using the test database made in MySQL, you need the; ## database test installed in localhost, with user nobody without password.; ##; ## Based on sqlselect.C by Sergey Linev; ##; ## \macro_code; ##; ## \author Juan Fernando Jaramillo Botero",MatchSource.CODE_COMMENT,tutorials/sql/sqlselect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlselect.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlselect.py:66,Testability,test,test,66,"## \file; ## \ingroup tutorial_sql; ##; ## Query example to MySQL test database.; ## Example of query by using the test database made in MySQL, you need the; ## database test installed in localhost, with user nobody without password.; ##; ## Based on sqlselect.C by Sergey Linev; ##; ## \macro_code; ##; ## \author Juan Fernando Jaramillo Botero",MatchSource.CODE_COMMENT,tutorials/sql/sqlselect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlselect.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlselect.py:115,Testability,test,test,115,"## \file; ## \ingroup tutorial_sql; ##; ## Query example to MySQL test database.; ## Example of query by using the test database made in MySQL, you need the; ## database test installed in localhost, with user nobody without password.; ##; ## Based on sqlselect.C by Sergey Linev; ##; ## \macro_code; ##; ## \author Juan Fernando Jaramillo Botero",MatchSource.CODE_COMMENT,tutorials/sql/sqlselect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlselect.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlselect.py:170,Testability,test,test,170,"## \file; ## \ingroup tutorial_sql; ##; ## Query example to MySQL test database.; ## Example of query by using the test database made in MySQL, you need the; ## database test installed in localhost, with user nobody without password.; ##; ## Based on sqlselect.C by Sergey Linev; ##; ## \macro_code; ##; ## \author Juan Fernando Jaramillo Botero",MatchSource.CODE_COMMENT,tutorials/sql/sqlselect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlselect.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlselect.py:17,Availability,avail,available,17,"# list databases available on server",MatchSource.CODE_COMMENT,tutorials/sql/sqlselect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlselect.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlselect.py:27,Testability,test,test,27,"# list tables in database ""test"" (the permission tables)",MatchSource.CODE_COMMENT,tutorials/sql/sqlselect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlselect.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlselect.py:77,Testability,test,test,77,"# query database and print results; # sql = ""select dataset,rawfilepath from test.runcatalog "" \; # ""WHERE tag&(1<<2) AND (run=490001 OR run=300122)""",MatchSource.CODE_COMMENT,tutorials/sql/sqlselect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlselect.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/RBatchGenerator_PyTorch.py:50,Security,validat,validation,50,"# Returns two generators that return training and validation batches; # as PyTorch tensors.",MatchSource.CODE_COMMENT,tutorials/tmva/RBatchGenerator_PyTorch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/RBatchGenerator_PyTorch.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/RBatchGenerator_PyTorch.py:7,Safety,predict,prediction,7,"# Make prediction and calculate loss",MatchSource.CODE_COMMENT,tutorials/tmva/RBatchGenerator_PyTorch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/RBatchGenerator_PyTorch.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/RBatchGenerator_PyTorch.py:176,Security,validat,validation,176,"#################################################################; # Validation; #################################################################; # Evaluate the model on the validation set",MatchSource.CODE_COMMENT,tutorials/tmva/RBatchGenerator_PyTorch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/RBatchGenerator_PyTorch.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/RBatchGenerator_PyTorch.py:7,Safety,predict,prediction,7,"# Make prediction and calculate accuracy",MatchSource.CODE_COMMENT,tutorials/tmva/RBatchGenerator_PyTorch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/RBatchGenerator_PyTorch.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/RBatchGenerator_TensorFlow.py:42,Security,validat,validation,42,"# Returns two TF.Dataset for training and validation batches.",MatchSource.CODE_COMMENT,tutorials/tmva/RBatchGenerator_TensorFlow.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/RBatchGenerator_TensorFlow.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/tmva100_DataPreparation.py:159,Usability,learn,learning,159,"## \file; ## \ingroup tutorial_tmva; ## \notebook -nodraw; ## This tutorial illustrates how to prepare ROOT datasets to be nicely readable; ## by most machine learning methods. This requires filtering the initial complex; ## datasets and writing the data in a flat format.; ##; ## \macro_code; ## \macro_output; ##; ## \date August 2019; ## \author Stefan Wunsch",MatchSource.CODE_COMMENT,tutorials/tmva/tmva100_DataPreparation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/tmva100_DataPreparation.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/tmva100_DataPreparation.py:16,Modifiability,variab,variables,16,"""""""; Define the variables which shall be used for training; """"""",MatchSource.CODE_COMMENT,tutorials/tmva/tmva100_DataPreparation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/tmva100_DataPreparation.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/tmva100_DataPreparation.py:67,Modifiability,variab,variables,67,"# Load dataset, filter the required events and define the training variables",MatchSource.CODE_COMMENT,tutorials/tmva/tmva100_DataPreparation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/tmva100_DataPreparation.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/tmva100_DataPreparation.py:49,Testability,test,testing,49,"# Split dataset by event number for training and testing",MatchSource.CODE_COMMENT,tutorials/tmva/tmva100_DataPreparation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/tmva100_DataPreparation.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/tmva101_Training.py:508,Safety,avoid,avoid,508,"## \file; ## \ingroup tutorial_tmva; ## \notebook -nodraw; ## This tutorial show how you can train a machine learning model with any package; ## reading the training data directly from ROOT files. Using XGBoost, we illustrate; ## how you can convert an externally trained model in a format serializable and readable; ## with the fast tree inference engine offered by TMVA.; ##; ## \macro_code; ## \macro_output; ##; ## \date August 2019; ## \author Stefan Wunsch; # XGBoost has to be imported before ROOT to avoid crashes because of clashing; # std::regexp symbols that are exported by cppyy.; # See also: https://github.com/wlav/cppyy/issues/227",MatchSource.CODE_COMMENT,tutorials/tmva/tmva101_Training.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/tmva101_Training.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/tmva101_Training.py:109,Usability,learn,learning,109,"## \file; ## \ingroup tutorial_tmva; ## \notebook -nodraw; ## This tutorial show how you can train a machine learning model with any package; ## reading the training data directly from ROOT files. Using XGBoost, we illustrate; ## how you can convert an externally trained model in a format serializable and readable; ## with the fast tree inference engine offered by TMVA.; ##; ## \macro_code; ## \macro_output; ##; ## \date August 2019; ## \author Stefan Wunsch; # XGBoost has to be imported before ROOT to avoid crashes because of clashing; # std::regexp symbols that are exported by cppyy.; # See also: https://github.com/wlav/cppyy/issues/227",MatchSource.CODE_COMMENT,tutorials/tmva/tmva101_Training.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/tmva101_Training.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/tmva101_Training.py:47,Usability,learn,learning,47,"# Convert inputs to format readable by machine learning tools",MatchSource.CODE_COMMENT,tutorials/tmva/tmva101_Training.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/tmva101_Training.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/tmva102_Testing.py:100,Testability,test,test,100,"## \file; ## \ingroup tutorial_tmva; ## \notebook -nodraw; ## This tutorial illustrates how you can test a trained BDT model using the fast; ## tree inference engine offered by TMVA and external tools such as scikit-learn.; ##; ## \macro_code; ## \macro_output; ##; ## \date August 2019; ## \author Stefan Wunsch",MatchSource.CODE_COMMENT,tutorials/tmva/tmva102_Testing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/tmva102_Testing.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/tmva102_Testing.py:216,Usability,learn,learn,216,"## \file; ## \ingroup tutorial_tmva; ## \notebook -nodraw; ## This tutorial illustrates how you can test a trained BDT model using the fast; ## tree inference engine offered by TMVA and external tools such as scikit-learn.; ##; ## \macro_code; ## \macro_output; ##; ## \date August 2019; ## \author Stefan Wunsch",MatchSource.CODE_COMMENT,tutorials/tmva/tmva102_Testing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/tmva102_Testing.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/tmva102_Testing.py:7,Safety,predict,prediction,7,"# Make prediction",MatchSource.CODE_COMMENT,tutorials/tmva/tmva102_Testing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/tmva102_Testing.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:44,Safety,avoid,avoid,44,"# PyTorch has to be imported before ROOT to avoid crashes because of clashing; # std::regexp symbols that are exported by cppyy.; # See also: https://github.com/wlav/cppyy/issues/227",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:540,Deployability,configurat,configuration,540,"## Create TMVA Factory; # Create the Factory class. Later you can choose the methods; # whose performance you'd like to investigate.; # The factory is the major TMVA object you have to interact with. Here is the list of parameters you need to pass; # - The first argument is the base of the name of all the output; # weight files in the directory weight/ that will be created with the; # method parameters; # - The second argument is the output file for the training results; # - The third argument is a string option defining some general configuration for the TMVA session.; # For example all TMVA output can be suppressed by removing the ""!"" (not) in front of the ""Silent"" argument in the; # option string; # - note that we disable any pre-transformation of the input variables and we avoid computing correlations between; # input variables",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:540,Modifiability,config,configuration,540,"## Create TMVA Factory; # Create the Factory class. Later you can choose the methods; # whose performance you'd like to investigate.; # The factory is the major TMVA object you have to interact with. Here is the list of parameters you need to pass; # - The first argument is the base of the name of all the output; # weight files in the directory weight/ that will be created with the; # method parameters; # - The second argument is the output file for the training results; # - The third argument is a string option defining some general configuration for the TMVA session.; # For example all TMVA output can be suppressed by removing the ""!"" (not) in front of the ""Silent"" argument in the; # option string; # - note that we disable any pre-transformation of the input variables and we avoid computing correlations between; # input variables",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:771,Modifiability,variab,variables,771,"## Create TMVA Factory; # Create the Factory class. Later you can choose the methods; # whose performance you'd like to investigate.; # The factory is the major TMVA object you have to interact with. Here is the list of parameters you need to pass; # - The first argument is the base of the name of all the output; # weight files in the directory weight/ that will be created with the; # method parameters; # - The second argument is the output file for the training results; # - The third argument is a string option defining some general configuration for the TMVA session.; # For example all TMVA output can be suppressed by removing the ""!"" (not) in front of the ""Silent"" argument in the; # option string; # - note that we disable any pre-transformation of the input variables and we avoid computing correlations between; # input variables",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:834,Modifiability,variab,variables,834,"## Create TMVA Factory; # Create the Factory class. Later you can choose the methods; # whose performance you'd like to investigate.; # The factory is the major TMVA object you have to interact with. Here is the list of parameters you need to pass; # - The first argument is the base of the name of all the output; # weight files in the directory weight/ that will be created with the; # method parameters; # - The second argument is the output file for the training results; # - The third argument is a string option defining some general configuration for the TMVA session.; # For example all TMVA output can be suppressed by removing the ""!"" (not) in front of the ""Silent"" argument in the; # option string; # - note that we disable any pre-transformation of the input variables and we avoid computing correlations between; # input variables",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:94,Performance,perform,performance,94,"## Create TMVA Factory; # Create the Factory class. Later you can choose the methods; # whose performance you'd like to investigate.; # The factory is the major TMVA object you have to interact with. Here is the list of parameters you need to pass; # - The first argument is the base of the name of all the output; # weight files in the directory weight/ that will be created with the; # method parameters; # - The second argument is the output file for the training results; # - The third argument is a string option defining some general configuration for the TMVA session.; # For example all TMVA output can be suppressed by removing the ""!"" (not) in front of the ""Silent"" argument in the; # option string; # - note that we disable any pre-transformation of the input variables and we avoid computing correlations between; # input variables",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:788,Safety,avoid,avoid,788,"## Create TMVA Factory; # Create the Factory class. Later you can choose the methods; # whose performance you'd like to investigate.; # The factory is the major TMVA object you have to interact with. Here is the list of parameters you need to pass; # - The first argument is the base of the name of all the output; # weight files in the directory weight/ that will be created with the; # method parameters; # - The second argument is the output file for the training results; # - The third argument is a string option defining some general configuration for the TMVA session.; # For example all TMVA output can be suppressed by removing the ""!"" (not) in front of the ""Silent"" argument in the; # option string; # - note that we disable any pre-transformation of the input variables and we avoid computing correlations between; # input variables",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:99,Modifiability,variab,variables,99,"## Declare DataLoader(s); # The next step is to declare the DataLoader class that deals with input variables; # Define the input variables that shall be used for the MVA training; # note that you may also use variable expressions, which can be parsed by TTree::Draw( ""expression"" )]; # In this case the input data consists of an image of 16x16 pixels. Each single pixel is a branch in a ROOT TTree",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:129,Modifiability,variab,variables,129,"## Declare DataLoader(s); # The next step is to declare the DataLoader class that deals with input variables; # Define the input variables that shall be used for the MVA training; # note that you may also use variable expressions, which can be parsed by TTree::Draw( ""expression"" )]; # In this case the input data consists of an image of 16x16 pixels. Each single pixel is a branch in a ROOT TTree",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:209,Modifiability,variab,variable,209,"## Declare DataLoader(s); # The next step is to declare the DataLoader class that deals with input variables; # Define the input variables that shall be used for the MVA training; # note that you may also use variable expressions, which can be parsed by TTree::Draw( ""expression"" )]; # In this case the input data consists of an image of 16x16 pixels. Each single pixel is a branch in a ROOT TTree",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:77,Testability,test,test,77,"# inputFileName = ""tmva_class_example.root""; # --- Register the training and test trees",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:13,Modifiability,variab,variables,13,"## add event variables (image); ## use new method (from ROOT 6.20 to add a variable array for all image data)",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:75,Modifiability,variab,variable,75,"## add event variables (image); ## use new method (from ROOT 6.20 to add a variable array for all image data)",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:36,Modifiability,variab,variables,36,"# Set individual event weights (the variables must exist in the original TTree); # for signal : factory->SetSignalWeightExpression (""weight1*weight2"");; # for background: factory->SetBackgroundWeightExpression(""weight1*weight2"");; # loader->SetBackgroundWeightExpression( ""weight"" );; # Apply additional cuts on the signal and background samples (can be different)",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:233,Performance,load,loader,233,"# Set individual event weights (the variables must exist in the original TTree); # for signal : factory->SetSignalWeightExpression (""weight1*weight2"");; # for background: factory->SetBackgroundWeightExpression(""weight1*weight2"");; # loader->SetBackgroundWeightExpression( ""weight"" );; # Apply additional cuts on the signal and background samples (can be different)",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:457,Modifiability,variab,variables,457,"# for example: TCut mycutb = ""abs(var1)<0.5"";; # Tell the factory how to use the training and testing events; # If no numbers of events are given, half of the events in the tree are used; # for training, and the other half for testing:; # loader.PrepareTrainingAndTestTree( mycut, ""SplitMode=random:!V"" );; # It is possible also to specify the number of training and testing events,; # note we disable the computation of the correlation matrix of the input variables",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:239,Performance,load,loader,239,"# for example: TCut mycutb = ""abs(var1)<0.5"";; # Tell the factory how to use the training and testing events; # If no numbers of events are given, half of the events in the tree are used; # for training, and the other half for testing:; # loader.PrepareTrainingAndTestTree( mycut, ""SplitMode=random:!V"" );; # It is possible also to specify the number of training and testing events,; # note we disable the computation of the correlation matrix of the input variables",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:94,Testability,test,testing,94,"# for example: TCut mycutb = ""abs(var1)<0.5"";; # Tell the factory how to use the training and testing events; # If no numbers of events are given, half of the events in the tree are used; # for training, and the other half for testing:; # loader.PrepareTrainingAndTestTree( mycut, ""SplitMode=random:!V"" );; # It is possible also to specify the number of training and testing events,; # note we disable the computation of the correlation matrix of the input variables",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:227,Testability,test,testing,227,"# for example: TCut mycutb = ""abs(var1)<0.5"";; # Tell the factory how to use the training and testing events; # If no numbers of events are given, half of the events in the tree are used; # for training, and the other half for testing:; # loader.PrepareTrainingAndTestTree( mycut, ""SplitMode=random:!V"" );; # It is possible also to specify the number of training and testing events,; # note we disable the computation of the correlation matrix of the input variables",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:367,Testability,test,testing,367,"# for example: TCut mycutb = ""abs(var1)<0.5"";; # Tell the factory how to use the training and testing events; # If no numbers of events are given, half of the events in the tree are used; # for training, and the other half for testing:; # loader.PrepareTrainingAndTestTree( mycut, ""SplitMode=random:!V"" );; # It is possible also to specify the number of training and testing events,; # note we disable the computation of the correlation matrix of the input variables",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:99,Usability,learn,learning,99,"# Training strategies; # one can catenate several training strings with different parameters (e.g. learning rates or regularizations; # parameters) The training string must be concatenated with the `|` delimiter",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:13,Availability,avail,available,13,"# use GPU if available",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:287,Modifiability,layers,layers,287,"### Book Convolutional Neural Network in TMVA; # For building a CNN one needs to define; # - Input Layout : number of channels (in this case = 1) | image height | image width; # - Batch Layout : batch size | number of channels | image size = (height*width); # Then one add Convolutional layers and MaxPool layers.; # - For Convolutional layer the option string has to be:; # - CONV | number of units | filter height | filter width | stride height | stride width | padding height | paddig; # width | activation function; # - note in this case we are using a filer 3x3 and padding=1 and stride=1 so we get the output dimension of the; # conv layer equal to the input; # - note we use after the first convolutional layer a batch normalization layer. This seems to help significantly the; # convergence; # - For the MaxPool layer:; # - MAXPOOL | pool height | pool width | stride height | stride width; # The RESHAPE layer is needed to flatten the output before the Dense layer; # Note that to run the CNN is required to have CPU or GPU support",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:306,Modifiability,layers,layers,306,"### Book Convolutional Neural Network in TMVA; # For building a CNN one needs to define; # - Input Layout : number of channels (in this case = 1) | image height | image width; # - Batch Layout : batch size | number of channels | image size = (height*width); # Then one add Convolutional layers and MaxPool layers.; # - For Convolutional layer the option string has to be:; # - CONV | number of units | filter height | filter width | stride height | stride width | padding height | paddig; # width | activation function; # - note in this case we are using a filer 3x3 and padding=1 and stride=1 so we get the output dimension of the; # conv layer equal to the input; # - note we use after the first convolutional layer a batch normalization layer. This seems to help significantly the; # convergence; # - For the MaxPool layer:; # - MAXPOOL | pool height | pool width | stride height | stride width; # The RESHAPE layer is needed to flatten the output before the Dense layer; # Note that to run the CNN is required to have CPU or GPU support",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:13,Availability,avail,available,13,"# use GPU if available",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:45,Energy Efficiency,allocate,allocates,45,"# needed for RTX NVidia card and to avoid TF allocates all GPU memory",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:36,Safety,avoid,avoid,36,"# needed for RTX NVidia card and to avoid TF allocates all GPU memory",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_CNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:1037,Deployability,configurat,configuration,1037,"## \file; ## \ingroup tutorial_tmva; ## \notebook; ## Classification example of TMVA based on public Higgs UCI dataset; ##; ## The UCI data set is a public HIGGS data set , see http://archive.ics.uci.edu/ml/datasets/HIGGS; ## used in this paper: Baldi, P., P. Sadowski, and D. Whiteson. “Searching for Exotic Particles in High-energy Physics; ## with Deep Learning.” Nature Communications 5 (July 2, 2014).; ##; ## \macro_image; ## \macro_output; ## \macro_code; ##; ## \author Harshal Shende; ## Declare Factory; ## Create the Factory class. Later you can choose the methods; ## whose performance you'd like to investigate.; ## The factory is the major TMVA object you have to interact with. Here is the list of parameters you need to pass; ## - The first argument is the base of the name of all the output; ## weightfiles in the directory weight/ that will be created with the; ## method parameters; ## - The second argument is the output file for the training results; ## - The third argument is a string option defining some general configuration for the TMVA session. For example all TMVA output can be suppressed by removing the ""!"" (not) in front of the ""Silent"" argument in the option string",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:327,Energy Efficiency,energy,energy,327,"## \file; ## \ingroup tutorial_tmva; ## \notebook; ## Classification example of TMVA based on public Higgs UCI dataset; ##; ## The UCI data set is a public HIGGS data set , see http://archive.ics.uci.edu/ml/datasets/HIGGS; ## used in this paper: Baldi, P., P. Sadowski, and D. Whiteson. “Searching for Exotic Particles in High-energy Physics; ## with Deep Learning.” Nature Communications 5 (July 2, 2014).; ##; ## \macro_image; ## \macro_output; ## \macro_code; ##; ## \author Harshal Shende; ## Declare Factory; ## Create the Factory class. Later you can choose the methods; ## whose performance you'd like to investigate.; ## The factory is the major TMVA object you have to interact with. Here is the list of parameters you need to pass; ## - The first argument is the base of the name of all the output; ## weightfiles in the directory weight/ that will be created with the; ## method parameters; ## - The second argument is the output file for the training results; ## - The third argument is a string option defining some general configuration for the TMVA session. For example all TMVA output can be suppressed by removing the ""!"" (not) in front of the ""Silent"" argument in the option string",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:1037,Modifiability,config,configuration,1037,"## \file; ## \ingroup tutorial_tmva; ## \notebook; ## Classification example of TMVA based on public Higgs UCI dataset; ##; ## The UCI data set is a public HIGGS data set , see http://archive.ics.uci.edu/ml/datasets/HIGGS; ## used in this paper: Baldi, P., P. Sadowski, and D. Whiteson. “Searching for Exotic Particles in High-energy Physics; ## with Deep Learning.” Nature Communications 5 (July 2, 2014).; ##; ## \macro_image; ## \macro_output; ## \macro_code; ##; ## \author Harshal Shende; ## Declare Factory; ## Create the Factory class. Later you can choose the methods; ## whose performance you'd like to investigate.; ## The factory is the major TMVA object you have to interact with. Here is the list of parameters you need to pass; ## - The first argument is the base of the name of all the output; ## weightfiles in the directory weight/ that will be created with the; ## method parameters; ## - The second argument is the output file for the training results; ## - The third argument is a string option defining some general configuration for the TMVA session. For example all TMVA output can be suppressed by removing the ""!"" (not) in front of the ""Silent"" argument in the option string",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:586,Performance,perform,performance,586,"## \file; ## \ingroup tutorial_tmva; ## \notebook; ## Classification example of TMVA based on public Higgs UCI dataset; ##; ## The UCI data set is a public HIGGS data set , see http://archive.ics.uci.edu/ml/datasets/HIGGS; ## used in this paper: Baldi, P., P. Sadowski, and D. Whiteson. “Searching for Exotic Particles in High-energy Physics; ## with Deep Learning.” Nature Communications 5 (July 2, 2014).; ##; ## \macro_image; ## \macro_output; ## \macro_code; ##; ## \author Harshal Shende; ## Declare Factory; ## Create the Factory class. Later you can choose the methods; ## whose performance you'd like to investigate.; ## The factory is the major TMVA object you have to interact with. Here is the list of parameters you need to pass; ## - The first argument is the base of the name of all the output; ## weightfiles in the directory weight/ that will be created with the; ## method parameters; ## - The second argument is the output file for the training results; ## - The third argument is a string option defining some general configuration for the TMVA session. For example all TMVA output can be suppressed by removing the ""!"" (not) in front of the ""Silent"" argument in the option string",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:12,Usability,learn,learning,12,"# TMVA Deep learning ( CPU or GPU)",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:35,Availability,avail,available,35,"# cannot use Keras if PYMVA is not available",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:32,Testability,test,test,32,"# --- Register the training and test trees",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:99,Modifiability,variab,variables,99,"## Declare DataLoader(s); # The next step is to declare the DataLoader class that deals with input variables; # Define the input variables that shall be used for the MVA training; # note that you may also use variable expressions, which can be parsed by TTree::Draw( ""expression"" )]",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:129,Modifiability,variab,variables,129,"## Declare DataLoader(s); # The next step is to declare the DataLoader class that deals with input variables; # Define the input variables that shall be used for the MVA training; # note that you may also use variable expressions, which can be parsed by TTree::Draw( ""expression"" )]",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:209,Modifiability,variab,variable,209,"## Declare DataLoader(s); # The next step is to declare the DataLoader class that deals with input variables; # Define the input variables that shall be used for the MVA training; # note that you may also use variable expressions, which can be parsed by TTree::Draw( ""expression"" )]",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:36,Modifiability,variab,variables,36,"# Set individual event weights (the variables must exist in the original TTree); # for signal : factory->SetSignalWeightExpression (""weight1*weight2"");; # for background: factory->SetBackgroundWeightExpression(""weight1*weight2"");; # loader->SetBackgroundWeightExpression( ""weight"" );; # Apply additional cuts on the signal and background samples (can be different)",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:233,Performance,load,loader,233,"# Set individual event weights (the variables must exist in the original TTree); # for signal : factory->SetSignalWeightExpression (""weight1*weight2"");; # for background: factory->SetBackgroundWeightExpression(""weight1*weight2"");; # loader->SetBackgroundWeightExpression( ""weight"" );; # Apply additional cuts on the signal and background samples (can be different)",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:242,Performance,load,loader,242,"# for example: TCut mycutb = ""abs(var1)<0.5"";; # Tell the factory how to use the training and testing events; #; # If no numbers of events are given, half of the events in the tree are used; # for training, and the other half for testing:; # loader->PrepareTrainingAndTestTree( mycut, ""SplitMode=random:!V"" );; # To also specify the number of testing events, use:",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:94,Testability,test,testing,94,"# for example: TCut mycutb = ""abs(var1)<0.5"";; # Tell the factory how to use the training and testing events; #; # If no numbers of events are given, half of the events in the tree are used; # for training, and the other half for testing:; # loader->PrepareTrainingAndTestTree( mycut, ""SplitMode=random:!V"" );; # To also specify the number of testing events, use:",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:230,Testability,test,testing,230,"# for example: TCut mycutb = ""abs(var1)<0.5"";; # Tell the factory how to use the training and testing events; #; # If no numbers of events are given, half of the events in the tree are used; # for training, and the other half for testing:; # loader->PrepareTrainingAndTestTree( mycut, ""SplitMode=random:!V"" );; # To also specify the number of testing events, use:",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:343,Testability,test,testing,343,"# for example: TCut mycutb = ""abs(var1)<0.5"";; # Tell the factory how to use the training and testing events; #; # If no numbers of events are given, half of the events in the tree are used; # for training, and the other half for testing:; # loader->PrepareTrainingAndTestTree( mycut, ""SplitMode=random:!V"" );; # To also specify the number of testing events, use:",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:1812,Availability,error,error,1812,"ch layout** : this defines how are the input batch. It is related to input layout but not the same.; # If the first layer is dense it should be ``1 | batch size ! number of variables`` (features); # *(note the use of the character `|` as separator of input parameters for DNN layout)*; # note that in case of only dense layer the input layout could be omitted but it is required when defining more; # complex architectures; # - **layer layout** string defining the layer architecture. The syntax is; # - layer type (e.g. DENSE, CONV, RNN); # - layer parameters (e.g. number of units); # - activation function (e.g TANH, RELU,...); # *the different layers are separated by the ``"",""`` *; #### 2. Define Training Strategy; # We define here the training strategy parameters for the DNN. The parameters are separated by the ``"",""`` separator.; # One can then concatenate different training strategy with different parameters. The training strategy are separated by; # the ``""|""`` separator.; # - Optimizer; # - Learning rate; # - Momentum (valid for SGD and RMSPROP); # - Regularization and Weight Decay; # - Dropout; # - Max number of epochs; # - Convergence steps. if the test error will not decrease after that value the training will stop; # - Batch size (This value must be the same specified in the input layout); # - Test Repetitions (the interval when the test error will be computed); #### 3. Define general DNN options; # We define the general DNN options concatenating in the final string the previously defined layout and training strategy.; # Note we use the ``"":""`` separator to separate the different higher level options, as in the other TMVA methods.; # In addition to input layout, batch layout and training strategy we add now:; # - Type of Loss function (e.g. CROSSENTROPY); # - Weight Initizalization (e.g XAVIER, XAVIERUNIFORM, NORMAL ); # - Variable Transformation; # - Type of Architecture (e.g. CPU, GPU, Standard); # We can then book the DL method using the built option string",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:2002,Availability,error,error,2002,"ch layout** : this defines how are the input batch. It is related to input layout but not the same.; # If the first layer is dense it should be ``1 | batch size ! number of variables`` (features); # *(note the use of the character `|` as separator of input parameters for DNN layout)*; # note that in case of only dense layer the input layout could be omitted but it is required when defining more; # complex architectures; # - **layer layout** string defining the layer architecture. The syntax is; # - layer type (e.g. DENSE, CONV, RNN); # - layer parameters (e.g. number of units); # - activation function (e.g TANH, RELU,...); # *the different layers are separated by the ``"",""`` *; #### 2. Define Training Strategy; # We define here the training strategy parameters for the DNN. The parameters are separated by the ``"",""`` separator.; # One can then concatenate different training strategy with different parameters. The training strategy are separated by; # the ``""|""`` separator.; # - Optimizer; # - Learning rate; # - Momentum (valid for SGD and RMSPROP); # - Regularization and Weight Decay; # - Dropout; # - Max number of epochs; # - Convergence steps. if the test error will not decrease after that value the training will stop; # - Batch size (This value must be the same specified in the input layout); # - Test Repetitions (the interval when the test error will be computed); #### 3. Define general DNN options; # We define the general DNN options concatenating in the final string the previously defined layout and training strategy.; # Note we use the ``"":""`` separator to separate the different higher level options, as in the other TMVA methods.; # In addition to input layout, batch layout and training strategy we add now:; # - Type of Loss function (e.g. CROSSENTROPY); # - Weight Initizalization (e.g XAVIER, XAVIERUNIFORM, NORMAL ); # - Variable Transformation; # - Type of Architecture (e.g. CPU, GPU, Standard); # We can then book the DL method using the built option string",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:266,Deployability,configurat,configuration,266,"## Here we book the new DNN of TMVA if we have support in ROOT. We will use GPU version if ROOT is enabled with GPU; ## Booking Deep Neural Network; # Here we define the option string for building the Deep Neural network model.; #### 1. Define DNN layout; # The DNN configuration is defined using a string. Note that whitespaces between characters are not allowed.; # We define first the DNN layout:; # - **input layout** : this defines the input data format for the DNN as ``input depth | height | width``.; # In case of a dense layer as first layer the input layout should be ``1 | 1 | number of input variables`` (features); # - **batch layout** : this defines how are the input batch. It is related to input layout but not the same.; # If the first layer is dense it should be ``1 | batch size ! number of variables`` (features); # *(note the use of the character `|` as separator of input parameters for DNN layout)*; # note that in case of only dense layer the input layout could be omitted but it is required when defining more; # complex architectures; # - **layer layout** string defining the layer architecture. The syntax is; # - layer type (e.g. DENSE, CONV, RNN); # - layer parameters (e.g. number of units); # - activation function (e.g TANH, RELU,...); # *the different layers are separated by the ``"",""`` *; #### 2. Define Training Strategy; # We define here the training strategy parameters for the DNN. The parameters are separated by the ``"",""`` separator.; # One can then concatenate different training strategy with different parameters. The training strategy are separated by; # the ``""|""`` separator.; # - Optimizer; # - Learning rate; # - Momentum (valid for SGD and RMSPROP); # - Regularization and Weight Decay; # - Dropout; # - Max number of epochs; # - Convergence steps. if the test error will not decrease after that value the training will stop; # - Batch size (This value must be the same specified in the input layout); # - Test Repetitions (the interval when the test",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:266,Modifiability,config,configuration,266,"## Here we book the new DNN of TMVA if we have support in ROOT. We will use GPU version if ROOT is enabled with GPU; ## Booking Deep Neural Network; # Here we define the option string for building the Deep Neural network model.; #### 1. Define DNN layout; # The DNN configuration is defined using a string. Note that whitespaces between characters are not allowed.; # We define first the DNN layout:; # - **input layout** : this defines the input data format for the DNN as ``input depth | height | width``.; # In case of a dense layer as first layer the input layout should be ``1 | 1 | number of input variables`` (features); # - **batch layout** : this defines how are the input batch. It is related to input layout but not the same.; # If the first layer is dense it should be ``1 | batch size ! number of variables`` (features); # *(note the use of the character `|` as separator of input parameters for DNN layout)*; # note that in case of only dense layer the input layout could be omitted but it is required when defining more; # complex architectures; # - **layer layout** string defining the layer architecture. The syntax is; # - layer type (e.g. DENSE, CONV, RNN); # - layer parameters (e.g. number of units); # - activation function (e.g TANH, RELU,...); # *the different layers are separated by the ``"",""`` *; #### 2. Define Training Strategy; # We define here the training strategy parameters for the DNN. The parameters are separated by the ``"",""`` separator.; # One can then concatenate different training strategy with different parameters. The training strategy are separated by; # the ``""|""`` separator.; # - Optimizer; # - Learning rate; # - Momentum (valid for SGD and RMSPROP); # - Regularization and Weight Decay; # - Dropout; # - Max number of epochs; # - Convergence steps. if the test error will not decrease after that value the training will stop; # - Batch size (This value must be the same specified in the input layout); # - Test Repetitions (the interval when the test",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:604,Modifiability,variab,variables,604,"## Here we book the new DNN of TMVA if we have support in ROOT. We will use GPU version if ROOT is enabled with GPU; ## Booking Deep Neural Network; # Here we define the option string for building the Deep Neural network model.; #### 1. Define DNN layout; # The DNN configuration is defined using a string. Note that whitespaces between characters are not allowed.; # We define first the DNN layout:; # - **input layout** : this defines the input data format for the DNN as ``input depth | height | width``.; # In case of a dense layer as first layer the input layout should be ``1 | 1 | number of input variables`` (features); # - **batch layout** : this defines how are the input batch. It is related to input layout but not the same.; # If the first layer is dense it should be ``1 | batch size ! number of variables`` (features); # *(note the use of the character `|` as separator of input parameters for DNN layout)*; # note that in case of only dense layer the input layout could be omitted but it is required when defining more; # complex architectures; # - **layer layout** string defining the layer architecture. The syntax is; # - layer type (e.g. DENSE, CONV, RNN); # - layer parameters (e.g. number of units); # - activation function (e.g TANH, RELU,...); # *the different layers are separated by the ``"",""`` *; #### 2. Define Training Strategy; # We define here the training strategy parameters for the DNN. The parameters are separated by the ``"",""`` separator.; # One can then concatenate different training strategy with different parameters. The training strategy are separated by; # the ``""|""`` separator.; # - Optimizer; # - Learning rate; # - Momentum (valid for SGD and RMSPROP); # - Regularization and Weight Decay; # - Dropout; # - Max number of epochs; # - Convergence steps. if the test error will not decrease after that value the training will stop; # - Batch size (This value must be the same specified in the input layout); # - Test Repetitions (the interval when the test",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:810,Modifiability,variab,variables,810,"## Here we book the new DNN of TMVA if we have support in ROOT. We will use GPU version if ROOT is enabled with GPU; ## Booking Deep Neural Network; # Here we define the option string for building the Deep Neural network model.; #### 1. Define DNN layout; # The DNN configuration is defined using a string. Note that whitespaces between characters are not allowed.; # We define first the DNN layout:; # - **input layout** : this defines the input data format for the DNN as ``input depth | height | width``.; # In case of a dense layer as first layer the input layout should be ``1 | 1 | number of input variables`` (features); # - **batch layout** : this defines how are the input batch. It is related to input layout but not the same.; # If the first layer is dense it should be ``1 | batch size ! number of variables`` (features); # *(note the use of the character `|` as separator of input parameters for DNN layout)*; # note that in case of only dense layer the input layout could be omitted but it is required when defining more; # complex architectures; # - **layer layout** string defining the layer architecture. The syntax is; # - layer type (e.g. DENSE, CONV, RNN); # - layer parameters (e.g. number of units); # - activation function (e.g TANH, RELU,...); # *the different layers are separated by the ``"",""`` *; #### 2. Define Training Strategy; # We define here the training strategy parameters for the DNN. The parameters are separated by the ``"",""`` separator.; # One can then concatenate different training strategy with different parameters. The training strategy are separated by; # the ``""|""`` separator.; # - Optimizer; # - Learning rate; # - Momentum (valid for SGD and RMSPROP); # - Regularization and Weight Decay; # - Dropout; # - Max number of epochs; # - Convergence steps. if the test error will not decrease after that value the training will stop; # - Batch size (This value must be the same specified in the input layout); # - Test Repetitions (the interval when the test",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:1285,Modifiability,layers,layers,1285," string. Note that whitespaces between characters are not allowed.; # We define first the DNN layout:; # - **input layout** : this defines the input data format for the DNN as ``input depth | height | width``.; # In case of a dense layer as first layer the input layout should be ``1 | 1 | number of input variables`` (features); # - **batch layout** : this defines how are the input batch. It is related to input layout but not the same.; # If the first layer is dense it should be ``1 | batch size ! number of variables`` (features); # *(note the use of the character `|` as separator of input parameters for DNN layout)*; # note that in case of only dense layer the input layout could be omitted but it is required when defining more; # complex architectures; # - **layer layout** string defining the layer architecture. The syntax is; # - layer type (e.g. DENSE, CONV, RNN); # - layer parameters (e.g. number of units); # - activation function (e.g TANH, RELU,...); # *the different layers are separated by the ``"",""`` *; #### 2. Define Training Strategy; # We define here the training strategy parameters for the DNN. The parameters are separated by the ``"",""`` separator.; # One can then concatenate different training strategy with different parameters. The training strategy are separated by; # the ``""|""`` separator.; # - Optimizer; # - Learning rate; # - Momentum (valid for SGD and RMSPROP); # - Regularization and Weight Decay; # - Dropout; # - Max number of epochs; # - Convergence steps. if the test error will not decrease after that value the training will stop; # - Batch size (This value must be the same specified in the input layout); # - Test Repetitions (the interval when the test error will be computed); #### 3. Define general DNN options; # We define the general DNN options concatenating in the final string the previously defined layout and training strategy.; # Note we use the ``"":""`` separator to separate the different higher level options, as in the other TMVA method",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:1807,Testability,test,test,1807,"ch layout** : this defines how are the input batch. It is related to input layout but not the same.; # If the first layer is dense it should be ``1 | batch size ! number of variables`` (features); # *(note the use of the character `|` as separator of input parameters for DNN layout)*; # note that in case of only dense layer the input layout could be omitted but it is required when defining more; # complex architectures; # - **layer layout** string defining the layer architecture. The syntax is; # - layer type (e.g. DENSE, CONV, RNN); # - layer parameters (e.g. number of units); # - activation function (e.g TANH, RELU,...); # *the different layers are separated by the ``"",""`` *; #### 2. Define Training Strategy; # We define here the training strategy parameters for the DNN. The parameters are separated by the ``"",""`` separator.; # One can then concatenate different training strategy with different parameters. The training strategy are separated by; # the ``""|""`` separator.; # - Optimizer; # - Learning rate; # - Momentum (valid for SGD and RMSPROP); # - Regularization and Weight Decay; # - Dropout; # - Max number of epochs; # - Convergence steps. if the test error will not decrease after that value the training will stop; # - Batch size (This value must be the same specified in the input layout); # - Test Repetitions (the interval when the test error will be computed); #### 3. Define general DNN options; # We define the general DNN options concatenating in the final string the previously defined layout and training strategy.; # Note we use the ``"":""`` separator to separate the different higher level options, as in the other TMVA methods.; # In addition to input layout, batch layout and training strategy we add now:; # - Type of Loss function (e.g. CROSSENTROPY); # - Weight Initizalization (e.g XAVIER, XAVIERUNIFORM, NORMAL ); # - Variable Transformation; # - Type of Architecture (e.g. CPU, GPU, Standard); # We can then book the DL method using the built option string",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:1997,Testability,test,test,1997,"ch layout** : this defines how are the input batch. It is related to input layout but not the same.; # If the first layer is dense it should be ``1 | batch size ! number of variables`` (features); # *(note the use of the character `|` as separator of input parameters for DNN layout)*; # note that in case of only dense layer the input layout could be omitted but it is required when defining more; # complex architectures; # - **layer layout** string defining the layer architecture. The syntax is; # - layer type (e.g. DENSE, CONV, RNN); # - layer parameters (e.g. number of units); # - activation function (e.g TANH, RELU,...); # *the different layers are separated by the ``"",""`` *; #### 2. Define Training Strategy; # We define here the training strategy parameters for the DNN. The parameters are separated by the ``"",""`` separator.; # One can then concatenate different training strategy with different parameters. The training strategy are separated by; # the ``""|""`` separator.; # - Optimizer; # - Learning rate; # - Momentum (valid for SGD and RMSPROP); # - Regularization and Weight Decay; # - Dropout; # - Max number of epochs; # - Convergence steps. if the test error will not decrease after that value the training will stop; # - Batch size (This value must be the same specified in the input layout); # - Test Repetitions (the interval when the test error will be computed); #### 3. Define general DNN options; # We define the general DNN options concatenating in the final string the previously defined layout and training strategy.; # Note we use the ``"":""`` separator to separate the different higher level options, as in the other TMVA methods.; # In addition to input layout, batch layout and training strategy we add now:; # - Type of Loss function (e.g. CROSSENTROPY); # - Weight Initizalization (e.g XAVIER, XAVIERUNIFORM, NORMAL ); # - Variable Transformation; # - Type of Architecture (e.g. CPU, GPU, Standard); # We can then book the DL method using the built option string",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:28,Modifiability,layers,layers,28,"# create Keras model with 4 layers of 64 units and relu activations",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:84,Energy Efficiency,allocate,allocates,84,"# GpuOptions=""allow_growth=True"",; # ) # needed for RTX NVidia card and to avoid TF allocates all GPU memory; ## Train Methods; # Here we train all the previously booked methods.",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:75,Safety,avoid,avoid,75,"# GpuOptions=""allow_growth=True"",; # ) # needed for RTX NVidia card and to avoid TF allocates all GPU memory; ## Train Methods; # Here we train all the previously booked methods.",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:30,Testability,test,test,30,"## Test all methods; # Now we test and evaluate all methods using the test data set",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:70,Testability,test,test,70,"## Test all methods; # Now we test and evaluate all methods using the test data set",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_Higgs_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py:204,Integrability,depend,dependent,204,"## \file; ## \ingroup tutorial_tmva; ## \notebook; ## TMVA Classification Example Using a Recurrent Neural Network; ##; ## This is an example of using a RNN in TMVA. We do classification using a toy time dependent data set; ## that is generated when running this example macro; ##; ## \macro_image; ## \macro_output; ## \macro_code; ##; ## \author Harshal Shende; # TMVA Classification Example Using a Recurrent Neural Network; # This is an example of using a RNN in TMVA.; # We do the classification using a toy data set containing a time series of data sample ntimes; # and with dimension ndim that is generated when running the provided function `MakeTimeData (nevents, ntime, ndim)`",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_RNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py:31,Safety,avoid,avoid,31,"# switch off MT in OpenBLAS to avoid conflict with tbb",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_RNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py:13,Performance,perform,performing,13,"## macro for performing a classification using a Recurrent Neural Network; ## @param use_type; ## use_type = 0 use Simple RNN network; ## use_type = 1 use LSTM network; ## use_type = 2 use GRU; ## use_type = 3 build 3 different networks with RNN, LSTM and GRU",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_RNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py:22,Availability,avail,available,22,"# use GPU for TMVA if available",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_RNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py:541,Deployability,configurat,configuration,541,"## Declare Factory; # Create the Factory class. Later you can choose the methods; # whose performance you'd like to investigate.; # The factory is the major TMVA object you have to interact with. Here is the list of parameters you need to; # pass; # - The first argument is the base of the name of all the output; # weightfiles in the directory weight/ that will be created with the; # method parameters; # - The second argument is the output file for the training results; #; # - The third argument is a string option defining some general configuration for the TMVA session.; # For example all TMVA output can be suppressed by removing the ""!"" (not) in front of the ""Silent"" argument in; # the option string; # // Creating the factory object",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_RNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py:541,Modifiability,config,configuration,541,"## Declare Factory; # Create the Factory class. Later you can choose the methods; # whose performance you'd like to investigate.; # The factory is the major TMVA object you have to interact with. Here is the list of parameters you need to; # pass; # - The first argument is the base of the name of all the output; # weightfiles in the directory weight/ that will be created with the; # method parameters; # - The second argument is the output file for the training results; #; # - The third argument is a string option defining some general configuration for the TMVA session.; # For example all TMVA output can be suppressed by removing the ""!"" (not) in front of the ""Silent"" argument in; # the option string; # // Creating the factory object",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_RNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py:90,Performance,perform,performance,90,"## Declare Factory; # Create the Factory class. Later you can choose the methods; # whose performance you'd like to investigate.; # The factory is the major TMVA object you have to interact with. Here is the list of parameters you need to; # pass; # - The first argument is the base of the name of all the output; # weightfiles in the directory weight/ that will be created with the; # method parameters; # - The second argument is the output file for the training results; #; # - The third argument is a string option defining some general configuration for the TMVA session.; # For example all TMVA output can be suppressed by removing the ""!"" (not) in front of the ""Silent"" argument in; # the option string; # // Creating the factory object",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_RNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py:7,Modifiability,variab,variables,7,"## add variables - use new AddVariablesArray function",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_RNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py:31,Integrability,depend,depending,31,"# add recurrent neural network depending on type / Use option to return the full output",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_RNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py:42,Testability,test,test,42,"# ---- Evaluate all MVAs using the set of test events",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_RNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py:48,Modifiability,config,configured,48,"# ----- Evaluate and compare performance of all configured MVAs",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_RNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py:29,Performance,perform,performance,29,"# ----- Evaluate and compare performance of all configured MVAs",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_RNN_Classification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_SOFIE_GNN.py:7,Safety,predict,prediction,7,"# Make prediction of GNN",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_SOFIE_GNN.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_SOFIE_GNN.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_SOFIE_GNN.py:17,Performance,optimiz,optimize,17,"'''#pragma cling optimize(2); #include ""gnn_encoder.hxx""; #include ""gnn_core.hxx""; #include ""gnn_decoder.hxx""; #include ""gnn_output_transform.hxx""'''",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_SOFIE_GNN.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_SOFIE_GNN.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_SOFIE_GNN_Parser.py:7,Safety,predict,prediction,7,"# Make prediction of GNN. This will initialize the GNN with weights",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_SOFIE_GNN_Parser.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_SOFIE_GNN_Parser.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_SOFIE_Models.py:28,Testability,test,test,28,"#split data in training and test data",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_SOFIE_Models.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_SOFIE_Models.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_SOFIE_Models.py:26,Testability,test,test,26,"#run the inference on the test data",MatchSource.CODE_COMMENT,tutorials/tmva/TMVA_SOFIE_Models.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_SOFIE_Models.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/keras/ClassificationKeras.py:15,Performance,optimiz,optimizer,15,"# Set loss and optimizer",MatchSource.CODE_COMMENT,tutorials/tmva/keras/ClassificationKeras.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/keras/ClassificationKeras.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/keras/ClassificationKeras.py:16,Testability,test,test,16,"# Run training, test and evaluation",MatchSource.CODE_COMMENT,tutorials/tmva/keras/ClassificationKeras.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/keras/ClassificationKeras.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/keras/MulticlassKeras.py:15,Performance,optimiz,optimizer,15,"# Set loss and optimizer",MatchSource.CODE_COMMENT,tutorials/tmva/keras/MulticlassKeras.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/keras/MulticlassKeras.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/keras/RegressionKeras.py:15,Performance,optimiz,optimizer,15,"# Set loss and optimizer",MatchSource.CODE_COMMENT,tutorials/tmva/keras/RegressionKeras.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/keras/RegressionKeras.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/pytorch/ApplicationClassificationPyTorch.py:306,Safety,avoid,avoid,306,"#!/usr/bin/env python; ## \file; ## \ingroup tutorial_tmva_pytorch; ## \notebook -nodraw; ## This tutorial shows how to apply a trained model to new data.; ##; ## \macro_code; ##; ## \date 2020; ## \author Anirudh Dagar <anirudhdagar6@gmail.com> - IIT, Roorkee; # PyTorch has to be imported before ROOT to avoid crashes because of clashing; # std::regexp symbols that are exported by cppyy.; # See also: https://github.com/wlav/cppyy/issues/227",MatchSource.CODE_COMMENT,tutorials/tmva/pytorch/ApplicationClassificationPyTorch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/pytorch/ApplicationClassificationPyTorch.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/pytorch/ApplicationClassificationPyTorch.py:9,Safety,predict,predict,9,"# Define predict function",MatchSource.CODE_COMMENT,tutorials/tmva/pytorch/ApplicationClassificationPyTorch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/pytorch/ApplicationClassificationPyTorch.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/pytorch/ApplicationRegressionPyTorch.py:319,Safety,avoid,avoid,319,"#!/usr/bin/env python; ## \file; ## \ingroup tutorial_tmva_pytorch; ## \notebook -nodraw; ## This tutorial shows how to apply a trained model to new data (regression).; ##; ## \macro_code; ##; ## \date 2020; ## \author Anirudh Dagar <anirudhdagar6@gmail.com> - IIT, Roorkee; # PyTorch has to be imported before ROOT to avoid crashes because of clashing; # std::regexp symbols that are exported by cppyy.; # See also: https://github.com/wlav/cppyy/issues/227",MatchSource.CODE_COMMENT,tutorials/tmva/pytorch/ApplicationRegressionPyTorch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/pytorch/ApplicationRegressionPyTorch.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/pytorch/ApplicationRegressionPyTorch.py:9,Safety,predict,predict,9,"# Define predict function",MatchSource.CODE_COMMENT,tutorials/tmva/pytorch/ApplicationRegressionPyTorch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/pytorch/ApplicationRegressionPyTorch.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/pytorch/ClassificationPyTorch.py:344,Safety,avoid,avoid,344,"#!/usr/bin/env python; ## \file; ## \ingroup tutorial_tmva_pytorch; ## \notebook -nodraw; ## This tutorial shows how to do classification in TMVA with neural networks; ## trained with PyTorch.; ##; ## \macro_code; ##; ## \date 2020; ## \author Anirudh Dagar <anirudhdagar6@gmail.com> - IIT, Roorkee; # PyTorch has to be imported before ROOT to avoid crashes because of clashing; # std::regexp symbols that are exported by cppyy.; # See also: https://github.com/wlav/cppyy/issues/227",MatchSource.CODE_COMMENT,tutorials/tmva/pytorch/ClassificationPyTorch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/pytorch/ClassificationPyTorch.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/pytorch/ClassificationPyTorch.py:9,Safety,predict,predict,9,"# Define predict function",MatchSource.CODE_COMMENT,tutorials/tmva/pytorch/ClassificationPyTorch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/pytorch/ClassificationPyTorch.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/pytorch/ClassificationPyTorch.py:16,Testability,test,test,16,"# Run training, test and evaluation",MatchSource.CODE_COMMENT,tutorials/tmva/pytorch/ClassificationPyTorch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/pytorch/ClassificationPyTorch.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/pytorch/MulticlassPyTorch.py:355,Safety,avoid,avoid,355,"#!/usr/bin/env python; ## \file; ## \ingroup tutorial_tmva_pytorch; ## \notebook -nodraw; ## This tutorial shows how to do multiclass classification in TMVA with neural; ## networks trained with PyTorch.; ##; ## \macro_code; ##; ## \date 2020; ## \author Anirudh Dagar <anirudhdagar6@gmail.com> - IIT, Roorkee; # PyTorch has to be imported before ROOT to avoid crashes because of clashing; # std::regexp symbols that are exported by cppyy.; # See also: https://github.com/wlav/cppyy/issues/227",MatchSource.CODE_COMMENT,tutorials/tmva/pytorch/MulticlassPyTorch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/pytorch/MulticlassPyTorch.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/pytorch/MulticlassPyTorch.py:15,Performance,optimiz,optimizer,15,"# Set loss and optimizer",MatchSource.CODE_COMMENT,tutorials/tmva/pytorch/MulticlassPyTorch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/pytorch/MulticlassPyTorch.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/pytorch/MulticlassPyTorch.py:9,Safety,predict,predict,9,"# Define predict function",MatchSource.CODE_COMMENT,tutorials/tmva/pytorch/MulticlassPyTorch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/pytorch/MulticlassPyTorch.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/pytorch/RegressionPyTorch.py:340,Safety,avoid,avoid,340,"#!/usr/bin/env python; ## \file; ## \ingroup tutorial_tmva_pytorch; ## \notebook -nodraw; ## This tutorial shows how to do regression in TMVA with neural networks; ## trained with PyTorch.; ##; ## \macro_code; ##; ## \date 2020; ## \author Anirudh Dagar <anirudhdagar6@gmail.com> - IIT, Roorkee; # PyTorch has to be imported before ROOT to avoid crashes because of clashing; # std::regexp symbols that are exported by cppyy.; # See also: https://github.com/wlav/cppyy/issues/227",MatchSource.CODE_COMMENT,tutorials/tmva/pytorch/RegressionPyTorch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/pytorch/RegressionPyTorch.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/pytorch/RegressionPyTorch.py:9,Safety,predict,predict,9,"# Define predict function",MatchSource.CODE_COMMENT,tutorials/tmva/pytorch/RegressionPyTorch.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/pytorch/RegressionPyTorch.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/vecops/vo001_AdoptOrOwnMemory.py:153,Energy Efficiency,allocate,allocate,153,"## \file; ## \ingroup tutorial_vecops; ## \notebook -nodraw; ## In this tutorial we learn how the RVec class can be used to; ## adopt existing memory or allocate some.; ##; ## \macro_code; ## \macro_output; ##; ## \date May 2018; ## \author Danilo Piparo",MatchSource.CODE_COMMENT,tutorials/vecops/vo001_AdoptOrOwnMemory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/vecops/vo001_AdoptOrOwnMemory.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/vecops/vo001_AdoptOrOwnMemory.py:84,Usability,learn,learn,84,"## \file; ## \ingroup tutorial_vecops; ## \notebook -nodraw; ## In this tutorial we learn how the RVec class can be used to; ## adopt existing memory or allocate some.; ##; ## \macro_code; ## \macro_output; ##; ## \date May 2018; ## \author Danilo Piparo",MatchSource.CODE_COMMENT,tutorials/vecops/vo001_AdoptOrOwnMemory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/vecops/vo001_AdoptOrOwnMemory.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/vecops/vo001_AdoptOrOwnMemory.py:194,Integrability,interface,interface,194,"# Now, upon reallocation, the RVec stops adopting the memory and starts owning it. And yes,; # a copy is triggered. Indeed internally the storage of the RVec is an std::vector. Moreover,; # the interface of the RVec is very, very similar to the one of std::vector: you have already; # noticed it when the `data()` method was invoked, right?",MatchSource.CODE_COMMENT,tutorials/vecops/vo001_AdoptOrOwnMemory.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/vecops/vo001_AdoptOrOwnMemory.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/vecops/vo004_SortAndSelect.py:84,Usability,learn,learn,84,"## \file; ## \ingroup tutorial_vecops; ## \notebook -nodraw; ## In this tutorial we learn how elements of an RVec can be easily sorted and; ## selected.; ##; ## \macro_code; ## \macro_output; ##; ## \date August 2018; ## \author Stefan Wunsch",MatchSource.CODE_COMMENT,tutorials/vecops/vo004_SortAndSelect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/vecops/vo004_SortAndSelect.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/vecops/vo005_Combinations.py:84,Usability,learn,learn,84,"## \file; ## \ingroup tutorial_vecops; ## \notebook -nodraw; ## In this tutorial we learn how combinations of RVecs can be built.; ##; ## \macro_code; ## \macro_output; ##; ## \date August 2018; ## \author Stefan Wunsch",MatchSource.CODE_COMMENT,tutorials/vecops/vo005_Combinations.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/vecops/vo005_Combinations.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/vecops/vo005_Combinations.py:19,Performance,perform,perform,19,"# Finally, you can perform any set of operations conveniently.",MatchSource.CODE_COMMENT,tutorials/vecops/vo005_Combinations.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/vecops/vo005_Combinations.py
https://github.com/root-project/root/tree/v6-32-06/tutorials/vecops/vo005_Combinations.py:97,Performance,perform,perform,97,"# However, if you want to compute operations on unique combinations of a; # single RVec, you can perform this as follows.; # Get the indices of unique triples for the given vector.",MatchSource.CODE_COMMENT,tutorials/vecops/vo005_Combinations.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/vecops/vo005_Combinations.py
