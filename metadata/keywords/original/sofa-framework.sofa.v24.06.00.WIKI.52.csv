id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html:206,Modifiability,Plugin,Plugin,206,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::system::Plugin Member List . This is the complete list of members for sofa::helper::system::Plugin, including all inherited members. GetModuleComponentList typedefsofa::helper::system::Plugin; getModuleComponentListsofa::helper::system::Plugin; GetModuleDescription typedefsofa::helper::system::Plugin; getModuleDescriptionsofa::helper::system::Plugin; GetModuleLicense typedefsofa::helper::system::Plugin; getModuleLicensesofa::helper::system::Plugin; GetModuleName typedefsofa::helper::system::Plugin; getModuleNamesofa::helper::system::Plugin; GetModuleVersion typedefsofa::helper::system::Plugin; getModuleVersionsofa::helper::system::Plugin; InitExternalModule typedefsofa::helper::system::Plugin; initExternalModulesofa::helper::system::Plugin; moduleIsInitializedsofa::helper::system::Plugin; PluginManager classsofa::helper::system::Pluginfriend. Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html:228,Modifiability,inherit,inherited,228,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::system::Plugin Member List . This is the complete list of members for sofa::helper::system::Plugin, including all inherited members. GetModuleComponentList typedefsofa::helper::system::Plugin; getModuleComponentListsofa::helper::system::Plugin; GetModuleDescription typedefsofa::helper::system::Plugin; getModuleDescriptionsofa::helper::system::Plugin; GetModuleLicense typedefsofa::helper::system::Plugin; getModuleLicensesofa::helper::system::Plugin; GetModuleName typedefsofa::helper::system::Plugin; getModuleNamesofa::helper::system::Plugin; GetModuleVersion typedefsofa::helper::system::Plugin; getModuleVersionsofa::helper::system::Plugin; InitExternalModule typedefsofa::helper::system::Plugin; initExternalModulesofa::helper::system::Plugin; moduleIsInitializedsofa::helper::system::Plugin; PluginManager classsofa::helper::system::Pluginfriend. Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html:299,Modifiability,Plugin,Plugin,299,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::system::Plugin Member List . This is the complete list of members for sofa::helper::system::Plugin, including all inherited members. GetModuleComponentList typedefsofa::helper::system::Plugin; getModuleComponentListsofa::helper::system::Plugin; GetModuleDescription typedefsofa::helper::system::Plugin; getModuleDescriptionsofa::helper::system::Plugin; GetModuleLicense typedefsofa::helper::system::Plugin; getModuleLicensesofa::helper::system::Plugin; GetModuleName typedefsofa::helper::system::Plugin; getModuleNamesofa::helper::system::Plugin; GetModuleVersion typedefsofa::helper::system::Plugin; getModuleVersionsofa::helper::system::Plugin; InitExternalModule typedefsofa::helper::system::Plugin; initExternalModulesofa::helper::system::Plugin; moduleIsInitializedsofa::helper::system::Plugin; PluginManager classsofa::helper::system::Pluginfriend. Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html:351,Modifiability,Plugin,Plugin,351,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::system::Plugin Member List . This is the complete list of members for sofa::helper::system::Plugin, including all inherited members. GetModuleComponentList typedefsofa::helper::system::Plugin; getModuleComponentListsofa::helper::system::Plugin; GetModuleDescription typedefsofa::helper::system::Plugin; getModuleDescriptionsofa::helper::system::Plugin; GetModuleLicense typedefsofa::helper::system::Plugin; getModuleLicensesofa::helper::system::Plugin; GetModuleName typedefsofa::helper::system::Plugin; getModuleNamesofa::helper::system::Plugin; GetModuleVersion typedefsofa::helper::system::Plugin; getModuleVersionsofa::helper::system::Plugin; InitExternalModule typedefsofa::helper::system::Plugin; initExternalModulesofa::helper::system::Plugin; moduleIsInitializedsofa::helper::system::Plugin; PluginManager classsofa::helper::system::Pluginfriend. Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html:409,Modifiability,Plugin,Plugin,409,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::system::Plugin Member List . This is the complete list of members for sofa::helper::system::Plugin, including all inherited members. GetModuleComponentList typedefsofa::helper::system::Plugin; getModuleComponentListsofa::helper::system::Plugin; GetModuleDescription typedefsofa::helper::system::Plugin; getModuleDescriptionsofa::helper::system::Plugin; GetModuleLicense typedefsofa::helper::system::Plugin; getModuleLicensesofa::helper::system::Plugin; GetModuleName typedefsofa::helper::system::Plugin; getModuleNamesofa::helper::system::Plugin; GetModuleVersion typedefsofa::helper::system::Plugin; getModuleVersionsofa::helper::system::Plugin; InitExternalModule typedefsofa::helper::system::Plugin; initExternalModulesofa::helper::system::Plugin; moduleIsInitializedsofa::helper::system::Plugin; PluginManager classsofa::helper::system::Pluginfriend. Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html:459,Modifiability,Plugin,Plugin,459,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::system::Plugin Member List . This is the complete list of members for sofa::helper::system::Plugin, including all inherited members. GetModuleComponentList typedefsofa::helper::system::Plugin; getModuleComponentListsofa::helper::system::Plugin; GetModuleDescription typedefsofa::helper::system::Plugin; getModuleDescriptionsofa::helper::system::Plugin; GetModuleLicense typedefsofa::helper::system::Plugin; getModuleLicensesofa::helper::system::Plugin; GetModuleName typedefsofa::helper::system::Plugin; getModuleNamesofa::helper::system::Plugin; GetModuleVersion typedefsofa::helper::system::Plugin; getModuleVersionsofa::helper::system::Plugin; InitExternalModule typedefsofa::helper::system::Plugin; initExternalModulesofa::helper::system::Plugin; moduleIsInitializedsofa::helper::system::Plugin; PluginManager classsofa::helper::system::Pluginfriend. Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html:513,Modifiability,Plugin,Plugin,513,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::system::Plugin Member List . This is the complete list of members for sofa::helper::system::Plugin, including all inherited members. GetModuleComponentList typedefsofa::helper::system::Plugin; getModuleComponentListsofa::helper::system::Plugin; GetModuleDescription typedefsofa::helper::system::Plugin; getModuleDescriptionsofa::helper::system::Plugin; GetModuleLicense typedefsofa::helper::system::Plugin; getModuleLicensesofa::helper::system::Plugin; GetModuleName typedefsofa::helper::system::Plugin; getModuleNamesofa::helper::system::Plugin; GetModuleVersion typedefsofa::helper::system::Plugin; getModuleVersionsofa::helper::system::Plugin; InitExternalModule typedefsofa::helper::system::Plugin; initExternalModulesofa::helper::system::Plugin; moduleIsInitializedsofa::helper::system::Plugin; PluginManager classsofa::helper::system::Pluginfriend. Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html:559,Modifiability,Plugin,Plugin,559,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::system::Plugin Member List . This is the complete list of members for sofa::helper::system::Plugin, including all inherited members. GetModuleComponentList typedefsofa::helper::system::Plugin; getModuleComponentListsofa::helper::system::Plugin; GetModuleDescription typedefsofa::helper::system::Plugin; getModuleDescriptionsofa::helper::system::Plugin; GetModuleLicense typedefsofa::helper::system::Plugin; getModuleLicensesofa::helper::system::Plugin; GetModuleName typedefsofa::helper::system::Plugin; getModuleNamesofa::helper::system::Plugin; GetModuleVersion typedefsofa::helper::system::Plugin; getModuleVersionsofa::helper::system::Plugin; InitExternalModule typedefsofa::helper::system::Plugin; initExternalModulesofa::helper::system::Plugin; moduleIsInitializedsofa::helper::system::Plugin; PluginManager classsofa::helper::system::Pluginfriend. Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html:610,Modifiability,Plugin,Plugin,610,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::system::Plugin Member List . This is the complete list of members for sofa::helper::system::Plugin, including all inherited members. GetModuleComponentList typedefsofa::helper::system::Plugin; getModuleComponentListsofa::helper::system::Plugin; GetModuleDescription typedefsofa::helper::system::Plugin; getModuleDescriptionsofa::helper::system::Plugin; GetModuleLicense typedefsofa::helper::system::Plugin; getModuleLicensesofa::helper::system::Plugin; GetModuleName typedefsofa::helper::system::Plugin; getModuleNamesofa::helper::system::Plugin; GetModuleVersion typedefsofa::helper::system::Plugin; getModuleVersionsofa::helper::system::Plugin; InitExternalModule typedefsofa::helper::system::Plugin; initExternalModulesofa::helper::system::Plugin; moduleIsInitializedsofa::helper::system::Plugin; PluginManager classsofa::helper::system::Pluginfriend. Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html:653,Modifiability,Plugin,Plugin,653,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::system::Plugin Member List . This is the complete list of members for sofa::helper::system::Plugin, including all inherited members. GetModuleComponentList typedefsofa::helper::system::Plugin; getModuleComponentListsofa::helper::system::Plugin; GetModuleDescription typedefsofa::helper::system::Plugin; getModuleDescriptionsofa::helper::system::Plugin; GetModuleLicense typedefsofa::helper::system::Plugin; getModuleLicensesofa::helper::system::Plugin; GetModuleName typedefsofa::helper::system::Plugin; getModuleNamesofa::helper::system::Plugin; GetModuleVersion typedefsofa::helper::system::Plugin; getModuleVersionsofa::helper::system::Plugin; InitExternalModule typedefsofa::helper::system::Plugin; initExternalModulesofa::helper::system::Plugin; moduleIsInitializedsofa::helper::system::Plugin; PluginManager classsofa::helper::system::Pluginfriend. Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html:707,Modifiability,Plugin,Plugin,707,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::system::Plugin Member List . This is the complete list of members for sofa::helper::system::Plugin, including all inherited members. GetModuleComponentList typedefsofa::helper::system::Plugin; getModuleComponentListsofa::helper::system::Plugin; GetModuleDescription typedefsofa::helper::system::Plugin; getModuleDescriptionsofa::helper::system::Plugin; GetModuleLicense typedefsofa::helper::system::Plugin; getModuleLicensesofa::helper::system::Plugin; GetModuleName typedefsofa::helper::system::Plugin; getModuleNamesofa::helper::system::Plugin; GetModuleVersion typedefsofa::helper::system::Plugin; getModuleVersionsofa::helper::system::Plugin; InitExternalModule typedefsofa::helper::system::Plugin; initExternalModulesofa::helper::system::Plugin; moduleIsInitializedsofa::helper::system::Plugin; PluginManager classsofa::helper::system::Pluginfriend. Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html:753,Modifiability,Plugin,Plugin,753,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::system::Plugin Member List . This is the complete list of members for sofa::helper::system::Plugin, including all inherited members. GetModuleComponentList typedefsofa::helper::system::Plugin; getModuleComponentListsofa::helper::system::Plugin; GetModuleDescription typedefsofa::helper::system::Plugin; getModuleDescriptionsofa::helper::system::Plugin; GetModuleLicense typedefsofa::helper::system::Plugin; getModuleLicensesofa::helper::system::Plugin; GetModuleName typedefsofa::helper::system::Plugin; getModuleNamesofa::helper::system::Plugin; GetModuleVersion typedefsofa::helper::system::Plugin; getModuleVersionsofa::helper::system::Plugin; InitExternalModule typedefsofa::helper::system::Plugin; initExternalModulesofa::helper::system::Plugin; moduleIsInitializedsofa::helper::system::Plugin; PluginManager classsofa::helper::system::Pluginfriend. Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html:809,Modifiability,Plugin,Plugin,809,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::system::Plugin Member List . This is the complete list of members for sofa::helper::system::Plugin, including all inherited members. GetModuleComponentList typedefsofa::helper::system::Plugin; getModuleComponentListsofa::helper::system::Plugin; GetModuleDescription typedefsofa::helper::system::Plugin; getModuleDescriptionsofa::helper::system::Plugin; GetModuleLicense typedefsofa::helper::system::Plugin; getModuleLicensesofa::helper::system::Plugin; GetModuleName typedefsofa::helper::system::Plugin; getModuleNamesofa::helper::system::Plugin; GetModuleVersion typedefsofa::helper::system::Plugin; getModuleVersionsofa::helper::system::Plugin; InitExternalModule typedefsofa::helper::system::Plugin; initExternalModulesofa::helper::system::Plugin; moduleIsInitializedsofa::helper::system::Plugin; PluginManager classsofa::helper::system::Pluginfriend. Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html:857,Modifiability,Plugin,Plugin,857,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::system::Plugin Member List . This is the complete list of members for sofa::helper::system::Plugin, including all inherited members. GetModuleComponentList typedefsofa::helper::system::Plugin; getModuleComponentListsofa::helper::system::Plugin; GetModuleDescription typedefsofa::helper::system::Plugin; getModuleDescriptionsofa::helper::system::Plugin; GetModuleLicense typedefsofa::helper::system::Plugin; getModuleLicensesofa::helper::system::Plugin; GetModuleName typedefsofa::helper::system::Plugin; getModuleNamesofa::helper::system::Plugin; GetModuleVersion typedefsofa::helper::system::Plugin; getModuleVersionsofa::helper::system::Plugin; InitExternalModule typedefsofa::helper::system::Plugin; initExternalModulesofa::helper::system::Plugin; moduleIsInitializedsofa::helper::system::Plugin; PluginManager classsofa::helper::system::Pluginfriend. Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html:906,Modifiability,Plugin,Plugin,906,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::system::Plugin Member List . This is the complete list of members for sofa::helper::system::Plugin, including all inherited members. GetModuleComponentList typedefsofa::helper::system::Plugin; getModuleComponentListsofa::helper::system::Plugin; GetModuleDescription typedefsofa::helper::system::Plugin; getModuleDescriptionsofa::helper::system::Plugin; GetModuleLicense typedefsofa::helper::system::Plugin; getModuleLicensesofa::helper::system::Plugin; GetModuleName typedefsofa::helper::system::Plugin; getModuleNamesofa::helper::system::Plugin; GetModuleVersion typedefsofa::helper::system::Plugin; getModuleVersionsofa::helper::system::Plugin; InitExternalModule typedefsofa::helper::system::Plugin; initExternalModulesofa::helper::system::Plugin; moduleIsInitializedsofa::helper::system::Plugin; PluginManager classsofa::helper::system::Pluginfriend. Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html:914,Modifiability,Plugin,PluginManager,914,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::system::Plugin Member List . This is the complete list of members for sofa::helper::system::Plugin, including all inherited members. GetModuleComponentList typedefsofa::helper::system::Plugin; getModuleComponentListsofa::helper::system::Plugin; GetModuleDescription typedefsofa::helper::system::Plugin; getModuleDescriptionsofa::helper::system::Plugin; GetModuleLicense typedefsofa::helper::system::Plugin; getModuleLicensesofa::helper::system::Plugin; GetModuleName typedefsofa::helper::system::Plugin; getModuleNamesofa::helper::system::Plugin; GetModuleVersion typedefsofa::helper::system::Plugin; getModuleVersionsofa::helper::system::Plugin; InitExternalModule typedefsofa::helper::system::Plugin; initExternalModulesofa::helper::system::Plugin; moduleIsInitializedsofa::helper::system::Plugin; PluginManager classsofa::helper::system::Pluginfriend. Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html:955,Modifiability,Plugin,Pluginfriend,955,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::system::Plugin Member List . This is the complete list of members for sofa::helper::system::Plugin, including all inherited members. GetModuleComponentList typedefsofa::helper::system::Plugin; getModuleComponentListsofa::helper::system::Plugin; GetModuleDescription typedefsofa::helper::system::Plugin; getModuleDescriptionsofa::helper::system::Plugin; GetModuleLicense typedefsofa::helper::system::Plugin; getModuleLicensesofa::helper::system::Plugin; GetModuleName typedefsofa::helper::system::Plugin; getModuleNamesofa::helper::system::Plugin; GetModuleVersion typedefsofa::helper::system::Plugin; getModuleVersionsofa::helper::system::Plugin; InitExternalModule typedefsofa::helper::system::Plugin; initExternalModulesofa::helper::system::Plugin; moduleIsInitializedsofa::helper::system::Plugin; PluginManager classsofa::helper::system::Pluginfriend. Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html:35,Modifiability,Plugin,Plugin,35,﻿. SOFA API: sofa::helper::system::Plugin Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Friends |; List of all members . sofa::helper::system::Plugin Class Reference . #include <PluginManager.h>. Classes; struct  GetModuleComponentList;  ; struct  GetModuleDescription;  ; struct  GetModuleLicense;  ; struct  GetModuleName;  ; struct  GetModuleVersion;  ; struct  InitExternalModule;  ; struct  ModuleIsInitialized;  . Public Attributes; InitExternalModule initExternalModule;  ; GetModuleName getModuleName;  ; GetModuleDescription getModuleDescription;  ; GetModuleLicense getModuleLicense;  ; GetModuleComponentList getModuleComponentList;  ; GetModuleVersion getModuleVersion;  ; ModuleIsInitialized moduleIsInitialized;  . Friends; class PluginManager;  . Attribute details. ◆ getModuleComponentList. GetModuleComponentList sofa::helper::system::Plugin::getModuleComponentList. ◆ getModuleDescription. GetModuleDescription sofa::helper::system::Plugin::getModuleDescription. ◆ getModuleLicense. GetModuleLicense sofa::helper::system::Plugin::getModuleLicense. ◆ getModuleName. GetModuleName sofa::helper::system::Plugin::getModuleName. ◆ getModuleVersion. GetModuleVersion sofa::helper::system::Plugin::getModuleVersion. ◆ initExternalModule. InitExternalModule sofa::helper::system::Plugin::initExternalModule. ◆ moduleIsInitialized. ModuleIsInitialized sofa::helper::system::Plugin::moduleIsInitialized. Related details. ◆ PluginManager. friend class PluginManager. friend . sofahelpersystemPlugin; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html:220,Modifiability,Plugin,Plugin,220,﻿. SOFA API: sofa::helper::system::Plugin Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Friends |; List of all members . sofa::helper::system::Plugin Class Reference . #include <PluginManager.h>. Classes; struct  GetModuleComponentList;  ; struct  GetModuleDescription;  ; struct  GetModuleLicense;  ; struct  GetModuleName;  ; struct  GetModuleVersion;  ; struct  InitExternalModule;  ; struct  ModuleIsInitialized;  . Public Attributes; InitExternalModule initExternalModule;  ; GetModuleName getModuleName;  ; GetModuleDescription getModuleDescription;  ; GetModuleLicense getModuleLicense;  ; GetModuleComponentList getModuleComponentList;  ; GetModuleVersion getModuleVersion;  ; ModuleIsInitialized moduleIsInitialized;  . Friends; class PluginManager;  . Attribute details. ◆ getModuleComponentList. GetModuleComponentList sofa::helper::system::Plugin::getModuleComponentList. ◆ getModuleDescription. GetModuleDescription sofa::helper::system::Plugin::getModuleDescription. ◆ getModuleLicense. GetModuleLicense sofa::helper::system::Plugin::getModuleLicense. ◆ getModuleName. GetModuleName sofa::helper::system::Plugin::getModuleName. ◆ getModuleVersion. GetModuleVersion sofa::helper::system::Plugin::getModuleVersion. ◆ initExternalModule. InitExternalModule sofa::helper::system::Plugin::initExternalModule. ◆ moduleIsInitialized. ModuleIsInitialized sofa::helper::system::Plugin::moduleIsInitialized. Related details. ◆ PluginManager. friend class PluginManager. friend . sofahelpersystemPlugin; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html:255,Modifiability,Plugin,PluginManager,255,﻿. SOFA API: sofa::helper::system::Plugin Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Friends |; List of all members . sofa::helper::system::Plugin Class Reference . #include <PluginManager.h>. Classes; struct  GetModuleComponentList;  ; struct  GetModuleDescription;  ; struct  GetModuleLicense;  ; struct  GetModuleName;  ; struct  GetModuleVersion;  ; struct  InitExternalModule;  ; struct  ModuleIsInitialized;  . Public Attributes; InitExternalModule initExternalModule;  ; GetModuleName getModuleName;  ; GetModuleDescription getModuleDescription;  ; GetModuleLicense getModuleLicense;  ; GetModuleComponentList getModuleComponentList;  ; GetModuleVersion getModuleVersion;  ; ModuleIsInitialized moduleIsInitialized;  . Friends; class PluginManager;  . Attribute details. ◆ getModuleComponentList. GetModuleComponentList sofa::helper::system::Plugin::getModuleComponentList. ◆ getModuleDescription. GetModuleDescription sofa::helper::system::Plugin::getModuleDescription. ◆ getModuleLicense. GetModuleLicense sofa::helper::system::Plugin::getModuleLicense. ◆ getModuleName. GetModuleName sofa::helper::system::Plugin::getModuleName. ◆ getModuleVersion. GetModuleVersion sofa::helper::system::Plugin::getModuleVersion. ◆ initExternalModule. InitExternalModule sofa::helper::system::Plugin::initExternalModule. ◆ moduleIsInitialized. ModuleIsInitialized sofa::helper::system::Plugin::moduleIsInitialized. Related details. ◆ PluginManager. friend class PluginManager. friend . sofahelpersystemPlugin; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html:821,Modifiability,Plugin,PluginManager,821,﻿. SOFA API: sofa::helper::system::Plugin Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Friends |; List of all members . sofa::helper::system::Plugin Class Reference . #include <PluginManager.h>. Classes; struct  GetModuleComponentList;  ; struct  GetModuleDescription;  ; struct  GetModuleLicense;  ; struct  GetModuleName;  ; struct  GetModuleVersion;  ; struct  InitExternalModule;  ; struct  ModuleIsInitialized;  . Public Attributes; InitExternalModule initExternalModule;  ; GetModuleName getModuleName;  ; GetModuleDescription getModuleDescription;  ; GetModuleLicense getModuleLicense;  ; GetModuleComponentList getModuleComponentList;  ; GetModuleVersion getModuleVersion;  ; ModuleIsInitialized moduleIsInitialized;  . Friends; class PluginManager;  . Attribute details. ◆ getModuleComponentList. GetModuleComponentList sofa::helper::system::Plugin::getModuleComponentList. ◆ getModuleDescription. GetModuleDescription sofa::helper::system::Plugin::getModuleDescription. ◆ getModuleLicense. GetModuleLicense sofa::helper::system::Plugin::getModuleLicense. ◆ getModuleName. GetModuleName sofa::helper::system::Plugin::getModuleName. ◆ getModuleVersion. GetModuleVersion sofa::helper::system::Plugin::getModuleVersion. ◆ initExternalModule. InitExternalModule sofa::helper::system::Plugin::initExternalModule. ◆ moduleIsInitialized. ModuleIsInitialized sofa::helper::system::Plugin::moduleIsInitialized. Related details. ◆ PluginManager. friend class PluginManager. friend . sofahelpersystemPlugin; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html:929,Modifiability,Plugin,Plugin,929,﻿. SOFA API: sofa::helper::system::Plugin Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Friends |; List of all members . sofa::helper::system::Plugin Class Reference . #include <PluginManager.h>. Classes; struct  GetModuleComponentList;  ; struct  GetModuleDescription;  ; struct  GetModuleLicense;  ; struct  GetModuleName;  ; struct  GetModuleVersion;  ; struct  InitExternalModule;  ; struct  ModuleIsInitialized;  . Public Attributes; InitExternalModule initExternalModule;  ; GetModuleName getModuleName;  ; GetModuleDescription getModuleDescription;  ; GetModuleLicense getModuleLicense;  ; GetModuleComponentList getModuleComponentList;  ; GetModuleVersion getModuleVersion;  ; ModuleIsInitialized moduleIsInitialized;  . Friends; class PluginManager;  . Attribute details. ◆ getModuleComponentList. GetModuleComponentList sofa::helper::system::Plugin::getModuleComponentList. ◆ getModuleDescription. GetModuleDescription sofa::helper::system::Plugin::getModuleDescription. ◆ getModuleLicense. GetModuleLicense sofa::helper::system::Plugin::getModuleLicense. ◆ getModuleName. GetModuleName sofa::helper::system::Plugin::getModuleName. ◆ getModuleVersion. GetModuleVersion sofa::helper::system::Plugin::getModuleVersion. ◆ initExternalModule. InitExternalModule sofa::helper::system::Plugin::initExternalModule. ◆ moduleIsInitialized. ModuleIsInitialized sofa::helper::system::Plugin::moduleIsInitialized. Related details. ◆ PluginManager. friend class PluginManager. friend . sofahelpersystemPlugin; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html:1028,Modifiability,Plugin,Plugin,1028,﻿. SOFA API: sofa::helper::system::Plugin Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Friends |; List of all members . sofa::helper::system::Plugin Class Reference . #include <PluginManager.h>. Classes; struct  GetModuleComponentList;  ; struct  GetModuleDescription;  ; struct  GetModuleLicense;  ; struct  GetModuleName;  ; struct  GetModuleVersion;  ; struct  InitExternalModule;  ; struct  ModuleIsInitialized;  . Public Attributes; InitExternalModule initExternalModule;  ; GetModuleName getModuleName;  ; GetModuleDescription getModuleDescription;  ; GetModuleLicense getModuleLicense;  ; GetModuleComponentList getModuleComponentList;  ; GetModuleVersion getModuleVersion;  ; ModuleIsInitialized moduleIsInitialized;  . Friends; class PluginManager;  . Attribute details. ◆ getModuleComponentList. GetModuleComponentList sofa::helper::system::Plugin::getModuleComponentList. ◆ getModuleDescription. GetModuleDescription sofa::helper::system::Plugin::getModuleDescription. ◆ getModuleLicense. GetModuleLicense sofa::helper::system::Plugin::getModuleLicense. ◆ getModuleName. GetModuleName sofa::helper::system::Plugin::getModuleName. ◆ getModuleVersion. GetModuleVersion sofa::helper::system::Plugin::getModuleVersion. ◆ initExternalModule. InitExternalModule sofa::helper::system::Plugin::initExternalModule. ◆ moduleIsInitialized. ModuleIsInitialized sofa::helper::system::Plugin::moduleIsInitialized. Related details. ◆ PluginManager. friend class PluginManager. friend . sofahelpersystemPlugin; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html:1117,Modifiability,Plugin,Plugin,1117,﻿. SOFA API: sofa::helper::system::Plugin Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Friends |; List of all members . sofa::helper::system::Plugin Class Reference . #include <PluginManager.h>. Classes; struct  GetModuleComponentList;  ; struct  GetModuleDescription;  ; struct  GetModuleLicense;  ; struct  GetModuleName;  ; struct  GetModuleVersion;  ; struct  InitExternalModule;  ; struct  ModuleIsInitialized;  . Public Attributes; InitExternalModule initExternalModule;  ; GetModuleName getModuleName;  ; GetModuleDescription getModuleDescription;  ; GetModuleLicense getModuleLicense;  ; GetModuleComponentList getModuleComponentList;  ; GetModuleVersion getModuleVersion;  ; ModuleIsInitialized moduleIsInitialized;  . Friends; class PluginManager;  . Attribute details. ◆ getModuleComponentList. GetModuleComponentList sofa::helper::system::Plugin::getModuleComponentList. ◆ getModuleDescription. GetModuleDescription sofa::helper::system::Plugin::getModuleDescription. ◆ getModuleLicense. GetModuleLicense sofa::helper::system::Plugin::getModuleLicense. ◆ getModuleName. GetModuleName sofa::helper::system::Plugin::getModuleName. ◆ getModuleVersion. GetModuleVersion sofa::helper::system::Plugin::getModuleVersion. ◆ initExternalModule. InitExternalModule sofa::helper::system::Plugin::initExternalModule. ◆ moduleIsInitialized. ModuleIsInitialized sofa::helper::system::Plugin::moduleIsInitialized. Related details. ◆ PluginManager. friend class PluginManager. friend . sofahelpersystemPlugin; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html:1196,Modifiability,Plugin,Plugin,1196,﻿. SOFA API: sofa::helper::system::Plugin Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Friends |; List of all members . sofa::helper::system::Plugin Class Reference . #include <PluginManager.h>. Classes; struct  GetModuleComponentList;  ; struct  GetModuleDescription;  ; struct  GetModuleLicense;  ; struct  GetModuleName;  ; struct  GetModuleVersion;  ; struct  InitExternalModule;  ; struct  ModuleIsInitialized;  . Public Attributes; InitExternalModule initExternalModule;  ; GetModuleName getModuleName;  ; GetModuleDescription getModuleDescription;  ; GetModuleLicense getModuleLicense;  ; GetModuleComponentList getModuleComponentList;  ; GetModuleVersion getModuleVersion;  ; ModuleIsInitialized moduleIsInitialized;  . Friends; class PluginManager;  . Attribute details. ◆ getModuleComponentList. GetModuleComponentList sofa::helper::system::Plugin::getModuleComponentList. ◆ getModuleDescription. GetModuleDescription sofa::helper::system::Plugin::getModuleDescription. ◆ getModuleLicense. GetModuleLicense sofa::helper::system::Plugin::getModuleLicense. ◆ getModuleName. GetModuleName sofa::helper::system::Plugin::getModuleName. ◆ getModuleVersion. GetModuleVersion sofa::helper::system::Plugin::getModuleVersion. ◆ initExternalModule. InitExternalModule sofa::helper::system::Plugin::initExternalModule. ◆ moduleIsInitialized. ModuleIsInitialized sofa::helper::system::Plugin::moduleIsInitialized. Related details. ◆ PluginManager. friend class PluginManager. friend . sofahelpersystemPlugin; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html:1278,Modifiability,Plugin,Plugin,1278,﻿. SOFA API: sofa::helper::system::Plugin Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Friends |; List of all members . sofa::helper::system::Plugin Class Reference . #include <PluginManager.h>. Classes; struct  GetModuleComponentList;  ; struct  GetModuleDescription;  ; struct  GetModuleLicense;  ; struct  GetModuleName;  ; struct  GetModuleVersion;  ; struct  InitExternalModule;  ; struct  ModuleIsInitialized;  . Public Attributes; InitExternalModule initExternalModule;  ; GetModuleName getModuleName;  ; GetModuleDescription getModuleDescription;  ; GetModuleLicense getModuleLicense;  ; GetModuleComponentList getModuleComponentList;  ; GetModuleVersion getModuleVersion;  ; ModuleIsInitialized moduleIsInitialized;  . Friends; class PluginManager;  . Attribute details. ◆ getModuleComponentList. GetModuleComponentList sofa::helper::system::Plugin::getModuleComponentList. ◆ getModuleDescription. GetModuleDescription sofa::helper::system::Plugin::getModuleDescription. ◆ getModuleLicense. GetModuleLicense sofa::helper::system::Plugin::getModuleLicense. ◆ getModuleName. GetModuleName sofa::helper::system::Plugin::getModuleName. ◆ getModuleVersion. GetModuleVersion sofa::helper::system::Plugin::getModuleVersion. ◆ initExternalModule. InitExternalModule sofa::helper::system::Plugin::initExternalModule. ◆ moduleIsInitialized. ModuleIsInitialized sofa::helper::system::Plugin::moduleIsInitialized. Related details. ◆ PluginManager. friend class PluginManager. friend . sofahelpersystemPlugin; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html:1367,Modifiability,Plugin,Plugin,1367,﻿. SOFA API: sofa::helper::system::Plugin Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Friends |; List of all members . sofa::helper::system::Plugin Class Reference . #include <PluginManager.h>. Classes; struct  GetModuleComponentList;  ; struct  GetModuleDescription;  ; struct  GetModuleLicense;  ; struct  GetModuleName;  ; struct  GetModuleVersion;  ; struct  InitExternalModule;  ; struct  ModuleIsInitialized;  . Public Attributes; InitExternalModule initExternalModule;  ; GetModuleName getModuleName;  ; GetModuleDescription getModuleDescription;  ; GetModuleLicense getModuleLicense;  ; GetModuleComponentList getModuleComponentList;  ; GetModuleVersion getModuleVersion;  ; ModuleIsInitialized moduleIsInitialized;  . Friends; class PluginManager;  . Attribute details. ◆ getModuleComponentList. GetModuleComponentList sofa::helper::system::Plugin::getModuleComponentList. ◆ getModuleDescription. GetModuleDescription sofa::helper::system::Plugin::getModuleDescription. ◆ getModuleLicense. GetModuleLicense sofa::helper::system::Plugin::getModuleLicense. ◆ getModuleName. GetModuleName sofa::helper::system::Plugin::getModuleName. ◆ getModuleVersion. GetModuleVersion sofa::helper::system::Plugin::getModuleVersion. ◆ initExternalModule. InitExternalModule sofa::helper::system::Plugin::initExternalModule. ◆ moduleIsInitialized. ModuleIsInitialized sofa::helper::system::Plugin::moduleIsInitialized. Related details. ◆ PluginManager. friend class PluginManager. friend . sofahelpersystemPlugin; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html:1460,Modifiability,Plugin,Plugin,1460,﻿. SOFA API: sofa::helper::system::Plugin Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Friends |; List of all members . sofa::helper::system::Plugin Class Reference . #include <PluginManager.h>. Classes; struct  GetModuleComponentList;  ; struct  GetModuleDescription;  ; struct  GetModuleLicense;  ; struct  GetModuleName;  ; struct  GetModuleVersion;  ; struct  InitExternalModule;  ; struct  ModuleIsInitialized;  . Public Attributes; InitExternalModule initExternalModule;  ; GetModuleName getModuleName;  ; GetModuleDescription getModuleDescription;  ; GetModuleLicense getModuleLicense;  ; GetModuleComponentList getModuleComponentList;  ; GetModuleVersion getModuleVersion;  ; ModuleIsInitialized moduleIsInitialized;  . Friends; class PluginManager;  . Attribute details. ◆ getModuleComponentList. GetModuleComponentList sofa::helper::system::Plugin::getModuleComponentList. ◆ getModuleDescription. GetModuleDescription sofa::helper::system::Plugin::getModuleDescription. ◆ getModuleLicense. GetModuleLicense sofa::helper::system::Plugin::getModuleLicense. ◆ getModuleName. GetModuleName sofa::helper::system::Plugin::getModuleName. ◆ getModuleVersion. GetModuleVersion sofa::helper::system::Plugin::getModuleVersion. ◆ initExternalModule. InitExternalModule sofa::helper::system::Plugin::initExternalModule. ◆ moduleIsInitialized. ModuleIsInitialized sofa::helper::system::Plugin::moduleIsInitialized. Related details. ◆ PluginManager. friend class PluginManager. friend . sofahelpersystemPlugin; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html:1508,Modifiability,Plugin,PluginManager,1508,﻿. SOFA API: sofa::helper::system::Plugin Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Friends |; List of all members . sofa::helper::system::Plugin Class Reference . #include <PluginManager.h>. Classes; struct  GetModuleComponentList;  ; struct  GetModuleDescription;  ; struct  GetModuleLicense;  ; struct  GetModuleName;  ; struct  GetModuleVersion;  ; struct  InitExternalModule;  ; struct  ModuleIsInitialized;  . Public Attributes; InitExternalModule initExternalModule;  ; GetModuleName getModuleName;  ; GetModuleDescription getModuleDescription;  ; GetModuleLicense getModuleLicense;  ; GetModuleComponentList getModuleComponentList;  ; GetModuleVersion getModuleVersion;  ; ModuleIsInitialized moduleIsInitialized;  . Friends; class PluginManager;  . Attribute details. ◆ getModuleComponentList. GetModuleComponentList sofa::helper::system::Plugin::getModuleComponentList. ◆ getModuleDescription. GetModuleDescription sofa::helper::system::Plugin::getModuleDescription. ◆ getModuleLicense. GetModuleLicense sofa::helper::system::Plugin::getModuleLicense. ◆ getModuleName. GetModuleName sofa::helper::system::Plugin::getModuleName. ◆ getModuleVersion. GetModuleVersion sofa::helper::system::Plugin::getModuleVersion. ◆ initExternalModule. InitExternalModule sofa::helper::system::Plugin::initExternalModule. ◆ moduleIsInitialized. ModuleIsInitialized sofa::helper::system::Plugin::moduleIsInitialized. Related details. ◆ PluginManager. friend class PluginManager. friend . sofahelpersystemPlugin; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html:1536,Modifiability,Plugin,PluginManager,1536,﻿. SOFA API: sofa::helper::system::Plugin Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Friends |; List of all members . sofa::helper::system::Plugin Class Reference . #include <PluginManager.h>. Classes; struct  GetModuleComponentList;  ; struct  GetModuleDescription;  ; struct  GetModuleLicense;  ; struct  GetModuleName;  ; struct  GetModuleVersion;  ; struct  InitExternalModule;  ; struct  ModuleIsInitialized;  . Public Attributes; InitExternalModule initExternalModule;  ; GetModuleName getModuleName;  ; GetModuleDescription getModuleDescription;  ; GetModuleLicense getModuleLicense;  ; GetModuleComponentList getModuleComponentList;  ; GetModuleVersion getModuleVersion;  ; ModuleIsInitialized moduleIsInitialized;  . Friends; class PluginManager;  . Attribute details. ◆ getModuleComponentList. GetModuleComponentList sofa::helper::system::Plugin::getModuleComponentList. ◆ getModuleDescription. GetModuleDescription sofa::helper::system::Plugin::getModuleDescription. ◆ getModuleLicense. GetModuleLicense sofa::helper::system::Plugin::getModuleLicense. ◆ getModuleName. GetModuleName sofa::helper::system::Plugin::getModuleName. ◆ getModuleVersion. GetModuleVersion sofa::helper::system::Plugin::getModuleVersion. ◆ initExternalModule. InitExternalModule sofa::helper::system::Plugin::initExternalModule. ◆ moduleIsInitialized. ModuleIsInitialized sofa::helper::system::Plugin::moduleIsInitialized. Related details. ◆ PluginManager. friend class PluginManager. friend . sofahelpersystemPlugin; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:122,Modifiability,Plugin,PluginManager,122,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::system::PluginManager Member List . This is the complete list of members for sofa::helper::system::PluginManager, including all inherited members. addOnPluginCleanupCallbacks(const std::string &key, std::function< void()> callback)sofa::helper::system::PluginManager; addOnPluginLoadedCallback(const std::string &key, std::function< void(const std::string &, const Plugin &)> callback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:213,Modifiability,Plugin,PluginManager,213,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::system::PluginManager Member List . This is the complete list of members for sofa::helper::system::PluginManager, including all inherited members. addOnPluginCleanupCallbacks(const std::string &key, std::function< void()> callback)sofa::helper::system::PluginManager; addOnPluginLoadedCallback(const std::string &key, std::function< void(const std::string &, const Plugin &)> callback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:242,Modifiability,inherit,inherited,242,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::system::PluginManager Member List . This is the complete list of members for sofa::helper::system::PluginManager, including all inherited members. addOnPluginCleanupCallbacks(const std::string &key, std::function< void()> callback)sofa::helper::system::PluginManager; addOnPluginLoadedCallback(const std::string &key, std::function< void(const std::string &, const Plugin &)> callback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:367,Modifiability,Plugin,PluginManager,367," addOnPluginCleanupCallbacks(const std::string &key, std::function< void()> callback)sofa::helper::system::PluginManager; addOnPluginLoadedCallback(const std::string &key, std::function< void(const std::string &, const Plugin &)> callback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:479,Modifiability,Plugin,Plugin,479," addOnPluginCleanupCallbacks(const std::string &key, std::function< void()> callback)sofa::helper::system::PluginManager; addOnPluginLoadedCallback(const std::string &key, std::function< void(const std::string &, const Plugin &)> callback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:521,Modifiability,Plugin,PluginManager,521," addOnPluginCleanupCallbacks(const std::string &key, std::function< void()> callback)sofa::helper::system::PluginManager; addOnPluginLoadedCallback(const std::string &key, std::function< void(const std::string &, const Plugin &)> callback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:564,Modifiability,Plugin,Plugin,564," addOnPluginCleanupCallbacks(const std::string &key, std::function< void()> callback)sofa::helper::system::PluginManager; addOnPluginLoadedCallback(const std::string &key, std::function< void(const std::string &, const Plugin &)> callback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:572,Modifiability,plugin,plugin,572," addOnPluginCleanupCallbacks(const std::string &key, std::function< void()> callback)sofa::helper::system::PluginManager; addOnPluginLoadedCallback(const std::string &key, std::function< void(const std::string &, const Plugin &)> callback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:599,Modifiability,plugin,pluginPath,599," addOnPluginCleanupCallbacks(const std::string &key, std::function< void()> callback)sofa::helper::system::PluginManager; addOnPluginLoadedCallback(const std::string &key, std::function< void(const std::string &, const Plugin &)> callback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:632,Modifiability,Plugin,PluginManager,632," addOnPluginCleanupCallbacks(const std::string &key, std::function< void()> callback)sofa::helper::system::PluginManager; addOnPluginLoadedCallback(const std::string &key, std::function< void(const std::string &, const Plugin &)> callback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:678,Modifiability,Plugin,PluginManager,678," addOnPluginCleanupCallbacks(const std::string &key, std::function< void()> callback)sofa::helper::system::PluginManager; addOnPluginLoadedCallback(const std::string &key, std::function< void(const std::string &, const Plugin &)> callback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:723,Modifiability,plugin,pluginName,723," addOnPluginCleanupCallbacks(const std::string &key, std::function< void()> callback)sofa::helper::system::PluginManager; addOnPluginLoadedCallback(const std::string &key, std::function< void(const std::string &, const Plugin &)> callback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:870,Modifiability,Plugin,PluginManager,870," addOnPluginCleanupCallbacks(const std::string &key, std::function< void()> callback)sofa::helper::system::PluginManager; addOnPluginLoadedCallback(const std::string &key, std::function< void(const std::string &, const Plugin &)> callback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:925,Modifiability,Plugin,PluginManagerstatic,925," addOnPluginCleanupCallbacks(const std::string &key, std::function< void()> callback)sofa::helper::system::PluginManager; addOnPluginLoadedCallback(const std::string &key, std::function< void(const std::string &, const Plugin &)> callback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:971,Modifiability,Plugin,Plugin,971," addOnPluginCleanupCallbacks(const std::string &key, std::function< void()> callback)sofa::helper::system::PluginManager; addOnPluginLoadedCallback(const std::string &key, std::function< void(const std::string &, const Plugin &)> callback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:979,Modifiability,plugin,plugin,979," addOnPluginCleanupCallbacks(const std::string &key, std::function< void()> callback)sofa::helper::system::PluginManager; addOnPluginLoadedCallback(const std::string &key, std::function< void(const std::string &, const Plugin &)> callback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:1022,Modifiability,Plugin,PluginManagerinline,1022," addOnPluginCleanupCallbacks(const std::string &key, std::function< void()> callback)sofa::helper::system::PluginManager; addOnPluginLoadedCallback(const std::string &key, std::function< void(const std::string &, const Plugin &)> callback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:1078,Modifiability,Plugin,PluginManagerstatic,1078," addOnPluginCleanupCallbacks(const std::string &key, std::function< void()> callback)sofa::helper::system::PluginManager; addOnPluginLoadedCallback(const std::string &key, std::function< void(const std::string &, const Plugin &)> callback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:1128,Modifiability,plugin,plugin,1128," addOnPluginCleanupCallbacks(const std::string &key, std::function< void()> callback)sofa::helper::system::PluginManager; addOnPluginLoadedCallback(const std::string &key, std::function< void(const std::string &, const Plugin &)> callback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:1208,Modifiability,Plugin,PluginManager,1208," addOnPluginCleanupCallbacks(const std::string &key, std::function< void()> callback)sofa::helper::system::PluginManager; addOnPluginLoadedCallback(const std::string &key, std::function< void(const std::string &, const Plugin &)> callback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:1258,Modifiability,plugin,pluginName,1258,"dOnPluginCleanupCallbacks(const std::string &key, std::function< void()> callback)sofa::helper::system::PluginManager; addOnPluginLoadedCallback(const std::string &key, std::function< void(const std::string &, const Plugin &)> callback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ost",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:1291,Modifiability,Plugin,PluginManager,1291,"::string &key, std::function< void()> callback)sofa::helper::system::PluginManager; addOnPluginLoadedCallback(const std::string &key, std::function< void(const std::string &, const Plugin &)> callback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &plu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:1342,Modifiability,Plugin,PluginManagerinline,1342,"elper::system::PluginManager; addOnPluginLoadedCallback(const std::string &key, std::function< void(const std::string &, const Plugin &)> callback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:1404,Modifiability,plugin,pluginPath,1404,"onst std::string &key, std::function< void(const std::string &, const Plugin &)> callback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:1437,Modifiability,Plugin,PluginManagerstatic,1437,"void(const std::string &, const Plugin &)> callback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:1486,Modifiability,Plugin,PluginManager,1486,"lback)sofa::helper::system::PluginManager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:1525,Modifiability,plugin,pluginPath,1525,"ager; checkDuplicatedPlugin(const Plugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:1558,Modifiability,Plugin,PluginManager,1558,"lugin &plugin, const std::string &pluginPath)sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:1607,Modifiability,plugin,plugin,1607,"sofa::helper::system::PluginManager; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:1636,Modifiability,Plugin,PluginManager,1636,"er; cleanup()sofa::helper::system::PluginManager; findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::Plugi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:1687,Modifiability,plugin,pluginName,1687," findPlugin(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::P",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:1726,Modifiability,Plugin,PluginManager,1726,", const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:1771,Modifiability,plugin,plugin,1771,"fix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::Plugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:1919,Modifiability,Plugin,PluginManager,1919,"luginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:1970,Modifiability,plugin,pluginName,1970,"in *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:2122,Modifiability,Plugin,PluginManager,2122,"lugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:2230,Modifiability,Plugin,PluginManager,2230,"e(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:2280,Modifiability,Plugin,PluginManager,2280,"em::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::string &key)sofa::helper::system::PluginManager; s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:2295,Modifiability,plugin,pluginManager,2295,"er; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::string &key)sofa::helper::system::PluginManager; s_gui_postfixsof",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:2331,Modifiability,Plugin,PluginManagerfriend,2331,":PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::string &key)sofa::helper::system::PluginManager; s_gui_postfixsofa::helper::system::PluginManagerstatic;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:2381,Modifiability,Plugin,PluginManager,2381,"st std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::string &key)sofa::helper::system::PluginManager; s_gui_postfixsofa::helper::system::PluginManagerstatic; unloadedPlugins() constsofa::helper::system::P",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:2396,Modifiability,plugin,pluginManager,2396,"&pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::string &key)sofa::helper::system::PluginManager; s_gui_postfixsofa::helper::system::PluginManagerstatic; unloadedPlugins() constsofa::helper::system::PluginManager; u",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:2432,Modifiability,Plugin,PluginManagerfriend,2432,"nManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::string &key)sofa::helper::system::PluginManager; s_gui_postfixsofa::helper::system::PluginManagerstatic; unloadedPlugins() constsofa::helper::system::PluginManager; unloadPlugin(const std::string &path, st",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:2453,Modifiability,plugin,pluginIsLoaded,2453,"it()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::string &key)sofa::helper::system::PluginManager; s_gui_postfixsofa::helper::system::PluginManagerstatic; unloadedPlugins() constsofa::helper::system::PluginManager; unloadPlugin(const std::string &path, std::ostream *errlog=",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:2487,Modifiability,plugin,plugin,2487,"inManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::string &key)sofa::helper::system::PluginManager; s_gui_postfixsofa::helper::system::PluginManagerstatic; unloadedPlugins() constsofa::helper::system::PluginManager; unloadPlugin(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:2516,Modifiability,Plugin,PluginManager,2516," &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::string &key)sofa::helper::system::PluginManager; s_gui_postfixsofa::helper::system::PluginManagerstatic; unloadedPlugins() constsofa::helper::system::PluginManager; unloadPlugin(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; writeToIniFile(co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:2531,Modifiability,Plugin,PluginIterator,2531,"fa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::string &key)sofa::helper::system::PluginManager; s_gui_postfixsofa::helper::system::PluginManagerstatic; unloadedPlugins() constsofa::helper::system::PluginManager; unloadPlugin(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; writeToIniFile(const std::string ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:2575,Modifiability,Plugin,PluginManager,2575,"nLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::string &key)sofa::helper::system::PluginManager; s_gui_postfixsofa::helper::system::PluginManagerstatic; unloadedPlugins() constsofa::helper::system::PluginManager; unloadPlugin(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; writeToIniFile(const std::string &path)sofa::helper::system::PluginManager.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:2590,Modifiability,Plugin,PluginLoadStatus,2590,"nLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::string &key)sofa::helper::system::PluginManager; s_gui_postfixsofa::helper::system::PluginManagerstatic; unloadedPlugins() constsofa::helper::system::PluginManager; unloadPlugin(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; writeToIniFile(const std::string &path)sofa::helper::system::PluginManager.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:2638,Modifiability,Plugin,PluginManager,2638,"nLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::string &key)sofa::helper::system::PluginManager; s_gui_postfixsofa::helper::system::PluginManagerstatic; unloadedPlugins() constsofa::helper::system::PluginManager; unloadPlugin(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; writeToIniFile(const std::string &path)sofa::helper::system::PluginManager.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:2653,Modifiability,Plugin,PluginMap,2653,"nLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::string &key)sofa::helper::system::PluginManager; s_gui_postfixsofa::helper::system::PluginManagerstatic; unloadedPlugins() constsofa::helper::system::PluginManager; unloadPlugin(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; writeToIniFile(const std::string &path)sofa::helper::system::PluginManager.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:2692,Modifiability,Plugin,PluginManager,2692,"nLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::string &key)sofa::helper::system::PluginManager; s_gui_postfixsofa::helper::system::PluginManagerstatic; unloadedPlugins() constsofa::helper::system::PluginManager; unloadPlugin(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; writeToIniFile(const std::string &path)sofa::helper::system::PluginManager.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:2769,Modifiability,Plugin,PluginManager,2769,"nLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::string &key)sofa::helper::system::PluginManager; s_gui_postfixsofa::helper::system::PluginManagerstatic; unloadedPlugins() constsofa::helper::system::PluginManager; unloadPlugin(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; writeToIniFile(const std::string &path)sofa::helper::system::PluginManager.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:2894,Modifiability,Plugin,PluginManager,2894,"nLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::string &key)sofa::helper::system::PluginManager; s_gui_postfixsofa::helper::system::PluginManagerstatic; unloadedPlugins() constsofa::helper::system::PluginManager; unloadPlugin(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; writeToIniFile(const std::string &path)sofa::helper::system::PluginManager.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:2943,Modifiability,plugin,plugin,2943,"nLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::string &key)sofa::helper::system::PluginManager; s_gui_postfixsofa::helper::system::PluginManagerstatic; unloadedPlugins() constsofa::helper::system::PluginManager; unloadPlugin(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; writeToIniFile(const std::string &path)sofa::helper::system::PluginManager.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:3091,Modifiability,Plugin,PluginManager,3091,"nLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::string &key)sofa::helper::system::PluginManager; s_gui_postfixsofa::helper::system::PluginManagerstatic; unloadedPlugins() constsofa::helper::system::PluginManager; unloadPlugin(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; writeToIniFile(const std::string &path)sofa::helper::system::PluginManager.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:3182,Modifiability,Plugin,PluginManager,3182,"nLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::string &key)sofa::helper::system::PluginManager; s_gui_postfixsofa::helper::system::PluginManagerstatic; unloadedPlugins() constsofa::helper::system::PluginManager; unloadPlugin(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; writeToIniFile(const std::string &path)sofa::helper::system::PluginManager.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:3271,Modifiability,Plugin,PluginManager,3271,"nLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::string &key)sofa::helper::system::PluginManager; s_gui_postfixsofa::helper::system::PluginManagerstatic; unloadedPlugins() constsofa::helper::system::PluginManager; unloadPlugin(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; writeToIniFile(const std::string &path)sofa::helper::system::PluginManager.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:3321,Modifiability,Plugin,PluginManagerstatic,3321,"nLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::string &key)sofa::helper::system::PluginManager; s_gui_postfixsofa::helper::system::PluginManagerstatic; unloadedPlugins() constsofa::helper::system::PluginManager; unloadPlugin(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; writeToIniFile(const std::string &path)sofa::helper::system::PluginManager.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:3387,Modifiability,Plugin,PluginManager,3387,"nLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::string &key)sofa::helper::system::PluginManager; s_gui_postfixsofa::helper::system::PluginManagerstatic; unloadedPlugins() constsofa::helper::system::PluginManager; unloadPlugin(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; writeToIniFile(const std::string &path)sofa::helper::system::PluginManager.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:3491,Modifiability,Plugin,PluginManager,3491,"nLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::string &key)sofa::helper::system::PluginManager; s_gui_postfixsofa::helper::system::PluginManagerstatic; unloadedPlugins() constsofa::helper::system::PluginManager; unloadPlugin(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; writeToIniFile(const std::string &path)sofa::helper::system::PluginManager.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:3567,Modifiability,Plugin,PluginManager,3567,"nLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std::string &key)sofa::helper::system::PluginManager; removeOnPluginLoadedCallback(const std::string &key)sofa::helper::system::PluginManager; s_gui_postfixsofa::helper::system::PluginManagerstatic; unloadedPlugins() constsofa::helper::system::PluginManager; unloadPlugin(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; writeToIniFile(const std::string &path)sofa::helper::system::PluginManager.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:1741,Performance,load,loadPlugin,1741,"string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3)sofa::helper::system::PluginManager; getDefaultSuffix()sofa::helper::system::PluginManagerstatic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:1934,Performance,load,loadPluginByName,1934,"ic; getEntryFromPlugin(const Plugin *plugin, Entry &entry)sofa::helper::system::PluginManagerinline; getInstance()sofa::helper::system::PluginManagerstatic; getPlugin(const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html:2137,Performance,load,loadPluginByPath,2137,"::string &=getDefaultSuffix(), bool=true)sofa::helper::system::PluginManager; getPluginByName(const std::string &pluginName)sofa::helper::system::PluginManager; getPluginMap()sofa::helper::system::PluginManagerinline; GetPluginNameFromPath(const std::string &pluginPath)sofa::helper::system::PluginManagerstatic; init()sofa::helper::system::PluginManager; init(const std::string &pluginPath)sofa::helper::system::PluginManager; isPluginLoaded(const std::string &plugin)sofa::helper::system::PluginManager; isPluginUnloaded(const std::string &pluginName) constsofa::helper::system::PluginManager; loadPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByName(const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; loadPluginByPath(const std::string &path, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; operator<<(std::ostream &os, const PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; operator>>(std::istream &in, PluginManager &pluginManager)sofa::helper::system::PluginManagerfriend; pluginIsLoaded(const std::string &plugin)sofa::helper::system::PluginManager; PluginIterator typedefsofa::helper::system::PluginManager; PluginLoadStatus enum namesofa::helper::system::PluginManager; PluginMap typedefsofa::helper::system::PluginManager; readFromIniFile(const std::string &path)sofa::helper::system::PluginManager; readFromIniFile(const std::string &path, type::vector< std::string > &listLoadedPlugins)sofa::helper::system::PluginManager; registerPlugin(const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr)sofa::helper::system::PluginManager; removeOnPluginCleanupCallbacks(const std",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:7222,Availability,error,error,7222,"ring & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathTh",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:7921,Availability,error,error,7921,"load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursiv",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:8245,Availability,error,error,8245,"m for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPlugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:4390,Deployability,configurat,configuration,4390,"::system::PluginManager::addOnPluginCleanupCallbacks ; (; const std::string & ; key, . std::function< void()> ; callback . ). ◆ addOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; plu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:4551,Deployability,release,release,4551,"LoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:4515,Integrability,depend,depends,4515,"LoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:35,Modifiability,Plugin,PluginManager,35,"﻿. SOFA API: sofa::helper::system::PluginManager Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::helper::system::PluginManager Class Reference . #include <PluginManager.h>. Static Public Attributes; static std::string s_gui_postfix = ""gui"";  the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) More...;  . Public Member Functions; PluginLoadStatus loadPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByPath (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByName (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; bool unloadPlugin (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:284,Modifiability,Plugin,PluginManager,284,"﻿. SOFA API: sofa::helper::system::PluginManager Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::helper::system::PluginManager Class Reference . #include <PluginManager.h>. Static Public Attributes; static std::string s_gui_postfix = ""gui"";  the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) More...;  . Public Member Functions; PluginLoadStatus loadPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByPath (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByName (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; bool unloadPlugin (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:326,Modifiability,Plugin,PluginManager,326,"﻿. SOFA API: sofa::helper::system::PluginManager Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::helper::system::PluginManager Class Reference . #include <PluginManager.h>. Static Public Attributes; static std::string s_gui_postfix = ""gui"";  the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) More...;  . Public Member Functions; PluginLoadStatus loadPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByPath (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByName (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; bool unloadPlugin (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:432,Modifiability,plugin,plugin,432,"﻿. SOFA API: sofa::helper::system::PluginManager Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::helper::system::PluginManager Class Reference . #include <PluginManager.h>. Static Public Attributes; static std::string s_gui_postfix = ""gui"";  the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) More...;  . Public Member Functions; PluginLoadStatus loadPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByPath (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByName (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; bool unloadPlugin (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:514,Modifiability,Plugin,PluginLoadStatus,514,"﻿. SOFA API: sofa::helper::system::PluginManager Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::helper::system::PluginManager Class Reference . #include <PluginManager.h>. Static Public Attributes; static std::string s_gui_postfix = ""gui"";  the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) More...;  . Public Member Functions; PluginLoadStatus loadPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByPath (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByName (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; bool unloadPlugin (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:562,Modifiability,plugin,plugin,562,"﻿. SOFA API: sofa::helper::system::PluginManager Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::helper::system::PluginManager Class Reference . #include <PluginManager.h>. Static Public Attributes; static std::string s_gui_postfix = ""gui"";  the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) More...;  . Public Member Functions; PluginLoadStatus loadPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByPath (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByName (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; bool unloadPlugin (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:693,Modifiability,Plugin,PluginLoadStatus,693,"﻿. SOFA API: sofa::helper::system::PluginManager Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::helper::system::PluginManager Class Reference . #include <PluginManager.h>. Static Public Attributes; static std::string s_gui_postfix = ""gui"";  the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) More...;  . Public Member Functions; PluginLoadStatus loadPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByPath (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByName (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; bool unloadPlugin (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:787,Modifiability,Plugin,PluginLoadStatus,787,"﻿. SOFA API: sofa::helper::system::PluginManager Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::helper::system::PluginManager Class Reference . #include <PluginManager.h>. Static Public Attributes; static std::string s_gui_postfix = ""gui"";  the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) More...;  . Public Member Functions; PluginLoadStatus loadPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByPath (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByName (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; bool unloadPlugin (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:841,Modifiability,plugin,pluginName,841,"﻿. SOFA API: sofa::helper::system::PluginManager Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::helper::system::PluginManager Class Reference . #include <PluginManager.h>. Static Public Attributes; static std::string s_gui_postfix = ""gui"";  the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) More...;  . Public Member Functions; PluginLoadStatus loadPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByPath (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByName (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; bool unloadPlugin (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:1054,Modifiability,Plugin,PluginLoadStatus,1054,"﻿. SOFA API: sofa::helper::system::PluginManager Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::helper::system::PluginManager Class Reference . #include <PluginManager.h>. Static Public Attributes; static std::string s_gui_postfix = ""gui"";  the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) More...;  . Public Member Functions; PluginLoadStatus loadPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByPath (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByName (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; bool unloadPlugin (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:1106,Modifiability,plugin,plugin,1106,"﻿. SOFA API: sofa::helper::system::PluginManager Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::helper::system::PluginManager Class Reference . #include <PluginManager.h>. Static Public Attributes; static std::string s_gui_postfix = ""gui"";  the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) More...;  . Public Member Functions; PluginLoadStatus loadPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByPath (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByName (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; bool unloadPlugin (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:1246,Modifiability,plugin,plugin,1246,"﻿. SOFA API: sofa::helper::system::PluginManager Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::helper::system::PluginManager Class Reference . #include <PluginManager.h>. Static Public Attributes; static std::string s_gui_postfix = ""gui"";  the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) More...;  . Public Member Functions; PluginLoadStatus loadPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByPath (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByName (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; bool unloadPlugin (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:1412,Modifiability,plugin,pluginName,1412,", std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true);  ; Plugin * getPluginByName (const std::string &pluginName);  ; template<typename Entry > ; bool getEntryFromPlugin (const Plugin *plugin, Entry &entry);  ; void readFromIniFile (const std::string &path);  ; void readFromIniFile (const std::string &path, type::vector< std::string > &listLoadedPlugins);  ; void writeToIniFile (const std::string &path);  ; void addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &plugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:1481,Modifiability,plugin,pluginPath,1481,", std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true);  ; Plugin * getPluginByName (const std::string &pluginName);  ; template<typename Entry > ; bool getEntryFromPlugin (const Plugin *plugin, Entry &entry);  ; void readFromIniFile (const std::string &path);  ; void readFromIniFile (const std::string &path, type::vector< std::string > &listLoadedPlugins);  ; void writeToIniFile (const std::string &path);  ; void addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &plugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:1560,Modifiability,plugin,pluginName,1560,", std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true);  ; Plugin * getPluginByName (const std::string &pluginName);  ; template<typename Entry > ; bool getEntryFromPlugin (const Plugin *plugin, Entry &entry);  ; void readFromIniFile (const std::string &path);  ; void readFromIniFile (const std::string &path, type::vector< std::string > &listLoadedPlugins);  ; void writeToIniFile (const std::string &path);  ; void addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &plugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:1695,Modifiability,plugin,pluginIsLoaded,1695,", std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true);  ; Plugin * getPluginByName (const std::string &pluginName);  ; template<typename Entry > ; bool getEntryFromPlugin (const Plugin *plugin, Entry &entry);  ; void readFromIniFile (const std::string &path);  ; void readFromIniFile (const std::string &path, type::vector< std::string > &listLoadedPlugins);  ; void writeToIniFile (const std::string &path);  ; void addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &plugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:1730,Modifiability,plugin,plugin,1730,", std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true);  ; Plugin * getPluginByName (const std::string &pluginName);  ; template<typename Entry > ; bool getEntryFromPlugin (const Plugin *plugin, Entry &entry);  ; void readFromIniFile (const std::string &path);  ; void readFromIniFile (const std::string &path, type::vector< std::string > &listLoadedPlugins);  ; void writeToIniFile (const std::string &path);  ; void addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &plugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:1808,Modifiability,plugin,plugin,1808,", std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true);  ; Plugin * getPluginByName (const std::string &pluginName);  ; template<typename Entry > ; bool getEntryFromPlugin (const Plugin *plugin, Entry &entry);  ; void readFromIniFile (const std::string &path);  ; void readFromIniFile (const std::string &path, type::vector< std::string > &listLoadedPlugins);  ; void writeToIniFile (const std::string &path);  ; void addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &plugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:1854,Modifiability,Plugin,Plugin,1854,", std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true);  ; Plugin * getPluginByName (const std::string &pluginName);  ; template<typename Entry > ; bool getEntryFromPlugin (const Plugin *plugin, Entry &entry);  ; void readFromIniFile (const std::string &path);  ; void readFromIniFile (const std::string &path, type::vector< std::string > &listLoadedPlugins);  ; void writeToIniFile (const std::string &path);  ; void addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &plugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:1862,Modifiability,plugin,plugin,1862,", std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true);  ; Plugin * getPluginByName (const std::string &pluginName);  ; template<typename Entry > ; bool getEntryFromPlugin (const Plugin *plugin, Entry &entry);  ; void readFromIniFile (const std::string &path);  ; void readFromIniFile (const std::string &path, type::vector< std::string > &listLoadedPlugins);  ; void writeToIniFile (const std::string &path);  ; void addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &plugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:1889,Modifiability,plugin,pluginPath,1889,", std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true);  ; Plugin * getPluginByName (const std::string &pluginName);  ; template<typename Entry > ; bool getEntryFromPlugin (const Plugin *plugin, Entry &entry);  ; void readFromIniFile (const std::string &path);  ; void readFromIniFile (const std::string &path, type::vector< std::string > &listLoadedPlugins);  ; void writeToIniFile (const std::string &path);  ; void addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &plugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:1905,Modifiability,Plugin,PluginMap,1905,", std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true);  ; Plugin * getPluginByName (const std::string &pluginName);  ; template<typename Entry > ; bool getEntryFromPlugin (const Plugin *plugin, Entry &entry);  ; void readFromIniFile (const std::string &path);  ; void readFromIniFile (const std::string &path, type::vector< std::string > &listLoadedPlugins);  ; void writeToIniFile (const std::string &path);  ; void addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &plugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:1937,Modifiability,Plugin,Plugin,1937,", std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true);  ; Plugin * getPluginByName (const std::string &pluginName);  ; template<typename Entry > ; bool getEntryFromPlugin (const Plugin *plugin, Entry &entry);  ; void readFromIniFile (const std::string &path);  ; void readFromIniFile (const std::string &path, type::vector< std::string > &listLoadedPlugins);  ; void writeToIniFile (const std::string &path);  ; void addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &plugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:1976,Modifiability,plugin,plugin,1976,", std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true);  ; Plugin * getPluginByName (const std::string &pluginName);  ; template<typename Entry > ; bool getEntryFromPlugin (const Plugin *plugin, Entry &entry);  ; void readFromIniFile (const std::string &path);  ; void readFromIniFile (const std::string &path, type::vector< std::string > &listLoadedPlugins);  ; void writeToIniFile (const std::string &path);  ; void addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &plugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:2039,Modifiability,Plugin,Plugin,2039,", std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true);  ; Plugin * getPluginByName (const std::string &pluginName);  ; template<typename Entry > ; bool getEntryFromPlugin (const Plugin *plugin, Entry &entry);  ; void readFromIniFile (const std::string &path);  ; void readFromIniFile (const std::string &path, type::vector< std::string > &listLoadedPlugins);  ; void writeToIniFile (const std::string &path);  ; void addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &plugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:2084,Modifiability,plugin,pluginName,2084,", std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true);  ; Plugin * getPluginByName (const std::string &pluginName);  ; template<typename Entry > ; bool getEntryFromPlugin (const Plugin *plugin, Entry &entry);  ; void readFromIniFile (const std::string &path);  ; void readFromIniFile (const std::string &path, type::vector< std::string > &listLoadedPlugins);  ; void writeToIniFile (const std::string &path);  ; void addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &plugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:2159,Modifiability,Plugin,Plugin,2159,", std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true);  ; Plugin * getPluginByName (const std::string &pluginName);  ; template<typename Entry > ; bool getEntryFromPlugin (const Plugin *plugin, Entry &entry);  ; void readFromIniFile (const std::string &path);  ; void readFromIniFile (const std::string &path, type::vector< std::string > &listLoadedPlugins);  ; void writeToIniFile (const std::string &path);  ; void addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &plugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:2167,Modifiability,plugin,plugin,2167,", std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true);  ; Plugin * getPluginByName (const std::string &pluginName);  ; template<typename Entry > ; bool getEntryFromPlugin (const Plugin *plugin, Entry &entry);  ; void readFromIniFile (const std::string &path);  ; void readFromIniFile (const std::string &path, type::vector< std::string > &listLoadedPlugins);  ; void writeToIniFile (const std::string &path);  ; void addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &plugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:2496,Modifiability,Plugin,Plugin,2496,", std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true);  ; Plugin * getPluginByName (const std::string &pluginName);  ; template<typename Entry > ; bool getEntryFromPlugin (const Plugin *plugin, Entry &entry);  ; void readFromIniFile (const std::string &path);  ; void readFromIniFile (const std::string &path, type::vector< std::string > &listLoadedPlugins);  ; void writeToIniFile (const std::string &path);  ; void addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &plugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:2783,Modifiability,Plugin,PluginManager,2783,"Plugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true);  ; Plugin * getPluginByName (const std::string &pluginName);  ; template<typename Entry > ; bool getEntryFromPlugin (const Plugin *plugin, Entry &entry);  ; void readFromIniFile (const std::string &path);  ; void readFromIniFile (const std::string &path, type::vector< std::string > &listLoadedPlugins);  ; void writeToIniFile (const std::string &path);  ; void addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &pluginManager);  ; std::istream & operator>> (std::istream &in, PluginManager &pluginManager);  . Attribute details. ◆ s_gui_postfix. std::string sofa::helper::system::PluginManager::s_gui_postfix = ""gui"". static . the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) . Function details. ◆ addOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::addOnPluginCleanupCallbacks ; (; const std::string & ; key, . std::function< void()> ; callback . ). ◆ addOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:2922,Modifiability,plugin,pluginPath,2922,"Plugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true);  ; Plugin * getPluginByName (const std::string &pluginName);  ; template<typename Entry > ; bool getEntryFromPlugin (const Plugin *plugin, Entry &entry);  ; void readFromIniFile (const std::string &path);  ; void readFromIniFile (const std::string &path, type::vector< std::string > &listLoadedPlugins);  ; void writeToIniFile (const std::string &path);  ; void addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &pluginManager);  ; std::istream & operator>> (std::istream &in, PluginManager &pluginManager);  . Attribute details. ◆ s_gui_postfix. std::string sofa::helper::system::PluginManager::s_gui_postfix = ""gui"". static . the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) . Function details. ◆ addOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::addOnPluginCleanupCallbacks ; (; const std::string & ; key, . std::function< void()> ; callback . ). ◆ addOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:2998,Modifiability,Plugin,PluginManager,2998," bool=true);  ; Plugin * getPluginByName (const std::string &pluginName);  ; template<typename Entry > ; bool getEntryFromPlugin (const Plugin *plugin, Entry &entry);  ; void readFromIniFile (const std::string &path);  ; void readFromIniFile (const std::string &path, type::vector< std::string > &listLoadedPlugins);  ; void writeToIniFile (const std::string &path);  ; void addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &pluginManager);  ; std::istream & operator>> (std::istream &in, PluginManager &pluginManager);  . Attribute details. ◆ s_gui_postfix. std::string sofa::helper::system::PluginManager::s_gui_postfix = ""gui"". static . the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) . Function details. ◆ addOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::addOnPluginCleanupCallbacks ; (; const std::string & ; key, . std::function< void()> ; callback . ). ◆ addOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::strin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:3013,Modifiability,plugin,pluginManager,3013," bool=true);  ; Plugin * getPluginByName (const std::string &pluginName);  ; template<typename Entry > ; bool getEntryFromPlugin (const Plugin *plugin, Entry &entry);  ; void readFromIniFile (const std::string &path);  ; void readFromIniFile (const std::string &path, type::vector< std::string > &listLoadedPlugins);  ; void writeToIniFile (const std::string &path);  ; void addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &pluginManager);  ; std::istream & operator>> (std::istream &in, PluginManager &pluginManager);  . Attribute details. ◆ s_gui_postfix. std::string sofa::helper::system::PluginManager::s_gui_postfix = ""gui"". static . the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) . Function details. ◆ addOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::addOnPluginCleanupCallbacks ; (; const std::string & ; key, . std::function< void()> ; callback . ). ◆ addOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::strin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:3077,Modifiability,Plugin,PluginManager,3077," bool=true);  ; Plugin * getPluginByName (const std::string &pluginName);  ; template<typename Entry > ; bool getEntryFromPlugin (const Plugin *plugin, Entry &entry);  ; void readFromIniFile (const std::string &path);  ; void readFromIniFile (const std::string &path, type::vector< std::string > &listLoadedPlugins);  ; void writeToIniFile (const std::string &path);  ; void addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &pluginManager);  ; std::istream & operator>> (std::istream &in, PluginManager &pluginManager);  . Attribute details. ◆ s_gui_postfix. std::string sofa::helper::system::PluginManager::s_gui_postfix = ""gui"". static . the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) . Function details. ◆ addOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::addOnPluginCleanupCallbacks ; (; const std::string & ; key, . std::function< void()> ; callback . ). ◆ addOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::strin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:3092,Modifiability,plugin,pluginManager,3092," bool=true);  ; Plugin * getPluginByName (const std::string &pluginName);  ; template<typename Entry > ; bool getEntryFromPlugin (const Plugin *plugin, Entry &entry);  ; void readFromIniFile (const std::string &path);  ; void readFromIniFile (const std::string &path, type::vector< std::string > &listLoadedPlugins);  ; void writeToIniFile (const std::string &path);  ; void addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &pluginManager);  ; std::istream & operator>> (std::istream &in, PluginManager &pluginManager);  . Attribute details. ◆ s_gui_postfix. std::string sofa::helper::system::PluginManager::s_gui_postfix = ""gui"". static . the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) . Function details. ◆ addOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::addOnPluginCleanupCallbacks ; (; const std::string & ; key, . std::function< void()> ; callback . ). ◆ addOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::strin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:3181,Modifiability,Plugin,PluginManager,3181,"entry);  ; void readFromIniFile (const std::string &path);  ; void readFromIniFile (const std::string &path, type::vector< std::string > &listLoadedPlugins);  ; void writeToIniFile (const std::string &path);  ; void addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &pluginManager);  ; std::istream & operator>> (std::istream &in, PluginManager &pluginManager);  . Attribute details. ◆ s_gui_postfix. std::string sofa::helper::system::PluginManager::s_gui_postfix = ""gui"". static . the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) . Function details. ◆ addOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::addOnPluginCleanupCallbacks ; (; const std::string & ; key, . std::function< void()> ; callback . ). ◆ addOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:3247,Modifiability,plugin,plugin,3247,"readFromIniFile (const std::string &path, type::vector< std::string > &listLoadedPlugins);  ; void writeToIniFile (const std::string &path);  ; void addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &pluginManager);  ; std::istream & operator>> (std::istream &in, PluginManager &pluginManager);  . Attribute details. ◆ s_gui_postfix. std::string sofa::helper::system::PluginManager::s_gui_postfix = ""gui"". static . the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) . Function details. ◆ addOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::addOnPluginCleanupCallbacks ; (; const std::string & ; key, . std::function< void()> ; callback . ). ◆ addOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginMan",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:3372,Modifiability,Plugin,PluginManager,3372,"d addOnPluginLoadedCallback (const std::string &key, std::function< void(const std::string &, const Plugin &)> callback);  ; void addOnPluginCleanupCallbacks (const std::string &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &pluginManager);  ; std::istream & operator>> (std::istream &in, PluginManager &pluginManager);  . Attribute details. ◆ s_gui_postfix. std::string sofa::helper::system::PluginManager::s_gui_postfix = ""gui"". static . the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) . Function details. ◆ addOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::addOnPluginCleanupCallbacks ; (; const std::string & ; key, . std::function< void()> ; callback . ). ◆ addOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug config",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:3546,Modifiability,Plugin,PluginManager,3546,"ing &key, std::function< void()> callback);  ; void removeOnPluginLoadedCallback (const std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &pluginManager);  ; std::istream & operator>> (std::istream &in, PluginManager &pluginManager);  . Attribute details. ◆ s_gui_postfix. std::string sofa::helper::system::PluginManager::s_gui_postfix = ""gui"". static . the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) . Function details. ◆ addOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::addOnPluginCleanupCallbacks ; (; const std::string & ; key, . std::function< void()> ; callback . ). ◆ addOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:3668,Modifiability,Plugin,Plugin,3668,"t std::string &key);  ; void removeOnPluginCleanupCallbacks (const std::string &key);  . Static Public Member Functions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &pluginManager);  ; std::istream & operator>> (std::istream &in, PluginManager &pluginManager);  . Attribute details. ◆ s_gui_postfix. std::string sofa::helper::system::PluginManager::s_gui_postfix = ""gui"". static . the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) . Function details. ◆ addOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::addOnPluginCleanupCallbacks ; (; const std::string & ; key, . std::function< void()> ; callback . ). ◆ addOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginMan",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:3749,Modifiability,Plugin,PluginManager,3749,"tions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &pluginManager);  ; std::istream & operator>> (std::istream &in, PluginManager &pluginManager);  . Attribute details. ◆ s_gui_postfix. std::string sofa::helper::system::PluginManager::s_gui_postfix = ""gui"". static . the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) . Function details. ◆ addOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::addOnPluginCleanupCallbacks ; (; const std::string & ; key, . std::function< void()> ; callback . ). ◆ addOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginMan",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:3797,Modifiability,Plugin,Plugin,3797,"tions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &pluginManager);  ; std::istream & operator>> (std::istream &in, PluginManager &pluginManager);  . Attribute details. ◆ s_gui_postfix. std::string sofa::helper::system::PluginManager::s_gui_postfix = ""gui"". static . the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) . Function details. ◆ addOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::addOnPluginCleanupCallbacks ; (; const std::string & ; key, . std::function< void()> ; callback . ). ◆ addOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginMan",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:3808,Modifiability,plugin,plugin,3808,"tions; static PluginManager & getInstance ();  ; static std::string getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &pluginManager);  ; std::istream & operator>> (std::istream &in, PluginManager &pluginManager);  . Attribute details. ◆ s_gui_postfix. std::string sofa::helper::system::PluginManager::s_gui_postfix = ""gui"". static . the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) . Function details. ◆ addOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::addOnPluginCleanupCallbacks ; (; const std::string & ; key, . std::function< void()> ; callback . ). ◆ addOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginMan",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:3840,Modifiability,plugin,pluginPath,3840,"ng getDefaultSuffix ();  ; static std::string GetPluginNameFromPath (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &pluginManager);  ; std::istream & operator>> (std::istream &in, PluginManager &pluginManager);  . Attribute details. ◆ s_gui_postfix. std::string sofa::helper::system::PluginManager::s_gui_postfix = ""gui"". static . the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) . Function details. ◆ addOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::addOnPluginCleanupCallbacks ; (; const std::string & ; key, . std::function< void()> ; callback . ). ◆ addOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). st",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:3896,Modifiability,Plugin,PluginManager,3896,"Path (const std::string &pluginPath);  . Friends; std::ostream & operator<< (std::ostream &os, const PluginManager &pluginManager);  ; std::istream & operator>> (std::istream &in, PluginManager &pluginManager);  . Attribute details. ◆ s_gui_postfix. std::string sofa::helper::system::PluginManager::s_gui_postfix = ""gui"". static . the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) . Function details. ◆ addOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::addOnPluginCleanupCallbacks ; (; const std::string & ; key, . std::function< void()> ; callback . ). ◆ addOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginMan",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:3977,Modifiability,Plugin,PluginManager,3977,"const PluginManager &pluginManager);  ; std::istream & operator>> (std::istream &in, PluginManager &pluginManager);  . Attribute details. ◆ s_gui_postfix. std::string sofa::helper::system::PluginManager::s_gui_postfix = ""gui"". static . the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) . Function details. ◆ addOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::addOnPluginCleanupCallbacks ; (; const std::string & ; key, . std::function< void()> ; callback . ). ◆ addOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(),",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:4030,Modifiability,plugin,pluginName,4030,"const PluginManager &pluginManager);  ; std::istream & operator>> (std::istream &in, PluginManager &pluginManager);  . Attribute details. ◆ s_gui_postfix. std::string sofa::helper::system::PluginManager::s_gui_postfix = ""gui"". static . the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) . Function details. ◆ addOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::addOnPluginCleanupCallbacks ; (; const std::string & ; key, . std::function< void()> ; callback . ). ◆ addOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(),",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:4241,Modifiability,Plugin,PluginManager,4241,"gui plugin, default=""gui"" (e.g. myplugin_gui.so) . Function details. ◆ addOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::addOnPluginCleanupCallbacks ; (; const std::string & ; key, . std::function< void()> ; callback . ). ◆ addOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPlug",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:4324,Modifiability,plugin,plugin,4324,"::system::PluginManager::addOnPluginCleanupCallbacks ; (; const std::string & ; key, . std::function< void()> ; callback . ). ◆ addOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; plu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:4390,Modifiability,config,configuration,4390,"::system::PluginManager::addOnPluginCleanupCallbacks ; (; const std::string & ; key, . std::function< void()> ; callback . ). ◆ addOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; plu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:4470,Modifiability,plugin,plugin,4470,"LoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:4647,Modifiability,Plugin,PluginManager,4647,"st Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:4692,Modifiability,Plugin,Plugin,4692,"st Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:4703,Modifiability,plugin,plugin,4703,"st Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:4760,Modifiability,Plugin,PluginManager,4760,"t Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loade",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:4798,Modifiability,Plugin,PluginManager,4798,"t Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loade",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:4857,Modifiability,Plugin,Plugin,4857,"Manager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . Retur",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:4888,Modifiability,Plugin,PluginManager,4888,"Manager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . Retur",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:4940,Modifiability,plugin,plugin,4940,"Manager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . Retur",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:5036,Modifiability,Plugin,Plugin,5036,"uffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:5067,Modifiability,Plugin,PluginManager,5067,"uffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:5125,Modifiability,plugin,pluginName,5125,"uffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:5156,Modifiability,Plugin,PluginMap,5156,"tDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:5189,Modifiability,Plugin,PluginManager,5189,"tDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:5295,Modifiability,Plugin,PluginManager,5295,"plied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:5359,Modifiability,plugin,pluginPath,5359,"plied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:5424,Modifiability,Plugin,PluginManager,5424,"erwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:5502,Modifiability,Plugin,PluginManager,5502,"pends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register int",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:5549,Modifiability,plugin,pluginPath,5549,"pends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register int",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:5635,Modifiability,Plugin,PluginManager,5635,"ystem::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:5692,Modifiability,plugin,plugin,5692,"ystem::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:5716,Modifiability,plugin,plugin,5716,"e . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:5731,Modifiability,plugin,plugin,5731,"e . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:5761,Modifiability,plugin,plugin,5761,"e . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:5805,Modifiability,plugin,plugin,5805,"::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into th",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:5854,Modifiability,plugin,pluginA,5854,"per::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:5872,Modifiability,plugin,plugin,5872,"per::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:5884,Modifiability,plugin,plugin,5884,"per::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:5936,Modifiability,plugin,plugin,5936,"ix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:5956,Modifiability,plugin,plugin,5956,"ix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:6025,Modifiability,plugin,plugin,6025,"ix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:6054,Modifiability,plugin,plugin,6054,"ix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:6129,Modifiability,Plugin,PluginManager,6129,". PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:6188,Modifiability,plugin,pluginName,6188,". PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:6251,Modifiability,Plugin,PluginManager,6251,"ring sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:6304,Modifiability,plugin,plugin,6304,"ring sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:6469,Modifiability,plugin,plugin,6469,"td::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in p",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:6756,Modifiability,plugin,plugin,6756,"ugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:6829,Modifiability,plugin,pluginCan,6829,"turnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:7059,Modifiability,plugin,plugin,7059," . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:7140,Modifiability,plugin,plugin,7140,"ring & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathTh",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:7288,Modifiability,Plugin,PluginManager,7288,", . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::P",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:7347,Modifiability,plugin,pluginName,7347,", . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::P",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:7516,Modifiability,plugin,plugin,7516," if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:7562,Modifiability,plugin,pluginNameThe,7562,"egistered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:7610,Modifiability,plugin,plugin,7610,"egistered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:7758,Modifiability,plugin,plugin,7758,"ll entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:7839,Modifiability,plugin,plugin,7839,"load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursiv",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:7960,Modifiability,Plugin,PluginManager,7960,"y otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:7975,Modifiability,Plugin,PluginLoadStatus,7975,"y otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:8014,Modifiability,Plugin,PluginManager,8014,"y otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:8128,Modifiability,plugin,plugin,8128,"plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPlug",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:8199,Modifiability,plugin,plugin,8199,"m for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPlugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:8264,Modifiability,plugin,pluginIsLoaded,8264,":helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPluginLoadedCallback ; (; const std::string & ; key). ◆ unloa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:8309,Modifiability,Plugin,PluginManager,8309,"nst std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPluginLoadedCallback ; (; const std::string & ; key). ◆ unloadedPlugins(). const std::unordered_set< std::string > & s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:8324,Modifiability,plugin,pluginIsLoaded,8324,"nst std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPluginLoadedCallback ; (; const std::string & ; key). ◆ unloadedPlugins(). const std::unordered_set< std::string > & s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:8366,Modifiability,plugin,plugin,8366,"nst std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPluginLoadedCallback ; (; const std::string & ; key). ◆ unloadedPlugins(). const std::unordered_set< std::string > & s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:8429,Modifiability,Plugin,PluginManager,8429,"; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPluginLoadedCallback ; (; const std::string & ; key). ◆ unloadedPlugins(). const std::unordered_set< std::string > & sofa::helper::system::PluginManager::unloadedPlugins ; (; ); const. ◆ unloadPlugin(). bool sofa::helper::system::PluginM",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:8548,Modifiability,Plugin,PluginManager,8548,"inNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPluginLoadedCallback ; (; const std::string & ; key). ◆ unloadedPlugins(). const std::unordered_set< std::string > & sofa::helper::system::PluginManager::unloadedPlugins ; (; ); const. ◆ unloadPlugin(). bool sofa::helper::system::PluginManager::unloadPlugin ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Unloads a plugin from the",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:8716,Modifiability,Plugin,PluginManager,8716,"noreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPluginLoadedCallback ; (; const std::string & ; key). ◆ unloadedPlugins(). const std::unordered_set< std::string > & sofa::helper::system::PluginManager::unloadedPlugins ; (; ); const. ◆ unloadPlugin(). bool sofa::helper::system::PluginManager::unloadPlugin ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Unloads a plugin from the map Warning: a previously loaded plugin will always be in process memory. . ◆ writeToIniFile(). void sofa::helper::system::PluginManager::writeToIniFile ; (; const std",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:8773,Modifiability,plugin,plugin,8773,"noreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPluginLoadedCallback ; (; const std::string & ; key). ◆ unloadedPlugins(). const std::unordered_set< std::string > & sofa::helper::system::PluginManager::unloadedPlugins ; (; ); const. ◆ unloadPlugin(). bool sofa::helper::system::PluginManager::unloadPlugin ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Unloads a plugin from the map Warning: a previously loaded plugin will always be in process memory. . ◆ writeToIniFile(). void sofa::helper::system::PluginManager::writeToIniFile ; (; const std",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:8941,Modifiability,plugin,plugin,8941,"◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPluginLoadedCallback ; (; const std::string & ; key). ◆ unloadedPlugins(). const std::unordered_set< std::string > & sofa::helper::system::PluginManager::unloadedPlugins ; (; ); const. ◆ unloadPlugin(). bool sofa::helper::system::PluginManager::unloadPlugin ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Unloads a plugin from the map Warning: a previously loaded plugin will always be in process memory. . ◆ writeToIniFile(). void sofa::helper::system::PluginManager::writeToIniFile ; (; const std::string & ; path). Enum details. ◆ PluginLoadStatus. enum sofa::helper::system::PluginManager::PluginLoadStatus : unsigned char. strong . EnumeratorSUCCESS ; ALREADY_LOADED ; PLUGIN_FILE_NOT_FOUND ; INVA",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:9047,Modifiability,Plugin,PluginManager,9047," path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPluginLoadedCallback ; (; const std::string & ; key). ◆ unloadedPlugins(). const std::unordered_set< std::string > & sofa::helper::system::PluginManager::unloadedPlugins ; (; ); const. ◆ unloadPlugin(). bool sofa::helper::system::PluginManager::unloadPlugin ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Unloads a plugin from the map Warning: a previously loaded plugin will always be in process memory. . ◆ writeToIniFile(). void sofa::helper::system::PluginManager::writeToIniFile ; (; const std::string & ; path). Enum details. ◆ PluginLoadStatus. enum sofa::helper::system::PluginManager::PluginLoadStatus : unsigned char. strong . EnumeratorSUCCESS ; ALREADY_LOADED ; PLUGIN_FILE_NOT_FOUND ; INVALID_LOADING ; MISSING_SYMBOL ; INIT_ERROR . Related details. ◆ operator<<. std::ostream& operator<< ; (; std::ostream & ; os, . const",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:9187,Modifiability,Plugin,PluginManager,9187,"ad ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPluginLoadedCallback ; (; const std::string & ; key). ◆ unloadedPlugins(). const std::unordered_set< std::string > & sofa::helper::system::PluginManager::unloadedPlugins ; (; ); const. ◆ unloadPlugin(). bool sofa::helper::system::PluginManager::unloadPlugin ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Unloads a plugin from the map Warning: a previously loaded plugin will always be in process memory. . ◆ writeToIniFile(). void sofa::helper::system::PluginManager::writeToIniFile ; (; const std::string & ; path). Enum details. ◆ PluginLoadStatus. enum sofa::helper::system::PluginManager::PluginLoadStatus : unsigned char. strong . EnumeratorSUCCESS ; ALREADY_LOADED ; PLUGIN_FILE_NOT_FOUND ; INVALID_LOADING ; MISSING_SYMBOL ; INIT_ERROR . Related details. ◆ operator<<. std::ostream& operator<< ; (; std::ostream & ; os, . const PluginManager & ; pluginManager . ). friend . ◆ operator>>. std::istream& operator>> ; (; std::istream & ; in, . PluginManager & ; pluginM",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:9349,Modifiability,Plugin,PluginManager,9349,"luginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPluginLoadedCallback ; (; const std::string & ; key). ◆ unloadedPlugins(). const std::unordered_set< std::string > & sofa::helper::system::PluginManager::unloadedPlugins ; (; ); const. ◆ unloadPlugin(). bool sofa::helper::system::PluginManager::unloadPlugin ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Unloads a plugin from the map Warning: a previously loaded plugin will always be in process memory. . ◆ writeToIniFile(). void sofa::helper::system::PluginManager::writeToIniFile ; (; const std::string & ; path). Enum details. ◆ PluginLoadStatus. enum sofa::helper::system::PluginManager::PluginLoadStatus : unsigned char. strong . EnumeratorSUCCESS ; ALREADY_LOADED ; PLUGIN_FILE_NOT_FOUND ; INVALID_LOADING ; MISSING_SYMBOL ; INIT_ERROR . Related details. ◆ operator<<. std::ostream& operator<< ; (; std::ostream & ; os, . const PluginManager & ; pluginManager . ). friend . ◆ operator>>. std::istream& operator>> ; (; std::istream & ; in, . PluginManager & ; pluginManager . ). friend . sofahelpersystemPluginManager; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:9440,Modifiability,Plugin,PluginManager,9440,"luginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPluginLoadedCallback ; (; const std::string & ; key). ◆ unloadedPlugins(). const std::unordered_set< std::string > & sofa::helper::system::PluginManager::unloadedPlugins ; (; ); const. ◆ unloadPlugin(). bool sofa::helper::system::PluginManager::unloadPlugin ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Unloads a plugin from the map Warning: a previously loaded plugin will always be in process memory. . ◆ writeToIniFile(). void sofa::helper::system::PluginManager::writeToIniFile ; (; const std::string & ; path). Enum details. ◆ PluginLoadStatus. enum sofa::helper::system::PluginManager::PluginLoadStatus : unsigned char. strong . EnumeratorSUCCESS ; ALREADY_LOADED ; PLUGIN_FILE_NOT_FOUND ; INVALID_LOADING ; MISSING_SYMBOL ; INIT_ERROR . Related details. ◆ operator<<. std::ostream& operator<< ; (; std::ostream & ; os, . const PluginManager & ; pluginManager . ). friend . ◆ operator>>. std::istream& operator>> ; (; std::istream & ; in, . PluginManager & ; pluginManager . ). friend . sofahelpersystemPluginManager; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:9552,Modifiability,plugin,plugin,9552,"luginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPluginLoadedCallback ; (; const std::string & ; key). ◆ unloadedPlugins(). const std::unordered_set< std::string > & sofa::helper::system::PluginManager::unloadedPlugins ; (; ); const. ◆ unloadPlugin(). bool sofa::helper::system::PluginManager::unloadPlugin ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Unloads a plugin from the map Warning: a previously loaded plugin will always be in process memory. . ◆ writeToIniFile(). void sofa::helper::system::PluginManager::writeToIniFile ; (; const std::string & ; path). Enum details. ◆ PluginLoadStatus. enum sofa::helper::system::PluginManager::PluginLoadStatus : unsigned char. strong . EnumeratorSUCCESS ; ALREADY_LOADED ; PLUGIN_FILE_NOT_FOUND ; INVALID_LOADING ; MISSING_SYMBOL ; INIT_ERROR . Related details. ◆ operator<<. std::ostream& operator<< ; (; std::ostream & ; os, . const PluginManager & ; pluginManager . ). friend . ◆ operator>>. std::istream& operator>> ; (; std::istream & ; in, . PluginManager & ; pluginManager . ). friend . sofahelpersystemPluginManager; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:9601,Modifiability,plugin,plugin,9601,"luginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPluginLoadedCallback ; (; const std::string & ; key). ◆ unloadedPlugins(). const std::unordered_set< std::string > & sofa::helper::system::PluginManager::unloadedPlugins ; (; ); const. ◆ unloadPlugin(). bool sofa::helper::system::PluginManager::unloadPlugin ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Unloads a plugin from the map Warning: a previously loaded plugin will always be in process memory. . ◆ writeToIniFile(). void sofa::helper::system::PluginManager::writeToIniFile ; (; const std::string & ; path). Enum details. ◆ PluginLoadStatus. enum sofa::helper::system::PluginManager::PluginLoadStatus : unsigned char. strong . EnumeratorSUCCESS ; ALREADY_LOADED ; PLUGIN_FILE_NOT_FOUND ; INVALID_LOADING ; MISSING_SYMBOL ; INIT_ERROR . Related details. ◆ operator<<. std::ostream& operator<< ; (; std::ostream & ; os, . const PluginManager & ; pluginManager . ). friend . ◆ operator>>. std::istream& operator>> ; (; std::istream & ; in, . PluginManager & ; pluginManager . ). friend . sofahelpersystemPluginManager; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:9691,Modifiability,Plugin,PluginManager,9691,"luginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPluginLoadedCallback ; (; const std::string & ; key). ◆ unloadedPlugins(). const std::unordered_set< std::string > & sofa::helper::system::PluginManager::unloadedPlugins ; (; ); const. ◆ unloadPlugin(). bool sofa::helper::system::PluginManager::unloadPlugin ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Unloads a plugin from the map Warning: a previously loaded plugin will always be in process memory. . ◆ writeToIniFile(). void sofa::helper::system::PluginManager::writeToIniFile ; (; const std::string & ; path). Enum details. ◆ PluginLoadStatus. enum sofa::helper::system::PluginManager::PluginLoadStatus : unsigned char. strong . EnumeratorSUCCESS ; ALREADY_LOADED ; PLUGIN_FILE_NOT_FOUND ; INVALID_LOADING ; MISSING_SYMBOL ; INIT_ERROR . Related details. ◆ operator<<. std::ostream& operator<< ; (; std::ostream & ; os, . const PluginManager & ; pluginManager . ). friend . ◆ operator>>. std::istream& operator>> ; (; std::istream & ; in, . PluginManager & ; pluginManager . ). friend . sofahelpersystemPluginManager; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:9771,Modifiability,Plugin,PluginLoadStatus,9771,"luginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPluginLoadedCallback ; (; const std::string & ; key). ◆ unloadedPlugins(). const std::unordered_set< std::string > & sofa::helper::system::PluginManager::unloadedPlugins ; (; ); const. ◆ unloadPlugin(). bool sofa::helper::system::PluginManager::unloadPlugin ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Unloads a plugin from the map Warning: a previously loaded plugin will always be in process memory. . ◆ writeToIniFile(). void sofa::helper::system::PluginManager::writeToIniFile ; (; const std::string & ; path). Enum details. ◆ PluginLoadStatus. enum sofa::helper::system::PluginManager::PluginLoadStatus : unsigned char. strong . EnumeratorSUCCESS ; ALREADY_LOADED ; PLUGIN_FILE_NOT_FOUND ; INVALID_LOADING ; MISSING_SYMBOL ; INIT_ERROR . Related details. ◆ operator<<. std::ostream& operator<< ; (; std::ostream & ; os, . const PluginManager & ; pluginManager . ). friend . ◆ operator>>. std::istream& operator>> ; (; std::istream & ; in, . PluginManager & ; pluginManager . ). friend . sofahelpersystemPluginManager; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:9816,Modifiability,Plugin,PluginManager,9816,"luginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPluginLoadedCallback ; (; const std::string & ; key). ◆ unloadedPlugins(). const std::unordered_set< std::string > & sofa::helper::system::PluginManager::unloadedPlugins ; (; ); const. ◆ unloadPlugin(). bool sofa::helper::system::PluginManager::unloadPlugin ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Unloads a plugin from the map Warning: a previously loaded plugin will always be in process memory. . ◆ writeToIniFile(). void sofa::helper::system::PluginManager::writeToIniFile ; (; const std::string & ; path). Enum details. ◆ PluginLoadStatus. enum sofa::helper::system::PluginManager::PluginLoadStatus : unsigned char. strong . EnumeratorSUCCESS ; ALREADY_LOADED ; PLUGIN_FILE_NOT_FOUND ; INVALID_LOADING ; MISSING_SYMBOL ; INIT_ERROR . Related details. ◆ operator<<. std::ostream& operator<< ; (; std::ostream & ; os, . const PluginManager & ; pluginManager . ). friend . ◆ operator>>. std::istream& operator>> ; (; std::istream & ; in, . PluginManager & ; pluginManager . ). friend . sofahelpersystemPluginManager; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:9831,Modifiability,Plugin,PluginLoadStatus,9831,"luginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPluginLoadedCallback ; (; const std::string & ; key). ◆ unloadedPlugins(). const std::unordered_set< std::string > & sofa::helper::system::PluginManager::unloadedPlugins ; (; ); const. ◆ unloadPlugin(). bool sofa::helper::system::PluginManager::unloadPlugin ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Unloads a plugin from the map Warning: a previously loaded plugin will always be in process memory. . ◆ writeToIniFile(). void sofa::helper::system::PluginManager::writeToIniFile ; (; const std::string & ; path). Enum details. ◆ PluginLoadStatus. enum sofa::helper::system::PluginManager::PluginLoadStatus : unsigned char. strong . EnumeratorSUCCESS ; ALREADY_LOADED ; PLUGIN_FILE_NOT_FOUND ; INVALID_LOADING ; MISSING_SYMBOL ; INIT_ERROR . Related details. ◆ operator<<. std::ostream& operator<< ; (; std::ostream & ; os, . const PluginManager & ; pluginManager . ). friend . ◆ operator>>. std::istream& operator>> ; (; std::istream & ; in, . PluginManager & ; pluginManager . ). friend . sofahelpersystemPluginManager; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:10073,Modifiability,Plugin,PluginManager,10073,"luginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPluginLoadedCallback ; (; const std::string & ; key). ◆ unloadedPlugins(). const std::unordered_set< std::string > & sofa::helper::system::PluginManager::unloadedPlugins ; (; ); const. ◆ unloadPlugin(). bool sofa::helper::system::PluginManager::unloadPlugin ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Unloads a plugin from the map Warning: a previously loaded plugin will always be in process memory. . ◆ writeToIniFile(). void sofa::helper::system::PluginManager::writeToIniFile ; (; const std::string & ; path). Enum details. ◆ PluginLoadStatus. enum sofa::helper::system::PluginManager::PluginLoadStatus : unsigned char. strong . EnumeratorSUCCESS ; ALREADY_LOADED ; PLUGIN_FILE_NOT_FOUND ; INVALID_LOADING ; MISSING_SYMBOL ; INIT_ERROR . Related details. ◆ operator<<. std::ostream& operator<< ; (; std::ostream & ; os, . const PluginManager & ; pluginManager . ). friend . ◆ operator>>. std::istream& operator>> ; (; std::istream & ; in, . PluginManager & ; pluginManager . ). friend . sofahelpersystemPluginManager; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:10091,Modifiability,plugin,pluginManager,10091,"luginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPluginLoadedCallback ; (; const std::string & ; key). ◆ unloadedPlugins(). const std::unordered_set< std::string > & sofa::helper::system::PluginManager::unloadedPlugins ; (; ); const. ◆ unloadPlugin(). bool sofa::helper::system::PluginManager::unloadPlugin ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Unloads a plugin from the map Warning: a previously loaded plugin will always be in process memory. . ◆ writeToIniFile(). void sofa::helper::system::PluginManager::writeToIniFile ; (; const std::string & ; path). Enum details. ◆ PluginLoadStatus. enum sofa::helper::system::PluginManager::PluginLoadStatus : unsigned char. strong . EnumeratorSUCCESS ; ALREADY_LOADED ; PLUGIN_FILE_NOT_FOUND ; INVALID_LOADING ; MISSING_SYMBOL ; INIT_ERROR . Related details. ◆ operator<<. std::ostream& operator<< ; (; std::ostream & ; os, . const PluginManager & ; pluginManager . ). friend . ◆ operator>>. std::istream& operator>> ; (; std::istream & ; in, . PluginManager & ; pluginManager . ). friend . sofahelpersystemPluginManager; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:10186,Modifiability,Plugin,PluginManager,10186,"luginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPluginLoadedCallback ; (; const std::string & ; key). ◆ unloadedPlugins(). const std::unordered_set< std::string > & sofa::helper::system::PluginManager::unloadedPlugins ; (; ); const. ◆ unloadPlugin(). bool sofa::helper::system::PluginManager::unloadPlugin ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Unloads a plugin from the map Warning: a previously loaded plugin will always be in process memory. . ◆ writeToIniFile(). void sofa::helper::system::PluginManager::writeToIniFile ; (; const std::string & ; path). Enum details. ◆ PluginLoadStatus. enum sofa::helper::system::PluginManager::PluginLoadStatus : unsigned char. strong . EnumeratorSUCCESS ; ALREADY_LOADED ; PLUGIN_FILE_NOT_FOUND ; INVALID_LOADING ; MISSING_SYMBOL ; INIT_ERROR . Related details. ◆ operator<<. std::ostream& operator<< ; (; std::ostream & ; os, . const PluginManager & ; pluginManager . ). friend . ◆ operator>>. std::istream& operator>> ; (; std::istream & ; in, . PluginManager & ; pluginManager . ). friend . sofahelpersystemPluginManager; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:10204,Modifiability,plugin,pluginManager,10204,"luginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPluginLoadedCallback ; (; const std::string & ; key). ◆ unloadedPlugins(). const std::unordered_set< std::string > & sofa::helper::system::PluginManager::unloadedPlugins ; (; ); const. ◆ unloadPlugin(). bool sofa::helper::system::PluginManager::unloadPlugin ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Unloads a plugin from the map Warning: a previously loaded plugin will always be in process memory. . ◆ writeToIniFile(). void sofa::helper::system::PluginManager::writeToIniFile ; (; const std::string & ; path). Enum details. ◆ PluginLoadStatus. enum sofa::helper::system::PluginManager::PluginLoadStatus : unsigned char. strong . EnumeratorSUCCESS ; ALREADY_LOADED ; PLUGIN_FILE_NOT_FOUND ; INVALID_LOADING ; MISSING_SYMBOL ; INIT_ERROR . Related details. ◆ operator<<. std::ostream& operator<< ; (; std::ostream & ; os, . const PluginManager & ; pluginManager . ). friend . ◆ operator>>. std::istream& operator>> ; (; std::istream & ; in, . PluginManager & ; pluginManager . ). friend . sofahelpersystemPluginManager; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:531,Performance,load,loadPlugin,531,"﻿. SOFA API: sofa::helper::system::PluginManager Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::helper::system::PluginManager Class Reference . #include <PluginManager.h>. Static Public Attributes; static std::string s_gui_postfix = ""gui"";  the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) More...;  . Public Member Functions; PluginLoadStatus loadPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByPath (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByName (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; bool unloadPlugin (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:710,Performance,load,loadPluginByPath,710,"﻿. SOFA API: sofa::helper::system::PluginManager Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::helper::system::PluginManager Class Reference . #include <PluginManager.h>. Static Public Attributes; static std::string s_gui_postfix = ""gui"";  the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) More...;  . Public Member Functions; PluginLoadStatus loadPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByPath (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByName (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; bool unloadPlugin (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:804,Performance,load,loadPluginByName,804,"﻿. SOFA API: sofa::helper::system::PluginManager Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::helper::system::PluginManager Class Reference . #include <PluginManager.h>. Static Public Attributes; static std::string s_gui_postfix = ""gui"";  the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) More...;  . Public Member Functions; PluginLoadStatus loadPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByPath (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByName (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; bool unloadPlugin (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:1274,Performance,load,loadPlugin,1274,"er::system::PluginManager Class Reference . #include <PluginManager.h>. Static Public Attributes; static std::string s_gui_postfix = ""gui"";  the postfix to gui plugin, default=""gui"" (e.g. myplugin_gui.so) More...;  . Public Member Functions; PluginLoadStatus loadPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByPath (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus loadPluginByName (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  ; bool unloadPlugin (const std::string &path, std::ostream *errlog=nullptr);  ; PluginLoadStatus registerPlugin (const std::string &plugin, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, std::ostream *errlog=nullptr);  Register a plugin. Merely an alias for loadPlugin() More...;  ; const std::unordered_set< std::string > & unloadedPlugins () const;  ; bool isPluginUnloaded (const std::string &pluginName) const;  ; void init ();  ; void init (const std::string &pluginPath);  ; void cleanup ();  ; std::string findPlugin (const std::string &pluginName, const std::string &suffix=getDefaultSuffix(), bool ignoreCase=true, bool recursive=true, int maxRecursiveDepth=3);  ; bool pluginIsLoaded (const std::string &plugin);  ; std::pair< std::string, bool > isPluginLoaded (const std::string &plugin);  ; bool checkDuplicatedPlugin (const Plugin &plugin, const std::string &pluginPath);  ; PluginMap & getPluginMap ();  ; Plugin * getPlugin (const std::string &plugin, const std::string &=getDefaultSuffix(), bool=true);  ; Plugin * getPluginByName (const std::string &pluginName);  ; template<typename Entry > ; bool getEntryFromPlugin (const Plugin *plugin, Entry &entry);  ; void readFromIniFile (const std::string &path);  ; void readFromIniFile (const s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:4363,Performance,load,load,4363,"::system::PluginManager::addOnPluginCleanupCallbacks ; (; const std::string & ; key, . std::function< void()> ; callback . ). ◆ addOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; plu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:4509,Performance,load,load,4509,"LoadedCallback(). void sofa::helper::system::PluginManager::addOnPluginLoadedCallback ; (; const std::string & ; key, . std::function< void(const std::string &, const Plugin &)> ; callback . ). ◆ checkDuplicatedPlugin(). bool sofa::helper::system::PluginManager::checkDuplicatedPlugin ; (; const Plugin & ; plugin, . const std::string & ; pluginPath . ). ◆ cleanup(). void sofa::helper::system::PluginManager::cleanup ; (; ). ◆ findPlugin(). std::string sofa::helper::system::PluginManager::findPlugin ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . int ; maxRecursiveDepth = 3 . ). ◆ getDefaultSuffix(). std::string sofa::helper::system::PluginManager::getDefaultSuffix ; (; ). static . Get the default suffix applied to plugin names to find the actual lib to load Returns ""_d"" in debug configuration and an empty string otherwise . Get the default suffix applied to plugin names to find the actual lib to load (depends on platform, version, debug/release build) . ◆ getEntryFromPlugin(). template<typename Entry > . bool sofa::helper::system::PluginManager::getEntryFromPlugin ; (; const Plugin * ; plugin, . Entry & ; entry . ). inline . ◆ getInstance(). PluginManager & sofa::helper::system::PluginManager::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:5791,Performance,load,loaded,5791,"::getInstance ; (; ). static . ◆ getPlugin(). Plugin * sofa::helper::system::PluginManager::getPlugin ; (; const std::string & ; plugin, . const std::string & ; = getDefaultSuffix(), . bool ; = true . ). ◆ getPluginByName(). Plugin * sofa::helper::system::PluginManager::getPluginByName ; (; const std::string & ; pluginName). ◆ getPluginMap(). PluginMap& sofa::helper::system::PluginManager::getPluginMap ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into th",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:6210,Performance,load,loadPlugin,6210,"p ; (; ). inline . ◆ GetPluginNameFromPath(). std::string sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stre",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:6266,Performance,load,loadPlugin,6266,"ring sofa::helper::system::PluginManager::GetPluginNameFromPath ; (; const std::string & ; pluginPath). static . ◆ init() [1/2]. void sofa::helper::system::PluginManager::init ; (; void ; ). ◆ init() [2/2]. void sofa::helper::system::PluginManager::init ; (; const std::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:6461,Performance,Load,Loads,6461,"td::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in p",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:6579,Performance,load,loaded,6579,"td::string & ; pluginPath). ◆ isPluginLoaded(). std::pair< std::string, bool > sofa::helper::system::PluginManager::isPluginLoaded ; (; const std::string & ; plugin). Determine if a plugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in p",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:6633,Performance,load,loaded,6633,"ugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:6721,Performance,load,loaded,6721,"ugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:6747,Performance,load,load,6747,"ugin name or plugin path is known from the plugin manager (i.e. has been loaded by the plugin manager) with the found path. Parameters. pluginA path to a plugin or a plugin name . ReturnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:6878,Performance,load,load,6878,"turnsA pair consisting of the found plugin path (or the plugin path that was last tried) and a bool value set to true if the plugin has been found in the plugin registration map . ◆ isPluginUnloaded(). bool sofa::helper::system::PluginManager::isPluginUnloaded ; (; const std::string & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:7241,Performance,load,loadPluginByName,7241,"::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for erro",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:7303,Performance,load,loadPluginByName,7303,", . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::P",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:7508,Performance,Load,Loads,7508," if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:7620,Performance,load,load,7620,"egistered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:7940,Performance,load,loadPluginByPath,7940,"o apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:8029,Performance,load,loadPluginByPath,8029,"y otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:8120,Performance,Load,Loads,8120,"plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPlug",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:8209,Performance,load,load,8209,"m for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPlugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:8969,Performance,load,loadPlugin,8969,"nManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPluginLoadedCallback ; (; const std::string & ; key). ◆ unloadedPlugins(). const std::unordered_set< std::string > & sofa::helper::system::PluginManager::unloadedPlugins ; (; ); const. ◆ unloadPlugin(). bool sofa::helper::system::PluginManager::unloadPlugin ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Unloads a plugin from the map Warning: a previously loaded plugin will always be in process memory. . ◆ writeToIniFile(). void sofa::helper::system::PluginManager::writeToIniFile ; (; const std::string & ; path). Enum details. ◆ PluginLoadStatus. enum sofa::helper::system::PluginManager::PluginLoadStatus : unsigned char. strong . EnumeratorSUCCESS ; ALREADY_LOADED ; PLUGIN_FILE_NOT_FOUND ; INVALID_LOADING ; MISSING_SYMBO",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:9594,Performance,load,loaded,9594,"luginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPluginLoadedCallback ; (; const std::string & ; key). ◆ unloadedPlugins(). const std::unordered_set< std::string > & sofa::helper::system::PluginManager::unloadedPlugins ; (; ); const. ◆ unloadPlugin(). bool sofa::helper::system::PluginManager::unloadPlugin ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Unloads a plugin from the map Warning: a previously loaded plugin will always be in process memory. . ◆ writeToIniFile(). void sofa::helper::system::PluginManager::writeToIniFile ; (; const std::string & ; path). Enum details. ◆ PluginLoadStatus. enum sofa::helper::system::PluginManager::PluginLoadStatus : unsigned char. strong . EnumeratorSUCCESS ; ALREADY_LOADED ; PLUGIN_FILE_NOT_FOUND ; INVALID_LOADING ; MISSING_SYMBOL ; INIT_ERROR . Related details. ◆ operator<<. std::ostream& operator<< ; (; std::ostream & ; os, . const PluginManager & ; pluginManager . ). friend . ◆ operator>>. std::istream& operator>> ; (; std::istream & ; in, . PluginManager & ; pluginManager . ). friend . sofahelpersystemPluginManager; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:7228,Testability,log,logging,7228,"ring & ; pluginName); const. ◆ loadPlugin(). auto sofa::helper::system::PluginManager::loadPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory and register into the map; if already registered into the map (and therefore loaded in memory), do nothing.; If not registered but loaded in memory, call entrypoints and register into the map; If not registered and not loaded in memory, it will load the plugin in memory, call entrypoints and register into the map Parameters. pluginCan be just the filename of the library to load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathTh",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:7927,Testability,log,logging,7927,"load (without extension) or the full path ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds and is empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursiv",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html:8251,Testability,log,logging,8251,"m for error logging. . ◆ loadPluginByName(). auto sofa::helper::system::PluginManager::loadPluginByName ; (; const std::string & ; pluginName, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pluginNameThe filename without extension of the plugin to load ; suffixAn optional suffix to apply to the filename. Defaults to ""_d"" with debug builds, empty otherwise. ; ignoreCaseSpecify if the plugin search should be case-insensitive (activated by default). Not used if the plugin string passed as a parameter is a full path ; errlogAn optional stream for error logging. . ◆ loadPluginByPath(). PluginManager::PluginLoadStatus sofa::helper::system::PluginManager::loadPluginByPath ; (; const std::string & ; path, . std::ostream * ; errlog = nullptr . ). Loads a plugin library in process memory. Parameters. pathThe full path of the plugin to load ; errlogAn optional stream for error logging. . ◆ pluginIsLoaded(). bool sofa::helper::system::PluginManager::pluginIsLoaded ; (; const std::string & ; plugin). ◆ readFromIniFile() [1/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path). ◆ readFromIniFile() [2/2]. void sofa::helper::system::PluginManager::readFromIniFile ; (; const std::string & ; path, . type::vector< std::string > & ; listLoadedPlugins . ). ◆ registerPlugin(). auto sofa::helper::system::PluginManager::registerPlugin ; (; const std::string & ; plugin, . const std::string & ; suffix = getDefaultSuffix(), . bool ; ignoreCase = true, . bool ; recursive = true, . std::ostream * ; errlog = nullptr . ). Register a plugin. Merely an alias for loadPlugin() . ◆ removeOnPluginCleanupCallbacks(). void sofa::helper::system::PluginManager::removeOnPluginCleanupCallbacks ; (; const std::string & ; key). ◆ removeOnPluginLoadedCallback(). void sofa::helper::system::PluginManager::removeOnPlugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_plugin_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory-members.html:240,Modifiability,inherit,inherited,240,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::system::SetDirectory Member List . This is the complete list of members for sofa::helper::system::SetDirectory, including all inherited members. directorysofa::helper::system::SetDirectory; GetCurrentDir()sofa::helper::system::SetDirectorystatic; GetExtension(const char *filename)sofa::helper::system::SetDirectorystatic; GetFileName(const char *filename)sofa::helper::system::SetDirectorystatic; GetFileNameWithoutExtension(const char *filename)sofa::helper::system::SetDirectorystatic; GetParentDir(const char *filename)sofa::helper::system::SetDirectorystatic; GetProcessFullPath(const char *filename)sofa::helper::system::SetDirectorystatic; GetRelativeFromDir(const char *filename, const char *basename)sofa::helper::system::SetDirectorystatic; GetRelativeFromFile(const char *filename, const char *basename)sofa::helper::system::SetDirectorystatic; GetRelativeFromProcess(const char *filename, const char *basename=nullptr)sofa::helper::system::SetDirectorystatic; IsAbsolute(const std::string &filename)sofa::helper::system::SetDirectorystatic; previousDirsofa::helper::system::SetDirectory; SetDirectory(const std::string &filename)sofa::helper::system::SetDirectory; ~SetDirectory()sofa::helper::system::SetDirectory. Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html:833,Deployability,a/b,a/b,833,"﻿. SOFA API: sofa::helper::system::SetDirectory Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::helper::system::SetDirectory Class Reference . #include <SetDirectory.h>. Public Attributes; std::string previousDir;  ; std::string directory;  . Public Member Functions;  SetDirectory (const std::string &filename);  ;  ~SetDirectory ();  . Static Public Member Functions; static bool IsAbsolute (const std::string &filename);  Return true if the given file has an absolute path. More...;  ; static std::string GetCurrentDir ();  Get the current directory. More...;  ; static std::string GetParentDir (const char *filename);  Get the parent directory of a given file, i.e. if given ""a/b/c"", return ""a/b"". More...;  ; static std::string GetFileName (const char *filename);  Get the filename from an absolute path description, i.e. if given""a/b/c"", return ""c"". More...;  ; static std::string GetExtension (const char *filename);  Get the extension of a file from an absolute path description, i.e. if given""a/b/c.d"", return ""d"". More...;  ; static std::string GetFileNameWithoutExtension (const char *filename);  Get the filename from an absolute path description without extension i.e. if given""a/b/c.d"", return ""c"". More...;  ; static std::string GetProcessFullPath (const char *filename);  Get the full path of the current process. The given filename should be the value of argv[0]. More...;  ; static std::string GetRelativeFromDir (const char *filename, const char *basename);  ; static std::string GetRelativeFromFile (const char *filename, const char *basename);  ; static std::string GetRelativeFromProcess (const char *filename, const char *basename=nullptr);  . Attribute details. ◆ directory. std::string sofa::helper::system::SetDirectory::directory. ◆ previousDir. std::string sofa::helper::system::SetDirectory::previousDir. Constructor de",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html:849,Deployability,a/b,a/b,849,"﻿. SOFA API: sofa::helper::system::SetDirectory Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::helper::system::SetDirectory Class Reference . #include <SetDirectory.h>. Public Attributes; std::string previousDir;  ; std::string directory;  . Public Member Functions;  SetDirectory (const std::string &filename);  ;  ~SetDirectory ();  . Static Public Member Functions; static bool IsAbsolute (const std::string &filename);  Return true if the given file has an absolute path. More...;  ; static std::string GetCurrentDir ();  Get the current directory. More...;  ; static std::string GetParentDir (const char *filename);  Get the parent directory of a given file, i.e. if given ""a/b/c"", return ""a/b"". More...;  ; static std::string GetFileName (const char *filename);  Get the filename from an absolute path description, i.e. if given""a/b/c"", return ""c"". More...;  ; static std::string GetExtension (const char *filename);  Get the extension of a file from an absolute path description, i.e. if given""a/b/c.d"", return ""d"". More...;  ; static std::string GetFileNameWithoutExtension (const char *filename);  Get the filename from an absolute path description without extension i.e. if given""a/b/c.d"", return ""c"". More...;  ; static std::string GetProcessFullPath (const char *filename);  Get the full path of the current process. The given filename should be the value of argv[0]. More...;  ; static std::string GetRelativeFromDir (const char *filename, const char *basename);  ; static std::string GetRelativeFromFile (const char *filename, const char *basename);  ; static std::string GetRelativeFromProcess (const char *filename, const char *basename=nullptr);  . Attribute details. ◆ directory. std::string sofa::helper::system::SetDirectory::directory. ◆ previousDir. std::string sofa::helper::system::SetDirectory::previousDir. Constructor de",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html:989,Deployability,a/b,a/b,989,"﻿. SOFA API: sofa::helper::system::SetDirectory Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::helper::system::SetDirectory Class Reference . #include <SetDirectory.h>. Public Attributes; std::string previousDir;  ; std::string directory;  . Public Member Functions;  SetDirectory (const std::string &filename);  ;  ~SetDirectory ();  . Static Public Member Functions; static bool IsAbsolute (const std::string &filename);  Return true if the given file has an absolute path. More...;  ; static std::string GetCurrentDir ();  Get the current directory. More...;  ; static std::string GetParentDir (const char *filename);  Get the parent directory of a given file, i.e. if given ""a/b/c"", return ""a/b"". More...;  ; static std::string GetFileName (const char *filename);  Get the filename from an absolute path description, i.e. if given""a/b/c"", return ""c"". More...;  ; static std::string GetExtension (const char *filename);  Get the extension of a file from an absolute path description, i.e. if given""a/b/c.d"", return ""d"". More...;  ; static std::string GetFileNameWithoutExtension (const char *filename);  Get the filename from an absolute path description without extension i.e. if given""a/b/c.d"", return ""c"". More...;  ; static std::string GetProcessFullPath (const char *filename);  Get the full path of the current process. The given filename should be the value of argv[0]. More...;  ; static std::string GetRelativeFromDir (const char *filename, const char *basename);  ; static std::string GetRelativeFromFile (const char *filename, const char *basename);  ; static std::string GetRelativeFromProcess (const char *filename, const char *basename=nullptr);  . Attribute details. ◆ directory. std::string sofa::helper::system::SetDirectory::directory. ◆ previousDir. std::string sofa::helper::system::SetDirectory::previousDir. Constructor de",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html:1155,Deployability,a/b,a/b,1155,"tes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::helper::system::SetDirectory Class Reference . #include <SetDirectory.h>. Public Attributes; std::string previousDir;  ; std::string directory;  . Public Member Functions;  SetDirectory (const std::string &filename);  ;  ~SetDirectory ();  . Static Public Member Functions; static bool IsAbsolute (const std::string &filename);  Return true if the given file has an absolute path. More...;  ; static std::string GetCurrentDir ();  Get the current directory. More...;  ; static std::string GetParentDir (const char *filename);  Get the parent directory of a given file, i.e. if given ""a/b/c"", return ""a/b"". More...;  ; static std::string GetFileName (const char *filename);  Get the filename from an absolute path description, i.e. if given""a/b/c"", return ""c"". More...;  ; static std::string GetExtension (const char *filename);  Get the extension of a file from an absolute path description, i.e. if given""a/b/c.d"", return ""d"". More...;  ; static std::string GetFileNameWithoutExtension (const char *filename);  Get the filename from an absolute path description without extension i.e. if given""a/b/c.d"", return ""c"". More...;  ; static std::string GetProcessFullPath (const char *filename);  Get the full path of the current process. The given filename should be the value of argv[0]. More...;  ; static std::string GetRelativeFromDir (const char *filename, const char *basename);  ; static std::string GetRelativeFromFile (const char *filename, const char *basename);  ; static std::string GetRelativeFromProcess (const char *filename, const char *basename=nullptr);  . Attribute details. ◆ directory. std::string sofa::helper::system::SetDirectory::directory. ◆ previousDir. std::string sofa::helper::system::SetDirectory::previousDir. Constructor details. ◆ SetDirectory(). sofa::helper::system::SetDirectory::SetDirectory ; (; const std::string & ; filename). ◆ ~SetDirectory(). sofa::helper::system:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html:1344,Deployability,a/b,a/b,1344,"std::string previousDir;  ; std::string directory;  . Public Member Functions;  SetDirectory (const std::string &filename);  ;  ~SetDirectory ();  . Static Public Member Functions; static bool IsAbsolute (const std::string &filename);  Return true if the given file has an absolute path. More...;  ; static std::string GetCurrentDir ();  Get the current directory. More...;  ; static std::string GetParentDir (const char *filename);  Get the parent directory of a given file, i.e. if given ""a/b/c"", return ""a/b"". More...;  ; static std::string GetFileName (const char *filename);  Get the filename from an absolute path description, i.e. if given""a/b/c"", return ""c"". More...;  ; static std::string GetExtension (const char *filename);  Get the extension of a file from an absolute path description, i.e. if given""a/b/c.d"", return ""d"". More...;  ; static std::string GetFileNameWithoutExtension (const char *filename);  Get the filename from an absolute path description without extension i.e. if given""a/b/c.d"", return ""c"". More...;  ; static std::string GetProcessFullPath (const char *filename);  Get the full path of the current process. The given filename should be the value of argv[0]. More...;  ; static std::string GetRelativeFromDir (const char *filename, const char *basename);  ; static std::string GetRelativeFromFile (const char *filename, const char *basename);  ; static std::string GetRelativeFromProcess (const char *filename, const char *basename=nullptr);  . Attribute details. ◆ directory. std::string sofa::helper::system::SetDirectory::directory. ◆ previousDir. std::string sofa::helper::system::SetDirectory::previousDir. Constructor details. ◆ SetDirectory(). sofa::helper::system::SetDirectory::SetDirectory ; (; const std::string & ; filename). ◆ ~SetDirectory(). sofa::helper::system::SetDirectory::~SetDirectory ; (; ). Function details. ◆ GetCurrentDir(). std::string sofa::helper::system::SetDirectory::GetCurrentDir ; (; ). static . Get the current directory. . ◆ GetEx",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html:2531,Deployability,a/b,a/b,2531,"[0]. More...;  ; static std::string GetRelativeFromDir (const char *filename, const char *basename);  ; static std::string GetRelativeFromFile (const char *filename, const char *basename);  ; static std::string GetRelativeFromProcess (const char *filename, const char *basename=nullptr);  . Attribute details. ◆ directory. std::string sofa::helper::system::SetDirectory::directory. ◆ previousDir. std::string sofa::helper::system::SetDirectory::previousDir. Constructor details. ◆ SetDirectory(). sofa::helper::system::SetDirectory::SetDirectory ; (; const std::string & ; filename). ◆ ~SetDirectory(). sofa::helper::system::SetDirectory::~SetDirectory ; (; ). Function details. ◆ GetCurrentDir(). std::string sofa::helper::system::SetDirectory::GetCurrentDir ; (; ). static . Get the current directory. . ◆ GetExtension(). std::string sofa::helper::system::SetDirectory::GetExtension ; (; const char * ; filename). static . Get the extension of a file from an absolute path description, i.e. if given""a/b/c.d"", return ""d"". . ◆ GetFileName(). std::string sofa::helper::system::SetDirectory::GetFileName ; (; const char * ; filename). static . Get the filename from an absolute path description, i.e. if given""a/b/c"", return ""c"". . ◆ GetFileNameWithoutExtension(). std::string sofa::helper::system::SetDirectory::GetFileNameWithoutExtension ; (; const char * ; filename). static . Get the filename from an absolute path description without extension i.e. if given""a/b/c.d"", return ""c"". . ◆ GetParentDir(). std::string sofa::helper::system::SetDirectory::GetParentDir ; (; const char * ; filename). static . Get the parent directory of a given file, i.e. if given ""a/b/c"", return ""a/b"". . ◆ GetProcessFullPath(). std::string sofa::helper::system::SetDirectory::GetProcessFullPath ; (; const char * ; filename). static . Get the full path of the current process. The given filename should be the value of argv[0]. . ◆ GetRelativeFromDir(). std::string sofa::helper::system::SetDirectory::GetRelativeFrom",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html:2738,Deployability,a/b,a/b,2738,"tRelativeFromProcess (const char *filename, const char *basename=nullptr);  . Attribute details. ◆ directory. std::string sofa::helper::system::SetDirectory::directory. ◆ previousDir. std::string sofa::helper::system::SetDirectory::previousDir. Constructor details. ◆ SetDirectory(). sofa::helper::system::SetDirectory::SetDirectory ; (; const std::string & ; filename). ◆ ~SetDirectory(). sofa::helper::system::SetDirectory::~SetDirectory ; (; ). Function details. ◆ GetCurrentDir(). std::string sofa::helper::system::SetDirectory::GetCurrentDir ; (; ). static . Get the current directory. . ◆ GetExtension(). std::string sofa::helper::system::SetDirectory::GetExtension ; (; const char * ; filename). static . Get the extension of a file from an absolute path description, i.e. if given""a/b/c.d"", return ""d"". . ◆ GetFileName(). std::string sofa::helper::system::SetDirectory::GetFileName ; (; const char * ; filename). static . Get the filename from an absolute path description, i.e. if given""a/b/c"", return ""c"". . ◆ GetFileNameWithoutExtension(). std::string sofa::helper::system::SetDirectory::GetFileNameWithoutExtension ; (; const char * ; filename). static . Get the filename from an absolute path description without extension i.e. if given""a/b/c.d"", return ""c"". . ◆ GetParentDir(). std::string sofa::helper::system::SetDirectory::GetParentDir ; (; const char * ; filename). static . Get the parent directory of a given file, i.e. if given ""a/b/c"", return ""a/b"". . ◆ GetProcessFullPath(). std::string sofa::helper::system::SetDirectory::GetProcessFullPath ; (; const char * ; filename). static . Get the full path of the current process. The given filename should be the value of argv[0]. . ◆ GetRelativeFromDir(). std::string sofa::helper::system::SetDirectory::GetRelativeFromDir ; (; const char * ; filename, . const char * ; basename . ). static . Get the ABSOLUTE path of a file relative to a directory i.e. if given ""../e"" and ""a/b/c"", return ""a/b/e"". . ◆ GetRelativeFromFile(). std::st",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html:2992,Deployability,a/b,a/b,2992,"structor details. ◆ SetDirectory(). sofa::helper::system::SetDirectory::SetDirectory ; (; const std::string & ; filename). ◆ ~SetDirectory(). sofa::helper::system::SetDirectory::~SetDirectory ; (; ). Function details. ◆ GetCurrentDir(). std::string sofa::helper::system::SetDirectory::GetCurrentDir ; (; ). static . Get the current directory. . ◆ GetExtension(). std::string sofa::helper::system::SetDirectory::GetExtension ; (; const char * ; filename). static . Get the extension of a file from an absolute path description, i.e. if given""a/b/c.d"", return ""d"". . ◆ GetFileName(). std::string sofa::helper::system::SetDirectory::GetFileName ; (; const char * ; filename). static . Get the filename from an absolute path description, i.e. if given""a/b/c"", return ""c"". . ◆ GetFileNameWithoutExtension(). std::string sofa::helper::system::SetDirectory::GetFileNameWithoutExtension ; (; const char * ; filename). static . Get the filename from an absolute path description without extension i.e. if given""a/b/c.d"", return ""c"". . ◆ GetParentDir(). std::string sofa::helper::system::SetDirectory::GetParentDir ; (; const char * ; filename). static . Get the parent directory of a given file, i.e. if given ""a/b/c"", return ""a/b"". . ◆ GetProcessFullPath(). std::string sofa::helper::system::SetDirectory::GetProcessFullPath ; (; const char * ; filename). static . Get the full path of the current process. The given filename should be the value of argv[0]. . ◆ GetRelativeFromDir(). std::string sofa::helper::system::SetDirectory::GetRelativeFromDir ; (; const char * ; filename, . const char * ; basename . ). static . Get the ABSOLUTE path of a file relative to a directory i.e. if given ""../e"" and ""a/b/c"", return ""a/b/e"". . ◆ GetRelativeFromFile(). std::string sofa::helper::system::SetDirectory::GetRelativeFromFile ; (; const char * ; filename, . const char * ; basename . ). static . Get the ABSOLUTE path of a file relative to another file path i.e. if given ""../e"" and ""a/b/c"", return ""a/e"". . ◆ Ge",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html:3192,Deployability,a/b,a/b,3192,"n details. ◆ GetCurrentDir(). std::string sofa::helper::system::SetDirectory::GetCurrentDir ; (; ). static . Get the current directory. . ◆ GetExtension(). std::string sofa::helper::system::SetDirectory::GetExtension ; (; const char * ; filename). static . Get the extension of a file from an absolute path description, i.e. if given""a/b/c.d"", return ""d"". . ◆ GetFileName(). std::string sofa::helper::system::SetDirectory::GetFileName ; (; const char * ; filename). static . Get the filename from an absolute path description, i.e. if given""a/b/c"", return ""c"". . ◆ GetFileNameWithoutExtension(). std::string sofa::helper::system::SetDirectory::GetFileNameWithoutExtension ; (; const char * ; filename). static . Get the filename from an absolute path description without extension i.e. if given""a/b/c.d"", return ""c"". . ◆ GetParentDir(). std::string sofa::helper::system::SetDirectory::GetParentDir ; (; const char * ; filename). static . Get the parent directory of a given file, i.e. if given ""a/b/c"", return ""a/b"". . ◆ GetProcessFullPath(). std::string sofa::helper::system::SetDirectory::GetProcessFullPath ; (; const char * ; filename). static . Get the full path of the current process. The given filename should be the value of argv[0]. . ◆ GetRelativeFromDir(). std::string sofa::helper::system::SetDirectory::GetRelativeFromDir ; (; const char * ; filename, . const char * ; basename . ). static . Get the ABSOLUTE path of a file relative to a directory i.e. if given ""../e"" and ""a/b/c"", return ""a/b/e"". . ◆ GetRelativeFromFile(). std::string sofa::helper::system::SetDirectory::GetRelativeFromFile ; (; const char * ; filename, . const char * ; basename . ). static . Get the ABSOLUTE path of a file relative to another file path i.e. if given ""../e"" and ""a/b/c"", return ""a/e"". . ◆ GetRelativeFromProcess(). std::string sofa::helper::system::SetDirectory::GetRelativeFromProcess ; (; const char * ; filename, . const char * ; basename = nullptr . ). static . Get the ABSOLUTE path of a file ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html:3208,Deployability,a/b,a/b,3208,"n details. ◆ GetCurrentDir(). std::string sofa::helper::system::SetDirectory::GetCurrentDir ; (; ). static . Get the current directory. . ◆ GetExtension(). std::string sofa::helper::system::SetDirectory::GetExtension ; (; const char * ; filename). static . Get the extension of a file from an absolute path description, i.e. if given""a/b/c.d"", return ""d"". . ◆ GetFileName(). std::string sofa::helper::system::SetDirectory::GetFileName ; (; const char * ; filename). static . Get the filename from an absolute path description, i.e. if given""a/b/c"", return ""c"". . ◆ GetFileNameWithoutExtension(). std::string sofa::helper::system::SetDirectory::GetFileNameWithoutExtension ; (; const char * ; filename). static . Get the filename from an absolute path description without extension i.e. if given""a/b/c.d"", return ""c"". . ◆ GetParentDir(). std::string sofa::helper::system::SetDirectory::GetParentDir ; (; const char * ; filename). static . Get the parent directory of a given file, i.e. if given ""a/b/c"", return ""a/b"". . ◆ GetProcessFullPath(). std::string sofa::helper::system::SetDirectory::GetProcessFullPath ; (; const char * ; filename). static . Get the full path of the current process. The given filename should be the value of argv[0]. . ◆ GetRelativeFromDir(). std::string sofa::helper::system::SetDirectory::GetRelativeFromDir ; (; const char * ; filename, . const char * ; basename . ). static . Get the ABSOLUTE path of a file relative to a directory i.e. if given ""../e"" and ""a/b/c"", return ""a/b/e"". . ◆ GetRelativeFromFile(). std::string sofa::helper::system::SetDirectory::GetRelativeFromFile ; (; const char * ; filename, . const char * ; basename . ). static . Get the ABSOLUTE path of a file relative to another file path i.e. if given ""../e"" and ""a/b/c"", return ""a/e"". . ◆ GetRelativeFromProcess(). std::string sofa::helper::system::SetDirectory::GetRelativeFromProcess ; (; const char * ; filename, . const char * ; basename = nullptr . ). static . Get the ABSOLUTE path of a file ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html:3685,Deployability,a/b,a/b,3685,"return ""d"". . ◆ GetFileName(). std::string sofa::helper::system::SetDirectory::GetFileName ; (; const char * ; filename). static . Get the filename from an absolute path description, i.e. if given""a/b/c"", return ""c"". . ◆ GetFileNameWithoutExtension(). std::string sofa::helper::system::SetDirectory::GetFileNameWithoutExtension ; (; const char * ; filename). static . Get the filename from an absolute path description without extension i.e. if given""a/b/c.d"", return ""c"". . ◆ GetParentDir(). std::string sofa::helper::system::SetDirectory::GetParentDir ; (; const char * ; filename). static . Get the parent directory of a given file, i.e. if given ""a/b/c"", return ""a/b"". . ◆ GetProcessFullPath(). std::string sofa::helper::system::SetDirectory::GetProcessFullPath ; (; const char * ; filename). static . Get the full path of the current process. The given filename should be the value of argv[0]. . ◆ GetRelativeFromDir(). std::string sofa::helper::system::SetDirectory::GetRelativeFromDir ; (; const char * ; filename, . const char * ; basename . ). static . Get the ABSOLUTE path of a file relative to a directory i.e. if given ""../e"" and ""a/b/c"", return ""a/b/e"". . ◆ GetRelativeFromFile(). std::string sofa::helper::system::SetDirectory::GetRelativeFromFile ; (; const char * ; filename, . const char * ; basename . ). static . Get the ABSOLUTE path of a file relative to another file path i.e. if given ""../e"" and ""a/b/c"", return ""a/e"". . ◆ GetRelativeFromProcess(). std::string sofa::helper::system::SetDirectory::GetRelativeFromProcess ; (; const char * ; filename, . const char * ; basename = nullptr . ). static . Get the ABSOLUTE path of a file relative to current process path i.e. if given ""../e"" and ""a/b/c"", return ""a/e"". . ◆ IsAbsolute(). bool sofa::helper::system::SetDirectory::IsAbsolute ; (; const std::string & ; filename). static . Return true if the given file has an absolute path. . sofahelpersystemSetDirectory; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html:3701,Deployability,a/b,a/b,3701,"return ""d"". . ◆ GetFileName(). std::string sofa::helper::system::SetDirectory::GetFileName ; (; const char * ; filename). static . Get the filename from an absolute path description, i.e. if given""a/b/c"", return ""c"". . ◆ GetFileNameWithoutExtension(). std::string sofa::helper::system::SetDirectory::GetFileNameWithoutExtension ; (; const char * ; filename). static . Get the filename from an absolute path description without extension i.e. if given""a/b/c.d"", return ""c"". . ◆ GetParentDir(). std::string sofa::helper::system::SetDirectory::GetParentDir ; (; const char * ; filename). static . Get the parent directory of a given file, i.e. if given ""a/b/c"", return ""a/b"". . ◆ GetProcessFullPath(). std::string sofa::helper::system::SetDirectory::GetProcessFullPath ; (; const char * ; filename). static . Get the full path of the current process. The given filename should be the value of argv[0]. . ◆ GetRelativeFromDir(). std::string sofa::helper::system::SetDirectory::GetRelativeFromDir ; (; const char * ; filename, . const char * ; basename . ). static . Get the ABSOLUTE path of a file relative to a directory i.e. if given ""../e"" and ""a/b/c"", return ""a/b/e"". . ◆ GetRelativeFromFile(). std::string sofa::helper::system::SetDirectory::GetRelativeFromFile ; (; const char * ; filename, . const char * ; basename . ). static . Get the ABSOLUTE path of a file relative to another file path i.e. if given ""../e"" and ""a/b/c"", return ""a/e"". . ◆ GetRelativeFromProcess(). std::string sofa::helper::system::SetDirectory::GetRelativeFromProcess ; (; const char * ; filename, . const char * ; basename = nullptr . ). static . Get the ABSOLUTE path of a file relative to current process path i.e. if given ""../e"" and ""a/b/c"", return ""a/e"". . ◆ IsAbsolute(). bool sofa::helper::system::SetDirectory::IsAbsolute ; (; const std::string & ; filename). static . Return true if the given file has an absolute path. . sofahelpersystemSetDirectory; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html:3962,Deployability,a/b,a/b,3962,"return ""d"". . ◆ GetFileName(). std::string sofa::helper::system::SetDirectory::GetFileName ; (; const char * ; filename). static . Get the filename from an absolute path description, i.e. if given""a/b/c"", return ""c"". . ◆ GetFileNameWithoutExtension(). std::string sofa::helper::system::SetDirectory::GetFileNameWithoutExtension ; (; const char * ; filename). static . Get the filename from an absolute path description without extension i.e. if given""a/b/c.d"", return ""c"". . ◆ GetParentDir(). std::string sofa::helper::system::SetDirectory::GetParentDir ; (; const char * ; filename). static . Get the parent directory of a given file, i.e. if given ""a/b/c"", return ""a/b"". . ◆ GetProcessFullPath(). std::string sofa::helper::system::SetDirectory::GetProcessFullPath ; (; const char * ; filename). static . Get the full path of the current process. The given filename should be the value of argv[0]. . ◆ GetRelativeFromDir(). std::string sofa::helper::system::SetDirectory::GetRelativeFromDir ; (; const char * ; filename, . const char * ; basename . ). static . Get the ABSOLUTE path of a file relative to a directory i.e. if given ""../e"" and ""a/b/c"", return ""a/b/e"". . ◆ GetRelativeFromFile(). std::string sofa::helper::system::SetDirectory::GetRelativeFromFile ; (; const char * ; filename, . const char * ; basename . ). static . Get the ABSOLUTE path of a file relative to another file path i.e. if given ""../e"" and ""a/b/c"", return ""a/e"". . ◆ GetRelativeFromProcess(). std::string sofa::helper::system::SetDirectory::GetRelativeFromProcess ; (; const char * ; filename, . const char * ; basename = nullptr . ). static . Get the ABSOLUTE path of a file relative to current process path i.e. if given ""../e"" and ""a/b/c"", return ""a/e"". . ◆ IsAbsolute(). bool sofa::helper::system::SetDirectory::IsAbsolute ; (; const std::string & ; filename). static . Return true if the given file has an absolute path. . sofahelpersystemSetDirectory; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html:4256,Deployability,a/b,a/b,4256,"return ""d"". . ◆ GetFileName(). std::string sofa::helper::system::SetDirectory::GetFileName ; (; const char * ; filename). static . Get the filename from an absolute path description, i.e. if given""a/b/c"", return ""c"". . ◆ GetFileNameWithoutExtension(). std::string sofa::helper::system::SetDirectory::GetFileNameWithoutExtension ; (; const char * ; filename). static . Get the filename from an absolute path description without extension i.e. if given""a/b/c.d"", return ""c"". . ◆ GetParentDir(). std::string sofa::helper::system::SetDirectory::GetParentDir ; (; const char * ; filename). static . Get the parent directory of a given file, i.e. if given ""a/b/c"", return ""a/b"". . ◆ GetProcessFullPath(). std::string sofa::helper::system::SetDirectory::GetProcessFullPath ; (; const char * ; filename). static . Get the full path of the current process. The given filename should be the value of argv[0]. . ◆ GetRelativeFromDir(). std::string sofa::helper::system::SetDirectory::GetRelativeFromDir ; (; const char * ; filename, . const char * ; basename . ). static . Get the ABSOLUTE path of a file relative to a directory i.e. if given ""../e"" and ""a/b/c"", return ""a/b/e"". . ◆ GetRelativeFromFile(). std::string sofa::helper::system::SetDirectory::GetRelativeFromFile ; (; const char * ; filename, . const char * ; basename . ). static . Get the ABSOLUTE path of a file relative to another file path i.e. if given ""../e"" and ""a/b/c"", return ""a/e"". . ◆ GetRelativeFromProcess(). std::string sofa::helper::system::SetDirectory::GetRelativeFromProcess ; (; const char * ; filename, . const char * ; basename = nullptr . ). static . Get the ABSOLUTE path of a file relative to current process path i.e. if given ""../e"" and ""a/b/c"", return ""a/e"". . ◆ IsAbsolute(). bool sofa::helper::system::SetDirectory::IsAbsolute ; (; const std::string & ; filename). static . Return true if the given file has an absolute path. . sofahelpersystemSetDirectory; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_temporary_locale-members.html:246,Modifiability,inherit,inherited,246,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::system::TemporaryLocale Member List . This is the complete list of members for sofa::helper::system::TemporaryLocale, including all inherited members. TemporaryLocale(int category, std::string locale)sofa::helper::system::TemporaryLocale; ~TemporaryLocale()sofa::helper::system::TemporaryLocale. Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_temporary_locale-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_temporary_locale-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id-members.html:302,Modifiability,inherit,inherited,302,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager > Member List . This is the complete list of members for sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >, including all inherited members. Alloc typedefsofa::type::vector< T, MemoryManager >; at(Index n)sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >inline; at(Index n) constsofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >inline; const_iterator typedefsofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >; const_reference typedefsofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >; fastResize(Size n)sofa::type::vector< T, MemoryManager >inline; fill(const T &value)sofa::type::vector< T, MemoryManager >inline; ID typedefsofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >; Index typedefsofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >; Inherit typedefsofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >; iterator typedefsofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >; memory_manager typedefsofa::type::vector< T, MemoryManager >; operator()(Index n)sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >inline; operator()(Index n) constsofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >inline; operator=(const std::vector< T, Alloc > &x)sofa::type::vector< T, MemoryManager >inline; operator=(std::vector< T, Alloc > &&v)sofa::type::vector< T, MemoryManager >inline; operator[](Index n)sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >inline; operator[](Index n) constsofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >inline; operator[](Size n)sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >inlineprotected; operator[](Size n) constsofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >inlineprotected; p",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1vector__id-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id-members.html:1014,Modifiability,Inherit,Inherit,1014," Alloc typedefsofa::type::vector< T, MemoryManager >; at(Index n)sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >inline; at(Index n) constsofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >inline; const_iterator typedefsofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >; const_reference typedefsofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >; fastResize(Size n)sofa::type::vector< T, MemoryManager >inline; fill(const T &value)sofa::type::vector< T, MemoryManager >inline; ID typedefsofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >; Index typedefsofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >; Inherit typedefsofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >; iterator typedefsofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >; memory_manager typedefsofa::type::vector< T, MemoryManager >; operator()(Index n)sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >inline; operator()(Index n) constsofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >inline; operator=(const std::vector< T, Alloc > &x)sofa::type::vector< T, MemoryManager >inline; operator=(std::vector< T, Alloc > &&v)sofa::type::vector< T, MemoryManager >inline; operator[](Index n)sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >inline; operator[](Index n) constsofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >inline; operator[](Size n)sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >inlineprotected; operator[](Size n) constsofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >inlineprotected; p",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1vector__id-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:376,Modifiability,Inherit,Inheritance,376,"﻿. SOFA API: sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager > Class Template Reference . #include <integer_id.h>. Inheritance diagram for sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >:. [legend]. Public Member Functions;  vector_id ();  Basic constructor. More...;  ;  vector_id (Size n, const T &value);  Constructor. More...;  ;  vector_id (int n, const T &value);  Constructor. More...;  ;  vector_id (long n, const T &value);  Constructor. More...;  ;  vector_id (Size n);  Constructor. More...;  ;  vector_id (const std::vector< T > &x);  Constructor. More...;  ;  vector_id (const_iterator first, const_iterator last);  Constructor. More...;  ; reference at (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference at (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator() (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator() (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator[] (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator[] (Index n) const;  Read-only random access. More...;  ; Index push_back (const_reference v);  ;  Public Member Functions inherited from sofa::type::vector< T, MemoryManager >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ; vector & operator= (c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:1546,Modifiability,inherit,inherited,1546,"tor_id (Size n, const T &value);  Constructor. More...;  ;  vector_id (int n, const T &value);  Constructor. More...;  ;  vector_id (long n, const T &value);  Constructor. More...;  ;  vector_id (Size n);  Constructor. More...;  ;  vector_id (const std::vector< T > &x);  Constructor. More...;  ;  vector_id (const_iterator first, const_iterator last);  Constructor. More...;  ; reference at (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference at (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator() (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator() (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator[] (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator[] (Index n) const;  Read-only random access. More...;  ; Index push_back (const_reference v);  ;  Public Member Functions inherited from sofa::type::vector< T, MemoryManager >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...;  ;  vector (typename vector< T >::const_iterator first, typename vector< T >::const_iterator last);  Constructor. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; void fill (const T &value);  Sets e",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:976,Security,access,access,976,"﻿. SOFA API: sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager > Class Template Reference . #include <integer_id.h>. Inheritance diagram for sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >:. [legend]. Public Member Functions;  vector_id ();  Basic constructor. More...;  ;  vector_id (Size n, const T &value);  Constructor. More...;  ;  vector_id (int n, const T &value);  Constructor. More...;  ;  vector_id (long n, const T &value);  Constructor. More...;  ;  vector_id (Size n);  Constructor. More...;  ;  vector_id (const std::vector< T > &x);  Constructor. More...;  ;  vector_id (const_iterator first, const_iterator last);  Constructor. More...;  ; reference at (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference at (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator() (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator() (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator[] (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator[] (Index n) const;  Read-only random access. More...;  ; Index push_back (const_reference v);  ;  Public Member Functions inherited from sofa::type::vector< T, MemoryManager >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ; vector & operator= (c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:1071,Security,access,access,1071,"ndices, MemoryManager > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager > Class Template Reference . #include <integer_id.h>. Inheritance diagram for sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >:. [legend]. Public Member Functions;  vector_id ();  Basic constructor. More...;  ;  vector_id (Size n, const T &value);  Constructor. More...;  ;  vector_id (int n, const T &value);  Constructor. More...;  ;  vector_id (long n, const T &value);  Constructor. More...;  ;  vector_id (Size n);  Constructor. More...;  ;  vector_id (const std::vector< T > &x);  Constructor. More...;  ;  vector_id (const_iterator first, const_iterator last);  Constructor. More...;  ; reference at (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference at (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator() (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator() (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator[] (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator[] (Index n) const;  Read-only random access. More...;  ; Index push_back (const_reference v);  ;  Public Member Functions inherited from sofa::type::vector< T, MemoryManager >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:1163,Security,access,access,1163," for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager > Class Template Reference . #include <integer_id.h>. Inheritance diagram for sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >:. [legend]. Public Member Functions;  vector_id ();  Basic constructor. More...;  ;  vector_id (Size n, const T &value);  Constructor. More...;  ;  vector_id (int n, const T &value);  Constructor. More...;  ;  vector_id (long n, const T &value);  Constructor. More...;  ;  vector_id (Size n);  Constructor. More...;  ;  vector_id (const std::vector< T > &x);  Constructor. More...;  ;  vector_id (const_iterator first, const_iterator last);  Constructor. More...;  ; reference at (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference at (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator() (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator() (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator[] (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator[] (Index n) const;  Read-only random access. More...;  ; Index push_back (const_reference v);  ;  Public Member Functions inherited from sofa::type::vector< T, MemoryManager >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:1266,Security,access,access,1266,"l members . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager > Class Template Reference . #include <integer_id.h>. Inheritance diagram for sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >:. [legend]. Public Member Functions;  vector_id ();  Basic constructor. More...;  ;  vector_id (Size n, const T &value);  Constructor. More...;  ;  vector_id (int n, const T &value);  Constructor. More...;  ;  vector_id (long n, const T &value);  Constructor. More...;  ;  vector_id (Size n);  Constructor. More...;  ;  vector_id (const std::vector< T > &x);  Constructor. More...;  ;  vector_id (const_iterator first, const_iterator last);  Constructor. More...;  ; reference at (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference at (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator() (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator() (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator[] (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator[] (Index n) const;  Read-only random access. More...;  ; Index push_back (const_reference v);  ;  Public Member Functions inherited from sofa::type::vector< T, MemoryManager >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...;  ;  vector (typename vector< T >::const_iterator first, typename vector< T >::const_iterator last)",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:1358,Security,access,access,1358,"ence . #include <integer_id.h>. Inheritance diagram for sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >:. [legend]. Public Member Functions;  vector_id ();  Basic constructor. More...;  ;  vector_id (Size n, const T &value);  Constructor. More...;  ;  vector_id (int n, const T &value);  Constructor. More...;  ;  vector_id (long n, const T &value);  Constructor. More...;  ;  vector_id (Size n);  Constructor. More...;  ;  vector_id (const std::vector< T > &x);  Constructor. More...;  ;  vector_id (const_iterator first, const_iterator last);  Constructor. More...;  ; reference at (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference at (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator() (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator() (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator[] (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator[] (Index n) const;  Read-only random access. More...;  ; Index push_back (const_reference v);  ;  Public Member Functions inherited from sofa::type::vector< T, MemoryManager >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...;  ;  vector (typename vector< T >::const_iterator first, typename vector< T >::const_iterator last);  Constructor. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:1461,Security,access,access,1461,"dex, CheckIndices, MemoryManager >:. [legend]. Public Member Functions;  vector_id ();  Basic constructor. More...;  ;  vector_id (Size n, const T &value);  Constructor. More...;  ;  vector_id (int n, const T &value);  Constructor. More...;  ;  vector_id (long n, const T &value);  Constructor. More...;  ;  vector_id (Size n);  Constructor. More...;  ;  vector_id (const std::vector< T > &x);  Constructor. More...;  ;  vector_id (const_iterator first, const_iterator last);  Constructor. More...;  ; reference at (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference at (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator() (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator() (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator[] (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator[] (Index n) const;  Read-only random access. More...;  ; Index push_back (const_reference v);  ;  Public Member Functions inherited from sofa::type::vector< T, MemoryManager >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...;  ;  vector (typename vector< T >::const_iterator first, typename vector< T >::const_iterator last);  Constructor. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:2325,Security,access,access,2325,".;  ; reference operator[] (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator[] (Index n) const;  Read-only random access. More...;  ; Index push_back (const_reference v);  ;  Public Member Functions inherited from sofa::type::vector< T, MemoryManager >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...;  ;  vector (typename vector< T >::const_iterator first, typename vector< T >::const_iterator last);  Constructor. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; void fill (const T &value);  Sets every element to 'value'. More...;  ; void fastResize (Size n);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostre",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:2406,Security,access,access,2406,"cit Index. More...;  ; const_reference operator[] (Index n) const;  Read-only random access. More...;  ; Index push_back (const_reference v);  ;  Public Member Functions inherited from sofa::type::vector< T, MemoryManager >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...;  ;  vector (typename vector< T >::const_iterator first, typename vector< T >::const_iterator last);  Constructor. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; void fill (const T &value);  Sets every element to 'value'. More...;  ; void fastResize (Size n);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:3483,Security,access,access,3483,":istream & read (std::istream &in);  ; void fill (const T &value);  Sets every element to 'value'. More...;  ; void fastResize (Size n);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  . Protected Member Functions; reference operator[] (Size n);  Read/write random access with regular index type, protected to force use of explicit Index. More...;  ; const_reference operator[] (Size n) const;  Read-only random access with regular index type, protected to force use of explicit Index. More...;  . Constructor details. ◆ vector_id() [1/7]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::vector_id ; (; ). inline . Basic constructor. . ◆ vector_id() [2/7]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::vector_id ; (; Size ; n, . const T & ; value . ). inline . Constructor. . ◆ vector_id() [3/7]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::vector_id ; (; int ; n, . const T & ; v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:3630,Security,access,access,3630," std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  . Protected Member Functions; reference operator[] (Size n);  Read/write random access with regular index type, protected to force use of explicit Index. More...;  ; const_reference operator[] (Size n) const;  Read-only random access with regular index type, protected to force use of explicit Index. More...;  . Constructor details. ◆ vector_id() [1/7]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::vector_id ; (; ). inline . Basic constructor. . ◆ vector_id() [2/7]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::vector_id ; (; Size ; n, . const T & ; value . ). inline . Constructor. . ◆ vector_id() [3/7]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::vector_id ; (; int ; n, . const T & ; value . ). inline . Constructor. . ◆ vector_id() [4/7]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:5846,Security,access,access,5846,"ices = false, class MemoryManager = CPUMemoryManager<T>> . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::vector_id ; (; Size ; n). inlineexplicit . Constructor. . ◆ vector_id() [6/7]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::vector_id ; (; const std::vector< T > & ; x). inline . Constructor. . ◆ vector_id() [7/7]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::vector_id ; (; const_iterator ; first, . const_iterator ; last . ). inline . Constructor. . Function details. ◆ at() [1/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::at ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ at() [2/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::at ; (; Index ; n); const. inline . Read-only random access, with explicit Index. . ◆ operator()() [1/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator()() [2/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n); const. inline . Read-only random access, with explicit Index. . ◆ operator[]() [1/4]. template<class T , class TIndex , bool CheckIndices = false, class Memo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:6133,Security,access,access,6133,"CPUMemoryManager<T>> . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::vector_id ; (; const std::vector< T > & ; x). inline . Constructor. . ◆ vector_id() [7/7]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::vector_id ; (; const_iterator ; first, . const_iterator ; last . ). inline . Constructor. . Function details. ◆ at() [1/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::at ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ at() [2/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::at ; (; Index ; n); const. inline . Read-only random access, with explicit Index. . ◆ operator()() [1/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator()() [2/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n); const. inline . Read-only random access, with explicit Index. . ◆ operator[]() [1/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator[]() [2/4]. template<class T , class TIndex , bool CheckIndices = false, class ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:6424,Security,access,access,6424,"a::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::vector_id ; (; const_iterator ; first, . const_iterator ; last . ). inline . Constructor. . Function details. ◆ at() [1/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::at ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ at() [2/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::at ; (; Index ; n); const. inline . Read-only random access, with explicit Index. . ◆ operator()() [1/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator()() [2/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n); const. inline . Read-only random access, with explicit Index. . ◆ operator[]() [1/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator[]() [2/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Index ; n); const. inline . Read-only random access. . ◆ operator[]() [3/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryMan",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:6727,Security,access,access,6727,"sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::at ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ at() [2/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::at ; (; Index ; n); const. inline . Read-only random access, with explicit Index. . ◆ operator()() [1/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator()() [2/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n); const. inline . Read-only random access, with explicit Index. . ◆ operator[]() [1/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator[]() [2/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Index ; n); const. inline . Read-only random access. . ◆ operator[]() [3/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Size ; n). inlineprotected . Read/write random access with regular index type, protected to force use of explicit Index. . ◆ operator[]() [4/4]. template<class T , class TIndex , b",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:7018,Security,access,access,7018,"per::vector_id< T, TIndex, CheckIndices, MemoryManager >::at ; (; Index ; n); const. inline . Read-only random access, with explicit Index. . ◆ operator()() [1/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator()() [2/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n); const. inline . Read-only random access, with explicit Index. . ◆ operator[]() [1/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator[]() [2/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Index ; n); const. inline . Read-only random access. . ◆ operator[]() [3/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Size ; n). inlineprotected . Read/write random access with regular index type, protected to force use of explicit Index. . ◆ operator[]() [4/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Size ; n); const. inlineprotected . Read-only random access with regular index type, protected to force use of explicit I",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:7321,Security,access,access,7321,":vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator()() [2/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n); const. inline . Read-only random access, with explicit Index. . ◆ operator[]() [1/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator[]() [2/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Index ; n); const. inline . Read-only random access. . ◆ operator[]() [3/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Size ; n). inlineprotected . Read/write random access with regular index type, protected to force use of explicit Index. . ◆ operator[]() [4/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Size ; n); const. inlineprotected . Read-only random access with regular index type, protected to force use of explicit Index. . ◆ push_back(). template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . Index sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::push_back ; (; const_reference ; v). inline . sofahelpervector_id; Generated on Mon Nov 11 ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:7599,Security,access,access,7599,"moryManager >::operator() ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator()() [2/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n); const. inline . Read-only random access, with explicit Index. . ◆ operator[]() [1/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator[]() [2/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Index ; n); const. inline . Read-only random access. . ◆ operator[]() [3/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Size ; n). inlineprotected . Read/write random access with regular index type, protected to force use of explicit Index. . ◆ operator[]() [4/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Size ; n); const. inlineprotected . Read-only random access with regular index type, protected to force use of explicit Index. . ◆ push_back(). template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . Index sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::push_back ; (; const_reference ; v). inline . sofahelpervector_id; Generated on Mon Nov 11 2024 03:28:37 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:7955,Security,access,access,7955,"moryManager >::operator() ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator()() [2/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n); const. inline . Read-only random access, with explicit Index. . ◆ operator[]() [1/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator[]() [2/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Index ; n); const. inline . Read-only random access. . ◆ operator[]() [3/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Size ; n). inlineprotected . Read/write random access with regular index type, protected to force use of explicit Index. . ◆ operator[]() [4/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Size ; n); const. inlineprotected . Read-only random access with regular index type, protected to force use of explicit Index. . ◆ push_back(). template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . Index sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::push_back ; (; const_reference ; v). inline . sofahelpervector_id; Generated on Mon Nov 11 2024 03:28:37 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool-members.html:232,Modifiability,inherit,inherited,232,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::visual::DrawTool Member List . This is the complete list of members for sofa::helper::visual::DrawTool, including all inherited members. clear()sofa::helper::visual::DrawToolinlinevirtual; disableBlending()=0sofa::helper::visual::DrawToolpure virtual; disableDepthTest()=0sofa::helper::visual::DrawToolpure virtual; disableLighting()=0sofa::helper::visual::DrawToolpure virtual; disablePolygonOffset()=0sofa::helper::visual::DrawToolpure virtual; draw3DText(const Vec3 &p, float scale, const RGBAColor &color, const char *text)=0sofa::helper::visual::DrawToolpure virtual; draw3DText_Indices(const std::vector< Vec3 > &positions, float scale, const RGBAColor &color)=0sofa::helper::visual::DrawToolpure virtual; drawArrow(const Vec3 &p1, const Vec3 &p2, float radius, const RGBAColor &color, int subd=16)=0sofa::helper::visual::DrawToolpure virtual; drawArrow(const Vec3 &p1, const Vec3 &p2, float radius, float coneLength, const RGBAColor &color, int subd=16)=0sofa::helper::visual::DrawToolpure virtual; drawArrow(const Vec3 &p1, const Vec3 &p2, float radius, float coneLength, float coneRadius, const RGBAColor &color, int subd=16)=0sofa::helper::visual::DrawToolpure virtual; drawBoundingBox(const Vec3 &min, const Vec3 &max, float size=1.0)=0sofa::helper::visual::DrawToolpure virtual; drawCapsule(const Vec3 &p1, const Vec3 &p2, float radius, const RGBAColor &color, int subd=16)=0sofa::helper::visual::DrawToolpure virtual; drawCircle(float radius, float lineThickness, int resolution, const RGBAColor &color)=0sofa::helper::visual::DrawToolpure virtual; drawCone(const Vec3 &p1, const Vec3 &p2, float radius1, float radius2, const RGBAColor &color, int subd=16)=0sofa::helper::visual::DrawToolpure virtual; drawCross(const Vec3 &p, float length, const RGBAColor &color)=0sofa::helper::visual::DrawToolpure virtual; drawCube(const float &radius, const RGBAColor &color, const int ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool-members.html:251,Usability,clear,clear,251,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::visual::DrawTool Member List . This is the complete list of members for sofa::helper::visual::DrawTool, including all inherited members. clear()sofa::helper::visual::DrawToolinlinevirtual; disableBlending()=0sofa::helper::visual::DrawToolpure virtual; disableDepthTest()=0sofa::helper::visual::DrawToolpure virtual; disableLighting()=0sofa::helper::visual::DrawToolpure virtual; disablePolygonOffset()=0sofa::helper::visual::DrawToolpure virtual; draw3DText(const Vec3 &p, float scale, const RGBAColor &color, const char *text)=0sofa::helper::visual::DrawToolpure virtual; draw3DText_Indices(const std::vector< Vec3 > &positions, float scale, const RGBAColor &color)=0sofa::helper::visual::DrawToolpure virtual; drawArrow(const Vec3 &p1, const Vec3 &p2, float radius, const RGBAColor &color, int subd=16)=0sofa::helper::visual::DrawToolpure virtual; drawArrow(const Vec3 &p1, const Vec3 &p2, float radius, float coneLength, const RGBAColor &color, int subd=16)=0sofa::helper::visual::DrawToolpure virtual; drawArrow(const Vec3 &p1, const Vec3 &p2, float radius, float coneLength, float coneRadius, const RGBAColor &color, int subd=16)=0sofa::helper::visual::DrawToolpure virtual; drawBoundingBox(const Vec3 &min, const Vec3 &max, float size=1.0)=0sofa::helper::visual::DrawToolpure virtual; drawCapsule(const Vec3 &p1, const Vec3 &p2, float radius, const RGBAColor &color, int subd=16)=0sofa::helper::visual::DrawToolpure virtual; drawCircle(float radius, float lineThickness, int resolution, const RGBAColor &color)=0sofa::helper::visual::DrawToolpure virtual; drawCone(const Vec3 &p1, const Vec3 &p2, float radius1, float radius2, const RGBAColor &color, int subd=16)=0sofa::helper::visual::DrawToolpure virtual; drawCross(const Vec3 &p, float length, const RGBAColor &color)=0sofa::helper::visual::DrawToolpure virtual; drawCube(const float &radius, const RGBAColor &color, const int ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html:316,Modifiability,Inherit,Inheritance,316,"﻿. SOFA API: sofa::helper::visual::DrawTool Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::visual::DrawTool Struct Referenceabstract . #include <DrawTool.h>; Utility class to perform debug drawing. ; More... Inheritance diagram for sofa::helper::visual::DrawTool:. [legend]; Detailed Description; Utility class to perform debug drawing. ; Class which contains a set of methods to perform minimal debug drawing regardless of the graphics API used. Components receive a pointer to the DrawTool through the VisualParams parameter of their draw method. Sofa provides a default concrete implementation of this class for the OpenGL API with the DrawToolGL class. k . Public Member Functions;  DrawTool ();  ; virtual ~DrawTool ();  ; virtual void init ()=0;  ; virtual void enableBlending ()=0;  ; virtual void disableBlending ()=0;  ; virtual void enableLighting ()=0;  ; virtual void disableLighting ()=0;  ; virtual void enableDepthTest ()=0;  ; virtual void disableDepthTest ()=0;  ; virtual void clear ();  ;  StateLifeCycle ()=delete;  ;  StateLifeCycle (const StateLifeCycle &)=delete;  ;  StateLifeCycle (DrawTool *drawTool);  ;  ~StateLifeCycle ();  ; Primitive rendering methods; virtual void drawPoints (const std::vector< Vec3 > &points, float size, const RGBAColor &color)=0;  ; virtual void drawPoints (const std::vector< Vec3 > &points, float size, const std::vector< RGBAColor > &color)=0;  ; virtual void drawLine (const Vec3 &p1, const Vec3 &p2, const RGBAColor &color)=0;  ; virtual void drawInfiniteLine (const Vec3 &point, const Vec3 &direction, const RGBAColor &color)=0;  ; virtual void drawLines (const std::vector< Vec3 > &points, float size, const RGBAColor &color)=0;  ; virtual void drawLines (const std::vector< Vec3 > &points, float size, const std::vector< RGBAColor > &colors)=0;  ; virtual void drawLines (const std::vector< Vec3 > &points, const std::vector< Vec2i ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html:9390,Modifiability,variab,variable,9390," draw3DText_Indices (const std::vector< Vec3 > &positions, float scale, const RGBAColor &color)=0;  ; Transformation methods.; virtual void pushMatrix ()=0;  ; virtual void popMatrix ()=0;  ; virtual void multMatrix (float *)=0;  ; virtual void scale (float)=0;  ; virtual void translate (float x, float y, float z)=0;  ; Drawing style methods.; virtual void setMaterial (const RGBAColor &color)=0;  ; virtual void resetMaterial (const RGBAColor &color)=0;  ; virtual void resetMaterial ()=0;  ; virtual void setPolygonMode (int _mode, bool _wireframe)=0;  ; virtual void setLightingEnabled (bool _isAnabled)=0;  ; States (save/restore); virtual void saveLastState ()=0;  ; virtual void restoreLastState ()=0;  ; StateLifeCycle makeStateLifeCycle ();  ; Overlay methods; virtual void writeOverlayText (int x, int y, unsigned fontSize, const RGBAColor &color, const char *text)=0;  draw 2D text at position (x,y) from top-left corner More...;  ; virtual void enablePolygonOffset (float factor, float units)=0;  Allow a variable depth offset for polygon drawing. More...;  ; virtual void disablePolygonOffset ()=0;  Remove variable depth offset for polygon drawing. More...;  ; virtual void readPixels (int x, int y, int w, int h, float *rgb, float *z=nullptr)=0;  . Constructor details. ◆ DrawTool(). sofa::helper::visual::DrawTool::DrawTool ; (; ). inline . ◆ ~DrawTool(). virtual sofa::helper::visual::DrawTool::~DrawTool ; (; ). inlinevirtual . ◆ ~StateLifeCycle(). sofa::helper::visual::DrawTool::~StateLifeCycle ; (; ). Function details. ◆ clear(). virtual void sofa::helper::visual::DrawTool::clear ; (; ). inlinevirtual . Reimplemented in sofa::gl::DrawToolGL. ◆ disableBlending(). virtual void sofa::helper::visual::DrawTool::disableBlending ; (; ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ disableDepthTest(). virtual void sofa::helper::visual::DrawTool::disableDepthTest ; (; ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ disableLighting(). virtual void sofa::helper:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html:9493,Modifiability,variab,variable,9493,"n methods.; virtual void pushMatrix ()=0;  ; virtual void popMatrix ()=0;  ; virtual void multMatrix (float *)=0;  ; virtual void scale (float)=0;  ; virtual void translate (float x, float y, float z)=0;  ; Drawing style methods.; virtual void setMaterial (const RGBAColor &color)=0;  ; virtual void resetMaterial (const RGBAColor &color)=0;  ; virtual void resetMaterial ()=0;  ; virtual void setPolygonMode (int _mode, bool _wireframe)=0;  ; virtual void setLightingEnabled (bool _isAnabled)=0;  ; States (save/restore); virtual void saveLastState ()=0;  ; virtual void restoreLastState ()=0;  ; StateLifeCycle makeStateLifeCycle ();  ; Overlay methods; virtual void writeOverlayText (int x, int y, unsigned fontSize, const RGBAColor &color, const char *text)=0;  draw 2D text at position (x,y) from top-left corner More...;  ; virtual void enablePolygonOffset (float factor, float units)=0;  Allow a variable depth offset for polygon drawing. More...;  ; virtual void disablePolygonOffset ()=0;  Remove variable depth offset for polygon drawing. More...;  ; virtual void readPixels (int x, int y, int w, int h, float *rgb, float *z=nullptr)=0;  . Constructor details. ◆ DrawTool(). sofa::helper::visual::DrawTool::DrawTool ; (; ). inline . ◆ ~DrawTool(). virtual sofa::helper::visual::DrawTool::~DrawTool ; (; ). inlinevirtual . ◆ ~StateLifeCycle(). sofa::helper::visual::DrawTool::~StateLifeCycle ; (; ). Function details. ◆ clear(). virtual void sofa::helper::visual::DrawTool::clear ; (; ). inlinevirtual . Reimplemented in sofa::gl::DrawToolGL. ◆ disableBlending(). virtual void sofa::helper::visual::DrawTool::disableBlending ; (; ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ disableDepthTest(). virtual void sofa::helper::visual::DrawTool::disableDepthTest ; (; ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ disableLighting(). virtual void sofa::helper::visual::DrawTool::disableLighting ; (; ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ disablePolygonOffse",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html:10589,Modifiability,variab,variable,10589," *rgb, float *z=nullptr)=0;  . Constructor details. ◆ DrawTool(). sofa::helper::visual::DrawTool::DrawTool ; (; ). inline . ◆ ~DrawTool(). virtual sofa::helper::visual::DrawTool::~DrawTool ; (; ). inlinevirtual . ◆ ~StateLifeCycle(). sofa::helper::visual::DrawTool::~StateLifeCycle ; (; ). Function details. ◆ clear(). virtual void sofa::helper::visual::DrawTool::clear ; (; ). inlinevirtual . Reimplemented in sofa::gl::DrawToolGL. ◆ disableBlending(). virtual void sofa::helper::visual::DrawTool::disableBlending ; (; ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ disableDepthTest(). virtual void sofa::helper::visual::DrawTool::disableDepthTest ; (; ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ disableLighting(). virtual void sofa::helper::visual::DrawTool::disableLighting ; (; ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ disablePolygonOffset(). virtual void sofa::helper::visual::DrawTool::disablePolygonOffset ; (; ). pure virtual . Remove variable depth offset for polygon drawing. ; Implemented in sofa::gl::DrawToolGL. ◆ draw3DText(). virtual void sofa::helper::visual::DrawTool::draw3DText ; (; const Vec3 & ; p, . float ; scale, . const RGBAColor & ; color, . const char * ; text . ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ draw3DText_Indices(). virtual void sofa::helper::visual::DrawTool::draw3DText_Indices ; (; const std::vector< Vec3 > & ; positions, . float ; scale, . const RGBAColor & ; color . ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ drawArrow() [1/3]. virtual void sofa::helper::visual::DrawTool::drawArrow ; (; const Vec3 & ; p1, . const Vec3 & ; p2, . float ; radius, . const RGBAColor & ; color, . int ; subd = 16 . ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ drawArrow() [2/3]. virtual void sofa::helper::visual::DrawTool::drawArrow ; (; const Vec3 & ; p1, . const Vec3 & ; p2, . float ; radius, . float ; coneLength, . const RGBAColor & ; color, . int ; subd = 16 . ). pure virtual . Implemen",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html:25762,Modifiability,variab,variable,25762,"; (; const std::vector< Vec3 > & ; points, . const Vec3 & ; normal, . const RGBAColor & ; color . ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ drawTriangleStrip(). virtual void sofa::helper::visual::DrawTool::drawTriangleStrip ; (; const std::vector< Vec3 > & ; points, . const std::vector< Vec3 > & ; normal, . const RGBAColor & ; color . ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ enableBlending(). virtual void sofa::helper::visual::DrawTool::enableBlending ; (; ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ enableDepthTest(). virtual void sofa::helper::visual::DrawTool::enableDepthTest ; (; ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ enableLighting(). virtual void sofa::helper::visual::DrawTool::enableLighting ; (; ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ enablePolygonOffset(). virtual void sofa::helper::visual::DrawTool::enablePolygonOffset ; (; float ; factor, . float ; units . ). pure virtual . Allow a variable depth offset for polygon drawing. ; Implemented in sofa::gl::DrawToolGL. ◆ init(). virtual void sofa::helper::visual::DrawTool::init ; (; ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ makeStateLifeCycle(). DrawTool::StateLifeCycle sofa::helper::visual::DrawTool::makeStateLifeCycle ; (; ). Use RAII to bind state save and restore to the returned object: saveLastState is called at object creation, and restoreLastState is called when the object is destroyed. . ◆ multMatrix(). virtual void sofa::helper::visual::DrawTool::multMatrix ; (; float * ; ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ popMatrix(). virtual void sofa::helper::visual::DrawTool::popMatrix ; (; ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ pushMatrix(). virtual void sofa::helper::visual::DrawTool::pushMatrix ; (; ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ readPixels(). virtual void sofa::helper::visual::DrawTool::readPixels ; (; int ; x, . int ; y, . int ; w, . int ; h, . float * ; r",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html:283,Performance,perform,perform,283,"﻿. SOFA API: sofa::helper::visual::DrawTool Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::visual::DrawTool Struct Referenceabstract . #include <DrawTool.h>; Utility class to perform debug drawing. ; More... Inheritance diagram for sofa::helper::visual::DrawTool:. [legend]; Detailed Description; Utility class to perform debug drawing. ; Class which contains a set of methods to perform minimal debug drawing regardless of the graphics API used. Components receive a pointer to the DrawTool through the VisualParams parameter of their draw method. Sofa provides a default concrete implementation of this class for the OpenGL API with the DrawToolGL class. k . Public Member Functions;  DrawTool ();  ; virtual ~DrawTool ();  ; virtual void init ()=0;  ; virtual void enableBlending ()=0;  ; virtual void disableBlending ()=0;  ; virtual void enableLighting ()=0;  ; virtual void disableLighting ()=0;  ; virtual void enableDepthTest ()=0;  ; virtual void disableDepthTest ()=0;  ; virtual void clear ();  ;  StateLifeCycle ()=delete;  ;  StateLifeCycle (const StateLifeCycle &)=delete;  ;  StateLifeCycle (DrawTool *drawTool);  ;  ~StateLifeCycle ();  ; Primitive rendering methods; virtual void drawPoints (const std::vector< Vec3 > &points, float size, const RGBAColor &color)=0;  ; virtual void drawPoints (const std::vector< Vec3 > &points, float size, const std::vector< RGBAColor > &color)=0;  ; virtual void drawLine (const Vec3 &p1, const Vec3 &p2, const RGBAColor &color)=0;  ; virtual void drawInfiniteLine (const Vec3 &point, const Vec3 &direction, const RGBAColor &color)=0;  ; virtual void drawLines (const std::vector< Vec3 > &points, float size, const RGBAColor &color)=0;  ; virtual void drawLines (const std::vector< Vec3 > &points, float size, const std::vector< RGBAColor > &colors)=0;  ; virtual void drawLines (const std::vector< Vec3 > &points, const std::vector< Vec2i ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html:422,Performance,perform,perform,422,"﻿. SOFA API: sofa::helper::visual::DrawTool Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::visual::DrawTool Struct Referenceabstract . #include <DrawTool.h>; Utility class to perform debug drawing. ; More... Inheritance diagram for sofa::helper::visual::DrawTool:. [legend]; Detailed Description; Utility class to perform debug drawing. ; Class which contains a set of methods to perform minimal debug drawing regardless of the graphics API used. Components receive a pointer to the DrawTool through the VisualParams parameter of their draw method. Sofa provides a default concrete implementation of this class for the OpenGL API with the DrawToolGL class. k . Public Member Functions;  DrawTool ();  ; virtual ~DrawTool ();  ; virtual void init ()=0;  ; virtual void enableBlending ()=0;  ; virtual void disableBlending ()=0;  ; virtual void enableLighting ()=0;  ; virtual void disableLighting ()=0;  ; virtual void enableDepthTest ()=0;  ; virtual void disableDepthTest ()=0;  ; virtual void clear ();  ;  StateLifeCycle ()=delete;  ;  StateLifeCycle (const StateLifeCycle &)=delete;  ;  StateLifeCycle (DrawTool *drawTool);  ;  ~StateLifeCycle ();  ; Primitive rendering methods; virtual void drawPoints (const std::vector< Vec3 > &points, float size, const RGBAColor &color)=0;  ; virtual void drawPoints (const std::vector< Vec3 > &points, float size, const std::vector< RGBAColor > &color)=0;  ; virtual void drawLine (const Vec3 &p1, const Vec3 &p2, const RGBAColor &color)=0;  ; virtual void drawInfiniteLine (const Vec3 &point, const Vec3 &direction, const RGBAColor &color)=0;  ; virtual void drawLines (const std::vector< Vec3 > &points, float size, const RGBAColor &color)=0;  ; virtual void drawLines (const std::vector< Vec3 > &points, float size, const std::vector< RGBAColor > &colors)=0;  ; virtual void drawLines (const std::vector< Vec3 > &points, const std::vector< Vec2i ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html:488,Performance,perform,perform,488,"﻿. SOFA API: sofa::helper::visual::DrawTool Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::visual::DrawTool Struct Referenceabstract . #include <DrawTool.h>; Utility class to perform debug drawing. ; More... Inheritance diagram for sofa::helper::visual::DrawTool:. [legend]; Detailed Description; Utility class to perform debug drawing. ; Class which contains a set of methods to perform minimal debug drawing regardless of the graphics API used. Components receive a pointer to the DrawTool through the VisualParams parameter of their draw method. Sofa provides a default concrete implementation of this class for the OpenGL API with the DrawToolGL class. k . Public Member Functions;  DrawTool ();  ; virtual ~DrawTool ();  ; virtual void init ()=0;  ; virtual void enableBlending ()=0;  ; virtual void disableBlending ()=0;  ; virtual void enableLighting ()=0;  ; virtual void disableLighting ()=0;  ; virtual void enableDepthTest ()=0;  ; virtual void disableDepthTest ()=0;  ; virtual void clear ();  ;  StateLifeCycle ()=delete;  ;  StateLifeCycle (const StateLifeCycle &)=delete;  ;  StateLifeCycle (DrawTool *drawTool);  ;  ~StateLifeCycle ();  ; Primitive rendering methods; virtual void drawPoints (const std::vector< Vec3 > &points, float size, const RGBAColor &color)=0;  ; virtual void drawPoints (const std::vector< Vec3 > &points, float size, const std::vector< RGBAColor > &color)=0;  ; virtual void drawLine (const Vec3 &p1, const Vec3 &p2, const RGBAColor &color)=0;  ; virtual void drawInfiniteLine (const Vec3 &point, const Vec3 &direction, const RGBAColor &color)=0;  ; virtual void drawLines (const std::vector< Vec3 > &points, float size, const RGBAColor &color)=0;  ; virtual void drawLines (const std::vector< Vec3 > &points, float size, const std::vector< RGBAColor > &colors)=0;  ; virtual void drawLines (const std::vector< Vec3 > &points, const std::vector< Vec2i ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html:1103,Usability,clear,clear,1103," Public Member Functions;  DrawTool ();  ; virtual ~DrawTool ();  ; virtual void init ()=0;  ; virtual void enableBlending ()=0;  ; virtual void disableBlending ()=0;  ; virtual void enableLighting ()=0;  ; virtual void disableLighting ()=0;  ; virtual void enableDepthTest ()=0;  ; virtual void disableDepthTest ()=0;  ; virtual void clear ();  ;  StateLifeCycle ()=delete;  ;  StateLifeCycle (const StateLifeCycle &)=delete;  ;  StateLifeCycle (DrawTool *drawTool);  ;  ~StateLifeCycle ();  ; Primitive rendering methods; virtual void drawPoints (const std::vector< Vec3 > &points, float size, const RGBAColor &color)=0;  ; virtual void drawPoints (const std::vector< Vec3 > &points, float size, const std::vector< RGBAColor > &color)=0;  ; virtual void drawLine (const Vec3 &p1, const Vec3 &p2, const RGBAColor &color)=0;  ; virtual void drawInfiniteLine (const Vec3 &point, const Vec3 &direction, const RGBAColor &color)=0;  ; virtual void drawLines (const std::vector< Vec3 > &points, float size, const RGBAColor &color)=0;  ; virtual void drawLines (const std::vector< Vec3 > &points, float size, const std::vector< RGBAColor > &colors)=0;  ; virtual void drawLines (const std::vector< Vec3 > &points, const std::vector< Vec2i ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html:9916,Usability,clear,clear,9916,"frame)=0;  ; virtual void setLightingEnabled (bool _isAnabled)=0;  ; States (save/restore); virtual void saveLastState ()=0;  ; virtual void restoreLastState ()=0;  ; StateLifeCycle makeStateLifeCycle ();  ; Overlay methods; virtual void writeOverlayText (int x, int y, unsigned fontSize, const RGBAColor &color, const char *text)=0;  draw 2D text at position (x,y) from top-left corner More...;  ; virtual void enablePolygonOffset (float factor, float units)=0;  Allow a variable depth offset for polygon drawing. More...;  ; virtual void disablePolygonOffset ()=0;  Remove variable depth offset for polygon drawing. More...;  ; virtual void readPixels (int x, int y, int w, int h, float *rgb, float *z=nullptr)=0;  . Constructor details. ◆ DrawTool(). sofa::helper::visual::DrawTool::DrawTool ; (; ). inline . ◆ ~DrawTool(). virtual sofa::helper::visual::DrawTool::~DrawTool ; (; ). inlinevirtual . ◆ ~StateLifeCycle(). sofa::helper::visual::DrawTool::~StateLifeCycle ; (; ). Function details. ◆ clear(). virtual void sofa::helper::visual::DrawTool::clear ; (; ). inlinevirtual . Reimplemented in sofa::gl::DrawToolGL. ◆ disableBlending(). virtual void sofa::helper::visual::DrawTool::disableBlending ; (; ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ disableDepthTest(). virtual void sofa::helper::visual::DrawTool::disableDepthTest ; (; ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ disableLighting(). virtual void sofa::helper::visual::DrawTool::disableLighting ; (; ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ disablePolygonOffset(). virtual void sofa::helper::visual::DrawTool::disablePolygonOffset ; (; ). pure virtual . Remove variable depth offset for polygon drawing. ; Implemented in sofa::gl::DrawToolGL. ◆ draw3DText(). virtual void sofa::helper::visual::DrawTool::draw3DText ; (; const Vec3 & ; p, . float ; scale, . const RGBAColor & ; color, . const char * ; text . ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ draw3DText_Indices(). virt",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html:9970,Usability,clear,clear,9970,"ngEnabled (bool _isAnabled)=0;  ; States (save/restore); virtual void saveLastState ()=0;  ; virtual void restoreLastState ()=0;  ; StateLifeCycle makeStateLifeCycle ();  ; Overlay methods; virtual void writeOverlayText (int x, int y, unsigned fontSize, const RGBAColor &color, const char *text)=0;  draw 2D text at position (x,y) from top-left corner More...;  ; virtual void enablePolygonOffset (float factor, float units)=0;  Allow a variable depth offset for polygon drawing. More...;  ; virtual void disablePolygonOffset ()=0;  Remove variable depth offset for polygon drawing. More...;  ; virtual void readPixels (int x, int y, int w, int h, float *rgb, float *z=nullptr)=0;  . Constructor details. ◆ DrawTool(). sofa::helper::visual::DrawTool::DrawTool ; (; ). inline . ◆ ~DrawTool(). virtual sofa::helper::visual::DrawTool::~DrawTool ; (; ). inlinevirtual . ◆ ~StateLifeCycle(). sofa::helper::visual::DrawTool::~StateLifeCycle ; (; ). Function details. ◆ clear(). virtual void sofa::helper::visual::DrawTool::clear ; (; ). inlinevirtual . Reimplemented in sofa::gl::DrawToolGL. ◆ disableBlending(). virtual void sofa::helper::visual::DrawTool::disableBlending ; (; ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ disableDepthTest(). virtual void sofa::helper::visual::DrawTool::disableDepthTest ; (; ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ disableLighting(). virtual void sofa::helper::visual::DrawTool::disableLighting ; (; ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ disablePolygonOffset(). virtual void sofa::helper::visual::DrawTool::disablePolygonOffset ; (; ). pure virtual . Remove variable depth offset for polygon drawing. ; Implemented in sofa::gl::DrawToolGL. ◆ draw3DText(). virtual void sofa::helper::visual::DrawTool::draw3DText ; (; const Vec3 & ; p, . float ; scale, . const RGBAColor & ; color, . const char * ; text . ). pure virtual . Implemented in sofa::gl::DrawToolGL. ◆ draw3DText_Indices(). virtual void sofa::helper::visual::Draw",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_draw_tool.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_trackball-members.html:234,Modifiability,inherit,inherited,234,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::visual::Trackball Member List . This is the complete list of members for sofa::helper::visual::Trackball, including all inherited members. AxisToQuat(double a[3], double phi, double q[4])sofa::helper::visual::Trackball; ComputeQuaternion(double p1x, double p1y, double p2x, double p2y)sofa::helper::visual::Trackball; GetQuaternion(void)sofa::helper::visual::Trackball; SetQuaternion(sofa::type::Quat< SReal > Q)sofa::helper::visual::Trackball; Trackball()sofa::helper::visual::Trackball; ~Trackball()sofa::helper::visual::Trackball. Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_trackball-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_trackball-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_transformation-members.html:244,Modifiability,inherit,inherited,244,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::visual::Transformation Member List . This is the complete list of members for sofa::helper::visual::Transformation, including all inherited members. Apply()sofa::helper::visual::Transformationinlinevirtual; ApplyInverse()sofa::helper::visual::Transformationinlinevirtual; ApplyWithCentring()sofa::helper::visual::Transformationinlinevirtual; InvertTransRotMatrix(SReal matrix[4][4])sofa::helper::visual::Transformationprotected; InvertTransRotMatrix(SReal sMatrix[4][4], SReal dMatrix[4][4])sofa::helper::visual::Transformationprotected; objectCentersofa::helper::visual::Transformation; operator*(Vector v) constsofa::helper::visual::Transformationinline; operator=(const Transformation &transform)sofa::helper::visual::Transformation; rotationsofa::helper::visual::Transformation; scalesofa::helper::visual::Transformation; Transformation()sofa::helper::visual::Transformation; Transformation(const Transformation &other)sofa::helper::visual::Transformation; translationsofa::helper::visual::Transformation; ~Transformation()sofa::helper::visual::Transformationvirtual. Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_transformation-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_transformation-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_transformation.html:325,Modifiability,Inherit,Inheritance,325,"﻿. SOFA API: sofa::helper::visual::Transformation Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::visual::Transformation Class Reference . #include <Transformation.h>. Inheritance diagram for sofa::helper::visual::Transformation:. [legend]. Public Attributes; SReal translation [3];  ; SReal scale [3];  ; SReal rotation [4][4];  ; SReal objectCenter [3];  . Public Member Functions;  Transformation ();  ; virtual ~Transformation ();  ;  Transformation (const Transformation &other);  ; Transformation & operator= (const Transformation &transform);  ; virtual void Apply ();  ; virtual void ApplyWithCentring ();  ; virtual void ApplyInverse ();  ; template<class Vector > ; Vector operator* (Vector v) const;  . Protected Member Functions; void InvertTransRotMatrix (SReal matrix[4][4]);  ; void InvertTransRotMatrix (SReal sMatrix[4][4], SReal dMatrix[4][4]);  . Attribute details. ◆ objectCenter. SReal sofa::helper::visual::Transformation::objectCenter[3]. ◆ rotation. SReal sofa::helper::visual::Transformation::rotation[4][4]. ◆ scale. SReal sofa::helper::visual::Transformation::scale[3]. ◆ translation. SReal sofa::helper::visual::Transformation::translation[3]. Constructor details. ◆ Transformation() [1/2]. sofa::helper::visual::Transformation::Transformation ; (; ). ◆ ~Transformation(). sofa::helper::visual::Transformation::~Transformation ; (; ). virtual . ◆ Transformation() [2/2]. sofa::helper::visual::Transformation::Transformation ; (; const Transformation & ; other). Function details. ◆ Apply(). virtual void sofa::helper::visual::Transformation::Apply ; (; ). inlinevirtual . Reimplemented in sofa::gl::TransformationGL. ◆ ApplyInverse(). virtual void sofa::helper::visual::Transformation::ApplyInverse ; (; ). inlinevirtual . Reimplemented in sofa::gl::TransformationGL. ◆ ApplyWithCentring(). virtual void sofa::helper",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_transformation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1visual_1_1_transformation.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer-members.html:226,Modifiability,inherit,inherited,226,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::AdvancedTimer Member List . This is the complete list of members for sofa::helper::AdvancedTimer, including all inherited members. begin(IdTimer id)sofa::helper::AdvancedTimerstatic; begin(const char *idStr)sofa::helper::AdvancedTimerstatic; clear()sofa::helper::AdvancedTimerstatic; clearData(IdTimer id)sofa::helper::AdvancedTimerstatic; convertOutputType(std::string type)sofa::helper::AdvancedTimerstatic; end(IdTimer id)sofa::helper::AdvancedTimerstatic; end(IdTimer id, std::ostream &result)sofa::helper::AdvancedTimerstatic; end(IdTimer id, double time, double dt)sofa::helper::AdvancedTimerstatic; end(const char *idStr)sofa::helper::AdvancedTimerstatic; getInterval(IdTimer id)sofa::helper::AdvancedTimerstatic; getOutputType(IdTimer id)sofa::helper::AdvancedTimerstatic; getRecords(IdTimer id)sofa::helper::AdvancedTimerstatic; getStepData(IdTimer id, bool processData=false)sofa::helper::AdvancedTimerstatic; getSteps(IdTimer id, bool processData=false)sofa::helper::AdvancedTimerstatic; getTimeAnalysis(IdTimer id, double time, double dt)sofa::helper::AdvancedTimerstatic; GUI enum valuesofa::helper::AdvancedTimer; IdObj typedefsofa::helper::AdvancedTimer; IdStep typedefsofa::helper::AdvancedTimer; IdTimer typedefsofa::helper::AdvancedTimer; IdVal typedefsofa::helper::AdvancedTimer; isActive()sofa::helper::AdvancedTimerstatic; isEnabled(IdTimer id)sofa::helper::AdvancedTimerstatic; JSON enum valuesofa::helper::AdvancedTimer; LJSON enum valuesofa::helper::AdvancedTimer; outputType enum namesofa::helper::AdvancedTimer; setEnabled(IdTimer id, bool val)sofa::helper::AdvancedTimerstatic; setInterval(IdTimer id, int val)sofa::helper::AdvancedTimerstatic; setOutputType(IdTimer id, const std::string &type)sofa::helper::AdvancedTimerstatic; setSyncCallBack(SyncCallBack cb, void *userData=nullptr)sofa::helper::AdvancedTimerstatic; STDOUT enum valuesofa::helper::Advanced",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer-members.html:356,Usability,clear,clear,356," begin(IdTimer id)sofa::helper::AdvancedTimerstatic; begin(const char *idStr)sofa::helper::AdvancedTimerstatic; clear()sofa::helper::AdvancedTimerstatic; clearData(IdTimer id)sofa::helper::AdvancedTimerstatic; convertOutputType(std::string type)sofa::helper::AdvancedTimerstatic; end(IdTimer id)sofa::helper::AdvancedTimerstatic; end(IdTimer id, std::ostream &result)sofa::helper::AdvancedTimerstatic; end(IdTimer id, double time, double dt)sofa::helper::AdvancedTimerstatic; end(const char *idStr)sofa::helper::AdvancedTimerstatic; getInterval(IdTimer id)sofa::helper::AdvancedTimerstatic; getOutputType(IdTimer id)sofa::helper::AdvancedTimerstatic; getRecords(IdTimer id)sofa::helper::AdvancedTimerstatic; getStepData(IdTimer id, bool processData=false)sofa::helper::AdvancedTimerstatic; getSteps(IdTimer id, bool processData=false)sofa::helper::AdvancedTimerstatic; getTimeAnalysis(IdTimer id, double time, double dt)sofa::helper::AdvancedTimerstatic; GUI enum valuesofa::helper::AdvancedTimer; IdObj typedefsofa::helper::AdvancedTimer; IdStep typedefsofa::helper::AdvancedTimer; IdTimer typedefsofa::helper::AdvancedTimer; IdVal typedefsofa::helper::AdvancedTimer; isActive()sofa::helper::AdvancedTimerstatic; isEnabled(IdTimer id)sofa::helper::AdvancedTimerstatic; JSON enum valuesofa::helper::AdvancedTimer; LJSON enum valuesofa::helper::AdvancedTimer; outputType enum namesofa::helper::AdvancedTimer; setEnabled(IdTimer id, bool val)sofa::helper::AdvancedTimerstatic; setInterval(IdTimer id, int val)sofa::helper::AdvancedTimerstatic; setOutputType(IdTimer id, const std::string &type)sofa::helper::AdvancedTimerstatic; setSyncCallBack(SyncCallBack cb, void *userData=nullptr)sofa::helper::AdvancedTimerstatic; STDOUT enum valuesofa::helper::Advanced",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer-members.html:398,Usability,clear,clearData,398," begin(IdTimer id)sofa::helper::AdvancedTimerstatic; begin(const char *idStr)sofa::helper::AdvancedTimerstatic; clear()sofa::helper::AdvancedTimerstatic; clearData(IdTimer id)sofa::helper::AdvancedTimerstatic; convertOutputType(std::string type)sofa::helper::AdvancedTimerstatic; end(IdTimer id)sofa::helper::AdvancedTimerstatic; end(IdTimer id, std::ostream &result)sofa::helper::AdvancedTimerstatic; end(IdTimer id, double time, double dt)sofa::helper::AdvancedTimerstatic; end(const char *idStr)sofa::helper::AdvancedTimerstatic; getInterval(IdTimer id)sofa::helper::AdvancedTimerstatic; getOutputType(IdTimer id)sofa::helper::AdvancedTimerstatic; getRecords(IdTimer id)sofa::helper::AdvancedTimerstatic; getStepData(IdTimer id, bool processData=false)sofa::helper::AdvancedTimerstatic; getSteps(IdTimer id, bool processData=false)sofa::helper::AdvancedTimerstatic; getTimeAnalysis(IdTimer id, double time, double dt)sofa::helper::AdvancedTimerstatic; GUI enum valuesofa::helper::AdvancedTimer; IdObj typedefsofa::helper::AdvancedTimer; IdStep typedefsofa::helper::AdvancedTimer; IdTimer typedefsofa::helper::AdvancedTimer; IdVal typedefsofa::helper::AdvancedTimer; isActive()sofa::helper::AdvancedTimerstatic; isEnabled(IdTimer id)sofa::helper::AdvancedTimerstatic; JSON enum valuesofa::helper::AdvancedTimer; LJSON enum valuesofa::helper::AdvancedTimer; outputType enum namesofa::helper::AdvancedTimer; setEnabled(IdTimer id, bool val)sofa::helper::AdvancedTimerstatic; setInterval(IdTimer id, int val)sofa::helper::AdvancedTimerstatic; setOutputType(IdTimer id, const std::string &type)sofa::helper::AdvancedTimerstatic; setSyncCallBack(SyncCallBack cb, void *userData=nullptr)sofa::helper::AdvancedTimerstatic; STDOUT enum valuesofa::helper::Advanced",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html:1686,Usability,clear,clearData,1686,"ing to the output type More...;  ; static void setOutputType (IdTimer id, const std::string &type);  setOutputType Set the outputType for the given AdvancedTimer. More...;  ; static AdvancedTimer::outputType getOutputType (IdTimer id);  getOutputType Get the outputType for the given AdvancedTimer. More...;  ; static std::string getTimeAnalysis (IdTimer id, double time, double dt);  getTimeAnalysis Return the result of the AdvancedTimer More...;  ; static type::vector< AdvancedTimer::IdStep > getSteps (IdTimer id, bool processData=false);  getSteps Return the vector of IDStep of the AdvancedTimer given execution More...;  ; static std::map< AdvancedTimer::IdStep, StepData > getStepData (IdTimer id, bool processData=false);  getStepData Return the map of StepData of the AdvancedTimer given execution More...;  ; static type::vector< Record > getRecords (IdTimer id);  getRecords the vector of Record of the AdvancedTimer given execution id. More...;  ; static void clearData (IdTimer id);  clearDatato clear a specific Timer Data More...;  ; static void clear ();  ; static void begin (IdTimer id);  ; static void end (IdTimer id);  ; static void end (IdTimer id, std::ostream &result);  ; static std::string end (IdTimer id, double time, double dt);  end Override fo the end method in which you can use JSON or old format More...;  ; static bool isActive ();  ; static void stepBegin (IdStep id);  ; static void stepBegin (IdStep id, IdObj obj);  ; template<class T > ; static void stepBegin (IdStep id, T *obj);  ; static void stepEnd (IdStep id);  ; static void stepEnd (IdStep id, IdObj obj);  ; template<class T > ; static void stepEnd (IdStep id, T *obj);  ; static void stepNext (IdStep prevId, IdStep nextId);  ; static void step (IdStep id);  ; static void step (IdStep id, IdObj obj);  ; template<class T > ; static void step (IdStep id, T *obj);  ; static void begin (const char *idStr);  ; static void end (const char *idStr);  ; static void stepBegin (const char *idStr);  ; stat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html:1711,Usability,clear,clearDatato,1711,"ing to the output type More...;  ; static void setOutputType (IdTimer id, const std::string &type);  setOutputType Set the outputType for the given AdvancedTimer. More...;  ; static AdvancedTimer::outputType getOutputType (IdTimer id);  getOutputType Get the outputType for the given AdvancedTimer. More...;  ; static std::string getTimeAnalysis (IdTimer id, double time, double dt);  getTimeAnalysis Return the result of the AdvancedTimer More...;  ; static type::vector< AdvancedTimer::IdStep > getSteps (IdTimer id, bool processData=false);  getSteps Return the vector of IDStep of the AdvancedTimer given execution More...;  ; static std::map< AdvancedTimer::IdStep, StepData > getStepData (IdTimer id, bool processData=false);  getStepData Return the map of StepData of the AdvancedTimer given execution More...;  ; static type::vector< Record > getRecords (IdTimer id);  getRecords the vector of Record of the AdvancedTimer given execution id. More...;  ; static void clearData (IdTimer id);  clearDatato clear a specific Timer Data More...;  ; static void clear ();  ; static void begin (IdTimer id);  ; static void end (IdTimer id);  ; static void end (IdTimer id, std::ostream &result);  ; static std::string end (IdTimer id, double time, double dt);  end Override fo the end method in which you can use JSON or old format More...;  ; static bool isActive ();  ; static void stepBegin (IdStep id);  ; static void stepBegin (IdStep id, IdObj obj);  ; template<class T > ; static void stepBegin (IdStep id, T *obj);  ; static void stepEnd (IdStep id);  ; static void stepEnd (IdStep id, IdObj obj);  ; template<class T > ; static void stepEnd (IdStep id, T *obj);  ; static void stepNext (IdStep prevId, IdStep nextId);  ; static void step (IdStep id);  ; static void step (IdStep id, IdObj obj);  ; template<class T > ; static void step (IdStep id, T *obj);  ; static void begin (const char *idStr);  ; static void end (const char *idStr);  ; static void stepBegin (const char *idStr);  ; stat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html:1723,Usability,clear,clear,1723,"ing to the output type More...;  ; static void setOutputType (IdTimer id, const std::string &type);  setOutputType Set the outputType for the given AdvancedTimer. More...;  ; static AdvancedTimer::outputType getOutputType (IdTimer id);  getOutputType Get the outputType for the given AdvancedTimer. More...;  ; static std::string getTimeAnalysis (IdTimer id, double time, double dt);  getTimeAnalysis Return the result of the AdvancedTimer More...;  ; static type::vector< AdvancedTimer::IdStep > getSteps (IdTimer id, bool processData=false);  getSteps Return the vector of IDStep of the AdvancedTimer given execution More...;  ; static std::map< AdvancedTimer::IdStep, StepData > getStepData (IdTimer id, bool processData=false);  getStepData Return the map of StepData of the AdvancedTimer given execution More...;  ; static type::vector< Record > getRecords (IdTimer id);  getRecords the vector of Record of the AdvancedTimer given execution id. More...;  ; static void clearData (IdTimer id);  clearDatato clear a specific Timer Data More...;  ; static void clear ();  ; static void begin (IdTimer id);  ; static void end (IdTimer id);  ; static void end (IdTimer id, std::ostream &result);  ; static std::string end (IdTimer id, double time, double dt);  end Override fo the end method in which you can use JSON or old format More...;  ; static bool isActive ();  ; static void stepBegin (IdStep id);  ; static void stepBegin (IdStep id, IdObj obj);  ; template<class T > ; static void stepBegin (IdStep id, T *obj);  ; static void stepEnd (IdStep id);  ; static void stepEnd (IdStep id, IdObj obj);  ; template<class T > ; static void stepEnd (IdStep id, T *obj);  ; static void stepNext (IdStep prevId, IdStep nextId);  ; static void step (IdStep id);  ; static void step (IdStep id, IdObj obj);  ; template<class T > ; static void step (IdStep id, T *obj);  ; static void begin (const char *idStr);  ; static void end (const char *idStr);  ; static void stepBegin (const char *idStr);  ; stat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html:1775,Usability,clear,clear,1775,"imer::outputType getOutputType (IdTimer id);  getOutputType Get the outputType for the given AdvancedTimer. More...;  ; static std::string getTimeAnalysis (IdTimer id, double time, double dt);  getTimeAnalysis Return the result of the AdvancedTimer More...;  ; static type::vector< AdvancedTimer::IdStep > getSteps (IdTimer id, bool processData=false);  getSteps Return the vector of IDStep of the AdvancedTimer given execution More...;  ; static std::map< AdvancedTimer::IdStep, StepData > getStepData (IdTimer id, bool processData=false);  getStepData Return the map of StepData of the AdvancedTimer given execution More...;  ; static type::vector< Record > getRecords (IdTimer id);  getRecords the vector of Record of the AdvancedTimer given execution id. More...;  ; static void clearData (IdTimer id);  clearDatato clear a specific Timer Data More...;  ; static void clear ();  ; static void begin (IdTimer id);  ; static void end (IdTimer id);  ; static void end (IdTimer id, std::ostream &result);  ; static std::string end (IdTimer id, double time, double dt);  end Override fo the end method in which you can use JSON or old format More...;  ; static bool isActive ();  ; static void stepBegin (IdStep id);  ; static void stepBegin (IdStep id, IdObj obj);  ; template<class T > ; static void stepBegin (IdStep id, T *obj);  ; static void stepEnd (IdStep id);  ; static void stepEnd (IdStep id, IdObj obj);  ; template<class T > ; static void stepEnd (IdStep id, T *obj);  ; static void stepNext (IdStep prevId, IdStep nextId);  ; static void step (IdStep id);  ; static void step (IdStep id, IdObj obj);  ; template<class T > ; static void step (IdStep id, T *obj);  ; static void begin (const char *idStr);  ; static void end (const char *idStr);  ; static void stepBegin (const char *idStr);  ; static void stepBegin (const char *idStr, const char *objStr);  ; static void stepBegin (const char *idStr, const std::string &objStr);  ; template<class T > ; static void stepBegin (const char *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html:3992,Usability,clear,clear,3992,"char *idStr, const char *objStr);  ; static void stepEnd (const char *idStr, const std::string &objStr);  ; template<class T > ; static void stepEnd (const char *idStr, T *obj);  ; static void stepNext (const char *prevIdStr, const char *nextIdStr);  ; static void step (const char *idStr);  ; static void step (const char *idStr, const char *objStr);  ; static void step (const char *idStr, const std::string &objStr);  ; template<class T > ; static void step (const char *idStr, T *obj);  ; static void valSet (IdVal id, double val);  ; static void valAdd (IdVal id, double val);  ; static void valSet (const char *idStr, double val);  ; static void valAdd (const char *idStr, double val);  ; static std::pair< SyncCallBack, void * > setSyncCallBack (SyncCallBack cb, void *userData=nullptr);  . Function details. ◆ begin() [1/2]. void sofa::helper::AdvancedTimer::begin ; (; const char * ; idStr). static . ◆ begin() [2/2]. void sofa::helper::AdvancedTimer::begin ; (; IdTimer ; id). static . ◆ clear(). void sofa::helper::AdvancedTimer::clear ; (; ). static . ◆ clearData(). void sofa::helper::AdvancedTimer::clearData ; (; IdTimer ; id). static . clearDatato clear a specific Timer Data ; Parameters. idIdTimer, id of the timer . ◆ convertOutputType(). AdvancedTimer::outputType sofa::helper::AdvancedTimer::convertOutputType ; (; std::string ; type). static . convertOutputType convert a string to the output type ; Parameters. typestd::string, output type name (example : ""json"") . ReturnsoutputType, output type enum . ◆ end() [1/4]. void sofa::helper::AdvancedTimer::end ; (; const char * ; idStr). static . ◆ end() [2/4]. void sofa::helper::AdvancedTimer::end ; (; IdTimer ; id). static . ◆ end() [3/4]. std::string sofa::helper::AdvancedTimer::end ; (; IdTimer ; id, . double ; time, . double ; dt . ). static . end Override fo the end method in which you can use JSON or old format ; Parameters. idIdTimer, the id of the used timer ; timedouble, current time (from the context) ; timedt, c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html:4035,Usability,clear,clear,4035,"r);  ; static void stepEnd (const char *idStr, const std::string &objStr);  ; template<class T > ; static void stepEnd (const char *idStr, T *obj);  ; static void stepNext (const char *prevIdStr, const char *nextIdStr);  ; static void step (const char *idStr);  ; static void step (const char *idStr, const char *objStr);  ; static void step (const char *idStr, const std::string &objStr);  ; template<class T > ; static void step (const char *idStr, T *obj);  ; static void valSet (IdVal id, double val);  ; static void valAdd (IdVal id, double val);  ; static void valSet (const char *idStr, double val);  ; static void valAdd (const char *idStr, double val);  ; static std::pair< SyncCallBack, void * > setSyncCallBack (SyncCallBack cb, void *userData=nullptr);  . Function details. ◆ begin() [1/2]. void sofa::helper::AdvancedTimer::begin ; (; const char * ; idStr). static . ◆ begin() [2/2]. void sofa::helper::AdvancedTimer::begin ; (; IdTimer ; id). static . ◆ clear(). void sofa::helper::AdvancedTimer::clear ; (; ). static . ◆ clearData(). void sofa::helper::AdvancedTimer::clearData ; (; IdTimer ; id). static . clearDatato clear a specific Timer Data ; Parameters. idIdTimer, id of the timer . ◆ convertOutputType(). AdvancedTimer::outputType sofa::helper::AdvancedTimer::convertOutputType ; (; std::string ; type). static . convertOutputType convert a string to the output type ; Parameters. typestd::string, output type name (example : ""json"") . ReturnsoutputType, output type enum . ◆ end() [1/4]. void sofa::helper::AdvancedTimer::end ; (; const char * ; idStr). static . ◆ end() [2/4]. void sofa::helper::AdvancedTimer::end ; (; IdTimer ; id). static . ◆ end() [3/4]. std::string sofa::helper::AdvancedTimer::end ; (; IdTimer ; id, . double ; time, . double ; dt . ). static . end Override fo the end method in which you can use JSON or old format ; Parameters. idIdTimer, the id of the used timer ; timedouble, current time (from the context) ; timedt, current delta time or dt (from",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html:4060,Usability,clear,clearData,4060,"idStr, const std::string &objStr);  ; template<class T > ; static void stepEnd (const char *idStr, T *obj);  ; static void stepNext (const char *prevIdStr, const char *nextIdStr);  ; static void step (const char *idStr);  ; static void step (const char *idStr, const char *objStr);  ; static void step (const char *idStr, const std::string &objStr);  ; template<class T > ; static void step (const char *idStr, T *obj);  ; static void valSet (IdVal id, double val);  ; static void valAdd (IdVal id, double val);  ; static void valSet (const char *idStr, double val);  ; static void valAdd (const char *idStr, double val);  ; static std::pair< SyncCallBack, void * > setSyncCallBack (SyncCallBack cb, void *userData=nullptr);  . Function details. ◆ begin() [1/2]. void sofa::helper::AdvancedTimer::begin ; (; const char * ; idStr). static . ◆ begin() [2/2]. void sofa::helper::AdvancedTimer::begin ; (; IdTimer ; id). static . ◆ clear(). void sofa::helper::AdvancedTimer::clear ; (; ). static . ◆ clearData(). void sofa::helper::AdvancedTimer::clearData ; (; IdTimer ; id). static . clearDatato clear a specific Timer Data ; Parameters. idIdTimer, id of the timer . ◆ convertOutputType(). AdvancedTimer::outputType sofa::helper::AdvancedTimer::convertOutputType ; (; std::string ; type). static . convertOutputType convert a string to the output type ; Parameters. typestd::string, output type name (example : ""json"") . ReturnsoutputType, output type enum . ◆ end() [1/4]. void sofa::helper::AdvancedTimer::end ; (; const char * ; idStr). static . ◆ end() [2/4]. void sofa::helper::AdvancedTimer::end ; (; IdTimer ; id). static . ◆ end() [3/4]. std::string sofa::helper::AdvancedTimer::end ; (; IdTimer ; id, . double ; time, . double ; dt . ). static . end Override fo the end method in which you can use JSON or old format ; Parameters. idIdTimer, the id of the used timer ; timedouble, current time (from the context) ; timedt, current delta time or dt (from the context) . Returnsstd::string, the o",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html:4107,Usability,clear,clearData,4107,"mplate<class T > ; static void stepEnd (const char *idStr, T *obj);  ; static void stepNext (const char *prevIdStr, const char *nextIdStr);  ; static void step (const char *idStr);  ; static void step (const char *idStr, const char *objStr);  ; static void step (const char *idStr, const std::string &objStr);  ; template<class T > ; static void step (const char *idStr, T *obj);  ; static void valSet (IdVal id, double val);  ; static void valAdd (IdVal id, double val);  ; static void valSet (const char *idStr, double val);  ; static void valAdd (const char *idStr, double val);  ; static std::pair< SyncCallBack, void * > setSyncCallBack (SyncCallBack cb, void *userData=nullptr);  . Function details. ◆ begin() [1/2]. void sofa::helper::AdvancedTimer::begin ; (; const char * ; idStr). static . ◆ begin() [2/2]. void sofa::helper::AdvancedTimer::begin ; (; IdTimer ; id). static . ◆ clear(). void sofa::helper::AdvancedTimer::clear ; (; ). static . ◆ clearData(). void sofa::helper::AdvancedTimer::clearData ; (; IdTimer ; id). static . clearDatato clear a specific Timer Data ; Parameters. idIdTimer, id of the timer . ◆ convertOutputType(). AdvancedTimer::outputType sofa::helper::AdvancedTimer::convertOutputType ; (; std::string ; type). static . convertOutputType convert a string to the output type ; Parameters. typestd::string, output type name (example : ""json"") . ReturnsoutputType, output type enum . ◆ end() [1/4]. void sofa::helper::AdvancedTimer::end ; (; const char * ; idStr). static . ◆ end() [2/4]. void sofa::helper::AdvancedTimer::end ; (; IdTimer ; id). static . ◆ end() [3/4]. std::string sofa::helper::AdvancedTimer::end ; (; IdTimer ; id, . double ; time, . double ; dt . ). static . end Override fo the end method in which you can use JSON or old format ; Parameters. idIdTimer, the id of the used timer ; timedouble, current time (from the context) ; timedt, current delta time or dt (from the context) . Returnsstd::string, the output if JSON format is set . ◆ end() [",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html:4146,Usability,clear,clearDatato,4146," ; static void stepNext (const char *prevIdStr, const char *nextIdStr);  ; static void step (const char *idStr);  ; static void step (const char *idStr, const char *objStr);  ; static void step (const char *idStr, const std::string &objStr);  ; template<class T > ; static void step (const char *idStr, T *obj);  ; static void valSet (IdVal id, double val);  ; static void valAdd (IdVal id, double val);  ; static void valSet (const char *idStr, double val);  ; static void valAdd (const char *idStr, double val);  ; static std::pair< SyncCallBack, void * > setSyncCallBack (SyncCallBack cb, void *userData=nullptr);  . Function details. ◆ begin() [1/2]. void sofa::helper::AdvancedTimer::begin ; (; const char * ; idStr). static . ◆ begin() [2/2]. void sofa::helper::AdvancedTimer::begin ; (; IdTimer ; id). static . ◆ clear(). void sofa::helper::AdvancedTimer::clear ; (; ). static . ◆ clearData(). void sofa::helper::AdvancedTimer::clearData ; (; IdTimer ; id). static . clearDatato clear a specific Timer Data ; Parameters. idIdTimer, id of the timer . ◆ convertOutputType(). AdvancedTimer::outputType sofa::helper::AdvancedTimer::convertOutputType ; (; std::string ; type). static . convertOutputType convert a string to the output type ; Parameters. typestd::string, output type name (example : ""json"") . ReturnsoutputType, output type enum . ◆ end() [1/4]. void sofa::helper::AdvancedTimer::end ; (; const char * ; idStr). static . ◆ end() [2/4]. void sofa::helper::AdvancedTimer::end ; (; IdTimer ; id). static . ◆ end() [3/4]. std::string sofa::helper::AdvancedTimer::end ; (; IdTimer ; id, . double ; time, . double ; dt . ). static . end Override fo the end method in which you can use JSON or old format ; Parameters. idIdTimer, the id of the used timer ; timedouble, current time (from the context) ; timedt, current delta time or dt (from the context) . Returnsstd::string, the output if JSON format is set . ◆ end() [4/4]. void sofa::helper::AdvancedTimer::end ; (; IdTimer ; id, . std",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html:4158,Usability,clear,clear,4158," ; static void stepNext (const char *prevIdStr, const char *nextIdStr);  ; static void step (const char *idStr);  ; static void step (const char *idStr, const char *objStr);  ; static void step (const char *idStr, const std::string &objStr);  ; template<class T > ; static void step (const char *idStr, T *obj);  ; static void valSet (IdVal id, double val);  ; static void valAdd (IdVal id, double val);  ; static void valSet (const char *idStr, double val);  ; static void valAdd (const char *idStr, double val);  ; static std::pair< SyncCallBack, void * > setSyncCallBack (SyncCallBack cb, void *userData=nullptr);  . Function details. ◆ begin() [1/2]. void sofa::helper::AdvancedTimer::begin ; (; const char * ; idStr). static . ◆ begin() [2/2]. void sofa::helper::AdvancedTimer::begin ; (; IdTimer ; id). static . ◆ clear(). void sofa::helper::AdvancedTimer::clear ; (; ). static . ◆ clearData(). void sofa::helper::AdvancedTimer::clearData ; (; IdTimer ; id). static . clearDatato clear a specific Timer Data ; Parameters. idIdTimer, id of the timer . ◆ convertOutputType(). AdvancedTimer::outputType sofa::helper::AdvancedTimer::convertOutputType ; (; std::string ; type). static . convertOutputType convert a string to the output type ; Parameters. typestd::string, output type name (example : ""json"") . ReturnsoutputType, output type enum . ◆ end() [1/4]. void sofa::helper::AdvancedTimer::end ; (; const char * ; idStr). static . ◆ end() [2/4]. void sofa::helper::AdvancedTimer::end ; (; IdTimer ; id). static . ◆ end() [3/4]. std::string sofa::helper::AdvancedTimer::end ; (; IdTimer ; id, . double ; time, . double ; dt . ). static . end Override fo the end method in which you can use JSON or old format ; Parameters. idIdTimer, the id of the used timer ; timedouble, current time (from the context) ; timedt, current delta time or dt (from the context) . Returnsstd::string, the output if JSON format is set . ◆ end() [4/4]. void sofa::helper::AdvancedTimer::end ; (; IdTimer ; id, . std",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html:7913,Deployability,update,updateLinks,7913,"am &o, const Id< Base > &t)sofa::helper::AdvancedTimer::Id< Base >friend; operator<=(const Id< Base > &t) constsofa::helper::AdvancedTimer::Id< Base >inline; operator==(const Id< Base > &t) constsofa::helper::AdvancedTimer::Id< Base >inline; operator>(const Id< Base > &t) constsofa::helper::AdvancedTimer::Id< Base >inline; operator>=(const Id< Base > &t) constsofa::helper::AdvancedTimer::Id< Base >inline; operator>>(std::istream &i, Id< Base > &t)sofa::helper::AdvancedTimer::Id< Base >friend; parse(BaseObjectDescription *arg)sofa::core::objectmodel::Basevirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(const std::list< std::string > &str)sofa::core::objectmodel::Base; parseFields(const std::map< std::string, std::string * > &str)sofa::core::objectmodel::Basevirtual; Ptr typedefsofa::core::objectmodel::Base; removeData(BaseData *f)sofa::core::objectmodel::Base; removeTag(Tag t)sofa::core::objectmodel::Base; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SPtr typedefsofa::core::objectmodel::Base; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html:727,Integrability,Message,Message,727," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseType typedefsofa::core::objectmodel::Base; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) consts",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html:1383,Integrability,Message,Message,1383,"sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseType typedefsofa::core::objectmodel::Base; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findLinks(const std::string &name) constsofa::core::objectmodel::Base; getClass() constsofa::core::objectmodel::Baseinline",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html:1425,Integrability,Message,Message,1425,"eData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseType typedefsofa::core::objectmodel::Base; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findLinks(const std::string &name) constsofa::core::objectmodel::Base; getClass() constsofa::core::objectmodel::Baseinlinevirtual; GetClass()sofa::core::objectmodel",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html:3171,Integrability,Message,Message,3171,"Type, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findLinks(const std::string &name) constsofa::core::objectmodel::Base; getClass() constsofa::core::objectmodel::Baseinlinevirtual; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() constsofa::core::objectmodel::Baseinlinevirtual; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTypeName() constsofa::core::objectmodel::Base; hasField(const std::string &attribute) constsofa::core::objectmodel::Basevirtual; hasTag(Tag t) constsofa::core::objectmodel::Base; Id()sofa::helper::AdvancedTimer::Id< Base >inline; Id(const std::string &s)sofa::helper::AdvancedTimer::Id< Base >inline; Id(const char *s)sofa::helper::AdvancedTimer::Id< Base >inline; Id(unsigned int id)sofa::helper::AdvancedTimer::Id< Base >inline; idsofa::helper::AdvancedTimer::Id< Base >protected; initData(::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataF",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html:3213,Integrability,Message,Message,3213,"ink *link)sofa::core::objectmodel::Basevirtual; findLinks(const std::string &name) constsofa::core::objectmodel::Base; getClass() constsofa::core::objectmodel::Baseinlinevirtual; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() constsofa::core::objectmodel::Baseinlinevirtual; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTypeName() constsofa::core::objectmodel::Base; hasField(const std::string &attribute) constsofa::core::objectmodel::Basevirtual; hasTag(Tag t) constsofa::core::objectmodel::Base; Id()sofa::helper::AdvancedTimer::Id< Base >inline; Id(const std::string &s)sofa::helper::AdvancedTimer::Id< Base >inline; Id(const char *s)sofa::helper::AdvancedTimer::Id< Base >inline; Id(unsigned int id)sofa::helper::AdvancedTimer::Id< Base >inline; idsofa::helper::AdvancedTimer::Id< Base >protected; initData(::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags)sofa::core::objectmodel::Ba",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html:250,Modifiability,inherit,inherited,250,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::AdvancedTimer::Id< Base > Member List . This is the complete list of members for sofa::helper::AdvancedTimer::Id< Base >, including all inherited members. addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseType typedefsofa::core::objectmodel::Base; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) consts",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html:718,Testability,log,logging,718," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseType typedefsofa::core::objectmodel::Base; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) consts",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html:1374,Testability,log,logging,1374,"r *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseType typedefsofa::core::objectmodel::Base; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findLinks(const std::string &name) constsofa::core::objectmodel::Base; getClass() constsofa::core::objectmodel::B",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html:1416,Testability,log,logging,1416,"dData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseType typedefsofa::core::objectmodel::Base; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findLinks(const std::string &name) constsofa::core::objectmodel::Base; getClass() constsofa::core::objectmodel::Baseinlinevirtual; GetClass()sofa::core::ob",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html:3162,Testability,log,logging,3162,"ass *destType, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findLinks(const std::string &name) constsofa::core::objectmodel::Base; getClass() constsofa::core::objectmodel::Baseinlinevirtual; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() constsofa::core::objectmodel::Baseinlinevirtual; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTypeName() constsofa::core::objectmodel::Base; hasField(const std::string &attribute) constsofa::core::objectmodel::Basevirtual; hasTag(Tag t) constsofa::core::objectmodel::Base; Id()sofa::helper::AdvancedTimer::Id< Base >inline; Id(const std::string &s)sofa::helper::AdvancedTimer::Id< Base >inline; Id(const char *s)sofa::helper::AdvancedTimer::Id< Base >inline; Id(unsigned int id)sofa::helper::AdvancedTimer::Id< Base >inline; idsofa::helper::AdvancedTimer::Id< Base >protected; initData(::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseDa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html:3204,Testability,log,logging,3204,"nst BaseLink *link)sofa::core::objectmodel::Basevirtual; findLinks(const std::string &name) constsofa::core::objectmodel::Base; getClass() constsofa::core::objectmodel::Baseinlinevirtual; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() constsofa::core::objectmodel::Baseinlinevirtual; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTypeName() constsofa::core::objectmodel::Base; hasField(const std::string &attribute) constsofa::core::objectmodel::Basevirtual; hasTag(Tag t) constsofa::core::objectmodel::Base; Id()sofa::helper::AdvancedTimer::Id< Base >inline; Id(const std::string &s)sofa::helper::AdvancedTimer::Id< Base >inline; Id(const char *s)sofa::helper::AdvancedTimer::Id< Base >inline; Id(unsigned int id)sofa::helper::AdvancedTimer::Id< Base >inline; idsofa::helper::AdvancedTimer::Id< Base >protected; initData(::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags)sofa::core::object",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html:7930,Testability,log,logErrors,7930,"am &o, const Id< Base > &t)sofa::helper::AdvancedTimer::Id< Base >friend; operator<=(const Id< Base > &t) constsofa::helper::AdvancedTimer::Id< Base >inline; operator==(const Id< Base > &t) constsofa::helper::AdvancedTimer::Id< Base >inline; operator>(const Id< Base > &t) constsofa::helper::AdvancedTimer::Id< Base >inline; operator>=(const Id< Base > &t) constsofa::helper::AdvancedTimer::Id< Base >inline; operator>>(std::istream &i, Id< Base > &t)sofa::helper::AdvancedTimer::Id< Base >friend; parse(BaseObjectDescription *arg)sofa::core::objectmodel::Basevirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(const std::list< std::string > &str)sofa::core::objectmodel::Base; parseFields(const std::map< std::string, std::string * > &str)sofa::core::objectmodel::Basevirtual; Ptr typedefsofa::core::objectmodel::Base; removeData(BaseData *f)sofa::core::objectmodel::Base; removeTag(Tag t)sofa::core::objectmodel::Base; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SPtr typedefsofa::core::objectmodel::Base; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html:1282,Usability,clear,clearLoggedMessages,1282,"d, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseType typedefsofa::core::objectmodel::Base; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findLinks(const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:6275,Deployability,update,updateLinks,6275,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:6311,Deployability,Update,Update,6311,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:3975,Integrability,Message,Message,3975," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:4048,Integrability,Message,Message,4048," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:4090,Integrability,Message,Message,4090," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:4160,Integrability,Message,Message,4160," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:4271,Integrability,Message,Message,4271," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:4313,Integrability,Message,Message,4313," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:8765,Integrability,message,messages,8765," aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; virtual Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Friends; std::ostream & operator<< (std::ostream &o, const Id< Base > &t);  ; std::istream & operator>> (std::istream &i, Id< Base > &t);  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:343,Modifiability,Inherit,Inheritance,343,"﻿. SOFA API: sofa::helper::AdvancedTimer::Id< Base > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Friends |; List of all members . sofa::helper::AdvancedTimer::Id< Base > Class Template Reference . #include <AdvancedTimer.h>. Inheritance diagram for sofa::helper::AdvancedTimer::Id< Base >:. [legend]. Classes; class  IdFactory;  . Protected Attributes; unsigned int id;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  Id ();  ;  Id (const std::string &s);  An Id is constructed from a string and appears like one after, without actually storing a string. More...;  ;  Id (const char *s);  An Id is constructed from a string and appears like one after, without actually storing a string. More...;  ;  Id (unsigned int id);  This constructor should be used only if really necessary. More...;  ;  operator unsigned int () const;  Any operation requiring an int can be used on an id using this conversion. More...;  ;  operator std::string () const;  Any operation requiring a string can be used on an id using this conversion. More...;  ; bool operator== (const Id< Base > &t) const;  ; bool operator!= (const Id< Base > &t) const;  ; bool operator< (const Id< Base > &t) const;  ; bool operator> (const Id< Base > &t) const;  ; bool operator<= (const Id< Base > &t) const;  ; bool operator>= (const Id< Base > &t) const;  ; bool operator! () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:513,Modifiability,inherit,inherited,513,"﻿. SOFA API: sofa::helper::AdvancedTimer::Id< Base > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Friends |; List of all members . sofa::helper::AdvancedTimer::Id< Base > Class Template Reference . #include <AdvancedTimer.h>. Inheritance diagram for sofa::helper::AdvancedTimer::Id< Base >:. [legend]. Classes; class  IdFactory;  . Protected Attributes; unsigned int id;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  Id ();  ;  Id (const std::string &s);  An Id is constructed from a string and appears like one after, without actually storing a string. More...;  ;  Id (const char *s);  An Id is constructed from a string and appears like one after, without actually storing a string. More...;  ;  Id (unsigned int id);  This constructor should be used only if really necessary. More...;  ;  operator unsigned int () const;  Any operation requiring an int can be used on an id using this conversion. More...;  ;  operator std::string () const;  Any operation requiring a string can be used on an id using this conversion. More...;  ; bool operator== (const Id< Base > &t) const;  ; bool operator!= (const Id< Base > &t) const;  ; bool operator< (const Id< Base > &t) const;  ; bool operator> (const Id< Base > &t) const;  ; bool operator<= (const Id< Base > &t) const;  ; bool operator>= (const Id< Base > &t) const;  ; bool operator! () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:1903,Modifiability,inherit,inherited,1903,"ke one after, without actually storing a string. More...;  ;  Id (const char *s);  An Id is constructed from a string and appears like one after, without actually storing a string. More...;  ;  Id (unsigned int id);  This constructor should be used only if really necessary. More...;  ;  operator unsigned int () const;  Any operation requiring an int can be used on an id using this conversion. More...;  ;  operator std::string () const;  Any operation requiring a string can be used on an id using this conversion. More...;  ; bool operator== (const Id< Base > &t) const;  ; bool operator!= (const Id< Base > &t) const;  ; bool operator< (const Id< Base > &t) const;  ; bool operator> (const Id< Base > &t) const;  ; bool operator<= (const Id< Base > &t) const;  ; bool operator>= (const Id< Base > &t) const;  ; bool operator! () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; virtual std::string getPathName () const;  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get the type name of this object (i.e. class and template types) More...;  ; virtual std::string getClassName () const;  Get the class name of this object. More...;  ; virtual std::string getTemplateName () const final;  Get the template type names (if any) used to instantiate t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:8478,Modifiability,Inherit,Inherited,8478,"onst;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; virtual Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Friends; std::ostream & operator<< (std::ostream &o, const Id< Base > &t);  ; std::istream & operator>> (std::istream &i, Id< Base > &t);  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited fro",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:8516,Modifiability,inherit,inherited,8516,"onst;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; virtual Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Friends; std::ostream & operator<< (std::ostream &o, const Id< Base > &t);  ; std::istream & operator>> (std::istream &i, Id< Base > &t);  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited fro",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:9348,Modifiability,inherit,inherited,9348,"ted Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Attribute details. ◆ id. template<class Base > . unsigned int sofa::helper::AdvancedTimer::Id< Base >::id. protected . Constructor details. ◆ Id() [1/4]. template<class Base > . sofa::helper::AdvancedTimer::Id< Base >::Id ; (; ).",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:9573,Modifiability,inherit,inherited,9573,"ted Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Attribute details. ◆ id. template<class Base > . unsigned int sofa::helper::AdvancedTimer::Id< Base >::id. protected . Constructor details. ◆ Id() [1/4]. template<class Base > . sofa::helper::AdvancedTimer::Id< Base >::Id ; (; ).",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:9105,Performance,Load,Loading,9105,"aseData *&ptr, const std::string &path, const BaseLink *link);  ; virtual Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Friends; std::ostream & operator<< (std::ostream &o, const Id< Base > &t);  ; std::istream & operator>> (std::istream &i, Id< Base > &t);  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void ini",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:2482,Security,Access,Accessor,2482,"ke one after, without actually storing a string. More...;  ;  Id (const char *s);  An Id is constructed from a string and appears like one after, without actually storing a string. More...;  ;  Id (unsigned int id);  This constructor should be used only if really necessary. More...;  ;  operator unsigned int () const;  Any operation requiring an int can be used on an id using this conversion. More...;  ;  operator std::string () const;  Any operation requiring a string can be used on an id using this conversion. More...;  ; bool operator== (const Id< Base > &t) const;  ; bool operator!= (const Id< Base > &t) const;  ; bool operator< (const Id< Base > &t) const;  ; bool operator> (const Id< Base > &t) const;  ; bool operator<= (const Id< Base > &t) const;  ; bool operator>= (const Id< Base > &t) const;  ; bool operator! () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; virtual std::string getPathName () const;  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get the type name of this object (i.e. class and template types) More...;  ; virtual std::string getClassName () const;  Get the class name of this object. More...;  ; virtual std::string getTemplateName () const final;  Get the template type names (if any) used to instantiate t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:7592,Security,Access,Accessor,7592," initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More...;  ; void addAlias (BaseData *field, const char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; virtual Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Friends; std::ostream & operator<< (std::ostream &o, const Id< Base > &t);  ; std::istream & operator>> (std::istream &i, Id< Base > &t);  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:7711,Security,Access,Accessor,7711,"ta (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More...;  ; void addAlias (BaseData *field, const char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; virtual Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Friends; std::ostream & operator<< (std::ostream &o, const Id< Base > &t);  ; std::istream & operator>> (std::istream &i, Id< Base > &t);  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; D",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:7822,Security,Access,Accessor,7822,"thod used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More...;  ; void addAlias (BaseData *field, const char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; virtual Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Friends; std::ostream & operator<< (std::ostream &o, const Id< Base > &t);  ; std::istream & operator>> (std::istream &i, Id< Base > &t);  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:7941,Security,Access,Accessor,7941,"Data initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More...;  ; void addAlias (BaseData *field, const char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; virtual Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Friends; std::ostream & operator<< (std::ostream &o, const Id< Base > &t);  ; std::istream & operator>> (std::istream &i, Id< Base > &t);  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this ob",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:3966,Testability,log,logging,3966," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:4039,Testability,log,logging,4039," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:4081,Testability,log,logging,4081," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:4151,Testability,log,logging,4151," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:4262,Testability,log,logging,4262," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:4304,Testability,log,logging,4304," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:6293,Testability,log,logErrors,6293,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:4347,Usability,clear,clearLoggedMessages,4347," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html:7308,Deployability,update,updateLinks,7308,"model::Base; m_instanciationSourceFilePossofa::core::objectmodel::Base; m_internalEnginesofa::core::objectmodel::Baseprotected; m_oldAttributessofa::core::objectmodel::Base; m_vecDatasofa::core::objectmodel::Baseprotected; m_vecLinksofa::core::objectmodel::Baseprotected; MapData typedefsofa::core::objectmodel::Base; MapLink typedefsofa::core::objectmodel::Base; MyClass typedefsofa::core::objectmodel::Base; namesofa::core::objectmodel::Base; notMuted() constsofa::core::objectmodel::Baseinline; parse(BaseObjectDescription *arg)sofa::core::objectmodel::Basevirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(const std::list< std::string > &str)sofa::core::objectmodel::Base; parseFields(const std::map< std::string, std::string * > &str)sofa::core::objectmodel::Basevirtual; Ptr typedefsofa::core::objectmodel::Base; removeData(BaseData *f)sofa::core::objectmodel::Base; removeTag(Tag t)sofa::core::objectmodel::Base; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SPtr typedefsofa::core::objectmodel::Base; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html:749,Integrability,Message,Message,749," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseType typedefsofa::core::objectmodel::Base; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html:1405,Integrability,Message,Message,1405,"sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseType typedefsofa::core::objectmodel::Base; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findLinks(const std::string &name) constsofa::core::objectmodel::Base; getClass() constsofa::core::objectmodel::Baseinline",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html:1447,Integrability,Message,Message,1447,"eData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseType typedefsofa::core::objectmodel::Base; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findLinks(const std::string &name) constsofa::core::objectmodel::Base; getClass() constsofa::core::objectmodel::Baseinlinevirtual; GetClass()sofa::core::objectmodel",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html:3439,Integrability,Message,Message,3439,"ectmodel::Baseinlinestatic; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getID(const std::string &name)sofa::helper::AdvancedTimer::Id< Base >::IdFactoryinlinestatic; getInstance()sofa::helper::AdvancedTimer::Id< Base >::IdFactoryinlinestatic; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLastID()sofa::helper::AdvancedTimer::Id< Base >::IdFactoryinlinestatic; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getName(unsigned int id)sofa::helper::AdvancedTimer::Id< Base >::IdFactoryinlinestatic; sofa::core::objectmodel::Base::getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() constsofa::core::objectmodel::Baseinlinevirtual; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTypeName() constsofa::core::objectmodel::Base; hasField(const std::string &attribute) constsofa::core::objectmodel::Basevirtual; hasTag(Tag t) constsofa::core::objectmodel::Base; IdFactory()sofa::helper::AdvancedTimer::Id< Base >::IdFactoryinlineprotected; idsListsofa::helper::AdvancedTimer::Id< Base >::IdFactoryprotected; idsMapsofa::helper::AdvancedTimer::Id< Base >::IdFactoryprotected; initData(::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html:3481,Integrability,Message,Message,3481," constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getID(const std::string &name)sofa::helper::AdvancedTimer::Id< Base >::IdFactoryinlinestatic; getInstance()sofa::helper::AdvancedTimer::Id< Base >::IdFactoryinlinestatic; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLastID()sofa::helper::AdvancedTimer::Id< Base >::IdFactoryinlinestatic; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getName(unsigned int id)sofa::helper::AdvancedTimer::Id< Base >::IdFactoryinlinestatic; sofa::core::objectmodel::Base::getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() constsofa::core::objectmodel::Baseinlinevirtual; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTypeName() constsofa::core::objectmodel::Base; hasField(const std::string &attribute) constsofa::core::objectmodel::Basevirtual; hasTag(Tag t) constsofa::core::objectmodel::Base; IdFactory()sofa::helper::AdvancedTimer::Id< Base >::IdFactoryinlineprotected; idsListsofa::helper::AdvancedTimer::Id< Base >::IdFactoryprotected; idsMapsofa::helper::AdvancedTimer::Id< Base >::IdFactoryprotected; initData(::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html:272,Modifiability,inherit,inherited,272,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::AdvancedTimer::Id< Base >::IdFactory Member List . This is the complete list of members for sofa::helper::AdvancedTimer::Id< Base >::IdFactory, including all inherited members. addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseType typedefsofa::core::objectmodel::Base; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html:740,Testability,log,logging,740," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseType typedefsofa::core::objectmodel::Base; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html:1396,Testability,log,logging,1396,"r *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseType typedefsofa::core::objectmodel::Base; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findLinks(const std::string &name) constsofa::core::objectmodel::Base; getClass() constsofa::core::objectmodel::B",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html:1438,Testability,log,logging,1438,"dData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseType typedefsofa::core::objectmodel::Base; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findLinks(const std::string &name) constsofa::core::objectmodel::Base; getClass() constsofa::core::objectmodel::Baseinlinevirtual; GetClass()sofa::core::ob",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html:3430,Testability,log,logging,3430,"core::objectmodel::Baseinlinestatic; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getID(const std::string &name)sofa::helper::AdvancedTimer::Id< Base >::IdFactoryinlinestatic; getInstance()sofa::helper::AdvancedTimer::Id< Base >::IdFactoryinlinestatic; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLastID()sofa::helper::AdvancedTimer::Id< Base >::IdFactoryinlinestatic; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getName(unsigned int id)sofa::helper::AdvancedTimer::Id< Base >::IdFactoryinlinestatic; sofa::core::objectmodel::Base::getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() constsofa::core::objectmodel::Baseinlinevirtual; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTypeName() constsofa::core::objectmodel::Base; hasField(const std::string &attribute) constsofa::core::objectmodel::Basevirtual; hasTag(Tag t) constsofa::core::objectmodel::Base; IdFactory()sofa::helper::AdvancedTimer::Id< Base >::IdFactoryinlineprotected; idsListsofa::helper::AdvancedTimer::Id< Base >::IdFactoryprotected; idsMapsofa::helper::AdvancedTimer::Id< Base >::IdFactoryprotected; initData(::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sof",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html:3472,Testability,log,logging,3472,"assName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getID(const std::string &name)sofa::helper::AdvancedTimer::Id< Base >::IdFactoryinlinestatic; getInstance()sofa::helper::AdvancedTimer::Id< Base >::IdFactoryinlinestatic; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLastID()sofa::helper::AdvancedTimer::Id< Base >::IdFactoryinlinestatic; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getName(unsigned int id)sofa::helper::AdvancedTimer::Id< Base >::IdFactoryinlinestatic; sofa::core::objectmodel::Base::getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() constsofa::core::objectmodel::Baseinlinevirtual; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTypeName() constsofa::core::objectmodel::Base; hasField(const std::string &attribute) constsofa::core::objectmodel::Basevirtual; hasTag(Tag t) constsofa::core::objectmodel::Base; IdFactory()sofa::helper::AdvancedTimer::Id< Base >::IdFactoryinlineprotected; idsListsofa::helper::AdvancedTimer::Id< Base >::IdFactoryprotected; idsMapsofa::helper::AdvancedTimer::Id< Base >::IdFactoryprotected; initData(::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html:7325,Testability,log,logErrors,7325,"model::Base; m_instanciationSourceFilePossofa::core::objectmodel::Base; m_internalEnginesofa::core::objectmodel::Baseprotected; m_oldAttributessofa::core::objectmodel::Base; m_vecDatasofa::core::objectmodel::Baseprotected; m_vecLinksofa::core::objectmodel::Baseprotected; MapData typedefsofa::core::objectmodel::Base; MapLink typedefsofa::core::objectmodel::Base; MyClass typedefsofa::core::objectmodel::Base; namesofa::core::objectmodel::Base; notMuted() constsofa::core::objectmodel::Baseinline; parse(BaseObjectDescription *arg)sofa::core::objectmodel::Basevirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(const std::list< std::string > &str)sofa::core::objectmodel::Base; parseFields(const std::map< std::string, std::string * > &str)sofa::core::objectmodel::Basevirtual; Ptr typedefsofa::core::objectmodel::Base; removeData(BaseData *f)sofa::core::objectmodel::Base; removeTag(Tag t)sofa::core::objectmodel::Base; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SPtr typedefsofa::core::objectmodel::Base; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html:1304,Usability,clear,clearLoggedMessages,1304,"d, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseType typedefsofa::core::objectmodel::Base; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findLinks(const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:7797,Deployability,update,updateLinks,7797,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:7833,Deployability,Update,Update,7833,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:2849,Integrability,message,messages,2849," ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutput",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:5497,Integrability,Message,Message,5497," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:5570,Integrability,Message,Message,5570," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:5612,Integrability,Message,Message,5612," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:5682,Integrability,Message,Message,5682," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:5793,Integrability,Message,Message,5793," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:5835,Integrability,Message,Message,5835," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:362,Modifiability,Inherit,Inheritance,362,"﻿. SOFA API: sofa::helper::AdvancedTimer::Id< Base >::IdFactory Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::AdvancedTimer::Id< Base >::IdFactory Class Reference . #include <AdvancedTimer.h>. Inheritance diagram for sofa::helper::AdvancedTimer::Id< Base >::IdFactory:. [legend]; Detailed Description; template<class Base>; class sofa::helper::AdvancedTimer::Id< Base >::IdFactory; Internal class used to generate IDs. . Protected Attributes; std::vector< std::string > idsList;  the list of the id names. the Ids are the indices in the vector More...;  ; std::unordered_map< std::string, unsigned int > idsMap;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Static Public Member Functions; static unsigned int getID (const std::string &name);  ; static std::size_t getLastID ();  ; static std::string getName (unsigned int id);  return the name corresponding to the id in parameter More...;  ; static IdFactory & getInstance ();  return the instance of the factory. Creates it if doesn't exist yet. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  IdFactory ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitD",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:806,Modifiability,inherit,inherited,806,"﻿. SOFA API: sofa::helper::AdvancedTimer::Id< Base >::IdFactory Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::AdvancedTimer::Id< Base >::IdFactory Class Reference . #include <AdvancedTimer.h>. Inheritance diagram for sofa::helper::AdvancedTimer::Id< Base >::IdFactory:. [legend]; Detailed Description; template<class Base>; class sofa::helper::AdvancedTimer::Id< Base >::IdFactory; Internal class used to generate IDs. . Protected Attributes; std::vector< std::string > idsList;  the list of the id names. the Ids are the indices in the vector More...;  ; std::unordered_map< std::string, unsigned int > idsMap;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Static Public Member Functions; static unsigned int getID (const std::string &name);  ; static std::size_t getLastID ();  ; static std::string getName (unsigned int id);  return the name corresponding to the id in parameter More...;  ; static IdFactory & getInstance ();  return the instance of the factory. Creates it if doesn't exist yet. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  IdFactory ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitD",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:1598,Modifiability,inherit,inherited,1598,"e Ids are the indices in the vector More...;  ; std::unordered_map< std::string, unsigned int > idsMap;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Static Public Member Functions; static unsigned int getID (const std::string &name);  ; static std::size_t getLastID ();  ; static std::string getName (unsigned int id);  return the name corresponding to the id in parameter More...;  ; static IdFactory & getInstance ();  return the instance of the factory. Creates it if doesn't exist yet. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  IdFactory ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::Deprecat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:1869,Modifiability,inherit,inherited,1869,"s (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Static Public Member Functions; static unsigned int getID (const std::string &name);  ; static std::size_t getLastID ();  ; static std::string getName (unsigned int id);  return the name corresponding to the id in parameter More...;  ; static IdFactory & getInstance ();  return the instance of the factory. Creates it if doesn't exist yet. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  IdFactory ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object be",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:2562,Modifiability,Inherit,Inherited,2562,"GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  IdFactory ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:2600,Modifiability,inherit,inherited,2600,"GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  IdFactory ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:3425,Modifiability,inherit,inherited,3425,"re::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; virtual std::string getPathName () const;  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get the type name of this object (i.e. class and template types) More...;  ; virtual std::string getClassName () const;  Get the class name of this object. More...;  ; virtual std::string getTemplateName () const final;  Get the template type names (if any) used to instantiate this object. More...;  ; std::string getNameSpaceName () const;  Get",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:3189,Performance,Load,Loading,3189,"...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; virtual std::string getPathName () const;  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setN",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:4004,Security,Access,Accessor,4004,"re::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; virtual std::string getPathName () const;  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get the type name of this object (i.e. class and template types) More...;  ; virtual std::string getClassName () const;  Get the class name of this object. More...;  ; virtual std::string getTemplateName () const final;  Get the template type names (if any) used to instantiate this object. More...;  ; std::string getNameSpaceName () const;  Get",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:9114,Security,Access,Accessor,9114," initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More...;  ; void addAlias (BaseData *field, const char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; virtual Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Attribute details. ◆ idsList. template<class Base > . std::vector<std::string> sofa::helper::AdvancedTimer::Id< Base >::IdFactory::idsList. protected . the list of the id names. the Ids are the indices in the vector . ◆ idsMap. template<class Base > . std::unordered_map<std:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:9233,Security,Access,Accessor,9233,"ta (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More...;  ; void addAlias (BaseData *field, const char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; virtual Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Attribute details. ◆ idsList. template<class Base > . std::vector<std::string> sofa::helper::AdvancedTimer::Id< Base >::IdFactory::idsList. protected . the list of the id names. the Ids are the indices in the vector . ◆ idsMap. template<class Base > . std::unordered_map<std::string, unsigned int> sofa::helper::AdvancedTimer::Id< Base >::IdFactory::idsMap. protected . Constructor details. ◆ ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:9344,Security,Access,Accessor,9344,"thod used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More...;  ; void addAlias (BaseData *field, const char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; virtual Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Attribute details. ◆ idsList. template<class Base > . std::vector<std::string> sofa::helper::AdvancedTimer::Id< Base >::IdFactory::idsList. protected . the list of the id names. the Ids are the indices in the vector . ◆ idsMap. template<class Base > . std::unordered_map<std::string, unsigned int> sofa::helper::AdvancedTimer::Id< Base >::IdFactory::idsMap. protected . Constructor details. ◆ IdFactory(). template<class Base > . sofa::helper::AdvancedTimer::Id< Base >::IdFactory::IdFactory ; (; ). inlinepr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:9463,Security,Access,Accessor,9463,"Data initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More...;  ; void addAlias (BaseData *field, const char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; virtual Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Attribute details. ◆ idsList. template<class Base > . std::vector<std::string> sofa::helper::AdvancedTimer::Id< Base >::IdFactory::idsList. protected . the list of the id names. the Ids are the indices in the vector . ◆ idsMap. template<class Base > . std::unordered_map<std::string, unsigned int> sofa::helper::AdvancedTimer::Id< Base >::IdFactory::idsMap. protected . Constructor details. ◆ IdFactory(). template<class Base > . sofa::helper::AdvancedTimer::Id< Base >::IdFactory::IdFactory ; (; ). inlineprotected . Function details. ◆ getID(). template<class Base > . static unsigned int sofa::helper::AdvancedTimer::Id<",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:5488,Testability,log,logging,5488," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:5561,Testability,log,logging,5561," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:5603,Testability,log,logging,5603," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:5673,Testability,log,logging,5673," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:5784,Testability,log,logging,5784," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:5826,Testability,log,logging,5826," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:7815,Testability,log,logErrors,7815,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:5869,Usability,clear,clearLoggedMessages,5869," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_step_var-members.html:244,Modifiability,inherit,inherited,244,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::AdvancedTimer::StepVar Member List . This is the complete list of members for sofa::helper::AdvancedTimer::StepVar, including all inherited members. idsofa::helper::AdvancedTimer::StepVar; idStrsofa::helper::AdvancedTimer::StepVar; objsofa::helper::AdvancedTimer::StepVar; objStrsofa::helper::AdvancedTimer::StepVar; StepVar(IdStep id)sofa::helper::AdvancedTimer::StepVarinline; StepVar(const char *idStr)sofa::helper::AdvancedTimer::StepVarinline; StepVar(IdStep id, IdObj obj)sofa::helper::AdvancedTimer::StepVarinline; StepVar(const char *idStr, const char *objStr)sofa::helper::AdvancedTimer::StepVarinline; StepVar(IdStep id, T *obj)sofa::helper::AdvancedTimer::StepVarinline; StepVar(const char *idStr, T *obj)sofa::helper::AdvancedTimer::StepVarinline; ~StepVar()sofa::helper::AdvancedTimer::StepVarinline. Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_step_var-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_step_var-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_timer.html:220,Modifiability,Inherit,Inheritance,220,﻿. SOFA API: sofa::helper::AdvancedTimer::Timer Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::AdvancedTimer::Timer Class Reference . #include <AdvancedTimer.h>. Inheritance diagram for sofa::helper::AdvancedTimer::Timer:. [legend]. sofahelperAdvancedTimerTimer; Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_timer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_timer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_timer_var-members.html:246,Modifiability,inherit,inherited,246,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::AdvancedTimer::TimerVar Member List . This is the complete list of members for sofa::helper::AdvancedTimer::TimerVar, including all inherited members. idsofa::helper::AdvancedTimer::TimerVar; TimerVar(IdTimer id)sofa::helper::AdvancedTimer::TimerVarinline; ~TimerVar()sofa::helper::AdvancedTimer::TimerVarinline. Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_timer_var-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_timer_var-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_back_trace-members.html:218,Modifiability,inherit,inherited,218,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::BackTrace Member List . This is the complete list of members for sofa::helper::BackTrace, including all inherited members. autodump()sofa::helper::BackTracestatic; dump()sofa::helper::BackTracestatic; getTrace(size_t maxEntries=std::numeric_limits< unsigned int >().max())sofa::helper::BackTracestatic; sig(int sig)sofa::helper::BackTraceprotectedstatic; StackTrace typedefsofa::helper::BackTrace. Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_back_trace-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_back_trace-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_base_creator-members.html:284,Modifiability,inherit,inherited,284,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::BaseCreator< Object, Argument, ObjectPtr > Member List . This is the complete list of members for sofa::helper::BaseCreator< Object, Argument, ObjectPtr >, including all inherited members. createInstance(Argument arg)=0sofa::helper::BaseCreator< Object, Argument, ObjectPtr >pure virtual; type()=0sofa::helper::BaseCreator< Object, Argument, ObjectPtr >pure virtual; ~BaseCreator()sofa::helper::BaseCreator< Object, Argument, ObjectPtr >inlinevirtual. Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_base_creator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_base_creator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_base_creator.html:333,Modifiability,Inherit,Inheritance,333,"﻿. SOFA API: sofa::helper::BaseCreator< Object, Argument, ObjectPtr > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::BaseCreator< Object, Argument, ObjectPtr > Class Template Referenceabstract . #include <Factory.h>. Inheritance diagram for sofa::helper::BaseCreator< Object, Argument, ObjectPtr >:. [legend]. Public Member Functions; virtual ~BaseCreator ();  ; virtual ObjectPtr createInstance (Argument arg)=0;  ; virtual const std::type_info & type ()=0;  . Constructor details. ◆ ~BaseCreator(). template<class Object , class Argument = NoArgument, class ObjectPtr = Object*> . virtual sofa::helper::BaseCreator< Object, Argument, ObjectPtr >::~BaseCreator ; (; ). inlinevirtual . Function details. ◆ createInstance(). template<class Object , class Argument = NoArgument, class ObjectPtr = Object*> . virtual ObjectPtr sofa::helper::BaseCreator< Object, Argument, ObjectPtr >::createInstance ; (; Argument ; arg). pure virtual . ◆ type(). template<class Object , class Argument = NoArgument, class ObjectPtr = Object*> . virtual const std::type_info& sofa::helper::BaseCreator< Object, Argument, ObjectPtr >::type ; (; ). pure virtual . Implemented in sofa::helper::CreatorFn< Factory, RealObject >, sofa::helper::Creator< Factory, RealObject >, sofa::helper::Creator< SofaViewerFactory, RealObject >, and sofa::helper::Creator< Mapper::ContactMapperFactory, Mapper >. sofahelperBaseCreator; Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_base_creator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_base_creator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_base_creator_3_01sofa_1_1gui_1_1common_1_1_base_viewer_00_01sofa_1_1gui_8b3b1543272168d8199a69624ac986b5.html:370,Modifiability,inherit,inherited,370,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::BaseCreator< sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & > Member List . This is the complete list of members for sofa::helper::BaseCreator< sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >, including all inherited members. acceleratedName()=0sofa::helper::BaseCreator< sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >pure virtual; createInstance(sofa::gui::common::BaseViewerArgument &arg)=0sofa::helper::BaseCreator< sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >pure virtual; type()=0sofa::helper::BaseCreator< sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >pure virtual; viewerName()=0sofa::helper::BaseCreator< sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >pure virtual; ~BaseCreator()sofa::helper::BaseCreator< sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >inlinevirtual. Generated on Mon Nov 11 2024 03:31:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_base_creator_3_01sofa_1_1gui_1_1common_1_1_base_viewer_00_01sofa_1_1gui_8b3b1543272168d8199a69624ac986b5.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_base_creator_3_01sofa_1_1gui_1_1common_1_1_base_viewer_00_01sofa_1_1gui_8b3b1543272168d8199a69624ac986b5.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_basic_dispatcher-members.html:272,Modifiability,inherit,inherited,272,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::BasicDispatcher< BaseClass, ResulT > Member List . This is the complete list of members for sofa::helper::BasicDispatcher< BaseClass, ResulT >, including all inherited members. add(const std::type_info &class1, const std::type_info &class2, F fun)sofa::helper::BasicDispatcher< BaseClass, ResulT >; callBackMapsofa::helper::BasicDispatcher< BaseClass, ResulT >protected; defaultFn(BaseClass &arg1, BaseClass &arg2)sofa::helper::BasicDispatcher< BaseClass, ResulT >virtual; F typedefsofa::helper::BasicDispatcher< BaseClass, ResulT >; go(BaseClass &arg1, BaseClass &arg2)sofa::helper::BasicDispatcher< BaseClass, ResulT >; ignore(const std::type_info &class1, const std::type_info &class2)sofa::helper::BasicDispatcher< BaseClass, ResulT >; ignore()sofa::helper::BasicDispatcher< BaseClass, ResulT >inline; ignoreFn(BaseClass &arg1, BaseClass &arg2)sofa::helper::BasicDispatcher< BaseClass, ResulT >static; isSupported(BaseClass &arg1, BaseClass &arg2)sofa::helper::BasicDispatcher< BaseClass, ResulT >; KeyType typedefsofa::helper::BasicDispatcher< BaseClass, ResulT >protected; MapType typedefsofa::helper::BasicDispatcher< BaseClass, ResulT >protected; ~BasicDispatcher()sofa::helper::BasicDispatcher< BaseClass, ResulT >inlineprotectedvirtual. Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_basic_dispatcher-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_basic_dispatcher-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_basic_dispatcher.html:406,Modifiability,Inherit,Inheritance,406,"﻿. SOFA API: sofa::helper::BasicDispatcher< BaseClass, ResulT > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::BasicDispatcher< BaseClass, ResulT > Class Template Reference . #include <FnDispatcher.h>. Inheritance diagram for sofa::helper::BasicDispatcher< BaseClass, ResulT >:. [legend]. Protected Attributes; MapType callBackMap;  . Public Member Functions; void add (const std::type_info &class1, const std::type_info &class2, F fun);  ; void ignore (const std::type_info &class1, const std::type_info &class2);  ; template<class ConcreteClass1 , class ConcreteClass2 , ResulT(*)(ConcreteClass1 &, ConcreteClass2 &) F, bool symmetric> ; void ignore ();  ; virtual ResulT defaultFn (BaseClass &arg1, BaseClass &arg2);  ; ResulT go (BaseClass &arg1, BaseClass &arg2);  ; bool isSupported (BaseClass &arg1, BaseClass &arg2);  Return true if a pair of argument correspond to a callback function (different than ignoreFn) More...;  . Static Public Member Functions; static ResulT ignoreFn (BaseClass &arg1, BaseClass &arg2);  . Protected Member Functions; virtual ~BasicDispatcher ();  . Attribute details. ◆ callBackMap. template<class BaseClass , typename ResulT = void> . MapType sofa::helper::BasicDispatcher< BaseClass, ResulT >::callBackMap. protected . Constructor details. ◆ ~BasicDispatcher(). template<class BaseClass , typename ResulT = void> . virtual sofa::helper::BasicDispatcher< BaseClass, ResulT >::~BasicDispatcher ; (; ). inlineprotectedvirtual . Function details. ◆ add(). template<class BaseClass , typename ResulT > . void sofa::helper::BasicDispatcher< BaseClass, ResulT >::add ; (; const std::type_info & ; class1, . const std::type_info & ; class2, . F ; fun . ). ◆ defaultFn(). template<class BaseClass , typename ResulT > . ResulT sofa::helper::BasicDispatcher< BaseClass,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_basic_dispatcher.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_basic_dispatcher.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_color_map-members.html:216,Modifiability,inherit,inherited,216,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::ColorMap Member List . This is the complete list of members for sofa::helper::ColorMap, including all inherited members. ColorMap(unsigned int paletteSize=256, const std::string &colorScheme=""HSV"")sofa::helper::ColorMap; entriessofa::helper::ColorMap; getColor(unsigned int i)sofa::helper::ColorMapinline; getColorScheme() constsofa::helper::ColorMapinline; getDefault()sofa::helper::ColorMapstatic; getEvaluator(Real vmin, Real vmax)sofa::helper::ColorMapinline; getNbColors() constsofa::helper::ColorMapinline; getPaletteSize() constsofa::helper::ColorMapinline; init()sofa::helper::ColorMap; m_colorSchemesofa::helper::ColorMap; m_paletteSizesofa::helper::ColorMap; operator<<(std::ostream &out, const ColorMap &m)sofa::helper::ColorMapfriend; operator>>(std::istream &in, ColorMap &m)sofa::helper::ColorMapfriend; reinit()sofa::helper::ColorMap; setColorScheme(const std::string &colorScheme)sofa::helper::ColorMapinline; setPaletteSize(unsigned int paletteSize)sofa::helper::ColorMapinline; VecColor typedefsofa::helper::ColorMap; ~ColorMap()sofa::helper::ColorMapvirtual. Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_color_map-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_color_map-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_color_map_1_1evaluator-members.html:254,Modifiability,inherit,inherited,254,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::ColorMap::evaluator< Real > Member List . This is the complete list of members for sofa::helper::ColorMap::evaluator< Real >, including all inherited members. evaluator()sofa::helper::ColorMap::evaluator< Real >inline; evaluator(const ColorMap *map, Real vmin, Real vmax)sofa::helper::ColorMap::evaluator< Real >inline; mapsofa::helper::ColorMap::evaluator< Real >protected; operator()(Real r) constsofa::helper::ColorMap::evaluator< Real >inline; vmaxsofa::helper::ColorMap::evaluator< Real >protected; vminsofa::helper::ColorMap::evaluator< Real >protected; vscalesofa::helper::ColorMap::evaluator< Real >protected. Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_color_map_1_1evaluator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_color_map_1_1evaluator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_creator-members.html:260,Modifiability,inherit,inherited,260,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::Creator< Factory, RealObject > Member List . This is the complete list of members for sofa::helper::Creator< Factory, RealObject >, including all inherited members. Argument typedefsofa::helper::Creator< Factory, RealObject >; createInstance(Argument arg)sofa::helper::Creator< Factory, RealObject >inline; sofa::helper::BaseCreator::createInstance(Argument arg)=0sofa::helper::BaseCreator< Object, Argument, ObjectPtr >pure virtual; Creator(Key key, bool multi=false)sofa::helper::Creator< Factory, RealObject >inlineexplicit; getKey() constsofa::helper::Creator< Factory, RealObject >inline; Key typedefsofa::helper::Creator< Factory, RealObject >; Object typedefsofa::helper::Creator< Factory, RealObject >; ObjectPtr typedefsofa::helper::Creator< Factory, RealObject >; registerInFactory()sofa::helper::Creator< Factory, RealObject >inline; type()sofa::helper::Creator< Factory, RealObject >inlinevirtual; ~BaseCreator()sofa::helper::BaseCreator< Object, Argument, ObjectPtr >inlinevirtual. Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_creator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_creator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_creator.html:301,Modifiability,Inherit,Inheritance,301,"﻿. SOFA API: sofa::helper::Creator< Factory, RealObject > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::Creator< Factory, RealObject > Class Template Reference . #include <Factory.h>. Inheritance diagram for sofa::helper::Creator< Factory, RealObject >:. [legend]. Public Member Functions;  Creator (Key key, bool multi=false);  ; ObjectPtr createInstance (Argument arg);  ; const std::type_info & type ();  ; void registerInFactory ();  ; const Key & getKey () const;  ;  Public Member Functions inherited from sofa::helper::BaseCreator< Object, Argument, ObjectPtr >; virtual ~BaseCreator ();  ; virtual ObjectPtr createInstance (Argument arg)=0;  . Constructor details. ◆ Creator(). template<class Factory , class RealObject > . sofa::helper::Creator< Factory, RealObject >::Creator ; (; Key ; key, . bool ; multi = false . ). inlineexplicit . Function details. ◆ createInstance(). template<class Factory , class RealObject > . ObjectPtr sofa::helper::Creator< Factory, RealObject >::createInstance ; (; Argument ; arg). inline . ◆ getKey(). template<class Factory , class RealObject > . const Key& sofa::helper::Creator< Factory, RealObject >::getKey ; (; ); const. inline . ◆ registerInFactory(). template<class Factory , class RealObject > . void sofa::helper::Creator< Factory, RealObject >::registerInFactory ; (; ). inline . ◆ type(). template<class Factory , class RealObject > . const std::type_info& sofa::helper::Creator< Factory, RealObject >::type ; (; ). inlinevirtual . Implements sofa::helper::BaseCreator< Object, Argument, ObjectPtr >. sofahelperCreator; Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_creator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_creator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_creator.html:614,Modifiability,inherit,inherited,614,"﻿. SOFA API: sofa::helper::Creator< Factory, RealObject > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::Creator< Factory, RealObject > Class Template Reference . #include <Factory.h>. Inheritance diagram for sofa::helper::Creator< Factory, RealObject >:. [legend]. Public Member Functions;  Creator (Key key, bool multi=false);  ; ObjectPtr createInstance (Argument arg);  ; const std::type_info & type ();  ; void registerInFactory ();  ; const Key & getKey () const;  ;  Public Member Functions inherited from sofa::helper::BaseCreator< Object, Argument, ObjectPtr >; virtual ~BaseCreator ();  ; virtual ObjectPtr createInstance (Argument arg)=0;  . Constructor details. ◆ Creator(). template<class Factory , class RealObject > . sofa::helper::Creator< Factory, RealObject >::Creator ; (; Key ; key, . bool ; multi = false . ). inlineexplicit . Function details. ◆ createInstance(). template<class Factory , class RealObject > . ObjectPtr sofa::helper::Creator< Factory, RealObject >::createInstance ; (; Argument ; arg). inline . ◆ getKey(). template<class Factory , class RealObject > . const Key& sofa::helper::Creator< Factory, RealObject >::getKey ; (; ); const. inline . ◆ registerInFactory(). template<class Factory , class RealObject > . void sofa::helper::Creator< Factory, RealObject >::registerInFactory ; (; ). inline . ◆ type(). template<class Factory , class RealObject > . const std::type_info& sofa::helper::Creator< Factory, RealObject >::type ; (; ). inlinevirtual . Implements sofa::helper::BaseCreator< Object, Argument, ObjectPtr >. sofahelperCreator; Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_creator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_creator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_creator_fn-members.html:264,Modifiability,inherit,inherited,264,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::CreatorFn< Factory, RealObject > Member List . This is the complete list of members for sofa::helper::CreatorFn< Factory, RealObject >, including all inherited members. Argument typedefsofa::helper::CreatorFn< Factory, RealObject >; constructorsofa::helper::CreatorFn< Factory, RealObject >; createInstance(Argument arg)sofa::helper::CreatorFn< Factory, RealObject >inline; sofa::helper::BaseCreator::createInstance(Argument arg)=0sofa::helper::BaseCreator< Object, Argument, ObjectPtr >pure virtual; CreatorFn(Key key, Fn *constructor, bool multi=false)sofa::helper::CreatorFn< Factory, RealObject >inline; Fn typedefsofa::helper::CreatorFn< Factory, RealObject >; Key typedefsofa::helper::CreatorFn< Factory, RealObject >; Object typedefsofa::helper::CreatorFn< Factory, RealObject >; ObjectPtr typedefsofa::helper::CreatorFn< Factory, RealObject >; type()sofa::helper::CreatorFn< Factory, RealObject >inlinevirtual; ~BaseCreator()sofa::helper::BaseCreator< Object, Argument, ObjectPtr >inlinevirtual. Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_creator_fn-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_creator_fn-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_creator_fn.html:326,Modifiability,Inherit,Inheritance,326,"﻿. SOFA API: sofa::helper::CreatorFn< Factory, RealObject > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::helper::CreatorFn< Factory, RealObject > Class Template Reference . #include <Factory.h>. Inheritance diagram for sofa::helper::CreatorFn< Factory, RealObject >:. [legend]. Public Attributes; Fn * constructor;  . Public Member Functions;  CreatorFn (Key key, Fn *constructor, bool multi=false);  ; ObjectPtr createInstance (Argument arg);  ; const std::type_info & type ();  ;  Public Member Functions inherited from sofa::helper::BaseCreator< Object, Argument, ObjectPtr >; virtual ~BaseCreator ();  ; virtual ObjectPtr createInstance (Argument arg)=0;  . Attribute details. ◆ constructor. template<class Factory , class RealObject > . Fn* sofa::helper::CreatorFn< Factory, RealObject >::constructor. Constructor details. ◆ CreatorFn(). template<class Factory , class RealObject > . sofa::helper::CreatorFn< Factory, RealObject >::CreatorFn ; (; Key ; key, . Fn * ; constructor, . bool ; multi = false . ). inline . Function details. ◆ createInstance(). template<class Factory , class RealObject > . ObjectPtr sofa::helper::CreatorFn< Factory, RealObject >::createInstance ; (; Argument ; arg). inline . ◆ type(). template<class Factory , class RealObject > . const std::type_info& sofa::helper::CreatorFn< Factory, RealObject >::type ; (; ). inlinevirtual . Implements sofa::helper::BaseCreator< Object, Argument, ObjectPtr >. sofahelperCreatorFn; Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_creator_fn.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_creator_fn.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_creator_fn.html:638,Modifiability,inherit,inherited,638,"﻿. SOFA API: sofa::helper::CreatorFn< Factory, RealObject > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::helper::CreatorFn< Factory, RealObject > Class Template Reference . #include <Factory.h>. Inheritance diagram for sofa::helper::CreatorFn< Factory, RealObject >:. [legend]. Public Attributes; Fn * constructor;  . Public Member Functions;  CreatorFn (Key key, Fn *constructor, bool multi=false);  ; ObjectPtr createInstance (Argument arg);  ; const std::type_info & type ();  ;  Public Member Functions inherited from sofa::helper::BaseCreator< Object, Argument, ObjectPtr >; virtual ~BaseCreator ();  ; virtual ObjectPtr createInstance (Argument arg)=0;  . Attribute details. ◆ constructor. template<class Factory , class RealObject > . Fn* sofa::helper::CreatorFn< Factory, RealObject >::constructor. Constructor details. ◆ CreatorFn(). template<class Factory , class RealObject > . sofa::helper::CreatorFn< Factory, RealObject >::CreatorFn ; (; Key ; key, . Fn * ; constructor, . bool ; multi = false . ). inline . Function details. ◆ createInstance(). template<class Factory , class RealObject > . ObjectPtr sofa::helper::CreatorFn< Factory, RealObject >::createInstance ; (; Argument ; arg). inline . ◆ type(). template<class Factory , class RealObject > . const std::type_info& sofa::helper::CreatorFn< Factory, RealObject >::type ; (; ). inlinevirtual . Implements sofa::helper::BaseCreator< Object, Argument, ObjectPtr >. sofahelperCreatorFn; Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_creator_fn.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_creator_fn.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose-members.html:234,Modifiability,inherit,inherited,234,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::Decompose< Real > Member List . This is the complete list of members for sofa::helper::Decompose< Real >, including all inherited members. eigenDecomposition(const type::Mat< 3, 3, Real > &A, type::Mat< 3, 3, Real > &V, type::Vec< 3, Real > &diag)sofa::helper::Decompose< Real >static; eigenDecomposition(const type::Mat< 2, 2, Real > &A, type::Mat< 2, 2, Real > &V, type::Vec< 2, Real > &diag)sofa::helper::Decompose< Real >static; eigenDecomposition_iterative(const type::Mat< 3, 3, Real > &M, type::Mat< 3, 3, Real > &V, type::Vec< 3, Real > &diag)sofa::helper::Decompose< Real >static; eigenDecomposition_iterative(const type::Mat< 2, 2, Real > &M, type::Mat< 2, 2, Real > &V, type::Vec< 2, Real > &diag)sofa::helper::Decompose< Real >static; getRotation(type::Mat< 3, 3, Real > &r, type::Vec< 3, Real > &edgex, type::Vec< 3, Real > &edgey)sofa::helper::Decompose< Real >static; NSDProjection(type::Mat< 3, 3, Real > &A)sofa::helper::Decompose< Real >static; NSDProjection(type::Mat< 2, 2, Real > &A)sofa::helper::Decompose< Real >static; NSDProjection(Real &A00, Real &A01, Real &A10, Real &A11)sofa::helper::Decompose< Real >static; NSDProjection(type::Mat< 1, 1, Real > &)sofa::helper::Decompose< Real >inlinestatic; polarDecomposition(const type::Mat< 3, 3, Real > &M, type::Mat< 3, 3, Real > &Q, type::Mat< 3, 3, Real > &S)sofa::helper::Decompose< Real >static; polarDecomposition(const type::Mat< 3, 3, Real > &M, type::Mat< 3, 3, Real > &Q)sofa::helper::Decompose< Real >static; polarDecomposition(const type::Mat< 2, 2, Real > &M, type::Mat< 2, 2, Real > &Q)sofa::helper::Decompose< Real >static; polarDecomposition(const type::Mat< 3, 2, Real > &M, type::Mat< 3, 2, Real > &Q, type::Mat< 2, 2, Real > &S)sofa::helper::Decompose< Real >static; polarDecomposition_stable(const type::Mat< 3, 3, Real > &M, type::Mat< 3, 3, Real > &Q, type::Mat< 3, 3, Real > &S)sofa::helper::De",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_decompose-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html:23253,Availability,robust,robustness,23253,":helper::Decompose< Real >::SVD ; (; const type::Mat< 3, 3, Real > & ; F, . type::Mat< 3, 3, Real > & ; U, . type::Vec< 3, Real > & ; S, . type::Mat< 3, 3, Real > & ; V . ). static . SVD F = U*F_diagonal*V based on the Eigensystem decomposition of FtF all eigenvalues are positive Warning U & V are not guarantee to be rotations (they can be reflexions), eigenvalues are not sorted . ◆ SVD_stable() [1/3]. template<class Real > . bool sofa::helper::Decompose< Real >::SVD_stable ; (; const type::Mat< 2, 2, Real > & ; F, . type::Mat< 2, 2, Real > & ; U, . type::Vec< 2, Real > & ; S, . type::Mat< 2, 2, Real > & ; V . ). static . ◆ SVD_stable() [2/3]. template<class Real > . bool sofa::helper::Decompose< Real >::SVD_stable ; (; const type::Mat< 3, 2, Real > & ; F, . type::Mat< 3, 2, Real > & ; U, . type::Vec< 2, Real > & ; S, . type::Mat< 2, 2, Real > & ; V . ). static . SVD based on the Eigensystem decomposition of FtF with robustness against inversion and degenerate configurations Returnstrue in a degenerate case U & V are rotations Warning eigenvalues are not guaranteed to be positive, eigenvalues are not sorted . ◆ SVD_stable() [3/3]. template<class Real > . bool sofa::helper::Decompose< Real >::SVD_stable ; (; const type::Mat< 3, 3, Real > & ; F, . type::Mat< 3, 3, Real > & ; U, . type::Vec< 3, Real > & ; S, . type::Mat< 3, 3, Real > & ; V . ). static . SVD based on the Eigensystem decomposition of FtF with robustness against inversion and degenerate configurations Returnstrue iff the stabilization processed an inverted rotation or a degenerate case U & V are rotations Warning eigenvalues are not guaranteed to be positive, eigenvalues are not sorted . ◆ SVDGradient_dUdV() [1/2]. template<class Real > . bool sofa::helper::Decompose< Real >::SVDGradient_dUdV ; (; const type::Mat< 3, 2, Real > & ; U, . const type::Vec< 2, Real > & ; S, . const type::Mat< 2, 2, Real > & ; V, . const type::Mat< 3, 2, Real > & ; dM, . type::Mat< 3, 2, Real > & ; dU, . type::Mat< 2, 2, Real > ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html:23750,Availability,robust,robustness,23750,"ype::Mat< 2, 2, Real > & ; U, . type::Vec< 2, Real > & ; S, . type::Mat< 2, 2, Real > & ; V . ). static . ◆ SVD_stable() [2/3]. template<class Real > . bool sofa::helper::Decompose< Real >::SVD_stable ; (; const type::Mat< 3, 2, Real > & ; F, . type::Mat< 3, 2, Real > & ; U, . type::Vec< 2, Real > & ; S, . type::Mat< 2, 2, Real > & ; V . ). static . SVD based on the Eigensystem decomposition of FtF with robustness against inversion and degenerate configurations Returnstrue in a degenerate case U & V are rotations Warning eigenvalues are not guaranteed to be positive, eigenvalues are not sorted . ◆ SVD_stable() [3/3]. template<class Real > . bool sofa::helper::Decompose< Real >::SVD_stable ; (; const type::Mat< 3, 3, Real > & ; F, . type::Mat< 3, 3, Real > & ; U, . type::Vec< 3, Real > & ; S, . type::Mat< 3, 3, Real > & ; V . ). static . SVD based on the Eigensystem decomposition of FtF with robustness against inversion and degenerate configurations Returnstrue iff the stabilization processed an inverted rotation or a degenerate case U & V are rotations Warning eigenvalues are not guaranteed to be positive, eigenvalues are not sorted . ◆ SVDGradient_dUdV() [1/2]. template<class Real > . bool sofa::helper::Decompose< Real >::SVDGradient_dUdV ; (; const type::Mat< 3, 2, Real > & ; U, . const type::Vec< 2, Real > & ; S, . const type::Mat< 2, 2, Real > & ; V, . const type::Mat< 3, 2, Real > & ; dM, . type::Mat< 3, 2, Real > & ; dU, . type::Mat< 2, 2, Real > & ; dV . ). static . SVD rotation gradients, computes the rotation gradients dU & dV T. Papadopoulo, M.I.A. Lourakis, ""Estimating the Jacobian of the Singular Value Decomposition: Theory and Applications"", European Conference on Computer Vision, 2000 . ◆ SVDGradient_dUdV() [2/2]. template<class Real > . bool sofa::helper::Decompose< Real >::SVDGradient_dUdV ; (; const type::Mat< 3, 3, Real > & ; U, . const type::Vec< 3, Real > & ; S, . const type::Mat< 3, 3, Real > & ; V, . const type::Mat< 3, 3, Real > & ; dM, . type",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html:8160,Deployability,configurat,configurations,8160,"itive semi-definite) More...;  ; static void PSDProjection (Real &A00, Real &A01, Real &A10, Real &A11);  ; static void PSDProjection (type::Mat< 1, 1, Real > &);  ; static void NSDProjection (type::Mat< 3, 3, Real > &A);  project a symmetric 3x3 matrix to a NSD (symmetric, negative semi-definite) More...;  ; static void NSDProjection (type::Mat< 2, 2, Real > &A);  project a symmetric 2x2 matrix to a NSD (symmetric, negative semi-definite) More...;  ; static void NSDProjection (Real &A00, Real &A01, Real &A10, Real &A11);  ; static void NSDProjection (type::Mat< 1, 1, Real > &);  . Function details. ◆ eigenDecomposition() [1/2]. template<typename Real > . void sofa::helper::Decompose< Real >::eigenDecomposition ; (; const type::Mat< 2, 2, Real > & ; A, . type::Mat< 2, 2, Real > & ; V, . type::Vec< 2, Real > & ; diag . ). static . Non-iterative Eigensystem decomposition: eigenvaluesParameters. diagand eigenvectors (columns of; V)of the 2x2 Real Matrix; A. Warningthis method is instable in specific configurations TODO . ◆ eigenDecomposition() [2/2]. template<typename Real > . void sofa::helper::Decompose< Real >::eigenDecomposition ; (; const type::Mat< 3, 3, Real > & ; A, . type::Mat< 3, 3, Real > & ; V, . type::Vec< 3, Real > & ; diag . ). static . Non-iterative & faster Eigensystem decomposition: eigenvaluesParameters. diagand eigenvectors (columns of; V)of the 3x3 Real Matrix; ADerived from Wild Magic Library . ◆ eigenDecomposition_iterative() [1/2]. template<class Real > . void sofa::helper::Decompose< Real >::eigenDecomposition_iterative ; (; const type::Mat< 2, 2, Real > & ; M, . type::Mat< 2, 2, Real > & ; V, . type::Vec< 2, Real > & ; diag . ). static . Eigensystem decomposition: eigenvaluesParameters. diagand eigenvectors (columns of; V)of the 2x2 Real Matrix; MDerived from Wild Magic Library . ◆ eigenDecomposition_iterative() [2/2]. template<class Real > . void sofa::helper::Decompose< Real >::eigenDecomposition_iterative ; (; const type::Mat< 3, 3, Real > &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html:21050,Deployability,configurat,configuration,21050,"ctors, and the third basis vector is orthogonal to the two others. Undefined result if one of the vectors is null, or if the two vectors are parallel. . ◆ QRDecomposition_stable() [1/3]. template<class Real > . bool sofa::helper::Decompose< Real >::QRDecomposition_stable ; (; const type::Mat< 2, 2, Real > & ; M, . type::Mat< 2, 2, Real > & ; R . ). static . ◆ QRDecomposition_stable() [2/3]. template<class Real > . bool sofa::helper::Decompose< Real >::QRDecomposition_stable ; (; const type::Mat< 3, 2, Real > & ; M, . type::Mat< 3, 2, Real > & ; R . ). static . ◆ QRDecomposition_stable() [3/3]. template<class Real > . bool sofa::helper::Decompose< Real >::QRDecomposition_stable ; (; const type::Mat< 3, 3, Real > & ; M, . type::Mat< 3, 3, Real > & ; R . ). static . QR decomposition stable to null columns. Result is still undefined if two columns are parallel. In the clean case (not degenerated), there are only two additional 'if(x<e)' but no additional computations. Returnstrue in a degenerated configuration . ◆ QRDecompositionGradient_dQ(). template<class Real > . template<Size spatial_dimension, Size material_dimension> . static void sofa::helper::Decompose< Real >::QRDecompositionGradient_dQ ; (; const type::Mat< spatial_dimension, material_dimension, Real > & ; Q, . const type::Mat< material_dimension, material_dimension, Real > & ; invR, . const type::Mat< spatial_dimension, material_dimension, Real > & ; dM, . type::Mat< spatial_dimension, material_dimension, Real > & ; dQ . ). inlinestatic . QR decomposition (M=QR) rotation gradient dQ (invR = R^-1) Formula given in ""Finite Random Matrix Theory, Jacobians of Matrix Transforms (without wedge products)"", Alan Edelman, 2005, http://web.mit.edu/18.325/www/handouts/handout2.pdf Note that dR is also easy to compute. . ◆ SVD() [1/2]. template<class Real > . void sofa::helper::Decompose< Real >::SVD ; (; const type::Mat< 3, 2, Real > & ; F, . type::Mat< 3, 2, Real > & ; U, . type::Vec< 2, Real > & ; S, . type::Mat< 2, 2",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html:23297,Deployability,configurat,configurations,23297,":helper::Decompose< Real >::SVD ; (; const type::Mat< 3, 3, Real > & ; F, . type::Mat< 3, 3, Real > & ; U, . type::Vec< 3, Real > & ; S, . type::Mat< 3, 3, Real > & ; V . ). static . SVD F = U*F_diagonal*V based on the Eigensystem decomposition of FtF all eigenvalues are positive Warning U & V are not guarantee to be rotations (they can be reflexions), eigenvalues are not sorted . ◆ SVD_stable() [1/3]. template<class Real > . bool sofa::helper::Decompose< Real >::SVD_stable ; (; const type::Mat< 2, 2, Real > & ; F, . type::Mat< 2, 2, Real > & ; U, . type::Vec< 2, Real > & ; S, . type::Mat< 2, 2, Real > & ; V . ). static . ◆ SVD_stable() [2/3]. template<class Real > . bool sofa::helper::Decompose< Real >::SVD_stable ; (; const type::Mat< 3, 2, Real > & ; F, . type::Mat< 3, 2, Real > & ; U, . type::Vec< 2, Real > & ; S, . type::Mat< 2, 2, Real > & ; V . ). static . SVD based on the Eigensystem decomposition of FtF with robustness against inversion and degenerate configurations Returnstrue in a degenerate case U & V are rotations Warning eigenvalues are not guaranteed to be positive, eigenvalues are not sorted . ◆ SVD_stable() [3/3]. template<class Real > . bool sofa::helper::Decompose< Real >::SVD_stable ; (; const type::Mat< 3, 3, Real > & ; F, . type::Mat< 3, 3, Real > & ; U, . type::Vec< 3, Real > & ; S, . type::Mat< 3, 3, Real > & ; V . ). static . SVD based on the Eigensystem decomposition of FtF with robustness against inversion and degenerate configurations Returnstrue iff the stabilization processed an inverted rotation or a degenerate case U & V are rotations Warning eigenvalues are not guaranteed to be positive, eigenvalues are not sorted . ◆ SVDGradient_dUdV() [1/2]. template<class Real > . bool sofa::helper::Decompose< Real >::SVDGradient_dUdV ; (; const type::Mat< 3, 2, Real > & ; U, . const type::Vec< 2, Real > & ; S, . const type::Mat< 2, 2, Real > & ; V, . const type::Mat< 3, 2, Real > & ; dM, . type::Mat< 3, 2, Real > & ; dU, . type::Mat< 2, 2, Real > ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html:23794,Deployability,configurat,configurations,23794,"ype::Mat< 2, 2, Real > & ; U, . type::Vec< 2, Real > & ; S, . type::Mat< 2, 2, Real > & ; V . ). static . ◆ SVD_stable() [2/3]. template<class Real > . bool sofa::helper::Decompose< Real >::SVD_stable ; (; const type::Mat< 3, 2, Real > & ; F, . type::Mat< 3, 2, Real > & ; U, . type::Vec< 2, Real > & ; S, . type::Mat< 2, 2, Real > & ; V . ). static . SVD based on the Eigensystem decomposition of FtF with robustness against inversion and degenerate configurations Returnstrue in a degenerate case U & V are rotations Warning eigenvalues are not guaranteed to be positive, eigenvalues are not sorted . ◆ SVD_stable() [3/3]. template<class Real > . bool sofa::helper::Decompose< Real >::SVD_stable ; (; const type::Mat< 3, 3, Real > & ; F, . type::Mat< 3, 3, Real > & ; U, . type::Vec< 3, Real > & ; S, . type::Mat< 3, 3, Real > & ; V . ). static . SVD based on the Eigensystem decomposition of FtF with robustness against inversion and degenerate configurations Returnstrue iff the stabilization processed an inverted rotation or a degenerate case U & V are rotations Warning eigenvalues are not guaranteed to be positive, eigenvalues are not sorted . ◆ SVDGradient_dUdV() [1/2]. template<class Real > . bool sofa::helper::Decompose< Real >::SVDGradient_dUdV ; (; const type::Mat< 3, 2, Real > & ; U, . const type::Vec< 2, Real > & ; S, . const type::Mat< 2, 2, Real > & ; V, . const type::Mat< 3, 2, Real > & ; dM, . type::Mat< 3, 2, Real > & ; dU, . type::Mat< 2, 2, Real > & ; dV . ). static . SVD rotation gradients, computes the rotation gradients dU & dV T. Papadopoulo, M.I.A. Lourakis, ""Estimating the Jacobian of the Singular Value Decomposition: Theory and Applications"", European Conference on Computer Vision, 2000 . ◆ SVDGradient_dUdV() [2/2]. template<class Real > . bool sofa::helper::Decompose< Real >::SVDGradient_dUdV ; (; const type::Mat< 3, 3, Real > & ; U, . const type::Vec< 3, Real > & ; S, . const type::Mat< 3, 3, Real > & ; V, . const type::Mat< 3, 3, Real > & ; dM, . type",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html:8160,Modifiability,config,configurations,8160,"itive semi-definite) More...;  ; static void PSDProjection (Real &A00, Real &A01, Real &A10, Real &A11);  ; static void PSDProjection (type::Mat< 1, 1, Real > &);  ; static void NSDProjection (type::Mat< 3, 3, Real > &A);  project a symmetric 3x3 matrix to a NSD (symmetric, negative semi-definite) More...;  ; static void NSDProjection (type::Mat< 2, 2, Real > &A);  project a symmetric 2x2 matrix to a NSD (symmetric, negative semi-definite) More...;  ; static void NSDProjection (Real &A00, Real &A01, Real &A10, Real &A11);  ; static void NSDProjection (type::Mat< 1, 1, Real > &);  . Function details. ◆ eigenDecomposition() [1/2]. template<typename Real > . void sofa::helper::Decompose< Real >::eigenDecomposition ; (; const type::Mat< 2, 2, Real > & ; A, . type::Mat< 2, 2, Real > & ; V, . type::Vec< 2, Real > & ; diag . ). static . Non-iterative Eigensystem decomposition: eigenvaluesParameters. diagand eigenvectors (columns of; V)of the 2x2 Real Matrix; A. Warningthis method is instable in specific configurations TODO . ◆ eigenDecomposition() [2/2]. template<typename Real > . void sofa::helper::Decompose< Real >::eigenDecomposition ; (; const type::Mat< 3, 3, Real > & ; A, . type::Mat< 3, 3, Real > & ; V, . type::Vec< 3, Real > & ; diag . ). static . Non-iterative & faster Eigensystem decomposition: eigenvaluesParameters. diagand eigenvectors (columns of; V)of the 3x3 Real Matrix; ADerived from Wild Magic Library . ◆ eigenDecomposition_iterative() [1/2]. template<class Real > . void sofa::helper::Decompose< Real >::eigenDecomposition_iterative ; (; const type::Mat< 2, 2, Real > & ; M, . type::Mat< 2, 2, Real > & ; V, . type::Vec< 2, Real > & ; diag . ). static . Eigensystem decomposition: eigenvaluesParameters. diagand eigenvectors (columns of; V)of the 2x2 Real Matrix; MDerived from Wild Magic Library . ◆ eigenDecomposition_iterative() [2/2]. template<class Real > . void sofa::helper::Decompose< Real >::eigenDecomposition_iterative ; (; const type::Mat< 3, 3, Real > &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html:21050,Modifiability,config,configuration,21050,"ctors, and the third basis vector is orthogonal to the two others. Undefined result if one of the vectors is null, or if the two vectors are parallel. . ◆ QRDecomposition_stable() [1/3]. template<class Real > . bool sofa::helper::Decompose< Real >::QRDecomposition_stable ; (; const type::Mat< 2, 2, Real > & ; M, . type::Mat< 2, 2, Real > & ; R . ). static . ◆ QRDecomposition_stable() [2/3]. template<class Real > . bool sofa::helper::Decompose< Real >::QRDecomposition_stable ; (; const type::Mat< 3, 2, Real > & ; M, . type::Mat< 3, 2, Real > & ; R . ). static . ◆ QRDecomposition_stable() [3/3]. template<class Real > . bool sofa::helper::Decompose< Real >::QRDecomposition_stable ; (; const type::Mat< 3, 3, Real > & ; M, . type::Mat< 3, 3, Real > & ; R . ). static . QR decomposition stable to null columns. Result is still undefined if two columns are parallel. In the clean case (not degenerated), there are only two additional 'if(x<e)' but no additional computations. Returnstrue in a degenerated configuration . ◆ QRDecompositionGradient_dQ(). template<class Real > . template<Size spatial_dimension, Size material_dimension> . static void sofa::helper::Decompose< Real >::QRDecompositionGradient_dQ ; (; const type::Mat< spatial_dimension, material_dimension, Real > & ; Q, . const type::Mat< material_dimension, material_dimension, Real > & ; invR, . const type::Mat< spatial_dimension, material_dimension, Real > & ; dM, . type::Mat< spatial_dimension, material_dimension, Real > & ; dQ . ). inlinestatic . QR decomposition (M=QR) rotation gradient dQ (invR = R^-1) Formula given in ""Finite Random Matrix Theory, Jacobians of Matrix Transforms (without wedge products)"", Alan Edelman, 2005, http://web.mit.edu/18.325/www/handouts/handout2.pdf Note that dR is also easy to compute. . ◆ SVD() [1/2]. template<class Real > . void sofa::helper::Decompose< Real >::SVD ; (; const type::Mat< 3, 2, Real > & ; F, . type::Mat< 3, 2, Real > & ; U, . type::Vec< 2, Real > & ; S, . type::Mat< 2, 2",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html:23297,Modifiability,config,configurations,23297,":helper::Decompose< Real >::SVD ; (; const type::Mat< 3, 3, Real > & ; F, . type::Mat< 3, 3, Real > & ; U, . type::Vec< 3, Real > & ; S, . type::Mat< 3, 3, Real > & ; V . ). static . SVD F = U*F_diagonal*V based on the Eigensystem decomposition of FtF all eigenvalues are positive Warning U & V are not guarantee to be rotations (they can be reflexions), eigenvalues are not sorted . ◆ SVD_stable() [1/3]. template<class Real > . bool sofa::helper::Decompose< Real >::SVD_stable ; (; const type::Mat< 2, 2, Real > & ; F, . type::Mat< 2, 2, Real > & ; U, . type::Vec< 2, Real > & ; S, . type::Mat< 2, 2, Real > & ; V . ). static . ◆ SVD_stable() [2/3]. template<class Real > . bool sofa::helper::Decompose< Real >::SVD_stable ; (; const type::Mat< 3, 2, Real > & ; F, . type::Mat< 3, 2, Real > & ; U, . type::Vec< 2, Real > & ; S, . type::Mat< 2, 2, Real > & ; V . ). static . SVD based on the Eigensystem decomposition of FtF with robustness against inversion and degenerate configurations Returnstrue in a degenerate case U & V are rotations Warning eigenvalues are not guaranteed to be positive, eigenvalues are not sorted . ◆ SVD_stable() [3/3]. template<class Real > . bool sofa::helper::Decompose< Real >::SVD_stable ; (; const type::Mat< 3, 3, Real > & ; F, . type::Mat< 3, 3, Real > & ; U, . type::Vec< 3, Real > & ; S, . type::Mat< 3, 3, Real > & ; V . ). static . SVD based on the Eigensystem decomposition of FtF with robustness against inversion and degenerate configurations Returnstrue iff the stabilization processed an inverted rotation or a degenerate case U & V are rotations Warning eigenvalues are not guaranteed to be positive, eigenvalues are not sorted . ◆ SVDGradient_dUdV() [1/2]. template<class Real > . bool sofa::helper::Decompose< Real >::SVDGradient_dUdV ; (; const type::Mat< 3, 2, Real > & ; U, . const type::Vec< 2, Real > & ; S, . const type::Mat< 2, 2, Real > & ; V, . const type::Mat< 3, 2, Real > & ; dM, . type::Mat< 3, 2, Real > & ; dU, . type::Mat< 2, 2, Real > ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html:23794,Modifiability,config,configurations,23794,"ype::Mat< 2, 2, Real > & ; U, . type::Vec< 2, Real > & ; S, . type::Mat< 2, 2, Real > & ; V . ). static . ◆ SVD_stable() [2/3]. template<class Real > . bool sofa::helper::Decompose< Real >::SVD_stable ; (; const type::Mat< 3, 2, Real > & ; F, . type::Mat< 3, 2, Real > & ; U, . type::Vec< 2, Real > & ; S, . type::Mat< 2, 2, Real > & ; V . ). static . SVD based on the Eigensystem decomposition of FtF with robustness against inversion and degenerate configurations Returnstrue in a degenerate case U & V are rotations Warning eigenvalues are not guaranteed to be positive, eigenvalues are not sorted . ◆ SVD_stable() [3/3]. template<class Real > . bool sofa::helper::Decompose< Real >::SVD_stable ; (; const type::Mat< 3, 3, Real > & ; F, . type::Mat< 3, 3, Real > & ; U, . type::Vec< 3, Real > & ; S, . type::Mat< 3, 3, Real > & ; V . ). static . SVD based on the Eigensystem decomposition of FtF with robustness against inversion and degenerate configurations Returnstrue iff the stabilization processed an inverted rotation or a degenerate case U & V are rotations Warning eigenvalues are not guaranteed to be positive, eigenvalues are not sorted . ◆ SVDGradient_dUdV() [1/2]. template<class Real > . bool sofa::helper::Decompose< Real >::SVDGradient_dUdV ; (; const type::Mat< 3, 2, Real > & ; U, . const type::Vec< 2, Real > & ; S, . const type::Mat< 2, 2, Real > & ; V, . const type::Mat< 3, 2, Real > & ; dM, . type::Mat< 3, 2, Real > & ; dU, . type::Mat< 2, 2, Real > & ; dV . ). static . SVD rotation gradients, computes the rotation gradients dU & dV T. Papadopoulo, M.I.A. Lourakis, ""Estimating the Jacobian of the Singular Value Decomposition: Theory and Applications"", European Conference on Computer Vision, 2000 . ◆ SVDGradient_dUdV() [2/2]. template<class Real > . bool sofa::helper::Decompose< Real >::SVDGradient_dUdV ; (; const type::Mat< 3, 3, Real > & ; U, . const type::Vec< 3, Real > & ; S, . const type::Mat< 3, 3, Real > & ; V, . const type::Mat< 3, 3, Real > & ; dM, . type",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html:12425,Usability,simpl,simplified,12425,":Decompose< Real >::polarDecomposition ; (; const type::Mat< 3, 2, Real > & ; M, . type::Mat< 3, 2, Real > & ; Q, . type::Mat< 2, 2, Real > & ; S . ). static . Stable Polar Decomposition of 3x2 matrix based on a SVD using Q=UVt where M=UsV . ◆ polarDecomposition() [3/4]. template<class Real > . Real sofa::helper::Decompose< Real >::polarDecomposition ; (; const type::Mat< 3, 3, Real > & ; M, . type::Mat< 3, 3, Real > & ; Q . ). static . The same as previous except we do not care about S . ◆ polarDecomposition() [4/4]. template<class Real > . Real sofa::helper::Decompose< Real >::polarDecomposition ; (; const type::Mat< 3, 3, Real > & ; M, . type::Mat< 3, 3, Real > & ; Q, . type::Mat< 3, 3, Real > & ; S . ). static . Polar Decomposition of 3x3 matrix, M = QS. See Nicholas Higham and Robert S. Schreiber, Fast Polar Decomposition of An Arbitrary Matrix, Technical Report 88-942, October 1988, Department of Computer Science, Cornell University.; original code by Ken Shoemake, 1993 version simplified by Jernej Barbič imported from Vega . ◆ polarDecomposition_stable() [1/4]. template<class Real > . bool sofa::helper::Decompose< Real >::polarDecomposition_stable ; (; const type::Mat< 2, 2, Real > & ; M, . type::Mat< 2, 2, Real > & ; Q . ). static . ◆ polarDecomposition_stable() [2/4]. template<class Real > . bool sofa::helper::Decompose< Real >::polarDecomposition_stable ; (; const type::Mat< 2, 2, Real > & ; M, . type::Mat< 2, 2, Real > & ; Q, . type::Mat< 2, 2, Real > & ; S . ). static . ◆ polarDecomposition_stable() [3/4]. template<class Real > . bool sofa::helper::Decompose< Real >::polarDecomposition_stable ; (; const type::Mat< 3, 3, Real > & ; M, . type::Mat< 3, 3, Real > & ; Q . ). static . ◆ polarDecomposition_stable() [4/4]. template<class Real > . bool sofa::helper::Decompose< Real >::polarDecomposition_stable ; (; const type::Mat< 3, 3, Real > & ; M, . type::Mat< 3, 3, Real > & ; Q, . type::Mat< 3, 3, Real > & ; S . ). static . Stable Polar Decomposition of 3x3 ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_factory-members.html:282,Modifiability,inherit,inherited,282,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::Factory< TKey, TObject, TArgument, TPtr > Member List . This is the complete list of members for sofa::helper::Factory< TKey, TObject, TArgument, TPtr >, including all inherited members. Argument typedefsofa::helper::Factory< TKey, TObject, TArgument, TPtr >; begin()sofa::helper::Factory< TKey, TObject, TArgument, TPtr >inline; begin() constsofa::helper::Factory< TKey, TObject, TArgument, TPtr >inline; const_iterator typedefsofa::helper::Factory< TKey, TObject, TArgument, TPtr >; CreateAnyObject(Argument arg)sofa::helper::Factory< TKey, TObject, TArgument, TPtr >inlinestatic; createAnyObject(Argument arg)sofa::helper::Factory< TKey, TObject, TArgument, TPtr >; CreateObject(Key key, Argument arg)sofa::helper::Factory< TKey, TObject, TArgument, TPtr >inlinestatic; createObject(Key key, Argument arg=NoArgument())sofa::helper::Factory< TKey, TObject, TArgument, TPtr >inline; createObject(Key key, Argument arg)sofa::helper::Factory< TKey, TObject, TArgument, TPtr >; Creator typedefsofa::helper::Factory< TKey, TObject, TArgument, TPtr >; DuplicateEntry(Key existing, Key duplicate)sofa::helper::Factory< TKey, TObject, TArgument, TPtr >inlinestatic; duplicateEntry(Key existing, Key duplicate)sofa::helper::Factory< TKey, TObject, TArgument, TPtr >; end()sofa::helper::Factory< TKey, TObject, TArgument, TPtr >inline; end() constsofa::helper::Factory< TKey, TObject, TArgument, TPtr >inline; getInstance()sofa::helper::Factory< TKey, TObject, TArgument, TPtr >static; HasKey(Key key)sofa::helper::Factory< TKey, TObject, TArgument, TPtr >inlinestatic; hasKey(Key key)sofa::helper::Factory< TKey, TObject, TArgument, TPtr >; iterator typedefsofa::helper::Factory< TKey, TObject, TArgument, TPtr >; Key typedefsofa::helper::Factory< TKey, TObject, TArgument, TPtr >; Object typedefsofa::helper::Factory< TKey, TObject, TArgument, TPtr >; ObjectPtr typedefsofa::helper::Factory< T",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_factory-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_factory-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_factory.html:381,Modifiability,Inherit,Inheritance,381,"﻿. SOFA API: sofa::helper::Factory< TKey, TObject, TArgument, TPtr > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::helper::Factory< TKey, TObject, TArgument, TPtr > Class Template Reference . #include <Factory.h>. Inheritance diagram for sofa::helper::Factory< TKey, TObject, TArgument, TPtr >:. [legend]. Protected Attributes; std::multimap< Key, Creator * > registry;  . Public Member Functions; bool registerCreator (Key key, Creator *creator, bool multi=false);  ; template<class U = Argument, std::enable_if_t< std::is_same_v< U, NoArgument >, int > = 0> ; ObjectPtr createObject (Key key, Argument arg=NoArgument());  ; ObjectPtr createObject (Key key, Argument arg);  ; ObjectPtr createAnyObject (Argument arg);  ; template<typename OutIterator > ; void uniqueKeys (OutIterator out);  ; bool hasKey (Key key);  ; bool duplicateEntry (Key existing, Key duplicate);  ; bool resetEntry (Key existingKey);  ; iterator begin ();  ; iterator end ();  ; const_iterator begin () const;  ; const_iterator end () const;  . Static Public Member Functions; static Factory< Key, Object, Argument, ObjectPtr > * getInstance ();  ; static ObjectPtr CreateObject (Key key, Argument arg);  ; static ObjectPtr CreateAnyObject (Argument arg);  ; static bool HasKey (Key key);  ; static bool DuplicateEntry (Key existing, Key duplicate);  ; static bool ResetEntry (Key existing);  . Attribute details. ◆ registry. template<typename TKey , class TObject , typename TArgument = NoArgument, typename TPtr = TObject*> . std::multimap<Key, Creator*> sofa::helper::Factory< TKey, TObject, TArgument, TPtr >::registry. protected . Function details. ◆ begin() [1/2]. template<typename TKey , class TObject , typename TArgument = NoArgument, typename TPtr = TObject*> . iterator sofa::helper::Factory< TKey, TObject, TArgument, TPtr >::begin ; (; ). inline",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_fn_dispatcher-members.html:266,Modifiability,inherit,inherited,266,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::FnDispatcher< BaseClass, ResulT > Member List . This is the complete list of members for sofa::helper::FnDispatcher< BaseClass, ResulT >, including all inherited members. add()sofa::helper::FnDispatcher< BaseClass, ResulT >inline; BasicDispatcher< BaseClass, ResulT >::add(const std::type_info &class1, const std::type_info &class2, F fun)sofa::helper::BasicDispatcher< BaseClass, ResulT >; callBackMapsofa::helper::BasicDispatcher< BaseClass, ResulT >protected; defaultFn(BaseClass &arg1, BaseClass &arg2)sofa::helper::BasicDispatcher< BaseClass, ResulT >virtual; F typedefsofa::helper::BasicDispatcher< BaseClass, ResulT >; go(BaseClass &arg1, BaseClass &arg2)sofa::helper::BasicDispatcher< BaseClass, ResulT >; ignore()sofa::helper::FnDispatcher< BaseClass, ResulT >inline; BasicDispatcher< BaseClass, ResulT >::ignore(const std::type_info &class1, const std::type_info &class2)sofa::helper::BasicDispatcher< BaseClass, ResulT >; ignoreFn(BaseClass &arg1, BaseClass &arg2)sofa::helper::BasicDispatcher< BaseClass, ResulT >static; isSupported(BaseClass &arg1, BaseClass &arg2)sofa::helper::BasicDispatcher< BaseClass, ResulT >; KeyType typedefsofa::helper::BasicDispatcher< BaseClass, ResulT >protected; MapType typedefsofa::helper::BasicDispatcher< BaseClass, ResulT >protected; ~BasicDispatcher()sofa::helper::BasicDispatcher< BaseClass, ResulT >inlineprotectedvirtual. Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_fn_dispatcher-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_fn_dispatcher-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_fn_dispatcher.html:312,Modifiability,Inherit,Inheritance,312,"﻿. SOFA API: sofa::helper::FnDispatcher< BaseClass, ResulT > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::FnDispatcher< BaseClass, ResulT > Class Template Reference . #include <FnDispatcher.h>. Inheritance diagram for sofa::helper::FnDispatcher< BaseClass, ResulT >:. [legend]. Public Member Functions; template<class ConcreteClass1 , class ConcreteClass2 , ResulT(*)(ConcreteClass1 &, ConcreteClass2 &) F, bool symmetric> ; void add ();  ; template<class ConcreteClass1 , class ConcreteClass2 , bool symmetric> ; void ignore ();  ;  Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; void add (const std::type_info &class1, const std::type_info &class2, F fun);  ; void ignore (const std::type_info &class1, const std::type_info &class2);  ; void ignore ();  ; virtual ResulT defaultFn (BaseClass &arg1, BaseClass &arg2);  ; ResulT go (BaseClass &arg1, BaseClass &arg2);  ; bool isSupported (BaseClass &arg1, BaseClass &arg2);  Return true if a pair of argument correspond to a callback function (different than ignoreFn) More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; MapType callBackMap;  ;  Static Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; static ResulT ignoreFn (BaseClass &arg1, BaseClass &arg2);  ;  Protected Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; virtual ~BasicDispatcher ();  . Function details. ◆ add(). template<class BaseClass , typename ResulT > . template<class ConcreteClass1 , class ConcreteClass2 , ResulT(*)(ConcreteClass1 &, ConcreteClass2 &) F, bool symmetric> . void sofa::helper::FnDispatcher< BaseClass, ResulT >::add ; (; ). inline . ◆ ignore(). template<class BaseClass , typename ResulT > . template<class ConcreteClass1 , class ConcreteC",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_fn_dispatcher.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_fn_dispatcher.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_fn_dispatcher.html:676,Modifiability,inherit,inherited,676,"﻿. SOFA API: sofa::helper::FnDispatcher< BaseClass, ResulT > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::FnDispatcher< BaseClass, ResulT > Class Template Reference . #include <FnDispatcher.h>. Inheritance diagram for sofa::helper::FnDispatcher< BaseClass, ResulT >:. [legend]. Public Member Functions; template<class ConcreteClass1 , class ConcreteClass2 , ResulT(*)(ConcreteClass1 &, ConcreteClass2 &) F, bool symmetric> ; void add ();  ; template<class ConcreteClass1 , class ConcreteClass2 , bool symmetric> ; void ignore ();  ;  Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; void add (const std::type_info &class1, const std::type_info &class2, F fun);  ; void ignore (const std::type_info &class1, const std::type_info &class2);  ; void ignore ();  ; virtual ResulT defaultFn (BaseClass &arg1, BaseClass &arg2);  ; ResulT go (BaseClass &arg1, BaseClass &arg2);  ; bool isSupported (BaseClass &arg1, BaseClass &arg2);  Return true if a pair of argument correspond to a callback function (different than ignoreFn) More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; MapType callBackMap;  ;  Static Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; static ResulT ignoreFn (BaseClass &arg1, BaseClass &arg2);  ;  Protected Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; virtual ~BasicDispatcher ();  . Function details. ◆ add(). template<class BaseClass , typename ResulT > . template<class ConcreteClass1 , class ConcreteClass2 , ResulT(*)(ConcreteClass1 &, ConcreteClass2 &) F, bool symmetric> . void sofa::helper::FnDispatcher< BaseClass, ResulT >::add ; (; ). inline . ◆ ignore(). template<class BaseClass , typename ResulT > . template<class ConcreteClass1 , class ConcreteC",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_fn_dispatcher.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_fn_dispatcher.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_fn_dispatcher.html:1204,Modifiability,Inherit,Inherited,1204,"t of all members . sofa::helper::FnDispatcher< BaseClass, ResulT > Class Template Reference . #include <FnDispatcher.h>. Inheritance diagram for sofa::helper::FnDispatcher< BaseClass, ResulT >:. [legend]. Public Member Functions; template<class ConcreteClass1 , class ConcreteClass2 , ResulT(*)(ConcreteClass1 &, ConcreteClass2 &) F, bool symmetric> ; void add ();  ; template<class ConcreteClass1 , class ConcreteClass2 , bool symmetric> ; void ignore ();  ;  Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; void add (const std::type_info &class1, const std::type_info &class2, F fun);  ; void ignore (const std::type_info &class1, const std::type_info &class2);  ; void ignore ();  ; virtual ResulT defaultFn (BaseClass &arg1, BaseClass &arg2);  ; ResulT go (BaseClass &arg1, BaseClass &arg2);  ; bool isSupported (BaseClass &arg1, BaseClass &arg2);  Return true if a pair of argument correspond to a callback function (different than ignoreFn) More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; MapType callBackMap;  ;  Static Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; static ResulT ignoreFn (BaseClass &arg1, BaseClass &arg2);  ;  Protected Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; virtual ~BasicDispatcher ();  . Function details. ◆ add(). template<class BaseClass , typename ResulT > . template<class ConcreteClass1 , class ConcreteClass2 , ResulT(*)(ConcreteClass1 &, ConcreteClass2 &) F, bool symmetric> . void sofa::helper::FnDispatcher< BaseClass, ResulT >::add ; (; ). inline . ◆ ignore(). template<class BaseClass , typename ResulT > . template<class ConcreteClass1 , class ConcreteClass2 , bool symmetric> . void sofa::helper::FnDispatcher< BaseClass, ResulT >::ignore ; (; ). inline . sofahelperFnDispatcher; Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_fn_dispatcher.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_fn_dispatcher.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_fn_dispatcher.html:1245,Modifiability,inherit,inherited,1245,"t of all members . sofa::helper::FnDispatcher< BaseClass, ResulT > Class Template Reference . #include <FnDispatcher.h>. Inheritance diagram for sofa::helper::FnDispatcher< BaseClass, ResulT >:. [legend]. Public Member Functions; template<class ConcreteClass1 , class ConcreteClass2 , ResulT(*)(ConcreteClass1 &, ConcreteClass2 &) F, bool symmetric> ; void add ();  ; template<class ConcreteClass1 , class ConcreteClass2 , bool symmetric> ; void ignore ();  ;  Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; void add (const std::type_info &class1, const std::type_info &class2, F fun);  ; void ignore (const std::type_info &class1, const std::type_info &class2);  ; void ignore ();  ; virtual ResulT defaultFn (BaseClass &arg1, BaseClass &arg2);  ; ResulT go (BaseClass &arg1, BaseClass &arg2);  ; bool isSupported (BaseClass &arg1, BaseClass &arg2);  Return true if a pair of argument correspond to a callback function (different than ignoreFn) More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; MapType callBackMap;  ;  Static Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; static ResulT ignoreFn (BaseClass &arg1, BaseClass &arg2);  ;  Protected Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; virtual ~BasicDispatcher ();  . Function details. ◆ add(). template<class BaseClass , typename ResulT > . template<class ConcreteClass1 , class ConcreteClass2 , ResulT(*)(ConcreteClass1 &, ConcreteClass2 &) F, bool symmetric> . void sofa::helper::FnDispatcher< BaseClass, ResulT >::add ; (; ). inline . ◆ ignore(). template<class BaseClass , typename ResulT > . template<class ConcreteClass1 , class ConcreteClass2 , bool symmetric> . void sofa::helper::FnDispatcher< BaseClass, ResulT >::ignore ; (; ). inline . sofahelperFnDispatcher; Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_fn_dispatcher.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_fn_dispatcher.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_fn_dispatcher.html:1368,Modifiability,inherit,inherited,1368,"t of all members . sofa::helper::FnDispatcher< BaseClass, ResulT > Class Template Reference . #include <FnDispatcher.h>. Inheritance diagram for sofa::helper::FnDispatcher< BaseClass, ResulT >:. [legend]. Public Member Functions; template<class ConcreteClass1 , class ConcreteClass2 , ResulT(*)(ConcreteClass1 &, ConcreteClass2 &) F, bool symmetric> ; void add ();  ; template<class ConcreteClass1 , class ConcreteClass2 , bool symmetric> ; void ignore ();  ;  Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; void add (const std::type_info &class1, const std::type_info &class2, F fun);  ; void ignore (const std::type_info &class1, const std::type_info &class2);  ; void ignore ();  ; virtual ResulT defaultFn (BaseClass &arg1, BaseClass &arg2);  ; ResulT go (BaseClass &arg1, BaseClass &arg2);  ; bool isSupported (BaseClass &arg1, BaseClass &arg2);  Return true if a pair of argument correspond to a callback function (different than ignoreFn) More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; MapType callBackMap;  ;  Static Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; static ResulT ignoreFn (BaseClass &arg1, BaseClass &arg2);  ;  Protected Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; virtual ~BasicDispatcher ();  . Function details. ◆ add(). template<class BaseClass , typename ResulT > . template<class ConcreteClass1 , class ConcreteClass2 , ResulT(*)(ConcreteClass1 &, ConcreteClass2 &) F, bool symmetric> . void sofa::helper::FnDispatcher< BaseClass, ResulT >::add ; (; ). inline . ◆ ignore(). template<class BaseClass , typename ResulT > . template<class ConcreteClass1 , class ConcreteClass2 , bool symmetric> . void sofa::helper::FnDispatcher< BaseClass, ResulT >::ignore ; (; ). inline . sofahelperFnDispatcher; Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_fn_dispatcher.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_fn_dispatcher.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_fn_dispatcher.html:1525,Modifiability,inherit,inherited,1525,"t of all members . sofa::helper::FnDispatcher< BaseClass, ResulT > Class Template Reference . #include <FnDispatcher.h>. Inheritance diagram for sofa::helper::FnDispatcher< BaseClass, ResulT >:. [legend]. Public Member Functions; template<class ConcreteClass1 , class ConcreteClass2 , ResulT(*)(ConcreteClass1 &, ConcreteClass2 &) F, bool symmetric> ; void add ();  ; template<class ConcreteClass1 , class ConcreteClass2 , bool symmetric> ; void ignore ();  ;  Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; void add (const std::type_info &class1, const std::type_info &class2, F fun);  ; void ignore (const std::type_info &class1, const std::type_info &class2);  ; void ignore ();  ; virtual ResulT defaultFn (BaseClass &arg1, BaseClass &arg2);  ; ResulT go (BaseClass &arg1, BaseClass &arg2);  ; bool isSupported (BaseClass &arg1, BaseClass &arg2);  Return true if a pair of argument correspond to a callback function (different than ignoreFn) More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; MapType callBackMap;  ;  Static Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; static ResulT ignoreFn (BaseClass &arg1, BaseClass &arg2);  ;  Protected Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; virtual ~BasicDispatcher ();  . Function details. ◆ add(). template<class BaseClass , typename ResulT > . template<class ConcreteClass1 , class ConcreteClass2 , ResulT(*)(ConcreteClass1 &, ConcreteClass2 &) F, bool symmetric> . void sofa::helper::FnDispatcher< BaseClass, ResulT >::add ; (; ). inline . ◆ ignore(). template<class BaseClass , typename ResulT > . template<class ConcreteClass1 , class ConcreteClass2 , bool symmetric> . void sofa::helper::FnDispatcher< BaseClass, ResulT >::ignore ; (; ). inline . sofahelperFnDispatcher; Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_fn_dispatcher.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_fn_dispatcher.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_local_block33-members.html:224,Modifiability,inherit,inherited,224,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::LocalBlock33 Member List . This is the complete list of members for sofa::helper::LocalBlock33, including all inherited members. BiPotential(SReal &mu, SReal &dn, SReal &dt, SReal &ds, SReal &fn, SReal &ft, SReal &fs)sofa::helper::LocalBlock33; compute(SReal &w11, SReal &w12, SReal &w13, SReal &w22, SReal &w23, SReal &w33)sofa::helper::LocalBlock33; computedsofa::helper::LocalBlock33; detsofa::helper::LocalBlock33; f_1sofa::helper::LocalBlock33; GS_State(SReal &mu, SReal &dn, SReal &dt, SReal &ds, SReal &fn, SReal &ft, SReal &fs)sofa::helper::LocalBlock33; LocalBlock33()sofa::helper::LocalBlock33inline; New_GS_State(SReal &mu, SReal &dn, SReal &dt, SReal &ds, SReal &fn, SReal &ft, SReal &fs)sofa::helper::LocalBlock33; setPreviousForce(SReal &fn, SReal &ft, SReal &fs)sofa::helper::LocalBlock33inline; slipState(SReal &mu, SReal &dn, SReal &dt, SReal &ds, SReal &fn, SReal &ft, SReal &fs)sofa::helper::LocalBlock33; stickState(SReal &dn, SReal &dt, SReal &ds, SReal &fn, SReal &ft, SReal &fs)sofa::helper::LocalBlock33; wsofa::helper::LocalBlock33; wInvsofa::helper::LocalBlock33; ~LocalBlock33()sofa::helper::LocalBlock33inline. Generated on Mon Nov 11 2024 03:30:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_local_block33-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_local_block33-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p-members.html:275,Availability,error,errorsofa,275,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::LCP Member List . This is the complete list of members for sofa::helper::LCP, including all inherited members. allocate(unsigned int maxConst)sofa::helper::LCP; errorsofa::helper::LCP; getD(void)sofa::helper::LCPinline; getDfree(void)sofa::helper::LCPinline; getDim(void)sofa::helper::LCPinline; getF(void)sofa::helper::LCPinline; getF_1(void)sofa::helper::LCPinline; getMaxConst(void)sofa::helper::LCPinline; getMaxIter(void)sofa::helper::LCPinline; getMu(void)sofa::helper::LCPinline; getTolerance(void)sofa::helper::LCPinline; getW(void)sofa::helper::LCPinline; itsofa::helper::LCP; LCP()sofa::helper::LCP; reset(void)sofa::helper::LCP; setDim(unsigned int nbC)sofa::helper::LCPinline; setLCP(unsigned int input_dim, SReal *input_dfree, SReal **input_W, SReal *input_f, SReal &input_mu, SReal &input_tol, int input_numItMax)sofa::helper::LCP; setNumItMax(int input_numItMax)sofa::helper::LCPinline; setTol(SReal input_tol)sofa::helper::LCPinline; solveNLCP(bool convergenceTest, std::vector< SReal > *residuals=nullptr, std::vector< SReal > *violations=nullptr)sofa::helper::LCP; useInitialGuess(void)sofa::helper::LCPinline; ~LCP()sofa::helper::LCP. Generated on Mon Nov 11 2024 03:30:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p-members.html:225,Energy Efficiency,allocate,allocate,225,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::LCP Member List . This is the complete list of members for sofa::helper::LCP, including all inherited members. allocate(unsigned int maxConst)sofa::helper::LCP; errorsofa::helper::LCP; getD(void)sofa::helper::LCPinline; getDfree(void)sofa::helper::LCPinline; getDim(void)sofa::helper::LCPinline; getF(void)sofa::helper::LCPinline; getF_1(void)sofa::helper::LCPinline; getMaxConst(void)sofa::helper::LCPinline; getMaxIter(void)sofa::helper::LCPinline; getMu(void)sofa::helper::LCPinline; getTolerance(void)sofa::helper::LCPinline; getW(void)sofa::helper::LCPinline; itsofa::helper::LCP; LCP()sofa::helper::LCP; reset(void)sofa::helper::LCP; setDim(unsigned int nbC)sofa::helper::LCPinline; setLCP(unsigned int input_dim, SReal *input_dfree, SReal **input_W, SReal *input_f, SReal &input_mu, SReal &input_tol, int input_numItMax)sofa::helper::LCP; setNumItMax(int input_numItMax)sofa::helper::LCPinline; setTol(SReal input_tol)sofa::helper::LCPinline; solveNLCP(bool convergenceTest, std::vector< SReal > *residuals=nullptr, std::vector< SReal > *violations=nullptr)sofa::helper::LCP; useInitialGuess(void)sofa::helper::LCPinline; ~LCP()sofa::helper::LCP. Generated on Mon Nov 11 2024 03:30:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p-members.html:206,Modifiability,inherit,inherited,206,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::LCP Member List . This is the complete list of members for sofa::helper::LCP, including all inherited members. allocate(unsigned int maxConst)sofa::helper::LCP; errorsofa::helper::LCP; getD(void)sofa::helper::LCPinline; getDfree(void)sofa::helper::LCPinline; getDim(void)sofa::helper::LCPinline; getF(void)sofa::helper::LCPinline; getF_1(void)sofa::helper::LCPinline; getMaxConst(void)sofa::helper::LCPinline; getMaxIter(void)sofa::helper::LCPinline; getMu(void)sofa::helper::LCPinline; getTolerance(void)sofa::helper::LCPinline; getW(void)sofa::helper::LCPinline; itsofa::helper::LCP; LCP()sofa::helper::LCP; reset(void)sofa::helper::LCP; setDim(unsigned int nbC)sofa::helper::LCPinline; setLCP(unsigned int input_dim, SReal *input_dfree, SReal **input_W, SReal *input_f, SReal &input_mu, SReal &input_tol, int input_numItMax)sofa::helper::LCP; setNumItMax(int input_numItMax)sofa::helper::LCPinline; setTol(SReal input_tol)sofa::helper::LCPinline; solveNLCP(bool convergenceTest, std::vector< SReal > *residuals=nullptr, std::vector< SReal > *violations=nullptr)sofa::helper::LCP; useInitialGuess(void)sofa::helper::LCPinline; ~LCP()sofa::helper::LCP. Generated on Mon Nov 11 2024 03:30:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html:286,Availability,error,error,286,"﻿. SOFA API: sofa::helper::LCP Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::helper::LCP Class Reference . #include <LCPcalc.h>. Public Attributes; int it;  ; SReal error;  . Public Member Functions;  LCP ();  ;  ~LCP ();  ; void reset (void);  ; void allocate (unsigned int maxConst);  ; SReal ** getW (void);  ; SReal & getMu (void);  ; SReal * getDfree (void);  ; SReal getTolerance (void);  ; SReal getMaxIter (void);  ; SReal * getF (void);  ; SReal * getF_1 (void);  ; SReal * getD (void);  ; bool useInitialGuess (void);  ; unsigned int getDim (void);  ; unsigned int setDim (unsigned int nbC);  ; unsigned int getMaxConst (void);  ; void setNumItMax (int input_numItMax);  ; void setTol (SReal input_tol);  ; void setLCP (unsigned int input_dim, SReal *input_dfree, SReal **input_W, SReal *input_f, SReal &input_mu, SReal &input_tol, int input_numItMax);  ; void solveNLCP (bool convergenceTest, std::vector< SReal > *residuals=nullptr, std::vector< SReal > *violations=nullptr);  . Attribute details. ◆ error. SReal sofa::helper::LCP::error. ◆ it. int sofa::helper::LCP::it. Constructor details. ◆ LCP(). sofa::helper::LCP::LCP ; (; ). ◆ ~LCP(). sofa::helper::LCP::~LCP ; (; ). Function details. ◆ allocate(). void sofa::helper::LCP::allocate ; (; unsigned int ; maxConst). ◆ getD(). SReal* sofa::helper::LCP::getD ; (; void ; ). inline . ◆ getDfree(). SReal* sofa::helper::LCP::getDfree ; (; void ; ). inline . ◆ getDim(). unsigned int sofa::helper::LCP::getDim ; (; void ; ). inline . ◆ getF(). SReal* sofa::helper::LCP::getF ; (; void ; ). inline . ◆ getF_1(). SReal* sofa::helper::LCP::getF_1 ; (; void ; ). inline . ◆ getMaxConst(). unsigned int sofa::helper::LCP::getMaxConst ; (; void ; ). inline . ◆ getMaxIter(). SReal sofa::helper::LCP::getMaxIter ; (; void ; ). inline . ◆ getMu(). SReal& sofa::helper::LCP::getMu ; (; void ; ). inline . ◆ getTolerance(). SRea",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html:1133,Availability,error,error,1133,"butes |; Public Member Functions |; List of all members . sofa::helper::LCP Class Reference . #include <LCPcalc.h>. Public Attributes; int it;  ; SReal error;  . Public Member Functions;  LCP ();  ;  ~LCP ();  ; void reset (void);  ; void allocate (unsigned int maxConst);  ; SReal ** getW (void);  ; SReal & getMu (void);  ; SReal * getDfree (void);  ; SReal getTolerance (void);  ; SReal getMaxIter (void);  ; SReal * getF (void);  ; SReal * getF_1 (void);  ; SReal * getD (void);  ; bool useInitialGuess (void);  ; unsigned int getDim (void);  ; unsigned int setDim (unsigned int nbC);  ; unsigned int getMaxConst (void);  ; void setNumItMax (int input_numItMax);  ; void setTol (SReal input_tol);  ; void setLCP (unsigned int input_dim, SReal *input_dfree, SReal **input_W, SReal *input_f, SReal &input_mu, SReal &input_tol, int input_numItMax);  ; void solveNLCP (bool convergenceTest, std::vector< SReal > *residuals=nullptr, std::vector< SReal > *violations=nullptr);  . Attribute details. ◆ error. SReal sofa::helper::LCP::error. ◆ it. int sofa::helper::LCP::it. Constructor details. ◆ LCP(). sofa::helper::LCP::LCP ; (; ). ◆ ~LCP(). sofa::helper::LCP::~LCP ; (; ). Function details. ◆ allocate(). void sofa::helper::LCP::allocate ; (; unsigned int ; maxConst). ◆ getD(). SReal* sofa::helper::LCP::getD ; (; void ; ). inline . ◆ getDfree(). SReal* sofa::helper::LCP::getDfree ; (; void ; ). inline . ◆ getDim(). unsigned int sofa::helper::LCP::getDim ; (; void ; ). inline . ◆ getF(). SReal* sofa::helper::LCP::getF ; (; void ; ). inline . ◆ getF_1(). SReal* sofa::helper::LCP::getF_1 ; (; void ; ). inline . ◆ getMaxConst(). unsigned int sofa::helper::LCP::getMaxConst ; (; void ; ). inline . ◆ getMaxIter(). SReal sofa::helper::LCP::getMaxIter ; (; void ; ). inline . ◆ getMu(). SReal& sofa::helper::LCP::getMu ; (; void ; ). inline . ◆ getTolerance(). SReal sofa::helper::LCP::getTolerance ; (; void ; ). inline . ◆ getW(). SReal** sofa::helper::LCP::getW ; (; void ; ). inline . ◆ reset().",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html:1165,Availability,error,error,1165,"r Functions |; List of all members . sofa::helper::LCP Class Reference . #include <LCPcalc.h>. Public Attributes; int it;  ; SReal error;  . Public Member Functions;  LCP ();  ;  ~LCP ();  ; void reset (void);  ; void allocate (unsigned int maxConst);  ; SReal ** getW (void);  ; SReal & getMu (void);  ; SReal * getDfree (void);  ; SReal getTolerance (void);  ; SReal getMaxIter (void);  ; SReal * getF (void);  ; SReal * getF_1 (void);  ; SReal * getD (void);  ; bool useInitialGuess (void);  ; unsigned int getDim (void);  ; unsigned int setDim (unsigned int nbC);  ; unsigned int getMaxConst (void);  ; void setNumItMax (int input_numItMax);  ; void setTol (SReal input_tol);  ; void setLCP (unsigned int input_dim, SReal *input_dfree, SReal **input_W, SReal *input_f, SReal &input_mu, SReal &input_tol, int input_numItMax);  ; void solveNLCP (bool convergenceTest, std::vector< SReal > *residuals=nullptr, std::vector< SReal > *violations=nullptr);  . Attribute details. ◆ error. SReal sofa::helper::LCP::error. ◆ it. int sofa::helper::LCP::it. Constructor details. ◆ LCP(). sofa::helper::LCP::LCP ; (; ). ◆ ~LCP(). sofa::helper::LCP::~LCP ; (; ). Function details. ◆ allocate(). void sofa::helper::LCP::allocate ; (; unsigned int ; maxConst). ◆ getD(). SReal* sofa::helper::LCP::getD ; (; void ; ). inline . ◆ getDfree(). SReal* sofa::helper::LCP::getDfree ; (; void ; ). inline . ◆ getDim(). unsigned int sofa::helper::LCP::getDim ; (; void ; ). inline . ◆ getF(). SReal* sofa::helper::LCP::getF ; (; void ; ). inline . ◆ getF_1(). SReal* sofa::helper::LCP::getF_1 ; (; void ; ). inline . ◆ getMaxConst(). unsigned int sofa::helper::LCP::getMaxConst ; (; void ; ). inline . ◆ getMaxIter(). SReal sofa::helper::LCP::getMaxIter ; (; void ; ). inline . ◆ getMu(). SReal& sofa::helper::LCP::getMu ; (; void ; ). inline . ◆ getTolerance(). SReal sofa::helper::LCP::getTolerance ; (; void ; ). inline . ◆ getW(). SReal** sofa::helper::LCP::getW ; (; void ; ). inline . ◆ reset(). void sofa::helper::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html:373,Energy Efficiency,allocate,allocate,373,"﻿. SOFA API: sofa::helper::LCP Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::helper::LCP Class Reference . #include <LCPcalc.h>. Public Attributes; int it;  ; SReal error;  . Public Member Functions;  LCP ();  ;  ~LCP ();  ; void reset (void);  ; void allocate (unsigned int maxConst);  ; SReal ** getW (void);  ; SReal & getMu (void);  ; SReal * getDfree (void);  ; SReal getTolerance (void);  ; SReal getMaxIter (void);  ; SReal * getF (void);  ; SReal * getF_1 (void);  ; SReal * getD (void);  ; bool useInitialGuess (void);  ; unsigned int getDim (void);  ; unsigned int setDim (unsigned int nbC);  ; unsigned int getMaxConst (void);  ; void setNumItMax (int input_numItMax);  ; void setTol (SReal input_tol);  ; void setLCP (unsigned int input_dim, SReal *input_dfree, SReal **input_W, SReal *input_f, SReal &input_mu, SReal &input_tol, int input_numItMax);  ; void solveNLCP (bool convergenceTest, std::vector< SReal > *residuals=nullptr, std::vector< SReal > *violations=nullptr);  . Attribute details. ◆ error. SReal sofa::helper::LCP::error. ◆ it. int sofa::helper::LCP::it. Constructor details. ◆ LCP(). sofa::helper::LCP::LCP ; (; ). ◆ ~LCP(). sofa::helper::LCP::~LCP ; (; ). Function details. ◆ allocate(). void sofa::helper::LCP::allocate ; (; unsigned int ; maxConst). ◆ getD(). SReal* sofa::helper::LCP::getD ; (; void ; ). inline . ◆ getDfree(). SReal* sofa::helper::LCP::getDfree ; (; void ; ). inline . ◆ getDim(). unsigned int sofa::helper::LCP::getDim ; (; void ; ). inline . ◆ getF(). SReal* sofa::helper::LCP::getF ; (; void ; ). inline . ◆ getF_1(). SReal* sofa::helper::LCP::getF_1 ; (; void ; ). inline . ◆ getMaxConst(). unsigned int sofa::helper::LCP::getMaxConst ; (; void ; ). inline . ◆ getMaxIter(). SReal sofa::helper::LCP::getMaxIter ; (; void ; ). inline . ◆ getMu(). SReal& sofa::helper::LCP::getMu ; (; void ; ). inline . ◆ getTolerance(). SRea",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html:1328,Energy Efficiency,allocate,allocate,1328,"  ~LCP ();  ; void reset (void);  ; void allocate (unsigned int maxConst);  ; SReal ** getW (void);  ; SReal & getMu (void);  ; SReal * getDfree (void);  ; SReal getTolerance (void);  ; SReal getMaxIter (void);  ; SReal * getF (void);  ; SReal * getF_1 (void);  ; SReal * getD (void);  ; bool useInitialGuess (void);  ; unsigned int getDim (void);  ; unsigned int setDim (unsigned int nbC);  ; unsigned int getMaxConst (void);  ; void setNumItMax (int input_numItMax);  ; void setTol (SReal input_tol);  ; void setLCP (unsigned int input_dim, SReal *input_dfree, SReal **input_W, SReal *input_f, SReal &input_mu, SReal &input_tol, int input_numItMax);  ; void solveNLCP (bool convergenceTest, std::vector< SReal > *residuals=nullptr, std::vector< SReal > *violations=nullptr);  . Attribute details. ◆ error. SReal sofa::helper::LCP::error. ◆ it. int sofa::helper::LCP::it. Constructor details. ◆ LCP(). sofa::helper::LCP::LCP ; (; ). ◆ ~LCP(). sofa::helper::LCP::~LCP ; (; ). Function details. ◆ allocate(). void sofa::helper::LCP::allocate ; (; unsigned int ; maxConst). ◆ getD(). SReal* sofa::helper::LCP::getD ; (; void ; ). inline . ◆ getDfree(). SReal* sofa::helper::LCP::getDfree ; (; void ; ). inline . ◆ getDim(). unsigned int sofa::helper::LCP::getDim ; (; void ; ). inline . ◆ getF(). SReal* sofa::helper::LCP::getF ; (; void ; ). inline . ◆ getF_1(). SReal* sofa::helper::LCP::getF_1 ; (; void ; ). inline . ◆ getMaxConst(). unsigned int sofa::helper::LCP::getMaxConst ; (; void ; ). inline . ◆ getMaxIter(). SReal sofa::helper::LCP::getMaxIter ; (; void ; ). inline . ◆ getMu(). SReal& sofa::helper::LCP::getMu ; (; void ; ). inline . ◆ getTolerance(). SReal sofa::helper::LCP::getTolerance ; (; void ; ). inline . ◆ getW(). SReal** sofa::helper::LCP::getW ; (; void ; ). inline . ◆ reset(). void sofa::helper::LCP::reset ; (; void ; ). ◆ setDim(). unsigned int sofa::helper::LCP::setDim ; (; unsigned int ; nbC). inline . ◆ setLCP(). void sofa::helper::LCP::setLCP ; (; unsigned int ; in",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html:1364,Energy Efficiency,allocate,allocate,1364,"d allocate (unsigned int maxConst);  ; SReal ** getW (void);  ; SReal & getMu (void);  ; SReal * getDfree (void);  ; SReal getTolerance (void);  ; SReal getMaxIter (void);  ; SReal * getF (void);  ; SReal * getF_1 (void);  ; SReal * getD (void);  ; bool useInitialGuess (void);  ; unsigned int getDim (void);  ; unsigned int setDim (unsigned int nbC);  ; unsigned int getMaxConst (void);  ; void setNumItMax (int input_numItMax);  ; void setTol (SReal input_tol);  ; void setLCP (unsigned int input_dim, SReal *input_dfree, SReal **input_W, SReal *input_f, SReal &input_mu, SReal &input_tol, int input_numItMax);  ; void solveNLCP (bool convergenceTest, std::vector< SReal > *residuals=nullptr, std::vector< SReal > *violations=nullptr);  . Attribute details. ◆ error. SReal sofa::helper::LCP::error. ◆ it. int sofa::helper::LCP::it. Constructor details. ◆ LCP(). sofa::helper::LCP::LCP ; (; ). ◆ ~LCP(). sofa::helper::LCP::~LCP ; (; ). Function details. ◆ allocate(). void sofa::helper::LCP::allocate ; (; unsigned int ; maxConst). ◆ getD(). SReal* sofa::helper::LCP::getD ; (; void ; ). inline . ◆ getDfree(). SReal* sofa::helper::LCP::getDfree ; (; void ; ). inline . ◆ getDim(). unsigned int sofa::helper::LCP::getDim ; (; void ; ). inline . ◆ getF(). SReal* sofa::helper::LCP::getF ; (; void ; ). inline . ◆ getF_1(). SReal* sofa::helper::LCP::getF_1 ; (; void ; ). inline . ◆ getMaxConst(). unsigned int sofa::helper::LCP::getMaxConst ; (; void ; ). inline . ◆ getMaxIter(). SReal sofa::helper::LCP::getMaxIter ; (; void ; ). inline . ◆ getMu(). SReal& sofa::helper::LCP::getMu ; (; void ; ). inline . ◆ getTolerance(). SReal sofa::helper::LCP::getTolerance ; (; void ; ). inline . ◆ getW(). SReal** sofa::helper::LCP::getW ; (; void ; ). inline . ◆ reset(). void sofa::helper::LCP::reset ; (; void ; ). ◆ setDim(). unsigned int sofa::helper::LCP::setDim ; (; unsigned int ; nbC). inline . ◆ setLCP(). void sofa::helper::LCP::setLCP ; (; unsigned int ; input_dim, . SReal * ; input_dfree, . SRe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_marching_cube_utility-members.html:238,Modifiability,inherit,inherited,238,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::MarchingCubeUtility Member List . This is the complete list of members for sofa::helper::MarchingCubeUtility, including all inherited members. findSeeds(vector< type::Vec3i > &seeds, const float isoValue, unsigned char *_data)sofa::helper::MarchingCubeUtility; findSeedsFromRealCoords(vector< type::Vec3i > &mCubeCoords, const vector< type::Vec3 > &realCoords) constsofa::helper::MarchingCubeUtility; MarchingCubeUtility()sofa::helper::MarchingCubeUtility; PointID typedefsofa::helper::MarchingCubeUtility; run(unsigned char *data, const float isolevel, sofa::type::vector< PointID > &triangles, sofa::type::vector< type::Vec3 > &vertices, type::vector< type::vector< unsigned int > > *triangleIndexInRegularGrid=nullptr) constsofa::helper::MarchingCubeUtility; run(unsigned char *_data, const sofa::type::vector< type::Vec3i > &seeds, const float isolevel, sofa::type::vector< PointID > &mesh, sofa::type::vector< type::Vec3 > &vertices, std::map< type::Vec3, PointID > &map_vertices, type::vector< type::vector< unsigned int > > *triangleIndexInRegularGrid, bool propagate) constsofa::helper::MarchingCubeUtility; run(unsigned char *data, const vector< type::Vec3i > &seeds, const float isolevel, sofa::type::vector< PointID > &triangles, sofa::type::vector< type::Vec3 > &vertices, type::vector< type::vector< unsigned int > > *triangleIndexInRegularGrid=nullptr, bool propagate=true) constsofa::helper::MarchingCubeUtility; run(unsigned char *data, const float isolevel, sofa::helper::io::Mesh &m) constsofa::helper::MarchingCubeUtility; setBoundingBox(const type::Vec6i &roi)sofa::helper::MarchingCubeUtilityinline; setBoundingBox(const type::Vec3i &min, const type::Vec3i &max)sofa::helper::MarchingCubeUtilityinline; setBoundingBoxFromRealCoords(const type::Vec3 &min, const type::Vec3 &max)sofa::helper::MarchingCubeUtilityinline; setConvolutionSize(const unsigned int convolutio",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_marching_cube_utility-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_marching_cube_utility-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_memory_manager-members.html:236,Modifiability,inherit,inherited,236,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::MemoryManager< T > Member List . This is the complete list of members for sofa::helper::MemoryManager< T >, including all inherited members. BSIZE enum valuesofa::helper::MemoryManager< T >; buffer_id_type typedefsofa::helper::MemoryManager< T >; bufferAlloc(buffer_id_type *, int, bool)sofa::helper::MemoryManager< T >inlinestatic; bufferFree(const buffer_id_type)sofa::helper::MemoryManager< T >inlinestatic; bufferMapToDevice(device_pointer *, const buffer_id_type)sofa::helper::MemoryManager< T >inlinestatic; bufferRegister(const buffer_id_type)sofa::helper::MemoryManager< T >inlinestatic; bufferUnmapToDevice(device_pointer *, const buffer_id_type)sofa::helper::MemoryManager< T >inlinestatic; bufferUnregister(const buffer_id_type)sofa::helper::MemoryManager< T >inlinestatic; device_pointer typedefsofa::helper::MemoryManager< T >; deviceAlloc(int d, device_pointer *dPointer, int n)sofa::helper::MemoryManager< T >static; deviceFree(int d, const device_pointer dSrcPointer)sofa::helper::MemoryManager< T >static; deviceOffset(device_pointer dPointer, size_t offset)sofa::helper::MemoryManager< T >inlinestatic; getBufferDevice()sofa::helper::MemoryManager< T >static; host_pointer typedefsofa::helper::MemoryManager< T >; hostAlloc(host_pointer *hPointer, int n)sofa::helper::MemoryManager< T >inlinestatic; hostFree(const host_pointer hSrcPointer)sofa::helper::MemoryManager< T >static; isNull(device_pointer p)sofa::helper::MemoryManager< T >inlinestatic; MAX_DEVICES enum valuesofa::helper::MemoryManager< T >; memcpyDeviceToDevice(int d, device_pointer dDestPointer, const device_pointer dSrcPointer, size_t n)sofa::helper::MemoryManager< T >static; memcpyDeviceToHost(int d, host_pointer hDestPointer, const void *dSrcPointer, size_t n)sofa::helper::MemoryManager< T >static; memcpyHostToDevice(int d, device_pointer dDestPointer, const host_pointer hSrcPointer, size_t n)",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_memory_manager-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_memory_manager-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_memory_manager.html:461,Availability,error,error,461,"﻿. SOFA API: sofa::helper::MemoryManager< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::helper::MemoryManager< T > Class Template Reference . #include <MemoryManager.h>; Detailed Description; template<class T>; class sofa::helper::MemoryManager< T >; Generic MemoryManager Its use is informative only, and it cannot be instantiated (linkage error otherwise). . Static Public Member Functions; static int numDevices ();  ; static void hostAlloc (host_pointer *hPointer, int n);  ; static void memsetHost (host_pointer hPointer, int value, size_t n);  ; static void hostFree (const host_pointer hSrcPointer);  ; static void deviceAlloc (int d, device_pointer *dPointer, int n);  ; static void deviceFree (int d, const device_pointer dSrcPointer);  ; static void memcpyHostToDevice (int d, device_pointer dDestPointer, const host_pointer hSrcPointer, size_t n);  ; static void memcpyDeviceToHost (int d, host_pointer hDestPointer, const void *dSrcPointer, size_t n);  ; static void memcpyDeviceToDevice (int d, device_pointer dDestPointer, const device_pointer dSrcPointer, size_t n);  ; static void memsetDevice (int d, device_pointer dDestPointer, int value, size_t n);  ; static int getBufferDevice ();  ; static bool bufferAlloc (buffer_id_type *, int, bool);  ; static void bufferFree (const buffer_id_type);  ; static bool bufferRegister (const buffer_id_type);  ; static void bufferUnregister (const buffer_id_type);  ; static bool bufferMapToDevice (device_pointer *, const buffer_id_type);  ; static void bufferUnmapToDevice (device_pointer *, const buffer_id_type);  ; static device_pointer deviceOffset (device_pointer dPointer, size_t offset);  ; static device_pointer null ();  ; static bool isNull (device_pointer p);  . Function details. ◆ bufferAlloc(). template<class T > . static bool sofa::helper::MemoryManager< T >::bufferAlloc ; (; buffer_id_type * ; , . int ; ,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_memory_manager.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_memory_manager.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d-members.html:2205,Energy Efficiency,power,powerssofa,2205,", unsigned int idvar) constsofa::helper::Monomial_LD< Real, N >; operator*(const Real &alpha)sofa::helper::Monomial_LD< Real, N >inline; operator*(const Monomial_LD< Real, N > &a)sofa::helper::Monomial_LD< Real, N >inline; operator*(const FReal &alpha, Monomial_LD< FReal, FN > &r)sofa::helper::Monomial_LD< Real, N >friend; operator*=(const Real &alpha)sofa::helper::Monomial_LD< Real, N >inline; operator*=(const Monomial_LD< Real, N > &b)sofa::helper::Monomial_LD< Real, N >; operator+() constsofa::helper::Monomial_LD< Real, N >inline; operator+(const Monomial_LD< Real, N > &a)sofa::helper::Monomial_LD< Real, N >inline; operator+=(const Monomial_LD< Real, N > &b)sofa::helper::Monomial_LD< Real, N >; operator-() constsofa::helper::Monomial_LD< Real, N >inline; operator-(const Monomial_LD< Real, N > &a)sofa::helper::Monomial_LD< Real, N >inline; operator-=(const Monomial_LD< Real, N > &b)sofa::helper::Monomial_LD< Real, N >; operator/(const Real &alpha)sofa::helper::Monomial_LD< Real, N >inline; operator/=(const Real &alpha)sofa::helper::Monomial_LD< Real, N >inline; operator=(const Monomial_LD< Real, N > &b)sofa::helper::Monomial_LD< Real, N >; operator==(const Monomial_LD< Real, N > &b) constsofa::helper::Monomial_LD< Real, N >; powerssofa::helper::Monomial_LD< Real, N >; readFromStream(std::istream &ff)sofa::helper::Monomial_LD< Real, N >; RNpoint typedefsofa::helper::Monomial_LD< Real, N >; SetCoef(const Real &m_coef)sofa::helper::Monomial_LD< Real, N >inline; SetPower(int numbervar, int powervalue)sofa::helper::Monomial_LD< Real, N >inline; variablessofa::helper::Monomial_LD< Real, N >protected; writeToStream(std::ostream &ff) constsofa::helper::Monomial_LD< Real, N >; x enum valuesofa::helper::Monomial_LD< Real, N >; xy enum valuesofa::helper::Monomial_LD< Real, N >; y enum valuesofa::helper::Monomial_LD< Real, N >; yz enum valuesofa::helper::Monomial_LD< Real, N >; z enum valuesofa::helper::Monomial_LD< Real, N >; zx enum valuesofa::helper::Monomial_LD< Real, N >.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d-members.html:2471,Energy Efficiency,power,powervalue,2471,", unsigned int idvar) constsofa::helper::Monomial_LD< Real, N >; operator*(const Real &alpha)sofa::helper::Monomial_LD< Real, N >inline; operator*(const Monomial_LD< Real, N > &a)sofa::helper::Monomial_LD< Real, N >inline; operator*(const FReal &alpha, Monomial_LD< FReal, FN > &r)sofa::helper::Monomial_LD< Real, N >friend; operator*=(const Real &alpha)sofa::helper::Monomial_LD< Real, N >inline; operator*=(const Monomial_LD< Real, N > &b)sofa::helper::Monomial_LD< Real, N >; operator+() constsofa::helper::Monomial_LD< Real, N >inline; operator+(const Monomial_LD< Real, N > &a)sofa::helper::Monomial_LD< Real, N >inline; operator+=(const Monomial_LD< Real, N > &b)sofa::helper::Monomial_LD< Real, N >; operator-() constsofa::helper::Monomial_LD< Real, N >inline; operator-(const Monomial_LD< Real, N > &a)sofa::helper::Monomial_LD< Real, N >inline; operator-=(const Monomial_LD< Real, N > &b)sofa::helper::Monomial_LD< Real, N >; operator/(const Real &alpha)sofa::helper::Monomial_LD< Real, N >inline; operator/=(const Real &alpha)sofa::helper::Monomial_LD< Real, N >inline; operator=(const Monomial_LD< Real, N > &b)sofa::helper::Monomial_LD< Real, N >; operator==(const Monomial_LD< Real, N > &b) constsofa::helper::Monomial_LD< Real, N >; powerssofa::helper::Monomial_LD< Real, N >; readFromStream(std::istream &ff)sofa::helper::Monomial_LD< Real, N >; RNpoint typedefsofa::helper::Monomial_LD< Real, N >; SetCoef(const Real &m_coef)sofa::helper::Monomial_LD< Real, N >inline; SetPower(int numbervar, int powervalue)sofa::helper::Monomial_LD< Real, N >inline; variablessofa::helper::Monomial_LD< Real, N >protected; writeToStream(std::ostream &ff) constsofa::helper::Monomial_LD< Real, N >; x enum valuesofa::helper::Monomial_LD< Real, N >; xy enum valuesofa::helper::Monomial_LD< Real, N >; y enum valuesofa::helper::Monomial_LD< Real, N >; yz enum valuesofa::helper::Monomial_LD< Real, N >; z enum valuesofa::helper::Monomial_LD< Real, N >; zx enum valuesofa::helper::Monomial_LD< Real, N >.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d-members.html:244,Modifiability,inherit,inherited,244,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::Monomial_LD< Real, N > Member List . This is the complete list of members for sofa::helper::Monomial_LD< Real, N >, including all inherited members. coefsofa::helper::Monomial_LD< Real, N >; d(const unsigned int &ideriv) constsofa::helper::Monomial_LD< Real, N >; degree()sofa::helper::Monomial_LD< Real, N >; isnullptr() constsofa::helper::Monomial_LD< Real, N >inline; isSamePowers(const Monomial_LD< Real, N > &b) constsofa::helper::Monomial_LD< Real, N >; Monomial_LD()sofa::helper::Monomial_LD< Real, N >; Monomial_LD(Real,...)sofa::helper::Monomial_LD< Real, N >; Monomial_LD(const Monomial_LD< Real, N > &a)sofa::helper::Monomial_LD< Real, N >; operator!=(const Monomial_LD< Real, N > &b) constsofa::helper::Monomial_LD< Real, N >inline; operator()(const RNpoint &x) constsofa::helper::Monomial_LD< Real, N >; operator()(const RNpoint &x, unsigned int idvar) constsofa::helper::Monomial_LD< Real, N >; operator*(const Real &alpha)sofa::helper::Monomial_LD< Real, N >inline; operator*(const Monomial_LD< Real, N > &a)sofa::helper::Monomial_LD< Real, N >inline; operator*(const FReal &alpha, Monomial_LD< FReal, FN > &r)sofa::helper::Monomial_LD< Real, N >friend; operator*=(const Real &alpha)sofa::helper::Monomial_LD< Real, N >inline; operator*=(const Monomial_LD< Real, N > &b)sofa::helper::Monomial_LD< Real, N >; operator+() constsofa::helper::Monomial_LD< Real, N >inline; operator+(const Monomial_LD< Real, N > &a)sofa::helper::Monomial_LD< Real, N >inline; operator+=(const Monomial_LD< Real, N > &b)sofa::helper::Monomial_LD< Real, N >; operator-() constsofa::helper::Monomial_LD< Real, N >inline; operator-(const Monomial_LD< Real, N > &a)sofa::helper::Monomial_LD< Real, N >inline; operator-=(const Monomial_LD< Real, N > &b)sofa::helper::Monomial_LD< Real, N >; operator/(const Real &alpha)sofa::helper::Monomial_LD< Real, N >inline; operator/=(const Real &alpha)sofa::h",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d-members.html:2526,Modifiability,variab,variablessofa,2526,", unsigned int idvar) constsofa::helper::Monomial_LD< Real, N >; operator*(const Real &alpha)sofa::helper::Monomial_LD< Real, N >inline; operator*(const Monomial_LD< Real, N > &a)sofa::helper::Monomial_LD< Real, N >inline; operator*(const FReal &alpha, Monomial_LD< FReal, FN > &r)sofa::helper::Monomial_LD< Real, N >friend; operator*=(const Real &alpha)sofa::helper::Monomial_LD< Real, N >inline; operator*=(const Monomial_LD< Real, N > &b)sofa::helper::Monomial_LD< Real, N >; operator+() constsofa::helper::Monomial_LD< Real, N >inline; operator+(const Monomial_LD< Real, N > &a)sofa::helper::Monomial_LD< Real, N >inline; operator+=(const Monomial_LD< Real, N > &b)sofa::helper::Monomial_LD< Real, N >; operator-() constsofa::helper::Monomial_LD< Real, N >inline; operator-(const Monomial_LD< Real, N > &a)sofa::helper::Monomial_LD< Real, N >inline; operator-=(const Monomial_LD< Real, N > &b)sofa::helper::Monomial_LD< Real, N >; operator/(const Real &alpha)sofa::helper::Monomial_LD< Real, N >inline; operator/=(const Real &alpha)sofa::helper::Monomial_LD< Real, N >inline; operator=(const Monomial_LD< Real, N > &b)sofa::helper::Monomial_LD< Real, N >; operator==(const Monomial_LD< Real, N > &b) constsofa::helper::Monomial_LD< Real, N >; powerssofa::helper::Monomial_LD< Real, N >; readFromStream(std::istream &ff)sofa::helper::Monomial_LD< Real, N >; RNpoint typedefsofa::helper::Monomial_LD< Real, N >; SetCoef(const Real &m_coef)sofa::helper::Monomial_LD< Real, N >inline; SetPower(int numbervar, int powervalue)sofa::helper::Monomial_LD< Real, N >inline; variablessofa::helper::Monomial_LD< Real, N >protected; writeToStream(std::ostream &ff) constsofa::helper::Monomial_LD< Real, N >; x enum valuesofa::helper::Monomial_LD< Real, N >; xy enum valuesofa::helper::Monomial_LD< Real, N >; y enum valuesofa::helper::Monomial_LD< Real, N >; yz enum valuesofa::helper::Monomial_LD< Real, N >; z enum valuesofa::helper::Monomial_LD< Real, N >; zx enum valuesofa::helper::Monomial_LD< Real, N >.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html:732,Energy Efficiency,efficient,efficient,732,"﻿. SOFA API: sofa::helper::Monomial_LD< Real, N > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Friends |; List of all members . sofa::helper::Monomial_LD< Real, N > Class Template Reference . #include <Polynomial_LD.h>; A generic monomial with N variables of type Real. A monomial is one term of a polynomial. ; More...; Detailed Description; template<typename Real, unsigned int N>; class sofa::helper::Monomial_LD< Real, N >; A generic monomial with N variables of type Real. A monomial is one term of a polynomial. ; Todo this first version of polynomial is a linear presentation. This presentation is efficient for arithmetic operator like +,-,*,/ and derivative. But is not optimized for the evaluating (comparing to the recurrent presentation). . Public Attributes; Real coef;  ; sofa::type::Vec< N, int > powers;  . Protected Attributes; sofa::type::Vec< N, std::string > variables;  . Public Member Functions;  Monomial_LD ();  ;  Monomial_LD (Real,...);  ;  Monomial_LD (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > & operator= (const Monomial_LD< Real, N > &b);  ; void SetCoef (const Real &m_coef);  Setting of Monomial_LD. More...;  ; void SetPower (int numbervar, int powervalue);  ; int degree ();  Return the total degree of monomial. More...;  ; bool operator== (const Monomial_LD< Real, N > &b) const;  Logical operators. More...;  ; bool operator!= (const Monomial_LD< Real, N > &b) const;  ; bool isSamePowers (const Monomial_LD< Real, N > &b) const;  ; bool isnullptr () const;  ; Monomial_LD< Real, N > & operator*= (const Real &alpha);  Mathematical operators. More...;  ; Monomial_LD< Real, N > & operator/= (const Real &alpha);  ; Monomial_LD< Real, N > & operator+= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > & operator-= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > & operator*= (const Monomial_LD< ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html:939,Energy Efficiency,power,powers,939,"﻿. SOFA API: sofa::helper::Monomial_LD< Real, N > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Friends |; List of all members . sofa::helper::Monomial_LD< Real, N > Class Template Reference . #include <Polynomial_LD.h>; A generic monomial with N variables of type Real. A monomial is one term of a polynomial. ; More...; Detailed Description; template<typename Real, unsigned int N>; class sofa::helper::Monomial_LD< Real, N >; A generic monomial with N variables of type Real. A monomial is one term of a polynomial. ; Todo this first version of polynomial is a linear presentation. This presentation is efficient for arithmetic operator like +,-,*,/ and derivative. But is not optimized for the evaluating (comparing to the recurrent presentation). . Public Attributes; Real coef;  ; sofa::type::Vec< N, int > powers;  . Protected Attributes; sofa::type::Vec< N, std::string > variables;  . Public Member Functions;  Monomial_LD ();  ;  Monomial_LD (Real,...);  ;  Monomial_LD (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > & operator= (const Monomial_LD< Real, N > &b);  ; void SetCoef (const Real &m_coef);  Setting of Monomial_LD. More...;  ; void SetPower (int numbervar, int powervalue);  ; int degree ();  Return the total degree of monomial. More...;  ; bool operator== (const Monomial_LD< Real, N > &b) const;  Logical operators. More...;  ; bool operator!= (const Monomial_LD< Real, N > &b) const;  ; bool isSamePowers (const Monomial_LD< Real, N > &b) const;  ; bool isnullptr () const;  ; Monomial_LD< Real, N > & operator*= (const Real &alpha);  Mathematical operators. More...;  ; Monomial_LD< Real, N > & operator/= (const Real &alpha);  ; Monomial_LD< Real, N > & operator+= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > & operator-= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > & operator*= (const Monomial_LD< ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html:1323,Energy Efficiency,power,powervalue,1323,"al_LD.h>; A generic monomial with N variables of type Real. A monomial is one term of a polynomial. ; More...; Detailed Description; template<typename Real, unsigned int N>; class sofa::helper::Monomial_LD< Real, N >; A generic monomial with N variables of type Real. A monomial is one term of a polynomial. ; Todo this first version of polynomial is a linear presentation. This presentation is efficient for arithmetic operator like +,-,*,/ and derivative. But is not optimized for the evaluating (comparing to the recurrent presentation). . Public Attributes; Real coef;  ; sofa::type::Vec< N, int > powers;  . Protected Attributes; sofa::type::Vec< N, std::string > variables;  . Public Member Functions;  Monomial_LD ();  ;  Monomial_LD (Real,...);  ;  Monomial_LD (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > & operator= (const Monomial_LD< Real, N > &b);  ; void SetCoef (const Real &m_coef);  Setting of Monomial_LD. More...;  ; void SetPower (int numbervar, int powervalue);  ; int degree ();  Return the total degree of monomial. More...;  ; bool operator== (const Monomial_LD< Real, N > &b) const;  Logical operators. More...;  ; bool operator!= (const Monomial_LD< Real, N > &b) const;  ; bool isSamePowers (const Monomial_LD< Real, N > &b) const;  ; bool isnullptr () const;  ; Monomial_LD< Real, N > & operator*= (const Real &alpha);  Mathematical operators. More...;  ; Monomial_LD< Real, N > & operator/= (const Real &alpha);  ; Monomial_LD< Real, N > & operator+= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > & operator-= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > & operator*= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > operator+ () const;  ; Monomial_LD< Real, N > operator- () const;  ; Monomial_LD< Real, N > operator* (const Real &alpha);  ; Monomial_LD< Real, N > operator/ (const Real &alpha);  ; Monomial_LD< Real, N > operator+ (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > operator- (const Mo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html:3158,Energy Efficiency,power,powers,3158,"ha);  ; Monomial_LD< Real, N > operator/ (const Real &alpha);  ; Monomial_LD< Real, N > operator+ (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > operator- (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > operator* (const Monomial_LD< Real, N > &a);  ; Real operator() (const RNpoint &x) const;  Evaluating value. More...;  ; Real operator() (const RNpoint &x, unsigned int idvar) const;  Evaluating first partial derivative by idvar-th variable. More...;  ; Monomial_LD< Real, N > d (const unsigned int &ideriv) const;  Evaluating partial derivative hight order by idvar-th variable in ideriv-th order. More...;  ; void writeToStream (std::ostream &ff) const;  ; void readFromStream (std::istream &ff);  . Friends; template<typename FReal , unsigned int FN> ; Monomial_LD< FReal, FN > & operator* (const FReal &alpha, Monomial_LD< FReal, FN > &r);  . Attribute details. ◆ coef. template<typename Real , unsigned int N> . Real sofa::helper::Monomial_LD< Real, N >::coef. ◆ powers. template<typename Real , unsigned int N> . sofa::type::Vec<N,int> sofa::helper::Monomial_LD< Real, N >::powers. ◆ variables. template<typename Real , unsigned int N> . sofa::type::Vec<N,std::string> sofa::helper::Monomial_LD< Real, N >::variables. protected . Constructor details. ◆ Monomial_LD() [1/3]. template<typename Real , unsigned int N> . sofa::helper::Monomial_LD< Real, N >::Monomial_LD. Tools used in FEM computing . ◆ Monomial_LD() [2/3]. template<typename Real , unsigned int N> . sofa::helper::Monomial_LD< Real, N >::Monomial_LD ; (; Real ; m_coef, .  ; ... . ). ◆ Monomial_LD() [3/3]. template<typename Real , unsigned int N> . sofa::helper::Monomial_LD< Real, N >::Monomial_LD ; (; const Monomial_LD< Real, N > & ; a). Function details. ◆ d(). template<typename Real , unsigned int N> . Monomial_LD< Real, N > sofa::helper::Monomial_LD< Real, N >::d ; (; const unsigned int & ; ideriv); const. Evaluating partial derivative hight order by idvar-th variable in ideriv-th order. ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html:3270,Energy Efficiency,power,powers,3270,", N > operator+ (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > operator- (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > operator* (const Monomial_LD< Real, N > &a);  ; Real operator() (const RNpoint &x) const;  Evaluating value. More...;  ; Real operator() (const RNpoint &x, unsigned int idvar) const;  Evaluating first partial derivative by idvar-th variable. More...;  ; Monomial_LD< Real, N > d (const unsigned int &ideriv) const;  Evaluating partial derivative hight order by idvar-th variable in ideriv-th order. More...;  ; void writeToStream (std::ostream &ff) const;  ; void readFromStream (std::istream &ff);  . Friends; template<typename FReal , unsigned int FN> ; Monomial_LD< FReal, FN > & operator* (const FReal &alpha, Monomial_LD< FReal, FN > &r);  . Attribute details. ◆ coef. template<typename Real , unsigned int N> . Real sofa::helper::Monomial_LD< Real, N >::coef. ◆ powers. template<typename Real , unsigned int N> . sofa::type::Vec<N,int> sofa::helper::Monomial_LD< Real, N >::powers. ◆ variables. template<typename Real , unsigned int N> . sofa::type::Vec<N,std::string> sofa::helper::Monomial_LD< Real, N >::variables. protected . Constructor details. ◆ Monomial_LD() [1/3]. template<typename Real , unsigned int N> . sofa::helper::Monomial_LD< Real, N >::Monomial_LD. Tools used in FEM computing . ◆ Monomial_LD() [2/3]. template<typename Real , unsigned int N> . sofa::helper::Monomial_LD< Real, N >::Monomial_LD ; (; Real ; m_coef, .  ; ... . ). ◆ Monomial_LD() [3/3]. template<typename Real , unsigned int N> . sofa::helper::Monomial_LD< Real, N >::Monomial_LD ; (; const Monomial_LD< Real, N > & ; a). Function details. ◆ d(). template<typename Real , unsigned int N> . Monomial_LD< Real, N > sofa::helper::Monomial_LD< Real, N >::d ; (; const unsigned int & ; ideriv); const. Evaluating partial derivative hight order by idvar-th variable in ideriv-th order. ; Derivative operator allowing to write p1=p2.d(x); . ◆ degree(). template<typename",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html:8145,Energy Efficiency,power,powervalue,8145,"e . ◆ operator-=(). template<typename Real , unsigned int N> . Monomial_LD< Real, N > & sofa::helper::Monomial_LD< Real, N >::operator-= ; (; const Monomial_LD< Real, N > & ; b). ◆ operator/(). template<typename Real , unsigned int N> . Monomial_LD<Real,N> sofa::helper::Monomial_LD< Real, N >::operator/ ; (; const Real & ; alpha). inline . ◆ operator/=(). template<typename Real , unsigned int N> . Monomial_LD<Real,N>& sofa::helper::Monomial_LD< Real, N >::operator/= ; (; const Real & ; alpha). inline . ◆ operator=(). template<typename Real , unsigned int N> . Monomial_LD< Real, N > & sofa::helper::Monomial_LD< Real, N >::operator= ; (; const Monomial_LD< Real, N > & ; b). ◆ operator==(). template<typename Real , unsigned int N> . bool sofa::helper::Monomial_LD< Real, N >::operator== ; (; const Monomial_LD< Real, N > & ; b); const. Logical operators. . ◆ readFromStream(). template<typename Real , unsigned int N> . void sofa::helper::Monomial_LD< Real, N >::readFromStream ; (; std::istream & ; ff). ◆ SetCoef(). template<typename Real , unsigned int N> . void sofa::helper::Monomial_LD< Real, N >::SetCoef ; (; const Real & ; m_coef). inline . Setting of Monomial_LD. . ◆ SetPower(). template<typename Real , unsigned int N> . void sofa::helper::Monomial_LD< Real, N >::SetPower ; (; int ; numbervar, . int ; powervalue . ). inline . ◆ writeToStream(). template<typename Real , unsigned int N> . void sofa::helper::Monomial_LD< Real, N >::writeToStream ; (; std::ostream & ; ff); const. Enum details. ◆ anonymous enum. template<typename Real , unsigned int N> . anonymous enum. to define the derivative operator m_mono.d(x), m_mono.d(y) . Enumeratorx ; y ; z ; xy ; yz ; zx . Related details. ◆ operator*. template<typename Real , unsigned int N> . template<typename FReal , unsigned int FN> . Monomial_LD<FReal,FN>& operator* ; (; const FReal & ; alpha, . Monomial_LD< FReal, FN > & ; r . ). friend . sofahelperMonomial_LD; Generated on Mon Nov 11 2024 03:30:30 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html:373,Modifiability,variab,variables,373,"﻿. SOFA API: sofa::helper::Monomial_LD< Real, N > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Friends |; List of all members . sofa::helper::Monomial_LD< Real, N > Class Template Reference . #include <Polynomial_LD.h>; A generic monomial with N variables of type Real. A monomial is one term of a polynomial. ; More...; Detailed Description; template<typename Real, unsigned int N>; class sofa::helper::Monomial_LD< Real, N >; A generic monomial with N variables of type Real. A monomial is one term of a polynomial. ; Todo this first version of polynomial is a linear presentation. This presentation is efficient for arithmetic operator like +,-,*,/ and derivative. But is not optimized for the evaluating (comparing to the recurrent presentation). . Public Attributes; Real coef;  ; sofa::type::Vec< N, int > powers;  . Protected Attributes; sofa::type::Vec< N, std::string > variables;  . Public Member Functions;  Monomial_LD ();  ;  Monomial_LD (Real,...);  ;  Monomial_LD (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > & operator= (const Monomial_LD< Real, N > &b);  ; void SetCoef (const Real &m_coef);  Setting of Monomial_LD. More...;  ; void SetPower (int numbervar, int powervalue);  ; int degree ();  Return the total degree of monomial. More...;  ; bool operator== (const Monomial_LD< Real, N > &b) const;  Logical operators. More...;  ; bool operator!= (const Monomial_LD< Real, N > &b) const;  ; bool isSamePowers (const Monomial_LD< Real, N > &b) const;  ; bool isnullptr () const;  ; Monomial_LD< Real, N > & operator*= (const Real &alpha);  Mathematical operators. More...;  ; Monomial_LD< Real, N > & operator/= (const Real &alpha);  ; Monomial_LD< Real, N > & operator+= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > & operator-= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > & operator*= (const Monomial_LD< ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html:581,Modifiability,variab,variables,581,"﻿. SOFA API: sofa::helper::Monomial_LD< Real, N > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Friends |; List of all members . sofa::helper::Monomial_LD< Real, N > Class Template Reference . #include <Polynomial_LD.h>; A generic monomial with N variables of type Real. A monomial is one term of a polynomial. ; More...; Detailed Description; template<typename Real, unsigned int N>; class sofa::helper::Monomial_LD< Real, N >; A generic monomial with N variables of type Real. A monomial is one term of a polynomial. ; Todo this first version of polynomial is a linear presentation. This presentation is efficient for arithmetic operator like +,-,*,/ and derivative. But is not optimized for the evaluating (comparing to the recurrent presentation). . Public Attributes; Real coef;  ; sofa::type::Vec< N, int > powers;  . Protected Attributes; sofa::type::Vec< N, std::string > variables;  . Public Member Functions;  Monomial_LD ();  ;  Monomial_LD (Real,...);  ;  Monomial_LD (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > & operator= (const Monomial_LD< Real, N > &b);  ; void SetCoef (const Real &m_coef);  Setting of Monomial_LD. More...;  ; void SetPower (int numbervar, int powervalue);  ; int degree ();  Return the total degree of monomial. More...;  ; bool operator== (const Monomial_LD< Real, N > &b) const;  Logical operators. More...;  ; bool operator!= (const Monomial_LD< Real, N > &b) const;  ; bool isSamePowers (const Monomial_LD< Real, N > &b) const;  ; bool isnullptr () const;  ; Monomial_LD< Real, N > & operator*= (const Real &alpha);  Mathematical operators. More...;  ; Monomial_LD< Real, N > & operator/= (const Real &alpha);  ; Monomial_LD< Real, N > & operator+= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > & operator-= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > & operator*= (const Monomial_LD< ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html:1006,Modifiability,variab,variables,1006,"﻿. SOFA API: sofa::helper::Monomial_LD< Real, N > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Friends |; List of all members . sofa::helper::Monomial_LD< Real, N > Class Template Reference . #include <Polynomial_LD.h>; A generic monomial with N variables of type Real. A monomial is one term of a polynomial. ; More...; Detailed Description; template<typename Real, unsigned int N>; class sofa::helper::Monomial_LD< Real, N >; A generic monomial with N variables of type Real. A monomial is one term of a polynomial. ; Todo this first version of polynomial is a linear presentation. This presentation is efficient for arithmetic operator like +,-,*,/ and derivative. But is not optimized for the evaluating (comparing to the recurrent presentation). . Public Attributes; Real coef;  ; sofa::type::Vec< N, int > powers;  . Protected Attributes; sofa::type::Vec< N, std::string > variables;  . Public Member Functions;  Monomial_LD ();  ;  Monomial_LD (Real,...);  ;  Monomial_LD (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > & operator= (const Monomial_LD< Real, N > &b);  ; void SetCoef (const Real &m_coef);  Setting of Monomial_LD. More...;  ; void SetPower (int numbervar, int powervalue);  ; int degree ();  Return the total degree of monomial. More...;  ; bool operator== (const Monomial_LD< Real, N > &b) const;  Logical operators. More...;  ; bool operator!= (const Monomial_LD< Real, N > &b) const;  ; bool isSamePowers (const Monomial_LD< Real, N > &b) const;  ; bool isnullptr () const;  ; Monomial_LD< Real, N > & operator*= (const Real &alpha);  Mathematical operators. More...;  ; Monomial_LD< Real, N > & operator/= (const Real &alpha);  ; Monomial_LD< Real, N > & operator+= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > & operator-= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > & operator*= (const Monomial_LD< ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html:2622,Modifiability,variab,variable,2622,"rs (const Monomial_LD< Real, N > &b) const;  ; bool isnullptr () const;  ; Monomial_LD< Real, N > & operator*= (const Real &alpha);  Mathematical operators. More...;  ; Monomial_LD< Real, N > & operator/= (const Real &alpha);  ; Monomial_LD< Real, N > & operator+= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > & operator-= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > & operator*= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > operator+ () const;  ; Monomial_LD< Real, N > operator- () const;  ; Monomial_LD< Real, N > operator* (const Real &alpha);  ; Monomial_LD< Real, N > operator/ (const Real &alpha);  ; Monomial_LD< Real, N > operator+ (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > operator- (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > operator* (const Monomial_LD< Real, N > &a);  ; Real operator() (const RNpoint &x) const;  Evaluating value. More...;  ; Real operator() (const RNpoint &x, unsigned int idvar) const;  Evaluating first partial derivative by idvar-th variable. More...;  ; Monomial_LD< Real, N > d (const unsigned int &ideriv) const;  Evaluating partial derivative hight order by idvar-th variable in ideriv-th order. More...;  ; void writeToStream (std::ostream &ff) const;  ; void readFromStream (std::istream &ff);  . Friends; template<typename FReal , unsigned int FN> ; Monomial_LD< FReal, FN > & operator* (const FReal &alpha, Monomial_LD< FReal, FN > &r);  . Attribute details. ◆ coef. template<typename Real , unsigned int N> . Real sofa::helper::Monomial_LD< Real, N >::coef. ◆ powers. template<typename Real , unsigned int N> . sofa::type::Vec<N,int> sofa::helper::Monomial_LD< Real, N >::powers. ◆ variables. template<typename Real , unsigned int N> . sofa::type::Vec<N,std::string> sofa::helper::Monomial_LD< Real, N >::variables. protected . Constructor details. ◆ Monomial_LD() [1/3]. template<typename Real , unsigned int N> . sofa::helper::Monomial_LD< Real, N >::Monomial_LD. Tools",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html:2760,Modifiability,variab,variable,2760," operators. More...;  ; Monomial_LD< Real, N > & operator/= (const Real &alpha);  ; Monomial_LD< Real, N > & operator+= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > & operator-= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > & operator*= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > operator+ () const;  ; Monomial_LD< Real, N > operator- () const;  ; Monomial_LD< Real, N > operator* (const Real &alpha);  ; Monomial_LD< Real, N > operator/ (const Real &alpha);  ; Monomial_LD< Real, N > operator+ (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > operator- (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > operator* (const Monomial_LD< Real, N > &a);  ; Real operator() (const RNpoint &x) const;  Evaluating value. More...;  ; Real operator() (const RNpoint &x, unsigned int idvar) const;  Evaluating first partial derivative by idvar-th variable. More...;  ; Monomial_LD< Real, N > d (const unsigned int &ideriv) const;  Evaluating partial derivative hight order by idvar-th variable in ideriv-th order. More...;  ; void writeToStream (std::ostream &ff) const;  ; void readFromStream (std::istream &ff);  . Friends; template<typename FReal , unsigned int FN> ; Monomial_LD< FReal, FN > & operator* (const FReal &alpha, Monomial_LD< FReal, FN > &r);  . Attribute details. ◆ coef. template<typename Real , unsigned int N> . Real sofa::helper::Monomial_LD< Real, N >::coef. ◆ powers. template<typename Real , unsigned int N> . sofa::type::Vec<N,int> sofa::helper::Monomial_LD< Real, N >::powers. ◆ variables. template<typename Real , unsigned int N> . sofa::type::Vec<N,std::string> sofa::helper::Monomial_LD< Real, N >::variables. protected . Constructor details. ◆ Monomial_LD() [1/3]. template<typename Real , unsigned int N> . sofa::helper::Monomial_LD< Real, N >::Monomial_LD. Tools used in FEM computing . ◆ Monomial_LD() [2/3]. template<typename Real , unsigned int N> . sofa::helper::Monomial_LD< Real, N >::Monomial_LD ; (;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html:3280,Modifiability,variab,variables,3280," N > &a);  ; Monomial_LD< Real, N > operator- (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > operator* (const Monomial_LD< Real, N > &a);  ; Real operator() (const RNpoint &x) const;  Evaluating value. More...;  ; Real operator() (const RNpoint &x, unsigned int idvar) const;  Evaluating first partial derivative by idvar-th variable. More...;  ; Monomial_LD< Real, N > d (const unsigned int &ideriv) const;  Evaluating partial derivative hight order by idvar-th variable in ideriv-th order. More...;  ; void writeToStream (std::ostream &ff) const;  ; void readFromStream (std::istream &ff);  . Friends; template<typename FReal , unsigned int FN> ; Monomial_LD< FReal, FN > & operator* (const FReal &alpha, Monomial_LD< FReal, FN > &r);  . Attribute details. ◆ coef. template<typename Real , unsigned int N> . Real sofa::helper::Monomial_LD< Real, N >::coef. ◆ powers. template<typename Real , unsigned int N> . sofa::type::Vec<N,int> sofa::helper::Monomial_LD< Real, N >::powers. ◆ variables. template<typename Real , unsigned int N> . sofa::type::Vec<N,std::string> sofa::helper::Monomial_LD< Real, N >::variables. protected . Constructor details. ◆ Monomial_LD() [1/3]. template<typename Real , unsigned int N> . sofa::helper::Monomial_LD< Real, N >::Monomial_LD. Tools used in FEM computing . ◆ Monomial_LD() [2/3]. template<typename Real , unsigned int N> . sofa::helper::Monomial_LD< Real, N >::Monomial_LD ; (; Real ; m_coef, .  ; ... . ). ◆ Monomial_LD() [3/3]. template<typename Real , unsigned int N> . sofa::helper::Monomial_LD< Real, N >::Monomial_LD ; (; const Monomial_LD< Real, N > & ; a). Function details. ◆ d(). template<typename Real , unsigned int N> . Monomial_LD< Real, N > sofa::helper::Monomial_LD< Real, N >::d ; (; const unsigned int & ; ideriv); const. Evaluating partial derivative hight order by idvar-th variable in ideriv-th order. ; Derivative operator allowing to write p1=p2.d(x); . ◆ degree(). template<typename Real , unsigned int N> . int sofa::helpe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html:3403,Modifiability,variab,variables,3403,"al_LD< Real, N > operator* (const Monomial_LD< Real, N > &a);  ; Real operator() (const RNpoint &x) const;  Evaluating value. More...;  ; Real operator() (const RNpoint &x, unsigned int idvar) const;  Evaluating first partial derivative by idvar-th variable. More...;  ; Monomial_LD< Real, N > d (const unsigned int &ideriv) const;  Evaluating partial derivative hight order by idvar-th variable in ideriv-th order. More...;  ; void writeToStream (std::ostream &ff) const;  ; void readFromStream (std::istream &ff);  . Friends; template<typename FReal , unsigned int FN> ; Monomial_LD< FReal, FN > & operator* (const FReal &alpha, Monomial_LD< FReal, FN > &r);  . Attribute details. ◆ coef. template<typename Real , unsigned int N> . Real sofa::helper::Monomial_LD< Real, N >::coef. ◆ powers. template<typename Real , unsigned int N> . sofa::type::Vec<N,int> sofa::helper::Monomial_LD< Real, N >::powers. ◆ variables. template<typename Real , unsigned int N> . sofa::type::Vec<N,std::string> sofa::helper::Monomial_LD< Real, N >::variables. protected . Constructor details. ◆ Monomial_LD() [1/3]. template<typename Real , unsigned int N> . sofa::helper::Monomial_LD< Real, N >::Monomial_LD. Tools used in FEM computing . ◆ Monomial_LD() [2/3]. template<typename Real , unsigned int N> . sofa::helper::Monomial_LD< Real, N >::Monomial_LD ; (; Real ; m_coef, .  ; ... . ). ◆ Monomial_LD() [3/3]. template<typename Real , unsigned int N> . sofa::helper::Monomial_LD< Real, N >::Monomial_LD ; (; const Monomial_LD< Real, N > & ; a). Function details. ◆ d(). template<typename Real , unsigned int N> . Monomial_LD< Real, N > sofa::helper::Monomial_LD< Real, N >::d ; (; const unsigned int & ; ideriv); const. Evaluating partial derivative hight order by idvar-th variable in ideriv-th order. ; Derivative operator allowing to write p1=p2.d(x); . ◆ degree(). template<typename Real , unsigned int N> . int sofa::helper::Monomial_LD< Real, N >::degree. Return the total degree of monomial. . ◆ isnullptr(). ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html:4131,Modifiability,variab,variable,4131,":helper::Monomial_LD< Real, N >::coef. ◆ powers. template<typename Real , unsigned int N> . sofa::type::Vec<N,int> sofa::helper::Monomial_LD< Real, N >::powers. ◆ variables. template<typename Real , unsigned int N> . sofa::type::Vec<N,std::string> sofa::helper::Monomial_LD< Real, N >::variables. protected . Constructor details. ◆ Monomial_LD() [1/3]. template<typename Real , unsigned int N> . sofa::helper::Monomial_LD< Real, N >::Monomial_LD. Tools used in FEM computing . ◆ Monomial_LD() [2/3]. template<typename Real , unsigned int N> . sofa::helper::Monomial_LD< Real, N >::Monomial_LD ; (; Real ; m_coef, .  ; ... . ). ◆ Monomial_LD() [3/3]. template<typename Real , unsigned int N> . sofa::helper::Monomial_LD< Real, N >::Monomial_LD ; (; const Monomial_LD< Real, N > & ; a). Function details. ◆ d(). template<typename Real , unsigned int N> . Monomial_LD< Real, N > sofa::helper::Monomial_LD< Real, N >::d ; (; const unsigned int & ; ideriv); const. Evaluating partial derivative hight order by idvar-th variable in ideriv-th order. ; Derivative operator allowing to write p1=p2.d(x); . ◆ degree(). template<typename Real , unsigned int N> . int sofa::helper::Monomial_LD< Real, N >::degree. Return the total degree of monomial. . ◆ isnullptr(). template<typename Real , unsigned int N> . bool sofa::helper::Monomial_LD< Real, N >::isnullptr ; (; ); const. inline . ◆ isSamePowers(). template<typename Real , unsigned int N> . bool sofa::helper::Monomial_LD< Real, N >::isSamePowers ; (; const Monomial_LD< Real, N > & ; b); const. ◆ operator!=(). template<typename Real , unsigned int N> . bool sofa::helper::Monomial_LD< Real, N >::operator!= ; (; const Monomial_LD< Real, N > & ; b); const. inline . ◆ operator()() [1/2]. template<typename Real , unsigned int N> . Real sofa::helper::Monomial_LD< Real, N >::operator() ; (; const RNpoint & ; x); const. Evaluating value. . ◆ operator()() [2/2]. template<typename Real , unsigned int N> . Real sofa::helper::Monomial_LD< Real, N >::operato",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html:5231,Modifiability,variab,variable,5231," . ◆ degree(). template<typename Real , unsigned int N> . int sofa::helper::Monomial_LD< Real, N >::degree. Return the total degree of monomial. . ◆ isnullptr(). template<typename Real , unsigned int N> . bool sofa::helper::Monomial_LD< Real, N >::isnullptr ; (; ); const. inline . ◆ isSamePowers(). template<typename Real , unsigned int N> . bool sofa::helper::Monomial_LD< Real, N >::isSamePowers ; (; const Monomial_LD< Real, N > & ; b); const. ◆ operator!=(). template<typename Real , unsigned int N> . bool sofa::helper::Monomial_LD< Real, N >::operator!= ; (; const Monomial_LD< Real, N > & ; b); const. inline . ◆ operator()() [1/2]. template<typename Real , unsigned int N> . Real sofa::helper::Monomial_LD< Real, N >::operator() ; (; const RNpoint & ; x); const. Evaluating value. . ◆ operator()() [2/2]. template<typename Real , unsigned int N> . Real sofa::helper::Monomial_LD< Real, N >::operator() ; (; const RNpoint & ; x, . unsigned int ; idvar . ); const. Evaluating first partial derivative by idvar-th variable. . ◆ operator*() [1/2]. template<typename Real , unsigned int N> . Monomial_LD<Real,N> sofa::helper::Monomial_LD< Real, N >::operator* ; (; const Monomial_LD< Real, N > & ; a). inline . ◆ operator*() [2/2]. template<typename Real , unsigned int N> . Monomial_LD<Real,N> sofa::helper::Monomial_LD< Real, N >::operator* ; (; const Real & ; alpha). inline . ◆ operator*=() [1/2]. template<typename Real , unsigned int N> . Monomial_LD< Real, N > & sofa::helper::Monomial_LD< Real, N >::operator*= ; (; const Monomial_LD< Real, N > & ; b). ◆ operator*=() [2/2]. template<typename Real , unsigned int N> . Monomial_LD<Real,N>& sofa::helper::Monomial_LD< Real, N >::operator*= ; (; const Real & ; alpha). inline . Mathematical operators. . ◆ operator+() [1/2]. template<typename Real , unsigned int N> . Monomial_LD<Real,N> sofa::helper::Monomial_LD< Real, N >::operator+ ; (; ); const. inline . ◆ operator+() [2/2]. template<typename Real , unsigned int N> . Monomial_LD<Real,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html:806,Performance,optimiz,optimized,806,"﻿. SOFA API: sofa::helper::Monomial_LD< Real, N > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Friends |; List of all members . sofa::helper::Monomial_LD< Real, N > Class Template Reference . #include <Polynomial_LD.h>; A generic monomial with N variables of type Real. A monomial is one term of a polynomial. ; More...; Detailed Description; template<typename Real, unsigned int N>; class sofa::helper::Monomial_LD< Real, N >; A generic monomial with N variables of type Real. A monomial is one term of a polynomial. ; Todo this first version of polynomial is a linear presentation. This presentation is efficient for arithmetic operator like +,-,*,/ and derivative. But is not optimized for the evaluating (comparing to the recurrent presentation). . Public Attributes; Real coef;  ; sofa::type::Vec< N, int > powers;  . Protected Attributes; sofa::type::Vec< N, std::string > variables;  . Public Member Functions;  Monomial_LD ();  ;  Monomial_LD (Real,...);  ;  Monomial_LD (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > & operator= (const Monomial_LD< Real, N > &b);  ; void SetCoef (const Real &m_coef);  Setting of Monomial_LD. More...;  ; void SetPower (int numbervar, int powervalue);  ; int degree ();  Return the total degree of monomial. More...;  ; bool operator== (const Monomial_LD< Real, N > &b) const;  Logical operators. More...;  ; bool operator!= (const Monomial_LD< Real, N > &b) const;  ; bool isSamePowers (const Monomial_LD< Real, N > &b) const;  ; bool isnullptr () const;  ; Monomial_LD< Real, N > & operator*= (const Real &alpha);  Mathematical operators. More...;  ; Monomial_LD< Real, N > & operator/= (const Real &alpha);  ; Monomial_LD< Real, N > & operator+= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > & operator-= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > & operator*= (const Monomial_LD< ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html:1462,Testability,Log,Logical,1462,"More...; Detailed Description; template<typename Real, unsigned int N>; class sofa::helper::Monomial_LD< Real, N >; A generic monomial with N variables of type Real. A monomial is one term of a polynomial. ; Todo this first version of polynomial is a linear presentation. This presentation is efficient for arithmetic operator like +,-,*,/ and derivative. But is not optimized for the evaluating (comparing to the recurrent presentation). . Public Attributes; Real coef;  ; sofa::type::Vec< N, int > powers;  . Protected Attributes; sofa::type::Vec< N, std::string > variables;  . Public Member Functions;  Monomial_LD ();  ;  Monomial_LD (Real,...);  ;  Monomial_LD (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > & operator= (const Monomial_LD< Real, N > &b);  ; void SetCoef (const Real &m_coef);  Setting of Monomial_LD. More...;  ; void SetPower (int numbervar, int powervalue);  ; int degree ();  Return the total degree of monomial. More...;  ; bool operator== (const Monomial_LD< Real, N > &b) const;  Logical operators. More...;  ; bool operator!= (const Monomial_LD< Real, N > &b) const;  ; bool isSamePowers (const Monomial_LD< Real, N > &b) const;  ; bool isnullptr () const;  ; Monomial_LD< Real, N > & operator*= (const Real &alpha);  Mathematical operators. More...;  ; Monomial_LD< Real, N > & operator/= (const Real &alpha);  ; Monomial_LD< Real, N > & operator+= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > & operator-= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > & operator*= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > operator+ () const;  ; Monomial_LD< Real, N > operator- () const;  ; Monomial_LD< Real, N > operator* (const Real &alpha);  ; Monomial_LD< Real, N > operator/ (const Real &alpha);  ; Monomial_LD< Real, N > operator+ (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > operator- (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > operator* (const Monomial_LD< Real, N > &a);  ; Re",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html:7666,Testability,Log,Logical,7666,"typename Real , unsigned int N> . Monomial_LD<Real,N> sofa::helper::Monomial_LD< Real, N >::operator- ; (; const Monomial_LD< Real, N > & ; a). inline . ◆ operator-=(). template<typename Real , unsigned int N> . Monomial_LD< Real, N > & sofa::helper::Monomial_LD< Real, N >::operator-= ; (; const Monomial_LD< Real, N > & ; b). ◆ operator/(). template<typename Real , unsigned int N> . Monomial_LD<Real,N> sofa::helper::Monomial_LD< Real, N >::operator/ ; (; const Real & ; alpha). inline . ◆ operator/=(). template<typename Real , unsigned int N> . Monomial_LD<Real,N>& sofa::helper::Monomial_LD< Real, N >::operator/= ; (; const Real & ; alpha). inline . ◆ operator=(). template<typename Real , unsigned int N> . Monomial_LD< Real, N > & sofa::helper::Monomial_LD< Real, N >::operator= ; (; const Monomial_LD< Real, N > & ; b). ◆ operator==(). template<typename Real , unsigned int N> . bool sofa::helper::Monomial_LD< Real, N >::operator== ; (; const Monomial_LD< Real, N > & ; b); const. Logical operators. . ◆ readFromStream(). template<typename Real , unsigned int N> . void sofa::helper::Monomial_LD< Real, N >::readFromStream ; (; std::istream & ; ff). ◆ SetCoef(). template<typename Real , unsigned int N> . void sofa::helper::Monomial_LD< Real, N >::SetCoef ; (; const Real & ; m_coef). inline . Setting of Monomial_LD. . ◆ SetPower(). template<typename Real , unsigned int N> . void sofa::helper::Monomial_LD< Real, N >::SetPower ; (; int ; numbervar, . int ; powervalue . ). inline . ◆ writeToStream(). template<typename Real , unsigned int N> . void sofa::helper::Monomial_LD< Real, N >::writeToStream ; (; std::ostream & ; ff); const. Enum details. ◆ anonymous enum. template<typename Real , unsigned int N> . anonymous enum. to define the derivative operator m_mono.d(x), m_mono.d(y) . Enumeratorx ; y ; z ; xy ; yz ; zx . Related details. ◆ operator*. template<typename Real , unsigned int N> . template<typename FReal , unsigned int FN> . Monomial_LD<FReal,FN>& operator* ; (; const F",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_name_decoder-members.html:222,Modifiability,inherit,inherited,222,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::NameDecoder Member List . This is the complete list of members for sofa::helper::NameDecoder, including all inherited members. decodeClassName(const std::type_info &t)sofa::helper::NameDecoderstatic; decodeFullName(const std::type_info &t)sofa::helper::NameDecoderstatic; decodeNamespaceName(const std::type_info &t)sofa::helper::NameDecoderstatic; decodeTemplateName(const std::type_info &t)sofa::helper::NameDecoderstatic; decodeTypeName(const std::type_info &t)sofa::helper::NameDecoderstatic; getClassName()sofa::helper::NameDecoderinline; getNamespaceName()sofa::helper::NameDecoderinlinestatic; getShortName()sofa::helper::NameDecoderinlinestatic; getTemplateName()sofa::helper::NameDecoderinline; getTypeName()sofa::helper::NameDecoderinlinestatic; shortName(const std::string &longname)sofa::helper::NameDecoderstatic. Generated on Mon Nov 11 2024 03:30:30 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_name_decoder-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_name_decoder-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_options_group-members.html:224,Modifiability,inherit,inherited,224,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::OptionsGroup Member List . This is the complete list of members for sofa::helper::OptionsGroup, including all inherited members. buildFromContainer(const T &list)sofa::helper::OptionsGroupprotected; getSelectedId() constsofa::helper::OptionsGroup; getSelectedItem() constsofa::helper::OptionsGroup; isInOptionsList(const std::string &tempostring) constsofa::helper::OptionsGroup; operator=(const OptionsGroup &m_radiotrick)=defaultsofa::helper::OptionsGroup; operator[](const unsigned int i) constsofa::helper::OptionsGroupinline; OptionsGroup()sofa::helper::OptionsGroup; OptionsGroup(int nbofRadioButton,...)sofa::helper::OptionsGroupexplicit; OptionsGroup(const T &list)sofa::helper::OptionsGroupexplicit; OptionsGroup(const std::initializer_list< T > &list)sofa::helper::OptionsGroup; OptionsGroup(const OptionsGroup &m_radiotrick)sofa::helper::OptionsGroup; readFromStream(std::istream &stream)sofa::helper::OptionsGroup; selectedItemsofa::helper::OptionsGroupprotected; setItemName(unsigned int id_item, const std::string &name)sofa::helper::OptionsGroup; setNames(int nbofRadioButton,...)sofa::helper::OptionsGroup; setNames(const std::initializer_list< T > &list)sofa::helper::OptionsGroup; setNbItems(size_type nbofRadioButton)sofa::helper::OptionsGroup; setSelectedItem(unsigned int id_item)sofa::helper::OptionsGroup; setSelectedItem(const std::string &)sofa::helper::OptionsGroup; size() constsofa::helper::OptionsGroupinline; size_type typedefsofa::helper::OptionsGroup; textItemssofa::helper::OptionsGroupprotected; writeToStream(std::ostream &stream) constsofa::helper::OptionsGroup. Generated on Mon Nov 11 2024 03:30:30 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_options_group-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_options_group-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_options_group.html:2826,Modifiability,variab,variable,2826,"ivated item by its value (string) More...;  ; void readFromStream (std::istream &stream);  ; getting information operators; unsigned int getSelectedId () const;  ; const std::string & getSelectedItem () const;  ; const std::string & operator[] (const unsigned int i) const;  ; size_t size () const;  ; void writeToStream (std::ostream &stream) const;  ; OptionsGroup & operator= (const OptionsGroup &m_radiotrick)=default;  . Protected Member Functions; template<class T > ; void buildFromContainer (const T &list);  . Attribute details. ◆ selectedItem. unsigned int sofa::helper::OptionsGroup::selectedItem. protected . ◆ textItems. type::vector<std::string> sofa::helper::OptionsGroup::textItems. protected . Constructor details. ◆ OptionsGroup() [1/5]. sofa::helper::OptionsGroup::OptionsGroup ; (; ). ◆ OptionsGroup() [2/5]. sofa::helper::OptionsGroup::OptionsGroup ; (; int ; nbofRadioButton, .  ; ... . ). explicit . Constructor by given the number of argument following by the variable arguments Example OptionsGroup m_options(4,""button0"",""button1"",""button2"",""button3""); . ◆ OptionsGroup() [3/5]. template<class T , typename > . sofa::helper::OptionsGroup::OptionsGroup ; (; const T & ; list). explicit . generic constructor taking other string container like list<string>, set<string>, vector<string> . ◆ OptionsGroup() [4/5]. template<class T > . sofa::helper::OptionsGroup::OptionsGroup ; (; const std::initializer_list< T > & ; list). ◆ OptionsGroup() [5/5]. sofa::helper::OptionsGroup::OptionsGroup ; (; const OptionsGroup & ; m_radiotrick). Copy constructor. . Function details. ◆ buildFromContainer(). template<class T > . void sofa::helper::OptionsGroup::buildFromContainer ; (; const T & ; list). protected . ◆ getSelectedId(). unsigned int sofa::helper::OptionsGroup::getSelectedId ; (; ); const. ◆ getSelectedItem(). const std::string & sofa::helper::OptionsGroup::getSelectedItem ; (; ); const. ◆ isInOptionsList(). int sofa::helper::OptionsGroup::isInOptionsList ; (; const std::st",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_options_group.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_options_group.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_ownership_s_ptr-members.html:236,Modifiability,inherit,inherited,236,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::OwnershipSPtr< T > Member List . This is the complete list of members for sofa::helper::OwnershipSPtr< T >, including all inherited members. operator*() constsofa::helper::OwnershipSPtr< T >inline; operator->() constsofa::helper::OwnershipSPtr< T >inline; operator=(const OwnershipSPtr< T > &other)sofa::helper::OwnershipSPtr< T >inline; OwnershipSPtr()sofa::helper::OwnershipSPtr< T >inline; OwnershipSPtr(const T *t, bool ownership)sofa::helper::OwnershipSPtr< T >inline; OwnershipSPtr(const OwnershipSPtr< T > &other)sofa::helper::OwnershipSPtr< T >inline; ~OwnershipSPtr()sofa::helper::OwnershipSPtr< T >inline. Generated on Mon Nov 11 2024 03:30:30 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_ownership_s_ptr-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_ownership_s_ptr-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_ownership_s_ptr.html:446,Energy Efficiency,charge,charge,446,"﻿. SOFA API: sofa::helper::OwnershipSPtr< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::OwnershipSPtr< T > Class Template Reference . #include <OwnershipSPtr.h>; Detailed Description; template<class T>; class sofa::helper::OwnershipSPtr< T >; Smart pointer where the user precises if it must take the ownership (and so be in charge of deleting the data). Either it can point to an existing data without taking the ownership or it can point to a new temporary Data that will be deleted when this smart pointer is deleted (taking ownership). WarningMaybe an equivalent smart pointer exists in stl or boost that I do not know ; AuthorMatthieu Nesme . Public Member Functions;  OwnershipSPtr ();  default constructor: no pointed data, no ownership More...;  ;  OwnershipSPtr (const T *t, bool ownership);  point to a data, manually set ownership More...;  ;  OwnershipSPtr (const OwnershipSPtr< T > &other);  copy constructor that steals the ownership if 'other' had it More...;  ;  ~OwnershipSPtr ();  destructor will delete the data only if it has the ownership More...;  ; void operator= (const OwnershipSPtr< T > &other);  copy operator is stealing the ownership if 'other' had it More...;  ; const T & operator* () const;  get a const ref to the pointed data More...;  ; const T * operator-> () const;  get a const pointer to the pointer data More...;  . Constructor details. ◆ OwnershipSPtr() [1/3]. template<class T > . sofa::helper::OwnershipSPtr< T >::OwnershipSPtr ; (; ). inline . default constructor: no pointed data, no ownership . ◆ OwnershipSPtr() [2/3]. template<class T > . sofa::helper::OwnershipSPtr< T >::OwnershipSPtr ; (; const T * ; t, . bool ; ownership . ). inline . point to a data, manually set ownership . ◆ OwnershipSPtr() [3/3]. template<class T > . sofa::helper::OwnershipSPtr< T >::OwnershipSPtr ; (; const OwnershipSPtr< T > & ; other). inline . copy ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_ownership_s_ptr.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_ownership_s_ptr.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d-members.html:248,Modifiability,inherit,inherited,248,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::Polynomial_LD< Real, N > Member List . This is the complete list of members for sofa::helper::Polynomial_LD< Real, N >, including all inherited members. d(const unsigned int &ideriv) constsofa::helper::Polynomial_LD< Real, N >; degree()sofa::helper::Polynomial_LD< Real, N >; exchangeMonomial(unsigned int ithMono, unsigned int jthMono)sofa::helper::Polynomial_LD< Real, N >protected; getString() constsofa::helper::Polynomial_LD< Real, N >; listOfMonoMialsofa::helper::Polynomial_LD< Real, N >; MonomialConstIterator typedefsofa::helper::Polynomial_LD< Real, N >; MonomialIterator typedefsofa::helper::Polynomial_LD< Real, N >; MonomialsList typedefsofa::helper::Polynomial_LD< Real, N >; nbOfMonomialsofa::helper::Polynomial_LD< Real, N >; operator!=(const Polynomial_LD< Real, N > &b) constsofa::helper::Polynomial_LD< Real, N >inline; operator()(const RNpoint &x) constsofa::helper::Polynomial_LD< Real, N >; operator()(const RNpoint &x, unsigned int idvar) constsofa::helper::Polynomial_LD< Real, N >; operator*(const Real &alpha)sofa::helper::Polynomial_LD< Real, N >inline; operator*(const Polynomial_LD< Real, N > &a)sofa::helper::Polynomial_LD< Real, N >inline; operator*(const FReal &alpha, Polynomial_LD< FReal, FN > &r)sofa::helper::Polynomial_LD< Real, N >friend; operator*(const Monomial_LD< FReal, FN > &a, Polynomial_LD< FReal, FN > &r)sofa::helper::Polynomial_LD< Real, N >friend; operator*=(const Real &alpha)sofa::helper::Polynomial_LD< Real, N >; operator*=(const Polynomial_LD< Real, N > &b)sofa::helper::Polynomial_LD< Real, N >; operator+() constsofa::helper::Polynomial_LD< Real, N >inline; operator+(const Monomial_LD< Real, N > &a)sofa::helper::Polynomial_LD< Real, N >inline; operator+(const Polynomial_LD< Real, N > &a)sofa::helper::Polynomial_LD< Real, N >inline; operator+=(const Monomial_LD< Real, N > &b)sofa::helper::Polynomial_LD< Real, N >; operator+=(",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html:1337,Energy Efficiency,power,powers,1337,"ynomial_LD< Real, N > Class Template Reference . #include <Polynomial_LD.h>; A generic polynomial with N variables of type Real. A polynomial is a list composed of several monomials. ; More...; Detailed Description; template<typename Real, unsigned int N>; class sofa::helper::Polynomial_LD< Real, N >; A generic polynomial with N variables of type Real. A polynomial is a list composed of several monomials. . Public Attributes; unsigned int nbOfMonomial;  ; MonomialsList listOfMonoMial;  . Public Member Functions;  Polynomial_LD ();  Default constructor. More...;  ;  Polynomial_LD (const Polynomial_LD< Real, N > &a);  Copy constructor. More...;  ;  Polynomial_LD (const Monomial_LD< Real, N > &a);  ; Polynomial_LD< Real, N > & operator= (const Polynomial_LD< Real, N > &b);  Assign operator. More...;  ;  Polynomial_LD (const unsigned int nbofTerm,...);  setting of Polynomial More...;  ; void Set (const unsigned int nbofTerm,...);  ; int degree ();  ; bool operator== (const Polynomial_LD< Real, N > &b) const;  Return true if a and b has the same powers. More...;  ; bool operator!= (const Polynomial_LD< Real, N > &b) const;  ; Polynomial_LD< Real, N > & operator*= (const Real &alpha);  ; Polynomial_LD< Real, N > & operator/= (const Real &alpha);  ; Polynomial_LD< Real, N > & operator+= (const Monomial_LD< Real, N > &b);  ; Polynomial_LD< Real, N > & operator+= (const Polynomial_LD< Real, N > &b);  ; Polynomial_LD< Real, N > & operator-= (const Polynomial_LD< Real, N > &b);  ; Polynomial_LD< Real, N > operator+ () const;  ; Polynomial_LD< Real, N > operator- () const;  ; Polynomial_LD< Real, N > & operator*= (const Polynomial_LD< Real, N > &b);  ; Polynomial_LD< Real, N > operator* (const Real &alpha);  ; Polynomial_LD< Real, N > operator/ (const Real &alpha);  ; Polynomial_LD< Real, N > operator+ (const Monomial_LD< Real, N > &a);  ; Polynomial_LD< Real, N > operator+ (const Polynomial_LD< Real, N > &a);  ; Polynomial_LD< Real, N > operator- (const Polynomial_LD< Real, N >",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html:8796,Energy Efficiency,power,powers,8796,"helper::Polynomial_LD< Real, N >::operator- ; (; const Polynomial_LD< Real, N > & ; a). inline . ◆ operator-=(). template<typename Real , unsigned int N> . Polynomial_LD< Real, N > & sofa::helper::Polynomial_LD< Real, N >::operator-= ; (; const Polynomial_LD< Real, N > & ; b). ◆ operator/(). template<typename Real , unsigned int N> . Polynomial_LD<Real,N> sofa::helper::Polynomial_LD< Real, N >::operator/ ; (; const Real & ; alpha). inline . ◆ operator/=(). template<typename Real , unsigned int N> . Polynomial_LD< Real, N > & sofa::helper::Polynomial_LD< Real, N >::operator/= ; (; const Real & ; alpha). ◆ operator=(). template<typename Real , unsigned int N> . Polynomial_LD<Real,N>& sofa::helper::Polynomial_LD< Real, N >::operator= ; (; const Polynomial_LD< Real, N > & ; b). inline . Assign operator. . ◆ operator==(). template<typename Real , unsigned int N> . bool sofa::helper::Polynomial_LD< Real, N >::operator== ; (; const Polynomial_LD< Real, N > & ; b); const. Return true if a and b has the same powers. . ◆ readFromStream(). template<typename Real , unsigned int N> . void sofa::helper::Polynomial_LD< Real, N >::readFromStream ; (; std::istream & ; stream). ◆ Set(). template<typename Real , unsigned int N> . void sofa::helper::Polynomial_LD< Real, N >::Set ; (; const unsigned int ; nbofTerm, .  ; ... . ). ◆ setnbOfMonomial(). template<typename Real , unsigned int N> . void sofa::helper::Polynomial_LD< Real, N >::setnbOfMonomial ; (; int ; m_nbofmonomial). ◆ sort(). template<typename Real , unsigned int N> . void sofa::helper::Polynomial_LD< Real, N >::sort. ◆ sortByVar(). template<typename Real , unsigned int N> . void sofa::helper::Polynomial_LD< Real, N >::sortByVar ; (; unsigned int ; idVar). protected . ◆ writeToStream(). template<typename Real , unsigned int N> . void sofa::helper::Polynomial_LD< Real, N >::writeToStream ; (; std::ostream & ; stream); const. Related details. ◆ operator* [1/2]. template<typename Real , unsigned int N> . template<typename FRea",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html:385,Modifiability,variab,variables,385,"﻿. SOFA API: sofa::helper::Polynomial_LD< Real, N > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::helper::Polynomial_LD< Real, N > Class Template Reference . #include <Polynomial_LD.h>; A generic polynomial with N variables of type Real. A polynomial is a list composed of several monomials. ; More...; Detailed Description; template<typename Real, unsigned int N>; class sofa::helper::Polynomial_LD< Real, N >; A generic polynomial with N variables of type Real. A polynomial is a list composed of several monomials. . Public Attributes; unsigned int nbOfMonomial;  ; MonomialsList listOfMonoMial;  . Public Member Functions;  Polynomial_LD ();  Default constructor. More...;  ;  Polynomial_LD (const Polynomial_LD< Real, N > &a);  Copy constructor. More...;  ;  Polynomial_LD (const Monomial_LD< Real, N > &a);  ; Polynomial_LD< Real, N > & operator= (const Polynomial_LD< Real, N > &b);  Assign operator. More...;  ;  Polynomial_LD (const unsigned int nbofTerm,...);  setting of Polynomial More...;  ; void Set (const unsigned int nbofTerm,...);  ; int degree ();  ; bool operator== (const Polynomial_LD< Real, N > &b) const;  Return true if a and b has the same powers. More...;  ; bool operator!= (const Polynomial_LD< Real, N > &b) const;  ; Polynomial_LD< Real, N > & operator*= (const Real &alpha);  ; Polynomial_LD< Real, N > & operator/= (const Real &alpha);  ; Polynomial_LD< Real, N > & operator+= (const Monomial_LD< Real, N > &b);  ; Polynomial_LD< Real, N > & operator+= (const Polynomial_LD< Real, N > &b);  ; Polynomial_LD< Real, N > & operator-= (const Polynomial_LD< Real, N > &b);  ; Polynomial_LD< Real, N > operator+ () const;  ; Polynomial_LD< Real, N > operator- () const;  ; Polynomial_LD< Real, N > & operator*= (const Polynomial_LD< Real, N > &b);  ; Polynomial_LD< Real, N > operator* (const Real &alph",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html:611,Modifiability,variab,variables,611,"﻿. SOFA API: sofa::helper::Polynomial_LD< Real, N > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::helper::Polynomial_LD< Real, N > Class Template Reference . #include <Polynomial_LD.h>; A generic polynomial with N variables of type Real. A polynomial is a list composed of several monomials. ; More...; Detailed Description; template<typename Real, unsigned int N>; class sofa::helper::Polynomial_LD< Real, N >; A generic polynomial with N variables of type Real. A polynomial is a list composed of several monomials. . Public Attributes; unsigned int nbOfMonomial;  ; MonomialsList listOfMonoMial;  . Public Member Functions;  Polynomial_LD ();  Default constructor. More...;  ;  Polynomial_LD (const Polynomial_LD< Real, N > &a);  Copy constructor. More...;  ;  Polynomial_LD (const Monomial_LD< Real, N > &a);  ; Polynomial_LD< Real, N > & operator= (const Polynomial_LD< Real, N > &b);  Assign operator. More...;  ;  Polynomial_LD (const unsigned int nbofTerm,...);  setting of Polynomial More...;  ; void Set (const unsigned int nbofTerm,...);  ; int degree ();  ; bool operator== (const Polynomial_LD< Real, N > &b) const;  Return true if a and b has the same powers. More...;  ; bool operator!= (const Polynomial_LD< Real, N > &b) const;  ; Polynomial_LD< Real, N > & operator*= (const Real &alpha);  ; Polynomial_LD< Real, N > & operator/= (const Real &alpha);  ; Polynomial_LD< Real, N > & operator+= (const Monomial_LD< Real, N > &b);  ; Polynomial_LD< Real, N > & operator+= (const Polynomial_LD< Real, N > &b);  ; Polynomial_LD< Real, N > & operator-= (const Polynomial_LD< Real, N > &b);  ; Polynomial_LD< Real, N > operator+ () const;  ; Polynomial_LD< Real, N > operator- () const;  ; Polynomial_LD< Real, N > & operator*= (const Polynomial_LD< Real, N > &b);  ; Polynomial_LD< Real, N > operator* (const Real &alph",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html:2543,Modifiability,variab,variable,2543,"al_LD< Real, N > & operator/= (const Real &alpha);  ; Polynomial_LD< Real, N > & operator+= (const Monomial_LD< Real, N > &b);  ; Polynomial_LD< Real, N > & operator+= (const Polynomial_LD< Real, N > &b);  ; Polynomial_LD< Real, N > & operator-= (const Polynomial_LD< Real, N > &b);  ; Polynomial_LD< Real, N > operator+ () const;  ; Polynomial_LD< Real, N > operator- () const;  ; Polynomial_LD< Real, N > & operator*= (const Polynomial_LD< Real, N > &b);  ; Polynomial_LD< Real, N > operator* (const Real &alpha);  ; Polynomial_LD< Real, N > operator/ (const Real &alpha);  ; Polynomial_LD< Real, N > operator+ (const Monomial_LD< Real, N > &a);  ; Polynomial_LD< Real, N > operator+ (const Polynomial_LD< Real, N > &a);  ; Polynomial_LD< Real, N > operator- (const Polynomial_LD< Real, N > &a);  ; Polynomial_LD< Real, N > operator* (const Polynomial_LD< Real, N > &a);  ; Real operator() (const RNpoint &x) const;  Evaluating. More...;  ; Real operator() (const RNpoint &x, unsigned int idvar) const;  Evaluating first partial derivative by idvar-th variable. More...;  ; Polynomial_LD< Real, N > d (const unsigned int &ideriv) const;  Evaluating partial derivative hight order by idvar-th variable in ideriv-th order. More...;  ; void setnbOfMonomial (int m_nbofmonomial);  ; void writeToStream (std::ostream &stream) const;  ; void readFromStream (std::istream &stream);  ; std::string getString () const;  ; void sort ();  . Protected Member Functions; void exchangeMonomial (unsigned int ithMono, unsigned int jthMono);  The sort must be done after each constructor and each operation where monomials are inserted. More...;  ; void sortByVar (unsigned int idVar);  . Friends; template<typename FReal , unsigned int FN> ; Polynomial_LD< FReal, FN > & operator* (const FReal &alpha, Polynomial_LD< FReal, FN > &r);  ; template<typename FReal , unsigned int FN> ; Polynomial_LD< FReal, FN > & operator* (const Monomial_LD< FReal, FN > &a, Polynomial_LD< FReal, FN > &r);  poly=poly+mono || mono +",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html:2683,Modifiability,variab,variable,2683,"eal, N > & operator+= (const Polynomial_LD< Real, N > &b);  ; Polynomial_LD< Real, N > & operator-= (const Polynomial_LD< Real, N > &b);  ; Polynomial_LD< Real, N > operator+ () const;  ; Polynomial_LD< Real, N > operator- () const;  ; Polynomial_LD< Real, N > & operator*= (const Polynomial_LD< Real, N > &b);  ; Polynomial_LD< Real, N > operator* (const Real &alpha);  ; Polynomial_LD< Real, N > operator/ (const Real &alpha);  ; Polynomial_LD< Real, N > operator+ (const Monomial_LD< Real, N > &a);  ; Polynomial_LD< Real, N > operator+ (const Polynomial_LD< Real, N > &a);  ; Polynomial_LD< Real, N > operator- (const Polynomial_LD< Real, N > &a);  ; Polynomial_LD< Real, N > operator* (const Polynomial_LD< Real, N > &a);  ; Real operator() (const RNpoint &x) const;  Evaluating. More...;  ; Real operator() (const RNpoint &x, unsigned int idvar) const;  Evaluating first partial derivative by idvar-th variable. More...;  ; Polynomial_LD< Real, N > d (const unsigned int &ideriv) const;  Evaluating partial derivative hight order by idvar-th variable in ideriv-th order. More...;  ; void setnbOfMonomial (int m_nbofmonomial);  ; void writeToStream (std::ostream &stream) const;  ; void readFromStream (std::istream &stream);  ; std::string getString () const;  ; void sort ();  . Protected Member Functions; void exchangeMonomial (unsigned int ithMono, unsigned int jthMono);  The sort must be done after each constructor and each operation where monomials are inserted. More...;  ; void sortByVar (unsigned int idVar);  . Friends; template<typename FReal , unsigned int FN> ; Polynomial_LD< FReal, FN > & operator* (const FReal &alpha, Polynomial_LD< FReal, FN > &r);  ; template<typename FReal , unsigned int FN> ; Polynomial_LD< FReal, FN > & operator* (const Monomial_LD< FReal, FN > &a, Polynomial_LD< FReal, FN > &r);  poly=poly+mono || mono + poly More...;  . Attribute details. ◆ listOfMonoMial. template<typename Real , unsigned int N> . MonomialsList sofa::helper::Polynomial_LD< Real,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html:4730,Modifiability,variab,variable,4730," unsigned int sofa::helper::Polynomial_LD< Real, N >::nbOfMonomial. Constructor details. ◆ Polynomial_LD() [1/4]. template<typename Real , unsigned int N> . sofa::helper::Polynomial_LD< Real, N >::Polynomial_LD. Default constructor. . ◆ Polynomial_LD() [2/4]. template<typename Real , unsigned int N> . sofa::helper::Polynomial_LD< Real, N >::Polynomial_LD ; (; const Polynomial_LD< Real, N > & ; a). Copy constructor. . ◆ Polynomial_LD() [3/4]. template<typename Real , unsigned int N> . sofa::helper::Polynomial_LD< Real, N >::Polynomial_LD ; (; const Monomial_LD< Real, N > & ; a). ◆ Polynomial_LD() [4/4]. template<typename Real , unsigned int N> . sofa::helper::Polynomial_LD< Real, N >::Polynomial_LD ; (; const unsigned int ; nbofTerm, .  ; ... . ). setting of Polynomial . Function details. ◆ d(). template<typename Real , unsigned int N> . Polynomial_LD< Real, N > sofa::helper::Polynomial_LD< Real, N >::d ; (; const unsigned int & ; ideriv); const. Evaluating partial derivative hight order by idvar-th variable in ideriv-th order. ; Derivative operator allowing to write p1=p2.d(x); . ◆ degree(). template<typename Real , unsigned int N> . int sofa::helper::Polynomial_LD< Real, N >::degree. ◆ exchangeMonomial(). template<typename Real , unsigned int N> . void sofa::helper::Polynomial_LD< Real, N >::exchangeMonomial ; (; unsigned int ; ithMono, . unsigned int ; jthMono . ). protected . The sort must be done after each constructor and each operation where monomials are inserted. . ◆ getString(). template<typename Real , unsigned int N> . std::string sofa::helper::Polynomial_LD< Real, N >::getString. ◆ operator!=(). template<typename Real , unsigned int N> . bool sofa::helper::Polynomial_LD< Real, N >::operator!= ; (; const Polynomial_LD< Real, N > & ; b); const. inline . ◆ operator()() [1/2]. template<typename Real , unsigned int N> . Real sofa::helper::Polynomial_LD< Real, N >::operator() ; (; const RNpoint & ; x); const. Evaluating. . ◆ operator()() [2/2]. template<typenam",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html:5909,Modifiability,variab,variable,5909,"ynomial_LD< Real, N >::degree. ◆ exchangeMonomial(). template<typename Real , unsigned int N> . void sofa::helper::Polynomial_LD< Real, N >::exchangeMonomial ; (; unsigned int ; ithMono, . unsigned int ; jthMono . ). protected . The sort must be done after each constructor and each operation where monomials are inserted. . ◆ getString(). template<typename Real , unsigned int N> . std::string sofa::helper::Polynomial_LD< Real, N >::getString. ◆ operator!=(). template<typename Real , unsigned int N> . bool sofa::helper::Polynomial_LD< Real, N >::operator!= ; (; const Polynomial_LD< Real, N > & ; b); const. inline . ◆ operator()() [1/2]. template<typename Real , unsigned int N> . Real sofa::helper::Polynomial_LD< Real, N >::operator() ; (; const RNpoint & ; x); const. Evaluating. . ◆ operator()() [2/2]. template<typename Real , unsigned int N> . Real sofa::helper::Polynomial_LD< Real, N >::operator() ; (; const RNpoint & ; x, . unsigned int ; idvar . ); const. Evaluating first partial derivative by idvar-th variable. . ◆ operator*() [1/2]. template<typename Real , unsigned int N> . Polynomial_LD<Real,N> sofa::helper::Polynomial_LD< Real, N >::operator* ; (; const Polynomial_LD< Real, N > & ; a). inline . ◆ operator*() [2/2]. template<typename Real , unsigned int N> . Polynomial_LD<Real,N> sofa::helper::Polynomial_LD< Real, N >::operator* ; (; const Real & ; alpha). inline . ◆ operator*=() [1/2]. template<typename Real , unsigned int N> . Polynomial_LD< Real, N > & sofa::helper::Polynomial_LD< Real, N >::operator*= ; (; const Polynomial_LD< Real, N > & ; b). ◆ operator*=() [2/2]. template<typename Real , unsigned int N> . Polynomial_LD< Real, N > & sofa::helper::Polynomial_LD< Real, N >::operator*= ; (; const Real & ; alpha). ◆ operator+() [1/3]. template<typename Real , unsigned int N> . Polynomial_LD<Real,N> sofa::helper::Polynomial_LD< Real, N >::operator+ ; (; ); const. inline . ◆ operator+() [2/3]. template<typename Real , unsigned int N> . Polynomial_LD<Real,N> so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_random_generator-members.html:230,Modifiability,inherit,inherited,230,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::RandomGenerator Member List . This is the complete list of members for sofa::helper::RandomGenerator, including all inherited members. initSeed(long seed)sofa::helper::RandomGenerator; random(T min, T max)sofa::helper::RandomGeneratorinline; random()sofa::helper::RandomGeneratorinline; random(long min, long max)sofa::helper::RandomGeneratorinline; random(double min, double max)sofa::helper::RandomGeneratorinline; random(float min, float max)sofa::helper::RandomGeneratorinline; random(bool, bool)sofa::helper::RandomGeneratorinline; random()sofa::helper::RandomGeneratorinline; randomBase()sofa::helper::RandomGeneratorprotected; RandomGenerator()sofa::helper::RandomGenerator; RandomGenerator(long seed)sofa::helper::RandomGenerator; symrand(T vmax)sofa::helper::RandomGeneratorinline; ~RandomGenerator()sofa::helper::RandomGeneratorvirtual. Generated on Mon Nov 11 2024 03:31:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_random_generator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_random_generator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor-members.html:250,Modifiability,inherit,inherited,250,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::ReadAccessor< T, Enable > Member List . This is the complete list of members for sofa::helper::ReadAccessor< T, Enable >, including all inherited members. const_pointer typedefsofa::helper::ReadAccessor< T, Enable >; const_reference typedefsofa::helper::ReadAccessor< T, Enable >; container_type typedefsofa::helper::ReadAccessor< T, Enable >; operator const_reference() constsofa::helper::ReadAccessor< T, Enable >inline; operator*() constsofa::helper::ReadAccessor< T, Enable >inline; operator->() constsofa::helper::ReadAccessor< T, Enable >inline; pointer typedefsofa::helper::ReadAccessor< T, Enable >; ReadAccessor(const container_type &container)sofa::helper::ReadAccessor< T, Enable >inlineexplicit; ref() constsofa::helper::ReadAccessor< T, Enable >inline; reference typedefsofa::helper::ReadAccessor< T, Enable >; value_type typedefsofa::helper::ReadAccessor< T, Enable >; vrefsofa::helper::ReadAccessor< T, Enable >protected. Generated on Mon Nov 11 2024 03:26:09 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html:630,Integrability,interface,interface,630,"﻿. SOFA API: sofa::helper::ReadAccessor< T, Enable > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::helper::ReadAccessor< T, Enable > Class Template Reference . #include <ReadAccessor.h>. Inheritance diagram for sofa::helper::ReadAccessor< T, Enable >:. [legend]; Detailed Description; template<class T, class Enable = void>; class sofa::helper::ReadAccessor< T, Enable >; A ReadAccessor is a proxy class, holding a reference to a given container and providing access to its data, using an unified interface (similar to std::vector), hiding API differences within containers.; Other advantadges of using a ReadAccessor are :. It can be faster that the default methods and operators of the container, as verifications and changes notifications can be handled in the accessor's constructor and destructor instead of at each item access.; No modifications to the container will be done by mistake; Accesses can be logged for debugging or task dependencies analysis. The default implementation provides only minimal set of methods and operators, sufficient for scalar types but which should be overloaded for more complex types. Various template specializations are typically used, especially for core::objectmodel::Data<T> . Protected Attributes; const container_type * vref;  . Public Member Functions;  ReadAccessor (const container_type &container);  ; const_reference ref () const;  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  . Attribute details. ◆ vref. template<class T , class Enable = void> . const container_type* sofa::helper::ReadAccessor< T, Enable >::vref. protected . Constructor details. ◆ ReadAccessor(). template<class T , class Enable = void> . sofa::helper::ReadAccessor< T, Enable >::ReadAccessor ; (; const container_type & ; container). inlineexplicit . Function details. ◆ ope",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html:1072,Integrability,depend,dependencies,1072,"dAccessor< T, Enable > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::helper::ReadAccessor< T, Enable > Class Template Reference . #include <ReadAccessor.h>. Inheritance diagram for sofa::helper::ReadAccessor< T, Enable >:. [legend]; Detailed Description; template<class T, class Enable = void>; class sofa::helper::ReadAccessor< T, Enable >; A ReadAccessor is a proxy class, holding a reference to a given container and providing access to its data, using an unified interface (similar to std::vector), hiding API differences within containers.; Other advantadges of using a ReadAccessor are :. It can be faster that the default methods and operators of the container, as verifications and changes notifications can be handled in the accessor's constructor and destructor instead of at each item access.; No modifications to the container will be done by mistake; Accesses can be logged for debugging or task dependencies analysis. The default implementation provides only minimal set of methods and operators, sufficient for scalar types but which should be overloaded for more complex types. Various template specializations are typically used, especially for core::objectmodel::Data<T> . Protected Attributes; const container_type * vref;  . Public Member Functions;  ReadAccessor (const container_type &container);  ; const_reference ref () const;  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  . Attribute details. ◆ vref. template<class T , class Enable = void> . const container_type* sofa::helper::ReadAccessor< T, Enable >::vref. protected . Constructor details. ◆ ReadAccessor(). template<class T , class Enable = void> . sofa::helper::ReadAccessor< T, Enable >::ReadAccessor ; (; const container_type & ; container). inlineexplicit . Function details. ◆ operator const_reference(). temp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html:320,Modifiability,Inherit,Inheritance,320,"﻿. SOFA API: sofa::helper::ReadAccessor< T, Enable > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::helper::ReadAccessor< T, Enable > Class Template Reference . #include <ReadAccessor.h>. Inheritance diagram for sofa::helper::ReadAccessor< T, Enable >:. [legend]; Detailed Description; template<class T, class Enable = void>; class sofa::helper::ReadAccessor< T, Enable >; A ReadAccessor is a proxy class, holding a reference to a given container and providing access to its data, using an unified interface (similar to std::vector), hiding API differences within containers.; Other advantadges of using a ReadAccessor are :. It can be faster that the default methods and operators of the container, as verifications and changes notifications can be handled in the accessor's constructor and destructor instead of at each item access.; No modifications to the container will be done by mistake; Accesses can be logged for debugging or task dependencies analysis. The default implementation provides only minimal set of methods and operators, sufficient for scalar types but which should be overloaded for more complex types. Various template specializations are typically used, especially for core::objectmodel::Data<T> . Protected Attributes; const container_type * vref;  . Public Member Functions;  ReadAccessor (const container_type &container);  ; const_reference ref () const;  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  . Attribute details. ◆ vref. template<class T , class Enable = void> . const container_type* sofa::helper::ReadAccessor< T, Enable >::vref. protected . Constructor details. ◆ ReadAccessor(). template<class T , class Enable = void> . sofa::helper::ReadAccessor< T, Enable >::ReadAccessor ; (; const container_type & ; container). inlineexplicit . Function details. ◆ ope",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html:593,Security,access,access,593,"﻿. SOFA API: sofa::helper::ReadAccessor< T, Enable > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::helper::ReadAccessor< T, Enable > Class Template Reference . #include <ReadAccessor.h>. Inheritance diagram for sofa::helper::ReadAccessor< T, Enable >:. [legend]; Detailed Description; template<class T, class Enable = void>; class sofa::helper::ReadAccessor< T, Enable >; A ReadAccessor is a proxy class, holding a reference to a given container and providing access to its data, using an unified interface (similar to std::vector), hiding API differences within containers.; Other advantadges of using a ReadAccessor are :. It can be faster that the default methods and operators of the container, as verifications and changes notifications can be handled in the accessor's constructor and destructor instead of at each item access.; No modifications to the container will be done by mistake; Accesses can be logged for debugging or task dependencies analysis. The default implementation provides only minimal set of methods and operators, sufficient for scalar types but which should be overloaded for more complex types. Various template specializations are typically used, especially for core::objectmodel::Data<T> . Protected Attributes; const container_type * vref;  . Public Member Functions;  ReadAccessor (const container_type &container);  ; const_reference ref () const;  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  . Attribute details. ◆ vref. template<class T , class Enable = void> . const container_type* sofa::helper::ReadAccessor< T, Enable >::vref. protected . Constructor details. ◆ ReadAccessor(). template<class T , class Enable = void> . sofa::helper::ReadAccessor< T, Enable >::ReadAccessor ; (; const container_type & ; container). inlineexplicit . Function details. ◆ ope",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html:897,Security,access,accessor,897,"﻿. SOFA API: sofa::helper::ReadAccessor< T, Enable > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::helper::ReadAccessor< T, Enable > Class Template Reference . #include <ReadAccessor.h>. Inheritance diagram for sofa::helper::ReadAccessor< T, Enable >:. [legend]; Detailed Description; template<class T, class Enable = void>; class sofa::helper::ReadAccessor< T, Enable >; A ReadAccessor is a proxy class, holding a reference to a given container and providing access to its data, using an unified interface (similar to std::vector), hiding API differences within containers.; Other advantadges of using a ReadAccessor are :. It can be faster that the default methods and operators of the container, as verifications and changes notifications can be handled in the accessor's constructor and destructor instead of at each item access.; No modifications to the container will be done by mistake; Accesses can be logged for debugging or task dependencies analysis. The default implementation provides only minimal set of methods and operators, sufficient for scalar types but which should be overloaded for more complex types. Various template specializations are typically used, especially for core::objectmodel::Data<T> . Protected Attributes; const container_type * vref;  . Public Member Functions;  ReadAccessor (const container_type &container);  ; const_reference ref () const;  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  . Attribute details. ◆ vref. template<class T , class Enable = void> . const container_type* sofa::helper::ReadAccessor< T, Enable >::vref. protected . Constructor details. ◆ ReadAccessor(). template<class T , class Enable = void> . sofa::helper::ReadAccessor< T, Enable >::ReadAccessor ; (; const container_type & ; container). inlineexplicit . Function details. ◆ ope",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html:959,Security,access,access,959,"﻿. SOFA API: sofa::helper::ReadAccessor< T, Enable > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::helper::ReadAccessor< T, Enable > Class Template Reference . #include <ReadAccessor.h>. Inheritance diagram for sofa::helper::ReadAccessor< T, Enable >:. [legend]; Detailed Description; template<class T, class Enable = void>; class sofa::helper::ReadAccessor< T, Enable >; A ReadAccessor is a proxy class, holding a reference to a given container and providing access to its data, using an unified interface (similar to std::vector), hiding API differences within containers.; Other advantadges of using a ReadAccessor are :. It can be faster that the default methods and operators of the container, as verifications and changes notifications can be handled in the accessor's constructor and destructor instead of at each item access.; No modifications to the container will be done by mistake; Accesses can be logged for debugging or task dependencies analysis. The default implementation provides only minimal set of methods and operators, sufficient for scalar types but which should be overloaded for more complex types. Various template specializations are typically used, especially for core::objectmodel::Data<T> . Protected Attributes; const container_type * vref;  . Public Member Functions;  ReadAccessor (const container_type &container);  ; const_reference ref () const;  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  . Attribute details. ◆ vref. template<class T , class Enable = void> . const container_type* sofa::helper::ReadAccessor< T, Enable >::vref. protected . Constructor details. ◆ ReadAccessor(). template<class T , class Enable = void> . sofa::helper::ReadAccessor< T, Enable >::ReadAccessor ; (; const container_type & ; container). inlineexplicit . Function details. ◆ ope",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html:1027,Security,Access,Accesses,1027,"dAccessor< T, Enable > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::helper::ReadAccessor< T, Enable > Class Template Reference . #include <ReadAccessor.h>. Inheritance diagram for sofa::helper::ReadAccessor< T, Enable >:. [legend]; Detailed Description; template<class T, class Enable = void>; class sofa::helper::ReadAccessor< T, Enable >; A ReadAccessor is a proxy class, holding a reference to a given container and providing access to its data, using an unified interface (similar to std::vector), hiding API differences within containers.; Other advantadges of using a ReadAccessor are :. It can be faster that the default methods and operators of the container, as verifications and changes notifications can be handled in the accessor's constructor and destructor instead of at each item access.; No modifications to the container will be done by mistake; Accesses can be logged for debugging or task dependencies analysis. The default implementation provides only minimal set of methods and operators, sufficient for scalar types but which should be overloaded for more complex types. Various template specializations are typically used, especially for core::objectmodel::Data<T> . Protected Attributes; const container_type * vref;  . Public Member Functions;  ReadAccessor (const container_type &container);  ; const_reference ref () const;  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  . Attribute details. ◆ vref. template<class T , class Enable = void> . const container_type* sofa::helper::ReadAccessor< T, Enable >::vref. protected . Constructor details. ◆ ReadAccessor(). template<class T , class Enable = void> . sofa::helper::ReadAccessor< T, Enable >::ReadAccessor ; (; const container_type & ; container). inlineexplicit . Function details. ◆ operator const_reference(). temp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html:1043,Testability,log,logged,1043,"dAccessor< T, Enable > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::helper::ReadAccessor< T, Enable > Class Template Reference . #include <ReadAccessor.h>. Inheritance diagram for sofa::helper::ReadAccessor< T, Enable >:. [legend]; Detailed Description; template<class T, class Enable = void>; class sofa::helper::ReadAccessor< T, Enable >; A ReadAccessor is a proxy class, holding a reference to a given container and providing access to its data, using an unified interface (similar to std::vector), hiding API differences within containers.; Other advantadges of using a ReadAccessor are :. It can be faster that the default methods and operators of the container, as verifications and changes notifications can be handled in the accessor's constructor and destructor instead of at each item access.; No modifications to the container will be done by mistake; Accesses can be logged for debugging or task dependencies analysis. The default implementation provides only minimal set of methods and operators, sufficient for scalar types but which should be overloaded for more complex types. Various template specializations are typically used, especially for core::objectmodel::Data<T> . Protected Attributes; const container_type * vref;  . Public Member Functions;  ReadAccessor (const container_type &container);  ; const_reference ref () const;  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  . Attribute details. ◆ vref. template<class T , class Enable = void> . const container_type* sofa::helper::ReadAccessor< T, Enable >::vref. protected . Constructor details. ◆ ReadAccessor(). template<class T , class Enable = void> . sofa::helper::ReadAccessor< T, Enable >::ReadAccessor ; (; const container_type & ; container). inlineexplicit . Function details. ◆ operator const_reference(). temp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4-members.html:288,Modifiability,inherit,inherited,288,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::ReadAccessor< core::objectmodel::Data< T > > Member List . This is the complete list of members for sofa::helper::ReadAccessor< core::objectmodel::Data< T > >, including all inherited members. const_pointer typedefsofa::helper::ReadAccessor< T, Enable >; const_reference typedefsofa::helper::ReadAccessor< T, Enable >; container_type typedefsofa::helper::ReadAccessor< core::objectmodel::Data< T > >; data_container_type typedefsofa::helper::ReadAccessor< core::objectmodel::Data< T > >; Inherit typedefsofa::helper::ReadAccessor< core::objectmodel::Data< T > >; operator const_reference() constsofa::helper::ReadAccessor< T, Enable >inline; operator*() constsofa::helper::ReadAccessor< T, Enable >inline; operator->() constsofa::helper::ReadAccessor< T, Enable >inline; pointer typedefsofa::helper::ReadAccessor< T, Enable >; ReadAccessor(const data_container_type &d)sofa::helper::ReadAccessor< core::objectmodel::Data< T > >inline; ReadAccessor(const data_container_type *d)sofa::helper::ReadAccessor< core::objectmodel::Data< T > >inline; sofa::helper::ReadAccessor::ReadAccessor(const container_type &container)sofa::helper::ReadAccessor< T, Enable >inlineexplicit; ref() constsofa::helper::ReadAccessor< T, Enable >inline; reference typedefsofa::helper::ReadAccessor< T, Enable >; value_type typedefsofa::helper::ReadAccessor< T, Enable >; vrefsofa::helper::ReadAccessor< T, Enable >protected. Generated on Mon Nov 11 2024 03:26:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4-members.html:602,Modifiability,Inherit,Inherit,602,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::ReadAccessor< core::objectmodel::Data< T > > Member List . This is the complete list of members for sofa::helper::ReadAccessor< core::objectmodel::Data< T > >, including all inherited members. const_pointer typedefsofa::helper::ReadAccessor< T, Enable >; const_reference typedefsofa::helper::ReadAccessor< T, Enable >; container_type typedefsofa::helper::ReadAccessor< core::objectmodel::Data< T > >; data_container_type typedefsofa::helper::ReadAccessor< core::objectmodel::Data< T > >; Inherit typedefsofa::helper::ReadAccessor< core::objectmodel::Data< T > >; operator const_reference() constsofa::helper::ReadAccessor< T, Enable >inline; operator*() constsofa::helper::ReadAccessor< T, Enable >inline; operator->() constsofa::helper::ReadAccessor< T, Enable >inline; pointer typedefsofa::helper::ReadAccessor< T, Enable >; ReadAccessor(const data_container_type &d)sofa::helper::ReadAccessor< core::objectmodel::Data< T > >inline; ReadAccessor(const data_container_type *d)sofa::helper::ReadAccessor< core::objectmodel::Data< T > >inline; sofa::helper::ReadAccessor::ReadAccessor(const container_type &container)sofa::helper::ReadAccessor< T, Enable >inlineexplicit; ref() constsofa::helper::ReadAccessor< T, Enable >inline; reference typedefsofa::helper::ReadAccessor< T, Enable >; value_type typedefsofa::helper::ReadAccessor< T, Enable >; vrefsofa::helper::ReadAccessor< T, Enable >protected. Generated on Mon Nov 11 2024 03:26:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:547,Deployability,update,updated,547,"﻿. SOFA API: sofa::helper::ReadAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::ReadAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>. Inheritance diagram for sofa::helper::ReadAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::ReadAccessor< core::objectmodel::Data< T > >; Warningthe Data is updated (if needed) only by the Accessor constructor . Public Member Functions;  ReadAccessor (const data_container_type &d);  ;  ReadAccessor (const data_container_type *d);  ;  Public Member Functions inherited from sofa::helper::ReadAccessor< T, Enable >;  ReadAccessor (const container_type &container);  ; const_reference ref () const;  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::ReadAccessor< T, Enable >; const container_type * vref;  . Constructor details. ◆ ReadAccessor() [1/2]. template<class T > . sofa::helper::ReadAccessor< core::objectmodel::Data< T > >::ReadAccessor ; (; const data_container_type & ; d). inline . ◆ ReadAccessor() [2/2]. template<class T > . sofa::helper::ReadAccessor< core::objectmodel::Data< T > >::ReadAccessor ; (; const data_container_type * ; d). inline . sofahelperReadAccessor< core::objectmodel::Data< T > >; Generated on Mon Nov 11 2024 03:26:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:326,Modifiability,Inherit,Inheritance,326,"﻿. SOFA API: sofa::helper::ReadAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::ReadAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>. Inheritance diagram for sofa::helper::ReadAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::ReadAccessor< core::objectmodel::Data< T > >; Warningthe Data is updated (if needed) only by the Accessor constructor . Public Member Functions;  ReadAccessor (const data_container_type &d);  ;  ReadAccessor (const data_container_type *d);  ;  Public Member Functions inherited from sofa::helper::ReadAccessor< T, Enable >;  ReadAccessor (const container_type &container);  ; const_reference ref () const;  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::ReadAccessor< T, Enable >; const container_type * vref;  . Constructor details. ◆ ReadAccessor() [1/2]. template<class T > . sofa::helper::ReadAccessor< core::objectmodel::Data< T > >::ReadAccessor ; (; const data_container_type & ; d). inline . ◆ ReadAccessor() [2/2]. template<class T > . sofa::helper::ReadAccessor< core::objectmodel::Data< T > >::ReadAccessor ; (; const data_container_type * ; d). inline . sofahelperReadAccessor< core::objectmodel::Data< T > >; Generated on Mon Nov 11 2024 03:26:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:750,Modifiability,inherit,inherited,750,"﻿. SOFA API: sofa::helper::ReadAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::ReadAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>. Inheritance diagram for sofa::helper::ReadAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::ReadAccessor< core::objectmodel::Data< T > >; Warningthe Data is updated (if needed) only by the Accessor constructor . Public Member Functions;  ReadAccessor (const data_container_type &d);  ;  ReadAccessor (const data_container_type *d);  ;  Public Member Functions inherited from sofa::helper::ReadAccessor< T, Enable >;  ReadAccessor (const container_type &container);  ; const_reference ref () const;  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::ReadAccessor< T, Enable >; const container_type * vref;  . Constructor details. ◆ ReadAccessor() [1/2]. template<class T > . sofa::helper::ReadAccessor< core::objectmodel::Data< T > >::ReadAccessor ; (; const data_container_type & ; d). inline . ◆ ReadAccessor() [2/2]. template<class T > . sofa::helper::ReadAccessor< core::objectmodel::Data< T > >::ReadAccessor ; (; const data_container_type * ; d). inline . sofahelperReadAccessor< core::objectmodel::Data< T > >; Generated on Mon Nov 11 2024 03:26:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:1018,Modifiability,Inherit,Inherited,1018,"﻿. SOFA API: sofa::helper::ReadAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::ReadAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>. Inheritance diagram for sofa::helper::ReadAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::ReadAccessor< core::objectmodel::Data< T > >; Warningthe Data is updated (if needed) only by the Accessor constructor . Public Member Functions;  ReadAccessor (const data_container_type &d);  ;  ReadAccessor (const data_container_type *d);  ;  Public Member Functions inherited from sofa::helper::ReadAccessor< T, Enable >;  ReadAccessor (const container_type &container);  ; const_reference ref () const;  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::ReadAccessor< T, Enable >; const container_type * vref;  . Constructor details. ◆ ReadAccessor() [1/2]. template<class T > . sofa::helper::ReadAccessor< core::objectmodel::Data< T > >::ReadAccessor ; (; const data_container_type & ; d). inline . ◆ ReadAccessor() [2/2]. template<class T > . sofa::helper::ReadAccessor< core::objectmodel::Data< T > >::ReadAccessor ; (; const data_container_type * ; d). inline . sofahelperReadAccessor< core::objectmodel::Data< T > >; Generated on Mon Nov 11 2024 03:26:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:1059,Modifiability,inherit,inherited,1059,"﻿. SOFA API: sofa::helper::ReadAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::ReadAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>. Inheritance diagram for sofa::helper::ReadAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::ReadAccessor< core::objectmodel::Data< T > >; Warningthe Data is updated (if needed) only by the Accessor constructor . Public Member Functions;  ReadAccessor (const data_container_type &d);  ;  ReadAccessor (const data_container_type *d);  ;  Public Member Functions inherited from sofa::helper::ReadAccessor< T, Enable >;  ReadAccessor (const container_type &container);  ; const_reference ref () const;  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::ReadAccessor< T, Enable >; const container_type * vref;  . Constructor details. ◆ ReadAccessor() [1/2]. template<class T > . sofa::helper::ReadAccessor< core::objectmodel::Data< T > >::ReadAccessor ; (; const data_container_type & ; d). inline . ◆ ReadAccessor() [2/2]. template<class T > . sofa::helper::ReadAccessor< core::objectmodel::Data< T > >::ReadAccessor ; (; const data_container_type * ; d). inline . sofahelperReadAccessor< core::objectmodel::Data< T > >; Generated on Mon Nov 11 2024 03:26:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:579,Security,Access,Accessor,579,"﻿. SOFA API: sofa::helper::ReadAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::ReadAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>. Inheritance diagram for sofa::helper::ReadAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::ReadAccessor< core::objectmodel::Data< T > >; Warningthe Data is updated (if needed) only by the Accessor constructor . Public Member Functions;  ReadAccessor (const data_container_type &d);  ;  ReadAccessor (const data_container_type *d);  ;  Public Member Functions inherited from sofa::helper::ReadAccessor< T, Enable >;  ReadAccessor (const container_type &container);  ; const_reference ref () const;  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::ReadAccessor< T, Enable >; const container_type * vref;  . Constructor details. ◆ ReadAccessor() [1/2]. template<class T > . sofa::helper::ReadAccessor< core::objectmodel::Data< T > >::ReadAccessor ; (; const data_container_type & ; d). inline . ◆ ReadAccessor() [2/2]. template<class T > . sofa::helper::ReadAccessor< core::objectmodel::Data< T > >::ReadAccessor ; (; const data_container_type * ; d). inline . sofahelperReadAccessor< core::objectmodel::Data< T > >; Generated on Mon Nov 11 2024 03:26:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00986d78fd57a45eca82aeb5daa3c5a538.html:334,Modifiability,inherit,inherited,334,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > > Member List . This is the complete list of members for sofa::helper::ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >, including all inherited members. begin() constsofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; const_iterator typedefsofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; const_reference typedefsofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; container_type typedefsofa::helper::ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >; empty() constsofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; end() constsofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; Index typedefsofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; Inherit typedefsofa::helper::ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >; iterator typedefsofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; operator()(Index i) constsofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; operator[](Index i) constsofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; ReadAccessor(const container_type &c)sofa::helper::ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; ReadAccessorVectorId(const container_type &container)sofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; ref() constsofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; reference typedefsofa::helper::ReadAccessorVectorId",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00986d78fd57a45eca82aeb5daa3c5a538.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00986d78fd57a45eca82aeb5daa3c5a538.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00986d78fd57a45eca82aeb5daa3c5a538.html:1117,Modifiability,Inherit,Inherit,1117," begin() constsofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; const_iterator typedefsofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; const_reference typedefsofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; container_type typedefsofa::helper::ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >; empty() constsofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; end() constsofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; Index typedefsofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; Inherit typedefsofa::helper::ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >; iterator typedefsofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; operator()(Index i) constsofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; operator[](Index i) constsofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; ReadAccessor(const container_type &c)sofa::helper::ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; ReadAccessorVectorId(const container_type &container)sofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; ref() constsofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; reference typedefsofa::helper::ReadAccessorVectorId",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00986d78fd57a45eca82aeb5daa3c5a538.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00986d78fd57a45eca82aeb5daa3c5a538.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html:378,Modifiability,Inherit,Inheritance,378,"﻿. SOFA API: sofa::helper::ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > > Class Template Reference . #include <integer_id.h>. Inheritance diagram for sofa::helper::ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >:. [legend]. Public Member Functions;  ReadAccessor (const container_type &c);  ;  Public Member Functions inherited from sofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >;  ReadAccessorVectorId (const container_type &container);  ;  ~ReadAccessorVectorId ();  ; const container_type & ref () const;  ; bool empty () const;  ; Size size () const;  ; const_reference operator[] (Index i) const;  ; const_reference operator() (Index i) const;  ; const_iterator begin () const;  ; const_iterator end () const;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; const container_type & vref;  . Constructor details. ◆ ReadAccessor(). template<class T , class TIndex , bool CheckIndices, class MemoryManager > . sofa::helper::ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >::ReadAccessor ; (; const container_type & ; c). inline . sofahelperReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >; Generated on Mon Nov 11 2024 03:29:37 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html:590,Modifiability,inherit,inherited,590,"﻿. SOFA API: sofa::helper::ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > > Class Template Reference . #include <integer_id.h>. Inheritance diagram for sofa::helper::ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >:. [legend]. Public Member Functions;  ReadAccessor (const container_type &c);  ;  Public Member Functions inherited from sofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >;  ReadAccessorVectorId (const container_type &container);  ;  ~ReadAccessorVectorId ();  ; const container_type & ref () const;  ; bool empty () const;  ; Size size () const;  ; const_reference operator[] (Index i) const;  ; const_reference operator() (Index i) const;  ; const_iterator begin () const;  ; const_iterator end () const;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; const container_type & vref;  . Constructor details. ◆ ReadAccessor(). template<class T , class TIndex , bool CheckIndices, class MemoryManager > . sofa::helper::ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >::ReadAccessor ; (; const container_type & ; c). inline . sofahelperReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >; Generated on Mon Nov 11 2024 03:29:37 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html:1044,Modifiability,Inherit,Inherited,1044,"﻿. SOFA API: sofa::helper::ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > > Class Template Reference . #include <integer_id.h>. Inheritance diagram for sofa::helper::ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >:. [legend]. Public Member Functions;  ReadAccessor (const container_type &c);  ;  Public Member Functions inherited from sofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >;  ReadAccessorVectorId (const container_type &container);  ;  ~ReadAccessorVectorId ();  ; const container_type & ref () const;  ; bool empty () const;  ; Size size () const;  ; const_reference operator[] (Index i) const;  ; const_reference operator() (Index i) const;  ; const_iterator begin () const;  ; const_iterator end () const;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; const container_type & vref;  . Constructor details. ◆ ReadAccessor(). template<class T , class TIndex , bool CheckIndices, class MemoryManager > . sofa::helper::ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >::ReadAccessor ; (; const container_type & ; c). inline . sofahelperReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >; Generated on Mon Nov 11 2024 03:29:37 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html:1085,Modifiability,inherit,inherited,1085,"﻿. SOFA API: sofa::helper::ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > > Class Template Reference . #include <integer_id.h>. Inheritance diagram for sofa::helper::ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >:. [legend]. Public Member Functions;  ReadAccessor (const container_type &c);  ;  Public Member Functions inherited from sofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >;  ReadAccessorVectorId (const container_type &container);  ;  ~ReadAccessorVectorId ();  ; const container_type & ref () const;  ; bool empty () const;  ; Size size () const;  ; const_reference operator[] (Index i) const;  ; const_reference operator() (Index i) const;  ; const_iterator begin () const;  ; const_iterator end () const;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::ReadAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; const container_type & vref;  . Constructor details. ◆ ReadAccessor(). template<class T , class TIndex , bool CheckIndices, class MemoryManager > . sofa::helper::ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >::ReadAccessor ; (; const container_type & ; c). inline . sofahelperReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >; Generated on Mon Nov 11 2024 03:29:37 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_19545b393afc06ce87e7a678b67613e38.html:456,Modifiability,Inherit,Inheritance,456,"﻿. SOFA API: sofa::helper::ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > > Class Template Reference . #include <ReadAccessor.h>. Inheritance diagram for sofa::helper::ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >:. [legend]. Public Member Functions;  ReadAccessor (const container_type &c);  ;  Public Member Functions inherited from sofa::helper::ReadAccessorVector< VectorLikeType >;  ReadAccessorVector (const container_type &container);  ; bool empty () const;  ; Size size () const;  ; const_reference operator[] (Size i) const;  ; const_iterator begin () const;  ; const_iterator end () const;  ;  operator const_container_type & () const;  ; const_container_type * operator-> () const;  ; const_container_type & operator* () const;  ; const_container_type & ref () const;  this duplicate operator* (remove ?) More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::ReadAccessorVector< VectorLikeType >; const container_type * vref;  . Constructor details. ◆ ReadAccessor(). template<class VectorLikeType > . sofa::helper::ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >::ReadAccessor ; (; const container_type & ; c). inline . sofahelperReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >; Generated on Mon Nov 11 2024 03:26:27 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_19545b393afc06ce87e7a678b67613e38.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_19545b393afc06ce87e7a678b67613e38.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_19545b393afc06ce87e7a678b67613e38.html:706,Modifiability,inherit,inherited,706,"﻿. SOFA API: sofa::helper::ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > > Class Template Reference . #include <ReadAccessor.h>. Inheritance diagram for sofa::helper::ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >:. [legend]. Public Member Functions;  ReadAccessor (const container_type &c);  ;  Public Member Functions inherited from sofa::helper::ReadAccessorVector< VectorLikeType >;  ReadAccessorVector (const container_type &container);  ; bool empty () const;  ; Size size () const;  ; const_reference operator[] (Size i) const;  ; const_iterator begin () const;  ; const_iterator end () const;  ;  operator const_container_type & () const;  ; const_container_type * operator-> () const;  ; const_container_type & operator* () const;  ; const_container_type & ref () const;  this duplicate operator* (remove ?) More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::ReadAccessorVector< VectorLikeType >; const container_type * vref;  . Constructor details. ◆ ReadAccessor(). template<class VectorLikeType > . sofa::helper::ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >::ReadAccessor ; (; const container_type & ; c). inline . sofahelperReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >; Generated on Mon Nov 11 2024 03:26:27 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_19545b393afc06ce87e7a678b67613e38.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_19545b393afc06ce87e7a678b67613e38.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_19545b393afc06ce87e7a678b67613e38.html:1226,Modifiability,Inherit,Inherited,1226,"﻿. SOFA API: sofa::helper::ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > > Class Template Reference . #include <ReadAccessor.h>. Inheritance diagram for sofa::helper::ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >:. [legend]. Public Member Functions;  ReadAccessor (const container_type &c);  ;  Public Member Functions inherited from sofa::helper::ReadAccessorVector< VectorLikeType >;  ReadAccessorVector (const container_type &container);  ; bool empty () const;  ; Size size () const;  ; const_reference operator[] (Size i) const;  ; const_iterator begin () const;  ; const_iterator end () const;  ;  operator const_container_type & () const;  ; const_container_type * operator-> () const;  ; const_container_type & operator* () const;  ; const_container_type & ref () const;  this duplicate operator* (remove ?) More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::ReadAccessorVector< VectorLikeType >; const container_type * vref;  . Constructor details. ◆ ReadAccessor(). template<class VectorLikeType > . sofa::helper::ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >::ReadAccessor ; (; const container_type & ; c). inline . sofahelperReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >; Generated on Mon Nov 11 2024 03:26:27 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_19545b393afc06ce87e7a678b67613e38.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_19545b393afc06ce87e7a678b67613e38.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_19545b393afc06ce87e7a678b67613e38.html:1267,Modifiability,inherit,inherited,1267,"﻿. SOFA API: sofa::helper::ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > > Class Template Reference . #include <ReadAccessor.h>. Inheritance diagram for sofa::helper::ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >:. [legend]. Public Member Functions;  ReadAccessor (const container_type &c);  ;  Public Member Functions inherited from sofa::helper::ReadAccessorVector< VectorLikeType >;  ReadAccessorVector (const container_type &container);  ; bool empty () const;  ; Size size () const;  ; const_reference operator[] (Size i) const;  ; const_iterator begin () const;  ; const_iterator end () const;  ;  operator const_container_type & () const;  ; const_container_type * operator-> () const;  ; const_container_type & operator* () const;  ; const_container_type & ref () const;  this duplicate operator* (remove ?) More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::ReadAccessorVector< VectorLikeType >; const container_type * vref;  . Constructor details. ◆ ReadAccessor(). template<class VectorLikeType > . sofa::helper::ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >::ReadAccessor ; (; const container_type & ; c). inline . sofahelperReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >; Generated on Mon Nov 11 2024 03:26:27 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_19545b393afc06ce87e7a678b67613e38.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_19545b393afc06ce87e7a678b67613e38.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_1d066c4dbd9a37dcee11fef582b3aeb6d.html:410,Modifiability,inherit,inherited,410,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > > Member List . This is the complete list of members for sofa::helper::ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >, including all inherited members. begin() constsofa::helper::ReadAccessorVector< VectorLikeType >inline; const_container_type typedefsofa::helper::ReadAccessorVector< VectorLikeType >; const_iterator typedefsofa::helper::ReadAccessorVector< VectorLikeType >; const_reference typedefsofa::helper::ReadAccessorVector< VectorLikeType >; container_type typedefsofa::helper::ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >; empty() constsofa::helper::ReadAccessorVector< VectorLikeType >inline; end() constsofa::helper::ReadAccessorVector< VectorLikeType >inline; Inherit typedefsofa::helper::ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >; iterator typedefsofa::helper::ReadAccessorVector< VectorLikeType >; operator const_container_type &() constsofa::helper::ReadAccessorVector< VectorLikeType >inline; operator*() constsofa::helper::ReadAccessorVector< VectorLikeType >inline; operator->() constsofa::helper::ReadAccessorVector< VectorLikeType >inline; operator[](Size i) constsofa::helper::ReadAccessorVector< VectorLikeType >inline; ReadAccessor(const container_type &c)sofa::helper::ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >inline; ReadAccessorVector(const container_type &container)sofa::helper::ReadAccessorVector< VectorLikeType >inline; ref() constsofa::helper::ReadAccessorVector< VectorLikeType >inline; reference typedefsofa::helper::ReadAccessorVector< VectorLikeType >; size() constsofa::helper::ReadAccessorVector",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_1d066c4dbd9a37dcee11fef582b3aeb6d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_1d066c4dbd9a37dcee11fef582b3aeb6d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_1d066c4dbd9a37dcee11fef582b3aeb6d.html:1012,Modifiability,Inherit,Inherit,1012,":ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >, including all inherited members. begin() constsofa::helper::ReadAccessorVector< VectorLikeType >inline; const_container_type typedefsofa::helper::ReadAccessorVector< VectorLikeType >; const_iterator typedefsofa::helper::ReadAccessorVector< VectorLikeType >; const_reference typedefsofa::helper::ReadAccessorVector< VectorLikeType >; container_type typedefsofa::helper::ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >; empty() constsofa::helper::ReadAccessorVector< VectorLikeType >inline; end() constsofa::helper::ReadAccessorVector< VectorLikeType >inline; Inherit typedefsofa::helper::ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >; iterator typedefsofa::helper::ReadAccessorVector< VectorLikeType >; operator const_container_type &() constsofa::helper::ReadAccessorVector< VectorLikeType >inline; operator*() constsofa::helper::ReadAccessorVector< VectorLikeType >inline; operator->() constsofa::helper::ReadAccessorVector< VectorLikeType >inline; operator[](Size i) constsofa::helper::ReadAccessorVector< VectorLikeType >inline; ReadAccessor(const container_type &c)sofa::helper::ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >inline; ReadAccessorVector(const container_type &container)sofa::helper::ReadAccessorVector< VectorLikeType >inline; ref() constsofa::helper::ReadAccessorVector< VectorLikeType >inline; reference typedefsofa::helper::ReadAccessorVector< VectorLikeType >; size() constsofa::helper::ReadAccessorVector< VectorLikeType >inline; Size typedefsofa::helper::ReadAccessorVector< VectorLikeType >; value_type typedefsofa::helper::ReadAccessorVector< VectorLikeType >; vrefsofa::helper::ReadAccessorVector< VectorLikeType >protected. Generated on Mon Nov 11 2024 03:26:27 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_1d066c4dbd9a37dcee11fef582b3aeb6d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_1d066c4dbd9a37dcee11fef582b3aeb6d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_vector-members.html:246,Modifiability,inherit,inherited,246,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::ReadAccessorVector< T > Member List . This is the complete list of members for sofa::helper::ReadAccessorVector< T >, including all inherited members. begin() constsofa::helper::ReadAccessorVector< T >inline; const_container_type typedefsofa::helper::ReadAccessorVector< T >; const_iterator typedefsofa::helper::ReadAccessorVector< T >; const_reference typedefsofa::helper::ReadAccessorVector< T >; container_type typedefsofa::helper::ReadAccessorVector< T >; empty() constsofa::helper::ReadAccessorVector< T >inline; end() constsofa::helper::ReadAccessorVector< T >inline; iterator typedefsofa::helper::ReadAccessorVector< T >; operator const_container_type &() constsofa::helper::ReadAccessorVector< T >inline; operator*() constsofa::helper::ReadAccessorVector< T >inline; operator->() constsofa::helper::ReadAccessorVector< T >inline; operator[](Size i) constsofa::helper::ReadAccessorVector< T >inline; ReadAccessorVector(const container_type &container)sofa::helper::ReadAccessorVector< T >inline; ref() constsofa::helper::ReadAccessorVector< T >inline; reference typedefsofa::helper::ReadAccessorVector< T >; size() constsofa::helper::ReadAccessorVector< T >inline; Size typedefsofa::helper::ReadAccessorVector< T >; value_type typedefsofa::helper::ReadAccessorVector< T >; vrefsofa::helper::ReadAccessorVector< T >protected. Generated on Mon Nov 11 2024 03:26:39 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_vector.html:499,Integrability,wrap,wrapping,499,﻿. SOFA API: sofa::helper::ReadAccessorVector< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::helper::ReadAccessorVector< T > Class Template Reference . #include <ReadAccessorVector.h>. Inheritance diagram for sofa::helper::ReadAccessorVector< T >:. [legend]; Detailed Description; template<class T>; class sofa::helper::ReadAccessorVector< T >; ReadAccessor for wrapping around vector like object ////////////////////// ReadAccessor implementation class for vector types . Protected Attributes; const container_type * vref;  . Public Member Functions;  ReadAccessorVector (const container_type &container);  ; bool empty () const;  ; Size size () const;  ; const_reference operator[] (Size i) const;  ; const_iterator begin () const;  ; const_iterator end () const;  ;  operator const_container_type & () const;  ; const_container_type * operator-> () const;  ; const_container_type & operator* () const;  ; const_container_type & ref () const;  this duplicate operator* (remove ?) More...;  . Attribute details. ◆ vref. template<class T > . const container_type* sofa::helper::ReadAccessorVector< T >::vref. protected . Constructor details. ◆ ReadAccessorVector(). template<class T > . sofa::helper::ReadAccessorVector< T >::ReadAccessorVector ; (; const container_type & ; container). inline . Function details. ◆ begin(). template<class T > . const_iterator sofa::helper::ReadAccessorVector< T >::begin ; (; ); const. inline . ◆ empty(). template<class T > . bool sofa::helper::ReadAccessorVector< T >::empty ; (; ); const. inline . ◆ end(). template<class T > . const_iterator sofa::helper::ReadAccessorVector< T >::end ; (; ); const. inline . ◆ operator const_container_type &(). template<class T > . sofa::helper::ReadAccessorVector< T >::operator const_container_type & ; (; ); const. inline . ◆ operator*(). template<class T > . const_container_type& sofa:,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_vector.html:322,Modifiability,Inherit,Inheritance,322,﻿. SOFA API: sofa::helper::ReadAccessorVector< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::helper::ReadAccessorVector< T > Class Template Reference . #include <ReadAccessorVector.h>. Inheritance diagram for sofa::helper::ReadAccessorVector< T >:. [legend]; Detailed Description; template<class T>; class sofa::helper::ReadAccessorVector< T >; ReadAccessor for wrapping around vector like object ////////////////////// ReadAccessor implementation class for vector types . Protected Attributes; const container_type * vref;  . Public Member Functions;  ReadAccessorVector (const container_type &container);  ; bool empty () const;  ; Size size () const;  ; const_reference operator[] (Size i) const;  ; const_iterator begin () const;  ; const_iterator end () const;  ;  operator const_container_type & () const;  ; const_container_type * operator-> () const;  ; const_container_type & operator* () const;  ; const_container_type & ref () const;  this duplicate operator* (remove ?) More...;  . Attribute details. ◆ vref. template<class T > . const container_type* sofa::helper::ReadAccessorVector< T >::vref. protected . Constructor details. ◆ ReadAccessorVector(). template<class T > . sofa::helper::ReadAccessorVector< T >::ReadAccessorVector ; (; const container_type & ; container). inline . Function details. ◆ begin(). template<class T > . const_iterator sofa::helper::ReadAccessorVector< T >::begin ; (; ); const. inline . ◆ empty(). template<class T > . bool sofa::helper::ReadAccessorVector< T >::empty ; (; ); const. inline . ◆ end(). template<class T > . const_iterator sofa::helper::ReadAccessorVector< T >::end ; (; ); const. inline . ◆ operator const_container_type &(). template<class T > . sofa::helper::ReadAccessorVector< T >::operator const_container_type & ; (; ); const. inline . ◆ operator*(). template<class T > . const_container_type& sofa:,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_vector_id-members.html:250,Modifiability,inherit,inherited,250,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::ReadAccessorVectorId< T > Member List . This is the complete list of members for sofa::helper::ReadAccessorVectorId< T >, including all inherited members. begin() constsofa::helper::ReadAccessorVectorId< T >inline; const_iterator typedefsofa::helper::ReadAccessorVectorId< T >; const_reference typedefsofa::helper::ReadAccessorVectorId< T >; container_type typedefsofa::helper::ReadAccessorVectorId< T >; empty() constsofa::helper::ReadAccessorVectorId< T >inline; end() constsofa::helper::ReadAccessorVectorId< T >inline; Index typedefsofa::helper::ReadAccessorVectorId< T >; iterator typedefsofa::helper::ReadAccessorVectorId< T >; operator()(Index i) constsofa::helper::ReadAccessorVectorId< T >inline; operator<<(std::ostream &os, const ReadAccessorVectorId< T > &vec)sofa::helper::ReadAccessorVectorId< T >friend; operator[](Index i) constsofa::helper::ReadAccessorVectorId< T >inline; ReadAccessorVectorId(const container_type &container)sofa::helper::ReadAccessorVectorId< T >inline; ref() constsofa::helper::ReadAccessorVectorId< T >inline; reference typedefsofa::helper::ReadAccessorVectorId< T >; size() constsofa::helper::ReadAccessorVectorId< T >inline; Size typedefsofa::helper::ReadAccessorVectorId< T >; value_type typedefsofa::helper::ReadAccessorVectorId< T >; vrefsofa::helper::ReadAccessorVectorId< T >protected; ~ReadAccessorVectorId()sofa::helper::ReadAccessorVectorId< T >inline. Generated on Mon Nov 11 2024 03:28:54 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_vector_id-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_vector_id-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_vector_id.html:394,Modifiability,Inherit,Inheritance,394,"﻿. SOFA API: sofa::helper::ReadAccessorVectorId< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Friends |; List of all members . sofa::helper::ReadAccessorVectorId< T > Class Template Reference . #include <integer_id.h>; ReadAccessor implementation class for vector_id types. ; More... Inheritance diagram for sofa::helper::ReadAccessorVectorId< T >:. [legend]; Detailed Description; template<class T>; class sofa::helper::ReadAccessorVectorId< T >; ReadAccessor implementation class for vector_id types. . Protected Attributes; const container_type & vref;  . Public Member Functions;  ReadAccessorVectorId (const container_type &container);  ;  ~ReadAccessorVectorId ();  ; const container_type & ref () const;  ; bool empty () const;  ; Size size () const;  ; const_reference operator[] (Index i) const;  ; const_reference operator() (Index i) const;  ; const_iterator begin () const;  ; const_iterator end () const;  . Friends; std::ostream & operator<< (std::ostream &os, const ReadAccessorVectorId< T > &vec);  . Attribute details. ◆ vref. template<class T > . const container_type& sofa::helper::ReadAccessorVectorId< T >::vref. protected . Constructor details. ◆ ReadAccessorVectorId(). template<class T > . sofa::helper::ReadAccessorVectorId< T >::ReadAccessorVectorId ; (; const container_type & ; container). inline . ◆ ~ReadAccessorVectorId(). template<class T > . sofa::helper::ReadAccessorVectorId< T >::~ReadAccessorVectorId ; (; ). inline . Function details. ◆ begin(). template<class T > . const_iterator sofa::helper::ReadAccessorVectorId< T >::begin ; (; ); const. inline . ◆ empty(). template<class T > . bool sofa::helper::ReadAccessorVectorId< T >::empty ; (; ); const. inline . ◆ end(). template<class T > . const_iterator sofa::helper::ReadAccessorVectorId< T >::end ; (; ); const. inline . ◆ operator()(). template<class T > . const_reference sofa::helper::ReadAccesso",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_vector_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_vector_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_record-members.html:212,Modifiability,inherit,inherited,212,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::Record Member List . This is the complete list of members for sofa::helper::Record, including all inherited members. idsofa::helper::Record; labelsofa::helper::Record; objsofa::helper::Record; RBEGIN enum valuesofa::helper::Record; Record()sofa::helper::Recordinline; REND enum valuesofa::helper::Record; RNONE enum valuesofa::helper::Record; RSTEP enum valuesofa::helper::Record; RSTEP_BEGIN enum valuesofa::helper::Record; RSTEP_END enum valuesofa::helper::Record; RVAL_ADD enum valuesofa::helper::Record; RVAL_SET enum valuesofa::helper::Record; timesofa::helper::Record; Type enum namesofa::helper::Record; typesofa::helper::Record; valsofa::helper::Record. Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_record-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_record-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_record.html:1104,Deployability,Update,UpdateMapping,1104,"rt (i.e., Simulation::step): AdvancedTimer::begin(""Animate"");; When all computations stop (i.e., Simulation::step): AdvancedTimer::end(""Animate"");; Using a local variable to automatically call end when current instruction block (i.e. method) ends : AdvancedTimer::TimerVar(""Animate"");; When a part of the computation starts: AdvancedTimer::stepBegin(""Collision"");; When a part of the computation stops: AdvancedTimer::stepEnd(""Collision"");; Both operations combined: AdvancedTimer::stepNext(""Collision"", ""Mechanical"");; Using a local variable to automatically call stepEnd when current instruction block (i.e. method) ends : AdvancedTimer::StepVar(""UpdateMapping"");; Specifying the object being processed: AdvancedTimer::StepVar(""Collision"", objPtr);; When a noteworthy milestone happens: AdvancedTimer::step(""Event1"");; When a noteworthy value must be stored: AdvancedTimer::valSet(""contacts"",nbContacts);; When a noteworthy value must be accumulated: AdvancedTimer::valAdd(""dofs"",mstate->getSize());; When reloading/resetting the simulation: AdvancedTimer::clear();; The produced stats will looks like:; ==== Animate ====; Trace of last iteration : 0 ms > begin Collision : var nbCM = 10 10 ms > begin BP 20 ms < end NP > begin NP 120 ms < end NP : var nbContacts = 100 > begin Response 150 ms < end Response < end Collision > begin Mechanical > begin CGSolve on Torus1 : var dofs += 300 ... 434 ms END; Steps Duration Statistics (in ms) : LEVEL START NUM MEAN MAX TOTAL ID 0 0 100 222.2 546.3 22220 TOTAL 1 0 1 80.5 120.7 80.5 Collision 2 0 1 7.2 8.4 7.2 BP 2 7.2 0.95 65.4 104.8 62.3 NP 2 69.5 1 11.0 13.7 11.0 Response 1 80.5 1 131.1 308.9 131.1 Mechanical 2 80.5 10 13.1 45.7 131.0 CGSolve ...; Values Statistics : MIN MAX MEAN ID 10 10 10 nbCM 0 1230 420.3 nbContacts 5000 5000 5000 dofs; ==== END ==== . Public Attributes; sofa::helper::system::thread::ctime_t time;  ; enum sofa::helper::Record::Type type;  ; std::string label;  ; unsigned int id;  ; unsigned int obj;  ; double val;  . Pub",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_record.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_record.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_record.html:617,Modifiability,variab,variable,617,"﻿. SOFA API: sofa::helper::Record Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::helper::Record Class Reference . #include <AdvancedTimer.h>; Detailed Description; Advanced timer, meant to gather precise statistics for results in published papers. Not so advanced for now, but it will be...; Usage examples :; When all computations start (i.e., Simulation::step): AdvancedTimer::begin(""Animate"");; When all computations stop (i.e., Simulation::step): AdvancedTimer::end(""Animate"");; Using a local variable to automatically call end when current instruction block (i.e. method) ends : AdvancedTimer::TimerVar(""Animate"");; When a part of the computation starts: AdvancedTimer::stepBegin(""Collision"");; When a part of the computation stops: AdvancedTimer::stepEnd(""Collision"");; Both operations combined: AdvancedTimer::stepNext(""Collision"", ""Mechanical"");; Using a local variable to automatically call stepEnd when current instruction block (i.e. method) ends : AdvancedTimer::StepVar(""UpdateMapping"");; Specifying the object being processed: AdvancedTimer::StepVar(""Collision"", objPtr);; When a noteworthy milestone happens: AdvancedTimer::step(""Event1"");; When a noteworthy value must be stored: AdvancedTimer::valSet(""contacts"",nbContacts);; When a noteworthy value must be accumulated: AdvancedTimer::valAdd(""dofs"",mstate->getSize());; When reloading/resetting the simulation: AdvancedTimer::clear();; The produced stats will looks like:; ==== Animate ====; Trace of last iteration : 0 ms > begin Collision : var nbCM = 10 10 ms > begin BP 20 ms < end NP > begin NP 120 ms < end NP : var nbContacts = 100 > begin Response 150 ms < end Response < end Collision > begin Mechanical > begin CGSolve on Torus1 : var dofs += 300 ... 434 ms END; Steps Duration Statistics (in ms) : LEVEL START NUM MEAN MAX TOTAL ID 0 0 100 222.2 546.3 22220 TOTAL 1 0 1 80.5 120.7 80.5 Collision 2 0 1 ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_record.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_record.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_record.html:989,Modifiability,variab,variable,989,"﻿. SOFA API: sofa::helper::Record Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::helper::Record Class Reference . #include <AdvancedTimer.h>; Detailed Description; Advanced timer, meant to gather precise statistics for results in published papers. Not so advanced for now, but it will be...; Usage examples :; When all computations start (i.e., Simulation::step): AdvancedTimer::begin(""Animate"");; When all computations stop (i.e., Simulation::step): AdvancedTimer::end(""Animate"");; Using a local variable to automatically call end when current instruction block (i.e. method) ends : AdvancedTimer::TimerVar(""Animate"");; When a part of the computation starts: AdvancedTimer::stepBegin(""Collision"");; When a part of the computation stops: AdvancedTimer::stepEnd(""Collision"");; Both operations combined: AdvancedTimer::stepNext(""Collision"", ""Mechanical"");; Using a local variable to automatically call stepEnd when current instruction block (i.e. method) ends : AdvancedTimer::StepVar(""UpdateMapping"");; Specifying the object being processed: AdvancedTimer::StepVar(""Collision"", objPtr);; When a noteworthy milestone happens: AdvancedTimer::step(""Event1"");; When a noteworthy value must be stored: AdvancedTimer::valSet(""contacts"",nbContacts);; When a noteworthy value must be accumulated: AdvancedTimer::valAdd(""dofs"",mstate->getSize());; When reloading/resetting the simulation: AdvancedTimer::clear();; The produced stats will looks like:; ==== Animate ====; Trace of last iteration : 0 ms > begin Collision : var nbCM = 10 10 ms > begin BP 20 ms < end NP > begin NP 120 ms < end NP : var nbContacts = 100 > begin Response 150 ms < end Response < end Collision > begin Mechanical > begin CGSolve on Torus1 : var dofs += 300 ... 434 ms END; Steps Duration Statistics (in ms) : LEVEL START NUM MEAN MAX TOTAL ID 0 0 100 222.2 546.3 22220 TOTAL 1 0 1 80.5 120.7 80.5 Collision 2 0 1 ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_record.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_record.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_record.html:1514,Usability,clear,clear,1514,"rt (i.e., Simulation::step): AdvancedTimer::begin(""Animate"");; When all computations stop (i.e., Simulation::step): AdvancedTimer::end(""Animate"");; Using a local variable to automatically call end when current instruction block (i.e. method) ends : AdvancedTimer::TimerVar(""Animate"");; When a part of the computation starts: AdvancedTimer::stepBegin(""Collision"");; When a part of the computation stops: AdvancedTimer::stepEnd(""Collision"");; Both operations combined: AdvancedTimer::stepNext(""Collision"", ""Mechanical"");; Using a local variable to automatically call stepEnd when current instruction block (i.e. method) ends : AdvancedTimer::StepVar(""UpdateMapping"");; Specifying the object being processed: AdvancedTimer::StepVar(""Collision"", objPtr);; When a noteworthy milestone happens: AdvancedTimer::step(""Event1"");; When a noteworthy value must be stored: AdvancedTimer::valSet(""contacts"",nbContacts);; When a noteworthy value must be accumulated: AdvancedTimer::valAdd(""dofs"",mstate->getSize());; When reloading/resetting the simulation: AdvancedTimer::clear();; The produced stats will looks like:; ==== Animate ====; Trace of last iteration : 0 ms > begin Collision : var nbCM = 10 10 ms > begin BP 20 ms < end NP > begin NP 120 ms < end NP : var nbContacts = 100 > begin Response 150 ms < end Response < end Collision > begin Mechanical > begin CGSolve on Torus1 : var dofs += 300 ... 434 ms END; Steps Duration Statistics (in ms) : LEVEL START NUM MEAN MAX TOTAL ID 0 0 100 222.2 546.3 22220 TOTAL 1 0 1 80.5 120.7 80.5 Collision 2 0 1 7.2 8.4 7.2 BP 2 7.2 0.95 65.4 104.8 62.3 NP 2 69.5 1 11.0 13.7 11.0 Response 1 80.5 1 131.1 308.9 131.1 Mechanical 2 80.5 10 13.1 45.7 131.0 CGSolve ...; Values Statistics : MIN MAX MEAN ID 10 10 10 nbCM 0 1230 420.3 nbContacts 5000 5000 5000 dofs; ==== END ==== . Public Attributes; sofa::helper::system::thread::ctime_t time;  ; enum sofa::helper::Record::Type type;  ; std::string label;  ; unsigned int id;  ; unsigned int obj;  ; double val;  . Pub",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_record.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_record.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_singleton_fn_dispatcher-members.html:284,Modifiability,inherit,inherited,284,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::SingletonFnDispatcher< BaseClass, ResulT > Member List . This is the complete list of members for sofa::helper::SingletonFnDispatcher< BaseClass, ResulT >, including all inherited members. add()sofa::helper::FnDispatcher< BaseClass, ResulT >inline; BasicDispatcher< BaseClass, ResulT >::add(const std::type_info &class1, const std::type_info &class2, F fun)sofa::helper::BasicDispatcher< BaseClass, ResulT >; callBackMapsofa::helper::BasicDispatcher< BaseClass, ResulT >protected; defaultFn(BaseClass &arg1, BaseClass &arg2)sofa::helper::BasicDispatcher< BaseClass, ResulT >virtual; F typedefsofa::helper::BasicDispatcher< BaseClass, ResulT >; getInstance()sofa::helper::SingletonFnDispatcher< BaseClass, ResulT >static; go(BaseClass &arg1, BaseClass &arg2)sofa::helper::BasicDispatcher< BaseClass, ResulT >; ignore()sofa::helper::FnDispatcher< BaseClass, ResulT >inline; BasicDispatcher< BaseClass, ResulT >::ignore(const std::type_info &class1, const std::type_info &class2)sofa::helper::BasicDispatcher< BaseClass, ResulT >; ignoreFn(BaseClass &arg1, BaseClass &arg2)sofa::helper::BasicDispatcher< BaseClass, ResulT >static; isSupported(BaseClass &arg1, BaseClass &arg2)sofa::helper::BasicDispatcher< BaseClass, ResulT >; KeyType typedefsofa::helper::BasicDispatcher< BaseClass, ResulT >protected; MapType typedefsofa::helper::BasicDispatcher< BaseClass, ResulT >protected; SingletonFnDispatcher()sofa::helper::SingletonFnDispatcher< BaseClass, ResulT >protected; ~BasicDispatcher()sofa::helper::BasicDispatcher< BaseClass, ResulT >inlineprotectedvirtual. Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_singleton_fn_dispatcher-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_singleton_fn_dispatcher-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_singleton_fn_dispatcher.html:367,Modifiability,Inherit,Inheritance,367,"﻿. SOFA API: sofa::helper::SingletonFnDispatcher< BaseClass, ResulT > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::SingletonFnDispatcher< BaseClass, ResulT > Class Template Reference . #include <FnDispatcher.h>. Inheritance diagram for sofa::helper::SingletonFnDispatcher< BaseClass, ResulT >:. [legend]. Static Public Member Functions; static SingletonFnDispatcher< BaseClass, ResulT > * getInstance ();  ;  Static Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; static ResulT ignoreFn (BaseClass &arg1, BaseClass &arg2);  . Protected Member Functions;  SingletonFnDispatcher ();  ;  Protected Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; virtual ~BasicDispatcher ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; MapType callBackMap;  ;  Public Member Functions inherited from sofa::helper::FnDispatcher< BaseClass, ResulT >; template<class ConcreteClass1 , class ConcreteClass2 , ResulT(*)(ConcreteClass1 &, ConcreteClass2 &) F, bool symmetric> ; void add ();  ; template<class ConcreteClass1 , class ConcreteClass2 , bool symmetric> ; void ignore ();  ;  Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; void add (const std::type_info &class1, const std::type_info &class2, F fun);  ; void ignore (const std::type_info &class1, const std::type_info &class2);  ; void ignore ();  ; virtual ResulT defaultFn (BaseClass &arg1, BaseClass &arg2);  ; ResulT go (BaseClass &arg1, BaseClass &arg2);  ; bool isSupported (BaseClass &arg1, BaseClass &arg2);  Return true if a pair of argument correspond to a callback function (different than ignoreFn) More...;  . Constructor details. ◆ SingletonFnDispatcher(). template<class BaseClass , typename Resu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_singleton_fn_dispatcher.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_singleton_fn_dispatcher.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_singleton_fn_dispatcher.html:595,Modifiability,inherit,inherited,595,"﻿. SOFA API: sofa::helper::SingletonFnDispatcher< BaseClass, ResulT > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::SingletonFnDispatcher< BaseClass, ResulT > Class Template Reference . #include <FnDispatcher.h>. Inheritance diagram for sofa::helper::SingletonFnDispatcher< BaseClass, ResulT >:. [legend]. Static Public Member Functions; static SingletonFnDispatcher< BaseClass, ResulT > * getInstance ();  ;  Static Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; static ResulT ignoreFn (BaseClass &arg1, BaseClass &arg2);  . Protected Member Functions;  SingletonFnDispatcher ();  ;  Protected Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; virtual ~BasicDispatcher ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; MapType callBackMap;  ;  Public Member Functions inherited from sofa::helper::FnDispatcher< BaseClass, ResulT >; template<class ConcreteClass1 , class ConcreteClass2 , ResulT(*)(ConcreteClass1 &, ConcreteClass2 &) F, bool symmetric> ; void add ();  ; template<class ConcreteClass1 , class ConcreteClass2 , bool symmetric> ; void ignore ();  ;  Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; void add (const std::type_info &class1, const std::type_info &class2, F fun);  ; void ignore (const std::type_info &class1, const std::type_info &class2);  ; void ignore ();  ; virtual ResulT defaultFn (BaseClass &arg1, BaseClass &arg2);  ; ResulT go (BaseClass &arg1, BaseClass &arg2);  ; bool isSupported (BaseClass &arg1, BaseClass &arg2);  Return true if a pair of argument correspond to a callback function (different than ignoreFn) More...;  . Constructor details. ◆ SingletonFnDispatcher(). template<class BaseClass , typename Resu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_singleton_fn_dispatcher.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_singleton_fn_dispatcher.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_singleton_fn_dispatcher.html:810,Modifiability,inherit,inherited,810,"﻿. SOFA API: sofa::helper::SingletonFnDispatcher< BaseClass, ResulT > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::SingletonFnDispatcher< BaseClass, ResulT > Class Template Reference . #include <FnDispatcher.h>. Inheritance diagram for sofa::helper::SingletonFnDispatcher< BaseClass, ResulT >:. [legend]. Static Public Member Functions; static SingletonFnDispatcher< BaseClass, ResulT > * getInstance ();  ;  Static Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; static ResulT ignoreFn (BaseClass &arg1, BaseClass &arg2);  . Protected Member Functions;  SingletonFnDispatcher ();  ;  Protected Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; virtual ~BasicDispatcher ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; MapType callBackMap;  ;  Public Member Functions inherited from sofa::helper::FnDispatcher< BaseClass, ResulT >; template<class ConcreteClass1 , class ConcreteClass2 , ResulT(*)(ConcreteClass1 &, ConcreteClass2 &) F, bool symmetric> ; void add ();  ; template<class ConcreteClass1 , class ConcreteClass2 , bool symmetric> ; void ignore ();  ;  Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; void add (const std::type_info &class1, const std::type_info &class2, F fun);  ; void ignore (const std::type_info &class1, const std::type_info &class2);  ; void ignore ();  ; virtual ResulT defaultFn (BaseClass &arg1, BaseClass &arg2);  ; ResulT go (BaseClass &arg1, BaseClass &arg2);  ; bool isSupported (BaseClass &arg1, BaseClass &arg2);  Return true if a pair of argument correspond to a callback function (different than ignoreFn) More...;  . Constructor details. ◆ SingletonFnDispatcher(). template<class BaseClass , typename Resu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_singleton_fn_dispatcher.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_singleton_fn_dispatcher.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_singleton_fn_dispatcher.html:920,Modifiability,Inherit,Inherited,920,"::SingletonFnDispatcher< BaseClass, ResulT >:. [legend]. Static Public Member Functions; static SingletonFnDispatcher< BaseClass, ResulT > * getInstance ();  ;  Static Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; static ResulT ignoreFn (BaseClass &arg1, BaseClass &arg2);  . Protected Member Functions;  SingletonFnDispatcher ();  ;  Protected Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; virtual ~BasicDispatcher ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; MapType callBackMap;  ;  Public Member Functions inherited from sofa::helper::FnDispatcher< BaseClass, ResulT >; template<class ConcreteClass1 , class ConcreteClass2 , ResulT(*)(ConcreteClass1 &, ConcreteClass2 &) F, bool symmetric> ; void add ();  ; template<class ConcreteClass1 , class ConcreteClass2 , bool symmetric> ; void ignore ();  ;  Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; void add (const std::type_info &class1, const std::type_info &class2, F fun);  ; void ignore (const std::type_info &class1, const std::type_info &class2);  ; void ignore ();  ; virtual ResulT defaultFn (BaseClass &arg1, BaseClass &arg2);  ; ResulT go (BaseClass &arg1, BaseClass &arg2);  ; bool isSupported (BaseClass &arg1, BaseClass &arg2);  Return true if a pair of argument correspond to a callback function (different than ignoreFn) More...;  . Constructor details. ◆ SingletonFnDispatcher(). template<class BaseClass , typename ResulT > . sofa::helper::SingletonFnDispatcher< BaseClass, ResulT >::SingletonFnDispatcher. protected . Function details. ◆ getInstance(). template<class BaseClass , typename ResulT > . SingletonFnDispatcher< BaseClass, ResulT > * sofa::helper::SingletonFnDispatcher< BaseClass, ResulT >::getInstance. static . sofahelperSingletonFnDispatcher; Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_singleton_fn_dispatcher.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_singleton_fn_dispatcher.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_singleton_fn_dispatcher.html:961,Modifiability,inherit,inherited,961,"::SingletonFnDispatcher< BaseClass, ResulT >:. [legend]. Static Public Member Functions; static SingletonFnDispatcher< BaseClass, ResulT > * getInstance ();  ;  Static Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; static ResulT ignoreFn (BaseClass &arg1, BaseClass &arg2);  . Protected Member Functions;  SingletonFnDispatcher ();  ;  Protected Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; virtual ~BasicDispatcher ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; MapType callBackMap;  ;  Public Member Functions inherited from sofa::helper::FnDispatcher< BaseClass, ResulT >; template<class ConcreteClass1 , class ConcreteClass2 , ResulT(*)(ConcreteClass1 &, ConcreteClass2 &) F, bool symmetric> ; void add ();  ; template<class ConcreteClass1 , class ConcreteClass2 , bool symmetric> ; void ignore ();  ;  Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; void add (const std::type_info &class1, const std::type_info &class2, F fun);  ; void ignore (const std::type_info &class1, const std::type_info &class2);  ; void ignore ();  ; virtual ResulT defaultFn (BaseClass &arg1, BaseClass &arg2);  ; ResulT go (BaseClass &arg1, BaseClass &arg2);  ; bool isSupported (BaseClass &arg1, BaseClass &arg2);  Return true if a pair of argument correspond to a callback function (different than ignoreFn) More...;  . Constructor details. ◆ SingletonFnDispatcher(). template<class BaseClass , typename ResulT > . sofa::helper::SingletonFnDispatcher< BaseClass, ResulT >::SingletonFnDispatcher. protected . Function details. ◆ getInstance(). template<class BaseClass , typename ResulT > . SingletonFnDispatcher< BaseClass, ResulT > * sofa::helper::SingletonFnDispatcher< BaseClass, ResulT >::getInstance. static . sofahelperSingletonFnDispatcher; Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_singleton_fn_dispatcher.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_singleton_fn_dispatcher.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_singleton_fn_dispatcher.html:1077,Modifiability,inherit,inherited,1077,"::SingletonFnDispatcher< BaseClass, ResulT >:. [legend]. Static Public Member Functions; static SingletonFnDispatcher< BaseClass, ResulT > * getInstance ();  ;  Static Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; static ResulT ignoreFn (BaseClass &arg1, BaseClass &arg2);  . Protected Member Functions;  SingletonFnDispatcher ();  ;  Protected Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; virtual ~BasicDispatcher ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; MapType callBackMap;  ;  Public Member Functions inherited from sofa::helper::FnDispatcher< BaseClass, ResulT >; template<class ConcreteClass1 , class ConcreteClass2 , ResulT(*)(ConcreteClass1 &, ConcreteClass2 &) F, bool symmetric> ; void add ();  ; template<class ConcreteClass1 , class ConcreteClass2 , bool symmetric> ; void ignore ();  ;  Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; void add (const std::type_info &class1, const std::type_info &class2, F fun);  ; void ignore (const std::type_info &class1, const std::type_info &class2);  ; void ignore ();  ; virtual ResulT defaultFn (BaseClass &arg1, BaseClass &arg2);  ; ResulT go (BaseClass &arg1, BaseClass &arg2);  ; bool isSupported (BaseClass &arg1, BaseClass &arg2);  Return true if a pair of argument correspond to a callback function (different than ignoreFn) More...;  . Constructor details. ◆ SingletonFnDispatcher(). template<class BaseClass , typename ResulT > . sofa::helper::SingletonFnDispatcher< BaseClass, ResulT >::SingletonFnDispatcher. protected . Function details. ◆ getInstance(). template<class BaseClass , typename ResulT > . SingletonFnDispatcher< BaseClass, ResulT > * sofa::helper::SingletonFnDispatcher< BaseClass, ResulT >::getInstance. static . sofahelperSingletonFnDispatcher; Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_singleton_fn_dispatcher.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_singleton_fn_dispatcher.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_singleton_fn_dispatcher.html:1396,Modifiability,inherit,inherited,1396,"::SingletonFnDispatcher< BaseClass, ResulT >:. [legend]. Static Public Member Functions; static SingletonFnDispatcher< BaseClass, ResulT > * getInstance ();  ;  Static Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; static ResulT ignoreFn (BaseClass &arg1, BaseClass &arg2);  . Protected Member Functions;  SingletonFnDispatcher ();  ;  Protected Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; virtual ~BasicDispatcher ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; MapType callBackMap;  ;  Public Member Functions inherited from sofa::helper::FnDispatcher< BaseClass, ResulT >; template<class ConcreteClass1 , class ConcreteClass2 , ResulT(*)(ConcreteClass1 &, ConcreteClass2 &) F, bool symmetric> ; void add ();  ; template<class ConcreteClass1 , class ConcreteClass2 , bool symmetric> ; void ignore ();  ;  Public Member Functions inherited from sofa::helper::BasicDispatcher< BaseClass, ResulT >; void add (const std::type_info &class1, const std::type_info &class2, F fun);  ; void ignore (const std::type_info &class1, const std::type_info &class2);  ; void ignore ();  ; virtual ResulT defaultFn (BaseClass &arg1, BaseClass &arg2);  ; ResulT go (BaseClass &arg1, BaseClass &arg2);  ; bool isSupported (BaseClass &arg1, BaseClass &arg2);  Return true if a pair of argument correspond to a callback function (different than ignoreFn) More...;  . Constructor details. ◆ SingletonFnDispatcher(). template<class BaseClass , typename ResulT > . sofa::helper::SingletonFnDispatcher< BaseClass, ResulT >::SingletonFnDispatcher. protected . Function details. ◆ getInstance(). template<class BaseClass , typename ResulT > . SingletonFnDispatcher< BaseClass, ResulT > * sofa::helper::SingletonFnDispatcher< BaseClass, ResulT >::getInstance. static . sofahelperSingletonFnDispatcher; Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_singleton_fn_dispatcher.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_singleton_fn_dispatcher.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_creator-members.html:262,Modifiability,inherit,inherited,262,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::SofaViewerCreator< RealObject > Member List . This is the complete list of members for sofa::helper::SofaViewerCreator< RealObject >, including all inherited members. acceleratedName()sofa::helper::SofaViewerCreator< RealObject >inline; Argument typedefsofa::helper::Creator< SofaViewerFactory, RealObject >; ArgumentRef typedefsofa::helper::SofaViewerCreator< RealObject >; createInstance(ArgumentRef arg)sofa::helper::SofaViewerCreator< RealObject >inline; Creator< SofaViewerFactory, RealObject >::createInstance(Argument arg)sofa::helper::Creator< SofaViewerFactory, RealObject >inline; sofa::helper::BaseCreator::createInstance(Argument arg)=0sofa::helper::BaseCreator< Object, Argument, ObjectPtr >pure virtual; Creator(Key key, bool multi=false)sofa::helper::Creator< SofaViewerFactory, RealObject >inlineexplicit; getKey() constsofa::helper::Creator< SofaViewerFactory, RealObject >inline; Inherited typedefsofa::helper::SofaViewerCreator< RealObject >; Key typedefsofa::helper::SofaViewerCreator< RealObject >; Object typedefsofa::helper::SofaViewerCreator< RealObject >; ObjectPtr typedefsofa::helper::SofaViewerCreator< RealObject >; registerInFactory()sofa::helper::Creator< SofaViewerFactory, RealObject >inline; SofaViewerCreator(Key key, bool multi=false)sofa::helper::SofaViewerCreator< RealObject >inline; type()sofa::helper::Creator< SofaViewerFactory, RealObject >inlinevirtual; viewerName()sofa::helper::SofaViewerCreator< RealObject >inline; ~BaseCreator()sofa::helper::BaseCreator< Object, Argument, ObjectPtr >inlinevirtual. Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_creator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_creator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_creator-members.html:1012,Modifiability,Inherit,Inherited,1012,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::SofaViewerCreator< RealObject > Member List . This is the complete list of members for sofa::helper::SofaViewerCreator< RealObject >, including all inherited members. acceleratedName()sofa::helper::SofaViewerCreator< RealObject >inline; Argument typedefsofa::helper::Creator< SofaViewerFactory, RealObject >; ArgumentRef typedefsofa::helper::SofaViewerCreator< RealObject >; createInstance(ArgumentRef arg)sofa::helper::SofaViewerCreator< RealObject >inline; Creator< SofaViewerFactory, RealObject >::createInstance(Argument arg)sofa::helper::Creator< SofaViewerFactory, RealObject >inline; sofa::helper::BaseCreator::createInstance(Argument arg)=0sofa::helper::BaseCreator< Object, Argument, ObjectPtr >pure virtual; Creator(Key key, bool multi=false)sofa::helper::Creator< SofaViewerFactory, RealObject >inlineexplicit; getKey() constsofa::helper::Creator< SofaViewerFactory, RealObject >inline; Inherited typedefsofa::helper::SofaViewerCreator< RealObject >; Key typedefsofa::helper::SofaViewerCreator< RealObject >; Object typedefsofa::helper::SofaViewerCreator< RealObject >; ObjectPtr typedefsofa::helper::SofaViewerCreator< RealObject >; registerInFactory()sofa::helper::Creator< SofaViewerFactory, RealObject >inline; SofaViewerCreator(Key key, bool multi=false)sofa::helper::SofaViewerCreator< RealObject >inline; type()sofa::helper::Creator< SofaViewerFactory, RealObject >inlinevirtual; viewerName()sofa::helper::SofaViewerCreator< RealObject >inline; ~BaseCreator()sofa::helper::BaseCreator< Object, Argument, ObjectPtr >inlinevirtual. Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_creator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_creator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_creator.html:309,Modifiability,Inherit,Inheritance,309,"﻿. SOFA API: sofa::helper::SofaViewerCreator< RealObject > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::SofaViewerCreator< RealObject > Class Template Reference . #include <ViewerFactory.h>. Inheritance diagram for sofa::helper::SofaViewerCreator< RealObject >:. [legend]. Public Member Functions;  SofaViewerCreator (Key key, bool multi=false);  ; ObjectPtr createInstance (ArgumentRef arg);  ; const char * viewerName ();  ; const char * acceleratedName ();  ;  Public Member Functions inherited from sofa::helper::Creator< SofaViewerFactory, RealObject >;  Creator (Key key, bool multi=false);  ; ObjectPtr createInstance (Argument arg);  ; const std::type_info & type ();  ; void registerInFactory ();  ; const Key & getKey () const;  ;  Public Member Functions inherited from sofa::helper::BaseCreator< Object, Argument, ObjectPtr >; virtual ~BaseCreator ();  ; virtual ObjectPtr createInstance (Argument arg)=0;  . Constructor details. ◆ SofaViewerCreator(). template<class RealObject > . sofa::helper::SofaViewerCreator< RealObject >::SofaViewerCreator ; (; Key ; key, . bool ; multi = false . ). inline . Function details. ◆ acceleratedName(). template<class RealObject > . const char* sofa::helper::SofaViewerCreator< RealObject >::acceleratedName ; (; ). inline . ◆ createInstance(). template<class RealObject > . ObjectPtr sofa::helper::SofaViewerCreator< RealObject >::createInstance ; (; ArgumentRef ; arg). inline . ◆ viewerName(). template<class RealObject > . const char* sofa::helper::SofaViewerCreator< RealObject >::viewerName ; (; ). inline . sofahelperSofaViewerCreator; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_creator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_creator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_creator.html:606,Modifiability,inherit,inherited,606,"﻿. SOFA API: sofa::helper::SofaViewerCreator< RealObject > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::SofaViewerCreator< RealObject > Class Template Reference . #include <ViewerFactory.h>. Inheritance diagram for sofa::helper::SofaViewerCreator< RealObject >:. [legend]. Public Member Functions;  SofaViewerCreator (Key key, bool multi=false);  ; ObjectPtr createInstance (ArgumentRef arg);  ; const char * viewerName ();  ; const char * acceleratedName ();  ;  Public Member Functions inherited from sofa::helper::Creator< SofaViewerFactory, RealObject >;  Creator (Key key, bool multi=false);  ; ObjectPtr createInstance (Argument arg);  ; const std::type_info & type ();  ; void registerInFactory ();  ; const Key & getKey () const;  ;  Public Member Functions inherited from sofa::helper::BaseCreator< Object, Argument, ObjectPtr >; virtual ~BaseCreator ();  ; virtual ObjectPtr createInstance (Argument arg)=0;  . Constructor details. ◆ SofaViewerCreator(). template<class RealObject > . sofa::helper::SofaViewerCreator< RealObject >::SofaViewerCreator ; (; Key ; key, . bool ; multi = false . ). inline . Function details. ◆ acceleratedName(). template<class RealObject > . const char* sofa::helper::SofaViewerCreator< RealObject >::acceleratedName ; (; ). inline . ◆ createInstance(). template<class RealObject > . ObjectPtr sofa::helper::SofaViewerCreator< RealObject >::createInstance ; (; ArgumentRef ; arg). inline . ◆ viewerName(). template<class RealObject > . const char* sofa::helper::SofaViewerCreator< RealObject >::viewerName ; (; ). inline . sofahelperSofaViewerCreator; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_creator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_creator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_creator.html:884,Modifiability,inherit,inherited,884,"﻿. SOFA API: sofa::helper::SofaViewerCreator< RealObject > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::SofaViewerCreator< RealObject > Class Template Reference . #include <ViewerFactory.h>. Inheritance diagram for sofa::helper::SofaViewerCreator< RealObject >:. [legend]. Public Member Functions;  SofaViewerCreator (Key key, bool multi=false);  ; ObjectPtr createInstance (ArgumentRef arg);  ; const char * viewerName ();  ; const char * acceleratedName ();  ;  Public Member Functions inherited from sofa::helper::Creator< SofaViewerFactory, RealObject >;  Creator (Key key, bool multi=false);  ; ObjectPtr createInstance (Argument arg);  ; const std::type_info & type ();  ; void registerInFactory ();  ; const Key & getKey () const;  ;  Public Member Functions inherited from sofa::helper::BaseCreator< Object, Argument, ObjectPtr >; virtual ~BaseCreator ();  ; virtual ObjectPtr createInstance (Argument arg)=0;  . Constructor details. ◆ SofaViewerCreator(). template<class RealObject > . sofa::helper::SofaViewerCreator< RealObject >::SofaViewerCreator ; (; Key ; key, . bool ; multi = false . ). inline . Function details. ◆ acceleratedName(). template<class RealObject > . const char* sofa::helper::SofaViewerCreator< RealObject >::acceleratedName ; (; ). inline . ◆ createInstance(). template<class RealObject > . ObjectPtr sofa::helper::SofaViewerCreator< RealObject >::createInstance ; (; ArgumentRef ; arg). inline . ◆ viewerName(). template<class RealObject > . const char* sofa::helper::SofaViewerCreator< RealObject >::viewerName ; (; ). inline . sofahelperSofaViewerCreator; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_creator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_creator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_factory-members.html:234,Modifiability,inherit,inherited,234,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::SofaViewerFactory Member List . This is the complete list of members for sofa::helper::SofaViewerFactory, including all inherited members. AcceleratedName(Key key)sofa::helper::SofaViewerFactoryinlinestatic; Argument typedefsofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >; ArgumentRef typedefsofa::helper::SofaViewerFactory; begin()sofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >inline; begin() constsofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >inline; const_iterator typedefsofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >; CreateAnyObject(ArgumentRef arg)sofa::helper::SofaViewerFactoryinlinestatic; createAnyObject(Argument arg)sofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >; CreateObject(Key key, ArgumentRef arg)sofa::helper::SofaViewerFactoryinlinestatic; Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >::CreateObject(Key key, Argument arg)sofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >inlinestatic; createObject(Key key, Argument arg=NoArgument())sofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >inline; createObject(Key key, Argument arg)sofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >; Creator typedefsofa::helper::SofaViewerFactory; DuplicateEntry(Key existing, Key duplicate)sofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >inlinestatic; duplicateEntry(Key existing, Key duplicate)",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_factory-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_factory-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_factory-members.html:2950,Modifiability,Inherit,Inherited,2950,"c; duplicateEntry(Key existing, Key duplicate)sofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >; end()sofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >inline; end() constsofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >inline; getAcceleratedViewerName(Key key)sofa::helper::SofaViewerFactory; getInstance()sofa::helper::SofaViewerFactorystatic; getViewerName(Key key)sofa::helper::SofaViewerFactory; HasKey(Key key)sofa::helper::SofaViewerFactoryinlinestatic; Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >::HasKey(Key key)sofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >inlinestatic; hasKey(Key key)sofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >; Inherited typedefsofa::helper::SofaViewerFactory; iterator typedefsofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >; Key typedefsofa::helper::SofaViewerFactory; Object typedefsofa::helper::SofaViewerFactory; ObjectPtr typedefsofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >; registerCreator(Key key, Creator *creator, bool multi=false)sofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >inline; registrysofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >protected; resetEntry(Key existingKey)sofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >; ResetEntry(Key existing)sofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >inlinestatic; uniqueKeys(OutIterator ou",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_factory-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_factory-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_factory.html:297,Modifiability,Inherit,Inheritance,297,"﻿. SOFA API: sofa::helper::SofaViewerFactory Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::helper::SofaViewerFactory Class Reference . #include <ViewerFactory.h>. Inheritance diagram for sofa::helper::SofaViewerFactory:. [legend]. Public Member Functions; const char * getViewerName (Key key);  ; const char * getAcceleratedViewerName (Key key);  ;  Public Member Functions inherited from sofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >; bool registerCreator (Key key, Creator *creator, bool multi=false);  ; ObjectPtr createObject (Key key, Argument arg=NoArgument());  ; ObjectPtr createObject (Key key, Argument arg);  ; ObjectPtr createAnyObject (Argument arg);  ; void uniqueKeys (OutIterator out);  ; bool hasKey (Key key);  ; bool duplicateEntry (Key existing, Key duplicate);  ; bool resetEntry (Key existingKey);  ; iterator begin ();  ; const_iterator begin () const;  ; iterator end ();  ; const_iterator end () const;  . Static Public Member Functions; static SofaViewerFactory * getInstance ();  ; static Object * CreateObject (Key key, ArgumentRef arg);  ; static Object * CreateAnyObject (ArgumentRef arg);  ; static bool HasKey (Key key);  ; static const char * ViewerName (Key key);  ; static const char * AcceleratedName (Key key);  ;  Static Public Member Functions inherited from sofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >; static Factory< Key, Object, Argument, ObjectPtr > * getInstance ();  ; static ObjectPtr CreateObject (Key key, Argument arg);  ; static ObjectPtr CreateAnyObject (Argument arg);  ; static bool HasKey (Key key);  ; static bool DuplicateEntry (Key existing, Key duplicate);  ; static bool ResetEntry (Key existing);  . Additional Inherited Members;  Protected Attributes inherited from sofa::helpe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_factory.html:508,Modifiability,inherit,inherited,508,"﻿. SOFA API: sofa::helper::SofaViewerFactory Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::helper::SofaViewerFactory Class Reference . #include <ViewerFactory.h>. Inheritance diagram for sofa::helper::SofaViewerFactory:. [legend]. Public Member Functions; const char * getViewerName (Key key);  ; const char * getAcceleratedViewerName (Key key);  ;  Public Member Functions inherited from sofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >; bool registerCreator (Key key, Creator *creator, bool multi=false);  ; ObjectPtr createObject (Key key, Argument arg=NoArgument());  ; ObjectPtr createObject (Key key, Argument arg);  ; ObjectPtr createAnyObject (Argument arg);  ; void uniqueKeys (OutIterator out);  ; bool hasKey (Key key);  ; bool duplicateEntry (Key existing, Key duplicate);  ; bool resetEntry (Key existingKey);  ; iterator begin ();  ; const_iterator begin () const;  ; iterator end ();  ; const_iterator end () const;  . Static Public Member Functions; static SofaViewerFactory * getInstance ();  ; static Object * CreateObject (Key key, ArgumentRef arg);  ; static Object * CreateAnyObject (ArgumentRef arg);  ; static bool HasKey (Key key);  ; static const char * ViewerName (Key key);  ; static const char * AcceleratedName (Key key);  ;  Static Public Member Functions inherited from sofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >; static Factory< Key, Object, Argument, ObjectPtr > * getInstance ();  ; static ObjectPtr CreateObject (Key key, Argument arg);  ; static ObjectPtr CreateAnyObject (Argument arg);  ; static bool HasKey (Key key);  ; static bool DuplicateEntry (Key existing, Key duplicate);  ; static bool ResetEntry (Key existing);  . Additional Inherited Members;  Protected Attributes inherited from sofa::helpe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_factory.html:1480,Modifiability,inherit,inherited,1480,"ofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >; bool registerCreator (Key key, Creator *creator, bool multi=false);  ; ObjectPtr createObject (Key key, Argument arg=NoArgument());  ; ObjectPtr createObject (Key key, Argument arg);  ; ObjectPtr createAnyObject (Argument arg);  ; void uniqueKeys (OutIterator out);  ; bool hasKey (Key key);  ; bool duplicateEntry (Key existing, Key duplicate);  ; bool resetEntry (Key existingKey);  ; iterator begin ();  ; const_iterator begin () const;  ; iterator end ();  ; const_iterator end () const;  . Static Public Member Functions; static SofaViewerFactory * getInstance ();  ; static Object * CreateObject (Key key, ArgumentRef arg);  ; static Object * CreateAnyObject (ArgumentRef arg);  ; static bool HasKey (Key key);  ; static const char * ViewerName (Key key);  ; static const char * AcceleratedName (Key key);  ;  Static Public Member Functions inherited from sofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >; static Factory< Key, Object, Argument, ObjectPtr > * getInstance ();  ; static ObjectPtr CreateObject (Key key, Argument arg);  ; static ObjectPtr CreateAnyObject (Argument arg);  ; static bool HasKey (Key key);  ; static bool DuplicateEntry (Key existing, Key duplicate);  ; static bool ResetEntry (Key existing);  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >; std::multimap< Key, Creator * > registry;  . Function details. ◆ AcceleratedName(). static const char* sofa::helper::SofaViewerFactory::AcceleratedName ; (; Key ; key). inlinestatic . ◆ CreateAnyObject(). static Object* sofa::helper::SofaViewerFactory::CreateAnyObject ; (; ArgumentRef ; arg). inlinestatic . ◆ CreateObject(). static Object* sofa::helper::SofaViewerFactory::CreateObject ; (; Key ; key, . ArgumentRef ; arg .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_factory.html:1934,Modifiability,Inherit,Inherited,1934,"n ();  ; const_iterator begin () const;  ; iterator end ();  ; const_iterator end () const;  . Static Public Member Functions; static SofaViewerFactory * getInstance ();  ; static Object * CreateObject (Key key, ArgumentRef arg);  ; static Object * CreateAnyObject (ArgumentRef arg);  ; static bool HasKey (Key key);  ; static const char * ViewerName (Key key);  ; static const char * AcceleratedName (Key key);  ;  Static Public Member Functions inherited from sofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >; static Factory< Key, Object, Argument, ObjectPtr > * getInstance ();  ; static ObjectPtr CreateObject (Key key, Argument arg);  ; static ObjectPtr CreateAnyObject (Argument arg);  ; static bool HasKey (Key key);  ; static bool DuplicateEntry (Key existing, Key duplicate);  ; static bool ResetEntry (Key existing);  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >; std::multimap< Key, Creator * > registry;  . Function details. ◆ AcceleratedName(). static const char* sofa::helper::SofaViewerFactory::AcceleratedName ; (; Key ; key). inlinestatic . ◆ CreateAnyObject(). static Object* sofa::helper::SofaViewerFactory::CreateAnyObject ; (; ArgumentRef ; arg). inlinestatic . ◆ CreateObject(). static Object* sofa::helper::SofaViewerFactory::CreateObject ; (; Key ; key, . ArgumentRef ; arg . ). inlinestatic . ◆ getAcceleratedViewerName(). const char * sofa::helper::SofaViewerFactory::getAcceleratedViewerName ; (; Key ; key). ◆ getInstance(). SofaViewerFactory * sofa::helper::SofaViewerFactory::getInstance ; (; ). static . ◆ getViewerName(). const char * sofa::helper::SofaViewerFactory::getViewerName ; (; Key ; key). ◆ HasKey(). static bool sofa::helper::SofaViewerFactory::HasKey ; (; Key ; key). inlinestatic . ◆ ViewerName(). static const char* sofa::helper::SofaViewerFactory::ViewerName ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_factory.html:1975,Modifiability,inherit,inherited,1975,"n ();  ; const_iterator begin () const;  ; iterator end ();  ; const_iterator end () const;  . Static Public Member Functions; static SofaViewerFactory * getInstance ();  ; static Object * CreateObject (Key key, ArgumentRef arg);  ; static Object * CreateAnyObject (ArgumentRef arg);  ; static bool HasKey (Key key);  ; static const char * ViewerName (Key key);  ; static const char * AcceleratedName (Key key);  ;  Static Public Member Functions inherited from sofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >; static Factory< Key, Object, Argument, ObjectPtr > * getInstance ();  ; static ObjectPtr CreateObject (Key key, Argument arg);  ; static ObjectPtr CreateAnyObject (Argument arg);  ; static bool HasKey (Key key);  ; static bool DuplicateEntry (Key existing, Key duplicate);  ; static bool ResetEntry (Key existing);  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::Factory< std::string, sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >; std::multimap< Key, Creator * > registry;  . Function details. ◆ AcceleratedName(). static const char* sofa::helper::SofaViewerFactory::AcceleratedName ; (; Key ; key). inlinestatic . ◆ CreateAnyObject(). static Object* sofa::helper::SofaViewerFactory::CreateAnyObject ; (; ArgumentRef ; arg). inlinestatic . ◆ CreateObject(). static Object* sofa::helper::SofaViewerFactory::CreateObject ; (; Key ; key, . ArgumentRef ; arg . ). inlinestatic . ◆ getAcceleratedViewerName(). const char * sofa::helper::SofaViewerFactory::getAcceleratedViewerName ; (; Key ; key). ◆ getInstance(). SofaViewerFactory * sofa::helper::SofaViewerFactory::getInstance ; (; ). static . ◆ getViewerName(). const char * sofa::helper::SofaViewerFactory::getViewerName ; (; Key ; key). ◆ HasKey(). static bool sofa::helper::SofaViewerFactory::HasKey ; (; Key ; key). inlinestatic . ◆ ViewerName(). static const char* sofa::helper::SofaViewerFactory::ViewerName ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_sofa_viewer_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_step_data-members.html:216,Modifiability,inherit,inherited,216,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::StepData Member List . This is the complete list of members for sofa::helper::StepData, including all inherited members. labelsofa::helper::StepData; lastItsofa::helper::StepData; lastTimesofa::helper::StepData; levelsofa::helper::StepData; numsofa::helper::StepData; numItsofa::helper::StepData; StepData()sofa::helper::StepDatainline; tmaxsofa::helper::StepData; tminsofa::helper::StepData; tstartsofa::helper::StepData; ttotalsofa::helper::StepData; ttotal2sofa::helper::StepData. Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_step_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_step_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_tag_factory-members.html:220,Modifiability,inherit,inherited,220,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::TagFactory Member List . This is the complete list of members for sofa::helper::TagFactory, including all inherited members. getID(const std::string &name)sofa::helper::TagFactorystatic; getName(std::size_t id)sofa::helper::TagFactorystatic; TagFactory()=deletesofa::helper::TagFactory. Generated on Mon Nov 11 2024 03:31:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_tag_factory-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_tag_factory-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_tag_factory.html:545,Testability,test,tests,545,"﻿. SOFA API: sofa::helper::TagFactory Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::helper::TagFactory Class Reference . #include <TagFactory.h>; Detailed Description; The TagFactory class manages the tags list shared by all the components and visitors. It allows to define subsets to process by specific visitors The user only gives strings to define the subsets, and an id is given back and is used to do the tests of belonging The id is the index of the string in the ""m_tagsList"" vector . Public Member Functions;  TagFactory ()=delete;  . Static Public Member Functions; static std::size_t getID (const std::string &name);  ; static std::string getName (std::size_t id);  . Constructor details. ◆ TagFactory(). sofa::helper::TagFactory::TagFactory ; (; ). delete . Function details. ◆ getID(). std::size_t sofa::helper::TagFactory::getID ; (; const std::string & ; name). static . Returns: the Id corresponding to the name of the tag given in parameter If the name isn't found in the list, it is added to it and return the new id. . ◆ getName(). std::string sofa::helper::TagFactory::getName ; (; std::size_t ; id). static . Returnsthe name corresponding to the id in parameter . sofahelperTagFactory; Generated on Mon Nov 11 2024 03:31:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_tag_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_tag_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_tag_list-members.html:214,Modifiability,inherit,inherited,214,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::TagList Member List . This is the complete list of members for sofa::helper::TagList, including all inherited members. getID(const std::string &name)sofa::helper::TagList; getName(std::size_t id)sofa::helper::TagList; m_tagsListsofa::helper::TagListprotected; TagList()=defaultsofa::helper::TagList; TagList(type::vector< std::string > tagsList)sofa::helper::TagListinlineexplicit. Generated on Mon Nov 11 2024 03:31:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_tag_list-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_tag_list-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_timer_data-members.html:218,Modifiability,inherit,inherited,218,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::TimerData Member List . This is the complete list of members for sofa::helper::TimerData, including all inherited members. clear()sofa::helper::TimerData; createJSONArray(int s, json jsonObject, StepData &data)sofa::helper::TimerData; defaultIntervalsofa::helper::TimerData; getJson(std::string stepNumber)sofa::helper::TimerData; getLightJson(std::string stepNumber)sofa::helper::TimerData; idsofa::helper::TimerData; init(AdvancedTimer::IdTimer id)sofa::helper::TimerDatainline; intervalsofa::helper::TimerData; nbItersofa::helper::TimerData; print()sofa::helper::TimerData; print(std::ostream &result)sofa::helper::TimerData; process()sofa::helper::TimerData; recordssofa::helper::TimerData; stepDatasofa::helper::TimerData; stepssofa::helper::TimerData; TimerData()sofa::helper::TimerDatainline; timerOutputTypesofa::helper::TimerData; valDatasofa::helper::TimerData; valssofa::helper::TimerData. Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_timer_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_timer_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_timer_data-members.html:237,Usability,clear,clear,237,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::TimerData Member List . This is the complete list of members for sofa::helper::TimerData, including all inherited members. clear()sofa::helper::TimerData; createJSONArray(int s, json jsonObject, StepData &data)sofa::helper::TimerData; defaultIntervalsofa::helper::TimerData; getJson(std::string stepNumber)sofa::helper::TimerData; getLightJson(std::string stepNumber)sofa::helper::TimerData; idsofa::helper::TimerData; init(AdvancedTimer::IdTimer id)sofa::helper::TimerDatainline; intervalsofa::helper::TimerData; nbItersofa::helper::TimerData; print()sofa::helper::TimerData; print(std::ostream &result)sofa::helper::TimerData; process()sofa::helper::TimerData; recordssofa::helper::TimerData; stepDatasofa::helper::TimerData; stepssofa::helper::TimerData; TimerData()sofa::helper::TimerDatainline; timerOutputTypesofa::helper::TimerData; valDatasofa::helper::TimerData; valssofa::helper::TimerData. Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_timer_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_timer_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_timer_data.html:760,Usability,clear,clear,760,"﻿. SOFA API: sofa::helper::TimerData Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Public Member Functions |; List of all members . sofa::helper::TimerData Class Reference . Classes; class  ValData;  . Public Attributes; AdvancedTimer::IdTimer id;  ; type::vector< Record > records;  ; int nbIter;  ; int interval;  ; int defaultInterval;  ; AdvancedTimer::outputType timerOutputType;  ; std::map< AdvancedTimer::IdStep, StepData > stepData;  ; type::vector< AdvancedTimer::IdStep > steps;  ; std::map< AdvancedTimer::IdVal, ValData > valData;  ; type::vector< AdvancedTimer::IdVal > vals;  . Public Member Functions;  TimerData ();  ; void init (AdvancedTimer::IdTimer id);  ; void clear ();  ; void process ();  ; void print ();  ; void print (std::ostream &result);  ; json getJson (std::string stepNumber);  ; json getLightJson (std::string stepNumber);  ; json createJSONArray (int s, json jsonObject, StepData &data);  . Attribute details. ◆ defaultInterval. int sofa::helper::TimerData::defaultInterval. ◆ id. AdvancedTimer::IdTimer sofa::helper::TimerData::id. ◆ interval. int sofa::helper::TimerData::interval. ◆ nbIter. int sofa::helper::TimerData::nbIter. ◆ records. type::vector<Record> sofa::helper::TimerData::records. ◆ stepData. std::map<AdvancedTimer::IdStep, StepData> sofa::helper::TimerData::stepData. ◆ steps. type::vector<AdvancedTimer::IdStep> sofa::helper::TimerData::steps. ◆ timerOutputType. AdvancedTimer::outputType sofa::helper::TimerData::timerOutputType. ◆ valData. std::map<AdvancedTimer::IdVal, ValData> sofa::helper::TimerData::valData. ◆ vals. type::vector<AdvancedTimer::IdVal> sofa::helper::TimerData::vals. Constructor details. ◆ TimerData(). sofa::helper::TimerData::TimerData ; (; ). inline . Function details. ◆ clear(). void sofa::helper::TimerData::clear ; (; ). ◆ createJSONArray(). json sofa::helper::TimerData::createJSONArray ; (; int ; s, . json ; jsonObject, . StepData & ; d",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_timer_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_timer_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_timer_data.html:1830,Usability,clear,clear,1830,"eps;  ; std::map< AdvancedTimer::IdVal, ValData > valData;  ; type::vector< AdvancedTimer::IdVal > vals;  . Public Member Functions;  TimerData ();  ; void init (AdvancedTimer::IdTimer id);  ; void clear ();  ; void process ();  ; void print ();  ; void print (std::ostream &result);  ; json getJson (std::string stepNumber);  ; json getLightJson (std::string stepNumber);  ; json createJSONArray (int s, json jsonObject, StepData &data);  . Attribute details. ◆ defaultInterval. int sofa::helper::TimerData::defaultInterval. ◆ id. AdvancedTimer::IdTimer sofa::helper::TimerData::id. ◆ interval. int sofa::helper::TimerData::interval. ◆ nbIter. int sofa::helper::TimerData::nbIter. ◆ records. type::vector<Record> sofa::helper::TimerData::records. ◆ stepData. std::map<AdvancedTimer::IdStep, StepData> sofa::helper::TimerData::stepData. ◆ steps. type::vector<AdvancedTimer::IdStep> sofa::helper::TimerData::steps. ◆ timerOutputType. AdvancedTimer::outputType sofa::helper::TimerData::timerOutputType. ◆ valData. std::map<AdvancedTimer::IdVal, ValData> sofa::helper::TimerData::valData. ◆ vals. type::vector<AdvancedTimer::IdVal> sofa::helper::TimerData::vals. Constructor details. ◆ TimerData(). sofa::helper::TimerData::TimerData ; (; ). inline . Function details. ◆ clear(). void sofa::helper::TimerData::clear ; (; ). ◆ createJSONArray(). json sofa::helper::TimerData::createJSONArray ; (; int ; s, . json ; jsonObject, . StepData & ; data . ). ◆ getJson(). json sofa::helper::TimerData::getJson ; (; std::string ; stepNumber). ◆ getLightJson(). json sofa::helper::TimerData::getLightJson ; (; std::string ; stepNumber). ◆ init(). void sofa::helper::TimerData::init ; (; AdvancedTimer::IdTimer ; id). inline . ◆ print() [1/2]. void sofa::helper::TimerData::print ; (; ). ◆ print() [2/2]. void sofa::helper::TimerData::print ; (; std::ostream & ; result). ◆ process(). void sofa::helper::TimerData::process ; (; ). sofahelperTimerData; Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_timer_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_timer_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_timer_data.html:1869,Usability,clear,clear,1869,"eps;  ; std::map< AdvancedTimer::IdVal, ValData > valData;  ; type::vector< AdvancedTimer::IdVal > vals;  . Public Member Functions;  TimerData ();  ; void init (AdvancedTimer::IdTimer id);  ; void clear ();  ; void process ();  ; void print ();  ; void print (std::ostream &result);  ; json getJson (std::string stepNumber);  ; json getLightJson (std::string stepNumber);  ; json createJSONArray (int s, json jsonObject, StepData &data);  . Attribute details. ◆ defaultInterval. int sofa::helper::TimerData::defaultInterval. ◆ id. AdvancedTimer::IdTimer sofa::helper::TimerData::id. ◆ interval. int sofa::helper::TimerData::interval. ◆ nbIter. int sofa::helper::TimerData::nbIter. ◆ records. type::vector<Record> sofa::helper::TimerData::records. ◆ stepData. std::map<AdvancedTimer::IdStep, StepData> sofa::helper::TimerData::stepData. ◆ steps. type::vector<AdvancedTimer::IdStep> sofa::helper::TimerData::steps. ◆ timerOutputType. AdvancedTimer::outputType sofa::helper::TimerData::timerOutputType. ◆ valData. std::map<AdvancedTimer::IdVal, ValData> sofa::helper::TimerData::valData. ◆ vals. type::vector<AdvancedTimer::IdVal> sofa::helper::TimerData::vals. Constructor details. ◆ TimerData(). sofa::helper::TimerData::TimerData ; (; ). inline . Function details. ◆ clear(). void sofa::helper::TimerData::clear ; (; ). ◆ createJSONArray(). json sofa::helper::TimerData::createJSONArray ; (; int ; s, . json ; jsonObject, . StepData & ; data . ). ◆ getJson(). json sofa::helper::TimerData::getJson ; (; std::string ; stepNumber). ◆ getLightJson(). json sofa::helper::TimerData::getLightJson ; (; std::string ; stepNumber). ◆ init(). void sofa::helper::TimerData::init ; (; AdvancedTimer::IdTimer ; id). inline . ◆ print() [1/2]. void sofa::helper::TimerData::print ; (; ). ◆ print() [2/2]. void sofa::helper::TimerData::print ; (; std::ostream & ; result). ◆ process(). void sofa::helper::TimerData::process ; (; ). sofahelperTimerData; Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_timer_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_timer_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_timer_data_1_1_val_data-members.html:236,Modifiability,inherit,inherited,236,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::TimerData::ValData Member List . This is the complete list of members for sofa::helper::TimerData::ValData, including all inherited members. lastItsofa::helper::TimerData::ValData; numsofa::helper::TimerData::ValData; numItsofa::helper::TimerData::ValData; ValData()sofa::helper::TimerData::ValDatainline; vmaxsofa::helper::TimerData::ValData; vminsofa::helper::TimerData::ValData; vtotalsofa::helper::TimerData::ValData; vtotal2sofa::helper::TimerData::ValData; vtotalItsofa::helper::TimerData::ValData. Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_timer_data_1_1_val_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_timer_data_1_1_val_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_triangle_octree-members.html:228,Modifiability,inherit,inherited,228,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::TriangleOctree Member List . This is the complete list of members for sofa::helper::TriangleOctree, including all inherited members. allTriangles(const type::Vec3 &origin, const type::Vec3 &direction, type::vector< traceResult > &results)sofa::helper::TriangleOctreeprotected; allTriangles(const type::Vec3 &origin, const type::Vec3 &direction, std::set< int > &results)sofa::helper::TriangleOctreeprotected; bbAll(const type::Vec3 &bbmin, const type::Vec3 &bbmax, Res &results)sofa::helper::TriangleOctreeprotected; bbAllTriangles(const type::Vec3 &bbmin, const type::Vec3 &bbmax, std::set< int > &results)sofa::helper::TriangleOctreeprotected; bboxAllCandidates(type::Vec3 bbmin, type::Vec3 bbmax, std::set< int > &results)sofa::helper::TriangleOctree; childVecsofa::helper::TriangleOctree; CUBE_SIZEsofa::helper::TriangleOctreestatic; draw(sofa::helper::visual::DrawTool *drawtool)sofa::helper::TriangleOctree; insert(SReal _x, SReal _y, SReal _z, SReal _inc, int t)sofa::helper::TriangleOctreeprotected; internalsofa::helper::TriangleOctree; is_leafsofa::helper::TriangleOctree; nearestTriangle(int minIndex, const type::Vec3 &origin, const type::Vec3 &direction, traceResult &result)sofa::helper::TriangleOctreeprotected; objectssofa::helper::TriangleOctree; sizesofa::helper::TriangleOctree; tmsofa::helper::TriangleOctree; trace(type::Vec3 origin, type::Vec3 direction, traceResult &result)sofa::helper::TriangleOctree; trace(const type::Vec3 &origin, const type::Vec3 &direction, SReal tx0, SReal ty0, SReal tz0, SReal tx1, SReal ty1, SReal tz1, unsigned int a, unsigned int b, type::Vec3 &origin1, type::Vec3 &direction1, traceResult &result)sofa::helper::TriangleOctreeprotected; traceAll(type::Vec3 origin, type::Vec3 direction, type::vector< traceResult > &results)sofa::helper::TriangleOctree; traceAll(const type::Vec3 &origin, const type::Vec3 &direction, SReal tx0, SReal",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_triangle_octree-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_triangle_octree-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_triangle_octree_1_1trace_result-members.html:254,Modifiability,inherit,inherited,254,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::TriangleOctree::traceResult Member List . This is the complete list of members for sofa::helper::TriangleOctree::traceResult, including all inherited members. operator!=(const traceResult &r) constsofa::helper::TriangleOctree::traceResultinline; operator<(const traceResult &r) constsofa::helper::TriangleOctree::traceResultinline; operator<=(const traceResult &r) constsofa::helper::TriangleOctree::traceResultinline; operator==(const traceResult &r) constsofa::helper::TriangleOctree::traceResultinline; operator>(const traceResult &r) constsofa::helper::TriangleOctree::traceResultinline; operator>=(const traceResult &r) constsofa::helper::TriangleOctree::traceResultinline; tsofa::helper::TriangleOctree::traceResult; tidsofa::helper::TriangleOctree::traceResult; traceResult()sofa::helper::TriangleOctree::traceResultinline; usofa::helper::TriangleOctree::traceResult; vsofa::helper::TriangleOctree::traceResult. Generated on Mon Nov 11 2024 03:31:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_triangle_octree_1_1trace_result-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_triangle_octree_1_1trace_result-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_triangle_octree_root-members.html:236,Modifiability,inherit,inherited,236,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::TriangleOctreeRoot Member List . This is the complete list of members for sofa::helper::TriangleOctreeRoot, including all inherited members. buildOctree()sofa::helper::TriangleOctreeRoot; buildOctree(const SeqTriangles *triangles, const VecCoord *pos)sofa::helper::TriangleOctreeRootinline; calcTriangleAABB(int t, SReal *bb, SReal &size)sofa::helper::TriangleOctreeRootprotected; Coord typedefsofa::helper::TriangleOctreeRoot; CUBE_SIZEsofa::helper::TriangleOctreeRootstatic; cubeSizesofa::helper::TriangleOctreeRoot; fillOctree(int t, int d=0, type::Vec3 v={ 0_sreal, 0_sreal, 0_sreal })sofa::helper::TriangleOctreeRootprotected; octreePossofa::helper::TriangleOctreeRoot; octreeRootsofa::helper::TriangleOctreeRoot; octreeTrianglessofa::helper::TriangleOctreeRoot; SeqTriangles typedefsofa::helper::TriangleOctreeRoot; Tri typedefsofa::helper::TriangleOctreeRoot; TriangleOctreeRoot()sofa::helper::TriangleOctreeRoot; VecCoord typedefsofa::helper::TriangleOctreeRoot; ~TriangleOctreeRoot()sofa::helper::TriangleOctreeRoot. Generated on Mon Nov 11 2024 03:31:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_triangle_octree_root-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_triangle_octree_root-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_triangle_octree_root.html:345,Modifiability,Inherit,Inheritance,345,"﻿. SOFA API: sofa::helper::TriangleOctreeRoot Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::TriangleOctreeRoot Class Reference . #include <TriangleOctree.h>. Inheritance diagram for sofa::helper::TriangleOctreeRoot:. [legend]. Public Attributes; const SeqTriangles * octreeTriangles;  the triangles used as input to construct the octree More...;  ; const VecCoord * octreePos;  the positions of vertices used as input to construct the octree More...;  ; TriangleOctree * octreeRoot;  the first node of the octree More...;  ; int cubeSize;  the size of the octree cube More...;  . Static Public Attributes; static constexpr int CUBE_SIZE = 800;  . Public Member Functions;  TriangleOctreeRoot ();  ;  ~TriangleOctreeRoot ();  ; void buildOctree ();  ; void buildOctree (const SeqTriangles *triangles, const VecCoord *pos);  . Protected Member Functions; int fillOctree (int t, int d=0, type::Vec3 v={ 0_sreal, 0_sreal, 0_sreal });  used to add a triangle to the octree More...;  ; void calcTriangleAABB (int t, SReal *bb, SReal &size);  used to compute the Bounding Box for each triangle More...;  . Attribute details. ◆ CUBE_SIZE. constexpr int sofa::helper::TriangleOctreeRoot::CUBE_SIZE = 800. staticconstexpr . ◆ cubeSize. int sofa::helper::TriangleOctreeRoot::cubeSize. the size of the octree cube . ◆ octreePos. const VecCoord* sofa::helper::TriangleOctreeRoot::octreePos. the positions of vertices used as input to construct the octree . ◆ octreeRoot. TriangleOctree* sofa::helper::TriangleOctreeRoot::octreeRoot. the first node of the octree . ◆ octreeTriangles. const SeqTriangles* sofa::helper::TriangleOctreeRoot::octreeTriangles. the triangles used as input to construct the octree . Constructor details. ◆ TriangleOctreeRoot(). sofa::helper::TriangleOctreeRoot::TriangleOctreeRoot ; (; ). ◆ ~TriangleOc",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_triangle_octree_root.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_triangle_octree_root.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_type_info-members.html:216,Modifiability,inherit,inherited,216,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::TypeInfo Member List . This is the complete list of members for sofa::helper::TypeInfo, including all inherited members. operator const std::type_info &() constsofa::helper::TypeInfoinline; operator!=(const TypeInfo &t) constsofa::helper::TypeInfoinline; operator<(const TypeInfo &t) constsofa::helper::TypeInfoinline; operator==(const TypeInfo &t) constsofa::helper::TypeInfoinline; ptsofa::helper::TypeInfo; TypeInfo(const std::type_info &t)sofa::helper::TypeInfoinline. Generated on Mon Nov 11 2024 03:31:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_type_info-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_type_info-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_t_simple_timer-members.html:256,Modifiability,inherit,inherited,256,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::TSimpleTimer< nIter, nStep > Member List . This is the complete list of members for sofa::helper::TSimpleTimer< nIter, nStep >, including all inherited members. CTime typedefsofa::helper::TSimpleTimer< nIter, nStep >; ctime_t typedefsofa::helper::TSimpleTimer< nIter, nStep >; start(const char *name)sofa::helper::TSimpleTimer< nIter, nStep >inline; step(const char *name="""")sofa::helper::TSimpleTimer< nIter, nStep >inline; stop()sofa::helper::TSimpleTimer< nIter, nStep >inline; T_NITERS enum valuesofa::helper::TSimpleTimer< nIter, nStep >; T_NSTEPS enum valuesofa::helper::TSimpleTimer< nIter, nStep >; timer_currentsofa::helper::TSimpleTimer< nIter, nStep >; timer_freqsofa::helper::TSimpleTimer< nIter, nStep >; timer_lastnamesofa::helper::TSimpleTimer< nIter, nStep >; timer_nitersofa::helper::TSimpleTimer< nIter, nStep >; timer_nstepsofa::helper::TSimpleTimer< nIter, nStep >; timer_startsofa::helper::TSimpleTimer< nIter, nStep >; timer_totalsofa::helper::TSimpleTimer< nIter, nStep >; timers_currentsofa::helper::TSimpleTimer< nIter, nStep >; timers_namesofa::helper::TSimpleTimer< nIter, nStep >; timers_startsofa::helper::TSimpleTimer< nIter, nStep >; timers_totalsofa::helper::TSimpleTimer< nIter, nStep >; TSimpleTimer()sofa::helper::TSimpleTimer< nIter, nStep >inline. Generated on Mon Nov 11 2024 03:31:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_t_simple_timer-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_t_simple_timer-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_t_simple_timer.html:575,Performance,perform,performance,575,"﻿. SOFA API: sofa::helper::TSimpleTimer< nIter, nStep > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::helper::TSimpleTimer< nIter, nStep > Class Template Reference . #include <SimpleTimer.h>; Detailed Description; template<int nIter = 100, int nStep = 100>; class sofa::helper::TSimpleTimer< nIter, nStep >; Very simple timer; Usage example :; sofa::helper::SimpleTimer mytimer;; void myComputationCode() {; bool timer = true; // should I print performance stats if (timer) mytimer.start(""mystep1);; ... // step 1 code; if (timer) mytimer.step(""mystep2"");; ... // step 2 code; if (timer) mytimer.stop(); } . Public Attributes; ctime_t timer_total;  ; ctime_t timer_current;  ; ctime_t timer_freq;  ; ctime_t timer_start;  ; ctime_t timers_start;  ; const char * timers_name [T_NSTEPS];  ; ctime_t timers_total [T_NSTEPS];  ; ctime_t timers_current [T_NSTEPS];  ; int timer_niter;  ; int timer_nstep;  ; const char * timer_lastname;  . Public Member Functions;  TSimpleTimer ();  ; void start (const char *name);  ; void step (const char *name="""");  ; void stop ();  . Attribute details. ◆ timer_current. template<int nIter = 100, int nStep = 100> . ctime_t sofa::helper::TSimpleTimer< nIter, nStep >::timer_current. ◆ timer_freq. template<int nIter = 100, int nStep = 100> . ctime_t sofa::helper::TSimpleTimer< nIter, nStep >::timer_freq. ◆ timer_lastname. template<int nIter = 100, int nStep = 100> . const char* sofa::helper::TSimpleTimer< nIter, nStep >::timer_lastname. ◆ timer_niter. template<int nIter = 100, int nStep = 100> . int sofa::helper::TSimpleTimer< nIter, nStep >::timer_niter. ◆ timer_nstep. template<int nIter = 100, int nStep = 100> . int sofa::helper::TSimpleTimer< nIter, nStep >::timer_nstep. ◆ timer_start. template<int nIter = 100, int nStep = 100> . ctime_t sofa::helper::TSimpleTimer< nIter, nStep >::timer_start. ◆ timer_total. template<int nI",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_t_simple_timer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_t_simple_timer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_t_simple_timer.html:306,Usability,Simpl,SimpleTimer,306,"﻿. SOFA API: sofa::helper::TSimpleTimer< nIter, nStep > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::helper::TSimpleTimer< nIter, nStep > Class Template Reference . #include <SimpleTimer.h>; Detailed Description; template<int nIter = 100, int nStep = 100>; class sofa::helper::TSimpleTimer< nIter, nStep >; Very simple timer; Usage example :; sofa::helper::SimpleTimer mytimer;; void myComputationCode() {; bool timer = true; // should I print performance stats if (timer) mytimer.start(""mystep1);; ... // step 1 code; if (timer) mytimer.step(""mystep2"");; ... // step 2 code; if (timer) mytimer.stop(); } . Public Attributes; ctime_t timer_total;  ; ctime_t timer_current;  ; ctime_t timer_freq;  ; ctime_t timer_start;  ; ctime_t timers_start;  ; const char * timers_name [T_NSTEPS];  ; ctime_t timers_total [T_NSTEPS];  ; ctime_t timers_current [T_NSTEPS];  ; int timer_niter;  ; int timer_nstep;  ; const char * timer_lastname;  . Public Member Functions;  TSimpleTimer ();  ; void start (const char *name);  ; void step (const char *name="""");  ; void stop ();  . Attribute details. ◆ timer_current. template<int nIter = 100, int nStep = 100> . ctime_t sofa::helper::TSimpleTimer< nIter, nStep >::timer_current. ◆ timer_freq. template<int nIter = 100, int nStep = 100> . ctime_t sofa::helper::TSimpleTimer< nIter, nStep >::timer_freq. ◆ timer_lastname. template<int nIter = 100, int nStep = 100> . const char* sofa::helper::TSimpleTimer< nIter, nStep >::timer_lastname. ◆ timer_niter. template<int nIter = 100, int nStep = 100> . int sofa::helper::TSimpleTimer< nIter, nStep >::timer_niter. ◆ timer_nstep. template<int nIter = 100, int nStep = 100> . int sofa::helper::TSimpleTimer< nIter, nStep >::timer_nstep. ◆ timer_start. template<int nIter = 100, int nStep = 100> . ctime_t sofa::helper::TSimpleTimer< nIter, nStep >::timer_start. ◆ timer_total. template<int nI",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_t_simple_timer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_t_simple_timer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_t_simple_timer.html:443,Usability,simpl,simple,443,"﻿. SOFA API: sofa::helper::TSimpleTimer< nIter, nStep > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::helper::TSimpleTimer< nIter, nStep > Class Template Reference . #include <SimpleTimer.h>; Detailed Description; template<int nIter = 100, int nStep = 100>; class sofa::helper::TSimpleTimer< nIter, nStep >; Very simple timer; Usage example :; sofa::helper::SimpleTimer mytimer;; void myComputationCode() {; bool timer = true; // should I print performance stats if (timer) mytimer.start(""mystep1);; ... // step 1 code; if (timer) mytimer.step(""mystep2"");; ... // step 2 code; if (timer) mytimer.stop(); } . Public Attributes; ctime_t timer_total;  ; ctime_t timer_current;  ; ctime_t timer_freq;  ; ctime_t timer_start;  ; ctime_t timers_start;  ; const char * timers_name [T_NSTEPS];  ; ctime_t timers_total [T_NSTEPS];  ; ctime_t timers_current [T_NSTEPS];  ; int timer_niter;  ; int timer_nstep;  ; const char * timer_lastname;  . Public Member Functions;  TSimpleTimer ();  ; void start (const char *name);  ; void step (const char *name="""");  ; void stop ();  . Attribute details. ◆ timer_current. template<int nIter = 100, int nStep = 100> . ctime_t sofa::helper::TSimpleTimer< nIter, nStep >::timer_current. ◆ timer_freq. template<int nIter = 100, int nStep = 100> . ctime_t sofa::helper::TSimpleTimer< nIter, nStep >::timer_freq. ◆ timer_lastname. template<int nIter = 100, int nStep = 100> . const char* sofa::helper::TSimpleTimer< nIter, nStep >::timer_lastname. ◆ timer_niter. template<int nIter = 100, int nStep = 100> . int sofa::helper::TSimpleTimer< nIter, nStep >::timer_niter. ◆ timer_nstep. template<int nIter = 100, int nStep = 100> . int sofa::helper::TSimpleTimer< nIter, nStep >::timer_nstep. ◆ timer_start. template<int nIter = 100, int nStep = 100> . ctime_t sofa::helper::TSimpleTimer< nIter, nStep >::timer_start. ◆ timer_total. template<int nI",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_t_simple_timer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_t_simple_timer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_t_simple_timer.html:488,Usability,Simpl,SimpleTimer,488,"﻿. SOFA API: sofa::helper::TSimpleTimer< nIter, nStep > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::helper::TSimpleTimer< nIter, nStep > Class Template Reference . #include <SimpleTimer.h>; Detailed Description; template<int nIter = 100, int nStep = 100>; class sofa::helper::TSimpleTimer< nIter, nStep >; Very simple timer; Usage example :; sofa::helper::SimpleTimer mytimer;; void myComputationCode() {; bool timer = true; // should I print performance stats if (timer) mytimer.start(""mystep1);; ... // step 1 code; if (timer) mytimer.step(""mystep2"");; ... // step 2 code; if (timer) mytimer.stop(); } . Public Attributes; ctime_t timer_total;  ; ctime_t timer_current;  ; ctime_t timer_freq;  ; ctime_t timer_start;  ; ctime_t timers_start;  ; const char * timers_name [T_NSTEPS];  ; ctime_t timers_total [T_NSTEPS];  ; ctime_t timers_current [T_NSTEPS];  ; int timer_niter;  ; int timer_nstep;  ; const char * timer_lastname;  . Public Member Functions;  TSimpleTimer ();  ; void start (const char *name);  ; void step (const char *name="""");  ; void stop ();  . Attribute details. ◆ timer_current. template<int nIter = 100, int nStep = 100> . ctime_t sofa::helper::TSimpleTimer< nIter, nStep >::timer_current. ◆ timer_freq. template<int nIter = 100, int nStep = 100> . ctime_t sofa::helper::TSimpleTimer< nIter, nStep >::timer_freq. ◆ timer_lastname. template<int nIter = 100, int nStep = 100> . const char* sofa::helper::TSimpleTimer< nIter, nStep >::timer_lastname. ◆ timer_niter. template<int nIter = 100, int nStep = 100> . int sofa::helper::TSimpleTimer< nIter, nStep >::timer_niter. ◆ timer_nstep. template<int nIter = 100, int nStep = 100> . int sofa::helper::TSimpleTimer< nIter, nStep >::timer_nstep. ◆ timer_start. template<int nIter = 100, int nStep = 100> . ctime_t sofa::helper::TSimpleTimer< nIter, nStep >::timer_start. ◆ timer_total. template<int nI",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_t_simple_timer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_t_simple_timer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils-members.html:229,Availability,down,downcaseString,229,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::Utils Member List . This is the complete list of members for sofa::helper::Utils, including all inherited members. downcaseString(const std::string &s)sofa::helper::Utilsstatic; getExecutableDirectory()sofa::helper::Utilsstatic; getExecutablePath()sofa::helper::Utilsstatic; getSofaPathPrefix()sofa::helper::Utilsstatic; getSofaPathTo(const std::string &pathFromBuildDir)sofa::helper::Utilsstatic; getSofaUserLocalDirectory()sofa::helper::Utilsstatic; getUserLocalDirectory()sofa::helper::Utilsstatic; narrowString(const std::wstring &ws)sofa::helper::Utilsstatic; readBasicIniFile(const std::string &path)sofa::helper::Utilsstatic; upcaseString(const std::string &s)sofa::helper::Utilsstatic; widenString(const std::string &s)sofa::helper::Utilsstatic. Generated on Mon Nov 11 2024 03:31:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_utils-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils-members.html:210,Modifiability,inherit,inherited,210,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::Utils Member List . This is the complete list of members for sofa::helper::Utils, including all inherited members. downcaseString(const std::string &s)sofa::helper::Utilsstatic; getExecutableDirectory()sofa::helper::Utilsstatic; getExecutablePath()sofa::helper::Utilsstatic; getSofaPathPrefix()sofa::helper::Utilsstatic; getSofaPathTo(const std::string &pathFromBuildDir)sofa::helper::Utilsstatic; getSofaUserLocalDirectory()sofa::helper::Utilsstatic; getUserLocalDirectory()sofa::helper::Utilsstatic; narrowString(const std::wstring &ws)sofa::helper::Utilsstatic; readBasicIniFile(const std::string &path)sofa::helper::Utilsstatic; upcaseString(const std::string &s)sofa::helper::Utilsstatic; widenString(const std::string &s)sofa::helper::Utilsstatic. Generated on Mon Nov 11 2024 03:31:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_utils-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html:658,Availability,down,downcaseString,658,"﻿. SOFA API: sofa::helper::Utils Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::helper::Utils Class Reference . #include <Utils.h>; Contains possibly useful functions, that don't fit anywhere else. ; More...; Detailed Description; Contains possibly useful functions, that don't fit anywhere else. . Static Public Member Functions; static std::wstring widenString (const std::string &s);  Convert a string to a wstring. More...;  ; static std::string narrowString (const std::wstring &ws);  Convert a wstring to a string. More...;  ; static std::string downcaseString (const std::string &s);  Convert a string to lower case. More...;  ; static std::string upcaseString (const std::string &s);  Convert a string to upper case. More...;  ; static const std::string & getExecutablePath ();  Get the path of the executable that is currently running. More...;  ; static const std::string & getExecutableDirectory ();  Get the path to the directory of the executable that is currently running. More...;  ; static const std::string & getUserLocalDirectory ();  Get the path to the current user local config directory. More...;  ; static const std::string & getSofaUserLocalDirectory ();  Get the path to the SOFA directory into the current user local config directory. More...;  ; static const std::string & getSofaPathPrefix ();  Get the path to the ""root"" path of Sofa (i.e. the build directory or the installation prefix). More...;  ; static const std::string getSofaPathTo (const std::string &pathFromBuildDir);  Construct a path based on the build dir path of Sofa. More...;  ; static std::map< std::string, std::string > readBasicIniFile (const std::string &path);  Read a file written in a very basic ini-like format. More...;  . Function details. ◆ downcaseString(). std::string sofa::helper::Utils::downcaseString ; (; const std::string & ; s). static . Convert a string to lower case. . ◆ getE",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_utils.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html:1855,Availability,down,downcaseString,1855,"tring & getExecutablePath ();  Get the path of the executable that is currently running. More...;  ; static const std::string & getExecutableDirectory ();  Get the path to the directory of the executable that is currently running. More...;  ; static const std::string & getUserLocalDirectory ();  Get the path to the current user local config directory. More...;  ; static const std::string & getSofaUserLocalDirectory ();  Get the path to the SOFA directory into the current user local config directory. More...;  ; static const std::string & getSofaPathPrefix ();  Get the path to the ""root"" path of Sofa (i.e. the build directory or the installation prefix). More...;  ; static const std::string getSofaPathTo (const std::string &pathFromBuildDir);  Construct a path based on the build dir path of Sofa. More...;  ; static std::map< std::string, std::string > readBasicIniFile (const std::string &path);  Read a file written in a very basic ini-like format. More...;  . Function details. ◆ downcaseString(). std::string sofa::helper::Utils::downcaseString ; (; const std::string & ; s). static . Convert a string to lower case. . ◆ getExecutableDirectory(). const std::string & sofa::helper::Utils::getExecutableDirectory ; (; ). static . Get the path to the directory of the executable that is currently running. . ◆ getExecutablePath(). const std::string & sofa::helper::Utils::getExecutablePath ; (; ). static . Get the path of the executable that is currently running. ; Note that this function uses various non-portable tricks to achieve its goal, and it might not be the most reliable thing ever written. . ◆ getSofaPathPrefix(). const std::string & sofa::helper::Utils::getSofaPathPrefix ; (; ). static . Get the path to the ""root"" path of Sofa (i.e. the build directory or the installation prefix). ; WarningThis function is meant to be used only by the applications that are distributed with SOFA ; ReturnsThe ABSOLUTE path of Sofa build dir (or install dir) . ◆ getSofaPathTo(). const st",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_utils.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html:1906,Availability,down,downcaseString,1906,"e executable that is currently running. More...;  ; static const std::string & getExecutableDirectory ();  Get the path to the directory of the executable that is currently running. More...;  ; static const std::string & getUserLocalDirectory ();  Get the path to the current user local config directory. More...;  ; static const std::string & getSofaUserLocalDirectory ();  Get the path to the SOFA directory into the current user local config directory. More...;  ; static const std::string & getSofaPathPrefix ();  Get the path to the ""root"" path of Sofa (i.e. the build directory or the installation prefix). More...;  ; static const std::string getSofaPathTo (const std::string &pathFromBuildDir);  Construct a path based on the build dir path of Sofa. More...;  ; static std::map< std::string, std::string > readBasicIniFile (const std::string &path);  Read a file written in a very basic ini-like format. More...;  . Function details. ◆ downcaseString(). std::string sofa::helper::Utils::downcaseString ; (; const std::string & ; s). static . Convert a string to lower case. . ◆ getExecutableDirectory(). const std::string & sofa::helper::Utils::getExecutableDirectory ; (; ). static . Get the path to the directory of the executable that is currently running. . ◆ getExecutablePath(). const std::string & sofa::helper::Utils::getExecutablePath ; (; ). static . Get the path of the executable that is currently running. ; Note that this function uses various non-portable tricks to achieve its goal, and it might not be the most reliable thing ever written. . ◆ getSofaPathPrefix(). const std::string & sofa::helper::Utils::getSofaPathPrefix ; (; ). static . Get the path to the ""root"" path of Sofa (i.e. the build directory or the installation prefix). ; WarningThis function is meant to be used only by the applications that are distributed with SOFA ; ReturnsThe ABSOLUTE path of Sofa build dir (or install dir) . ◆ getSofaPathTo(). const std::string sofa::helper::Utils::getSofaPathTo ; (; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_utils.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html:2447,Availability,reliab,reliable,2447,"getSofaPathPrefix ();  Get the path to the ""root"" path of Sofa (i.e. the build directory or the installation prefix). More...;  ; static const std::string getSofaPathTo (const std::string &pathFromBuildDir);  Construct a path based on the build dir path of Sofa. More...;  ; static std::map< std::string, std::string > readBasicIniFile (const std::string &path);  Read a file written in a very basic ini-like format. More...;  . Function details. ◆ downcaseString(). std::string sofa::helper::Utils::downcaseString ; (; const std::string & ; s). static . Convert a string to lower case. . ◆ getExecutableDirectory(). const std::string & sofa::helper::Utils::getExecutableDirectory ; (; ). static . Get the path to the directory of the executable that is currently running. . ◆ getExecutablePath(). const std::string & sofa::helper::Utils::getExecutablePath ; (; ). static . Get the path of the executable that is currently running. ; Note that this function uses various non-portable tricks to achieve its goal, and it might not be the most reliable thing ever written. . ◆ getSofaPathPrefix(). const std::string & sofa::helper::Utils::getSofaPathPrefix ; (; ). static . Get the path to the ""root"" path of Sofa (i.e. the build directory or the installation prefix). ; WarningThis function is meant to be used only by the applications that are distributed with SOFA ; ReturnsThe ABSOLUTE path of Sofa build dir (or install dir) . ◆ getSofaPathTo(). const std::string sofa::helper::Utils::getSofaPathTo ; (; const std::string & ; pathFromBuildDir). static . Construct a path based on the build dir path of Sofa. ; WarningThis function is meant to be used only by the applications that are distributed with SOFA: it uses getSofaPathPrefix() ; ReturnsThe ABSOLUTE path of anything in Sofa build dir (or install dir) . ◆ getSofaUserLocalDirectory(). const std::string & sofa::helper::Utils::getSofaUserLocalDirectory ; (; ). static . Get the path to the SOFA directory into the current user local config d",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_utils.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html:3784,Availability,failure,failure,3784," static . Get the path to the ""root"" path of Sofa (i.e. the build directory or the installation prefix). ; WarningThis function is meant to be used only by the applications that are distributed with SOFA ; ReturnsThe ABSOLUTE path of Sofa build dir (or install dir) . ◆ getSofaPathTo(). const std::string sofa::helper::Utils::getSofaPathTo ; (; const std::string & ; pathFromBuildDir). static . Construct a path based on the build dir path of Sofa. ; WarningThis function is meant to be used only by the applications that are distributed with SOFA: it uses getSofaPathPrefix() ; ReturnsThe ABSOLUTE path of anything in Sofa build dir (or install dir) . ◆ getSofaUserLocalDirectory(). const std::string & sofa::helper::Utils::getSofaUserLocalDirectory ; (; ). static . Get the path to the SOFA directory into the current user local config directory. . ◆ getUserLocalDirectory(). const std::string & sofa::helper::Utils::getUserLocalDirectory ; (; ). static . Get the path to the current user local config directory. . ◆ narrowString(). std::string sofa::helper::Utils::narrowString ; (; const std::wstring & ; ws). static . Convert a wstring to a string. ; ReturnsThe converted string on success, or a empty string on failure. . ◆ readBasicIniFile(). std::map< std::string, std::string > sofa::helper::Utils::readBasicIniFile ; (; const std::string & ; path). static . Read a file written in a very basic ini-like format. ; For each line that contains a '=' character, (e.g. ""key=value""), the returned map will contains a pair <""key"", ""value"">. Other lines will be ignored. . ◆ upcaseString(). std::string sofa::helper::Utils::upcaseString ; (; const std::string & ; s). static . Convert a string to upper case. . ◆ widenString(). std::wstring sofa::helper::Utils::widenString ; (; const std::string & ; s). static . Convert a string to a wstring. ; ReturnsThe converted string on success, or a empty string on failure. . sofahelperUtils; Generated on Mon Nov 11 2024 03:31:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_utils.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html:4477,Availability,failure,failure,4477," static . Get the path to the ""root"" path of Sofa (i.e. the build directory or the installation prefix). ; WarningThis function is meant to be used only by the applications that are distributed with SOFA ; ReturnsThe ABSOLUTE path of Sofa build dir (or install dir) . ◆ getSofaPathTo(). const std::string sofa::helper::Utils::getSofaPathTo ; (; const std::string & ; pathFromBuildDir). static . Construct a path based on the build dir path of Sofa. ; WarningThis function is meant to be used only by the applications that are distributed with SOFA: it uses getSofaPathPrefix() ; ReturnsThe ABSOLUTE path of anything in Sofa build dir (or install dir) . ◆ getSofaUserLocalDirectory(). const std::string & sofa::helper::Utils::getSofaUserLocalDirectory ; (; ). static . Get the path to the SOFA directory into the current user local config directory. . ◆ getUserLocalDirectory(). const std::string & sofa::helper::Utils::getUserLocalDirectory ; (; ). static . Get the path to the current user local config directory. . ◆ narrowString(). std::string sofa::helper::Utils::narrowString ; (; const std::wstring & ; ws). static . Convert a wstring to a string. ; ReturnsThe converted string on success, or a empty string on failure. . ◆ readBasicIniFile(). std::map< std::string, std::string > sofa::helper::Utils::readBasicIniFile ; (; const std::string & ; path). static . Read a file written in a very basic ini-like format. ; For each line that contains a '=' character, (e.g. ""key=value""), the returned map will contains a pair <""key"", ""value"">. Other lines will be ignored. . ◆ upcaseString(). std::string sofa::helper::Utils::upcaseString ; (; const std::string & ; s). static . Convert a string to upper case. . ◆ widenString(). std::wstring sofa::helper::Utils::widenString ; (; const std::string & ; s). static . Convert a string to a wstring. ; ReturnsThe converted string on success, or a empty string on failure. . sofahelperUtils; Generated on Mon Nov 11 2024 03:31:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_utils.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html:1502,Deployability,install,installation,1502,"ert a string to a wstring. More...;  ; static std::string narrowString (const std::wstring &ws);  Convert a wstring to a string. More...;  ; static std::string downcaseString (const std::string &s);  Convert a string to lower case. More...;  ; static std::string upcaseString (const std::string &s);  Convert a string to upper case. More...;  ; static const std::string & getExecutablePath ();  Get the path of the executable that is currently running. More...;  ; static const std::string & getExecutableDirectory ();  Get the path to the directory of the executable that is currently running. More...;  ; static const std::string & getUserLocalDirectory ();  Get the path to the current user local config directory. More...;  ; static const std::string & getSofaUserLocalDirectory ();  Get the path to the SOFA directory into the current user local config directory. More...;  ; static const std::string & getSofaPathPrefix ();  Get the path to the ""root"" path of Sofa (i.e. the build directory or the installation prefix). More...;  ; static const std::string getSofaPathTo (const std::string &pathFromBuildDir);  Construct a path based on the build dir path of Sofa. More...;  ; static std::map< std::string, std::string > readBasicIniFile (const std::string &path);  Read a file written in a very basic ini-like format. More...;  . Function details. ◆ downcaseString(). std::string sofa::helper::Utils::downcaseString ; (; const std::string & ; s). static . Convert a string to lower case. . ◆ getExecutableDirectory(). const std::string & sofa::helper::Utils::getExecutableDirectory ; (; ). static . Get the path to the directory of the executable that is currently running. . ◆ getExecutablePath(). const std::string & sofa::helper::Utils::getExecutablePath ; (; ). static . Get the path of the executable that is currently running. ; Note that this function uses various non-portable tricks to achieve its goal, and it might not be the most reliable thing ever written. . ◆ getSofaPathPrefix()",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_utils.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html:2650,Deployability,install,installation,2650,"uild dir path of Sofa. More...;  ; static std::map< std::string, std::string > readBasicIniFile (const std::string &path);  Read a file written in a very basic ini-like format. More...;  . Function details. ◆ downcaseString(). std::string sofa::helper::Utils::downcaseString ; (; const std::string & ; s). static . Convert a string to lower case. . ◆ getExecutableDirectory(). const std::string & sofa::helper::Utils::getExecutableDirectory ; (; ). static . Get the path to the directory of the executable that is currently running. . ◆ getExecutablePath(). const std::string & sofa::helper::Utils::getExecutablePath ; (; ). static . Get the path of the executable that is currently running. ; Note that this function uses various non-portable tricks to achieve its goal, and it might not be the most reliable thing ever written. . ◆ getSofaPathPrefix(). const std::string & sofa::helper::Utils::getSofaPathPrefix ; (; ). static . Get the path to the ""root"" path of Sofa (i.e. the build directory or the installation prefix). ; WarningThis function is meant to be used only by the applications that are distributed with SOFA ; ReturnsThe ABSOLUTE path of Sofa build dir (or install dir) . ◆ getSofaPathTo(). const std::string sofa::helper::Utils::getSofaPathTo ; (; const std::string & ; pathFromBuildDir). static . Construct a path based on the build dir path of Sofa. ; WarningThis function is meant to be used only by the applications that are distributed with SOFA: it uses getSofaPathPrefix() ; ReturnsThe ABSOLUTE path of anything in Sofa build dir (or install dir) . ◆ getSofaUserLocalDirectory(). const std::string & sofa::helper::Utils::getSofaUserLocalDirectory ; (; ). static . Get the path to the SOFA directory into the current user local config directory. . ◆ getUserLocalDirectory(). const std::string & sofa::helper::Utils::getUserLocalDirectory ; (; ). static . Get the path to the current user local config directory. . ◆ narrowString(). std::string sofa::helper::Utils::narrowString",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_utils.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html:2820,Deployability,install,install,2820,"::string &path);  Read a file written in a very basic ini-like format. More...;  . Function details. ◆ downcaseString(). std::string sofa::helper::Utils::downcaseString ; (; const std::string & ; s). static . Convert a string to lower case. . ◆ getExecutableDirectory(). const std::string & sofa::helper::Utils::getExecutableDirectory ; (; ). static . Get the path to the directory of the executable that is currently running. . ◆ getExecutablePath(). const std::string & sofa::helper::Utils::getExecutablePath ; (; ). static . Get the path of the executable that is currently running. ; Note that this function uses various non-portable tricks to achieve its goal, and it might not be the most reliable thing ever written. . ◆ getSofaPathPrefix(). const std::string & sofa::helper::Utils::getSofaPathPrefix ; (; ). static . Get the path to the ""root"" path of Sofa (i.e. the build directory or the installation prefix). ; WarningThis function is meant to be used only by the applications that are distributed with SOFA ; ReturnsThe ABSOLUTE path of Sofa build dir (or install dir) . ◆ getSofaPathTo(). const std::string sofa::helper::Utils::getSofaPathTo ; (; const std::string & ; pathFromBuildDir). static . Construct a path based on the build dir path of Sofa. ; WarningThis function is meant to be used only by the applications that are distributed with SOFA: it uses getSofaPathPrefix() ; ReturnsThe ABSOLUTE path of anything in Sofa build dir (or install dir) . ◆ getSofaUserLocalDirectory(). const std::string & sofa::helper::Utils::getSofaUserLocalDirectory ; (; ). static . Get the path to the SOFA directory into the current user local config directory. . ◆ getUserLocalDirectory(). const std::string & sofa::helper::Utils::getUserLocalDirectory ; (; ). static . Get the path to the current user local config directory. . ◆ narrowString(). std::string sofa::helper::Utils::narrowString ; (; const std::wstring & ; ws). static . Convert a wstring to a string. ; ReturnsThe converted string on",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_utils.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html:3205,Deployability,install,install,3205,"to the directory of the executable that is currently running. . ◆ getExecutablePath(). const std::string & sofa::helper::Utils::getExecutablePath ; (; ). static . Get the path of the executable that is currently running. ; Note that this function uses various non-portable tricks to achieve its goal, and it might not be the most reliable thing ever written. . ◆ getSofaPathPrefix(). const std::string & sofa::helper::Utils::getSofaPathPrefix ; (; ). static . Get the path to the ""root"" path of Sofa (i.e. the build directory or the installation prefix). ; WarningThis function is meant to be used only by the applications that are distributed with SOFA ; ReturnsThe ABSOLUTE path of Sofa build dir (or install dir) . ◆ getSofaPathTo(). const std::string sofa::helper::Utils::getSofaPathTo ; (; const std::string & ; pathFromBuildDir). static . Construct a path based on the build dir path of Sofa. ; WarningThis function is meant to be used only by the applications that are distributed with SOFA: it uses getSofaPathPrefix() ; ReturnsThe ABSOLUTE path of anything in Sofa build dir (or install dir) . ◆ getSofaUserLocalDirectory(). const std::string & sofa::helper::Utils::getSofaUserLocalDirectory ; (; ). static . Get the path to the SOFA directory into the current user local config directory. . ◆ getUserLocalDirectory(). const std::string & sofa::helper::Utils::getUserLocalDirectory ; (; ). static . Get the path to the current user local config directory. . ◆ narrowString(). std::string sofa::helper::Utils::narrowString ; (; const std::wstring & ; ws). static . Convert a wstring to a string. ; ReturnsThe converted string on success, or a empty string on failure. . ◆ readBasicIniFile(). std::map< std::string, std::string > sofa::helper::Utils::readBasicIniFile ; (; const std::string & ; path). static . Read a file written in a very basic ini-like format. ; For each line that contains a '=' character, (e.g. ""key=value""), the returned map will contains a pair <""key"", ""value"">. Other ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_utils.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html:1198,Modifiability,config,config,1198," List of all members . sofa::helper::Utils Class Reference . #include <Utils.h>; Contains possibly useful functions, that don't fit anywhere else. ; More...; Detailed Description; Contains possibly useful functions, that don't fit anywhere else. . Static Public Member Functions; static std::wstring widenString (const std::string &s);  Convert a string to a wstring. More...;  ; static std::string narrowString (const std::wstring &ws);  Convert a wstring to a string. More...;  ; static std::string downcaseString (const std::string &s);  Convert a string to lower case. More...;  ; static std::string upcaseString (const std::string &s);  Convert a string to upper case. More...;  ; static const std::string & getExecutablePath ();  Get the path of the executable that is currently running. More...;  ; static const std::string & getExecutableDirectory ();  Get the path to the directory of the executable that is currently running. More...;  ; static const std::string & getUserLocalDirectory ();  Get the path to the current user local config directory. More...;  ; static const std::string & getSofaUserLocalDirectory ();  Get the path to the SOFA directory into the current user local config directory. More...;  ; static const std::string & getSofaPathPrefix ();  Get the path to the ""root"" path of Sofa (i.e. the build directory or the installation prefix). More...;  ; static const std::string getSofaPathTo (const std::string &pathFromBuildDir);  Construct a path based on the build dir path of Sofa. More...;  ; static std::map< std::string, std::string > readBasicIniFile (const std::string &path);  Read a file written in a very basic ini-like format. More...;  . Function details. ◆ downcaseString(). std::string sofa::helper::Utils::downcaseString ; (; const std::string & ; s). static . Convert a string to lower case. . ◆ getExecutableDirectory(). const std::string & sofa::helper::Utils::getExecutableDirectory ; (; ). static . Get the path to the directory of the executable that i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_utils.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html:1349,Modifiability,config,config,1349,"ere else. ; More...; Detailed Description; Contains possibly useful functions, that don't fit anywhere else. . Static Public Member Functions; static std::wstring widenString (const std::string &s);  Convert a string to a wstring. More...;  ; static std::string narrowString (const std::wstring &ws);  Convert a wstring to a string. More...;  ; static std::string downcaseString (const std::string &s);  Convert a string to lower case. More...;  ; static std::string upcaseString (const std::string &s);  Convert a string to upper case. More...;  ; static const std::string & getExecutablePath ();  Get the path of the executable that is currently running. More...;  ; static const std::string & getExecutableDirectory ();  Get the path to the directory of the executable that is currently running. More...;  ; static const std::string & getUserLocalDirectory ();  Get the path to the current user local config directory. More...;  ; static const std::string & getSofaUserLocalDirectory ();  Get the path to the SOFA directory into the current user local config directory. More...;  ; static const std::string & getSofaPathPrefix ();  Get the path to the ""root"" path of Sofa (i.e. the build directory or the installation prefix). More...;  ; static const std::string getSofaPathTo (const std::string &pathFromBuildDir);  Construct a path based on the build dir path of Sofa. More...;  ; static std::map< std::string, std::string > readBasicIniFile (const std::string &path);  Read a file written in a very basic ini-like format. More...;  . Function details. ◆ downcaseString(). std::string sofa::helper::Utils::downcaseString ; (; const std::string & ; s). static . Convert a string to lower case. . ◆ getExecutableDirectory(). const std::string & sofa::helper::Utils::getExecutableDirectory ; (; ). static . Get the path to the directory of the executable that is currently running. . ◆ getExecutablePath(). const std::string & sofa::helper::Utils::getExecutablePath ; (; ). static . Get the path of",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_utils.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html:2381,Modifiability,portab,portable,2381,"getSofaPathPrefix ();  Get the path to the ""root"" path of Sofa (i.e. the build directory or the installation prefix). More...;  ; static const std::string getSofaPathTo (const std::string &pathFromBuildDir);  Construct a path based on the build dir path of Sofa. More...;  ; static std::map< std::string, std::string > readBasicIniFile (const std::string &path);  Read a file written in a very basic ini-like format. More...;  . Function details. ◆ downcaseString(). std::string sofa::helper::Utils::downcaseString ; (; const std::string & ; s). static . Convert a string to lower case. . ◆ getExecutableDirectory(). const std::string & sofa::helper::Utils::getExecutableDirectory ; (; ). static . Get the path to the directory of the executable that is currently running. . ◆ getExecutablePath(). const std::string & sofa::helper::Utils::getExecutablePath ; (; ). static . Get the path of the executable that is currently running. ; Note that this function uses various non-portable tricks to achieve its goal, and it might not be the most reliable thing ever written. . ◆ getSofaPathPrefix(). const std::string & sofa::helper::Utils::getSofaPathPrefix ; (; ). static . Get the path to the ""root"" path of Sofa (i.e. the build directory or the installation prefix). ; WarningThis function is meant to be used only by the applications that are distributed with SOFA ; ReturnsThe ABSOLUTE path of Sofa build dir (or install dir) . ◆ getSofaPathTo(). const std::string sofa::helper::Utils::getSofaPathTo ; (; const std::string & ; pathFromBuildDir). static . Construct a path based on the build dir path of Sofa. ; WarningThis function is meant to be used only by the applications that are distributed with SOFA: it uses getSofaPathPrefix() ; ReturnsThe ABSOLUTE path of anything in Sofa build dir (or install dir) . ◆ getSofaUserLocalDirectory(). const std::string & sofa::helper::Utils::getSofaUserLocalDirectory ; (; ). static . Get the path to the SOFA directory into the current user local config d",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_utils.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html:3398,Modifiability,config,config,3398,"us non-portable tricks to achieve its goal, and it might not be the most reliable thing ever written. . ◆ getSofaPathPrefix(). const std::string & sofa::helper::Utils::getSofaPathPrefix ; (; ). static . Get the path to the ""root"" path of Sofa (i.e. the build directory or the installation prefix). ; WarningThis function is meant to be used only by the applications that are distributed with SOFA ; ReturnsThe ABSOLUTE path of Sofa build dir (or install dir) . ◆ getSofaPathTo(). const std::string sofa::helper::Utils::getSofaPathTo ; (; const std::string & ; pathFromBuildDir). static . Construct a path based on the build dir path of Sofa. ; WarningThis function is meant to be used only by the applications that are distributed with SOFA: it uses getSofaPathPrefix() ; ReturnsThe ABSOLUTE path of anything in Sofa build dir (or install dir) . ◆ getSofaUserLocalDirectory(). const std::string & sofa::helper::Utils::getSofaUserLocalDirectory ; (; ). static . Get the path to the SOFA directory into the current user local config directory. . ◆ getUserLocalDirectory(). const std::string & sofa::helper::Utils::getUserLocalDirectory ; (; ). static . Get the path to the current user local config directory. . ◆ narrowString(). std::string sofa::helper::Utils::narrowString ; (; const std::wstring & ; ws). static . Convert a wstring to a string. ; ReturnsThe converted string on success, or a empty string on failure. . ◆ readBasicIniFile(). std::map< std::string, std::string > sofa::helper::Utils::readBasicIniFile ; (; const std::string & ; path). static . Read a file written in a very basic ini-like format. ; For each line that contains a '=' character, (e.g. ""key=value""), the returned map will contains a pair <""key"", ""value"">. Other lines will be ignored. . ◆ upcaseString(). std::string sofa::helper::Utils::upcaseString ; (; const std::string & ; s). static . Convert a string to upper case. . ◆ widenString(). std::wstring sofa::helper::Utils::widenString ; (; const std::string & ; s). s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_utils.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html:3564,Modifiability,config,config,3564,"hPrefix ; (; ). static . Get the path to the ""root"" path of Sofa (i.e. the build directory or the installation prefix). ; WarningThis function is meant to be used only by the applications that are distributed with SOFA ; ReturnsThe ABSOLUTE path of Sofa build dir (or install dir) . ◆ getSofaPathTo(). const std::string sofa::helper::Utils::getSofaPathTo ; (; const std::string & ; pathFromBuildDir). static . Construct a path based on the build dir path of Sofa. ; WarningThis function is meant to be used only by the applications that are distributed with SOFA: it uses getSofaPathPrefix() ; ReturnsThe ABSOLUTE path of anything in Sofa build dir (or install dir) . ◆ getSofaUserLocalDirectory(). const std::string & sofa::helper::Utils::getSofaUserLocalDirectory ; (; ). static . Get the path to the SOFA directory into the current user local config directory. . ◆ getUserLocalDirectory(). const std::string & sofa::helper::Utils::getUserLocalDirectory ; (; ). static . Get the path to the current user local config directory. . ◆ narrowString(). std::string sofa::helper::Utils::narrowString ; (; const std::wstring & ; ws). static . Convert a wstring to a string. ; ReturnsThe converted string on success, or a empty string on failure. . ◆ readBasicIniFile(). std::map< std::string, std::string > sofa::helper::Utils::readBasicIniFile ; (; const std::string & ; path). static . Read a file written in a very basic ini-like format. ; For each line that contains a '=' character, (e.g. ""key=value""), the returned map will contains a pair <""key"", ""value"">. Other lines will be ignored. . ◆ upcaseString(). std::string sofa::helper::Utils::upcaseString ; (; const std::string & ; s). static . Convert a string to upper case. . ◆ widenString(). std::wstring sofa::helper::Utils::widenString ; (; const std::string & ; s). static . Convert a string to a wstring. ; ReturnsThe converted string on success, or a empty string on failure. . sofahelperUtils; Generated on Mon Nov 11 2024 03:31:02 for SOFA A",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_utils.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor-members.html:252,Modifiability,inherit,inherited,252,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::WriteAccessor< T, Enable > Member List . This is the complete list of members for sofa::helper::WriteAccessor< T, Enable >, including all inherited members. const_pointer typedefsofa::helper::WriteAccessor< T, Enable >; const_reference typedefsofa::helper::WriteAccessor< T, Enable >; container_type typedefsofa::helper::WriteAccessor< T, Enable >; operator const_reference() constsofa::helper::WriteAccessor< T, Enable >inline; operator reference()sofa::helper::WriteAccessor< T, Enable >inline; operator*() constsofa::helper::WriteAccessor< T, Enable >inline; operator*()sofa::helper::WriteAccessor< T, Enable >inline; operator->() constsofa::helper::WriteAccessor< T, Enable >inline; operator->()sofa::helper::WriteAccessor< T, Enable >inline; operator=(const T2 &v)sofa::helper::WriteAccessor< T, Enable >inline; pointer typedefsofa::helper::WriteAccessor< T, Enable >; ref() constsofa::helper::WriteAccessor< T, Enable >inline; reference typedefsofa::helper::WriteAccessor< T, Enable >; value_type typedefsofa::helper::WriteAccessor< T, Enable >; vrefsofa::helper::WriteAccessor< T, Enable >protected; wref()sofa::helper::WriteAccessor< T, Enable >inline; WriteAccessor(container_type &container)sofa::helper::WriteAccessor< T, Enable >inlineexplicit. Generated on Mon Nov 11 2024 03:26:39 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html:636,Integrability,interface,interface,636,"﻿. SOFA API: sofa::helper::WriteAccessor< T, Enable > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::helper::WriteAccessor< T, Enable > Class Template Reference . #include <WriteAccessor.h>. Inheritance diagram for sofa::helper::WriteAccessor< T, Enable >:. [legend]; Detailed Description; template<class T, class Enable = void>; class sofa::helper::WriteAccessor< T, Enable >; A WriteAccessor is a proxy class, holding a reference to a given container and providing access to its data, using an unified interface (similar to std::vector), hiding API differences within some containers.; Other advantadges of using a WriteAccessor are :. It can be faster that the default methods and operators of the container, as verifications and changes notifications can be handled in the accessor's constructor and destructor instead of at each item access.; Accesses can be logged for debugging or task dependencies analysis. The default implementation provides only minimal set of methods and operators, sufficient for scalar types but which should be overloaded for more complex types. Various template specializations are typically used, especially for core::objectmodel::Data<T> . Protected Attributes; container_type * vref;  . Public Member Functions;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Attribute details. ◆ vref. template<class T , class Enable = void> . container_type* sofa::helper::WriteAccessor< T, Enable >::vref. protected . Constructor details. ◆ WriteAccessor(). template<class T , class Enable = void> . sofa::helper::WriteAccessor< T, Enable >:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html:1025,Integrability,depend,dependencies,1025," sofa::helper::WriteAccessor< T, Enable > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::helper::WriteAccessor< T, Enable > Class Template Reference . #include <WriteAccessor.h>. Inheritance diagram for sofa::helper::WriteAccessor< T, Enable >:. [legend]; Detailed Description; template<class T, class Enable = void>; class sofa::helper::WriteAccessor< T, Enable >; A WriteAccessor is a proxy class, holding a reference to a given container and providing access to its data, using an unified interface (similar to std::vector), hiding API differences within some containers.; Other advantadges of using a WriteAccessor are :. It can be faster that the default methods and operators of the container, as verifications and changes notifications can be handled in the accessor's constructor and destructor instead of at each item access.; Accesses can be logged for debugging or task dependencies analysis. The default implementation provides only minimal set of methods and operators, sufficient for scalar types but which should be overloaded for more complex types. Various template specializations are typically used, especially for core::objectmodel::Data<T> . Protected Attributes; container_type * vref;  . Public Member Functions;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Attribute details. ◆ vref. template<class T , class Enable = void> . container_type* sofa::helper::WriteAccessor< T, Enable >::vref. protected . Constructor details. ◆ WriteAccessor(). template<class T , class Enable = void> . sofa::helper::WriteAccessor< T, Enable >::WriteAccess",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html:323,Modifiability,Inherit,Inheritance,323,"﻿. SOFA API: sofa::helper::WriteAccessor< T, Enable > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::helper::WriteAccessor< T, Enable > Class Template Reference . #include <WriteAccessor.h>. Inheritance diagram for sofa::helper::WriteAccessor< T, Enable >:. [legend]; Detailed Description; template<class T, class Enable = void>; class sofa::helper::WriteAccessor< T, Enable >; A WriteAccessor is a proxy class, holding a reference to a given container and providing access to its data, using an unified interface (similar to std::vector), hiding API differences within some containers.; Other advantadges of using a WriteAccessor are :. It can be faster that the default methods and operators of the container, as verifications and changes notifications can be handled in the accessor's constructor and destructor instead of at each item access.; Accesses can be logged for debugging or task dependencies analysis. The default implementation provides only minimal set of methods and operators, sufficient for scalar types but which should be overloaded for more complex types. Various template specializations are typically used, especially for core::objectmodel::Data<T> . Protected Attributes; container_type * vref;  . Public Member Functions;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Attribute details. ◆ vref. template<class T , class Enable = void> . container_type* sofa::helper::WriteAccessor< T, Enable >::vref. protected . Constructor details. ◆ WriteAccessor(). template<class T , class Enable = void> . sofa::helper::WriteAccessor< T, Enable >:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html:599,Security,access,access,599,"﻿. SOFA API: sofa::helper::WriteAccessor< T, Enable > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::helper::WriteAccessor< T, Enable > Class Template Reference . #include <WriteAccessor.h>. Inheritance diagram for sofa::helper::WriteAccessor< T, Enable >:. [legend]; Detailed Description; template<class T, class Enable = void>; class sofa::helper::WriteAccessor< T, Enable >; A WriteAccessor is a proxy class, holding a reference to a given container and providing access to its data, using an unified interface (similar to std::vector), hiding API differences within some containers.; Other advantadges of using a WriteAccessor are :. It can be faster that the default methods and operators of the container, as verifications and changes notifications can be handled in the accessor's constructor and destructor instead of at each item access.; Accesses can be logged for debugging or task dependencies analysis. The default implementation provides only minimal set of methods and operators, sufficient for scalar types but which should be overloaded for more complex types. Various template specializations are typically used, especially for core::objectmodel::Data<T> . Protected Attributes; container_type * vref;  . Public Member Functions;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Attribute details. ◆ vref. template<class T , class Enable = void> . container_type* sofa::helper::WriteAccessor< T, Enable >::vref. protected . Constructor details. ◆ WriteAccessor(). template<class T , class Enable = void> . sofa::helper::WriteAccessor< T, Enable >:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html:909,Security,access,accessor,909,"﻿. SOFA API: sofa::helper::WriteAccessor< T, Enable > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::helper::WriteAccessor< T, Enable > Class Template Reference . #include <WriteAccessor.h>. Inheritance diagram for sofa::helper::WriteAccessor< T, Enable >:. [legend]; Detailed Description; template<class T, class Enable = void>; class sofa::helper::WriteAccessor< T, Enable >; A WriteAccessor is a proxy class, holding a reference to a given container and providing access to its data, using an unified interface (similar to std::vector), hiding API differences within some containers.; Other advantadges of using a WriteAccessor are :. It can be faster that the default methods and operators of the container, as verifications and changes notifications can be handled in the accessor's constructor and destructor instead of at each item access.; Accesses can be logged for debugging or task dependencies analysis. The default implementation provides only minimal set of methods and operators, sufficient for scalar types but which should be overloaded for more complex types. Various template specializations are typically used, especially for core::objectmodel::Data<T> . Protected Attributes; container_type * vref;  . Public Member Functions;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Attribute details. ◆ vref. template<class T , class Enable = void> . container_type* sofa::helper::WriteAccessor< T, Enable >::vref. protected . Constructor details. ◆ WriteAccessor(). template<class T , class Enable = void> . sofa::helper::WriteAccessor< T, Enable >:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html:971,Security,access,access,971,"﻿. SOFA API: sofa::helper::WriteAccessor< T, Enable > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::helper::WriteAccessor< T, Enable > Class Template Reference . #include <WriteAccessor.h>. Inheritance diagram for sofa::helper::WriteAccessor< T, Enable >:. [legend]; Detailed Description; template<class T, class Enable = void>; class sofa::helper::WriteAccessor< T, Enable >; A WriteAccessor is a proxy class, holding a reference to a given container and providing access to its data, using an unified interface (similar to std::vector), hiding API differences within some containers.; Other advantadges of using a WriteAccessor are :. It can be faster that the default methods and operators of the container, as verifications and changes notifications can be handled in the accessor's constructor and destructor instead of at each item access.; Accesses can be logged for debugging or task dependencies analysis. The default implementation provides only minimal set of methods and operators, sufficient for scalar types but which should be overloaded for more complex types. Various template specializations are typically used, especially for core::objectmodel::Data<T> . Protected Attributes; container_type * vref;  . Public Member Functions;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Attribute details. ◆ vref. template<class T , class Enable = void> . container_type* sofa::helper::WriteAccessor< T, Enable >::vref. protected . Constructor details. ◆ WriteAccessor(). template<class T , class Enable = void> . sofa::helper::WriteAccessor< T, Enable >:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html:980,Security,Access,Accesses,980," sofa::helper::WriteAccessor< T, Enable > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::helper::WriteAccessor< T, Enable > Class Template Reference . #include <WriteAccessor.h>. Inheritance diagram for sofa::helper::WriteAccessor< T, Enable >:. [legend]; Detailed Description; template<class T, class Enable = void>; class sofa::helper::WriteAccessor< T, Enable >; A WriteAccessor is a proxy class, holding a reference to a given container and providing access to its data, using an unified interface (similar to std::vector), hiding API differences within some containers.; Other advantadges of using a WriteAccessor are :. It can be faster that the default methods and operators of the container, as verifications and changes notifications can be handled in the accessor's constructor and destructor instead of at each item access.; Accesses can be logged for debugging or task dependencies analysis. The default implementation provides only minimal set of methods and operators, sufficient for scalar types but which should be overloaded for more complex types. Various template specializations are typically used, especially for core::objectmodel::Data<T> . Protected Attributes; container_type * vref;  . Public Member Functions;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Attribute details. ◆ vref. template<class T , class Enable = void> . container_type* sofa::helper::WriteAccessor< T, Enable >::vref. protected . Constructor details. ◆ WriteAccessor(). template<class T , class Enable = void> . sofa::helper::WriteAccessor< T, Enable >::WriteAccess",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html:996,Testability,log,logged,996," sofa::helper::WriteAccessor< T, Enable > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::helper::WriteAccessor< T, Enable > Class Template Reference . #include <WriteAccessor.h>. Inheritance diagram for sofa::helper::WriteAccessor< T, Enable >:. [legend]; Detailed Description; template<class T, class Enable = void>; class sofa::helper::WriteAccessor< T, Enable >; A WriteAccessor is a proxy class, holding a reference to a given container and providing access to its data, using an unified interface (similar to std::vector), hiding API differences within some containers.; Other advantadges of using a WriteAccessor are :. It can be faster that the default methods and operators of the container, as verifications and changes notifications can be handled in the accessor's constructor and destructor instead of at each item access.; Accesses can be logged for debugging or task dependencies analysis. The default implementation provides only minimal set of methods and operators, sufficient for scalar types but which should be overloaded for more complex types. Various template specializations are typically used, especially for core::objectmodel::Data<T> . Protected Attributes; container_type * vref;  . Public Member Functions;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Attribute details. ◆ vref. template<class T , class Enable = void> . container_type* sofa::helper::WriteAccessor< T, Enable >::vref. protected . Constructor details. ◆ WriteAccessor(). template<class T , class Enable = void> . sofa::helper::WriteAccessor< T, Enable >::WriteAccess",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4-members.html:290,Modifiability,inherit,inherited,290,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::WriteAccessor< core::objectmodel::Data< T > > Member List . This is the complete list of members for sofa::helper::WriteAccessor< core::objectmodel::Data< T > >, including all inherited members. const_pointer typedefsofa::helper::WriteAccessor< T, Enable >; const_reference typedefsofa::helper::WriteAccessor< T, Enable >; container_type typedefsofa::helper::WriteAccessor< core::objectmodel::Data< T > >; datasofa::helper::WriteAccessor< core::objectmodel::Data< T > >protected; data_container_type typedefsofa::helper::WriteAccessor< core::objectmodel::Data< T > >; Inherit typedefsofa::helper::WriteAccessor< core::objectmodel::Data< T > >; operator const_reference() constsofa::helper::WriteAccessor< T, Enable >inline; operator reference()sofa::helper::WriteAccessor< T, Enable >inline; operator*() constsofa::helper::WriteAccessor< T, Enable >inline; operator*()sofa::helper::WriteAccessor< T, Enable >inline; operator->() constsofa::helper::WriteAccessor< T, Enable >inline; operator->()sofa::helper::WriteAccessor< T, Enable >inline; operator=(const WriteAccessor &)=deletesofa::helper::WriteAccessor< core::objectmodel::Data< T > >; sofa::helper::WriteAccessor::operator=(const T2 &v)sofa::helper::WriteAccessor< T, Enable >inline; pointer typedefsofa::helper::WriteAccessor< T, Enable >; ref() constsofa::helper::WriteAccessor< T, Enable >inline; reference typedefsofa::helper::WriteAccessor< T, Enable >; value_type typedefsofa::helper::WriteAccessor< T, Enable >; vrefsofa::helper::WriteAccessor< T, Enable >protected; wref()sofa::helper::WriteAccessor< T, Enable >inline; WriteAccessor(const WriteAccessor &)=deletesofa::helper::WriteAccessor< core::objectmodel::Data< T > >; WriteAccessor(container_type *c, data_container_type &d)sofa::helper::WriteAccessor< core::objectmodel::Data< T > >inlineprotected; WriteAccessor(data_container_type &d)sofa::helper::WriteAccessor< ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4-members.html:682,Modifiability,Inherit,Inherit,682," const_pointer typedefsofa::helper::WriteAccessor< T, Enable >; const_reference typedefsofa::helper::WriteAccessor< T, Enable >; container_type typedefsofa::helper::WriteAccessor< core::objectmodel::Data< T > >; datasofa::helper::WriteAccessor< core::objectmodel::Data< T > >protected; data_container_type typedefsofa::helper::WriteAccessor< core::objectmodel::Data< T > >; Inherit typedefsofa::helper::WriteAccessor< core::objectmodel::Data< T > >; operator const_reference() constsofa::helper::WriteAccessor< T, Enable >inline; operator reference()sofa::helper::WriteAccessor< T, Enable >inline; operator*() constsofa::helper::WriteAccessor< T, Enable >inline; operator*()sofa::helper::WriteAccessor< T, Enable >inline; operator->() constsofa::helper::WriteAccessor< T, Enable >inline; operator->()sofa::helper::WriteAccessor< T, Enable >inline; operator=(const WriteAccessor &)=deletesofa::helper::WriteAccessor< core::objectmodel::Data< T > >; sofa::helper::WriteAccessor::operator=(const T2 &v)sofa::helper::WriteAccessor< T, Enable >inline; pointer typedefsofa::helper::WriteAccessor< T, Enable >; ref() constsofa::helper::WriteAccessor< T, Enable >inline; reference typedefsofa::helper::WriteAccessor< T, Enable >; value_type typedefsofa::helper::WriteAccessor< T, Enable >; vrefsofa::helper::WriteAccessor< T, Enable >protected; wref()sofa::helper::WriteAccessor< T, Enable >inline; WriteAccessor(const WriteAccessor &)=deletesofa::helper::WriteAccessor< core::objectmodel::Data< T > >; WriteAccessor(container_type *c, data_container_type &d)sofa::helper::WriteAccessor< core::objectmodel::Data< T > >inlineprotected; WriteAccessor(data_container_type &d)sofa::helper::WriteAccessor< ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:619,Deployability,update,updated,619,"﻿. SOFA API: sofa::helper::WriteAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::WriteAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>. Inheritance diagram for sofa::helper::WriteAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteAccessor< core::objectmodel::Data< T > >; Read/Write Accessor. The Data is updated before being accessible. This means an expensive chain of Data link and Engine updates can be called For a pure write only Accessor, prefer WriteOnlyAccessor< core::objectmodel::Data<T> > Warningthe Data is updated (if needed) only by the Accessor constructor . Protected Attributes; data_container_type & data;  ;  Protected Attributes inherited from sofa::helper::WriteAccessor< T, Enable >; container_type * vref;  . Public Member Functions;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Protected Member Functions;  WriteAccessor (container_type *c, data_container_type &d);  . Attribute details. ◆ data. template<class T > . data_container_type& sofa::helper::WriteAccessor< core::objectmodel::Data< T > >::data. protected . Constructor details. ◆ WriteAcces",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:706,Deployability,update,updates,706,"﻿. SOFA API: sofa::helper::WriteAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::WriteAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>. Inheritance diagram for sofa::helper::WriteAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteAccessor< core::objectmodel::Data< T > >; Read/Write Accessor. The Data is updated before being accessible. This means an expensive chain of Data link and Engine updates can be called For a pure write only Accessor, prefer WriteOnlyAccessor< core::objectmodel::Data<T> > Warningthe Data is updated (if needed) only by the Accessor constructor . Protected Attributes; data_container_type & data;  ;  Protected Attributes inherited from sofa::helper::WriteAccessor< T, Enable >; container_type * vref;  . Public Member Functions;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Protected Member Functions;  WriteAccessor (container_type *c, data_container_type &d);  . Attribute details. ◆ data. template<class T > . data_container_type& sofa::helper::WriteAccessor< core::objectmodel::Data< T > >::data. protected . Constructor details. ◆ WriteAcces",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:834,Deployability,update,updated,834,"﻿. SOFA API: sofa::helper::WriteAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::WriteAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>. Inheritance diagram for sofa::helper::WriteAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteAccessor< core::objectmodel::Data< T > >; Read/Write Accessor. The Data is updated before being accessible. This means an expensive chain of Data link and Engine updates can be called For a pure write only Accessor, prefer WriteOnlyAccessor< core::objectmodel::Data<T> > Warningthe Data is updated (if needed) only by the Accessor constructor . Protected Attributes; data_container_type & data;  ;  Protected Attributes inherited from sofa::helper::WriteAccessor< T, Enable >; container_type * vref;  . Public Member Functions;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Protected Member Functions;  WriteAccessor (container_type *c, data_container_type &d);  . Attribute details. ◆ data. template<class T > . data_container_type& sofa::helper::WriteAccessor< core::objectmodel::Data< T > >::data. protected . Constructor details. ◆ WriteAcces",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:382,Modifiability,Inherit,Inheritance,382,"﻿. SOFA API: sofa::helper::WriteAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::WriteAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>. Inheritance diagram for sofa::helper::WriteAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteAccessor< core::objectmodel::Data< T > >; Read/Write Accessor. The Data is updated before being accessible. This means an expensive chain of Data link and Engine updates can be called For a pure write only Accessor, prefer WriteOnlyAccessor< core::objectmodel::Data<T> > Warningthe Data is updated (if needed) only by the Accessor constructor . Protected Attributes; data_container_type & data;  ;  Protected Attributes inherited from sofa::helper::WriteAccessor< T, Enable >; container_type * vref;  . Public Member Functions;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Protected Member Functions;  WriteAccessor (container_type *c, data_container_type &d);  . Attribute details. ◆ data. template<class T > . data_container_type& sofa::helper::WriteAccessor< core::objectmodel::Data< T > >::data. protected . Constructor details. ◆ WriteAcces",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:964,Modifiability,inherit,inherited,964,"﻿. SOFA API: sofa::helper::WriteAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::WriteAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>. Inheritance diagram for sofa::helper::WriteAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteAccessor< core::objectmodel::Data< T > >; Read/Write Accessor. The Data is updated before being accessible. This means an expensive chain of Data link and Engine updates can be called For a pure write only Accessor, prefer WriteOnlyAccessor< core::objectmodel::Data<T> > Warningthe Data is updated (if needed) only by the Accessor constructor . Protected Attributes; data_container_type & data;  ;  Protected Attributes inherited from sofa::helper::WriteAccessor< T, Enable >; container_type * vref;  . Public Member Functions;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Protected Member Functions;  WriteAccessor (container_type *c, data_container_type &d);  . Attribute details. ◆ data. template<class T > . data_container_type& sofa::helper::WriteAccessor< core::objectmodel::Data< T > >::data. protected . Constructor details. ◆ WriteAcces",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:1319,Modifiability,inherit,inherited,1319,"itance diagram for sofa::helper::WriteAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteAccessor< core::objectmodel::Data< T > >; Read/Write Accessor. The Data is updated before being accessible. This means an expensive chain of Data link and Engine updates can be called For a pure write only Accessor, prefer WriteOnlyAccessor< core::objectmodel::Data<T> > Warningthe Data is updated (if needed) only by the Accessor constructor . Protected Attributes; data_container_type & data;  ;  Protected Attributes inherited from sofa::helper::WriteAccessor< T, Enable >; container_type * vref;  . Public Member Functions;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Protected Member Functions;  WriteAccessor (container_type *c, data_container_type &d);  . Attribute details. ◆ data. template<class T > . data_container_type& sofa::helper::WriteAccessor< core::objectmodel::Data< T > >::data. protected . Constructor details. ◆ WriteAccessor() [1/4]. template<class T > . sofa::helper::WriteAccessor< core::objectmodel::Data< T > >::WriteAccessor ; (; const WriteAccessor< core::objectmodel::Data< T > > & ; ). delete . ◆ WriteAccessor() [2/4]. template<class T > . sofa::helper::WriteAccessor< core::objectmodel::Data< T > >::WriteAccessor ; (; container_type * ; c, . data_container_type & ; d . ). inlineprotected . ◆ Wri",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:597,Security,Access,Accessor,597,"﻿. SOFA API: sofa::helper::WriteAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::WriteAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>. Inheritance diagram for sofa::helper::WriteAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteAccessor< core::objectmodel::Data< T > >; Read/Write Accessor. The Data is updated before being accessible. This means an expensive chain of Data link and Engine updates can be called For a pure write only Accessor, prefer WriteOnlyAccessor< core::objectmodel::Data<T> > Warningthe Data is updated (if needed) only by the Accessor constructor . Protected Attributes; data_container_type & data;  ;  Protected Attributes inherited from sofa::helper::WriteAccessor< T, Enable >; container_type * vref;  . Public Member Functions;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Protected Member Functions;  WriteAccessor (container_type *c, data_container_type &d);  . Attribute details. ◆ data. template<class T > . data_container_type& sofa::helper::WriteAccessor< core::objectmodel::Data< T > >::data. protected . Constructor details. ◆ WriteAcces",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:640,Security,access,accessible,640,"﻿. SOFA API: sofa::helper::WriteAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::WriteAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>. Inheritance diagram for sofa::helper::WriteAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteAccessor< core::objectmodel::Data< T > >; Read/Write Accessor. The Data is updated before being accessible. This means an expensive chain of Data link and Engine updates can be called For a pure write only Accessor, prefer WriteOnlyAccessor< core::objectmodel::Data<T> > Warningthe Data is updated (if needed) only by the Accessor constructor . Protected Attributes; data_container_type & data;  ;  Protected Attributes inherited from sofa::helper::WriteAccessor< T, Enable >; container_type * vref;  . Public Member Functions;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Protected Member Functions;  WriteAccessor (container_type *c, data_container_type &d);  . Attribute details. ◆ data. template<class T > . data_container_type& sofa::helper::WriteAccessor< core::objectmodel::Data< T > >::data. protected . Constructor details. ◆ WriteAcces",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:750,Security,Access,Accessor,750,"﻿. SOFA API: sofa::helper::WriteAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::WriteAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>. Inheritance diagram for sofa::helper::WriteAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteAccessor< core::objectmodel::Data< T > >; Read/Write Accessor. The Data is updated before being accessible. This means an expensive chain of Data link and Engine updates can be called For a pure write only Accessor, prefer WriteOnlyAccessor< core::objectmodel::Data<T> > Warningthe Data is updated (if needed) only by the Accessor constructor . Protected Attributes; data_container_type & data;  ;  Protected Attributes inherited from sofa::helper::WriteAccessor< T, Enable >; container_type * vref;  . Public Member Functions;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Protected Member Functions;  WriteAccessor (container_type *c, data_container_type &d);  . Attribute details. ◆ data. template<class T > . data_container_type& sofa::helper::WriteAccessor< core::objectmodel::Data< T > >::data. protected . Constructor details. ◆ WriteAcces",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:866,Security,Access,Accessor,866,"﻿. SOFA API: sofa::helper::WriteAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::WriteAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>. Inheritance diagram for sofa::helper::WriteAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteAccessor< core::objectmodel::Data< T > >; Read/Write Accessor. The Data is updated before being accessible. This means an expensive chain of Data link and Engine updates can be called For a pure write only Accessor, prefer WriteOnlyAccessor< core::objectmodel::Data<T> > Warningthe Data is updated (if needed) only by the Accessor constructor . Protected Attributes; data_container_type & data;  ;  Protected Attributes inherited from sofa::helper::WriteAccessor< T, Enable >; container_type * vref;  . Public Member Functions;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Protected Member Functions;  WriteAccessor (container_type *c, data_container_type &d);  . Attribute details. ◆ data. template<class T > . data_container_type& sofa::helper::WriteAccessor< core::objectmodel::Data< T > >::data. protected . Constructor details. ◆ WriteAcces",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html:380,Modifiability,Inherit,Inheritance,380,"﻿. SOFA API: sofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > > Class Template Reference . #include <integer_id.h>. Inheritance diagram for sofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >:. [legend]. Public Member Functions;  WriteAccessor (container_type &c);  ;  Public Member Functions inherited from sofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >;  WriteAccessorVectorId (container_type &container);  ;  ~WriteAccessorVectorId ();  ; const container_type & ref () const;  ; container_type & wref ();  ; bool empty () const;  ; Size size () const;  ; const_reference operator[] (Index i) const;  ; reference operator[] (Index i);  ; const_reference operator() (Index i) const;  ; reference operator() (Index i);  ; const_iterator begin () const;  ; iterator begin ();  ; const_iterator end () const;  ; iterator end ();  ; void clear ();  ; void resize (Size s, bool=true);  ; void reserve (Size s);  ; Index push_back (const_reference v);  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; container_type & vref;  . Constructor details. ◆ WriteAccessor(). template<class T , class TIndex , bool CheckIndices, class MemoryManager > . sofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >::WriteAccessor ; (; container_type & ; c). inline . sofahelperWriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >; Generated on Mon Nov 11 2024 03:30:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html:588,Modifiability,inherit,inherited,588,"﻿. SOFA API: sofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > > Class Template Reference . #include <integer_id.h>. Inheritance diagram for sofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >:. [legend]. Public Member Functions;  WriteAccessor (container_type &c);  ;  Public Member Functions inherited from sofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >;  WriteAccessorVectorId (container_type &container);  ;  ~WriteAccessorVectorId ();  ; const container_type & ref () const;  ; container_type & wref ();  ; bool empty () const;  ; Size size () const;  ; const_reference operator[] (Index i) const;  ; reference operator[] (Index i);  ; const_reference operator() (Index i) const;  ; reference operator() (Index i);  ; const_iterator begin () const;  ; iterator begin ();  ; const_iterator end () const;  ; iterator end ();  ; void clear ();  ; void resize (Size s, bool=true);  ; void reserve (Size s);  ; Index push_back (const_reference v);  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; container_type & vref;  . Constructor details. ◆ WriteAccessor(). template<class T , class TIndex , bool CheckIndices, class MemoryManager > . sofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >::WriteAccessor ; (; container_type & ; c). inline . sofahelperWriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >; Generated on Mon Nov 11 2024 03:30:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html:1300,Modifiability,Inherit,Inherited,1300,"﻿. SOFA API: sofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > > Class Template Reference . #include <integer_id.h>. Inheritance diagram for sofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >:. [legend]. Public Member Functions;  WriteAccessor (container_type &c);  ;  Public Member Functions inherited from sofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >;  WriteAccessorVectorId (container_type &container);  ;  ~WriteAccessorVectorId ();  ; const container_type & ref () const;  ; container_type & wref ();  ; bool empty () const;  ; Size size () const;  ; const_reference operator[] (Index i) const;  ; reference operator[] (Index i);  ; const_reference operator() (Index i) const;  ; reference operator() (Index i);  ; const_iterator begin () const;  ; iterator begin ();  ; const_iterator end () const;  ; iterator end ();  ; void clear ();  ; void resize (Size s, bool=true);  ; void reserve (Size s);  ; Index push_back (const_reference v);  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; container_type & vref;  . Constructor details. ◆ WriteAccessor(). template<class T , class TIndex , bool CheckIndices, class MemoryManager > . sofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >::WriteAccessor ; (; container_type & ; c). inline . sofahelperWriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >; Generated on Mon Nov 11 2024 03:30:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html:1341,Modifiability,inherit,inherited,1341,"﻿. SOFA API: sofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > > Class Template Reference . #include <integer_id.h>. Inheritance diagram for sofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >:. [legend]. Public Member Functions;  WriteAccessor (container_type &c);  ;  Public Member Functions inherited from sofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >;  WriteAccessorVectorId (container_type &container);  ;  ~WriteAccessorVectorId ();  ; const container_type & ref () const;  ; container_type & wref ();  ; bool empty () const;  ; Size size () const;  ; const_reference operator[] (Index i) const;  ; reference operator[] (Index i);  ; const_reference operator() (Index i) const;  ; reference operator() (Index i);  ; const_iterator begin () const;  ; iterator begin ();  ; const_iterator end () const;  ; iterator end ();  ; void clear ();  ; void resize (Size s, bool=true);  ; void reserve (Size s);  ; Index push_back (const_reference v);  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; container_type & vref;  . Constructor details. ◆ WriteAccessor(). template<class T , class TIndex , bool CheckIndices, class MemoryManager > . sofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >::WriteAccessor ; (; container_type & ; c). inline . sofahelperWriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >; Generated on Mon Nov 11 2024 03:30:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html:1174,Usability,clear,clear,1174,"﻿. SOFA API: sofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > > Class Template Reference . #include <integer_id.h>. Inheritance diagram for sofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >:. [legend]. Public Member Functions;  WriteAccessor (container_type &c);  ;  Public Member Functions inherited from sofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >;  WriteAccessorVectorId (container_type &container);  ;  ~WriteAccessorVectorId ();  ; const container_type & ref () const;  ; container_type & wref ();  ; bool empty () const;  ; Size size () const;  ; const_reference operator[] (Index i) const;  ; reference operator[] (Index i);  ; const_reference operator() (Index i) const;  ; reference operator() (Index i);  ; const_iterator begin () const;  ; iterator begin ();  ; const_iterator end () const;  ; iterator end ();  ; void clear ();  ; void resize (Size s, bool=true);  ; void reserve (Size s);  ; Index push_back (const_reference v);  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; container_type & vref;  . Constructor details. ◆ WriteAccessor(). template<class T , class TIndex , bool CheckIndices, class MemoryManager > . sofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >::WriteAccessor ; (; container_type & ; c). inline . sofahelperWriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >; Generated on Mon Nov 11 2024 03:30:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_00_01_memory_manager_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_0a4a7b5a5eb0691d99c49ad8c448db38c.html:336,Modifiability,inherit,inherited,336,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > > Member List . This is the complete list of members for sofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >, including all inherited members. begin() constsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; begin()sofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; clear()sofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; const_iterator typedefsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; const_reference typedefsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; container_type typedefsofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >; empty() constsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; end() constsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; end()sofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; Index typedefsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; Inherit typedefsofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >; iterator typedefsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; operator()(Index i) constsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; operator()(Index i)sofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; operator[](Index i) constsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_0a4a7b5a5eb0691d99c49ad8c448db38c.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_0a4a7b5a5eb0691d99c49ad8c448db38c.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_0a4a7b5a5eb0691d99c49ad8c448db38c.html:1439,Modifiability,Inherit,Inherit,1439,"moryManager > >inline; begin()sofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; clear()sofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; const_iterator typedefsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; const_reference typedefsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; container_type typedefsofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >; empty() constsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; end() constsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; end()sofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; Index typedefsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; Inherit typedefsofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >; iterator typedefsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; operator()(Index i) constsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; operator()(Index i)sofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; operator[](Index i) constsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; operator[](Index i)sofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; push_back(const_reference v)sofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; ref() constsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; reference typedefsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckI",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_0a4a7b5a5eb0691d99c49ad8c448db38c.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_0a4a7b5a5eb0691d99c49ad8c448db38c.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_0a4a7b5a5eb0691d99c49ad8c448db38c.html:571,Usability,clear,clear,571," begin() constsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; begin()sofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; clear()sofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; const_iterator typedefsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; const_reference typedefsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; container_type typedefsofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >; empty() constsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; end() constsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; end()sofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; Index typedefsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; Inherit typedefsofa::helper::WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >; iterator typedefsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >; operator()(Index i) constsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; operator()(Index i)sofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >inline; operator[](Index i) constsofa::helper::WriteAccessorVectorId< vector_id< T, TIndex, CheckIndices, MemoryManager > >",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_0a4a7b5a5eb0691d99c49ad8c448db38c.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01vector__id_3_01_t_00_01_t_index_00_01_check_indices_0a4a7b5a5eb0691d99c49ad8c448db38c.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_6c8aa194fa59fde725aeccee4070f722.html:459,Modifiability,Inherit,Inheritance,459,"﻿. SOFA API: sofa::helper::WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > > Class Template Reference . #include <WriteAccessor.h>. Inheritance diagram for sofa::helper::WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >:. [legend]. Public Member Functions;  WriteAccessor (container_type &c);  ;  Public Member Functions inherited from sofa::helper::WriteAccessorVector< VectorLikeType >;  WriteAccessorVector (container_type &container);  ; bool empty () const;  ; Size size () const;  ; void reserve (Size s);  ; reference operator[] (Size pos);  ; const_reference operator[] (Size pos) const;  ; reference front ();  ; const_reference front () const;  ; reference back ();  ; const_reference back () const;  ; const_iterator begin () const;  ; iterator begin ();  ; const_iterator end () const;  ; iterator end ();  ; void clear ();  ; void resize (Size s);  ; iterator insert (const_iterator pos, const VectorLikeType &value);  ; iterator erase (iterator pos);  ; iterator erase (const_iterator pos);  ; void push_back (const value_type &v);  ; reference emplace_back (Args &&... args);  ; void pop_back ();  ;  operator container_type ();  ; container_type * operator-> ();  ; const_container_type * operator-> () const;  ; container_type & operator* ();  ; const_container_type & operator* () const;  ; container_type & wref ();  ;  operator const_container_type () const;  ; const container_type & ref () const;  this one duplicate operator* More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::WriteAccessorVector< VectorLikeType >; container_type * vref;  . Constructo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_6c8aa194fa59fde725aeccee4070f722.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_6c8aa194fa59fde725aeccee4070f722.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_6c8aa194fa59fde725aeccee4070f722.html:705,Modifiability,inherit,inherited,705,"< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > > Class Template Reference . #include <WriteAccessor.h>. Inheritance diagram for sofa::helper::WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >:. [legend]. Public Member Functions;  WriteAccessor (container_type &c);  ;  Public Member Functions inherited from sofa::helper::WriteAccessorVector< VectorLikeType >;  WriteAccessorVector (container_type &container);  ; bool empty () const;  ; Size size () const;  ; void reserve (Size s);  ; reference operator[] (Size pos);  ; const_reference operator[] (Size pos) const;  ; reference front ();  ; const_reference front () const;  ; reference back ();  ; const_reference back () const;  ; const_iterator begin () const;  ; iterator begin ();  ; const_iterator end () const;  ; iterator end ();  ; void clear ();  ; void resize (Size s);  ; iterator insert (const_iterator pos, const VectorLikeType &value);  ; iterator erase (iterator pos);  ; iterator erase (const_iterator pos);  ; void push_back (const value_type &v);  ; reference emplace_back (Args &&... args);  ; void pop_back ();  ;  operator container_type ();  ; container_type * operator-> ();  ; const_container_type * operator-> () const;  ; container_type & operator* ();  ; const_container_type & operator* () const;  ; container_type & wref ();  ;  operator const_container_type () const;  ; const container_type & ref () const;  this one duplicate operator* More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::WriteAccessorVector< VectorLikeType >; container_type * vref;  . Constructor details. ◆ WriteAccessor(). template<",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_6c8aa194fa59fde725aeccee4070f722.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_6c8aa194fa59fde725aeccee4070f722.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_6c8aa194fa59fde725aeccee4070f722.html:1856,Modifiability,Inherit,Inherited,1856," Reference . #include <WriteAccessor.h>. Inheritance diagram for sofa::helper::WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >:. [legend]. Public Member Functions;  WriteAccessor (container_type &c);  ;  Public Member Functions inherited from sofa::helper::WriteAccessorVector< VectorLikeType >;  WriteAccessorVector (container_type &container);  ; bool empty () const;  ; Size size () const;  ; void reserve (Size s);  ; reference operator[] (Size pos);  ; const_reference operator[] (Size pos) const;  ; reference front ();  ; const_reference front () const;  ; reference back ();  ; const_reference back () const;  ; const_iterator begin () const;  ; iterator begin ();  ; const_iterator end () const;  ; iterator end ();  ; void clear ();  ; void resize (Size s);  ; iterator insert (const_iterator pos, const VectorLikeType &value);  ; iterator erase (iterator pos);  ; iterator erase (const_iterator pos);  ; void push_back (const value_type &v);  ; reference emplace_back (Args &&... args);  ; void pop_back ();  ;  operator container_type ();  ; container_type * operator-> ();  ; const_container_type * operator-> () const;  ; container_type & operator* ();  ; const_container_type & operator* () const;  ; container_type & wref ();  ;  operator const_container_type () const;  ; const container_type & ref () const;  this one duplicate operator* More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::WriteAccessorVector< VectorLikeType >; container_type * vref;  . Constructor details. ◆ WriteAccessor(). template<class VectorLikeType > . sofa::helper::WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >::WriteAccessor ; (; container_type & ; c). inline . sofahelperWriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >; Generated on Mon Nov 11 2024 03:27:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_6c8aa194fa59fde725aeccee4070f722.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_6c8aa194fa59fde725aeccee4070f722.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_6c8aa194fa59fde725aeccee4070f722.html:1897,Modifiability,inherit,inherited,1897," Reference . #include <WriteAccessor.h>. Inheritance diagram for sofa::helper::WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >:. [legend]. Public Member Functions;  WriteAccessor (container_type &c);  ;  Public Member Functions inherited from sofa::helper::WriteAccessorVector< VectorLikeType >;  WriteAccessorVector (container_type &container);  ; bool empty () const;  ; Size size () const;  ; void reserve (Size s);  ; reference operator[] (Size pos);  ; const_reference operator[] (Size pos) const;  ; reference front ();  ; const_reference front () const;  ; reference back ();  ; const_reference back () const;  ; const_iterator begin () const;  ; iterator begin ();  ; const_iterator end () const;  ; iterator end ();  ; void clear ();  ; void resize (Size s);  ; iterator insert (const_iterator pos, const VectorLikeType &value);  ; iterator erase (iterator pos);  ; iterator erase (const_iterator pos);  ; void push_back (const value_type &v);  ; reference emplace_back (Args &&... args);  ; void pop_back ();  ;  operator container_type ();  ; container_type * operator-> ();  ; const_container_type * operator-> () const;  ; container_type & operator* ();  ; const_container_type & operator* () const;  ; container_type & wref ();  ;  operator const_container_type () const;  ; const container_type & ref () const;  this one duplicate operator* More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::WriteAccessorVector< VectorLikeType >; container_type * vref;  . Constructor details. ◆ WriteAccessor(). template<class VectorLikeType > . sofa::helper::WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >::WriteAccessor ; (; container_type & ; c). inline . sofahelperWriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >; Generated on Mon Nov 11 2024 03:27:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_6c8aa194fa59fde725aeccee4070f722.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_6c8aa194fa59fde725aeccee4070f722.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_6c8aa194fa59fde725aeccee4070f722.html:1210,Usability,clear,clear,1210,"< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > > Class Template Reference . #include <WriteAccessor.h>. Inheritance diagram for sofa::helper::WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >:. [legend]. Public Member Functions;  WriteAccessor (container_type &c);  ;  Public Member Functions inherited from sofa::helper::WriteAccessorVector< VectorLikeType >;  WriteAccessorVector (container_type &container);  ; bool empty () const;  ; Size size () const;  ; void reserve (Size s);  ; reference operator[] (Size pos);  ; const_reference operator[] (Size pos) const;  ; reference front ();  ; const_reference front () const;  ; reference back ();  ; const_reference back () const;  ; const_iterator begin () const;  ; iterator begin ();  ; const_iterator end () const;  ; iterator end ();  ; void clear ();  ; void resize (Size s);  ; iterator insert (const_iterator pos, const VectorLikeType &value);  ; iterator erase (iterator pos);  ; iterator erase (const_iterator pos);  ; void push_back (const value_type &v);  ; reference emplace_back (Args &&... args);  ; void pop_back ();  ;  operator container_type ();  ; container_type * operator-> ();  ; const_container_type * operator-> () const;  ; container_type & operator* ();  ; const_container_type & operator* () const;  ; container_type & wref ();  ;  operator const_container_type () const;  ; const container_type & ref () const;  this one duplicate operator* More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::WriteAccessorVector< VectorLikeType >; container_type * vref;  . Constructor details. ◆ WriteAccessor(). template<",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_6c8aa194fa59fde725aeccee4070f722.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_6c8aa194fa59fde725aeccee4070f722.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_6dcf90292ffb456668b7ef670f29264b.html:412,Modifiability,inherit,inherited,412,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > > Member List . This is the complete list of members for sofa::helper::WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >, including all inherited members. back()sofa::helper::WriteAccessorVector< VectorLikeType >inline; back() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; begin() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; begin()sofa::helper::WriteAccessorVector< VectorLikeType >inline; clear()sofa::helper::WriteAccessorVector< VectorLikeType >inline; const_container_type typedefsofa::helper::WriteAccessorVector< VectorLikeType >; const_iterator typedefsofa::helper::WriteAccessorVector< VectorLikeType >; const_reference typedefsofa::helper::WriteAccessorVector< VectorLikeType >; container_type typedefsofa::helper::WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >; emplace_back(Args &&... args)sofa::helper::WriteAccessorVector< VectorLikeType >inline; empty() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; end() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; end()sofa::helper::WriteAccessorVector< VectorLikeType >inline; erase(iterator pos)sofa::helper::WriteAccessorVector< VectorLikeType >inline; erase(const_iterator pos)sofa::helper::WriteAccessorVector< VectorLikeType >inline; front()sofa::helper::WriteAccessorVector< VectorLikeType >inline; front() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; Inherit typedefsofa::helper::WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >; insert(const_iterator pos, const VectorLikeType &value)sofa::helper::WriteAccessorVector< VectorLikeType >inline; iterator ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_6dcf90292ffb456668b7ef670f29264b.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_6dcf90292ffb456668b7ef670f29264b.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_6dcf90292ffb456668b7ef670f29264b.html:1741,Modifiability,Inherit,Inherit,1741," args)sofa::helper::WriteAccessorVector< VectorLikeType >inline; empty() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; end() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; end()sofa::helper::WriteAccessorVector< VectorLikeType >inline; erase(iterator pos)sofa::helper::WriteAccessorVector< VectorLikeType >inline; erase(const_iterator pos)sofa::helper::WriteAccessorVector< VectorLikeType >inline; front()sofa::helper::WriteAccessorVector< VectorLikeType >inline; front() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; Inherit typedefsofa::helper::WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >; insert(const_iterator pos, const VectorLikeType &value)sofa::helper::WriteAccessorVector< VectorLikeType >inline; iterator ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_6dcf90292ffb456668b7ef670f29264b.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_6dcf90292ffb456668b7ef670f29264b.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_6dcf90292ffb456668b7ef670f29264b.html:705,Usability,clear,clear,705,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > > Member List . This is the complete list of members for sofa::helper::WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >, including all inherited members. back()sofa::helper::WriteAccessorVector< VectorLikeType >inline; back() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; begin() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; begin()sofa::helper::WriteAccessorVector< VectorLikeType >inline; clear()sofa::helper::WriteAccessorVector< VectorLikeType >inline; const_container_type typedefsofa::helper::WriteAccessorVector< VectorLikeType >; const_iterator typedefsofa::helper::WriteAccessorVector< VectorLikeType >; const_reference typedefsofa::helper::WriteAccessorVector< VectorLikeType >; container_type typedefsofa::helper::WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >; emplace_back(Args &&... args)sofa::helper::WriteAccessorVector< VectorLikeType >inline; empty() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; end() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; end()sofa::helper::WriteAccessorVector< VectorLikeType >inline; erase(iterator pos)sofa::helper::WriteAccessorVector< VectorLikeType >inline; erase(const_iterator pos)sofa::helper::WriteAccessorVector< VectorLikeType >inline; front()sofa::helper::WriteAccessorVector< VectorLikeType >inline; front() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; Inherit typedefsofa::helper::WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >; insert(const_iterator pos, const VectorLikeType &value)sofa::helper::WriteAccessorVector< VectorLikeType >inline; iterator ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_6dcf90292ffb456668b7ef670f29264b.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_01sofa_6dcf90292ffb456668b7ef670f29264b.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector-members.html:248,Modifiability,inherit,inherited,248,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::WriteAccessorVector< T > Member List . This is the complete list of members for sofa::helper::WriteAccessorVector< T >, including all inherited members. back()sofa::helper::WriteAccessorVector< T >inline; back() constsofa::helper::WriteAccessorVector< T >inline; begin() constsofa::helper::WriteAccessorVector< T >inline; begin()sofa::helper::WriteAccessorVector< T >inline; clear()sofa::helper::WriteAccessorVector< T >inline; const_container_type typedefsofa::helper::WriteAccessorVector< T >; const_iterator typedefsofa::helper::WriteAccessorVector< T >; const_reference typedefsofa::helper::WriteAccessorVector< T >; container_type typedefsofa::helper::WriteAccessorVector< T >; emplace_back(Args &&... args)sofa::helper::WriteAccessorVector< T >inline; empty() constsofa::helper::WriteAccessorVector< T >inline; end() constsofa::helper::WriteAccessorVector< T >inline; end()sofa::helper::WriteAccessorVector< T >inline; erase(iterator pos)sofa::helper::WriteAccessorVector< T >inline; erase(const_iterator pos)sofa::helper::WriteAccessorVector< T >inline; front()sofa::helper::WriteAccessorVector< T >inline; front() constsofa::helper::WriteAccessorVector< T >inline; insert(const_iterator pos, const T &value)sofa::helper::WriteAccessorVector< T >inline; iterator typedefsofa::helper::WriteAccessorVector< T >; operator const_container_type() constsofa::helper::WriteAccessorVector< T >inline; operator container_type()sofa::helper::WriteAccessorVector< T >inline; operator*()sofa::helper::WriteAccessorVector< T >inline; operator*() constsofa::helper::WriteAccessorVector< T >inline; operator->()sofa::helper::WriteAccessorVector< T >inline; operator->() constsofa::helper::WriteAccessorVector< T >inline; operator[](Size pos)sofa::helper::WriteAccessorVector< T >inline; operator[](Size pos) constsofa::helper::WriteAccessorVector< T >inline; pop_back()sofa::helper::WriteAccesso",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector-members.html:489,Usability,clear,clear,489,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::WriteAccessorVector< T > Member List . This is the complete list of members for sofa::helper::WriteAccessorVector< T >, including all inherited members. back()sofa::helper::WriteAccessorVector< T >inline; back() constsofa::helper::WriteAccessorVector< T >inline; begin() constsofa::helper::WriteAccessorVector< T >inline; begin()sofa::helper::WriteAccessorVector< T >inline; clear()sofa::helper::WriteAccessorVector< T >inline; const_container_type typedefsofa::helper::WriteAccessorVector< T >; const_iterator typedefsofa::helper::WriteAccessorVector< T >; const_reference typedefsofa::helper::WriteAccessorVector< T >; container_type typedefsofa::helper::WriteAccessorVector< T >; emplace_back(Args &&... args)sofa::helper::WriteAccessorVector< T >inline; empty() constsofa::helper::WriteAccessorVector< T >inline; end() constsofa::helper::WriteAccessorVector< T >inline; end()sofa::helper::WriteAccessorVector< T >inline; erase(iterator pos)sofa::helper::WriteAccessorVector< T >inline; erase(const_iterator pos)sofa::helper::WriteAccessorVector< T >inline; front()sofa::helper::WriteAccessorVector< T >inline; front() constsofa::helper::WriteAccessorVector< T >inline; insert(const_iterator pos, const T &value)sofa::helper::WriteAccessorVector< T >inline; iterator typedefsofa::helper::WriteAccessorVector< T >; operator const_container_type() constsofa::helper::WriteAccessorVector< T >inline; operator container_type()sofa::helper::WriteAccessorVector< T >inline; operator*()sofa::helper::WriteAccessorVector< T >inline; operator*() constsofa::helper::WriteAccessorVector< T >inline; operator->()sofa::helper::WriteAccessorVector< T >inline; operator->() constsofa::helper::WriteAccessorVector< T >inline; operator[](Size pos)sofa::helper::WriteAccessorVector< T >inline; operator[](Size pos) constsofa::helper::WriteAccessorVector< T >inline; pop_back()sofa::helper::WriteAccesso",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector.html:388,Modifiability,Inherit,Inheritance,388,"﻿. SOFA API: sofa::helper::WriteAccessorVector< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::helper::WriteAccessorVector< T > Class Template Reference . #include <WriteAccessorVector.h>; WriteAccessor implementation class for vector types. ; More... Inheritance diagram for sofa::helper::WriteAccessorVector< T >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteAccessorVector< T >; WriteAccessor implementation class for vector types. . Protected Attributes; container_type * vref;  . Public Member Functions;  WriteAccessorVector (container_type &container);  ; bool empty () const;  ; Size size () const;  ; void reserve (Size s);  ; reference operator[] (Size pos);  ; const_reference operator[] (Size pos) const;  ; reference front ();  ; const_reference front () const;  ; reference back ();  ; const_reference back () const;  ; const_iterator begin () const;  ; iterator begin ();  ; const_iterator end () const;  ; iterator end ();  ; void clear ();  ; void resize (Size s);  ; iterator insert (const_iterator pos, const T &value);  ; iterator erase (iterator pos);  ; iterator erase (const_iterator pos);  ; void push_back (const value_type &v);  ; template<class... Args> ; reference emplace_back (Args &&... args);  ; void pop_back ();  ;  operator container_type ();  ; container_type * operator-> ();  ; container_type & operator* ();  ; container_type & wref ();  ;  operator const_container_type () const;  ; const_container_type * operator-> () const;  ; const_container_type & operator* () const;  ; const container_type & ref () const;  this one duplicate operator* More...;  . Attribute details. ◆ vref. template<class T > . container_type* sofa::helper::WriteAccessorVector< T >::vref. protected . Constructor details. ◆ WriteAccessorVector(). template<class T > . sofa::helper::WriteAccessorVector< T >::WriteAcce",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector.html:1115,Usability,clear,clear,1115,"﻿. SOFA API: sofa::helper::WriteAccessorVector< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::helper::WriteAccessorVector< T > Class Template Reference . #include <WriteAccessorVector.h>; WriteAccessor implementation class for vector types. ; More... Inheritance diagram for sofa::helper::WriteAccessorVector< T >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteAccessorVector< T >; WriteAccessor implementation class for vector types. . Protected Attributes; container_type * vref;  . Public Member Functions;  WriteAccessorVector (container_type &container);  ; bool empty () const;  ; Size size () const;  ; void reserve (Size s);  ; reference operator[] (Size pos);  ; const_reference operator[] (Size pos) const;  ; reference front ();  ; const_reference front () const;  ; reference back ();  ; const_reference back () const;  ; const_iterator begin () const;  ; iterator begin ();  ; const_iterator end () const;  ; iterator end ();  ; void clear ();  ; void resize (Size s);  ; iterator insert (const_iterator pos, const T &value);  ; iterator erase (iterator pos);  ; iterator erase (const_iterator pos);  ; void push_back (const value_type &v);  ; template<class... Args> ; reference emplace_back (Args &&... args);  ; void pop_back ();  ;  operator container_type ();  ; container_type * operator-> ();  ; container_type & operator* ();  ; container_type & wref ();  ;  operator const_container_type () const;  ; const_container_type * operator-> () const;  ; const_container_type & operator* () const;  ; const container_type & ref () const;  this one duplicate operator* More...;  . Attribute details. ◆ vref. template<class T > . container_type* sofa::helper::WriteAccessorVector< T >::vref. protected . Constructor details. ◆ WriteAccessorVector(). template<class T > . sofa::helper::WriteAccessorVector< T >::WriteAcce",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector.html:2541,Usability,clear,clear,2541,  ;  operator const_container_type () const;  ; const_container_type * operator-> () const;  ; const_container_type & operator* () const;  ; const container_type & ref () const;  this one duplicate operator* More...;  . Attribute details. ◆ vref. template<class T > . container_type* sofa::helper::WriteAccessorVector< T >::vref. protected . Constructor details. ◆ WriteAccessorVector(). template<class T > . sofa::helper::WriteAccessorVector< T >::WriteAccessorVector ; (; container_type & ; container). inline . Function details. ◆ back() [1/2]. template<class T > . reference sofa::helper::WriteAccessorVector< T >::back ; (; ). inline . ◆ back() [2/2]. template<class T > . const_reference sofa::helper::WriteAccessorVector< T >::back ; (; ); const. inline . ◆ begin() [1/2]. template<class T > . iterator sofa::helper::WriteAccessorVector< T >::begin ; (; ). inline . ◆ begin() [2/2]. template<class T > . const_iterator sofa::helper::WriteAccessorVector< T >::begin ; (; ); const. inline . ◆ clear(). template<class T > . void sofa::helper::WriteAccessorVector< T >::clear ; (; ). inline . ◆ emplace_back(). template<class T > . template<class... Args> . reference sofa::helper::WriteAccessorVector< T >::emplace_back ; (; Args &&... ; args). inline . ◆ empty(). template<class T > . bool sofa::helper::WriteAccessorVector< T >::empty ; (; ); const. inline . ◆ end() [1/2]. template<class T > . iterator sofa::helper::WriteAccessorVector< T >::end ; (; ). inline . ◆ end() [2/2]. template<class T > . const_iterator sofa::helper::WriteAccessorVector< T >::end ; (; ); const. inline . ◆ erase() [1/2]. template<class T > . iterator sofa::helper::WriteAccessorVector< T >::erase ; (; const_iterator ; pos). inline . ◆ erase() [2/2]. template<class T > . iterator sofa::helper::WriteAccessorVector< T >::erase ; (; iterator ; pos). inline . ◆ front() [1/2]. template<class T > . reference sofa::helper::WriteAccessorVector< T >::front ; (; ). inline . ◆ front() [2/2]. template<class T > . const_re,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector.html:2616,Usability,clear,clear,2616,ntainer_type * operator-> () const;  ; const_container_type & operator* () const;  ; const container_type & ref () const;  this one duplicate operator* More...;  . Attribute details. ◆ vref. template<class T > . container_type* sofa::helper::WriteAccessorVector< T >::vref. protected . Constructor details. ◆ WriteAccessorVector(). template<class T > . sofa::helper::WriteAccessorVector< T >::WriteAccessorVector ; (; container_type & ; container). inline . Function details. ◆ back() [1/2]. template<class T > . reference sofa::helper::WriteAccessorVector< T >::back ; (; ). inline . ◆ back() [2/2]. template<class T > . const_reference sofa::helper::WriteAccessorVector< T >::back ; (; ); const. inline . ◆ begin() [1/2]. template<class T > . iterator sofa::helper::WriteAccessorVector< T >::begin ; (; ). inline . ◆ begin() [2/2]. template<class T > . const_iterator sofa::helper::WriteAccessorVector< T >::begin ; (; ); const. inline . ◆ clear(). template<class T > . void sofa::helper::WriteAccessorVector< T >::clear ; (; ). inline . ◆ emplace_back(). template<class T > . template<class... Args> . reference sofa::helper::WriteAccessorVector< T >::emplace_back ; (; Args &&... ; args). inline . ◆ empty(). template<class T > . bool sofa::helper::WriteAccessorVector< T >::empty ; (; ); const. inline . ◆ end() [1/2]. template<class T > . iterator sofa::helper::WriteAccessorVector< T >::end ; (; ). inline . ◆ end() [2/2]. template<class T > . const_iterator sofa::helper::WriteAccessorVector< T >::end ; (; ); const. inline . ◆ erase() [1/2]. template<class T > . iterator sofa::helper::WriteAccessorVector< T >::erase ; (; const_iterator ; pos). inline . ◆ erase() [2/2]. template<class T > . iterator sofa::helper::WriteAccessorVector< T >::erase ; (; iterator ; pos). inline . ◆ front() [1/2]. template<class T > . reference sofa::helper::WriteAccessorVector< T >::front ; (; ). inline . ◆ front() [2/2]. template<class T > . const_reference sofa::helper::WriteAccessorVector< T >::front ; ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector_id-members.html:252,Modifiability,inherit,inherited,252,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::WriteAccessorVectorId< T > Member List . This is the complete list of members for sofa::helper::WriteAccessorVectorId< T >, including all inherited members. begin() constsofa::helper::WriteAccessorVectorId< T >inline; begin()sofa::helper::WriteAccessorVectorId< T >inline; clear()sofa::helper::WriteAccessorVectorId< T >inline; const_iterator typedefsofa::helper::WriteAccessorVectorId< T >; const_reference typedefsofa::helper::WriteAccessorVectorId< T >; container_type typedefsofa::helper::WriteAccessorVectorId< T >; empty() constsofa::helper::WriteAccessorVectorId< T >inline; end() constsofa::helper::WriteAccessorVectorId< T >inline; end()sofa::helper::WriteAccessorVectorId< T >inline; Index typedefsofa::helper::WriteAccessorVectorId< T >; iterator typedefsofa::helper::WriteAccessorVectorId< T >; operator()(Index i) constsofa::helper::WriteAccessorVectorId< T >inline; operator()(Index i)sofa::helper::WriteAccessorVectorId< T >inline; operator<<(std::ostream &os, const WriteAccessorVectorId< T > &vec)sofa::helper::WriteAccessorVectorId< T >friend; operator>>(std::istream &in, WriteAccessorVectorId< T > &vec)sofa::helper::WriteAccessorVectorId< T >friend; operator[](Index i) constsofa::helper::WriteAccessorVectorId< T >inline; operator[](Index i)sofa::helper::WriteAccessorVectorId< T >inline; push_back(const_reference v)sofa::helper::WriteAccessorVectorId< T >inline; ref() constsofa::helper::WriteAccessorVectorId< T >inline; reference typedefsofa::helper::WriteAccessorVectorId< T >; reserve(Size s)sofa::helper::WriteAccessorVectorId< T >inline; resize(Size s, bool=true)sofa::helper::WriteAccessorVectorId< T >inline; size() constsofa::helper::WriteAccessorVectorId< T >inline; Size typedefsofa::helper::WriteAccessorVectorId< T >; value_type typedefsofa::helper::WriteAccessorVectorId< T >; vrefsofa::helper::WriteAccessorVectorId< T >protected; wref()sofa::helpe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector_id-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector_id-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector_id-members.html:387,Usability,clear,clear,387," including all inherited members. begin() constsofa::helper::WriteAccessorVectorId< T >inline; begin()sofa::helper::WriteAccessorVectorId< T >inline; clear()sofa::helper::WriteAccessorVectorId< T >inline; const_iterator typedefsofa::helper::WriteAccessorVectorId< T >; const_reference typedefsofa::helper::WriteAccessorVectorId< T >; container_type typedefsofa::helper::WriteAccessorVectorId< T >; empty() constsofa::helper::WriteAccessorVectorId< T >inline; end() constsofa::helper::WriteAccessorVectorId< T >inline; end()sofa::helper::WriteAccessorVectorId< T >inline; Index typedefsofa::helper::WriteAccessorVectorId< T >; iterator typedefsofa::helper::WriteAccessorVectorId< T >; operator()(Index i) constsofa::helper::WriteAccessorVectorId< T >inline; operator()(Index i)sofa::helper::WriteAccessorVectorId< T >inline; operator<<(std::ostream &os, const WriteAccessorVectorId< T > &vec)sofa::helper::WriteAccessorVectorId< T >friend; operator>>(std::istream &in, WriteAccessorVectorId< T > &vec)sofa::helper::WriteAccessorVectorId< T >friend; operator[](Index i) constsofa::helper::WriteAccessorVectorId< T >inline; operator[](Index i)sofa::helper::WriteAccessorVectorId< T >inline; push_back(const_reference v)sofa::helper::WriteAccessorVectorId< T >inline; ref() constsofa::helper::WriteAccessorVectorId< T >inline; reference typedefsofa::helper::WriteAccessorVectorId< T >; reserve(Size s)sofa::helper::WriteAccessorVectorId< T >inline; resize(Size s, bool=true)sofa::helper::WriteAccessorVectorId< T >inline; size() constsofa::helper::WriteAccessorVectorId< T >inline; Size typedefsofa::helper::WriteAccessorVectorId< T >; value_type typedefsofa::helper::WriteAccessorVectorId< T >; vrefsofa::helper::WriteAccessorVectorId< T >protected; wref()sofa::helper::WriteAccessorVectorId< T >inline; WriteAccessorVectorId(container_type &container)sofa::helper::WriteAccessorVectorId< T >inline; ~WriteAccessorVectorId()sofa::helper::WriteAccessorVectorId< T >inline. Generated on Mon Nov 11 2024 03:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector_id-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector_id-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector_id.html:397,Modifiability,Inherit,Inheritance,397,"﻿. SOFA API: sofa::helper::WriteAccessorVectorId< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Friends |; List of all members . sofa::helper::WriteAccessorVectorId< T > Class Template Reference . #include <integer_id.h>; WriteAccessor implementation class for vector_id types. ; More... Inheritance diagram for sofa::helper::WriteAccessorVectorId< T >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteAccessorVectorId< T >; WriteAccessor implementation class for vector_id types. . Protected Attributes; container_type & vref;  . Public Member Functions;  WriteAccessorVectorId (container_type &container);  ;  ~WriteAccessorVectorId ();  ; const container_type & ref () const;  ; container_type & wref ();  ; bool empty () const;  ; Size size () const;  ; const_reference operator[] (Index i) const;  ; const_reference operator() (Index i) const;  ; reference operator[] (Index i);  ; reference operator() (Index i);  ; const_iterator begin () const;  ; iterator begin ();  ; const_iterator end () const;  ; iterator end ();  ; void clear ();  ; void resize (Size s, bool=true);  ; void reserve (Size s);  ; Index push_back (const_reference v);  . Friends; std::ostream & operator<< (std::ostream &os, const WriteAccessorVectorId< T > &vec);  ; std::istream & operator>> (std::istream &in, WriteAccessorVectorId< T > &vec);  . Attribute details. ◆ vref. template<class T > . container_type& sofa::helper::WriteAccessorVectorId< T >::vref. protected . Constructor details. ◆ WriteAccessorVectorId(). template<class T > . sofa::helper::WriteAccessorVectorId< T >::WriteAccessorVectorId ; (; container_type & ; container). inline . ◆ ~WriteAccessorVectorId(). template<class T > . sofa::helper::WriteAccessorVectorId< T >::~WriteAccessorVectorId ; (; ). inline . Function details. ◆ begin() [1/2]. template<class T > . iterator sofa::helper::WriteAccessorVectorId<",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector_id.html:1173,Usability,clear,clear,1173,"﻿. SOFA API: sofa::helper::WriteAccessorVectorId< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Friends |; List of all members . sofa::helper::WriteAccessorVectorId< T > Class Template Reference . #include <integer_id.h>; WriteAccessor implementation class for vector_id types. ; More... Inheritance diagram for sofa::helper::WriteAccessorVectorId< T >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteAccessorVectorId< T >; WriteAccessor implementation class for vector_id types. . Protected Attributes; container_type & vref;  . Public Member Functions;  WriteAccessorVectorId (container_type &container);  ;  ~WriteAccessorVectorId ();  ; const container_type & ref () const;  ; container_type & wref ();  ; bool empty () const;  ; Size size () const;  ; const_reference operator[] (Index i) const;  ; const_reference operator() (Index i) const;  ; reference operator[] (Index i);  ; reference operator() (Index i);  ; const_iterator begin () const;  ; iterator begin ();  ; const_iterator end () const;  ; iterator end ();  ; void clear ();  ; void resize (Size s, bool=true);  ; void reserve (Size s);  ; Index push_back (const_reference v);  . Friends; std::ostream & operator<< (std::ostream &os, const WriteAccessorVectorId< T > &vec);  ; std::istream & operator>> (std::istream &in, WriteAccessorVectorId< T > &vec);  . Attribute details. ◆ vref. template<class T > . container_type& sofa::helper::WriteAccessorVectorId< T >::vref. protected . Constructor details. ◆ WriteAccessorVectorId(). template<class T > . sofa::helper::WriteAccessorVectorId< T >::WriteAccessorVectorId ; (; container_type & ; container). inline . ◆ ~WriteAccessorVectorId(). template<class T > . sofa::helper::WriteAccessorVectorId< T >::~WriteAccessorVectorId ; (; ). inline . Function details. ◆ begin() [1/2]. template<class T > . iterator sofa::helper::WriteAccessorVectorId<",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector_id.html:2157,Usability,clear,clear,2157,"d ();  ; void clear ();  ; void resize (Size s, bool=true);  ; void reserve (Size s);  ; Index push_back (const_reference v);  . Friends; std::ostream & operator<< (std::ostream &os, const WriteAccessorVectorId< T > &vec);  ; std::istream & operator>> (std::istream &in, WriteAccessorVectorId< T > &vec);  . Attribute details. ◆ vref. template<class T > . container_type& sofa::helper::WriteAccessorVectorId< T >::vref. protected . Constructor details. ◆ WriteAccessorVectorId(). template<class T > . sofa::helper::WriteAccessorVectorId< T >::WriteAccessorVectorId ; (; container_type & ; container). inline . ◆ ~WriteAccessorVectorId(). template<class T > . sofa::helper::WriteAccessorVectorId< T >::~WriteAccessorVectorId ; (; ). inline . Function details. ◆ begin() [1/2]. template<class T > . iterator sofa::helper::WriteAccessorVectorId< T >::begin ; (; ). inline . ◆ begin() [2/2]. template<class T > . const_iterator sofa::helper::WriteAccessorVectorId< T >::begin ; (; ); const. inline . ◆ clear(). template<class T > . void sofa::helper::WriteAccessorVectorId< T >::clear ; (; ). inline . ◆ empty(). template<class T > . bool sofa::helper::WriteAccessorVectorId< T >::empty ; (; ); const. inline . ◆ end() [1/2]. template<class T > . iterator sofa::helper::WriteAccessorVectorId< T >::end ; (; ). inline . ◆ end() [2/2]. template<class T > . const_iterator sofa::helper::WriteAccessorVectorId< T >::end ; (; ); const. inline . ◆ operator()() [1/2]. template<class T > . reference sofa::helper::WriteAccessorVectorId< T >::operator() ; (; Index ; i). inline . ◆ operator()() [2/2]. template<class T > . const_reference sofa::helper::WriteAccessorVectorId< T >::operator() ; (; Index ; i); const. inline . ◆ operator[]() [1/2]. template<class T > . reference sofa::helper::WriteAccessorVectorId< T >::operator[] ; (; Index ; i). inline . ◆ operator[]() [2/2]. template<class T > . const_reference sofa::helper::WriteAccessorVectorId< T >::operator[] ; (; Index ; i); const. inline . ◆ push_back",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector_id.html:2234,Usability,clear,clear,2234,");  ; void reserve (Size s);  ; Index push_back (const_reference v);  . Friends; std::ostream & operator<< (std::ostream &os, const WriteAccessorVectorId< T > &vec);  ; std::istream & operator>> (std::istream &in, WriteAccessorVectorId< T > &vec);  . Attribute details. ◆ vref. template<class T > . container_type& sofa::helper::WriteAccessorVectorId< T >::vref. protected . Constructor details. ◆ WriteAccessorVectorId(). template<class T > . sofa::helper::WriteAccessorVectorId< T >::WriteAccessorVectorId ; (; container_type & ; container). inline . ◆ ~WriteAccessorVectorId(). template<class T > . sofa::helper::WriteAccessorVectorId< T >::~WriteAccessorVectorId ; (; ). inline . Function details. ◆ begin() [1/2]. template<class T > . iterator sofa::helper::WriteAccessorVectorId< T >::begin ; (; ). inline . ◆ begin() [2/2]. template<class T > . const_iterator sofa::helper::WriteAccessorVectorId< T >::begin ; (; ); const. inline . ◆ clear(). template<class T > . void sofa::helper::WriteAccessorVectorId< T >::clear ; (; ). inline . ◆ empty(). template<class T > . bool sofa::helper::WriteAccessorVectorId< T >::empty ; (; ); const. inline . ◆ end() [1/2]. template<class T > . iterator sofa::helper::WriteAccessorVectorId< T >::end ; (; ). inline . ◆ end() [2/2]. template<class T > . const_iterator sofa::helper::WriteAccessorVectorId< T >::end ; (; ); const. inline . ◆ operator()() [1/2]. template<class T > . reference sofa::helper::WriteAccessorVectorId< T >::operator() ; (; Index ; i). inline . ◆ operator()() [2/2]. template<class T > . const_reference sofa::helper::WriteAccessorVectorId< T >::operator() ; (; Index ; i); const. inline . ◆ operator[]() [1/2]. template<class T > . reference sofa::helper::WriteAccessorVectorId< T >::operator[] ; (; Index ; i). inline . ◆ operator[]() [2/2]. template<class T > . const_reference sofa::helper::WriteAccessorVectorId< T >::operator[] ; (; Index ; i); const. inline . ◆ push_back(). template<class T > . Index sofa::helper::WriteAccesso",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector_id.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_vector_id.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor-members.html:260,Modifiability,inherit,inherited,260,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::WriteOnlyAccessor< T, Enable > Member List . This is the complete list of members for sofa::helper::WriteOnlyAccessor< T, Enable >, including all inherited members. const_pointer typedefsofa::helper::WriteAccessor< T, void >; const_reference typedefsofa::helper::WriteAccessor< T, void >; container_type typedefsofa::helper::WriteOnlyAccessor< T, Enable >protected; Inherit typedefsofa::helper::WriteOnlyAccessor< T, Enable >protected; operator const_reference() constsofa::helper::WriteAccessor< T, void >inline; operator reference()sofa::helper::WriteAccessor< T, void >inline; operator*() constsofa::helper::WriteAccessor< T, void >inline; operator*()sofa::helper::WriteAccessor< T, void >inline; operator->() constsofa::helper::WriteAccessor< T, void >inline; operator->()sofa::helper::WriteAccessor< T, void >inline; operator=(const T2 &v)sofa::helper::WriteAccessor< T, void >inline; pointer typedefsofa::helper::WriteAccessor< T, void >; ref() constsofa::helper::WriteAccessor< T, void >inline; reference typedefsofa::helper::WriteAccessor< T, void >; value_type typedefsofa::helper::WriteAccessor< T, void >; vrefsofa::helper::WriteAccessor< T, void >protected; wref()sofa::helper::WriteAccessor< T, void >inline; WriteAccessor(container_type &container)sofa::helper::WriteAccessor< T, void >inlineexplicit; WriteOnlyAccessor(container_type &container)sofa::helper::WriteOnlyAccessor< T, Enable >inlineexplicit. Generated on Mon Nov 11 2024 03:27:31 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor-members.html:480,Modifiability,Inherit,Inherit,480,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::WriteOnlyAccessor< T, Enable > Member List . This is the complete list of members for sofa::helper::WriteOnlyAccessor< T, Enable >, including all inherited members. const_pointer typedefsofa::helper::WriteAccessor< T, void >; const_reference typedefsofa::helper::WriteAccessor< T, void >; container_type typedefsofa::helper::WriteOnlyAccessor< T, Enable >protected; Inherit typedefsofa::helper::WriteOnlyAccessor< T, Enable >protected; operator const_reference() constsofa::helper::WriteAccessor< T, void >inline; operator reference()sofa::helper::WriteAccessor< T, void >inline; operator*() constsofa::helper::WriteAccessor< T, void >inline; operator*()sofa::helper::WriteAccessor< T, void >inline; operator->() constsofa::helper::WriteAccessor< T, void >inline; operator->()sofa::helper::WriteAccessor< T, void >inline; operator=(const T2 &v)sofa::helper::WriteAccessor< T, void >inline; pointer typedefsofa::helper::WriteAccessor< T, void >; ref() constsofa::helper::WriteAccessor< T, void >inline; reference typedefsofa::helper::WriteAccessor< T, void >; value_type typedefsofa::helper::WriteAccessor< T, void >; vrefsofa::helper::WriteAccessor< T, void >protected; wref()sofa::helper::WriteAccessor< T, void >inline; WriteAccessor(container_type &container)sofa::helper::WriteAccessor< T, void >inlineexplicit; WriteOnlyAccessor(container_type &container)sofa::helper::WriteOnlyAccessor< T, Enable >inlineexplicit. Generated on Mon Nov 11 2024 03:27:31 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor.html:311,Modifiability,Inherit,Inheritance,311,"﻿. SOFA API: sofa::helper::WriteOnlyAccessor< T, Enable > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteOnlyAccessor< T, Enable > Class Template Reference . #include <WriteOnlyAccessor.h>. Inheritance diagram for sofa::helper::WriteOnlyAccessor< T, Enable >:. [legend]; Detailed Description; template<class T, class Enable = void>; class sofa::helper::WriteOnlyAccessor< T, Enable >; Identical to WriteAccessor for default implementation, but different for some template specializations such as core::objectmodel::Data<T> . Public Member Functions;  WriteOnlyAccessor (container_type &container);  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, void >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; pointer operator-> ();  ; const_reference operator* () const;  ; reference operator* ();  ;  operator reference ();  ; void operator= (const T2 &v);  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::WriteAccessor< T, void >; container_type * vref;  . Constructor details. ◆ WriteOnlyAccessor(). template<class T , class Enable = void> . sofa::helper::WriteOnlyAccessor< T, Enable >::WriteOnlyAccessor ; (; container_type & ; container). inlineexplicit . sofahelperWriteOnlyAccessor; Generated on Mon Nov 11 2024 03:27:31 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor.html:747,Modifiability,inherit,inherited,747,"﻿. SOFA API: sofa::helper::WriteOnlyAccessor< T, Enable > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteOnlyAccessor< T, Enable > Class Template Reference . #include <WriteOnlyAccessor.h>. Inheritance diagram for sofa::helper::WriteOnlyAccessor< T, Enable >:. [legend]; Detailed Description; template<class T, class Enable = void>; class sofa::helper::WriteOnlyAccessor< T, Enable >; Identical to WriteAccessor for default implementation, but different for some template specializations such as core::objectmodel::Data<T> . Public Member Functions;  WriteOnlyAccessor (container_type &container);  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, void >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; pointer operator-> ();  ; const_reference operator* () const;  ; reference operator* ();  ;  operator reference ();  ; void operator= (const T2 &v);  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::WriteAccessor< T, void >; container_type * vref;  . Constructor details. ◆ WriteOnlyAccessor(). template<class T , class Enable = void> . sofa::helper::WriteOnlyAccessor< T, Enable >::WriteOnlyAccessor ; (; container_type & ; container). inlineexplicit . sofahelperWriteOnlyAccessor; Generated on Mon Nov 11 2024 03:27:31 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor.html:1144,Modifiability,Inherit,Inherited,1144,"﻿. SOFA API: sofa::helper::WriteOnlyAccessor< T, Enable > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteOnlyAccessor< T, Enable > Class Template Reference . #include <WriteOnlyAccessor.h>. Inheritance diagram for sofa::helper::WriteOnlyAccessor< T, Enable >:. [legend]; Detailed Description; template<class T, class Enable = void>; class sofa::helper::WriteOnlyAccessor< T, Enable >; Identical to WriteAccessor for default implementation, but different for some template specializations such as core::objectmodel::Data<T> . Public Member Functions;  WriteOnlyAccessor (container_type &container);  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, void >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; pointer operator-> ();  ; const_reference operator* () const;  ; reference operator* ();  ;  operator reference ();  ; void operator= (const T2 &v);  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::WriteAccessor< T, void >; container_type * vref;  . Constructor details. ◆ WriteOnlyAccessor(). template<class T , class Enable = void> . sofa::helper::WriteOnlyAccessor< T, Enable >::WriteOnlyAccessor ; (; container_type & ; container). inlineexplicit . sofahelperWriteOnlyAccessor; Generated on Mon Nov 11 2024 03:27:31 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor.html:1185,Modifiability,inherit,inherited,1185,"﻿. SOFA API: sofa::helper::WriteOnlyAccessor< T, Enable > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteOnlyAccessor< T, Enable > Class Template Reference . #include <WriteOnlyAccessor.h>. Inheritance diagram for sofa::helper::WriteOnlyAccessor< T, Enable >:. [legend]; Detailed Description; template<class T, class Enable = void>; class sofa::helper::WriteOnlyAccessor< T, Enable >; Identical to WriteAccessor for default implementation, but different for some template specializations such as core::objectmodel::Data<T> . Public Member Functions;  WriteOnlyAccessor (container_type &container);  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, void >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; pointer operator-> ();  ; const_reference operator* () const;  ; reference operator* ();  ;  operator reference ();  ; void operator= (const T2 &v);  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::WriteAccessor< T, void >; container_type * vref;  . Constructor details. ◆ WriteOnlyAccessor(). template<class T , class Enable = void> . sofa::helper::WriteOnlyAccessor< T, Enable >::WriteOnlyAccessor ; (; container_type & ; container). inlineexplicit . sofahelperWriteOnlyAccessor; Generated on Mon Nov 11 2024 03:27:31 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4-members.html:298,Modifiability,inherit,inherited,298,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > > Member List . This is the complete list of members for sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >, including all inherited members. const_pointer typedefsofa::helper::WriteAccessor< T, Enable >; const_reference typedefsofa::helper::WriteAccessor< T, Enable >; container_type typedefsofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >; datasofa::helper::WriteAccessor< core::objectmodel::Data< T > >protected; data_container_type typedefsofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >; Inherit typedefsofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >; operator const_reference() constsofa::helper::WriteAccessor< T, Enable >inline; operator reference()sofa::helper::WriteAccessor< T, Enable >inline; operator*() constsofa::helper::WriteAccessor< T, Enable >inline; operator*()sofa::helper::WriteAccessor< T, Enable >inline; operator->() constsofa::helper::WriteAccessor< T, Enable >inline; operator->()sofa::helper::WriteAccessor< T, Enable >inline; operator=(const WriteOnlyAccessor &)=deletesofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >; sofa::helper::WriteAccessor< core::objectmodel::Data< T > >::operator=(const WriteAccessor &)=deletesofa::helper::WriteAccessor< core::objectmodel::Data< T > >; sofa::helper::WriteAccessor::operator=(const T2 &v)sofa::helper::WriteAccessor< T, Enable >inline; pointer typedefsofa::helper::WriteAccessor< T, Enable >; ref() constsofa::helper::WriteAccessor< T, Enable >inline; reference typedefsofa::helper::WriteAccessor< T, Enable >; value_type typedefsofa::helper::WriteAccessor< T, Enable >; vrefsofa::helper::WriteAccessor< T, Enable >protected; wref()sofa::helper::WriteAccessor< T, Enable >inline; WriteAccessor(const WriteAccessor &)=deletesofa::helper::WriteAccessor< core::objectmodel::Data< T > >; WriteAcce",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4-members.html:698,Modifiability,Inherit,Inherit,698," const_pointer typedefsofa::helper::WriteAccessor< T, Enable >; const_reference typedefsofa::helper::WriteAccessor< T, Enable >; container_type typedefsofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >; datasofa::helper::WriteAccessor< core::objectmodel::Data< T > >protected; data_container_type typedefsofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >; Inherit typedefsofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >; operator const_reference() constsofa::helper::WriteAccessor< T, Enable >inline; operator reference()sofa::helper::WriteAccessor< T, Enable >inline; operator*() constsofa::helper::WriteAccessor< T, Enable >inline; operator*()sofa::helper::WriteAccessor< T, Enable >inline; operator->() constsofa::helper::WriteAccessor< T, Enable >inline; operator->()sofa::helper::WriteAccessor< T, Enable >inline; operator=(const WriteOnlyAccessor &)=deletesofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >; sofa::helper::WriteAccessor< core::objectmodel::Data< T > >::operator=(const WriteAccessor &)=deletesofa::helper::WriteAccessor< core::objectmodel::Data< T > >; sofa::helper::WriteAccessor::operator=(const T2 &v)sofa::helper::WriteAccessor< T, Enable >inline; pointer typedefsofa::helper::WriteAccessor< T, Enable >; ref() constsofa::helper::WriteAccessor< T, Enable >inline; reference typedefsofa::helper::WriteAccessor< T, Enable >; value_type typedefsofa::helper::WriteAccessor< T, Enable >; vrefsofa::helper::WriteAccessor< T, Enable >protected; wref()sofa::helper::WriteAccessor< T, Enable >inline; WriteAccessor(const WriteAccessor &)=deletesofa::helper::WriteAccessor< core::objectmodel::Data< T > >; WriteAcce",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:418,Deployability,update,update,418,"﻿. SOFA API: sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; More... Inheritance diagram for sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; Warningread access to the Data is NOT up-to-date . Public Member Functions;  WriteOnlyAccessor (const WriteOnlyAccessor &)=delete;  ; WriteOnlyAccessor & operator= (const WriteOnlyAccessor &)=delete;  ;  WriteOnlyAccessor (data_container_type &d);  ;  WriteOnlyAccessor (data_container_type *d);  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:521,Deployability,update,updates,521,"﻿. SOFA API: sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; More... Inheritance diagram for sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; Warningread access to the Data is NOT up-to-date . Public Member Functions;  WriteOnlyAccessor (const WriteOnlyAccessor &)=delete;  ; WriteOnlyAccessor & operator= (const WriteOnlyAccessor &)=delete;  ;  WriteOnlyAccessor (data_container_type &d);  ;  WriteOnlyAccessor (data_container_type *d);  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:834,Deployability,update,update,834,"﻿. SOFA API: sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; More... Inheritance diagram for sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; Warningread access to the Data is NOT up-to-date . Public Member Functions;  WriteOnlyAccessor (const WriteOnlyAccessor &)=delete;  ; WriteOnlyAccessor & operator= (const WriteOnlyAccessor &)=delete;  ;  WriteOnlyAccessor (data_container_type &d);  ;  WriteOnlyAccessor (data_container_type *d);  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:937,Deployability,update,updates,937,"﻿. SOFA API: sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; More... Inheritance diagram for sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; Warningread access to the Data is NOT up-to-date . Public Member Functions;  WriteOnlyAccessor (const WriteOnlyAccessor &)=delete;  ; WriteOnlyAccessor & operator= (const WriteOnlyAccessor &)=delete;  ;  WriteOnlyAccessor (data_container_type &d);  ;  WriteOnlyAccessor (data_container_type *d);  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:540,Modifiability,Inherit,Inheritance,540,"﻿. SOFA API: sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; More... Inheritance diagram for sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; Warningread access to the Data is NOT up-to-date . Public Member Functions;  WriteOnlyAccessor (const WriteOnlyAccessor &)=delete;  ; WriteOnlyAccessor & operator= (const WriteOnlyAccessor &)=delete;  ;  WriteOnlyAccessor (data_container_type &d);  ;  WriteOnlyAccessor (data_container_type *d);  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:1272,Modifiability,inherit,inherited,1272,"ds unnecessary Data updates. ; More... Inheritance diagram for sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; Warningread access to the Data is NOT up-to-date . Public Member Functions;  WriteOnlyAccessor (const WriteOnlyAccessor &)=delete;  ; WriteOnlyAccessor & operator= (const WriteOnlyAccessor &)=delete;  ;  WriteOnlyAccessor (data_container_type &d);  ;  WriteOnlyAccessor (data_container_type *d);  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >; data_container_type & data;  ;  Protected Attributes inherited from sofa::helper::WriteAccessor< T, Enable >; container_type * vref;  ;  Protected Member Functions inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >;  WriteAccessor (container_type *c, data_container_type &d);  . Constructor details. ◆ WriteOnlyAccessor() [1/3]. template<class ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:1595,Modifiability,inherit,inherited,1595,"ds unnecessary Data updates. ; More... Inheritance diagram for sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; Warningread access to the Data is NOT up-to-date . Public Member Functions;  WriteOnlyAccessor (const WriteOnlyAccessor &)=delete;  ; WriteOnlyAccessor & operator= (const WriteOnlyAccessor &)=delete;  ;  WriteOnlyAccessor (data_container_type &d);  ;  WriteOnlyAccessor (data_container_type *d);  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >; data_container_type & data;  ;  Protected Attributes inherited from sofa::helper::WriteAccessor< T, Enable >; container_type * vref;  ;  Protected Member Functions inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >;  WriteAccessor (container_type *c, data_container_type &d);  . Constructor details. ◆ WriteOnlyAccessor() [1/3]. template<class ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:2016,Modifiability,Inherit,Inherited,2016,"data_container_type *d);  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >; data_container_type & data;  ;  Protected Attributes inherited from sofa::helper::WriteAccessor< T, Enable >; container_type * vref;  ;  Protected Member Functions inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >;  WriteAccessor (container_type *c, data_container_type &d);  . Constructor details. ◆ WriteOnlyAccessor() [1/3]. template<class T > . sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >::WriteOnlyAccessor ; (; const WriteOnlyAccessor< core::objectmodel::Data< T > > & ; ). delete . ◆ WriteOnlyAccessor() [2/3]. template<class T > . sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >::WriteOnlyAccessor ; (; data_container_type & ; d). inline . ◆ WriteOnlyAccessor() [3/3]. template<class T > . sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >::WriteOnlyAccessor ; (; data_container_type * ; d). inline . Function details. ◆ operator=(). template<class T > . WriteOnlyAccessor& sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >::operator= ; (; const WriteOnlyAccessor< core::objectmodel::Data< ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:2057,Modifiability,inherit,inherited,2057,"data_container_type *d);  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >; data_container_type & data;  ;  Protected Attributes inherited from sofa::helper::WriteAccessor< T, Enable >; container_type * vref;  ;  Protected Member Functions inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >;  WriteAccessor (container_type *c, data_container_type &d);  . Constructor details. ◆ WriteOnlyAccessor() [1/3]. template<class T > . sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >::WriteOnlyAccessor ; (; const WriteOnlyAccessor< core::objectmodel::Data< T > > & ; ). delete . ◆ WriteOnlyAccessor() [2/3]. template<class T > . sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >::WriteOnlyAccessor ; (; data_container_type & ; d). inline . ◆ WriteOnlyAccessor() [3/3]. template<class T > . sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >::WriteOnlyAccessor ; (; data_container_type * ; d). inline . Function details. ◆ operator=(). template<class T > . WriteOnlyAccessor& sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >::operator= ; (; const WriteOnlyAccessor< core::objectmodel::Data< ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:2186,Modifiability,inherit,inherited,2186,"data_container_type *d);  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >; data_container_type & data;  ;  Protected Attributes inherited from sofa::helper::WriteAccessor< T, Enable >; container_type * vref;  ;  Protected Member Functions inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >;  WriteAccessor (container_type *c, data_container_type &d);  . Constructor details. ◆ WriteOnlyAccessor() [1/3]. template<class T > . sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >::WriteOnlyAccessor ; (; const WriteOnlyAccessor< core::objectmodel::Data< T > > & ; ). delete . ◆ WriteOnlyAccessor() [2/3]. template<class T > . sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >::WriteOnlyAccessor ; (; data_container_type & ; d). inline . ◆ WriteOnlyAccessor() [3/3]. template<class T > . sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >::WriteOnlyAccessor ; (; data_container_type * ; d). inline . Function details. ◆ operator=(). template<class T > . WriteOnlyAccessor& sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >::operator= ; (; const WriteOnlyAccessor< core::objectmodel::Data< ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:2297,Modifiability,inherit,inherited,2297,"data_container_type *d);  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >; data_container_type & data;  ;  Protected Attributes inherited from sofa::helper::WriteAccessor< T, Enable >; container_type * vref;  ;  Protected Member Functions inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >;  WriteAccessor (container_type *c, data_container_type &d);  . Constructor details. ◆ WriteOnlyAccessor() [1/3]. template<class T > . sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >::WriteOnlyAccessor ; (; const WriteOnlyAccessor< core::objectmodel::Data< T > > & ; ). delete . ◆ WriteOnlyAccessor() [2/3]. template<class T > . sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >::WriteOnlyAccessor ; (; data_container_type & ; d). inline . ◆ WriteOnlyAccessor() [3/3]. template<class T > . sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >::WriteOnlyAccessor ; (; data_container_type * ; d). inline . Function details. ◆ operator=(). template<class T > . WriteOnlyAccessor& sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >::operator= ; (; const WriteOnlyAccessor< core::objectmodel::Data< ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:497,Safety,avoid,avoids,497,"﻿. SOFA API: sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; More... Inheritance diagram for sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; Warningread access to the Data is NOT up-to-date . Public Member Functions;  WriteOnlyAccessor (const WriteOnlyAccessor &)=delete;  ; WriteOnlyAccessor & operator= (const WriteOnlyAccessor &)=delete;  ;  WriteOnlyAccessor (data_container_type &d);  ;  WriteOnlyAccessor (data_container_type *d);  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:913,Safety,avoid,avoids,913,"﻿. SOFA API: sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; More... Inheritance diagram for sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; Warningread access to the Data is NOT up-to-date . Public Member Functions;  WriteOnlyAccessor (const WriteOnlyAccessor &)=delete;  ; WriteOnlyAccessor & operator= (const WriteOnlyAccessor &)=delete;  ;  WriteOnlyAccessor (data_container_type &d);  ;  WriteOnlyAccessor (data_container_type *d);  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:370,Security,access,access,370,"﻿. SOFA API: sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; More... Inheritance diagram for sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; Warningread access to the Data is NOT up-to-date . Public Member Functions;  WriteOnlyAccessor (const WriteOnlyAccessor &)=delete;  ; WriteOnlyAccessor & operator= (const WriteOnlyAccessor &)=delete;  ;  WriteOnlyAccessor (data_container_type &d);  ;  WriteOnlyAccessor (data_container_type *d);  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:786,Security,access,access,786,"﻿. SOFA API: sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; More... Inheritance diagram for sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; Warningread access to the Data is NOT up-to-date . Public Member Functions;  WriteOnlyAccessor (const WriteOnlyAccessor &)=delete;  ; WriteOnlyAccessor & operator= (const WriteOnlyAccessor &)=delete;  ;  WriteOnlyAccessor (data_container_type &d);  ;  WriteOnlyAccessor (data_container_type *d);  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:960,Security,access,access,960,"﻿. SOFA API: sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; More... Inheritance diagram for sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; Warningread access to the Data is NOT up-to-date . Public Member Functions;  WriteOnlyAccessor (const WriteOnlyAccessor &)=delete;  ; WriteOnlyAccessor & operator= (const WriteOnlyAccessor &)=delete;  ;  WriteOnlyAccessor (data_container_type &d);  ;  WriteOnlyAccessor (data_container_type *d);  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_011420d37b4786f4786be62ecee28766b4.html:420,Modifiability,inherit,inherited,420,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > > Member List . This is the complete list of members for sofa::helper::WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >, including all inherited members. back()sofa::helper::WriteAccessorVector< VectorLikeType >inline; back() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; begin() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; begin()sofa::helper::WriteAccessorVector< VectorLikeType >inline; clear()sofa::helper::WriteAccessorVector< VectorLikeType >inline; const_container_type typedefsofa::helper::WriteAccessorVector< VectorLikeType >; const_iterator typedefsofa::helper::WriteAccessorVector< VectorLikeType >; const_reference typedefsofa::helper::WriteAccessorVector< VectorLikeType >; container_type typedefsofa::helper::WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >; emplace_back(Args &&... args)sofa::helper::WriteAccessorVector< VectorLikeType >inline; empty() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; end() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; end()sofa::helper::WriteAccessorVector< VectorLikeType >inline; erase(iterator pos)sofa::helper::WriteAccessorVector< VectorLikeType >inline; erase(const_iterator pos)sofa::helper::WriteAccessorVector< VectorLikeType >inline; front()sofa::helper::WriteAccessorVector< VectorLikeType >inline; front() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; Inherit typedefsofa::helper::WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >; insert(const_iterator pos, const VectorLikeType &value)sofa::helper::WriteAccessorVector< VectorLikeType >i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_011420d37b4786f4786be62ecee28766b4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_011420d37b4786f4786be62ecee28766b4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_011420d37b4786f4786be62ecee28766b4.html:1753,Modifiability,Inherit,Inherit,1753," args)sofa::helper::WriteAccessorVector< VectorLikeType >inline; empty() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; end() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; end()sofa::helper::WriteAccessorVector< VectorLikeType >inline; erase(iterator pos)sofa::helper::WriteAccessorVector< VectorLikeType >inline; erase(const_iterator pos)sofa::helper::WriteAccessorVector< VectorLikeType >inline; front()sofa::helper::WriteAccessorVector< VectorLikeType >inline; front() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; Inherit typedefsofa::helper::WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >; insert(const_iterator pos, const VectorLikeType &value)sofa::helper::WriteAccessorVector< VectorLikeType >i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_011420d37b4786f4786be62ecee28766b4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_011420d37b4786f4786be62ecee28766b4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_011420d37b4786f4786be62ecee28766b4.html:713,Usability,clear,clear,713,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > > Member List . This is the complete list of members for sofa::helper::WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >, including all inherited members. back()sofa::helper::WriteAccessorVector< VectorLikeType >inline; back() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; begin() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; begin()sofa::helper::WriteAccessorVector< VectorLikeType >inline; clear()sofa::helper::WriteAccessorVector< VectorLikeType >inline; const_container_type typedefsofa::helper::WriteAccessorVector< VectorLikeType >; const_iterator typedefsofa::helper::WriteAccessorVector< VectorLikeType >; const_reference typedefsofa::helper::WriteAccessorVector< VectorLikeType >; container_type typedefsofa::helper::WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >; emplace_back(Args &&... args)sofa::helper::WriteAccessorVector< VectorLikeType >inline; empty() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; end() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; end()sofa::helper::WriteAccessorVector< VectorLikeType >inline; erase(iterator pos)sofa::helper::WriteAccessorVector< VectorLikeType >inline; erase(const_iterator pos)sofa::helper::WriteAccessorVector< VectorLikeType >inline; front()sofa::helper::WriteAccessorVector< VectorLikeType >inline; front() constsofa::helper::WriteAccessorVector< VectorLikeType >inline; Inherit typedefsofa::helper::WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >; insert(const_iterator pos, const VectorLikeType &value)sofa::helper::WriteAccessorVector< VectorLikeType >i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_011420d37b4786f4786be62ecee28766b4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_011420d37b4786f4786be62ecee28766b4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_0182c0cdde284d988a289939f4832128c2.html:471,Modifiability,Inherit,Inheritance,471,"﻿. SOFA API: sofa::helper::WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > > Class Template Reference . #include <WriteOnlyAccessor.h>. Inheritance diagram for sofa::helper::WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >:. [legend]. Public Member Functions;  WriteOnlyAccessor (container_type &c);  ;  Public Member Functions inherited from sofa::helper::WriteAccessorVector< VectorLikeType >;  WriteAccessorVector (container_type &container);  ; bool empty () const;  ; Size size () const;  ; void reserve (Size s);  ; reference operator[] (Size pos);  ; const_reference operator[] (Size pos) const;  ; reference front ();  ; const_reference front () const;  ; reference back ();  ; const_reference back () const;  ; const_iterator begin () const;  ; iterator begin ();  ; const_iterator end () const;  ; iterator end ();  ; void clear ();  ; void resize (Size s);  ; iterator insert (const_iterator pos, const VectorLikeType &value);  ; iterator erase (iterator pos);  ; iterator erase (const_iterator pos);  ; void push_back (const value_type &v);  ; reference emplace_back (Args &&... args);  ; void pop_back ();  ;  operator container_type ();  ; container_type * operator-> ();  ; const_container_type * operator-> () const;  ; container_type & operator* ();  ; const_container_type & operator* () const;  ; container_type & wref ();  ;  operator const_container_type () const;  ; const container_type & ref () const;  this one duplicate operator* More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::WriteAccessorVector< VectorLikeType >; container_type *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_0182c0cdde284d988a289939f4832128c2.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_0182c0cdde284d988a289939f4832128c2.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_0182c0cdde284d988a289939f4832128c2.html:725,Modifiability,inherit,inherited,725,"pe, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > > Class Template Reference . #include <WriteOnlyAccessor.h>. Inheritance diagram for sofa::helper::WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >:. [legend]. Public Member Functions;  WriteOnlyAccessor (container_type &c);  ;  Public Member Functions inherited from sofa::helper::WriteAccessorVector< VectorLikeType >;  WriteAccessorVector (container_type &container);  ; bool empty () const;  ; Size size () const;  ; void reserve (Size s);  ; reference operator[] (Size pos);  ; const_reference operator[] (Size pos) const;  ; reference front ();  ; const_reference front () const;  ; reference back ();  ; const_reference back () const;  ; const_iterator begin () const;  ; iterator begin ();  ; const_iterator end () const;  ; iterator end ();  ; void clear ();  ; void resize (Size s);  ; iterator insert (const_iterator pos, const VectorLikeType &value);  ; iterator erase (iterator pos);  ; iterator erase (const_iterator pos);  ; void push_back (const value_type &v);  ; reference emplace_back (Args &&... args);  ; void pop_back ();  ;  operator container_type ();  ; container_type * operator-> ();  ; const_container_type * operator-> () const;  ; container_type & operator* ();  ; const_container_type & operator* () const;  ; container_type & wref ();  ;  operator const_container_type () const;  ; const container_type & ref () const;  this one duplicate operator* More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::WriteAccessorVector< VectorLikeType >; container_type * vref;  . Constructor details. ◆ WriteOnlyAccessor(). tem",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_0182c0cdde284d988a289939f4832128c2.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_0182c0cdde284d988a289939f4832128c2.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_0182c0cdde284d988a289939f4832128c2.html:1876,Modifiability,Inherit,Inherited,1876,"OnlyAccessor.h>. Inheritance diagram for sofa::helper::WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >:. [legend]. Public Member Functions;  WriteOnlyAccessor (container_type &c);  ;  Public Member Functions inherited from sofa::helper::WriteAccessorVector< VectorLikeType >;  WriteAccessorVector (container_type &container);  ; bool empty () const;  ; Size size () const;  ; void reserve (Size s);  ; reference operator[] (Size pos);  ; const_reference operator[] (Size pos) const;  ; reference front ();  ; const_reference front () const;  ; reference back ();  ; const_reference back () const;  ; const_iterator begin () const;  ; iterator begin ();  ; const_iterator end () const;  ; iterator end ();  ; void clear ();  ; void resize (Size s);  ; iterator insert (const_iterator pos, const VectorLikeType &value);  ; iterator erase (iterator pos);  ; iterator erase (const_iterator pos);  ; void push_back (const value_type &v);  ; reference emplace_back (Args &&... args);  ; void pop_back ();  ;  operator container_type ();  ; container_type * operator-> ();  ; const_container_type * operator-> () const;  ; container_type & operator* ();  ; const_container_type & operator* () const;  ; container_type & wref ();  ;  operator const_container_type () const;  ; const container_type & ref () const;  this one duplicate operator* More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::WriteAccessorVector< VectorLikeType >; container_type * vref;  . Constructor details. ◆ WriteOnlyAccessor(). template<class VectorLikeType > . sofa::helper::WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >::WriteOnlyAccessor ; (; container_type & ; c). inline . sofahelperWriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >; Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_0182c0cdde284d988a289939f4832128c2.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_0182c0cdde284d988a289939f4832128c2.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_0182c0cdde284d988a289939f4832128c2.html:1917,Modifiability,inherit,inherited,1917,"OnlyAccessor.h>. Inheritance diagram for sofa::helper::WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >:. [legend]. Public Member Functions;  WriteOnlyAccessor (container_type &c);  ;  Public Member Functions inherited from sofa::helper::WriteAccessorVector< VectorLikeType >;  WriteAccessorVector (container_type &container);  ; bool empty () const;  ; Size size () const;  ; void reserve (Size s);  ; reference operator[] (Size pos);  ; const_reference operator[] (Size pos) const;  ; reference front ();  ; const_reference front () const;  ; reference back ();  ; const_reference back () const;  ; const_iterator begin () const;  ; iterator begin ();  ; const_iterator end () const;  ; iterator end ();  ; void clear ();  ; void resize (Size s);  ; iterator insert (const_iterator pos, const VectorLikeType &value);  ; iterator erase (iterator pos);  ; iterator erase (const_iterator pos);  ; void push_back (const value_type &v);  ; reference emplace_back (Args &&... args);  ; void pop_back ();  ;  operator container_type ();  ; container_type * operator-> ();  ; const_container_type * operator-> () const;  ; container_type & operator* ();  ; const_container_type & operator* () const;  ; container_type & wref ();  ;  operator const_container_type () const;  ; const container_type & ref () const;  this one duplicate operator* More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::WriteAccessorVector< VectorLikeType >; container_type * vref;  . Constructor details. ◆ WriteOnlyAccessor(). template<class VectorLikeType > . sofa::helper::WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >::WriteOnlyAccessor ; (; container_type & ; c). inline . sofahelperWriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >; Generated on Mon Nov 11 2024 03:27:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_0182c0cdde284d988a289939f4832128c2.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_0182c0cdde284d988a289939f4832128c2.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_0182c0cdde284d988a289939f4832128c2.html:1230,Usability,clear,clear,1230,"pe, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > > Class Template Reference . #include <WriteOnlyAccessor.h>. Inheritance diagram for sofa::helper::WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >:. [legend]. Public Member Functions;  WriteOnlyAccessor (container_type &c);  ;  Public Member Functions inherited from sofa::helper::WriteAccessorVector< VectorLikeType >;  WriteAccessorVector (container_type &container);  ; bool empty () const;  ; Size size () const;  ; void reserve (Size s);  ; reference operator[] (Size pos);  ; const_reference operator[] (Size pos) const;  ; reference front ();  ; const_reference front () const;  ; reference back ();  ; const_reference back () const;  ; const_iterator begin () const;  ; iterator begin ();  ; const_iterator end () const;  ; iterator end ();  ; void clear ();  ; void resize (Size s);  ; iterator insert (const_iterator pos, const VectorLikeType &value);  ; iterator erase (iterator pos);  ; iterator erase (const_iterator pos);  ; void push_back (const value_type &v);  ; reference emplace_back (Args &&... args);  ; void pop_back ();  ;  operator container_type ();  ; container_type * operator-> ();  ; const_container_type * operator-> () const;  ; container_type & operator* ();  ; const_container_type & operator* () const;  ; container_type & wref ();  ;  operator const_container_type () const;  ; const container_type & ref () const;  this one duplicate operator* More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::WriteAccessorVector< VectorLikeType >; container_type * vref;  . Constructor details. ◆ WriteOnlyAccessor(). tem",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_0182c0cdde284d988a289939f4832128c2.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01_vector_like_type_00_01std_1_1enable__if__t_3_0182c0cdde284d988a289939f4832128c2.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1bloc__index__func-members.html:262,Modifiability,inherit,inherited,262,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::bloc_index_func< TN, T > Member List . This is the complete list of members for sofa::linearalgebra::bloc_index_func< TN, T >, including all inherited members. N enum valuesofa::linearalgebra::bloc_index_func< TN, T >; split(T &index, T &modulo)sofa::linearalgebra::bloc_index_func< TN, T >inlinestatic. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1bloc__index__func-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1bloc__index__func-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits-members.html:282,Modifiability,inherit,inherited,282,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::matrix_bloc_traits< T, IndexType > Member List . This is the complete list of members for sofa::linearalgebra::matrix_bloc_traits< T, IndexType >, including all inherited members. Block typedefsofa::linearalgebra::matrix_bloc_traits< T, IndexType >; BlockTranspose typedefsofa::linearalgebra::matrix_bloc_traits< T, IndexType >; clear(Block &b)sofa::linearalgebra::matrix_bloc_traits< T, IndexType >inlinestatic; empty(const Block &b)sofa::linearalgebra::matrix_bloc_traits< T, IndexType >inlinestatic; getElementType()sofa::linearalgebra::matrix_bloc_traits< T, IndexType >inlinestatic; invert(Block &result, const Block &b)sofa::linearalgebra::matrix_bloc_traits< T, IndexType >inlinestatic; NC enum valuesofa::linearalgebra::matrix_bloc_traits< T, IndexType >; NL enum valuesofa::linearalgebra::matrix_bloc_traits< T, IndexType >; Real typedefsofa::linearalgebra::matrix_bloc_traits< T, IndexType >; split_col_index(IndexType &index, IndexType &modulo)sofa::linearalgebra::matrix_bloc_traits< T, IndexType >inlinestatic; split_row_index(IndexType &index, IndexType &modulo)sofa::linearalgebra::matrix_bloc_traits< T, IndexType >inlinestatic; subBlock(const Block &b, IndexType row, IndexType col, TSubBlock &subBlock)sofa::linearalgebra::matrix_bloc_traits< T, IndexType >inlinestatic; v(Block &b, IndexType row, IndexType col)sofa::linearalgebra::matrix_bloc_traits< T, IndexType >inlinestatic; v(const Block &b, IndexType row, IndexType col)sofa::linearalgebra::matrix_bloc_traits< T, IndexType >inlinestatic; vadd(Block &b, int row, int col, Real val)sofa::linearalgebra::matrix_bloc_traits< T, IndexType >inlinestatic; vset(Block &b, int row, int col, Real val)sofa::linearalgebra::matrix_bloc_traits< T, IndexType >inlinestatic. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits-members.html:450,Usability,clear,clear,450,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::matrix_bloc_traits< T, IndexType > Member List . This is the complete list of members for sofa::linearalgebra::matrix_bloc_traits< T, IndexType >, including all inherited members. Block typedefsofa::linearalgebra::matrix_bloc_traits< T, IndexType >; BlockTranspose typedefsofa::linearalgebra::matrix_bloc_traits< T, IndexType >; clear(Block &b)sofa::linearalgebra::matrix_bloc_traits< T, IndexType >inlinestatic; empty(const Block &b)sofa::linearalgebra::matrix_bloc_traits< T, IndexType >inlinestatic; getElementType()sofa::linearalgebra::matrix_bloc_traits< T, IndexType >inlinestatic; invert(Block &result, const Block &b)sofa::linearalgebra::matrix_bloc_traits< T, IndexType >inlinestatic; NC enum valuesofa::linearalgebra::matrix_bloc_traits< T, IndexType >; NL enum valuesofa::linearalgebra::matrix_bloc_traits< T, IndexType >; Real typedefsofa::linearalgebra::matrix_bloc_traits< T, IndexType >; split_col_index(IndexType &index, IndexType &modulo)sofa::linearalgebra::matrix_bloc_traits< T, IndexType >inlinestatic; split_row_index(IndexType &index, IndexType &modulo)sofa::linearalgebra::matrix_bloc_traits< T, IndexType >inlinestatic; subBlock(const Block &b, IndexType row, IndexType col, TSubBlock &subBlock)sofa::linearalgebra::matrix_bloc_traits< T, IndexType >inlinestatic; v(Block &b, IndexType row, IndexType col)sofa::linearalgebra::matrix_bloc_traits< T, IndexType >inlinestatic; v(const Block &b, IndexType row, IndexType col)sofa::linearalgebra::matrix_bloc_traits< T, IndexType >inlinestatic; vadd(Block &b, int row, int col, Real val)sofa::linearalgebra::matrix_bloc_traits< T, IndexType >inlinestatic; vset(Block &b, int row, int col, Real val)sofa::linearalgebra::matrix_bloc_traits< T, IndexType >inlinestatic. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits.html:639,Usability,clear,clear,639,"﻿. SOFA API: sofa::linearalgebra::matrix_bloc_traits< T, IndexType > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::linearalgebra::matrix_bloc_traits< T, IndexType > Class Template Reference . #include <matrix_bloc_traits.h>. Static Public Member Functions; static Real & v (Block &b, IndexType row, IndexType col);  ; static const Real & v (const Block &b, IndexType row, IndexType col);  ; static void vset (Block &b, int row, int col, Real val);  ; static void vadd (Block &b, int row, int col, Real val);  ; static void clear (Block &b);  ; static bool empty (const Block &b);  ; static void invert (Block &result, const Block &b);  ; static void split_row_index (IndexType &index, IndexType &modulo);  ; static void split_col_index (IndexType &index, IndexType &modulo);  ; template<class TSubBlock > ; static void subBlock (const Block &b, IndexType row, IndexType col, TSubBlock &subBlock);  ; static sofa::linearalgebra::BaseMatrix::ElementType getElementType ();  . Function details. ◆ clear(). template<class T , typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< T, IndexType >::clear ; (; Block & ; b). inlinestatic . ◆ empty(). template<class T , typename IndexType > . static bool sofa::linearalgebra::matrix_bloc_traits< T, IndexType >::empty ; (; const Block & ; b). inlinestatic . ◆ getElementType(). template<class T , typename IndexType > . static sofa::linearalgebra::BaseMatrix::ElementType sofa::linearalgebra::matrix_bloc_traits< T, IndexType >::getElementType ; (; ). inlinestatic . ◆ invert(). template<class T , typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< T, IndexType >::invert ; (; Block & ; result, . const Block & ; b . ). inlinestatic . ◆ split_col_index(). template<class T , typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< T, IndexType >::split_col_index ; (; IndexTyp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits.html:1110,Usability,clear,clear,1110,"9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::linearalgebra::matrix_bloc_traits< T, IndexType > Class Template Reference . #include <matrix_bloc_traits.h>. Static Public Member Functions; static Real & v (Block &b, IndexType row, IndexType col);  ; static const Real & v (const Block &b, IndexType row, IndexType col);  ; static void vset (Block &b, int row, int col, Real val);  ; static void vadd (Block &b, int row, int col, Real val);  ; static void clear (Block &b);  ; static bool empty (const Block &b);  ; static void invert (Block &result, const Block &b);  ; static void split_row_index (IndexType &index, IndexType &modulo);  ; static void split_col_index (IndexType &index, IndexType &modulo);  ; template<class TSubBlock > ; static void subBlock (const Block &b, IndexType row, IndexType col, TSubBlock &subBlock);  ; static sofa::linearalgebra::BaseMatrix::ElementType getElementType ();  . Function details. ◆ clear(). template<class T , typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< T, IndexType >::clear ; (; Block & ; b). inlinestatic . ◆ empty(). template<class T , typename IndexType > . static bool sofa::linearalgebra::matrix_bloc_traits< T, IndexType >::empty ; (; const Block & ; b). inlinestatic . ◆ getElementType(). template<class T , typename IndexType > . static sofa::linearalgebra::BaseMatrix::ElementType sofa::linearalgebra::matrix_bloc_traits< T, IndexType >::getElementType ; (; ). inlinestatic . ◆ invert(). template<class T , typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< T, IndexType >::invert ; (; Block & ; result, . const Block & ; b . ). inlinestatic . ◆ split_col_index(). template<class T , typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< T, IndexType >::split_col_index ; (; IndexType & ; index, . IndexType & ; modulo . ). inlinestatic . ◆ split_row_index(). template<class T , typename IndexTy",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits.html:1230,Usability,clear,clear,1230," of all members . sofa::linearalgebra::matrix_bloc_traits< T, IndexType > Class Template Reference . #include <matrix_bloc_traits.h>. Static Public Member Functions; static Real & v (Block &b, IndexType row, IndexType col);  ; static const Real & v (const Block &b, IndexType row, IndexType col);  ; static void vset (Block &b, int row, int col, Real val);  ; static void vadd (Block &b, int row, int col, Real val);  ; static void clear (Block &b);  ; static bool empty (const Block &b);  ; static void invert (Block &result, const Block &b);  ; static void split_row_index (IndexType &index, IndexType &modulo);  ; static void split_col_index (IndexType &index, IndexType &modulo);  ; template<class TSubBlock > ; static void subBlock (const Block &b, IndexType row, IndexType col, TSubBlock &subBlock);  ; static sofa::linearalgebra::BaseMatrix::ElementType getElementType ();  . Function details. ◆ clear(). template<class T , typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< T, IndexType >::clear ; (; Block & ; b). inlinestatic . ◆ empty(). template<class T , typename IndexType > . static bool sofa::linearalgebra::matrix_bloc_traits< T, IndexType >::empty ; (; const Block & ; b). inlinestatic . ◆ getElementType(). template<class T , typename IndexType > . static sofa::linearalgebra::BaseMatrix::ElementType sofa::linearalgebra::matrix_bloc_traits< T, IndexType >::getElementType ; (; ). inlinestatic . ◆ invert(). template<class T , typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< T, IndexType >::invert ; (; Block & ; result, . const Block & ; b . ). inlinestatic . ◆ split_col_index(). template<class T , typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< T, IndexType >::split_col_index ; (; IndexType & ; index, . IndexType & ; modulo . ). inlinestatic . ◆ split_row_index(). template<class T , typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< T, IndexType >::split_row_index ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01defaulttype_1_1_rigid_deriv_3_01_n_00_01_11f9f74aaa4765f4ea367a642067a7f0.html:342,Modifiability,inherit,inherited,342,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType > Member List . This is the complete list of members for sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >, including all inherited members. Block typedefsofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >; BlockTranspose typedefsofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >; clear(Block &b)sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >inlinestatic; empty(const Block &b)sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >inlinestatic; getElementType()sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >inlinestatic; Name()sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >inlinestatic; NC enum valuesofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >; NL enum valuesofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >; Real typedefsofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >; subBlock(const Block &b, IndexType row, IndexType col, TSubBlock &subBlock)sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >inlinestatic; transpose(BlockTranspose &res, const Block &b)sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >inlinestatic; transposed(const Block &b)sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >inlinestatic; v(const Block &b, int, int col)sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >inlinestatic; v(Block &b, int, int col)sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, Index",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01defaulttype_1_1_rigid_deriv_3_01_n_00_01_11f9f74aaa4765f4ea367a642067a7f0.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01defaulttype_1_1_rigid_deriv_3_01_n_00_01_11f9f74aaa4765f4ea367a642067a7f0.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01defaulttype_1_1_rigid_deriv_3_01_n_00_01_11f9f74aaa4765f4ea367a642067a7f0.html:570,Usability,clear,clear,570,">, including all inherited members. Block typedefsofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >; BlockTranspose typedefsofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >; clear(Block &b)sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >inlinestatic; empty(const Block &b)sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >inlinestatic; getElementType()sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >inlinestatic; Name()sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >inlinestatic; NC enum valuesofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >; NL enum valuesofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >; Real typedefsofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >; subBlock(const Block &b, IndexType row, IndexType col, TSubBlock &subBlock)sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >inlinestatic; transpose(BlockTranspose &res, const Block &b)sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >inlinestatic; transposed(const Block &b)sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >inlinestatic; v(const Block &b, int, int col)sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >inlinestatic; v(Block &b, int, int col)sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >inlinestatic; vadd(Block &b, int, int col, Real v)sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >inlinestatic; vset(Block &b, int, int col, Real v)sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >inlinestatic. Generated on Mon Nov 11 2024 03:31",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01defaulttype_1_1_rigid_deriv_3_01_n_00_01_11f9f74aaa4765f4ea367a642067a7f0.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01defaulttype_1_1_rigid_deriv_3_01_n_00_01_11f9f74aaa4765f4ea367a642067a7f0.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01defaulttype_1_1_rigid_deriv_3_01_n_00_01_t_01_4_00_01_index_type_01_4.html:647,Usability,clear,clear,647,"﻿. SOFA API: sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType > Class Template Reference . #include <RigidDeriv.h>. Static Public Member Functions; static const Real & v (const Block &b, int, int col);  ; static Real & v (Block &b, int, int col);  ; static void vset (Block &b, int, int col, Real v);  ; static void vadd (Block &b, int, int col, Real v);  ; static void clear (Block &b);  ; static bool empty (const Block &b);  ; static BlockTranspose transposed (const Block &b);  ; static void transpose (BlockTranspose &res, const Block &b);  ; template<class TSubBlock , std::enable_if_t< std::is_scalar_v< TSubBlock >, bool > = true> ; static void subBlock (const Block &b, IndexType row, IndexType col, TSubBlock &subBlock);  ; static sofa::linearalgebra::BaseMatrix::ElementType getElementType ();  ; static const char * Name ();  . Function details. ◆ clear(). template<Size N, class T , typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >::clear ; (; Block & ; b). inlinestatic . ◆ empty(). template<Size N, class T , typename IndexType > . static bool sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >::empty ; (; const Block & ; b). inlinestatic . ◆ getElementType(). template<Size N, class T , typename IndexType > . static sofa::linearalgebra::BaseMatrix::ElementType sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >::getElementType ; (; ). inlinestatic . ◆ Name(). template<Size N, class T , typename IndexType > . static const char* sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >::Name ; (; ). inlinestatic . ◆ subBlock(). templ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01defaulttype_1_1_rigid_deriv_3_01_n_00_01_t_01_4_00_01_index_type_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01defaulttype_1_1_rigid_deriv_3_01_n_00_01_t_01_4_00_01_index_type_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01defaulttype_1_1_rigid_deriv_3_01_n_00_01_t_01_4_00_01_index_type_01_4.html:1137,Usability,clear,clear,1137,"79a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType > Class Template Reference . #include <RigidDeriv.h>. Static Public Member Functions; static const Real & v (const Block &b, int, int col);  ; static Real & v (Block &b, int, int col);  ; static void vset (Block &b, int, int col, Real v);  ; static void vadd (Block &b, int, int col, Real v);  ; static void clear (Block &b);  ; static bool empty (const Block &b);  ; static BlockTranspose transposed (const Block &b);  ; static void transpose (BlockTranspose &res, const Block &b);  ; template<class TSubBlock , std::enable_if_t< std::is_scalar_v< TSubBlock >, bool > = true> ; static void subBlock (const Block &b, IndexType row, IndexType col, TSubBlock &subBlock);  ; static sofa::linearalgebra::BaseMatrix::ElementType getElementType ();  ; static const char * Name ();  . Function details. ◆ clear(). template<Size N, class T , typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >::clear ; (; Block & ; b). inlinestatic . ◆ empty(). template<Size N, class T , typename IndexType > . static bool sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >::empty ; (; const Block & ; b). inlinestatic . ◆ getElementType(). template<Size N, class T , typename IndexType > . static sofa::linearalgebra::BaseMatrix::ElementType sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >::getElementType ; (; ). inlinestatic . ◆ Name(). template<Size N, class T , typename IndexType > . static const char* sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >::Name ; (; ). inlinestatic . ◆ subBlock(). template<Size N, class T , typename IndexType > . template<class TSubBlock , std::enable_if_t< std::is_scalar_v< TSubBlock >, bool > = true> . s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01defaulttype_1_1_rigid_deriv_3_01_n_00_01_t_01_4_00_01_index_type_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01defaulttype_1_1_rigid_deriv_3_01_n_00_01_t_01_4_00_01_index_type_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01defaulttype_1_1_rigid_deriv_3_01_n_00_01_t_01_4_00_01_index_type_01_4.html:1295,Usability,clear,clear,1295,"fa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType > Class Template Reference . #include <RigidDeriv.h>. Static Public Member Functions; static const Real & v (const Block &b, int, int col);  ; static Real & v (Block &b, int, int col);  ; static void vset (Block &b, int, int col, Real v);  ; static void vadd (Block &b, int, int col, Real v);  ; static void clear (Block &b);  ; static bool empty (const Block &b);  ; static BlockTranspose transposed (const Block &b);  ; static void transpose (BlockTranspose &res, const Block &b);  ; template<class TSubBlock , std::enable_if_t< std::is_scalar_v< TSubBlock >, bool > = true> ; static void subBlock (const Block &b, IndexType row, IndexType col, TSubBlock &subBlock);  ; static sofa::linearalgebra::BaseMatrix::ElementType getElementType ();  ; static const char * Name ();  . Function details. ◆ clear(). template<Size N, class T , typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >::clear ; (; Block & ; b). inlinestatic . ◆ empty(). template<Size N, class T , typename IndexType > . static bool sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >::empty ; (; const Block & ; b). inlinestatic . ◆ getElementType(). template<Size N, class T , typename IndexType > . static sofa::linearalgebra::BaseMatrix::ElementType sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >::getElementType ; (; ). inlinestatic . ◆ Name(). template<Size N, class T , typename IndexType > . static const char* sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >::Name ; (; ). inlinestatic . ◆ subBlock(). template<Size N, class T , typename IndexType > . template<class TSubBlock , std::enable_if_t< std::is_scalar_v< TSubBlock >, bool > = true> . static void sofa::linearalgebra::matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >::subBlock ; (; const",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01defaulttype_1_1_rigid_deriv_3_01_n_00_01_t_01_4_00_01_index_type_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01defaulttype_1_1_rigid_deriv_3_01_n_00_01_t_01_4_00_01_index_type_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01double_00_01_index_type_01_4-members.html:292,Modifiability,inherit,inherited,292,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::matrix_bloc_traits< double, IndexType > Member List . This is the complete list of members for sofa::linearalgebra::matrix_bloc_traits< double, IndexType >, including all inherited members. Block typedefsofa::linearalgebra::matrix_bloc_traits< double, IndexType >; BlockTranspose typedefsofa::linearalgebra::matrix_bloc_traits< double, IndexType >; clear(Block &b)sofa::linearalgebra::matrix_bloc_traits< double, IndexType >inlinestatic; empty(const Block &b)sofa::linearalgebra::matrix_bloc_traits< double, IndexType >inlinestatic; getElementType()sofa::linearalgebra::matrix_bloc_traits< double, IndexType >inlinestatic; invert(Block &result, const Block &b)sofa::linearalgebra::matrix_bloc_traits< double, IndexType >inlinestatic; Name()sofa::linearalgebra::matrix_bloc_traits< double, IndexType >inlinestatic; NC enum valuesofa::linearalgebra::matrix_bloc_traits< double, IndexType >; NL enum valuesofa::linearalgebra::matrix_bloc_traits< double, IndexType >; Real typedefsofa::linearalgebra::matrix_bloc_traits< double, IndexType >; split_col_index(IndexType &index, IndexType &modulo)sofa::linearalgebra::matrix_bloc_traits< double, IndexType >inlinestatic; split_row_index(IndexType &index, IndexType &modulo)sofa::linearalgebra::matrix_bloc_traits< double, IndexType >inlinestatic; subBlock(const Block &b, IndexType row, IndexType col, TSubBlock &subBlock)sofa::linearalgebra::matrix_bloc_traits< double, IndexType >inlinestatic; v(Block &b, IndexType, IndexType)sofa::linearalgebra::matrix_bloc_traits< double, IndexType >inlinestatic; v(const Block &b, IndexType, IndexType)sofa::linearalgebra::matrix_bloc_traits< double, IndexType >inlinestatic; vadd(Block &b, int, int, Real val)sofa::linearalgebra::matrix_bloc_traits< double, IndexType >inlinestatic; vset(Block &b, int, int, Real val)sofa::linearalgebra::matrix_bloc_traits< double, IndexType >inlinestatic. Gener",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01double_00_01_index_type_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01double_00_01_index_type_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01double_00_01_index_type_01_4-members.html:470,Usability,clear,clear,470,"ce framework for multi-physics simuation. sofa::linearalgebra::matrix_bloc_traits< double, IndexType > Member List . This is the complete list of members for sofa::linearalgebra::matrix_bloc_traits< double, IndexType >, including all inherited members. Block typedefsofa::linearalgebra::matrix_bloc_traits< double, IndexType >; BlockTranspose typedefsofa::linearalgebra::matrix_bloc_traits< double, IndexType >; clear(Block &b)sofa::linearalgebra::matrix_bloc_traits< double, IndexType >inlinestatic; empty(const Block &b)sofa::linearalgebra::matrix_bloc_traits< double, IndexType >inlinestatic; getElementType()sofa::linearalgebra::matrix_bloc_traits< double, IndexType >inlinestatic; invert(Block &result, const Block &b)sofa::linearalgebra::matrix_bloc_traits< double, IndexType >inlinestatic; Name()sofa::linearalgebra::matrix_bloc_traits< double, IndexType >inlinestatic; NC enum valuesofa::linearalgebra::matrix_bloc_traits< double, IndexType >; NL enum valuesofa::linearalgebra::matrix_bloc_traits< double, IndexType >; Real typedefsofa::linearalgebra::matrix_bloc_traits< double, IndexType >; split_col_index(IndexType &index, IndexType &modulo)sofa::linearalgebra::matrix_bloc_traits< double, IndexType >inlinestatic; split_row_index(IndexType &index, IndexType &modulo)sofa::linearalgebra::matrix_bloc_traits< double, IndexType >inlinestatic; subBlock(const Block &b, IndexType row, IndexType col, TSubBlock &subBlock)sofa::linearalgebra::matrix_bloc_traits< double, IndexType >inlinestatic; v(Block &b, IndexType, IndexType)sofa::linearalgebra::matrix_bloc_traits< double, IndexType >inlinestatic; v(const Block &b, IndexType, IndexType)sofa::linearalgebra::matrix_bloc_traits< double, IndexType >inlinestatic; vadd(Block &b, int, int, Real val)sofa::linearalgebra::matrix_bloc_traits< double, IndexType >inlinestatic; vset(Block &b, int, int, Real val)sofa::linearalgebra::matrix_bloc_traits< double, IndexType >inlinestatic. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01double_00_01_index_type_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01double_00_01_index_type_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01double_00_01_index_type_01_4.html:617,Usability,clear,clear,617,"﻿. SOFA API: sofa::linearalgebra::matrix_bloc_traits< double, IndexType > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::linearalgebra::matrix_bloc_traits< double, IndexType > Class Template Reference . #include <matrix_bloc_traits.h>. Static Public Member Functions; static Real & v (Block &b, IndexType, IndexType);  ; static void vset (Block &b, int, int, Real val);  ; static void vadd (Block &b, int, int, Real val);  ; static const Real & v (const Block &b, IndexType, IndexType);  ; static void clear (Block &b);  ; static bool empty (const Block &b);  ; static void invert (Block &result, const Block &b);  ; template<class TSubBlock , std::enable_if_t< std::is_scalar_v< TSubBlock >, bool > = true> ; static void subBlock (const Block &b, IndexType row, IndexType col, TSubBlock &subBlock);  ; static void split_row_index (IndexType &index, IndexType &modulo);  ; static void split_col_index (IndexType &index, IndexType &modulo);  ; static sofa::linearalgebra::BaseMatrix::ElementType getElementType ();  ; static const std::string Name ();  . Function details. ◆ clear(). template<typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< double, IndexType >::clear ; (; Block & ; b). inlinestatic . ◆ empty(). template<typename IndexType > . static bool sofa::linearalgebra::matrix_bloc_traits< double, IndexType >::empty ; (; const Block & ; b). inlinestatic . ◆ getElementType(). template<typename IndexType > . static sofa::linearalgebra::BaseMatrix::ElementType sofa::linearalgebra::matrix_bloc_traits< double, IndexType >::getElementType ; (; ). inlinestatic . ◆ invert(). template<typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< double, IndexType >::invert ; (; Block & ; result, . const Block & ; b . ). inlinestatic . ◆ Name(). template<typename IndexType > . static const std::string sofa::linearalgebra::matrix_bloc_tr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01double_00_01_index_type_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01double_00_01_index_type_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01double_00_01_index_type_01_4.html:1189,Usability,clear,clear,1189,"ber Functions |; List of all members . sofa::linearalgebra::matrix_bloc_traits< double, IndexType > Class Template Reference . #include <matrix_bloc_traits.h>. Static Public Member Functions; static Real & v (Block &b, IndexType, IndexType);  ; static void vset (Block &b, int, int, Real val);  ; static void vadd (Block &b, int, int, Real val);  ; static const Real & v (const Block &b, IndexType, IndexType);  ; static void clear (Block &b);  ; static bool empty (const Block &b);  ; static void invert (Block &result, const Block &b);  ; template<class TSubBlock , std::enable_if_t< std::is_scalar_v< TSubBlock >, bool > = true> ; static void subBlock (const Block &b, IndexType row, IndexType col, TSubBlock &subBlock);  ; static void split_row_index (IndexType &index, IndexType &modulo);  ; static void split_col_index (IndexType &index, IndexType &modulo);  ; static sofa::linearalgebra::BaseMatrix::ElementType getElementType ();  ; static const std::string Name ();  . Function details. ◆ clear(). template<typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< double, IndexType >::clear ; (; Block & ; b). inlinestatic . ◆ empty(). template<typename IndexType > . static bool sofa::linearalgebra::matrix_bloc_traits< double, IndexType >::empty ; (; const Block & ; b). inlinestatic . ◆ getElementType(). template<typename IndexType > . static sofa::linearalgebra::BaseMatrix::ElementType sofa::linearalgebra::matrix_bloc_traits< double, IndexType >::getElementType ; (; ). inlinestatic . ◆ invert(). template<typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< double, IndexType >::invert ; (; Block & ; result, . const Block & ; b . ). inlinestatic . ◆ Name(). template<typename IndexType > . static const std::string sofa::linearalgebra::matrix_bloc_traits< double, IndexType >::Name ; (; ). inlinestatic . ◆ split_col_index(). template<typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< double, IndexType >::split_col",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01double_00_01_index_type_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01double_00_01_index_type_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01double_00_01_index_type_01_4.html:1304,Usability,clear,clear,1304," IndexType > Class Template Reference . #include <matrix_bloc_traits.h>. Static Public Member Functions; static Real & v (Block &b, IndexType, IndexType);  ; static void vset (Block &b, int, int, Real val);  ; static void vadd (Block &b, int, int, Real val);  ; static const Real & v (const Block &b, IndexType, IndexType);  ; static void clear (Block &b);  ; static bool empty (const Block &b);  ; static void invert (Block &result, const Block &b);  ; template<class TSubBlock , std::enable_if_t< std::is_scalar_v< TSubBlock >, bool > = true> ; static void subBlock (const Block &b, IndexType row, IndexType col, TSubBlock &subBlock);  ; static void split_row_index (IndexType &index, IndexType &modulo);  ; static void split_col_index (IndexType &index, IndexType &modulo);  ; static sofa::linearalgebra::BaseMatrix::ElementType getElementType ();  ; static const std::string Name ();  . Function details. ◆ clear(). template<typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< double, IndexType >::clear ; (; Block & ; b). inlinestatic . ◆ empty(). template<typename IndexType > . static bool sofa::linearalgebra::matrix_bloc_traits< double, IndexType >::empty ; (; const Block & ; b). inlinestatic . ◆ getElementType(). template<typename IndexType > . static sofa::linearalgebra::BaseMatrix::ElementType sofa::linearalgebra::matrix_bloc_traits< double, IndexType >::getElementType ; (; ). inlinestatic . ◆ invert(). template<typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< double, IndexType >::invert ; (; Block & ; result, . const Block & ; b . ). inlinestatic . ◆ Name(). template<typename IndexType > . static const std::string sofa::linearalgebra::matrix_bloc_traits< double, IndexType >::Name ; (; ). inlinestatic . ◆ split_col_index(). template<typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< double, IndexType >::split_col_index ; (; IndexType & ; index, . IndexType & ; modulo . ). inlinestatic . ◆ split_row",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01double_00_01_index_type_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01double_00_01_index_type_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01float_00_01_index_type_01_4-members.html:290,Modifiability,inherit,inherited,290,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::matrix_bloc_traits< float, IndexType > Member List . This is the complete list of members for sofa::linearalgebra::matrix_bloc_traits< float, IndexType >, including all inherited members. Block typedefsofa::linearalgebra::matrix_bloc_traits< float, IndexType >; BlockTranspose typedefsofa::linearalgebra::matrix_bloc_traits< float, IndexType >; clear(Block &b)sofa::linearalgebra::matrix_bloc_traits< float, IndexType >inlinestatic; empty(const Block &b)sofa::linearalgebra::matrix_bloc_traits< float, IndexType >inlinestatic; getElementSize()sofa::linearalgebra::matrix_bloc_traits< float, IndexType >inlinestatic; getElementType()sofa::linearalgebra::matrix_bloc_traits< float, IndexType >inlinestatic; invert(Block &result, const Block &b)sofa::linearalgebra::matrix_bloc_traits< float, IndexType >inlinestatic; Name()sofa::linearalgebra::matrix_bloc_traits< float, IndexType >inlinestatic; NC enum valuesofa::linearalgebra::matrix_bloc_traits< float, IndexType >; NL enum valuesofa::linearalgebra::matrix_bloc_traits< float, IndexType >; Real typedefsofa::linearalgebra::matrix_bloc_traits< float, IndexType >; split_col_index(IndexType &index, IndexType &modulo)sofa::linearalgebra::matrix_bloc_traits< float, IndexType >inlinestatic; split_row_index(IndexType &index, IndexType &modulo)sofa::linearalgebra::matrix_bloc_traits< float, IndexType >inlinestatic; subBlock(const Block &b, IndexType row, IndexType col, TSubBlock &subBlock)sofa::linearalgebra::matrix_bloc_traits< float, IndexType >inlinestatic; v(Block &b, IndexType, IndexType)sofa::linearalgebra::matrix_bloc_traits< float, IndexType >inlinestatic; v(const Block &b, IndexType, IndexType)sofa::linearalgebra::matrix_bloc_traits< float, IndexType >inlinestatic; vadd(Block &b, int, int, Real val)sofa::linearalgebra::matrix_bloc_traits< float, IndexType >inlinestatic; vset(Block &b, int, int, Real val)sofa::li",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01float_00_01_index_type_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01float_00_01_index_type_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01float_00_01_index_type_01_4-members.html:466,Usability,clear,clear,466,"bloc_traits< float, IndexType > Member List . This is the complete list of members for sofa::linearalgebra::matrix_bloc_traits< float, IndexType >, including all inherited members. Block typedefsofa::linearalgebra::matrix_bloc_traits< float, IndexType >; BlockTranspose typedefsofa::linearalgebra::matrix_bloc_traits< float, IndexType >; clear(Block &b)sofa::linearalgebra::matrix_bloc_traits< float, IndexType >inlinestatic; empty(const Block &b)sofa::linearalgebra::matrix_bloc_traits< float, IndexType >inlinestatic; getElementSize()sofa::linearalgebra::matrix_bloc_traits< float, IndexType >inlinestatic; getElementType()sofa::linearalgebra::matrix_bloc_traits< float, IndexType >inlinestatic; invert(Block &result, const Block &b)sofa::linearalgebra::matrix_bloc_traits< float, IndexType >inlinestatic; Name()sofa::linearalgebra::matrix_bloc_traits< float, IndexType >inlinestatic; NC enum valuesofa::linearalgebra::matrix_bloc_traits< float, IndexType >; NL enum valuesofa::linearalgebra::matrix_bloc_traits< float, IndexType >; Real typedefsofa::linearalgebra::matrix_bloc_traits< float, IndexType >; split_col_index(IndexType &index, IndexType &modulo)sofa::linearalgebra::matrix_bloc_traits< float, IndexType >inlinestatic; split_row_index(IndexType &index, IndexType &modulo)sofa::linearalgebra::matrix_bloc_traits< float, IndexType >inlinestatic; subBlock(const Block &b, IndexType row, IndexType col, TSubBlock &subBlock)sofa::linearalgebra::matrix_bloc_traits< float, IndexType >inlinestatic; v(Block &b, IndexType, IndexType)sofa::linearalgebra::matrix_bloc_traits< float, IndexType >inlinestatic; v(const Block &b, IndexType, IndexType)sofa::linearalgebra::matrix_bloc_traits< float, IndexType >inlinestatic; vadd(Block &b, int, int, Real val)sofa::linearalgebra::matrix_bloc_traits< float, IndexType >inlinestatic; vset(Block &b, int, int, Real val)sofa::linearalgebra::matrix_bloc_traits< float, IndexType >inlinestatic. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01float_00_01_index_type_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01float_00_01_index_type_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01float_00_01_index_type_01_4.html:615,Usability,clear,clear,615,"﻿. SOFA API: sofa::linearalgebra::matrix_bloc_traits< float, IndexType > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::linearalgebra::matrix_bloc_traits< float, IndexType > Class Template Reference . #include <matrix_bloc_traits.h>. Static Public Member Functions; static Real & v (Block &b, IndexType, IndexType);  ; static const Real & v (const Block &b, IndexType, IndexType);  ; static void vset (Block &b, int, int, Real val);  ; static void vadd (Block &b, int, int, Real val);  ; static void clear (Block &b);  ; static bool empty (const Block &b);  ; static void invert (Block &result, const Block &b);  ; static void split_row_index (IndexType &index, IndexType &modulo);  ; static void split_col_index (IndexType &index, IndexType &modulo);  ; template<class TSubBlock , std::enable_if_t< std::is_scalar_v< TSubBlock >, bool > = true> ; static void subBlock (const Block &b, IndexType row, IndexType col, TSubBlock &subBlock);  ; static const std::string Name ();  ; static sofa::linearalgebra::BaseMatrix::ElementType getElementType ();  ; static IndexType getElementSize ();  . Function details. ◆ clear(). template<typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< float, IndexType >::clear ; (; Block & ; b). inlinestatic . ◆ empty(). template<typename IndexType > . static bool sofa::linearalgebra::matrix_bloc_traits< float, IndexType >::empty ; (; const Block & ; b). inlinestatic . ◆ getElementSize(). template<typename IndexType > . static IndexType sofa::linearalgebra::matrix_bloc_traits< float, IndexType >::getElementSize ; (; ). inlinestatic . ◆ getElementType(). template<typename IndexType > . static sofa::linearalgebra::BaseMatrix::ElementType sofa::linearalgebra::matrix_bloc_traits< float, IndexType >::getElementType ; (; ). inlinestatic . ◆ invert(). template<typename IndexType > . static void sofa::linearalgebra::matrix_bloc",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01float_00_01_index_type_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01float_00_01_index_type_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01float_00_01_index_type_01_4.html:1226,Usability,clear,clear,1226," sofa::linearalgebra::matrix_bloc_traits< float, IndexType > Class Template Reference . #include <matrix_bloc_traits.h>. Static Public Member Functions; static Real & v (Block &b, IndexType, IndexType);  ; static const Real & v (const Block &b, IndexType, IndexType);  ; static void vset (Block &b, int, int, Real val);  ; static void vadd (Block &b, int, int, Real val);  ; static void clear (Block &b);  ; static bool empty (const Block &b);  ; static void invert (Block &result, const Block &b);  ; static void split_row_index (IndexType &index, IndexType &modulo);  ; static void split_col_index (IndexType &index, IndexType &modulo);  ; template<class TSubBlock , std::enable_if_t< std::is_scalar_v< TSubBlock >, bool > = true> ; static void subBlock (const Block &b, IndexType row, IndexType col, TSubBlock &subBlock);  ; static const std::string Name ();  ; static sofa::linearalgebra::BaseMatrix::ElementType getElementType ();  ; static IndexType getElementSize ();  . Function details. ◆ clear(). template<typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< float, IndexType >::clear ; (; Block & ; b). inlinestatic . ◆ empty(). template<typename IndexType > . static bool sofa::linearalgebra::matrix_bloc_traits< float, IndexType >::empty ; (; const Block & ; b). inlinestatic . ◆ getElementSize(). template<typename IndexType > . static IndexType sofa::linearalgebra::matrix_bloc_traits< float, IndexType >::getElementSize ; (; ). inlinestatic . ◆ getElementType(). template<typename IndexType > . static sofa::linearalgebra::BaseMatrix::ElementType sofa::linearalgebra::matrix_bloc_traits< float, IndexType >::getElementType ; (; ). inlinestatic . ◆ invert(). template<typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< float, IndexType >::invert ; (; Block & ; result, . const Block & ; b . ). inlinestatic . ◆ Name(). template<typename IndexType > . static const std::string sofa::linearalgebra::matrix_bloc_traits< float, IndexType >::N",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01float_00_01_index_type_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01float_00_01_index_type_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01float_00_01_index_type_01_4.html:1340,Usability,clear,clear,1340," #include <matrix_bloc_traits.h>. Static Public Member Functions; static Real & v (Block &b, IndexType, IndexType);  ; static const Real & v (const Block &b, IndexType, IndexType);  ; static void vset (Block &b, int, int, Real val);  ; static void vadd (Block &b, int, int, Real val);  ; static void clear (Block &b);  ; static bool empty (const Block &b);  ; static void invert (Block &result, const Block &b);  ; static void split_row_index (IndexType &index, IndexType &modulo);  ; static void split_col_index (IndexType &index, IndexType &modulo);  ; template<class TSubBlock , std::enable_if_t< std::is_scalar_v< TSubBlock >, bool > = true> ; static void subBlock (const Block &b, IndexType row, IndexType col, TSubBlock &subBlock);  ; static const std::string Name ();  ; static sofa::linearalgebra::BaseMatrix::ElementType getElementType ();  ; static IndexType getElementSize ();  . Function details. ◆ clear(). template<typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< float, IndexType >::clear ; (; Block & ; b). inlinestatic . ◆ empty(). template<typename IndexType > . static bool sofa::linearalgebra::matrix_bloc_traits< float, IndexType >::empty ; (; const Block & ; b). inlinestatic . ◆ getElementSize(). template<typename IndexType > . static IndexType sofa::linearalgebra::matrix_bloc_traits< float, IndexType >::getElementSize ; (; ). inlinestatic . ◆ getElementType(). template<typename IndexType > . static sofa::linearalgebra::BaseMatrix::ElementType sofa::linearalgebra::matrix_bloc_traits< float, IndexType >::getElementType ; (; ). inlinestatic . ◆ invert(). template<typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< float, IndexType >::invert ; (; Block & ; result, . const Block & ; b . ). inlinestatic . ◆ Name(). template<typename IndexType > . static const std::string sofa::linearalgebra::matrix_bloc_traits< float, IndexType >::Name ; (; ). inlinestatic . ◆ split_col_index(). template<typename IndexType > . static",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01float_00_01_index_type_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01float_00_01_index_type_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01int_00_01_index_type_01_4-members.html:286,Modifiability,inherit,inherited,286,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::matrix_bloc_traits< int, IndexType > Member List . This is the complete list of members for sofa::linearalgebra::matrix_bloc_traits< int, IndexType >, including all inherited members. Block typedefsofa::linearalgebra::matrix_bloc_traits< int, IndexType >; BlockTranspose typedefsofa::linearalgebra::matrix_bloc_traits< int, IndexType >; clear(Block &b)sofa::linearalgebra::matrix_bloc_traits< int, IndexType >inlinestatic; empty(const Block &b)sofa::linearalgebra::matrix_bloc_traits< int, IndexType >inlinestatic; getElementType()sofa::linearalgebra::matrix_bloc_traits< int, IndexType >inlinestatic; invert(Block &result, const Block &b)sofa::linearalgebra::matrix_bloc_traits< int, IndexType >inlinestatic; Name()sofa::linearalgebra::matrix_bloc_traits< int, IndexType >inlinestatic; NC enum valuesofa::linearalgebra::matrix_bloc_traits< int, IndexType >; NL enum valuesofa::linearalgebra::matrix_bloc_traits< int, IndexType >; Real typedefsofa::linearalgebra::matrix_bloc_traits< int, IndexType >; split_col_index(int &index, int &modulo)sofa::linearalgebra::matrix_bloc_traits< int, IndexType >inlinestatic; split_row_index(int &index, int &modulo)sofa::linearalgebra::matrix_bloc_traits< int, IndexType >inlinestatic; subBlock(const Block &b, IndexType row, IndexType col, TSubBlock &subBlock)sofa::linearalgebra::matrix_bloc_traits< int, IndexType >inlinestatic; v(Block &b, int, int)sofa::linearalgebra::matrix_bloc_traits< int, IndexType >inlinestatic; v(const Block &b, int, int)sofa::linearalgebra::matrix_bloc_traits< int, IndexType >inlinestatic; vadd(Block &b, int, int, Real val)sofa::linearalgebra::matrix_bloc_traits< int, IndexType >inlinestatic; vset(Block &b, int, int, Real val)sofa::linearalgebra::matrix_bloc_traits< int, IndexType >inlinestatic. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01int_00_01_index_type_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01int_00_01_index_type_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01int_00_01_index_type_01_4-members.html:458,Usability,clear,clear,458,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::matrix_bloc_traits< int, IndexType > Member List . This is the complete list of members for sofa::linearalgebra::matrix_bloc_traits< int, IndexType >, including all inherited members. Block typedefsofa::linearalgebra::matrix_bloc_traits< int, IndexType >; BlockTranspose typedefsofa::linearalgebra::matrix_bloc_traits< int, IndexType >; clear(Block &b)sofa::linearalgebra::matrix_bloc_traits< int, IndexType >inlinestatic; empty(const Block &b)sofa::linearalgebra::matrix_bloc_traits< int, IndexType >inlinestatic; getElementType()sofa::linearalgebra::matrix_bloc_traits< int, IndexType >inlinestatic; invert(Block &result, const Block &b)sofa::linearalgebra::matrix_bloc_traits< int, IndexType >inlinestatic; Name()sofa::linearalgebra::matrix_bloc_traits< int, IndexType >inlinestatic; NC enum valuesofa::linearalgebra::matrix_bloc_traits< int, IndexType >; NL enum valuesofa::linearalgebra::matrix_bloc_traits< int, IndexType >; Real typedefsofa::linearalgebra::matrix_bloc_traits< int, IndexType >; split_col_index(int &index, int &modulo)sofa::linearalgebra::matrix_bloc_traits< int, IndexType >inlinestatic; split_row_index(int &index, int &modulo)sofa::linearalgebra::matrix_bloc_traits< int, IndexType >inlinestatic; subBlock(const Block &b, IndexType row, IndexType col, TSubBlock &subBlock)sofa::linearalgebra::matrix_bloc_traits< int, IndexType >inlinestatic; v(Block &b, int, int)sofa::linearalgebra::matrix_bloc_traits< int, IndexType >inlinestatic; v(const Block &b, int, int)sofa::linearalgebra::matrix_bloc_traits< int, IndexType >inlinestatic; vadd(Block &b, int, int, Real val)sofa::linearalgebra::matrix_bloc_traits< int, IndexType >inlinestatic; vset(Block &b, int, int, Real val)sofa::linearalgebra::matrix_bloc_traits< int, IndexType >inlinestatic. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01int_00_01_index_type_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01int_00_01_index_type_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01int_00_01_index_type_01_4.html:587,Usability,clear,clear,587,"﻿. SOFA API: sofa::linearalgebra::matrix_bloc_traits< int, IndexType > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::linearalgebra::matrix_bloc_traits< int, IndexType > Class Template Reference . #include <matrix_bloc_traits.h>. Static Public Member Functions; static Real & v (Block &b, int, int);  ; static const Real & v (const Block &b, int, int);  ; static void vset (Block &b, int, int, Real val);  ; static void vadd (Block &b, int, int, Real val);  ; static void clear (Block &b);  ; static bool empty (const Block &b);  ; static void invert (Block &result, const Block &b);  ; template<class TSubBlock , std::enable_if_t< std::is_scalar_v< TSubBlock >, bool > = true> ; static void subBlock (const Block &b, IndexType row, IndexType col, TSubBlock &subBlock);  ; static void split_row_index (int &index, int &modulo);  ; static void split_col_index (int &index, int &modulo);  ; static sofa::linearalgebra::BaseMatrix::ElementType getElementType ();  ; static const std::string Name ();  . Function details. ◆ clear(). template<typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< int, IndexType >::clear ; (; Block & ; b). inlinestatic . ◆ empty(). template<typename IndexType > . static bool sofa::linearalgebra::matrix_bloc_traits< int, IndexType >::empty ; (; const Block & ; b). inlinestatic . ◆ getElementType(). template<typename IndexType > . static sofa::linearalgebra::BaseMatrix::ElementType sofa::linearalgebra::matrix_bloc_traits< int, IndexType >::getElementType ; (; ). inlinestatic . ◆ invert(). template<typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< int, IndexType >::invert ; (; Block & ; result, . const Block & ; b . ). inlinestatic . ◆ Name(). template<typename IndexType > . static const std::string sofa::linearalgebra::matrix_bloc_traits< int, IndexType >::Name ; (; ). inlinestatic . ◆ split_col_in",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01int_00_01_index_type_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01int_00_01_index_type_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01int_00_01_index_type_01_4.html:1135,Usability,clear,clear,1135,"work for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::linearalgebra::matrix_bloc_traits< int, IndexType > Class Template Reference . #include <matrix_bloc_traits.h>. Static Public Member Functions; static Real & v (Block &b, int, int);  ; static const Real & v (const Block &b, int, int);  ; static void vset (Block &b, int, int, Real val);  ; static void vadd (Block &b, int, int, Real val);  ; static void clear (Block &b);  ; static bool empty (const Block &b);  ; static void invert (Block &result, const Block &b);  ; template<class TSubBlock , std::enable_if_t< std::is_scalar_v< TSubBlock >, bool > = true> ; static void subBlock (const Block &b, IndexType row, IndexType col, TSubBlock &subBlock);  ; static void split_row_index (int &index, int &modulo);  ; static void split_col_index (int &index, int &modulo);  ; static sofa::linearalgebra::BaseMatrix::ElementType getElementType ();  ; static const std::string Name ();  . Function details. ◆ clear(). template<typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< int, IndexType >::clear ; (; Block & ; b). inlinestatic . ◆ empty(). template<typename IndexType > . static bool sofa::linearalgebra::matrix_bloc_traits< int, IndexType >::empty ; (; const Block & ; b). inlinestatic . ◆ getElementType(). template<typename IndexType > . static sofa::linearalgebra::BaseMatrix::ElementType sofa::linearalgebra::matrix_bloc_traits< int, IndexType >::getElementType ; (; ). inlinestatic . ◆ invert(). template<typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< int, IndexType >::invert ; (; Block & ; result, . const Block & ; b . ). inlinestatic . ◆ Name(). template<typename IndexType > . static const std::string sofa::linearalgebra::matrix_bloc_traits< int, IndexType >::Name ; (; ). inlinestatic . ◆ split_col_index(). template<typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< int, IndexType >::split_col_index ; (; int & ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01int_00_01_index_type_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01int_00_01_index_type_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01int_00_01_index_type_01_4.html:1247,Usability,clear,clear,1247,"s . sofa::linearalgebra::matrix_bloc_traits< int, IndexType > Class Template Reference . #include <matrix_bloc_traits.h>. Static Public Member Functions; static Real & v (Block &b, int, int);  ; static const Real & v (const Block &b, int, int);  ; static void vset (Block &b, int, int, Real val);  ; static void vadd (Block &b, int, int, Real val);  ; static void clear (Block &b);  ; static bool empty (const Block &b);  ; static void invert (Block &result, const Block &b);  ; template<class TSubBlock , std::enable_if_t< std::is_scalar_v< TSubBlock >, bool > = true> ; static void subBlock (const Block &b, IndexType row, IndexType col, TSubBlock &subBlock);  ; static void split_row_index (int &index, int &modulo);  ; static void split_col_index (int &index, int &modulo);  ; static sofa::linearalgebra::BaseMatrix::ElementType getElementType ();  ; static const std::string Name ();  . Function details. ◆ clear(). template<typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< int, IndexType >::clear ; (; Block & ; b). inlinestatic . ◆ empty(). template<typename IndexType > . static bool sofa::linearalgebra::matrix_bloc_traits< int, IndexType >::empty ; (; const Block & ; b). inlinestatic . ◆ getElementType(). template<typename IndexType > . static sofa::linearalgebra::BaseMatrix::ElementType sofa::linearalgebra::matrix_bloc_traits< int, IndexType >::getElementType ; (; ). inlinestatic . ◆ invert(). template<typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< int, IndexType >::invert ; (; Block & ; result, . const Block & ; b . ). inlinestatic . ◆ Name(). template<typename IndexType > . static const std::string sofa::linearalgebra::matrix_bloc_traits< int, IndexType >::Name ; (; ). inlinestatic . ◆ split_col_index(). template<typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< int, IndexType >::split_col_index ; (; int & ; index, . int & ; modulo . ). inlinestatic . ◆ split_row_index(). template<typename ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01int_00_01_index_type_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01int_00_01_index_type_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01sofa_1_1type_1_1_vec_3_01_n_00_01_t_01_4_00_01_index_type_01_4-members.html:326,Modifiability,inherit,inherited,326,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType > Member List . This is the complete list of members for sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >, including all inherited members. Block typedefsofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >; BlockTranspose typedefsofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >; clear(Block &b)sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >inlinestatic; empty(const Block &b)sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >inlinestatic; getElementType()sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >inlinestatic; Name()sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >inlinestatic; NC enum valuesofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >; NL enum valuesofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >; Real typedefsofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >; subBlock(const Block &b, IndexType row, IndexType col, TSubBlock &subBlock)sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >inlinestatic; transpose(Block &res, const Block &b)sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >inlinestatic; transposed(const Block &b)sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >inlinestatic; v(Block &b, int, int col)sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >inlinestatic; v(const Block &b, int, int col)sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >inlinestatic; vadd(Block &b, int, int col, Real v)sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >inli",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01sofa_1_1type_1_1_vec_3_01_n_00_01_t_01_4_00_01_index_type_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01sofa_1_1type_1_1_vec_3_01_n_00_01_t_01_4_00_01_index_type_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01sofa_1_1type_1_1_vec_3_01_n_00_01_t_01_4_00_01_index_type_01_4-members.html:538,Usability,clear,clear,538,"the complete list of members for sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >, including all inherited members. Block typedefsofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >; BlockTranspose typedefsofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >; clear(Block &b)sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >inlinestatic; empty(const Block &b)sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >inlinestatic; getElementType()sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >inlinestatic; Name()sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >inlinestatic; NC enum valuesofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >; NL enum valuesofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >; Real typedefsofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >; subBlock(const Block &b, IndexType row, IndexType col, TSubBlock &subBlock)sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >inlinestatic; transpose(Block &res, const Block &b)sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >inlinestatic; transposed(const Block &b)sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >inlinestatic; v(Block &b, int, int col)sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >inlinestatic; v(const Block &b, int, int col)sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >inlinestatic; vadd(Block &b, int, int col, Real v)sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >inlinestatic; vset(Block &b, int, int col, Real v)sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >inlinestatic. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01sofa_1_1type_1_1_vec_3_01_n_00_01_t_01_4_00_01_index_type_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01sofa_1_1type_1_1_vec_3_01_n_00_01_t_01_4_00_01_index_type_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01sofa_1_1type_1_1_vec_3_01_n_00_01_t_01_4_00_01_index_type_01_4.html:639,Usability,clear,clear,639,"﻿. SOFA API: sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType > Class Template Reference . #include <matrix_bloc_traits.h>. Static Public Member Functions; static Real & v (Block &b, int, int col);  ; static const Real & v (const Block &b, int, int col);  ; static void vset (Block &b, int, int col, Real v);  ; static void vadd (Block &b, int, int col, Real v);  ; static void clear (Block &b);  ; static bool empty (const Block &b);  ; static Block transposed (const Block &b);  ; static void transpose (Block &res, const Block &b);  ; template<class TSubBlock , std::enable_if_t< std::is_scalar_v< TSubBlock >, bool > = true> ; static void subBlock (const Block &b, IndexType row, IndexType col, TSubBlock &subBlock);  ; static sofa::linearalgebra::BaseMatrix::ElementType getElementType ();  ; static const std::string Name ();  . Function details. ◆ clear(). template<Size N, class T , typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >::clear ; (; Block & ; b). inlinestatic . ◆ empty(). template<Size N, class T , typename IndexType > . static bool sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >::empty ; (; const Block & ; b). inlinestatic . ◆ getElementType(). template<Size N, class T , typename IndexType > . static sofa::linearalgebra::BaseMatrix::ElementType sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >::getElementType ; (; ). inlinestatic . ◆ Name(). template<Size N, class T , typename IndexType > . static const std::string sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >::Name ; (; ). inlinestatic . ◆ subBlock(). template<Size N, class T , typename IndexType > . te",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01sofa_1_1type_1_1_vec_3_01_n_00_01_t_01_4_00_01_index_type_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01sofa_1_1type_1_1_vec_3_01_n_00_01_t_01_4_00_01_index_type_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01sofa_1_1type_1_1_vec_3_01_n_00_01_t_01_4_00_01_index_type_01_4.html:1116,Usability,clear,clear,1116," SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType > Class Template Reference . #include <matrix_bloc_traits.h>. Static Public Member Functions; static Real & v (Block &b, int, int col);  ; static const Real & v (const Block &b, int, int col);  ; static void vset (Block &b, int, int col, Real v);  ; static void vadd (Block &b, int, int col, Real v);  ; static void clear (Block &b);  ; static bool empty (const Block &b);  ; static Block transposed (const Block &b);  ; static void transpose (Block &res, const Block &b);  ; template<class TSubBlock , std::enable_if_t< std::is_scalar_v< TSubBlock >, bool > = true> ; static void subBlock (const Block &b, IndexType row, IndexType col, TSubBlock &subBlock);  ; static sofa::linearalgebra::BaseMatrix::ElementType getElementType ();  ; static const std::string Name ();  . Function details. ◆ clear(). template<Size N, class T , typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >::clear ; (; Block & ; b). inlinestatic . ◆ empty(). template<Size N, class T , typename IndexType > . static bool sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >::empty ; (; const Block & ; b). inlinestatic . ◆ getElementType(). template<Size N, class T , typename IndexType > . static sofa::linearalgebra::BaseMatrix::ElementType sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >::getElementType ; (; ). inlinestatic . ◆ Name(). template<Size N, class T , typename IndexType > . static const std::string sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >::Name ; (; ). inlinestatic . ◆ subBlock(). template<Size N, class T , typename IndexType > . template<class TSubBlock , std::enable_if_t< std::is_scalar_v< TSubBlock >, bool > = true> . static void sofa::linearalg",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01sofa_1_1type_1_1_vec_3_01_n_00_01_t_01_4_00_01_index_type_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01sofa_1_1type_1_1_vec_3_01_n_00_01_t_01_4_00_01_index_type_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01sofa_1_1type_1_1_vec_3_01_n_00_01_t_01_4_00_01_index_type_01_4.html:1266,Usability,clear,clear,1266," all members . sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType > Class Template Reference . #include <matrix_bloc_traits.h>. Static Public Member Functions; static Real & v (Block &b, int, int col);  ; static const Real & v (const Block &b, int, int col);  ; static void vset (Block &b, int, int col, Real v);  ; static void vadd (Block &b, int, int col, Real v);  ; static void clear (Block &b);  ; static bool empty (const Block &b);  ; static Block transposed (const Block &b);  ; static void transpose (Block &res, const Block &b);  ; template<class TSubBlock , std::enable_if_t< std::is_scalar_v< TSubBlock >, bool > = true> ; static void subBlock (const Block &b, IndexType row, IndexType col, TSubBlock &subBlock);  ; static sofa::linearalgebra::BaseMatrix::ElementType getElementType ();  ; static const std::string Name ();  . Function details. ◆ clear(). template<Size N, class T , typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >::clear ; (; Block & ; b). inlinestatic . ◆ empty(). template<Size N, class T , typename IndexType > . static bool sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >::empty ; (; const Block & ; b). inlinestatic . ◆ getElementType(). template<Size N, class T , typename IndexType > . static sofa::linearalgebra::BaseMatrix::ElementType sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >::getElementType ; (; ). inlinestatic . ◆ Name(). template<Size N, class T , typename IndexType > . static const std::string sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >::Name ; (; ). inlinestatic . ◆ subBlock(). template<Size N, class T , typename IndexType > . template<class TSubBlock , std::enable_if_t< std::is_scalar_v< TSubBlock >, bool > = true> . static void sofa::linearalgebra::matrix_bloc_traits< sofa::type::Vec< N, T >, IndexType >::subBlock ; (; const Block & ; b, . IndexType ; ro",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01sofa_1_1type_1_1_vec_3_01_n_00_01_t_01_4_00_01_index_type_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01sofa_1_1type_1_1_vec_3_01_n_00_01_t_01_4_00_01_index_type_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01type_1_1_mat_3_01_l_00_01_c_00_01real_01_4_00_01_index_type_01_4-members.html:326,Modifiability,inherit,inherited,326,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType > Member List . This is the complete list of members for sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >, including all inherited members. Block typedefsofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >; BlockTranspose typedefsofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >; clear(Block &b)sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >inlinestatic; empty(const Block &b)sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >inlinestatic; getElementType()sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >inlinestatic; invert(Block &result, const Block &b)sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >inlinestatic; Name()sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >inlinestatic; NC enum valuesofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >; NL enum valuesofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >; Real typedefsofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >; split_col_index(IndexType &index, IndexType &modulo)sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >inlinestatic; split_row_index(IndexType &index, IndexType &modulo)sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >inlinestatic; subBlock(const Block &b, IndexType row, IndexType col, TSubBlock &subBlock)sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >inlinestatic; v(Block &b, Index row, Index col)sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >inlinestatic; v(const Block &b, Index row, Index col)sofa::linearalgebra::ma",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01type_1_1_mat_3_01_l_00_01_c_00_01real_01_4_00_01_index_type_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01type_1_1_mat_3_01_l_00_01_c_00_01real_01_4_00_01_index_type_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01type_1_1_mat_3_01_l_00_01_c_00_01real_01_4_00_01_index_type_01_4-members.html:538,Usability,clear,clear,538,"bers. Block typedefsofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >; BlockTranspose typedefsofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >; clear(Block &b)sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >inlinestatic; empty(const Block &b)sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >inlinestatic; getElementType()sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >inlinestatic; invert(Block &result, const Block &b)sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >inlinestatic; Name()sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >inlinestatic; NC enum valuesofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >; NL enum valuesofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >; Real typedefsofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >; split_col_index(IndexType &index, IndexType &modulo)sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >inlinestatic; split_row_index(IndexType &index, IndexType &modulo)sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >inlinestatic; subBlock(const Block &b, IndexType row, IndexType col, TSubBlock &subBlock)sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >inlinestatic; v(Block &b, Index row, Index col)sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >inlinestatic; v(const Block &b, Index row, Index col)sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >inlinestatic; vadd(Block &b, int row, int col, Real val)sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >inlinestatic; vset(Block &b, int row, int col, Real val)sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >inlinestatic. Gene",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01type_1_1_mat_3_01_l_00_01_c_00_01real_01_4_00_01_index_type_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01type_1_1_mat_3_01_l_00_01_c_00_01real_01_4_00_01_index_type_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01type_1_1_mat_3_01_l_00_01_c_00_01real_01_4_00_01_index_type_01_4.html:667,Usability,clear,clear,667,"﻿. SOFA API: sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType > Class Template Reference . #include <matrix_bloc_traits.h>. Static Public Member Functions; static Real & v (Block &b, Index row, Index col);  ; static const Real & v (const Block &b, Index row, Index col);  ; static void vset (Block &b, int row, int col, Real val);  ; static void vadd (Block &b, int row, int col, Real val);  ; static void clear (Block &b);  ; static bool empty (const Block &b);  ; static void invert (Block &result, const Block &b);  ; static void split_row_index (IndexType &index, IndexType &modulo);  ; static void split_col_index (IndexType &index, IndexType &modulo);  ; template<class TSubBlock > ; static void subBlock (const Block &b, IndexType row, IndexType col, TSubBlock &subBlock);  ; static sofa::linearalgebra::BaseMatrix::ElementType getElementType ();  ; static const std::string Name ();  . Function details. ◆ clear(). template<Size L, Size C, class real , typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >::clear ; (; Block & ; b). inlinestatic . ◆ empty(). template<Size L, Size C, class real , typename IndexType > . static bool sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >::empty ; (; const Block & ; b). inlinestatic . ◆ getElementType(). template<Size L, Size C, class real , typename IndexType > . static sofa::linearalgebra::BaseMatrix::ElementType sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >::getElementType ; (; ). inlinestatic . ◆ invert(). template<Size L, Size C, class real , typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >::in",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01type_1_1_mat_3_01_l_00_01_c_00_01real_01_4_00_01_index_type_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01type_1_1_mat_3_01_l_00_01_c_00_01real_01_4_00_01_index_type_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01type_1_1_mat_3_01_l_00_01_c_00_01real_01_4_00_01_index_type_01_4.html:1175,Usability,clear,clear,1175,"cs simuation. Static Public Member Functions |; List of all members . sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType > Class Template Reference . #include <matrix_bloc_traits.h>. Static Public Member Functions; static Real & v (Block &b, Index row, Index col);  ; static const Real & v (const Block &b, Index row, Index col);  ; static void vset (Block &b, int row, int col, Real val);  ; static void vadd (Block &b, int row, int col, Real val);  ; static void clear (Block &b);  ; static bool empty (const Block &b);  ; static void invert (Block &result, const Block &b);  ; static void split_row_index (IndexType &index, IndexType &modulo);  ; static void split_col_index (IndexType &index, IndexType &modulo);  ; template<class TSubBlock > ; static void subBlock (const Block &b, IndexType row, IndexType col, TSubBlock &subBlock);  ; static sofa::linearalgebra::BaseMatrix::ElementType getElementType ();  ; static const std::string Name ();  . Function details. ◆ clear(). template<Size L, Size C, class real , typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >::clear ; (; Block & ; b). inlinestatic . ◆ empty(). template<Size L, Size C, class real , typename IndexType > . static bool sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >::empty ; (; const Block & ; b). inlinestatic . ◆ getElementType(). template<Size L, Size C, class real , typename IndexType > . static sofa::linearalgebra::BaseMatrix::ElementType sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >::getElementType ; (; ). inlinestatic . ◆ invert(). template<Size L, Size C, class real , typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >::invert ; (; Block & ; result, . const Block & ; b . ). inlinestatic . ◆ Name(). template<Size L, Size C, class real , typename IndexType > . static const std::string sofa::lineara",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01type_1_1_mat_3_01_l_00_01_c_00_01real_01_4_00_01_index_type_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01type_1_1_mat_3_01_l_00_01_c_00_01real_01_4_00_01_index_type_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01type_1_1_mat_3_01_l_00_01_c_00_01real_01_4_00_01_index_type_01_4.html:1336,Usability,clear,clear,1336,"C, real >, IndexType > Class Template Reference . #include <matrix_bloc_traits.h>. Static Public Member Functions; static Real & v (Block &b, Index row, Index col);  ; static const Real & v (const Block &b, Index row, Index col);  ; static void vset (Block &b, int row, int col, Real val);  ; static void vadd (Block &b, int row, int col, Real val);  ; static void clear (Block &b);  ; static bool empty (const Block &b);  ; static void invert (Block &result, const Block &b);  ; static void split_row_index (IndexType &index, IndexType &modulo);  ; static void split_col_index (IndexType &index, IndexType &modulo);  ; template<class TSubBlock > ; static void subBlock (const Block &b, IndexType row, IndexType col, TSubBlock &subBlock);  ; static sofa::linearalgebra::BaseMatrix::ElementType getElementType ();  ; static const std::string Name ();  . Function details. ◆ clear(). template<Size L, Size C, class real , typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >::clear ; (; Block & ; b). inlinestatic . ◆ empty(). template<Size L, Size C, class real , typename IndexType > . static bool sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >::empty ; (; const Block & ; b). inlinestatic . ◆ getElementType(). template<Size L, Size C, class real , typename IndexType > . static sofa::linearalgebra::BaseMatrix::ElementType sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >::getElementType ; (; ). inlinestatic . ◆ invert(). template<Size L, Size C, class real , typename IndexType > . static void sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >::invert ; (; Block & ; result, . const Block & ; b . ). inlinestatic . ◆ Name(). template<Size L, Size C, class real , typename IndexType > . static const std::string sofa::linearalgebra::matrix_bloc_traits< type::Mat< L, C, real >, IndexType >::Name ; (; ). inlinestatic . ◆ split_col_index(). template<",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01type_1_1_mat_3_01_l_00_01_c_00_01real_01_4_00_01_index_type_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1matrix__bloc__traits_3_01type_1_1_mat_3_01_l_00_01_c_00_01real_01_4_00_01_index_type_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1sparsematrixproduct_1_1_index_value_product-members.html:310,Modifiability,inherit,inherited,310,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::sparsematrixproduct::IndexValueProduct< Scalar > Member List . This is the complete list of members for sofa::linearalgebra::sparsematrixproduct::IndexValueProduct< Scalar >, including all inherited members. getIndices() constsofa::linearalgebra::sparsematrixproduct::IndexValueProduct< Scalar >inline; IndexValueProduct()=defaultsofa::linearalgebra::sparsematrixproduct::IndexValueProduct< Scalar >; IndexValueProduct(AnyScalar s)sofa::linearalgebra::sparsematrixproduct::IndexValueProduct< Scalar >inline; IndexValueProduct(const IndexValueProduct< AnyScalar > &other)sofa::linearalgebra::sparsematrixproduct::IndexValueProduct< Scalar >inline; operator Scalar() constsofa::linearalgebra::sparsematrixproduct::IndexValueProduct< Scalar >inline; operator*(const IndexedValue< ScalarLhs > &lhs, const IndexedValue< ScalarRhs > &rhs)sofa::linearalgebra::sparsematrixproduct::IndexValueProduct< Scalar >friend; operator+=(const IndexValueProduct< AnyScalar > &other)sofa::linearalgebra::sparsematrixproduct::IndexValueProduct< Scalar >inline. Generated on Mon Nov 11 2024 03:32:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1sparsematrixproduct_1_1_index_value_product-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1sparsematrixproduct_1_1_index_value_product-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:270,Modifiability,inherit,inherited,270,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::testing::TestBaseMatrix< T > Member List . This is the complete list of members for sofa::linearalgebra::testing::TestBaseMatrix< T >, including all inherited members. BaseTest()sofa::testing::BaseTest; checkAddBloc(sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol)sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkAddScalar()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkResize()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:751,Modifiability,Inherit,Inherit,751,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::testing::TestBaseMatrix< T > Member List . This is the complete list of members for sofa::linearalgebra::testing::TestBaseMatrix< T >, including all inherited members. BaseTest()sofa::testing::BaseTest; checkAddBloc(sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol)sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkAddScalar()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkResize()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:121,Testability,test,testing,121,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::testing::TestBaseMatrix< T > Member List . This is the complete list of members for sofa::linearalgebra::testing::TestBaseMatrix< T >, including all inherited members. BaseTest()sofa::testing::BaseTest; checkAddBloc(sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol)sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkAddScalar()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkResize()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:130,Testability,Test,TestBaseMatrix,130,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::testing::TestBaseMatrix< T > Member List . This is the complete list of members for sofa::linearalgebra::testing::TestBaseMatrix< T >, including all inherited members. BaseTest()sofa::testing::BaseTest; checkAddBloc(sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol)sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkAddScalar()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkResize()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:226,Testability,test,testing,226,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::testing::TestBaseMatrix< T > Member List . This is the complete list of members for sofa::linearalgebra::testing::TestBaseMatrix< T >, including all inherited members. BaseTest()sofa::testing::BaseTest; checkAddBloc(sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol)sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkAddScalar()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkResize()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:235,Testability,Test,TestBaseMatrix,235,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::testing::TestBaseMatrix< T > Member List . This is the complete list of members for sofa::linearalgebra::testing::TestBaseMatrix< T >, including all inherited members. BaseTest()sofa::testing::BaseTest; checkAddBloc(sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol)sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkAddScalar()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkResize()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:305,Testability,test,testing,305,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::testing::TestBaseMatrix< T > Member List . This is the complete list of members for sofa::linearalgebra::testing::TestBaseMatrix< T >, including all inherited members. BaseTest()sofa::testing::BaseTest; checkAddBloc(sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol)sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkAddScalar()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkResize()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:451,Testability,test,testing,451,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::testing::TestBaseMatrix< T > Member List . This is the complete list of members for sofa::linearalgebra::testing::TestBaseMatrix< T >, including all inherited members. BaseTest()sofa::testing::BaseTest; checkAddBloc(sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol)sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkAddScalar()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkResize()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:460,Testability,Test,TestBaseMatrix,460,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::testing::TestBaseMatrix< T > Member List . This is the complete list of members for sofa::linearalgebra::testing::TestBaseMatrix< T >, including all inherited members. BaseTest()sofa::testing::BaseTest; checkAddBloc(sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol)sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkAddScalar()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkResize()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:524,Testability,test,testing,524,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::testing::TestBaseMatrix< T > Member List . This is the complete list of members for sofa::linearalgebra::testing::TestBaseMatrix< T >, including all inherited members. BaseTest()sofa::testing::BaseTest; checkAddBloc(sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol)sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkAddScalar()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkResize()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:533,Testability,Test,TestBaseMatrix,533,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::testing::TestBaseMatrix< T > Member List . This is the complete list of members for sofa::linearalgebra::testing::TestBaseMatrix< T >, including all inherited members. BaseTest()sofa::testing::BaseTest; checkAddBloc(sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol)sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkAddScalar()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkResize()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:594,Testability,test,testing,594,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::testing::TestBaseMatrix< T > Member List . This is the complete list of members for sofa::linearalgebra::testing::TestBaseMatrix< T >, including all inherited members. BaseTest()sofa::testing::BaseTest; checkAddBloc(sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol)sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkAddScalar()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkResize()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:603,Testability,Test,TestBaseMatrix,603,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::testing::TestBaseMatrix< T > Member List . This is the complete list of members for sofa::linearalgebra::testing::TestBaseMatrix< T >, including all inherited members. BaseTest()sofa::testing::BaseTest; checkAddBloc(sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol)sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkAddScalar()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkResize()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:645,Testability,test,testing,645,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::testing::TestBaseMatrix< T > Member List . This is the complete list of members for sofa::linearalgebra::testing::TestBaseMatrix< T >, including all inherited members. BaseTest()sofa::testing::BaseTest; checkAddBloc(sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol)sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkAddScalar()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkResize()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:706,Testability,test,testing,706,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::testing::TestBaseMatrix< T > Member List . This is the complete list of members for sofa::linearalgebra::testing::TestBaseMatrix< T >, including all inherited members. BaseTest()sofa::testing::BaseTest; checkAddBloc(sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol)sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkAddScalar()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkResize()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:787,Testability,test,testing,787,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::testing::TestBaseMatrix< T > Member List . This is the complete list of members for sofa::linearalgebra::testing::TestBaseMatrix< T >, including all inherited members. BaseTest()sofa::testing::BaseTest; checkAddBloc(sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol)sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkAddScalar()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkResize()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:796,Testability,Test,TestBaseMatrix,796,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::testing::TestBaseMatrix< T > Member List . This is the complete list of members for sofa::linearalgebra::testing::TestBaseMatrix< T >, including all inherited members. BaseTest()sofa::testing::BaseTest; checkAddBloc(sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol)sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkAddScalar()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; checkResize()sofa::linearalgebra::testing::TestBaseMatrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:853,Testability,test,testing,853,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:911,Testability,test,testing,911,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:943,Testability,test,testing,943,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:996,Testability,test,testing,996,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:1005,Testability,Test,TestBaseMatrix,1005,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:1070,Testability,test,testing,1070,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:1079,Testability,Test,TestBaseMatrix,1079,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:1144,Testability,test,testing,1144,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:1153,Testability,Test,TestBaseMatrix,1153,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:1231,Testability,test,testing,1231,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:1355,Testability,test,testing,1355,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:1427,Testability,test,testing,1427,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:1436,Testability,Test,TestBaseMatrix,1436,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:1490,Testability,test,testing,1490,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:1499,Testability,Test,TestBaseMatrix,1499,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:1545,Testability,test,testing,1545,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:1619,Testability,test,testing,1619,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:1688,Testability,test,testing,1688,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:1761,Testability,test,testing,1761,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:1839,Testability,test,testing,1839,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:1848,Testability,Test,TestBaseMatrix,1848,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:1924,Testability,test,testing,1924,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:1933,Testability,Test,TestBaseMatrix,1933,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:2000,Testability,test,testing,2000,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:2009,Testability,Test,TestBaseMatrix,2009,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:2040,Testability,test,testing,2040,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:2103,Testability,test,testing,2103,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:2218,Testability,test,testing,2218,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:2358,Testability,test,testing,2358,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:2466,Testability,test,testing,2466,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html:2531,Testability,test,testing,2531,"atrix< T >inline; epsilon()sofa::testing::NumericTest< T::Real >inlinestatic; infinity()sofa::testing::NumericTest< T::Real >inlinestatic; Inherit typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; isSmall(Real r, Real ratio=1.)sofa::testing::NumericTest< T::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_modelMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; m_testedMatrixsofa::linearalgebra::testing::TestBaseMatrix< T >protected; Matrix typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; NbColssofa::linearalgebra::testing::TestBaseMatrix< T >static; NbRowssofa::linearalgebra::testing::TestBaseMatrix< T >static; norm(float a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< T::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< T::Real >inline; onSetUp() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; onTearDown() overridesofa::linearalgebra::testing::TestBaseMatrix< T >inlinevirtual; Real typedefsofa::linearalgebra::testing::TestBaseMatrix< T >; seedsofa::testing::BaseTeststatic; vectorMaxAbs(const Container &c)sofa::testing::NumericTest< T::Real >inline; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const Vector2 &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2)sofa::testing::NumericTest< T::Real >inlinestatic; vectorMaxDiff(const Container1 &c1, const Container2 &c2)sofa::testing::NumericTest< T::Real >inline; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:1601,Availability,failure,failure,1601,"aseMatrix< T >; Type-parameterized tests for classes derived from BaseMatrix. . Static Public Attributes; static constexpr sofa::Index NbRows = T::NbRows;  ; static constexpr sofa::Index NbCols = T::NbCols;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Protected Attributes; sofa::type::Mat< NbRows, NbCols, Real > m_modelMatrix;  ; std::unique_ptr< sofa::linearalgebra::BaseMatrix > m_testedMatrix {nullptr};  . Public Member Functions; void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Member Functions inherited from sofa::testing::NumericTest< T::Real >; static Real matrixMaxDiff (const Matrix1 &m1, const Matrix2 &m2);  return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes More...;  ; static Real matrixMaxDiff (const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2);  Return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes. More...;  ; static Real epsi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:2020,Integrability,Message,MessageAsTestFailure,2020,"void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Member Functions inherited from sofa::testing::NumericTest< T::Real >; static Real matrixMaxDiff (const Matrix1 &m1, const Matrix2 &m2);  return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes More...;  ; static Real matrixMaxDiff (const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2);  Return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes. More...;  ; static Real epsilon ();  the smallest real number More...;  ; static Real infinity ();  Infinity. More...;  ; static bool isSmall (Real r, Real ratio=1.);  true if the magnitude of r is less than ratio*epsilon More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const Vector2 &m2);  return the maximum difference between corresponding entries, or the infinity if the vectors have different sizes More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2);  return the",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:2068,Integrability,Message,MessageAsTestFailure,2068,"void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Member Functions inherited from sofa::testing::NumericTest< T::Real >; static Real matrixMaxDiff (const Matrix1 &m1, const Matrix2 &m2);  return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes More...;  ; static Real matrixMaxDiff (const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2);  Return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes. More...;  ; static Real epsilon ();  the smallest real number More...;  ; static Real infinity ();  Infinity. More...;  ; static bool isSmall (Real r, Real ratio=1.);  true if the magnitude of r is less than ratio*epsilon More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const Vector2 &m2);  return the maximum difference between corresponding entries, or the infinity if the vectors have different sizes More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2);  return the",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:376,Modifiability,parameteriz,parameterized,376,"﻿. SOFA API: sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference . #include <BaseMatrix_test.h>; Type-parameterized tests for classes derived from BaseMatrix. ; More... Inheritance diagram for sofa::linearalgebra::testing::TestBaseMatrix< T >:. [legend]; Detailed Description; template<class T>; class sofa::linearalgebra::testing::TestBaseMatrix< T >; Type-parameterized tests for classes derived from BaseMatrix. . Static Public Attributes; static constexpr sofa::Index NbRows = T::NbRows;  ; static constexpr sofa::Index NbCols = T::NbCols;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Protected Attributes; sofa::type::Mat< NbRows, NbCols, Real > m_modelMatrix;  ; std::unique_ptr< sofa::linearalgebra::BaseMatrix > m_testedMatrix {nullptr};  . Public Member Functions; void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:443,Modifiability,Inherit,Inheritance,443,"﻿. SOFA API: sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference . #include <BaseMatrix_test.h>; Type-parameterized tests for classes derived from BaseMatrix. ; More... Inheritance diagram for sofa::linearalgebra::testing::TestBaseMatrix< T >:. [legend]; Detailed Description; template<class T>; class sofa::linearalgebra::testing::TestBaseMatrix< T >; Type-parameterized tests for classes derived from BaseMatrix. . Static Public Attributes; static constexpr sofa::Index NbRows = T::NbRows;  ; static constexpr sofa::Index NbCols = T::NbCols;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Protected Attributes; sofa::type::Mat< NbRows, NbCols, Real > m_modelMatrix;  ; std::unique_ptr< sofa::linearalgebra::BaseMatrix > m_testedMatrix {nullptr};  . Public Member Functions; void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:632,Modifiability,parameteriz,parameterized,632,"﻿. SOFA API: sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference . #include <BaseMatrix_test.h>; Type-parameterized tests for classes derived from BaseMatrix. ; More... Inheritance diagram for sofa::linearalgebra::testing::TestBaseMatrix< T >:. [legend]; Detailed Description; template<class T>; class sofa::linearalgebra::testing::TestBaseMatrix< T >; Type-parameterized tests for classes derived from BaseMatrix. . Static Public Attributes; static constexpr sofa::Index NbRows = T::NbRows;  ; static constexpr sofa::Index NbCols = T::NbCols;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Protected Attributes; sofa::type::Mat< NbRows, NbCols, Real > m_modelMatrix;  ; std::unique_ptr< sofa::linearalgebra::BaseMatrix > m_testedMatrix {nullptr};  . Public Member Functions; void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:847,Modifiability,inherit,inherited,847,"﻿. SOFA API: sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference . #include <BaseMatrix_test.h>; Type-parameterized tests for classes derived from BaseMatrix. ; More... Inheritance diagram for sofa::linearalgebra::testing::TestBaseMatrix< T >:. [legend]; Detailed Description; template<class T>; class sofa::linearalgebra::testing::TestBaseMatrix< T >; Type-parameterized tests for classes derived from BaseMatrix. . Static Public Attributes; static constexpr sofa::Index NbRows = T::NbRows;  ; static constexpr sofa::Index NbCols = T::NbCols;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Protected Attributes; sofa::type::Mat< NbRows, NbCols, Real > m_modelMatrix;  ; std::unique_ptr< sofa::linearalgebra::BaseMatrix > m_testedMatrix {nullptr};  . Public Member Functions; void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:1398,Modifiability,inherit,inherited,1398,"eMatrix_test.h>; Type-parameterized tests for classes derived from BaseMatrix. ; More... Inheritance diagram for sofa::linearalgebra::testing::TestBaseMatrix< T >:. [legend]; Detailed Description; template<class T>; class sofa::linearalgebra::testing::TestBaseMatrix< T >; Type-parameterized tests for classes derived from BaseMatrix. . Static Public Attributes; static constexpr sofa::Index NbRows = T::NbRows;  ; static constexpr sofa::Index NbCols = T::NbCols;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Protected Attributes; sofa::type::Mat< NbRows, NbCols, Real > m_modelMatrix;  ; std::unique_ptr< sofa::linearalgebra::BaseMatrix > m_testedMatrix {nullptr};  . Public Member Functions; void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Member Functions inherited from sofa::testing::NumericTest< T::Real >; static Real matrixMaxDiff (const Matrix1 &m1, const Matrix2 &m2);  return the maximum difference between corresponding entries, or the infinity if the matrices have dif",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:1773,Modifiability,inherit,inherited,1773,":NbCols;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Protected Attributes; sofa::type::Mat< NbRows, NbCols, Real > m_modelMatrix;  ; std::unique_ptr< sofa::linearalgebra::BaseMatrix > m_testedMatrix {nullptr};  . Public Member Functions; void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Member Functions inherited from sofa::testing::NumericTest< T::Real >; static Real matrixMaxDiff (const Matrix1 &m1, const Matrix2 &m2);  return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes More...;  ; static Real matrixMaxDiff (const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2);  Return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes. More...;  ; static Real epsilon ();  the smallest real number More...;  ; static Real infinity ();  Infinity. More...;  ; static bool isSmall (Real r, Real ratio=1.);  true if the magnitude of r is less than ratio*epsilon More",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:1927,Modifiability,Inherit,Inherited,1927,"void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Member Functions inherited from sofa::testing::NumericTest< T::Real >; static Real matrixMaxDiff (const Matrix1 &m1, const Matrix2 &m2);  return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes More...;  ; static Real matrixMaxDiff (const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2);  Return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes. More...;  ; static Real epsilon ();  the smallest real number More...;  ; static Real infinity ();  Infinity. More...;  ; static bool isSmall (Real r, Real ratio=1.);  true if the magnitude of r is less than ratio*epsilon More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const Vector2 &m2);  return the maximum difference between corresponding entries, or the infinity if the vectors have different sizes More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2);  return the",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:1965,Modifiability,inherit,inherited,1965,"void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Member Functions inherited from sofa::testing::NumericTest< T::Real >; static Real matrixMaxDiff (const Matrix1 &m1, const Matrix2 &m2);  return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes More...;  ; static Real matrixMaxDiff (const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2);  Return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes. More...;  ; static Real epsilon ();  the smallest real number More...;  ; static Real infinity ();  Infinity. More...;  ; static bool isSmall (Real r, Real ratio=1.);  true if the magnitude of r is less than ratio*epsilon More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const Vector2 &m2);  return the maximum difference between corresponding entries, or the infinity if the vectors have different sizes More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2);  return the",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:2133,Modifiability,inherit,inherited,2133,"void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Member Functions inherited from sofa::testing::NumericTest< T::Real >; static Real matrixMaxDiff (const Matrix1 &m1, const Matrix2 &m2);  return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes More...;  ; static Real matrixMaxDiff (const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2);  Return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes. More...;  ; static Real epsilon ();  the smallest real number More...;  ; static Real infinity ();  Infinity. More...;  ; static bool isSmall (Real r, Real ratio=1.);  true if the magnitude of r is less than ratio*epsilon More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const Vector2 &m2);  return the maximum difference between corresponding entries, or the infinity if the vectors have different sizes More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2);  return the",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:3241,Modifiability,inherit,inherited,3241,"rresponding entries, or the infinity if the matrices have different sizes More...;  ; static Real matrixMaxDiff (const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2);  Return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes. More...;  ; static Real epsilon ();  the smallest real number More...;  ; static Real infinity ();  Infinity. More...;  ; static bool isSmall (Real r, Real ratio=1.);  true if the magnitude of r is less than ratio*epsilon More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const Vector2 &m2);  return the maximum difference between corresponding entries, or the infinity if the vectors have different sizes More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2);  return the maximum difference between corresponding entries More...;  ;  Static Protected Member Functions inherited from sofa::testing::NumericTest< T::Real >; static float norm (float a);  ; static double norm (double a);  ; static Real norm (T a);  . Attribute details. ◆ m_modelMatrix. template<class T > . sofa::type::Mat<NbRows, NbCols, Real> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_modelMatrix. protected . ◆ m_testedMatrix. template<class T > . std::unique_ptr<sofa::linearalgebra::BaseMatrix> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_testedMatrix {nullptr}. protected . ◆ NbCols. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbCols = T::NbCols. staticconstexpr . ◆ NbRows. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbRows = T::NbRows. staticconstexpr . Function details. ◆ checkAddBloc(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddBloc ; (; sofa::linearalgebra::BaseMatrix::Index ; posRow, . sofa::linearalgebra::BaseMatrix::Index ; posCol . ). inline . A 3x3 matrix is added into t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:34,Testability,test,testing,34,"﻿. SOFA API: sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference . #include <BaseMatrix_test.h>; Type-parameterized tests for classes derived from BaseMatrix. ; More... Inheritance diagram for sofa::linearalgebra::testing::TestBaseMatrix< T >:. [legend]; Detailed Description; template<class T>; class sofa::linearalgebra::testing::TestBaseMatrix< T >; Type-parameterized tests for classes derived from BaseMatrix. . Static Public Attributes; static constexpr sofa::Index NbRows = T::NbRows;  ; static constexpr sofa::Index NbCols = T::NbCols;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Protected Attributes; sofa::type::Mat< NbRows, NbCols, Real > m_modelMatrix;  ; std::unique_ptr< sofa::linearalgebra::BaseMatrix > m_testedMatrix {nullptr};  . Public Member Functions; void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:43,Testability,Test,TestBaseMatrix,43,"﻿. SOFA API: sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference . #include <BaseMatrix_test.h>; Type-parameterized tests for classes derived from BaseMatrix. ; More... Inheritance diagram for sofa::linearalgebra::testing::TestBaseMatrix< T >:. [legend]; Detailed Description; template<class T>; class sofa::linearalgebra::testing::TestBaseMatrix< T >; Type-parameterized tests for classes derived from BaseMatrix. . Static Public Attributes; static constexpr sofa::Index NbRows = T::NbRows;  ; static constexpr sofa::Index NbCols = T::NbCols;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Protected Attributes; sofa::type::Mat< NbRows, NbCols, Real > m_modelMatrix;  ; std::unique_ptr< sofa::linearalgebra::BaseMatrix > m_testedMatrix {nullptr};  . Public Member Functions; void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:285,Testability,test,testing,285,"﻿. SOFA API: sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference . #include <BaseMatrix_test.h>; Type-parameterized tests for classes derived from BaseMatrix. ; More... Inheritance diagram for sofa::linearalgebra::testing::TestBaseMatrix< T >:. [legend]; Detailed Description; template<class T>; class sofa::linearalgebra::testing::TestBaseMatrix< T >; Type-parameterized tests for classes derived from BaseMatrix. . Static Public Attributes; static constexpr sofa::Index NbRows = T::NbRows;  ; static constexpr sofa::Index NbCols = T::NbCols;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Protected Attributes; sofa::type::Mat< NbRows, NbCols, Real > m_modelMatrix;  ; std::unique_ptr< sofa::linearalgebra::BaseMatrix > m_testedMatrix {nullptr};  . Public Member Functions; void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:294,Testability,Test,TestBaseMatrix,294,"﻿. SOFA API: sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference . #include <BaseMatrix_test.h>; Type-parameterized tests for classes derived from BaseMatrix. ; More... Inheritance diagram for sofa::linearalgebra::testing::TestBaseMatrix< T >:. [legend]; Detailed Description; template<class T>; class sofa::linearalgebra::testing::TestBaseMatrix< T >; Type-parameterized tests for classes derived from BaseMatrix. . Static Public Attributes; static constexpr sofa::Index NbRows = T::NbRows;  ; static constexpr sofa::Index NbCols = T::NbCols;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Protected Attributes; sofa::type::Mat< NbRows, NbCols, Real > m_modelMatrix;  ; std::unique_ptr< sofa::linearalgebra::BaseMatrix > m_testedMatrix {nullptr};  . Public Member Functions; void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:390,Testability,test,tests,390,"﻿. SOFA API: sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference . #include <BaseMatrix_test.h>; Type-parameterized tests for classes derived from BaseMatrix. ; More... Inheritance diagram for sofa::linearalgebra::testing::TestBaseMatrix< T >:. [legend]; Detailed Description; template<class T>; class sofa::linearalgebra::testing::TestBaseMatrix< T >; Type-parameterized tests for classes derived from BaseMatrix. . Static Public Attributes; static constexpr sofa::Index NbRows = T::NbRows;  ; static constexpr sofa::Index NbCols = T::NbCols;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Protected Attributes; sofa::type::Mat< NbRows, NbCols, Real > m_modelMatrix;  ; std::unique_ptr< sofa::linearalgebra::BaseMatrix > m_testedMatrix {nullptr};  . Public Member Functions; void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:488,Testability,test,testing,488,"﻿. SOFA API: sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference . #include <BaseMatrix_test.h>; Type-parameterized tests for classes derived from BaseMatrix. ; More... Inheritance diagram for sofa::linearalgebra::testing::TestBaseMatrix< T >:. [legend]; Detailed Description; template<class T>; class sofa::linearalgebra::testing::TestBaseMatrix< T >; Type-parameterized tests for classes derived from BaseMatrix. . Static Public Attributes; static constexpr sofa::Index NbRows = T::NbRows;  ; static constexpr sofa::Index NbCols = T::NbCols;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Protected Attributes; sofa::type::Mat< NbRows, NbCols, Real > m_modelMatrix;  ; std::unique_ptr< sofa::linearalgebra::BaseMatrix > m_testedMatrix {nullptr};  . Public Member Functions; void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:497,Testability,Test,TestBaseMatrix,497,"﻿. SOFA API: sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference . #include <BaseMatrix_test.h>; Type-parameterized tests for classes derived from BaseMatrix. ; More... Inheritance diagram for sofa::linearalgebra::testing::TestBaseMatrix< T >:. [legend]; Detailed Description; template<class T>; class sofa::linearalgebra::testing::TestBaseMatrix< T >; Type-parameterized tests for classes derived from BaseMatrix. . Static Public Attributes; static constexpr sofa::Index NbRows = T::NbRows;  ; static constexpr sofa::Index NbCols = T::NbCols;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Protected Attributes; sofa::type::Mat< NbRows, NbCols, Real > m_modelMatrix;  ; std::unique_ptr< sofa::linearalgebra::BaseMatrix > m_testedMatrix {nullptr};  . Public Member Functions; void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:597,Testability,test,testing,597,"﻿. SOFA API: sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference . #include <BaseMatrix_test.h>; Type-parameterized tests for classes derived from BaseMatrix. ; More... Inheritance diagram for sofa::linearalgebra::testing::TestBaseMatrix< T >:. [legend]; Detailed Description; template<class T>; class sofa::linearalgebra::testing::TestBaseMatrix< T >; Type-parameterized tests for classes derived from BaseMatrix. . Static Public Attributes; static constexpr sofa::Index NbRows = T::NbRows;  ; static constexpr sofa::Index NbCols = T::NbCols;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Protected Attributes; sofa::type::Mat< NbRows, NbCols, Real > m_modelMatrix;  ; std::unique_ptr< sofa::linearalgebra::BaseMatrix > m_testedMatrix {nullptr};  . Public Member Functions; void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:606,Testability,Test,TestBaseMatrix,606,"﻿. SOFA API: sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference . #include <BaseMatrix_test.h>; Type-parameterized tests for classes derived from BaseMatrix. ; More... Inheritance diagram for sofa::linearalgebra::testing::TestBaseMatrix< T >:. [legend]; Detailed Description; template<class T>; class sofa::linearalgebra::testing::TestBaseMatrix< T >; Type-parameterized tests for classes derived from BaseMatrix. . Static Public Attributes; static constexpr sofa::Index NbRows = T::NbRows;  ; static constexpr sofa::Index NbCols = T::NbCols;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Protected Attributes; sofa::type::Mat< NbRows, NbCols, Real > m_modelMatrix;  ; std::unique_ptr< sofa::linearalgebra::BaseMatrix > m_testedMatrix {nullptr};  . Public Member Functions; void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:646,Testability,test,tests,646,"﻿. SOFA API: sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference . #include <BaseMatrix_test.h>; Type-parameterized tests for classes derived from BaseMatrix. ; More... Inheritance diagram for sofa::linearalgebra::testing::TestBaseMatrix< T >:. [legend]; Detailed Description; template<class T>; class sofa::linearalgebra::testing::TestBaseMatrix< T >; Type-parameterized tests for classes derived from BaseMatrix. . Static Public Attributes; static constexpr sofa::Index NbRows = T::NbRows;  ; static constexpr sofa::Index NbCols = T::NbCols;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Protected Attributes; sofa::type::Mat< NbRows, NbCols, Real > m_modelMatrix;  ; std::unique_ptr< sofa::linearalgebra::BaseMatrix > m_testedMatrix {nullptr};  . Public Member Functions; void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:868,Testability,test,testing,868,"﻿. SOFA API: sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::linearalgebra::testing::TestBaseMatrix< T > Class Template Reference . #include <BaseMatrix_test.h>; Type-parameterized tests for classes derived from BaseMatrix. ; More... Inheritance diagram for sofa::linearalgebra::testing::TestBaseMatrix< T >:. [legend]; Detailed Description; template<class T>; class sofa::linearalgebra::testing::TestBaseMatrix< T >; Type-parameterized tests for classes derived from BaseMatrix. . Static Public Attributes; static constexpr sofa::Index NbRows = T::NbRows;  ; static constexpr sofa::Index NbCols = T::NbCols;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Protected Attributes; sofa::type::Mat< NbRows, NbCols, Real > m_modelMatrix;  ; std::unique_ptr< sofa::linearalgebra::BaseMatrix > m_testedMatrix {nullptr};  . Public Member Functions; void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:1419,Testability,test,testing,1419,"eMatrix_test.h>; Type-parameterized tests for classes derived from BaseMatrix. ; More... Inheritance diagram for sofa::linearalgebra::testing::TestBaseMatrix< T >:. [legend]; Detailed Description; template<class T>; class sofa::linearalgebra::testing::TestBaseMatrix< T >; Type-parameterized tests for classes derived from BaseMatrix. . Static Public Attributes; static constexpr sofa::Index NbRows = T::NbRows;  ; static constexpr sofa::Index NbCols = T::NbCols;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Protected Attributes; sofa::type::Mat< NbRows, NbCols, Real > m_modelMatrix;  ; std::unique_ptr< sofa::linearalgebra::BaseMatrix > m_testedMatrix {nullptr};  . Public Member Functions; void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Member Functions inherited from sofa::testing::NumericTest< T::Real >; static Real matrixMaxDiff (const Matrix1 &m1, const Matrix2 &m2);  return the maximum difference between corresponding entries, or the infinity if the matrices have dif",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:1794,Testability,test,testing,1794,":NbCols;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Protected Attributes; sofa::type::Mat< NbRows, NbCols, Real > m_modelMatrix;  ; std::unique_ptr< sofa::linearalgebra::BaseMatrix > m_testedMatrix {nullptr};  . Public Member Functions; void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Member Functions inherited from sofa::testing::NumericTest< T::Real >; static Real matrixMaxDiff (const Matrix1 &m1, const Matrix2 &m2);  return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes More...;  ; static Real matrixMaxDiff (const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2);  Return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes. More...;  ; static Real epsilon ();  the smallest real number More...;  ; static Real infinity ();  Infinity. More...;  ; static bool isSmall (Real r, Real ratio=1.);  true if the magnitude of r is less than ratio*epsilon More",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:1986,Testability,test,testing,1986,"void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Member Functions inherited from sofa::testing::NumericTest< T::Real >; static Real matrixMaxDiff (const Matrix1 &m1, const Matrix2 &m2);  return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes More...;  ; static Real matrixMaxDiff (const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2);  Return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes. More...;  ; static Real epsilon ();  the smallest real number More...;  ; static Real infinity ();  Infinity. More...;  ; static bool isSmall (Real r, Real ratio=1.);  true if the magnitude of r is less than ratio*epsilon More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const Vector2 &m2);  return the maximum difference between corresponding entries, or the infinity if the vectors have different sizes More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2);  return the",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:2011,Testability,test,testing,2011,"void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Member Functions inherited from sofa::testing::NumericTest< T::Real >; static Real matrixMaxDiff (const Matrix1 &m1, const Matrix2 &m2);  return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes More...;  ; static Real matrixMaxDiff (const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2);  Return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes. More...;  ; static Real epsilon ();  the smallest real number More...;  ; static Real infinity ();  Infinity. More...;  ; static bool isSmall (Real r, Real ratio=1.);  true if the magnitude of r is less than ratio*epsilon More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const Vector2 &m2);  return the maximum difference between corresponding entries, or the infinity if the vectors have different sizes More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2);  return the",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:2059,Testability,test,testing,2059,"void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Member Functions inherited from sofa::testing::NumericTest< T::Real >; static Real matrixMaxDiff (const Matrix1 &m1, const Matrix2 &m2);  return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes More...;  ; static Real matrixMaxDiff (const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2);  Return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes. More...;  ; static Real epsilon ();  the smallest real number More...;  ; static Real infinity ();  Infinity. More...;  ; static bool isSmall (Real r, Real ratio=1.);  true if the magnitude of r is less than ratio*epsilon More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const Vector2 &m2);  return the maximum difference between corresponding entries, or the infinity if the vectors have different sizes More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2);  return the",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:2154,Testability,test,testing,2154,"void onSetUp () override;  ; void onTearDown () override;  ; void checkResize ();  ; void checkAddScalar ();  ; void checkAddBloc (sofa::linearalgebra::BaseMatrix::Index posRow, sofa::linearalgebra::BaseMatrix::Index posCol);  ;  Public Member Functions inherited from sofa::testing::NumericTest< T::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Member Functions inherited from sofa::testing::NumericTest< T::Real >; static Real matrixMaxDiff (const Matrix1 &m1, const Matrix2 &m2);  return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes More...;  ; static Real matrixMaxDiff (const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2);  Return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes. More...;  ; static Real epsilon ();  the smallest real number More...;  ; static Real infinity ();  Infinity. More...;  ; static bool isSmall (Real r, Real ratio=1.);  true if the magnitude of r is less than ratio*epsilon More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const Vector2 &m2);  return the maximum difference between corresponding entries, or the infinity if the vectors have different sizes More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2);  return the",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:3262,Testability,test,testing,3262,"rresponding entries, or the infinity if the matrices have different sizes More...;  ; static Real matrixMaxDiff (const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2);  Return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes. More...;  ; static Real epsilon ();  the smallest real number More...;  ; static Real infinity ();  Infinity. More...;  ; static bool isSmall (Real r, Real ratio=1.);  true if the magnitude of r is less than ratio*epsilon More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const Vector2 &m2);  return the maximum difference between corresponding entries, or the infinity if the vectors have different sizes More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2);  return the maximum difference between corresponding entries More...;  ;  Static Protected Member Functions inherited from sofa::testing::NumericTest< T::Real >; static float norm (float a);  ; static double norm (double a);  ; static Real norm (T a);  . Attribute details. ◆ m_modelMatrix. template<class T > . sofa::type::Mat<NbRows, NbCols, Real> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_modelMatrix. protected . ◆ m_testedMatrix. template<class T > . std::unique_ptr<sofa::linearalgebra::BaseMatrix> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_testedMatrix {nullptr}. protected . ◆ NbCols. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbCols = T::NbCols. staticconstexpr . ◆ NbRows. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbRows = T::NbRows. staticconstexpr . Function details. ◆ checkAddBloc(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddBloc ; (; sofa::linearalgebra::BaseMatrix::Index ; posRow, . sofa::linearalgebra::BaseMatrix::Index ; posCol . ). inline . A 3x3 matrix is added into t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:3504,Testability,test,testing,3504,"ce between corresponding entries, or the infinity if the matrices have different sizes. More...;  ; static Real epsilon ();  the smallest real number More...;  ; static Real infinity ();  Infinity. More...;  ; static bool isSmall (Real r, Real ratio=1.);  true if the magnitude of r is less than ratio*epsilon More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const Vector2 &m2);  return the maximum difference between corresponding entries, or the infinity if the vectors have different sizes More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2);  return the maximum difference between corresponding entries More...;  ;  Static Protected Member Functions inherited from sofa::testing::NumericTest< T::Real >; static float norm (float a);  ; static double norm (double a);  ; static Real norm (T a);  . Attribute details. ◆ m_modelMatrix. template<class T > . sofa::type::Mat<NbRows, NbCols, Real> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_modelMatrix. protected . ◆ m_testedMatrix. template<class T > . std::unique_ptr<sofa::linearalgebra::BaseMatrix> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_testedMatrix {nullptr}. protected . ◆ NbCols. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbCols = T::NbCols. staticconstexpr . ◆ NbRows. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbRows = T::NbRows. staticconstexpr . Function details. ◆ checkAddBloc(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddBloc ; (; sofa::linearalgebra::BaseMatrix::Index ; posRow, . sofa::linearalgebra::BaseMatrix::Index ; posCol . ). inline . A 3x3 matrix is added into the matrix using the corresponding function overload This assumes the matrix is big enough to contain a 3x3 matrix at the requested position Parameters. posRowrow index at which the 3x3 matrix is added ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:3513,Testability,Test,TestBaseMatrix,3513,"ce between corresponding entries, or the infinity if the matrices have different sizes. More...;  ; static Real epsilon ();  the smallest real number More...;  ; static Real infinity ();  Infinity. More...;  ; static bool isSmall (Real r, Real ratio=1.);  true if the magnitude of r is less than ratio*epsilon More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const Vector2 &m2);  return the maximum difference between corresponding entries, or the infinity if the vectors have different sizes More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2);  return the maximum difference between corresponding entries More...;  ;  Static Protected Member Functions inherited from sofa::testing::NumericTest< T::Real >; static float norm (float a);  ; static double norm (double a);  ; static Real norm (T a);  . Attribute details. ◆ m_modelMatrix. template<class T > . sofa::type::Mat<NbRows, NbCols, Real> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_modelMatrix. protected . ◆ m_testedMatrix. template<class T > . std::unique_ptr<sofa::linearalgebra::BaseMatrix> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_testedMatrix {nullptr}. protected . ◆ NbCols. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbCols = T::NbCols. staticconstexpr . ◆ NbRows. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbRows = T::NbRows. staticconstexpr . Function details. ◆ checkAddBloc(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddBloc ; (; sofa::linearalgebra::BaseMatrix::Index ; posRow, . sofa::linearalgebra::BaseMatrix::Index ; posCol . ). inline . A 3x3 matrix is added into the matrix using the corresponding function overload This assumes the matrix is big enough to contain a 3x3 matrix at the requested position Parameters. posRowrow index at which the 3x3 matrix is added ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:3670,Testability,test,testing,3670,"ic Real infinity ();  Infinity. More...;  ; static bool isSmall (Real r, Real ratio=1.);  true if the magnitude of r is less than ratio*epsilon More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const Vector2 &m2);  return the maximum difference between corresponding entries, or the infinity if the vectors have different sizes More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2);  return the maximum difference between corresponding entries More...;  ;  Static Protected Member Functions inherited from sofa::testing::NumericTest< T::Real >; static float norm (float a);  ; static double norm (double a);  ; static Real norm (T a);  . Attribute details. ◆ m_modelMatrix. template<class T > . sofa::type::Mat<NbRows, NbCols, Real> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_modelMatrix. protected . ◆ m_testedMatrix. template<class T > . std::unique_ptr<sofa::linearalgebra::BaseMatrix> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_testedMatrix {nullptr}. protected . ◆ NbCols. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbCols = T::NbCols. staticconstexpr . ◆ NbRows. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbRows = T::NbRows. staticconstexpr . Function details. ◆ checkAddBloc(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddBloc ; (; sofa::linearalgebra::BaseMatrix::Index ; posRow, . sofa::linearalgebra::BaseMatrix::Index ; posCol . ). inline . A 3x3 matrix is added into the matrix using the corresponding function overload This assumes the matrix is big enough to contain a 3x3 matrix at the requested position Parameters. posRowrow index at which the 3x3 matrix is added ; posColcolumn index at which the 3x3 matrix is added . ◆ checkAddScalar(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddScalar",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:3679,Testability,Test,TestBaseMatrix,3679,"ic Real infinity ();  Infinity. More...;  ; static bool isSmall (Real r, Real ratio=1.);  true if the magnitude of r is less than ratio*epsilon More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const Vector2 &m2);  return the maximum difference between corresponding entries, or the infinity if the vectors have different sizes More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2);  return the maximum difference between corresponding entries More...;  ;  Static Protected Member Functions inherited from sofa::testing::NumericTest< T::Real >; static float norm (float a);  ; static double norm (double a);  ; static Real norm (T a);  . Attribute details. ◆ m_modelMatrix. template<class T > . sofa::type::Mat<NbRows, NbCols, Real> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_modelMatrix. protected . ◆ m_testedMatrix. template<class T > . std::unique_ptr<sofa::linearalgebra::BaseMatrix> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_testedMatrix {nullptr}. protected . ◆ NbCols. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbCols = T::NbCols. staticconstexpr . ◆ NbRows. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbRows = T::NbRows. staticconstexpr . Function details. ◆ checkAddBloc(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddBloc ; (; sofa::linearalgebra::BaseMatrix::Index ; posRow, . sofa::linearalgebra::BaseMatrix::Index ; posCol . ). inline . A 3x3 matrix is added into the matrix using the corresponding function overload This assumes the matrix is big enough to contain a 3x3 matrix at the requested position Parameters. posRowrow index at which the 3x3 matrix is added ; posColcolumn index at which the 3x3 matrix is added . ◆ checkAddScalar(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddScalar",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:3812,Testability,test,testing,3812,"  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const Vector2 &m2);  return the maximum difference between corresponding entries, or the infinity if the vectors have different sizes More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2);  return the maximum difference between corresponding entries More...;  ;  Static Protected Member Functions inherited from sofa::testing::NumericTest< T::Real >; static float norm (float a);  ; static double norm (double a);  ; static Real norm (T a);  . Attribute details. ◆ m_modelMatrix. template<class T > . sofa::type::Mat<NbRows, NbCols, Real> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_modelMatrix. protected . ◆ m_testedMatrix. template<class T > . std::unique_ptr<sofa::linearalgebra::BaseMatrix> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_testedMatrix {nullptr}. protected . ◆ NbCols. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbCols = T::NbCols. staticconstexpr . ◆ NbRows. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbRows = T::NbRows. staticconstexpr . Function details. ◆ checkAddBloc(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddBloc ; (; sofa::linearalgebra::BaseMatrix::Index ; posRow, . sofa::linearalgebra::BaseMatrix::Index ; posCol . ). inline . A 3x3 matrix is added into the matrix using the corresponding function overload This assumes the matrix is big enough to contain a 3x3 matrix at the requested position Parameters. posRowrow index at which the 3x3 matrix is added ; posColcolumn index at which the 3x3 matrix is added . ◆ checkAddScalar(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddScalar ; (; ). inline . ◆ checkResize(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkResize ; (; ). inline . ◆ onSetUp().",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:3821,Testability,Test,TestBaseMatrix,3821,"  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const Vector2 &m2);  return the maximum difference between corresponding entries, or the infinity if the vectors have different sizes More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2);  return the maximum difference between corresponding entries More...;  ;  Static Protected Member Functions inherited from sofa::testing::NumericTest< T::Real >; static float norm (float a);  ; static double norm (double a);  ; static Real norm (T a);  . Attribute details. ◆ m_modelMatrix. template<class T > . sofa::type::Mat<NbRows, NbCols, Real> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_modelMatrix. protected . ◆ m_testedMatrix. template<class T > . std::unique_ptr<sofa::linearalgebra::BaseMatrix> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_testedMatrix {nullptr}. protected . ◆ NbCols. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbCols = T::NbCols. staticconstexpr . ◆ NbRows. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbRows = T::NbRows. staticconstexpr . Function details. ◆ checkAddBloc(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddBloc ; (; sofa::linearalgebra::BaseMatrix::Index ; posRow, . sofa::linearalgebra::BaseMatrix::Index ; posCol . ). inline . A 3x3 matrix is added into the matrix using the corresponding function overload This assumes the matrix is big enough to contain a 3x3 matrix at the requested position Parameters. posRowrow index at which the 3x3 matrix is added ; posColcolumn index at which the 3x3 matrix is added . ◆ checkAddScalar(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddScalar ; (; ). inline . ◆ checkResize(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkResize ; (; ). inline . ◆ onSetUp().",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:3954,Testability,test,testing,3954,"entries, or the infinity if the vectors have different sizes More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2);  return the maximum difference between corresponding entries More...;  ;  Static Protected Member Functions inherited from sofa::testing::NumericTest< T::Real >; static float norm (float a);  ; static double norm (double a);  ; static Real norm (T a);  . Attribute details. ◆ m_modelMatrix. template<class T > . sofa::type::Mat<NbRows, NbCols, Real> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_modelMatrix. protected . ◆ m_testedMatrix. template<class T > . std::unique_ptr<sofa::linearalgebra::BaseMatrix> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_testedMatrix {nullptr}. protected . ◆ NbCols. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbCols = T::NbCols. staticconstexpr . ◆ NbRows. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbRows = T::NbRows. staticconstexpr . Function details. ◆ checkAddBloc(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddBloc ; (; sofa::linearalgebra::BaseMatrix::Index ; posRow, . sofa::linearalgebra::BaseMatrix::Index ; posCol . ). inline . A 3x3 matrix is added into the matrix using the corresponding function overload This assumes the matrix is big enough to contain a 3x3 matrix at the requested position Parameters. posRowrow index at which the 3x3 matrix is added ; posColcolumn index at which the 3x3 matrix is added . ◆ checkAddScalar(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddScalar ; (; ). inline . ◆ checkResize(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkResize ; (; ). inline . ◆ onSetUp(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onSetUp ; (; ). inlineoverridevirtual . Reimplemented from sofa:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:3963,Testability,Test,TestBaseMatrix,3963,"entries, or the infinity if the vectors have different sizes More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2);  return the maximum difference between corresponding entries More...;  ;  Static Protected Member Functions inherited from sofa::testing::NumericTest< T::Real >; static float norm (float a);  ; static double norm (double a);  ; static Real norm (T a);  . Attribute details. ◆ m_modelMatrix. template<class T > . sofa::type::Mat<NbRows, NbCols, Real> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_modelMatrix. protected . ◆ m_testedMatrix. template<class T > . std::unique_ptr<sofa::linearalgebra::BaseMatrix> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_testedMatrix {nullptr}. protected . ◆ NbCols. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbCols = T::NbCols. staticconstexpr . ◆ NbRows. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbRows = T::NbRows. staticconstexpr . Function details. ◆ checkAddBloc(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddBloc ; (; sofa::linearalgebra::BaseMatrix::Index ; posRow, . sofa::linearalgebra::BaseMatrix::Index ; posCol . ). inline . A 3x3 matrix is added into the matrix using the corresponding function overload This assumes the matrix is big enough to contain a 3x3 matrix at the requested position Parameters. posRowrow index at which the 3x3 matrix is added ; posColcolumn index at which the 3x3 matrix is added . ◆ checkAddScalar(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddScalar ; (; ). inline . ◆ checkResize(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkResize ; (; ). inline . ◆ onSetUp(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onSetUp ; (; ). inlineoverridevirtual . Reimplemented from sofa:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:4105,Testability,test,testing,4105," the maximum difference between corresponding entries More...;  ;  Static Protected Member Functions inherited from sofa::testing::NumericTest< T::Real >; static float norm (float a);  ; static double norm (double a);  ; static Real norm (T a);  . Attribute details. ◆ m_modelMatrix. template<class T > . sofa::type::Mat<NbRows, NbCols, Real> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_modelMatrix. protected . ◆ m_testedMatrix. template<class T > . std::unique_ptr<sofa::linearalgebra::BaseMatrix> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_testedMatrix {nullptr}. protected . ◆ NbCols. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbCols = T::NbCols. staticconstexpr . ◆ NbRows. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbRows = T::NbRows. staticconstexpr . Function details. ◆ checkAddBloc(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddBloc ; (; sofa::linearalgebra::BaseMatrix::Index ; posRow, . sofa::linearalgebra::BaseMatrix::Index ; posCol . ). inline . A 3x3 matrix is added into the matrix using the corresponding function overload This assumes the matrix is big enough to contain a 3x3 matrix at the requested position Parameters. posRowrow index at which the 3x3 matrix is added ; posColcolumn index at which the 3x3 matrix is added . ◆ checkAddScalar(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddScalar ; (; ). inline . ◆ checkResize(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkResize ; (; ). inline . ◆ onSetUp(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onSetUp ; (; ). inlineoverridevirtual . Reimplemented from sofa::testing::BaseTest. ◆ onTearDown(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onTearDown ; (; ). inlineoverridevirtual . Reimplemented from sofa::tes",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:4114,Testability,Test,TestBaseMatrix,4114," the maximum difference between corresponding entries More...;  ;  Static Protected Member Functions inherited from sofa::testing::NumericTest< T::Real >; static float norm (float a);  ; static double norm (double a);  ; static Real norm (T a);  . Attribute details. ◆ m_modelMatrix. template<class T > . sofa::type::Mat<NbRows, NbCols, Real> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_modelMatrix. protected . ◆ m_testedMatrix. template<class T > . std::unique_ptr<sofa::linearalgebra::BaseMatrix> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_testedMatrix {nullptr}. protected . ◆ NbCols. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbCols = T::NbCols. staticconstexpr . ◆ NbRows. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbRows = T::NbRows. staticconstexpr . Function details. ◆ checkAddBloc(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddBloc ; (; sofa::linearalgebra::BaseMatrix::Index ; posRow, . sofa::linearalgebra::BaseMatrix::Index ; posCol . ). inline . A 3x3 matrix is added into the matrix using the corresponding function overload This assumes the matrix is big enough to contain a 3x3 matrix at the requested position Parameters. posRowrow index at which the 3x3 matrix is added ; posColcolumn index at which the 3x3 matrix is added . ◆ checkAddScalar(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddScalar ; (; ). inline . ◆ checkResize(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkResize ; (; ). inline . ◆ onSetUp(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onSetUp ; (; ). inlineoverridevirtual . Reimplemented from sofa::testing::BaseTest. ◆ onTearDown(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onTearDown ; (; ). inlineoverridevirtual . Reimplemented from sofa::tes",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:4618,Testability,test,testing,4618,"a::testing::NumericTest< T::Real >; static float norm (float a);  ; static double norm (double a);  ; static Real norm (T a);  . Attribute details. ◆ m_modelMatrix. template<class T > . sofa::type::Mat<NbRows, NbCols, Real> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_modelMatrix. protected . ◆ m_testedMatrix. template<class T > . std::unique_ptr<sofa::linearalgebra::BaseMatrix> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_testedMatrix {nullptr}. protected . ◆ NbCols. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbCols = T::NbCols. staticconstexpr . ◆ NbRows. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbRows = T::NbRows. staticconstexpr . Function details. ◆ checkAddBloc(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddBloc ; (; sofa::linearalgebra::BaseMatrix::Index ; posRow, . sofa::linearalgebra::BaseMatrix::Index ; posCol . ). inline . A 3x3 matrix is added into the matrix using the corresponding function overload This assumes the matrix is big enough to contain a 3x3 matrix at the requested position Parameters. posRowrow index at which the 3x3 matrix is added ; posColcolumn index at which the 3x3 matrix is added . ◆ checkAddScalar(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddScalar ; (; ). inline . ◆ checkResize(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkResize ; (; ). inline . ◆ onSetUp(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onSetUp ; (; ). inlineoverridevirtual . Reimplemented from sofa::testing::BaseTest. ◆ onTearDown(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onTearDown ; (; ). inlineoverridevirtual . Reimplemented from sofa::testing::BaseTest. sofalinearalgebratestingTestBaseMatrix; Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:4627,Testability,Test,TestBaseMatrix,4627,"a::testing::NumericTest< T::Real >; static float norm (float a);  ; static double norm (double a);  ; static Real norm (T a);  . Attribute details. ◆ m_modelMatrix. template<class T > . sofa::type::Mat<NbRows, NbCols, Real> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_modelMatrix. protected . ◆ m_testedMatrix. template<class T > . std::unique_ptr<sofa::linearalgebra::BaseMatrix> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_testedMatrix {nullptr}. protected . ◆ NbCols. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbCols = T::NbCols. staticconstexpr . ◆ NbRows. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbRows = T::NbRows. staticconstexpr . Function details. ◆ checkAddBloc(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddBloc ; (; sofa::linearalgebra::BaseMatrix::Index ; posRow, . sofa::linearalgebra::BaseMatrix::Index ; posCol . ). inline . A 3x3 matrix is added into the matrix using the corresponding function overload This assumes the matrix is big enough to contain a 3x3 matrix at the requested position Parameters. posRowrow index at which the 3x3 matrix is added ; posColcolumn index at which the 3x3 matrix is added . ◆ checkAddScalar(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddScalar ; (; ). inline . ◆ checkResize(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkResize ; (; ). inline . ◆ onSetUp(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onSetUp ; (; ). inlineoverridevirtual . Reimplemented from sofa::testing::BaseTest. ◆ onTearDown(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onTearDown ; (; ). inlineoverridevirtual . Reimplemented from sofa::testing::BaseTest. sofalinearalgebratestingTestBaseMatrix; Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:4744,Testability,test,testing,4744,"a::testing::NumericTest< T::Real >; static float norm (float a);  ; static double norm (double a);  ; static Real norm (T a);  . Attribute details. ◆ m_modelMatrix. template<class T > . sofa::type::Mat<NbRows, NbCols, Real> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_modelMatrix. protected . ◆ m_testedMatrix. template<class T > . std::unique_ptr<sofa::linearalgebra::BaseMatrix> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_testedMatrix {nullptr}. protected . ◆ NbCols. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbCols = T::NbCols. staticconstexpr . ◆ NbRows. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbRows = T::NbRows. staticconstexpr . Function details. ◆ checkAddBloc(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddBloc ; (; sofa::linearalgebra::BaseMatrix::Index ; posRow, . sofa::linearalgebra::BaseMatrix::Index ; posCol . ). inline . A 3x3 matrix is added into the matrix using the corresponding function overload This assumes the matrix is big enough to contain a 3x3 matrix at the requested position Parameters. posRowrow index at which the 3x3 matrix is added ; posColcolumn index at which the 3x3 matrix is added . ◆ checkAddScalar(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddScalar ; (; ). inline . ◆ checkResize(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkResize ; (; ). inline . ◆ onSetUp(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onSetUp ; (; ). inlineoverridevirtual . Reimplemented from sofa::testing::BaseTest. ◆ onTearDown(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onTearDown ; (; ). inlineoverridevirtual . Reimplemented from sofa::testing::BaseTest. sofalinearalgebratestingTestBaseMatrix; Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:4753,Testability,Test,TestBaseMatrix,4753,"a::testing::NumericTest< T::Real >; static float norm (float a);  ; static double norm (double a);  ; static Real norm (T a);  . Attribute details. ◆ m_modelMatrix. template<class T > . sofa::type::Mat<NbRows, NbCols, Real> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_modelMatrix. protected . ◆ m_testedMatrix. template<class T > . std::unique_ptr<sofa::linearalgebra::BaseMatrix> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_testedMatrix {nullptr}. protected . ◆ NbCols. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbCols = T::NbCols. staticconstexpr . ◆ NbRows. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbRows = T::NbRows. staticconstexpr . Function details. ◆ checkAddBloc(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddBloc ; (; sofa::linearalgebra::BaseMatrix::Index ; posRow, . sofa::linearalgebra::BaseMatrix::Index ; posCol . ). inline . A 3x3 matrix is added into the matrix using the corresponding function overload This assumes the matrix is big enough to contain a 3x3 matrix at the requested position Parameters. posRowrow index at which the 3x3 matrix is added ; posColcolumn index at which the 3x3 matrix is added . ◆ checkAddScalar(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddScalar ; (; ). inline . ◆ checkResize(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkResize ; (; ). inline . ◆ onSetUp(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onSetUp ; (; ). inlineoverridevirtual . Reimplemented from sofa::testing::BaseTest. ◆ onTearDown(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onTearDown ; (; ). inlineoverridevirtual . Reimplemented from sofa::testing::BaseTest. sofalinearalgebratestingTestBaseMatrix; Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:4863,Testability,test,testing,4863,"a::testing::NumericTest< T::Real >; static float norm (float a);  ; static double norm (double a);  ; static Real norm (T a);  . Attribute details. ◆ m_modelMatrix. template<class T > . sofa::type::Mat<NbRows, NbCols, Real> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_modelMatrix. protected . ◆ m_testedMatrix. template<class T > . std::unique_ptr<sofa::linearalgebra::BaseMatrix> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_testedMatrix {nullptr}. protected . ◆ NbCols. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbCols = T::NbCols. staticconstexpr . ◆ NbRows. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbRows = T::NbRows. staticconstexpr . Function details. ◆ checkAddBloc(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddBloc ; (; sofa::linearalgebra::BaseMatrix::Index ; posRow, . sofa::linearalgebra::BaseMatrix::Index ; posCol . ). inline . A 3x3 matrix is added into the matrix using the corresponding function overload This assumes the matrix is big enough to contain a 3x3 matrix at the requested position Parameters. posRowrow index at which the 3x3 matrix is added ; posColcolumn index at which the 3x3 matrix is added . ◆ checkAddScalar(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddScalar ; (; ). inline . ◆ checkResize(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkResize ; (; ). inline . ◆ onSetUp(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onSetUp ; (; ). inlineoverridevirtual . Reimplemented from sofa::testing::BaseTest. ◆ onTearDown(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onTearDown ; (; ). inlineoverridevirtual . Reimplemented from sofa::testing::BaseTest. sofalinearalgebratestingTestBaseMatrix; Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:4872,Testability,Test,TestBaseMatrix,4872,"a::testing::NumericTest< T::Real >; static float norm (float a);  ; static double norm (double a);  ; static Real norm (T a);  . Attribute details. ◆ m_modelMatrix. template<class T > . sofa::type::Mat<NbRows, NbCols, Real> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_modelMatrix. protected . ◆ m_testedMatrix. template<class T > . std::unique_ptr<sofa::linearalgebra::BaseMatrix> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_testedMatrix {nullptr}. protected . ◆ NbCols. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbCols = T::NbCols. staticconstexpr . ◆ NbRows. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbRows = T::NbRows. staticconstexpr . Function details. ◆ checkAddBloc(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddBloc ; (; sofa::linearalgebra::BaseMatrix::Index ; posRow, . sofa::linearalgebra::BaseMatrix::Index ; posCol . ). inline . A 3x3 matrix is added into the matrix using the corresponding function overload This assumes the matrix is big enough to contain a 3x3 matrix at the requested position Parameters. posRowrow index at which the 3x3 matrix is added ; posColcolumn index at which the 3x3 matrix is added . ◆ checkAddScalar(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddScalar ; (; ). inline . ◆ checkResize(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkResize ; (; ). inline . ◆ onSetUp(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onSetUp ; (; ). inlineoverridevirtual . Reimplemented from sofa::testing::BaseTest. ◆ onTearDown(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onTearDown ; (; ). inlineoverridevirtual . Reimplemented from sofa::testing::BaseTest. sofalinearalgebratestingTestBaseMatrix; Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:4958,Testability,test,testing,4958,"a::testing::NumericTest< T::Real >; static float norm (float a);  ; static double norm (double a);  ; static Real norm (T a);  . Attribute details. ◆ m_modelMatrix. template<class T > . sofa::type::Mat<NbRows, NbCols, Real> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_modelMatrix. protected . ◆ m_testedMatrix. template<class T > . std::unique_ptr<sofa::linearalgebra::BaseMatrix> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_testedMatrix {nullptr}. protected . ◆ NbCols. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbCols = T::NbCols. staticconstexpr . ◆ NbRows. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbRows = T::NbRows. staticconstexpr . Function details. ◆ checkAddBloc(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddBloc ; (; sofa::linearalgebra::BaseMatrix::Index ; posRow, . sofa::linearalgebra::BaseMatrix::Index ; posCol . ). inline . A 3x3 matrix is added into the matrix using the corresponding function overload This assumes the matrix is big enough to contain a 3x3 matrix at the requested position Parameters. posRowrow index at which the 3x3 matrix is added ; posColcolumn index at which the 3x3 matrix is added . ◆ checkAddScalar(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddScalar ; (; ). inline . ◆ checkResize(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkResize ; (; ). inline . ◆ onSetUp(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onSetUp ; (; ). inlineoverridevirtual . Reimplemented from sofa::testing::BaseTest. ◆ onTearDown(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onTearDown ; (; ). inlineoverridevirtual . Reimplemented from sofa::testing::BaseTest. sofalinearalgebratestingTestBaseMatrix; Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:5040,Testability,test,testing,5040,"a::testing::NumericTest< T::Real >; static float norm (float a);  ; static double norm (double a);  ; static Real norm (T a);  . Attribute details. ◆ m_modelMatrix. template<class T > . sofa::type::Mat<NbRows, NbCols, Real> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_modelMatrix. protected . ◆ m_testedMatrix. template<class T > . std::unique_ptr<sofa::linearalgebra::BaseMatrix> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_testedMatrix {nullptr}. protected . ◆ NbCols. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbCols = T::NbCols. staticconstexpr . ◆ NbRows. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbRows = T::NbRows. staticconstexpr . Function details. ◆ checkAddBloc(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddBloc ; (; sofa::linearalgebra::BaseMatrix::Index ; posRow, . sofa::linearalgebra::BaseMatrix::Index ; posCol . ). inline . A 3x3 matrix is added into the matrix using the corresponding function overload This assumes the matrix is big enough to contain a 3x3 matrix at the requested position Parameters. posRowrow index at which the 3x3 matrix is added ; posColcolumn index at which the 3x3 matrix is added . ◆ checkAddScalar(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddScalar ; (; ). inline . ◆ checkResize(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkResize ; (; ). inline . ◆ onSetUp(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onSetUp ; (; ). inlineoverridevirtual . Reimplemented from sofa::testing::BaseTest. ◆ onTearDown(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onTearDown ; (; ). inlineoverridevirtual . Reimplemented from sofa::testing::BaseTest. sofalinearalgebratestingTestBaseMatrix; Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:5049,Testability,Test,TestBaseMatrix,5049,"a::testing::NumericTest< T::Real >; static float norm (float a);  ; static double norm (double a);  ; static Real norm (T a);  . Attribute details. ◆ m_modelMatrix. template<class T > . sofa::type::Mat<NbRows, NbCols, Real> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_modelMatrix. protected . ◆ m_testedMatrix. template<class T > . std::unique_ptr<sofa::linearalgebra::BaseMatrix> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_testedMatrix {nullptr}. protected . ◆ NbCols. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbCols = T::NbCols. staticconstexpr . ◆ NbRows. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbRows = T::NbRows. staticconstexpr . Function details. ◆ checkAddBloc(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddBloc ; (; sofa::linearalgebra::BaseMatrix::Index ; posRow, . sofa::linearalgebra::BaseMatrix::Index ; posCol . ). inline . A 3x3 matrix is added into the matrix using the corresponding function overload This assumes the matrix is big enough to contain a 3x3 matrix at the requested position Parameters. posRowrow index at which the 3x3 matrix is added ; posColcolumn index at which the 3x3 matrix is added . ◆ checkAddScalar(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddScalar ; (; ). inline . ◆ checkResize(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkResize ; (; ). inline . ◆ onSetUp(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onSetUp ; (; ). inlineoverridevirtual . Reimplemented from sofa::testing::BaseTest. ◆ onTearDown(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onTearDown ; (; ). inlineoverridevirtual . Reimplemented from sofa::testing::BaseTest. sofalinearalgebratestingTestBaseMatrix; Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html:5138,Testability,test,testing,5138,"a::testing::NumericTest< T::Real >; static float norm (float a);  ; static double norm (double a);  ; static Real norm (T a);  . Attribute details. ◆ m_modelMatrix. template<class T > . sofa::type::Mat<NbRows, NbCols, Real> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_modelMatrix. protected . ◆ m_testedMatrix. template<class T > . std::unique_ptr<sofa::linearalgebra::BaseMatrix> sofa::linearalgebra::testing::TestBaseMatrix< T >::m_testedMatrix {nullptr}. protected . ◆ NbCols. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbCols = T::NbCols. staticconstexpr . ◆ NbRows. template<class T > . constexpr sofa::Index sofa::linearalgebra::testing::TestBaseMatrix< T >::NbRows = T::NbRows. staticconstexpr . Function details. ◆ checkAddBloc(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddBloc ; (; sofa::linearalgebra::BaseMatrix::Index ; posRow, . sofa::linearalgebra::BaseMatrix::Index ; posCol . ). inline . A 3x3 matrix is added into the matrix using the corresponding function overload This assumes the matrix is big enough to contain a 3x3 matrix at the requested position Parameters. posRowrow index at which the 3x3 matrix is added ; posColcolumn index at which the 3x3 matrix is added . ◆ checkAddScalar(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkAddScalar ; (; ). inline . ◆ checkResize(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::checkResize ; (; ). inline . ◆ onSetUp(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onSetUp ; (; ). inlineoverridevirtual . Reimplemented from sofa::testing::BaseTest. ◆ onTearDown(). template<class T > . void sofa::linearalgebra::testing::TestBaseMatrix< T >::onTearDown ; (; ). inlineoverridevirtual . Reimplemented from sofa::testing::BaseTest. sofalinearalgebratestingTestBaseMatrix; Generated on Mon Nov 11 2024 03:32:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1testing_1_1_test_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1type__selector_3_010_00_01_t0_00_01_t1_01_4-members.html:266,Modifiability,inherit,inherited,266,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::type_selector< 0, T0, T1 > Member List . This is the complete list of members for sofa::linearalgebra::type_selector< 0, T0, T1 >, including all inherited members. T typedefsofa::linearalgebra::type_selector< 0, T0, T1 >. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1type__selector_3_010_00_01_t0_00_01_t1_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1type__selector_3_010_00_01_t0_00_01_t1_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1type__selector_3_011_00_01_t0_00_01_t1_01_4-members.html:266,Modifiability,inherit,inherited,266,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::type_selector< 1, T0, T1 > Member List . This is the complete list of members for sofa::linearalgebra::type_selector< 1, T0, T1 >, including all inherited members. T typedefsofa::linearalgebra::type_selector< 1, T0, T1 >. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1type__selector_3_011_00_01_t0_00_01_t1_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1type__selector_3_011_00_01_t0_00_01_t1_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html:234,Modifiability,inherit,inherited,234,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BaseMatrix Member List . This is the complete list of members for sofa::linearalgebra::BaseMatrix, including all inherited members. add(Index row, Index col, double v)=0sofa::linearalgebra::BaseMatrixpure virtual; add(Index row, Index col, const type::Mat3x3d &_M)sofa::linearalgebra::BaseMatrixvirtual; add(Index row, Index col, const type::Mat3x3f &_M)sofa::linearalgebra::BaseMatrixvirtual; add(Index row, Index col, const type::Mat2x2d &_M)sofa::linearalgebra::BaseMatrixvirtual; add(Index row, Index col, const type::Mat2x2f &_M)sofa::linearalgebra::BaseMatrixvirtual; add(Index row, Index col, const type::Mat6x6d &_M)sofa::linearalgebra::BaseMatrixvirtual; add(Index row, Index col, const type::Mat6x6f &_M)sofa::linearalgebra::BaseMatrixvirtual; bAccessorAdd(InternalBlockAccessor *b, Index i, Index j, double v)sofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorAdd(InternalBlockAccessor *b, const float *buffer)sofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorAdd(InternalBlockAccessor *b, const double *buffer)sofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorAdd(InternalBlockAccessor *b, const int *buffer)sofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorAddDefaultImpl(InternalBlockAccessor *b, const T *buffer)sofa::linearalgebra::BaseMatrixinlineprotected; bAccessorCopy(InternalBlockAccessor *) constsofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorDelete(const InternalBlockAccessor *) constsofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorElement(const InternalBlockAccessor *b, Index i, Index j) constsofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorElements(const InternalBlockAccessor *b, float *buffer) constsofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorElements(const InternalBlockAccessor *b, double *buffer) constsofa::linearalgebra::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html:4717,Usability,clear,clear,4717," bColSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; blocAdd(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; blocCreate(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocElements(Index i, Index j, T *buffer) constsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear()=0sofa::linearalgebra::BaseMatrixpure virtual; clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const =0sofa::linearalgebra::BaseMatrixpure virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, voi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html:4771,Usability,clear,clear,4771,"virtual; blocAdd(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; blocCreate(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocElements(Index i, Index j, T *buffer) constsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear()=0sofa::linearalgebra::BaseMatrixpure virtual; clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const =0sofa::linearalgebra::BaseMatrixpure virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html:4840,Usability,clear,clearCol,4840,"::BaseMatrixinline; blocCreate(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocElements(Index i, Index j, T *buffer) constsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear()=0sofa::linearalgebra::BaseMatrixpure virtual; clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const =0sofa::linearalgebra::BaseMatrixpure virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, I",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html:4903,Usability,clear,clearCols,4903,"bra::BaseMatrixinlinevirtual; blocElements(Index i, Index j, T *buffer) constsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear()=0sofa::linearalgebra::BaseMatrixpure virtual; clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const =0sofa::linearalgebra::BaseMatrixpure virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlinepr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html:4982,Usability,clear,clearRow,4982,"ofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear()=0sofa::linearalgebra::BaseMatrixpure virtual; clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const =0sofa::linearalgebra::BaseMatrixpure virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::l",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html:5045,Usability,clear,clearRowCol,5045,"onstsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear()=0sofa::linearalgebra::BaseMatrixpure virtual; clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const =0sofa::linearalgebra::BaseMatrixpure virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIter",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html:5111,Usability,clear,clearRows,5111,"i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear()=0sofa::linearalgebra::BaseMatrixpure virtual; clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const =0sofa::linearalgebra::BaseMatrixpure virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, Index internalData) constsofa::linearalgebra::Bas",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html:5190,Usability,clear,clearRowsCols,5190,", const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear()=0sofa::linearalgebra::BaseMatrixpure virtual; clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const =0sofa::linearalgebra::BaseMatrixpure virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createRowBlockConstIterator(void *internalPtr) constsofa:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:290,Modifiability,Inherit,Inheritance,290,"﻿. SOFA API: sofa::linearalgebra::BaseMatrix Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Member Functions |; Friends |; List of all members . sofa::linearalgebra::BaseMatrix Class Referenceabstract . #include <BaseMatrix.h>. Inheritance diagram for sofa::linearalgebra::BaseMatrix:. [legend]; Detailed Description; Generic matrix API, allowing to fill and use a matrix independently of the linear algebra library in use.; Note that accessing values using this class is rather slow and should only be used in codes where the provided genericity is necessary. . Classes; class  BlockAccessor;  ; class  BlockConstAccessor;  ; class  ColBlockConstIterator;  ; class  InternalBlockAccessor;  ; class  InternalColBlockIterator;  ; class  InternalRowBlockIterator;  ; class  RowBlockConstIterator;  . Public Member Functions;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; virtual Index rowSize (void) const =0;  Number of rows. More...;  ; virtual Index colSize (void) const =0;  Number of columns. More...;  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; virtual SReal element (Index i, Index j) const =0;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void resize (Index nbRow, Index nbCol)=0;  Resize the matrix and reset all values to 0. More...;  ; virtual void clear ()=0;  Reset all values to 0. More...;  ; virtual void set (Index i, Index j, double v)=0;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, I",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:2119,Performance,perform,performances,2119,"r of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; virtual SReal element (Index i, Index j) const =0;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void resize (Index nbRow, Index nbCol)=0;  Resize the matrix and reset all values to 0. More...;  ; virtual void clear ()=0;  Reset all values to 0. More...;  ; virtual void set (Index i, Index j, double v)=0;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:2293,Performance,perform,performances,2293,"  Read the value of the element at row i, column j (using 0-based indices) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void resize (Index nbRow, Index nbCol)=0;  Resize the matrix and reset all values to 0. More...;  ; virtual void clear ()=0;  Reset all values to 0. More...;  ; virtual void set (Index i, Index j, double v)=0;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:2467,Performance,perform,performances,2467,"umn j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void resize (Index nbRow, Index nbCol)=0;  Resize the matrix and reset all values to 0. More...;  ; virtual void clear ()=0;  Reset all values to 0. More...;  ; virtual void set (Index i, Index j, double v)=0;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:2641,Performance,perform,performances,2641,"irtual void clear ()=0;  Reset all values to 0. More...;  ; virtual void set (Index i, Index j, double v)=0;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:2815,Performance,perform,performances,2815," indices) More...;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; basic linear operations; virtual void opMulV (linearalgebra::BaseVector *result, const linearalg",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:2989,Performance,perform,performances,2989,"virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; basic linear operations; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Mult",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:14402,Performance,perform,performances,14402,"ssor * getInternal (BlockConstAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockConstAccessor *b);  ; static InternalBlockAccessor * getInternal (BlockAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockAccessor *b);  ; static InternalColBlockIterator * getInternal (ColBlockConstIterator *b);  ; static const InternalColBlockIterator * getInternal (const ColBlockConstIterator *b);  ; static InternalRowBlockIterator * getInternal (RowBlockConstIterator *b);  ; static const InternalRowBlockIterator * getInternal (const RowBlockConstIterator *b);  . Constructor details. ◆ BaseMatrix(). sofa::linearalgebra::BaseMatrix::BaseMatrix ; (; ). default . ◆ ~BaseMatrix(). sofa::linearalgebra::BaseMatrix::~BaseMatrix ; (; ). virtual . Function details. ◆ add() [1/7]. void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . const type::Mat2x2d & ; _M . ). virtual . Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [2/7]. void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . const type::Mat2x2f & ; _M . ). virtual . Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [3/7]. void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . const type::Mat3x3d & ; _M . ). virtual . Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. ; Reimplemented in sofa::core::behavior::AddToMatrixCompatMatrix< c >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanic",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:14498,Performance,perform,performances,14498,"or * getInternal (const BlockConstAccessor *b);  ; static InternalBlockAccessor * getInternal (BlockAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockAccessor *b);  ; static InternalColBlockIterator * getInternal (ColBlockConstIterator *b);  ; static const InternalColBlockIterator * getInternal (const ColBlockConstIterator *b);  ; static InternalRowBlockIterator * getInternal (RowBlockConstIterator *b);  ; static const InternalRowBlockIterator * getInternal (const RowBlockConstIterator *b);  . Constructor details. ◆ BaseMatrix(). sofa::linearalgebra::BaseMatrix::BaseMatrix ; (; ). default . ◆ ~BaseMatrix(). sofa::linearalgebra::BaseMatrix::~BaseMatrix ; (; ). virtual . Function details. ◆ add() [1/7]. void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . const type::Mat2x2d & ; _M . ). virtual . Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [2/7]. void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . const type::Mat2x2f & ; _M . ). virtual . Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [3/7]. void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . const type::Mat3x3d & ; _M . ). virtual . Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. ; Reimplemented in sofa::core::behavior::AddToMatrixCompatMatrix< c >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:14729,Performance,perform,performances,14729,"ckConstIterator *b);  ; static const InternalColBlockIterator * getInternal (const ColBlockConstIterator *b);  ; static InternalRowBlockIterator * getInternal (RowBlockConstIterator *b);  ; static const InternalRowBlockIterator * getInternal (const RowBlockConstIterator *b);  . Constructor details. ◆ BaseMatrix(). sofa::linearalgebra::BaseMatrix::BaseMatrix ; (; ). default . ◆ ~BaseMatrix(). sofa::linearalgebra::BaseMatrix::~BaseMatrix ; (; ). virtual . Function details. ◆ add() [1/7]. void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . const type::Mat2x2d & ; _M . ). virtual . Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [2/7]. void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . const type::Mat2x2f & ; _M . ). virtual . Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [3/7]. void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . const type::Mat3x3d & ; _M . ). virtual . Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. ; Reimplemented in sofa::core::behavior::AddToMatrixCompatMatrix< c >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:14825,Performance,perform,performances,14825,"nst ColBlockConstIterator *b);  ; static InternalRowBlockIterator * getInternal (RowBlockConstIterator *b);  ; static const InternalRowBlockIterator * getInternal (const RowBlockConstIterator *b);  . Constructor details. ◆ BaseMatrix(). sofa::linearalgebra::BaseMatrix::BaseMatrix ; (; ). default . ◆ ~BaseMatrix(). sofa::linearalgebra::BaseMatrix::~BaseMatrix ; (; ). virtual . Function details. ◆ add() [1/7]. void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . const type::Mat2x2d & ; _M . ). virtual . Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [2/7]. void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . const type::Mat2x2f & ; _M . ). virtual . Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [3/7]. void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . const type::Mat3x3d & ; _M . ). virtual . Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. ; Reimplemented in sofa::core::behavior::AddToMatrixCompatMatrix< c >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:15056,Performance,perform,performances,15056,"ralgebra::BaseMatrix::BaseMatrix ; (; ). default . ◆ ~BaseMatrix(). sofa::linearalgebra::BaseMatrix::~BaseMatrix ; (; ). virtual . Function details. ◆ add() [1/7]. void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . const type::Mat2x2d & ; _M . ). virtual . Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [2/7]. void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . const type::Mat2x2f & ; _M . ). virtual . Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [3/7]. void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . const type::Mat3x3d & ; _M . ). virtual . Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. ; Reimplemented in sofa::core::behavior::AddToMatrixCompatMatrix< c >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::Compre",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:15152,Performance,perform,performances,15152,"ralgebra::BaseMatrix::~BaseMatrix ; (; ). virtual . Function details. ◆ add() [1/7]. void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . const type::Mat2x2d & ; _M . ). virtual . Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [2/7]. void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . const type::Mat2x2f & ; _M . ). virtual . Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [3/7]. void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . const type::Mat3x3d & ; _M . ). virtual . Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. ; Reimplemented in sofa::core::behavior::AddToMatrixCompatMatrix< c >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSpar",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:16591,Performance,perform,performances,16591,"ebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, and sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >. ◆ add() [4/7]. void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . const type::Mat3x3f & ; _M . ). virtual . Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. ; Reimplemented in sofa::core::behavior::AddToMatrixCompatMatrix< c >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::Compre",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:16687,Performance,perform,performances,16687,"ssedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, and sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >. ◆ add() [4/7]. void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . const type::Mat3x3f & ; _M . ). virtual . Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. ; Reimplemented in sofa::core::behavior::AddToMatrixCompatMatrix< c >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSpar",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:18126,Performance,perform,performances,18126,"ebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, and sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >. ◆ add() [5/7]. void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . const type::Mat6x6d & ; _M . ). virtual . Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [6/7]. void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . const type::Mat6x6f & ; _M . ). virtual . Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [7/7]. virtual void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . double ; v . ). pure virtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implemented in sofa::linearalgebra::RotationMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >, sofa::core::behavior::ApplyConstraintCompat, sofa::core::behavior::AddToMatrixCompatMatrix< c >, sofa::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::FullMatrix< T >, sof",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:18357,Performance,perform,performances,18357,"::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, and sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >. ◆ add() [5/7]. void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . const type::Mat6x6d & ; _M . ). virtual . Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [6/7]. void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . const type::Mat6x6f & ; _M . ). virtual . Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [7/7]. virtual void sofa::linearalgebra::BaseMatrix::add ; (; Index ; row, . Index ; col, . double ; v . ). pure virtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implemented in sofa::linearalgebra::RotationMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >, sofa::core::behavior::ApplyConstraintCompat, sofa::core::behavior::AddToMatrixCompatMatrix< c >, sofa::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::l",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:497,Security,access,accessing,497,"﻿. SOFA API: sofa::linearalgebra::BaseMatrix Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Member Functions |; Friends |; List of all members . sofa::linearalgebra::BaseMatrix Class Referenceabstract . #include <BaseMatrix.h>. Inheritance diagram for sofa::linearalgebra::BaseMatrix:. [legend]; Detailed Description; Generic matrix API, allowing to fill and use a matrix independently of the linear algebra library in use.; Note that accessing values using this class is rather slow and should only be used in codes where the provided genericity is necessary. . Classes; class  BlockAccessor;  ; class  BlockConstAccessor;  ; class  ColBlockConstIterator;  ; class  InternalBlockAccessor;  ; class  InternalColBlockIterator;  ; class  InternalRowBlockIterator;  ; class  RowBlockConstIterator;  . Public Member Functions;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; virtual Index rowSize (void) const =0;  Number of rows. More...;  ; virtual Index colSize (void) const =0;  Number of columns. More...;  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; virtual SReal element (Index i, Index j) const =0;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void resize (Index nbRow, Index nbCol)=0;  Resize the matrix and reset all values to 0. More...;  ; virtual void clear ()=0;  Reset all values to 0. More...;  ; virtual void set (Index i, Index j, double v)=0;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, I",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:7467,Security,access,access,7467,"m & operator>> (std::istream &in, sofa::linearalgebra::BaseMatrix &m);  Declare that the operator >> is friend so they can use private data. More...;  . Get information about the content and structure of this matrix (diagonal, band, sparse, full, block size, ...); enum  ElementType { ELEMENT_UNKNOWN = 0; , ELEMENT_FLOAT; , ELEMENT_INT; };  ; enum  MatrixCategory { ;   MATRIX_UNKNOWN = 0; , MATRIX_IDENTITY; , MATRIX_DIAGONAL; , MATRIX_BAND; , ;   MATRIX_SPARSE; , MATRIX_FULL. };  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  . Virtual iterator classes and methods; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:7560,Security,access,access,7560,"they can use private data. More...;  . Get information about the content and structure of this matrix (diagonal, band, sparse, full, block size, ...); enum  ElementType { ELEMENT_UNKNOWN = 0; , ELEMENT_FLOAT; , ELEMENT_INT; };  ; enum  MatrixCategory { ;   MATRIX_UNKNOWN = 0; , MATRIX_IDENTITY; , MATRIX_DIAGONAL; , MATRIX_BAND; , ;   MATRIX_SPARSE; , MATRIX_FULL. };  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  . Virtual iterator classes and methods; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:7655,Security,access,access,7655,"agonal, band, sparse, full, block size, ...); enum  ElementType { ELEMENT_UNKNOWN = 0; , ELEMENT_FLOAT; , ELEMENT_INT; };  ; enum  MatrixCategory { ;   MATRIX_UNKNOWN = 0; , MATRIX_IDENTITY; , MATRIX_DIAGONAL; , MATRIX_BAND; , ;   MATRIX_SPARSE; , MATRIX_FULL. };  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  . Virtual iterator classes and methods; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  ; virtual RowBlockConstIterator bRowsBegin () const;  Get the iterator",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:29175,Security,access,access,29175," ◆ bAccessorSetDefaultImpl(). template<class T > . void sofa::linearalgebra::BaseMatrix::bAccessorSetDefaultImpl ; (; InternalBlockAccessor * ; b, . const T * ; buffer . ). inlineprotected . ◆ bColSize(). virtual Index sofa::linearalgebra::BaseMatrix::bColSize ; (; ); const. inlinevirtual . Returnsthe number of columns of blocks ; Reimplemented in sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, and sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >. ◆ blocAdd(). template<class T > . void sofa::linearalgebra::BaseMatrix::blocAdd ; (; Index ; i, . Index ; j, . const T * ; buffer . ). inline . Shortcut for blocCreate(i,j).add(buffer) . ◆ blocCreate(). virtual BlockAccessor sofa::linearalgebra::BaseMatrix::blocCreate ; (; Index ; i, . Index ; j . ). inlinevirtual . Get write access to a block, possibly creating it. . ◆ blocElements(). template<class T > . const T* sofa::linearalgebra::BaseMatrix::blocElements ; (; Index ; i, . Index ; j, . T * ; buffer . ); const. inline . Shortcut for blocGet(i,j).elements(buffer) . ◆ blocGet(). virtual BlockConstAccessor sofa::linearalgebra::BaseMatrix::blocGet ; (; Index ; i, . Index ; j . ); const. inlinevirtual . Get read access to a block. . ◆ blocGetW(). virtual BlockAccessor sofa::linearalgebra::BaseMatrix::blocGetW ; (; Index ; i, . Index ; j . ). inlinevirtual . Get write access to a block. . ◆ blocSet(). template<class T > . void sofa::linearalgebra::BaseMatrix::blocSet ; (; Index ; i, . Index ; j, . const T * ; buffer . ). inline . Shortcut for blocCreate(i,j).set(buffer) . ◆ bRowBegin(). virtual ColBlockConstIterator sofa::linearalgebra::BaseMatrix::bRowBegin ; (; Index ; ib); const. inlinevirtual . Get the iterator corresponding to the beginning of the given row of blocks. ; Reimplemented in sofa::linearalgebra::CompressedR",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:29568,Security,access,access,29568,"wSparseMatrixMechanical< TBlock, TPolicy >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, and sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >. ◆ blocAdd(). template<class T > . void sofa::linearalgebra::BaseMatrix::blocAdd ; (; Index ; i, . Index ; j, . const T * ; buffer . ). inline . Shortcut for blocCreate(i,j).add(buffer) . ◆ blocCreate(). virtual BlockAccessor sofa::linearalgebra::BaseMatrix::blocCreate ; (; Index ; i, . Index ; j . ). inlinevirtual . Get write access to a block, possibly creating it. . ◆ blocElements(). template<class T > . const T* sofa::linearalgebra::BaseMatrix::blocElements ; (; Index ; i, . Index ; j, . T * ; buffer . ); const. inline . Shortcut for blocGet(i,j).elements(buffer) . ◆ blocGet(). virtual BlockConstAccessor sofa::linearalgebra::BaseMatrix::blocGet ; (; Index ; i, . Index ; j . ); const. inlinevirtual . Get read access to a block. . ◆ blocGetW(). virtual BlockAccessor sofa::linearalgebra::BaseMatrix::blocGetW ; (; Index ; i, . Index ; j . ). inlinevirtual . Get write access to a block. . ◆ blocSet(). template<class T > . void sofa::linearalgebra::BaseMatrix::blocSet ; (; Index ; i, . Index ; j, . const T * ; buffer . ). inline . Shortcut for blocCreate(i,j).set(buffer) . ◆ bRowBegin(). virtual ColBlockConstIterator sofa::linearalgebra::BaseMatrix::bRowBegin ; (; Index ; ib); const. inlinevirtual . Get the iterator corresponding to the beginning of the given row of blocks. ; Reimplemented in sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, and sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >. ◆ bRowEnd(). virtual ColBlockConstIterator sofa::linearalgebra::BaseMatrix::bRowEnd ; (; Index ; ib); const. inlinevirtual . Get the iterator corresponding to the end of the given row",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:29726,Security,access,access,29726,"::CompressedRowSparseMatrixMechanical< MReal >, and sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >. ◆ blocAdd(). template<class T > . void sofa::linearalgebra::BaseMatrix::blocAdd ; (; Index ; i, . Index ; j, . const T * ; buffer . ). inline . Shortcut for blocCreate(i,j).add(buffer) . ◆ blocCreate(). virtual BlockAccessor sofa::linearalgebra::BaseMatrix::blocCreate ; (; Index ; i, . Index ; j . ). inlinevirtual . Get write access to a block, possibly creating it. . ◆ blocElements(). template<class T > . const T* sofa::linearalgebra::BaseMatrix::blocElements ; (; Index ; i, . Index ; j, . T * ; buffer . ); const. inline . Shortcut for blocGet(i,j).elements(buffer) . ◆ blocGet(). virtual BlockConstAccessor sofa::linearalgebra::BaseMatrix::blocGet ; (; Index ; i, . Index ; j . ); const. inlinevirtual . Get read access to a block. . ◆ blocGetW(). virtual BlockAccessor sofa::linearalgebra::BaseMatrix::blocGetW ; (; Index ; i, . Index ; j . ). inlinevirtual . Get write access to a block. . ◆ blocSet(). template<class T > . void sofa::linearalgebra::BaseMatrix::blocSet ; (; Index ; i, . Index ; j, . const T * ; buffer . ). inline . Shortcut for blocCreate(i,j).set(buffer) . ◆ bRowBegin(). virtual ColBlockConstIterator sofa::linearalgebra::BaseMatrix::bRowBegin ; (; Index ; ib); const. inlinevirtual . Get the iterator corresponding to the beginning of the given row of blocks. ; Reimplemented in sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, and sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >. ◆ bRowEnd(). virtual ColBlockConstIterator sofa::linearalgebra::BaseMatrix::bRowEnd ; (; Index ; ib); const. inlinevirtual . Get the iterator corresponding to the end of the given row of blocks. ; Reimplemented in sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:1635,Usability,clear,clear,1635,"ockAccessor;  ; class  BlockConstAccessor;  ; class  ColBlockConstIterator;  ; class  InternalBlockAccessor;  ; class  InternalColBlockIterator;  ; class  InternalRowBlockIterator;  ; class  RowBlockConstIterator;  . Public Member Functions;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; virtual Index rowSize (void) const =0;  Number of rows. More...;  ; virtual Index colSize (void) const =0;  Number of columns. More...;  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; virtual SReal element (Index i, Index j) const =0;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void resize (Index nbRow, Index nbCol)=0;  Resize the matrix and reset all values to 0. More...;  ; virtual void clear ()=0;  Reset all values to 0. More...;  ; virtual void set (Index i, Index j, double v)=0;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better per",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:3028,Usability,clear,clear,3028,"ix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; basic linear operations; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:3070,Usability,clear,clearRow,3070,"ix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; basic linear operations; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:3152,Usability,clear,clearRows,3152,"ol, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; basic linear operations; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vect",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:3189,Usability,Clear,Clears,3189,"ol, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; basic linear operations; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vect",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:3255,Usability,clear,clearCol,3255," to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; basic linear operations; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearal",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:3340,Usability,clear,clearCols,3340,"t2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; basic linear operations; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:3377,Usability,Clear,Clears,3377,"t2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; basic linear operations; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:3451,Usability,clear,clearRowCol,3451,"es. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; basic linear operations; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:3547,Usability,clear,clearRowsCols,3547,"This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; basic linear operations; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulV (double *result, const double *v) const",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:3588,Usability,Clear,Clears,3588,"This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; basic linear operations; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulV (double *result, const double *v) const",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:33393,Usability,clear,clear,33393,"aralgebra::BaseMatrix::bRowSize ; (; ); const. inlinevirtual . Returnsthe number of rows of blocks ; Reimplemented in sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, and sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >. ◆ bRowsRange(). virtual std::pair<RowBlockConstIterator, RowBlockConstIterator> sofa::linearalgebra::BaseMatrix::bRowsRange ; (; ); const. inlinevirtual . Get the iterators corresponding to the beginning and end of the given row of blocks. ; Reimplemented in sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, and sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >. ◆ clear() [1/2]. virtual void sofa::linearalgebra::BaseMatrix::clear ; (; ). pure virtual . Reset all values to 0. ; Implemented in sofa::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::RotationMatrix< TReal >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::lin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:33454,Usability,clear,clear,33454," const. inlinevirtual . Returnsthe number of rows of blocks ; Reimplemented in sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, and sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >. ◆ bRowsRange(). virtual std::pair<RowBlockConstIterator, RowBlockConstIterator> sofa::linearalgebra::BaseMatrix::bRowsRange ; (; ); const. inlinevirtual . Get the iterators corresponding to the beginning and end of the given row of blocks. ; Reimplemented in sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, and sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >. ◆ clear() [1/2]. virtual void sofa::linearalgebra::BaseMatrix::clear ; (; ). pure virtual . Reset all values to 0. ; Implemented in sofa::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::RotationMatrix< TReal >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixM",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:34696,Usability,clear,clear,34696,":linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::BTDMatrix< N, T >, sofa::linearalgebra::BlockFullMatrix< N, T >, sofa::linearalgebra::BlockDiagonalMatrix< LC, T >, sofa::core::behavior::ApplyConstraintCompat, and sofa::core::behavior::AddToMatrixCompatMatrix< c >. ◆ clear() [2/2]. virtual void sofa::linearalgebra::BaseMatrix::clear ; (; Index ; i, . Index ; j . ). inlinevirtual . Reimplemented in sofa::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::BTDMatrix< N, T >, sofa::linearalgebra::BlockFullMatrix< N, T >, and sofa::linearalgebra::BlockDiagonalMatrix< LC, T >. ◆ clearCol(). virtual void sofa::linearalgebra::BaseMatrix::clearCol ; (; Index ; j). inlinevirtual . Reset the a",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:34757,Usability,clear,clear,34757,"ralgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::BTDMatrix< N, T >, sofa::linearalgebra::BlockFullMatrix< N, T >, sofa::linearalgebra::BlockDiagonalMatrix< LC, T >, sofa::core::behavior::ApplyConstraintCompat, and sofa::core::behavior::AddToMatrixCompatMatrix< c >. ◆ clear() [2/2]. virtual void sofa::linearalgebra::BaseMatrix::clear ; (; Index ; i, . Index ; j . ). inlinevirtual . Reimplemented in sofa::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::BTDMatrix< N, T >, sofa::linearalgebra::BlockFullMatrix< N, T >, and sofa::linearalgebra::BlockDiagonalMatrix< LC, T >. ◆ clearCol(). virtual void sofa::linearalgebra::BaseMatrix::clearCol ; (; Index ; j). inlinevirtual . Reset the all values in column j to 0. ; Reimplemented",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:35591,Usability,clear,clearCol,35591,"fa::core::behavior::ApplyConstraintCompat, and sofa::core::behavior::AddToMatrixCompatMatrix< c >. ◆ clear() [2/2]. virtual void sofa::linearalgebra::BaseMatrix::clear ; (; Index ; i, . Index ; j . ). inlinevirtual . Reimplemented in sofa::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::BTDMatrix< N, T >, sofa::linearalgebra::BlockFullMatrix< N, T >, and sofa::linearalgebra::BlockDiagonalMatrix< LC, T >. ◆ clearCol(). virtual void sofa::linearalgebra::BaseMatrix::clearCol ; (; Index ; j). inlinevirtual . Reset the all values in column j to 0. ; Reimplemented in sofa::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::BTDMatrix< N, T >, sofa::linearalgebra::BlockFullMatrix< N, T >, sofa::linearalgebra::BlockDiagonalMatrix< LC, T >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseM",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:35649,Usability,clear,clearCol,35649,"and sofa::core::behavior::AddToMatrixCompatMatrix< c >. ◆ clear() [2/2]. virtual void sofa::linearalgebra::BaseMatrix::clear ; (; Index ; i, . Index ; j . ). inlinevirtual . Reimplemented in sofa::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::BTDMatrix< N, T >, sofa::linearalgebra::BlockFullMatrix< N, T >, and sofa::linearalgebra::BlockDiagonalMatrix< LC, T >. ◆ clearCol(). virtual void sofa::linearalgebra::BaseMatrix::clearCol ; (; Index ; j). inlinevirtual . Reset the all values in column j to 0. ; Reimplemented in sofa::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::BTDMatrix< N, T >, sofa::linearalgebra::BlockFullMatrix< N, T >, sofa::linearalgebra::BlockDiagonalMatrix< LC, T >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, and sofa::line",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:36702,Usability,clear,clearCols,36702,"alues in column j to 0. ; Reimplemented in sofa::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::BTDMatrix< N, T >, sofa::linearalgebra::BlockFullMatrix< N, T >, sofa::linearalgebra::BlockDiagonalMatrix< LC, T >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, and sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >. ◆ clearCols(). virtual void sofa::linearalgebra::BaseMatrix::clearCols ; (; Index ; imin, . Index ; imax . ). inlinevirtual . Clears all the values in columns imin to imax-1. ; Reimplemented in sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, and sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >. ◆ clearRow(). virtual void sofa::linearalgebra::BaseMatrix::clearRow ; (; Index ; i). inlinevirtual . Reset all the values in row i to 0. ; Reimplemented in sofa::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >, sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:36761,Usability,clear,clearCols,36761,"a::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::BTDMatrix< N, T >, sofa::linearalgebra::BlockFullMatrix< N, T >, sofa::linearalgebra::BlockDiagonalMatrix< LC, T >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, and sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >. ◆ clearCols(). virtual void sofa::linearalgebra::BaseMatrix::clearCols ; (; Index ; imin, . Index ; imax . ). inlinevirtual . Clears all the values in columns imin to imax-1. ; Reimplemented in sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, and sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >. ◆ clearRow(). virtual void sofa::linearalgebra::BaseMatrix::clearRow ; (; Index ; i). inlinevirtual . Reset all the values in row i to 0. ; Reimplemented in sofa::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::line",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:36826,Usability,Clear,Clears,36826,"bra::SparseMatrix< Real >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::BTDMatrix< N, T >, sofa::linearalgebra::BlockFullMatrix< N, T >, sofa::linearalgebra::BlockDiagonalMatrix< LC, T >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, and sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >. ◆ clearCols(). virtual void sofa::linearalgebra::BaseMatrix::clearCols ; (; Index ; imin, . Index ; imax . ). inlinevirtual . Clears all the values in columns imin to imax-1. ; Reimplemented in sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, and sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >. ◆ clearRow(). virtual void sofa::linearalgebra::BaseMatrix::clearRow ; (; Index ; i). inlinevirtual . Reset all the values in row i to 0. ; Reimplemented in sofa::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:37091,Usability,clear,clearRow,37091,">, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::BTDMatrix< N, T >, sofa::linearalgebra::BlockFullMatrix< N, T >, sofa::linearalgebra::BlockDiagonalMatrix< LC, T >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, and sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >. ◆ clearCols(). virtual void sofa::linearalgebra::BaseMatrix::clearCols ; (; Index ; imin, . Index ; imax . ). inlinevirtual . Clears all the values in columns imin to imax-1. ; Reimplemented in sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, and sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >. ◆ clearRow(). virtual void sofa::linearalgebra::BaseMatrix::clearRow ; (; Index ; i). inlinevirtual . Reset all the values in row i to 0. ; Reimplemented in sofa::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::BTDMatrix< N, T >,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:37149,Usability,clear,clearRow,37149,">, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::BTDMatrix< N, T >, sofa::linearalgebra::BlockFullMatrix< N, T >, sofa::linearalgebra::BlockDiagonalMatrix< LC, T >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, and sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >. ◆ clearCols(). virtual void sofa::linearalgebra::BaseMatrix::clearCols ; (; Index ; imin, . Index ; imax . ). inlinevirtual . Clears all the values in columns imin to imax-1. ; Reimplemented in sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, and sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >. ◆ clearRow(). virtual void sofa::linearalgebra::BaseMatrix::clearRow ; (; Index ; i). inlinevirtual . Reset all the values in row i to 0. ; Reimplemented in sofa::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::BTDMatrix< N, T >, sofa::linearalgebra::BlockFullMatrix< N, T",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:38199,Usability,clear,clearRowCol,38199," values in row i to 0. ; Reimplemented in sofa::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::BTDMatrix< N, T >, sofa::linearalgebra::BlockFullMatrix< N, T >, and sofa::linearalgebra::BlockDiagonalMatrix< LC, T >. ◆ clearRowCol(). virtual void sofa::linearalgebra::BaseMatrix::clearRowCol ; (; Index ; i). inlinevirtual . Reset the value of both row and column i to 0. ; Reimplemented in sofa::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::BTD",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:38260,Usability,clear,clearRowCol,38260,"::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::BTDMatrix< N, T >, sofa::linearalgebra::BlockFullMatrix< N, T >, and sofa::linearalgebra::BlockDiagonalMatrix< LC, T >. ◆ clearRowCol(). virtual void sofa::linearalgebra::BaseMatrix::clearRowCol ; (; Index ; i). inlinevirtual . Reset the value of both row and column i to 0. ; Reimplemented in sofa::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::BTDMatrix< N, T >, sofa::linearalgebra::BlockFull",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:39369,Usability,clear,clearRows,39369,"fa::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::BTDMatrix< N, T >, sofa::linearalgebra::BlockFullMatrix< N, T >, sofa::linearalgebra::BlockDiagonalMatrix< LC, T >, and sofa::core::behavior::ApplyConstraintCompat. ◆ clearRows(). virtual void sofa::linearalgebra::BaseMatrix::clearRows ; (; Index ; imin, . Index ; imax . ). inlinevirtual . Clears the value of rows imin to imax-1. ; Reimplemented in sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, and sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >. ◆ clearRowsCols(). virtual void sofa::linearalgebra::BaseMatrix::clearRowsCols ; (; Index ; imin, . Index ; imax . ). inlinevirtual . Clears all the values in rows imin to imax-1 and columns imin to imax-1. ; Reimplemented in sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, and sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >. ◆ cols(). Index sofa::linearalgebra::BaseMatrix::cols ; (; void ; ); const. inline . Number of columns (Eigen-compatible API) . ◆ colSize(). virtual Index sofa::linearalgebra::BaseMatrix::colSize ; (; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:39428,Usability,clear,clearRows,39428,"nearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::BTDMatrix< N, T >, sofa::linearalgebra::BlockFullMatrix< N, T >, sofa::linearalgebra::BlockDiagonalMatrix< LC, T >, and sofa::core::behavior::ApplyConstraintCompat. ◆ clearRows(). virtual void sofa::linearalgebra::BaseMatrix::clearRows ; (; Index ; imin, . Index ; imax . ). inlinevirtual . Clears the value of rows imin to imax-1. ; Reimplemented in sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, and sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >. ◆ clearRowsCols(). virtual void sofa::linearalgebra::BaseMatrix::clearRowsCols ; (; Index ; imin, . Index ; imax . ). inlinevirtual . Clears all the values in rows imin to imax-1 and columns imin to imax-1. ; Reimplemented in sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, and sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >. ◆ cols(). Index sofa::linearalgebra::BaseMatrix::cols ; (; void ; ); const. inline . Number of columns (Eigen-compatible API) . ◆ colSize(). virtual Index sofa::linearalgebra::BaseMatrix::colSize ; (; void ; ); const. pure virtual . Number of columns.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:39493,Usability,Clear,Clears,39493,"gebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::BTDMatrix< N, T >, sofa::linearalgebra::BlockFullMatrix< N, T >, sofa::linearalgebra::BlockDiagonalMatrix< LC, T >, and sofa::core::behavior::ApplyConstraintCompat. ◆ clearRows(). virtual void sofa::linearalgebra::BaseMatrix::clearRows ; (; Index ; imin, . Index ; imax . ). inlinevirtual . Clears the value of rows imin to imax-1. ; Reimplemented in sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, and sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >. ◆ clearRowsCols(). virtual void sofa::linearalgebra::BaseMatrix::clearRowsCols ; (; Index ; imin, . Index ; imax . ). inlinevirtual . Clears all the values in rows imin to imax-1 and columns imin to imax-1. ; Reimplemented in sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, and sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >. ◆ cols(). Index sofa::linearalgebra::BaseMatrix::cols ; (; void ; ); const. inline . Number of columns (Eigen-compatible API) . ◆ colSize(). virtual Index sofa::linearalgebra::BaseMatrix::colSize ; (; void ; ); const. pure virtual . Number of columns. ; Implemented in sofa::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:39750,Usability,clear,clearRowsCols,39750,"fa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::BTDMatrix< N, T >, sofa::linearalgebra::BlockFullMatrix< N, T >, sofa::linearalgebra::BlockDiagonalMatrix< LC, T >, and sofa::core::behavior::ApplyConstraintCompat. ◆ clearRows(). virtual void sofa::linearalgebra::BaseMatrix::clearRows ; (; Index ; imin, . Index ; imax . ). inlinevirtual . Clears the value of rows imin to imax-1. ; Reimplemented in sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, and sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >. ◆ clearRowsCols(). virtual void sofa::linearalgebra::BaseMatrix::clearRowsCols ; (; Index ; imin, . Index ; imax . ). inlinevirtual . Clears all the values in rows imin to imax-1 and columns imin to imax-1. ; Reimplemented in sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, and sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >. ◆ cols(). Index sofa::linearalgebra::BaseMatrix::cols ; (; void ; ); const. inline . Number of columns (Eigen-compatible API) . ◆ colSize(). virtual Index sofa::linearalgebra::BaseMatrix::colSize ; (; void ; ); const. pure virtual . Number of columns. ; Implemented in sofa::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::RotationMatrix< TReal >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::lin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:39813,Usability,clear,clearRowsCols,39813," DataTypes::Real >, sofa::linearalgebra::DiagonalMatrix< T >, sofa::linearalgebra::DiagonalMatrix< R1 >, sofa::linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::BTDMatrix< N, T >, sofa::linearalgebra::BlockFullMatrix< N, T >, sofa::linearalgebra::BlockDiagonalMatrix< LC, T >, and sofa::core::behavior::ApplyConstraintCompat. ◆ clearRows(). virtual void sofa::linearalgebra::BaseMatrix::clearRows ; (; Index ; imin, . Index ; imax . ). inlinevirtual . Clears the value of rows imin to imax-1. ; Reimplemented in sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, and sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >. ◆ clearRowsCols(). virtual void sofa::linearalgebra::BaseMatrix::clearRowsCols ; (; Index ; imin, . Index ; imax . ). inlinevirtual . Clears all the values in rows imin to imax-1 and columns imin to imax-1. ; Reimplemented in sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, and sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >. ◆ cols(). Index sofa::linearalgebra::BaseMatrix::cols ; (; void ; ); const. inline . Number of columns (Eigen-compatible API) . ◆ colSize(). virtual Index sofa::linearalgebra::BaseMatrix::colSize ; (; void ; ); const. pure virtual . Number of columns. ; Implemented in sofa::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::RotationMatrix< TReal >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:39882,Usability,Clear,Clears,39882,"linearalgebra::DiagonalMatrix< R2 >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >, sofa::linearalgebra::BTDMatrix< N, T >, sofa::linearalgebra::BlockFullMatrix< N, T >, sofa::linearalgebra::BlockDiagonalMatrix< LC, T >, and sofa::core::behavior::ApplyConstraintCompat. ◆ clearRows(). virtual void sofa::linearalgebra::BaseMatrix::clearRows ; (; Index ; imin, . Index ; imax . ). inlinevirtual . Clears the value of rows imin to imax-1. ; Reimplemented in sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, and sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >. ◆ clearRowsCols(). virtual void sofa::linearalgebra::BaseMatrix::clearRowsCols ; (; Index ; imin, . Index ; imax . ). inlinevirtual . Clears all the values in rows imin to imax-1 and columns imin to imax-1. ; Reimplemented in sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, and sofa::linearalgebra::EigenBaseSparseMatrix< typename DataTypes::Real >. ◆ cols(). Index sofa::linearalgebra::BaseMatrix::cols ; (; void ; ); const. inline . Number of columns (Eigen-compatible API) . ◆ colSize(). virtual Index sofa::linearalgebra::BaseMatrix::colSize ; (; void ; ); const. pure virtual . Number of columns. ; Implemented in sofa::linearalgebra::SparseMatrix< T >, sofa::linearalgebra::SparseMatrix< SReal >, sofa::linearalgebra::SparseMatrix< Real >, sofa::linearalgebra::RotationMatrix< TReal >, sofa::linearalgebra::FullMatrix< T >, sofa::linearalgebra::FullMatrix< typename Vector::Real >, sofa::linearalgebra::FullMatrix< Real >, sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >, sofa::linearalgebra::EigenBaseSparseMatrix< typenam",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_block_accessor-members.html:264,Modifiability,inherit,inherited,264,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BaseMatrix::BlockAccessor Member List . This is the complete list of members for sofa::linearalgebra::BaseMatrix::BlockAccessor, including all inherited members. add(Index i, Index j, double v)sofa::linearalgebra::BaseMatrix::BlockAccessorinline; add(const float *src)sofa::linearalgebra::BaseMatrix::BlockAccessorinline; add(const double *src)sofa::linearalgebra::BaseMatrix::BlockAccessorinline; add(const int *src)sofa::linearalgebra::BaseMatrix::BlockAccessorinline; BaseMatrix classsofa::linearalgebra::BaseMatrix::BlockAccessorfriend; BlockAccessor()sofa::linearalgebra::BaseMatrix::BlockAccessorinlineprotected; BlockAccessor(BaseMatrix *matrix, Index row, Index col, void *internalPtr)sofa::linearalgebra::BaseMatrix::BlockAccessorinlineprotected; BlockAccessor(BaseMatrix *matrix, Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrix::BlockAccessorinlineprotected; BlockAccessor(const BlockAccessor &b)sofa::linearalgebra::BaseMatrix::BlockAccessorinline; BlockConstAccessor classsofa::linearalgebra::BaseMatrix::BlockAccessorfriend; ColBlockConstIterator classsofa::linearalgebra::BaseMatrix::BlockAccessorfriend; element(Index i, Index j) constsofa::linearalgebra::BaseMatrix::BlockAccessorinline; elements(float *dest) constsofa::linearalgebra::BaseMatrix::BlockAccessorinline; elements(double *dest) constsofa::linearalgebra::BaseMatrix::BlockAccessorinline; elements(int *dest) constsofa::linearalgebra::BaseMatrix::BlockAccessorinline; finishAdd(const float *buffer)sofa::linearalgebra::BaseMatrix::BlockAccessorinline; finishAdd(const double *buffer)sofa::linearalgebra::BaseMatrix::BlockAccessorinline; finishAdd(const int *buffer)sofa::linearalgebra::BaseMatrix::BlockAccessorinline; getCol() constsofa::linearalgebra::BaseMatrix::BlockAccessorinline; getMatrix() constsofa::linearalgebra::BaseMatrix::BlockAccessorinline; getMatrix()sofa::li",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_block_accessor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_block_accessor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_block_accessor.html:7336,Usability,clear,clear,7336,"ne returned by calling the prepareAdd method. . ◆ getCol(). Index sofa::linearalgebra::BaseMatrix::BlockAccessor::getCol ; (; ); const. inline . ◆ getMatrix() [1/2]. BaseMatrix* sofa::linearalgebra::BaseMatrix::BlockAccessor::getMatrix ; (; ). inline . ◆ getMatrix() [2/2]. const BaseMatrix* sofa::linearalgebra::BaseMatrix::BlockAccessor::getMatrix ; (; ); const. inline . ◆ getRow(). Index sofa::linearalgebra::BaseMatrix::BlockAccessor::getRow ; (; ); const. inline . ◆ isValid(). bool sofa::linearalgebra::BaseMatrix::BlockAccessor::isValid ; (; ); const. inline . ◆ operator=(). void sofa::linearalgebra::BaseMatrix::BlockAccessor::operator= ; (; const BlockAccessor & ; b). inline . ◆ prepareAdd() [1/3]. const double* sofa::linearalgebra::BaseMatrix::BlockAccessor::prepareAdd ; (; double * ; buffer). inline . Prepare the addition of double values to this block. Return a pointer to a double buffer where values can be added. If the in-memory format of the matrix is incompatible, the provided buffer can be used, but the method must clear it before returning. . ◆ prepareAdd() [2/3]. const float* sofa::linearalgebra::BaseMatrix::BlockAccessor::prepareAdd ; (; float * ; buffer). inline . Prepare the addition of float values to this block. Return a pointer to a float buffer where values can be added. If the in-memory format of the matrix is incompatible, the provided buffer can be used, but the method must clear it before returning. . ◆ prepareAdd() [3/3]. const int* sofa::linearalgebra::BaseMatrix::BlockAccessor::prepareAdd ; (; int * ; buffer). inline . Prepare the addition of int values to this block. Return a pointer to a int buffer where values can be added. If the in-memory format of the matrix is incompatible, the provided buffer can be used, but the method must clear it before returning. . ◆ set() [1/4]. void sofa::linearalgebra::BaseMatrix::BlockAccessor::set ; (; const double * ; src). inline . Set all values of this block from the given double buffer. . ◆ set() [2/4",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_block_accessor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_block_accessor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_block_accessor.html:7714,Usability,clear,clear,7714,"tRow(). Index sofa::linearalgebra::BaseMatrix::BlockAccessor::getRow ; (; ); const. inline . ◆ isValid(). bool sofa::linearalgebra::BaseMatrix::BlockAccessor::isValid ; (; ); const. inline . ◆ operator=(). void sofa::linearalgebra::BaseMatrix::BlockAccessor::operator= ; (; const BlockAccessor & ; b). inline . ◆ prepareAdd() [1/3]. const double* sofa::linearalgebra::BaseMatrix::BlockAccessor::prepareAdd ; (; double * ; buffer). inline . Prepare the addition of double values to this block. Return a pointer to a double buffer where values can be added. If the in-memory format of the matrix is incompatible, the provided buffer can be used, but the method must clear it before returning. . ◆ prepareAdd() [2/3]. const float* sofa::linearalgebra::BaseMatrix::BlockAccessor::prepareAdd ; (; float * ; buffer). inline . Prepare the addition of float values to this block. Return a pointer to a float buffer where values can be added. If the in-memory format of the matrix is incompatible, the provided buffer can be used, but the method must clear it before returning. . ◆ prepareAdd() [3/3]. const int* sofa::linearalgebra::BaseMatrix::BlockAccessor::prepareAdd ; (; int * ; buffer). inline . Prepare the addition of int values to this block. Return a pointer to a int buffer where values can be added. If the in-memory format of the matrix is incompatible, the provided buffer can be used, but the method must clear it before returning. . ◆ set() [1/4]. void sofa::linearalgebra::BaseMatrix::BlockAccessor::set ; (; const double * ; src). inline . Set all values of this block from the given double buffer. . ◆ set() [2/4]. void sofa::linearalgebra::BaseMatrix::BlockAccessor::set ; (; const float * ; src). inline . Set all values of this block from the given float buffer. . ◆ set() [3/4]. void sofa::linearalgebra::BaseMatrix::BlockAccessor::set ; (; const int * ; src). inline . Set all values of this block from the given int buffer. . ◆ set() [4/4]. void sofa::linearalgebra::BaseMatrix::Block",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_block_accessor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_block_accessor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_block_accessor.html:8084,Usability,clear,clear,8084,"seMatrix::BlockAccessor::prepareAdd ; (; double * ; buffer). inline . Prepare the addition of double values to this block. Return a pointer to a double buffer where values can be added. If the in-memory format of the matrix is incompatible, the provided buffer can be used, but the method must clear it before returning. . ◆ prepareAdd() [2/3]. const float* sofa::linearalgebra::BaseMatrix::BlockAccessor::prepareAdd ; (; float * ; buffer). inline . Prepare the addition of float values to this block. Return a pointer to a float buffer where values can be added. If the in-memory format of the matrix is incompatible, the provided buffer can be used, but the method must clear it before returning. . ◆ prepareAdd() [3/3]. const int* sofa::linearalgebra::BaseMatrix::BlockAccessor::prepareAdd ; (; int * ; buffer). inline . Prepare the addition of int values to this block. Return a pointer to a int buffer where values can be added. If the in-memory format of the matrix is incompatible, the provided buffer can be used, but the method must clear it before returning. . ◆ set() [1/4]. void sofa::linearalgebra::BaseMatrix::BlockAccessor::set ; (; const double * ; src). inline . Set all values of this block from the given double buffer. . ◆ set() [2/4]. void sofa::linearalgebra::BaseMatrix::BlockAccessor::set ; (; const float * ; src). inline . Set all values of this block from the given float buffer. . ◆ set() [3/4]. void sofa::linearalgebra::BaseMatrix::BlockAccessor::set ; (; const int * ; src). inline . Set all values of this block from the given int buffer. . ◆ set() [4/4]. void sofa::linearalgebra::BaseMatrix::BlockAccessor::set ; (; Index ; i, . Index ; j, . double ; v . ). inline . Write the value of the element at row i, column j within this block (using 0-based indices) . Related details. ◆ BaseMatrix. friend class BaseMatrix. friend . ◆ BlockConstAccessor. friend class BlockConstAccessor. friend . ◆ ColBlockConstIterator. friend class ColBlockConstIterator. friend . sofalin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_block_accessor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_block_accessor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_block_const_accessor-members.html:274,Modifiability,inherit,inherited,274,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BaseMatrix::BlockConstAccessor Member List . This is the complete list of members for sofa::linearalgebra::BaseMatrix::BlockConstAccessor, including all inherited members. BaseMatrix classsofa::linearalgebra::BaseMatrix::BlockConstAccessorfriend; BlockConstAccessor()sofa::linearalgebra::BaseMatrix::BlockConstAccessorinlineprotected; BlockConstAccessor(const BaseMatrix *matrix, Index row, Index col, void *internalPtr)sofa::linearalgebra::BaseMatrix::BlockConstAccessorinlineprotected; BlockConstAccessor(const BaseMatrix *matrix, Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrix::BlockConstAccessorinlineprotected; BlockConstAccessor(const BlockConstAccessor &b)sofa::linearalgebra::BaseMatrix::BlockConstAccessorinline; BlockConstAccessor(const BlockAccessor &b)sofa::linearalgebra::BaseMatrix::BlockConstAccessorinline; ColBlockConstIterator classsofa::linearalgebra::BaseMatrix::BlockConstAccessorfriend; element(Index i, Index j) constsofa::linearalgebra::BaseMatrix::BlockConstAccessorinline; elements(float *dest) constsofa::linearalgebra::BaseMatrix::BlockConstAccessorinline; elements(double *dest) constsofa::linearalgebra::BaseMatrix::BlockConstAccessorinline; elements(int *dest) constsofa::linearalgebra::BaseMatrix::BlockConstAccessorinline; getCol() constsofa::linearalgebra::BaseMatrix::BlockConstAccessorinline; getMatrix() constsofa::linearalgebra::BaseMatrix::BlockConstAccessorinline; getRow() constsofa::linearalgebra::BaseMatrix::BlockConstAccessorinline; internalsofa::linearalgebra::BaseMatrix::BlockConstAccessorprotected; isValid() constsofa::linearalgebra::BaseMatrix::BlockConstAccessorinline; matrixsofa::linearalgebra::BaseMatrix::BlockConstAccessorprotected; operator=(const BlockConstAccessor &b)sofa::linearalgebra::BaseMatrix::BlockConstAccessorinline; operator=(const BlockAccessor &b)sofa::linearalgebra::BaseMatrix::B",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_block_const_accessor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_block_const_accessor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_col_block_const_iterator-members.html:280,Modifiability,inherit,inherited,280,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BaseMatrix::ColBlockConstIterator Member List . This is the complete list of members for sofa::linearalgebra::BaseMatrix::ColBlockConstIterator, including all inherited members. bsofa::linearalgebra::BaseMatrix::ColBlockConstIteratorprotected; BaseMatrix classsofa::linearalgebra::BaseMatrix::ColBlockConstIteratorfriend; bloc()sofa::linearalgebra::BaseMatrix::ColBlockConstIteratorinline; ColBlockConstIterator(const BaseMatrix *matrix, Index row, void *internalPtr)sofa::linearalgebra::BaseMatrix::ColBlockConstIteratorinlineprotected; ColBlockConstIterator(const BaseMatrix *matrix, Index row, Index internalData)sofa::linearalgebra::BaseMatrix::ColBlockConstIteratorinlineprotected; ColBlockConstIterator()sofa::linearalgebra::BaseMatrix::ColBlockConstIteratorinline; ColBlockConstIterator(const ColBlockConstIterator &it2)sofa::linearalgebra::BaseMatrix::ColBlockConstIteratorinline; internalsofa::linearalgebra::BaseMatrix::ColBlockConstIteratorprotected; matrixsofa::linearalgebra::BaseMatrix::ColBlockConstIteratorprotected; operator!=(const ColBlockConstIterator &it2) constsofa::linearalgebra::BaseMatrix::ColBlockConstIteratorinline; operator*()sofa::linearalgebra::BaseMatrix::ColBlockConstIteratorinline; operator++()sofa::linearalgebra::BaseMatrix::ColBlockConstIteratorinline; operator++(int)sofa::linearalgebra::BaseMatrix::ColBlockConstIteratorinline; operator--()sofa::linearalgebra::BaseMatrix::ColBlockConstIteratorinline; operator--(int)sofa::linearalgebra::BaseMatrix::ColBlockConstIteratorinline; operator->()sofa::linearalgebra::BaseMatrix::ColBlockConstIteratorinline; operator<(const ColBlockConstIterator &it2) constsofa::linearalgebra::BaseMatrix::ColBlockConstIteratorinline; operator=(const ColBlockConstIterator &it2)sofa::linearalgebra::BaseMatrix::ColBlockConstIteratorinline; operator==(const ColBlockConstIterator &it2) constsofa::linearalgebra:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_col_block_const_iterator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_col_block_const_iterator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_internal_block_accessor-members.html:280,Modifiability,inherit,inherited,280,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BaseMatrix::InternalBlockAccessor Member List . This is the complete list of members for sofa::linearalgebra::BaseMatrix::InternalBlockAccessor, including all inherited members. colsofa::linearalgebra::BaseMatrix::InternalBlockAccessor; datasofa::linearalgebra::BaseMatrix::InternalBlockAccessor; InternalBlockAccessor()sofa::linearalgebra::BaseMatrix::InternalBlockAccessorinline; InternalBlockAccessor(Index row, Index col, void *internalPtr)sofa::linearalgebra::BaseMatrix::InternalBlockAccessorinline; InternalBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrix::InternalBlockAccessorinline; ptrsofa::linearalgebra::BaseMatrix::InternalBlockAccessor; rowsofa::linearalgebra::BaseMatrix::InternalBlockAccessor. Generated on Mon Nov 11 2024 03:31:06 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_internal_block_accessor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_internal_block_accessor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_internal_col_block_iterator-members.html:286,Modifiability,inherit,inherited,286,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BaseMatrix::InternalColBlockIterator Member List . This is the complete list of members for sofa::linearalgebra::BaseMatrix::InternalColBlockIterator, including all inherited members. datasofa::linearalgebra::BaseMatrix::InternalColBlockIterator; InternalColBlockIterator()sofa::linearalgebra::BaseMatrix::InternalColBlockIteratorinline; InternalColBlockIterator(Index row, void *internalPtr)sofa::linearalgebra::BaseMatrix::InternalColBlockIteratorinline; InternalColBlockIterator(Index row, Index internalData)sofa::linearalgebra::BaseMatrix::InternalColBlockIteratorinline; ptrsofa::linearalgebra::BaseMatrix::InternalColBlockIterator; rowsofa::linearalgebra::BaseMatrix::InternalColBlockIterator. Generated on Mon Nov 11 2024 03:31:06 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_internal_col_block_iterator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_internal_col_block_iterator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_internal_row_block_iterator-members.html:286,Modifiability,inherit,inherited,286,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BaseMatrix::InternalRowBlockIterator Member List . This is the complete list of members for sofa::linearalgebra::BaseMatrix::InternalRowBlockIterator, including all inherited members. datasofa::linearalgebra::BaseMatrix::InternalRowBlockIterator; InternalRowBlockIterator()sofa::linearalgebra::BaseMatrix::InternalRowBlockIteratorinline; InternalRowBlockIterator(void *internalPtr)sofa::linearalgebra::BaseMatrix::InternalRowBlockIteratorinline; InternalRowBlockIterator(Index internalData0, Index internalData1)sofa::linearalgebra::BaseMatrix::InternalRowBlockIteratorinline; ptrsofa::linearalgebra::BaseMatrix::InternalRowBlockIterator. Generated on Mon Nov 11 2024 03:31:06 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_internal_row_block_iterator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_internal_row_block_iterator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_row_block_const_iterator-members.html:280,Modifiability,inherit,inherited,280,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BaseMatrix::RowBlockConstIterator Member List . This is the complete list of members for sofa::linearalgebra::BaseMatrix::RowBlockConstIterator, including all inherited members. BaseMatrix classsofa::linearalgebra::BaseMatrix::RowBlockConstIteratorfriend; begin()sofa::linearalgebra::BaseMatrix::RowBlockConstIteratorinline; end()sofa::linearalgebra::BaseMatrix::RowBlockConstIteratorinline; internalsofa::linearalgebra::BaseMatrix::RowBlockConstIteratorprotected; matrixsofa::linearalgebra::BaseMatrix::RowBlockConstIteratorprotected; operator!=(const RowBlockConstIterator &it2) constsofa::linearalgebra::BaseMatrix::RowBlockConstIteratorinline; operator*()sofa::linearalgebra::BaseMatrix::RowBlockConstIteratorinline; operator++()sofa::linearalgebra::BaseMatrix::RowBlockConstIteratorinline; operator++(int)sofa::linearalgebra::BaseMatrix::RowBlockConstIteratorinline; operator--()sofa::linearalgebra::BaseMatrix::RowBlockConstIteratorinline; operator--(int)sofa::linearalgebra::BaseMatrix::RowBlockConstIteratorinline; operator->()sofa::linearalgebra::BaseMatrix::RowBlockConstIteratorinline; operator<(const RowBlockConstIterator &it2) constsofa::linearalgebra::BaseMatrix::RowBlockConstIteratorinline; operator=(const RowBlockConstIterator &it2)sofa::linearalgebra::BaseMatrix::RowBlockConstIteratorinline; operator==(const RowBlockConstIterator &it2) constsofa::linearalgebra::BaseMatrix::RowBlockConstIteratorinline; operator>(const RowBlockConstIterator &it2) constsofa::linearalgebra::BaseMatrix::RowBlockConstIteratorinline; range()sofa::linearalgebra::BaseMatrix::RowBlockConstIteratorinline; row()sofa::linearalgebra::BaseMatrix::RowBlockConstIteratorinline; RowBlockConstIterator(const BaseMatrix *matrix, void *internalPtr)sofa::linearalgebra::BaseMatrix::RowBlockConstIteratorinlineprotected; RowBlockConstIterator(const BaseMatrix *matrix, Index internalData0, In",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_row_block_const_iterator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_1_1_row_block_const_iterator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_add_m-members.html:258,Modifiability,inherit,inherited,258,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BaseMatrixLinearOpAddM Member List . This is the complete list of members for sofa::linearalgebra::BaseMatrixLinearOpAddM, including all inherited members. Index typedefsofa::linearalgebra::BaseMatrixLinearOpAM< false >; opDiagonal(const M1 *m1, M2 *m2, double fact)sofa::linearalgebra::BaseMatrixLinearOpAM< false >inlinestatic; opDynamic(const M1 *m1, M2 *m2, double fact)sofa::linearalgebra::BaseMatrixLinearOpAM< false >inlinestatic; opDynamicReal(const M1 *m1, M2 *m2, double fact, Index NL, Index NC, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpAM< false >inlinestatic; opDynamicReal1(const M1 *m1, M2 *m2, double fact, BaseMatrix::MatrixCategory)sofa::linearalgebra::BaseMatrixLinearOpAM< false >inlinestatic; opDynamicRealDefault(const M1 *m1, M2 *m2, double fact, Index NL, Index NC, BaseMatrix::MatrixCategory)sofa::linearalgebra::BaseMatrixLinearOpAM< false >inlinestatic; opDynamicRealNL(const M1 *m1, M2 *m2, double fact, Index NC, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpAM< false >inlinestatic; opDynamicRealNLNC(const M1 *m1, M2 *m2, double fact, BaseMatrix::MatrixCategory)sofa::linearalgebra::BaseMatrixLinearOpAM< false >inlinestatic; opFull(const M1 *m1, M2 *m2, double fact)sofa::linearalgebra::BaseMatrixLinearOpAM< false >inlinestatic; opIdentity(const M1 *m1, M2 *m2, double fact)sofa::linearalgebra::BaseMatrixLinearOpAM< false >inlinestatic. Generated on Mon Nov 11 2024 03:31:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_add_m-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_add_m-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_add_m.html:232,Modifiability,Inherit,Inheritance,232,"﻿. SOFA API: sofa::linearalgebra::BaseMatrixLinearOpAddM Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::linearalgebra::BaseMatrixLinearOpAddM Class Reference . Inheritance diagram for sofa::linearalgebra::BaseMatrixLinearOpAddM:. [legend]. Additional Inherited Members;  Static Public Member Functions inherited from sofa::linearalgebra::BaseMatrixLinearOpAM< false >; static void opFull (const M1 *m1, M2 *m2, double fact);  ; static void opIdentity (const M1 *m1, M2 *m2, double fact);  ; static void opDiagonal (const M1 *m1, M2 *m2, double fact);  ; static void opDynamicRealDefault (const M1 *m1, M2 *m2, double fact, Index NL, Index NC, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNLNC (const M1 *m1, M2 *m2, double fact, BaseMatrix::MatrixCategory);  ; static void opDynamicReal1 (const M1 *m1, M2 *m2, double fact, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNL (const M1 *m1, M2 *m2, double fact, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamicReal (const M1 *m1, M2 *m2, double fact, Index NL, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamic (const M1 *m1, M2 *m2, double fact);  . sofalinearalgebraBaseMatrixLinearOpAddM; Generated on Mon Nov 11 2024 03:31:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_add_m.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_add_m.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_add_m.html:323,Modifiability,Inherit,Inherited,323,"﻿. SOFA API: sofa::linearalgebra::BaseMatrixLinearOpAddM Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::linearalgebra::BaseMatrixLinearOpAddM Class Reference . Inheritance diagram for sofa::linearalgebra::BaseMatrixLinearOpAddM:. [legend]. Additional Inherited Members;  Static Public Member Functions inherited from sofa::linearalgebra::BaseMatrixLinearOpAM< false >; static void opFull (const M1 *m1, M2 *m2, double fact);  ; static void opIdentity (const M1 *m1, M2 *m2, double fact);  ; static void opDiagonal (const M1 *m1, M2 *m2, double fact);  ; static void opDynamicRealDefault (const M1 *m1, M2 *m2, double fact, Index NL, Index NC, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNLNC (const M1 *m1, M2 *m2, double fact, BaseMatrix::MatrixCategory);  ; static void opDynamicReal1 (const M1 *m1, M2 *m2, double fact, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNL (const M1 *m1, M2 *m2, double fact, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamicReal (const M1 *m1, M2 *m2, double fact, Index NL, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamic (const M1 *m1, M2 *m2, double fact);  . sofalinearalgebraBaseMatrixLinearOpAddM; Generated on Mon Nov 11 2024 03:31:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_add_m.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_add_m.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_add_m.html:374,Modifiability,inherit,inherited,374,"﻿. SOFA API: sofa::linearalgebra::BaseMatrixLinearOpAddM Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::linearalgebra::BaseMatrixLinearOpAddM Class Reference . Inheritance diagram for sofa::linearalgebra::BaseMatrixLinearOpAddM:. [legend]. Additional Inherited Members;  Static Public Member Functions inherited from sofa::linearalgebra::BaseMatrixLinearOpAM< false >; static void opFull (const M1 *m1, M2 *m2, double fact);  ; static void opIdentity (const M1 *m1, M2 *m2, double fact);  ; static void opDiagonal (const M1 *m1, M2 *m2, double fact);  ; static void opDynamicRealDefault (const M1 *m1, M2 *m2, double fact, Index NL, Index NC, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNLNC (const M1 *m1, M2 *m2, double fact, BaseMatrix::MatrixCategory);  ; static void opDynamicReal1 (const M1 *m1, M2 *m2, double fact, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNL (const M1 *m1, M2 *m2, double fact, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamicReal (const M1 *m1, M2 *m2, double fact, Index NL, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamic (const M1 *m1, M2 *m2, double fact);  . sofalinearalgebraBaseMatrixLinearOpAddM; Generated on Mon Nov 11 2024 03:31:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_add_m.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_add_m.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_add_m_t-members.html:260,Modifiability,inherit,inherited,260,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BaseMatrixLinearOpAddMT Member List . This is the complete list of members for sofa::linearalgebra::BaseMatrixLinearOpAddMT, including all inherited members. Index typedefsofa::linearalgebra::BaseMatrixLinearOpAM< true >; opDiagonal(const M1 *m1, M2 *m2, double fact)sofa::linearalgebra::BaseMatrixLinearOpAM< true >inlinestatic; opDynamic(const M1 *m1, M2 *m2, double fact)sofa::linearalgebra::BaseMatrixLinearOpAM< true >inlinestatic; opDynamicReal(const M1 *m1, M2 *m2, double fact, Index NL, Index NC, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpAM< true >inlinestatic; opDynamicReal1(const M1 *m1, M2 *m2, double fact, BaseMatrix::MatrixCategory)sofa::linearalgebra::BaseMatrixLinearOpAM< true >inlinestatic; opDynamicRealDefault(const M1 *m1, M2 *m2, double fact, Index NL, Index NC, BaseMatrix::MatrixCategory)sofa::linearalgebra::BaseMatrixLinearOpAM< true >inlinestatic; opDynamicRealNL(const M1 *m1, M2 *m2, double fact, Index NC, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpAM< true >inlinestatic; opDynamicRealNLNC(const M1 *m1, M2 *m2, double fact, BaseMatrix::MatrixCategory)sofa::linearalgebra::BaseMatrixLinearOpAM< true >inlinestatic; opFull(const M1 *m1, M2 *m2, double fact)sofa::linearalgebra::BaseMatrixLinearOpAM< true >inlinestatic; opIdentity(const M1 *m1, M2 *m2, double fact)sofa::linearalgebra::BaseMatrixLinearOpAM< true >inlinestatic. Generated on Mon Nov 11 2024 03:31:06 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_add_m_t-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_add_m_t-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_add_m_t.html:234,Modifiability,Inherit,Inheritance,234,"﻿. SOFA API: sofa::linearalgebra::BaseMatrixLinearOpAddMT Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::linearalgebra::BaseMatrixLinearOpAddMT Class Reference . Inheritance diagram for sofa::linearalgebra::BaseMatrixLinearOpAddMT:. [legend]. Additional Inherited Members;  Static Public Member Functions inherited from sofa::linearalgebra::BaseMatrixLinearOpAM< true >; static void opFull (const M1 *m1, M2 *m2, double fact);  ; static void opIdentity (const M1 *m1, M2 *m2, double fact);  ; static void opDiagonal (const M1 *m1, M2 *m2, double fact);  ; static void opDynamicRealDefault (const M1 *m1, M2 *m2, double fact, Index NL, Index NC, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNLNC (const M1 *m1, M2 *m2, double fact, BaseMatrix::MatrixCategory);  ; static void opDynamicReal1 (const M1 *m1, M2 *m2, double fact, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNL (const M1 *m1, M2 *m2, double fact, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamicReal (const M1 *m1, M2 *m2, double fact, Index NL, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamic (const M1 *m1, M2 *m2, double fact);  . sofalinearalgebraBaseMatrixLinearOpAddMT; Generated on Mon Nov 11 2024 03:31:06 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_add_m_t.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_add_m_t.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_add_m_t.html:326,Modifiability,Inherit,Inherited,326,"﻿. SOFA API: sofa::linearalgebra::BaseMatrixLinearOpAddMT Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::linearalgebra::BaseMatrixLinearOpAddMT Class Reference . Inheritance diagram for sofa::linearalgebra::BaseMatrixLinearOpAddMT:. [legend]. Additional Inherited Members;  Static Public Member Functions inherited from sofa::linearalgebra::BaseMatrixLinearOpAM< true >; static void opFull (const M1 *m1, M2 *m2, double fact);  ; static void opIdentity (const M1 *m1, M2 *m2, double fact);  ; static void opDiagonal (const M1 *m1, M2 *m2, double fact);  ; static void opDynamicRealDefault (const M1 *m1, M2 *m2, double fact, Index NL, Index NC, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNLNC (const M1 *m1, M2 *m2, double fact, BaseMatrix::MatrixCategory);  ; static void opDynamicReal1 (const M1 *m1, M2 *m2, double fact, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNL (const M1 *m1, M2 *m2, double fact, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamicReal (const M1 *m1, M2 *m2, double fact, Index NL, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamic (const M1 *m1, M2 *m2, double fact);  . sofalinearalgebraBaseMatrixLinearOpAddMT; Generated on Mon Nov 11 2024 03:31:06 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_add_m_t.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_add_m_t.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_add_m_t.html:377,Modifiability,inherit,inherited,377,"﻿. SOFA API: sofa::linearalgebra::BaseMatrixLinearOpAddMT Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::linearalgebra::BaseMatrixLinearOpAddMT Class Reference . Inheritance diagram for sofa::linearalgebra::BaseMatrixLinearOpAddMT:. [legend]. Additional Inherited Members;  Static Public Member Functions inherited from sofa::linearalgebra::BaseMatrixLinearOpAM< true >; static void opFull (const M1 *m1, M2 *m2, double fact);  ; static void opIdentity (const M1 *m1, M2 *m2, double fact);  ; static void opDiagonal (const M1 *m1, M2 *m2, double fact);  ; static void opDynamicRealDefault (const M1 *m1, M2 *m2, double fact, Index NL, Index NC, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNLNC (const M1 *m1, M2 *m2, double fact, BaseMatrix::MatrixCategory);  ; static void opDynamicReal1 (const M1 *m1, M2 *m2, double fact, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNL (const M1 *m1, M2 *m2, double fact, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamicReal (const M1 *m1, M2 *m2, double fact, Index NL, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamic (const M1 *m1, M2 *m2, double fact);  . sofalinearalgebraBaseMatrixLinearOpAddMT; Generated on Mon Nov 11 2024 03:31:06 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_add_m_t.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_add_m_t.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_a_m-members.html:280,Modifiability,inherit,inherited,280,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BaseMatrixLinearOpAM< transpose > Member List . This is the complete list of members for sofa::linearalgebra::BaseMatrixLinearOpAM< transpose >, including all inherited members. Index typedefsofa::linearalgebra::BaseMatrixLinearOpAM< transpose >; opDiagonal(const M1 *m1, M2 *m2, double fact)sofa::linearalgebra::BaseMatrixLinearOpAM< transpose >inlinestatic; opDynamic(const M1 *m1, M2 *m2, double fact)sofa::linearalgebra::BaseMatrixLinearOpAM< transpose >inlinestatic; opDynamicReal(const M1 *m1, M2 *m2, double fact, Index NL, Index NC, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpAM< transpose >inlinestatic; opDynamicReal1(const M1 *m1, M2 *m2, double fact, BaseMatrix::MatrixCategory)sofa::linearalgebra::BaseMatrixLinearOpAM< transpose >inlinestatic; opDynamicRealDefault(const M1 *m1, M2 *m2, double fact, Index NL, Index NC, BaseMatrix::MatrixCategory)sofa::linearalgebra::BaseMatrixLinearOpAM< transpose >inlinestatic; opDynamicRealNL(const M1 *m1, M2 *m2, double fact, Index NC, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpAM< transpose >inlinestatic; opDynamicRealNLNC(const M1 *m1, M2 *m2, double fact, BaseMatrix::MatrixCategory)sofa::linearalgebra::BaseMatrixLinearOpAM< transpose >inlinestatic; opFull(const M1 *m1, M2 *m2, double fact)sofa::linearalgebra::BaseMatrixLinearOpAM< transpose >inlinestatic; opIdentity(const M1 *m1, M2 *m2, double fact)sofa::linearalgebra::BaseMatrixLinearOpAM< transpose >inlinestatic. Generated on Mon Nov 11 2024 03:31:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_a_m-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_a_m-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_a_m.html:306,Modifiability,Inherit,Inheritance,306,"﻿. SOFA API: sofa::linearalgebra::BaseMatrixLinearOpAM< transpose > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::linearalgebra::BaseMatrixLinearOpAM< transpose > Class Template Reference . Inheritance diagram for sofa::linearalgebra::BaseMatrixLinearOpAM< transpose >:. [legend]. Static Public Member Functions; template<class M1 , class M2 > ; static void opFull (const M1 *m1, M2 *m2, double fact);  ; template<class M1 , class M2 > ; static void opIdentity (const M1 *m1, M2 *m2, double fact);  ; template<int NL, int NC, class M1 , class M2 > ; static void opDiagonal (const M1 *m1, M2 *m2, double fact);  ; template<class Real , class M1 , class M2 > ; static void opDynamicRealDefault (const M1 *m1, M2 *m2, double fact, Index NL, Index NC, BaseMatrix::MatrixCategory);  ; template<class Real , int NL, int NC, class M1 , class M2 > ; static void opDynamicRealNLNC (const M1 *m1, M2 *m2, double fact, BaseMatrix::MatrixCategory);  ; template<class Real , class M1 , class M2 > ; static void opDynamicReal1 (const M1 *m1, M2 *m2, double fact, BaseMatrix::MatrixCategory);  ; template<class Real , int NL, class M1 , class M2 > ; static void opDynamicRealNL (const M1 *m1, M2 *m2, double fact, Index NC, BaseMatrix::MatrixCategory category);  ; template<class Real , class M1 , class M2 > ; static void opDynamicReal (const M1 *m1, M2 *m2, double fact, Index NL, Index NC, BaseMatrix::MatrixCategory category);  ; template<class M1 , class M2 > ; static void opDynamic (const M1 *m1, M2 *m2, double fact);  . Function details. ◆ opDiagonal(). template<bool transpose> . template<int NL, int NC, class M1 , class M2 > . static void sofa::linearalgebra::BaseMatrixLinearOpAM< transpose >::opDiagonal ; (; const M1 * ; m1, . M2 * ; m2, . double ; fact . ). inlinestatic . ◆ opDynamic(). template<bool transpose> . template<class M1 , class M2 > . static void sofa::linearalgebra::Bas",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_a_m.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_a_m.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_mul_t_v-members.html:260,Modifiability,inherit,inherited,260,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BaseMatrixLinearOpMulTV Member List . This is the complete list of members for sofa::linearalgebra::BaseMatrixLinearOpMulTV, including all inherited members. Index typedefsofa::linearalgebra::BaseMatrixLinearOpMV< false, true >; opDiagonal(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< false, true >inlinestatic; opDynamic(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< false, true >inlinestatic; opDynamicReal(const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpMV< false, true >inlinestatic; opDynamicRealDefault(const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory)sofa::linearalgebra::BaseMatrixLinearOpMV< false, true >inlinestatic; opDynamicRealNL(const M *mat, V1 &result, const V2 &v, Index NC, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpMV< false, true >inlinestatic; opDynamicRealNLNC(const M *mat, V1 &result, const V2 &v, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpMV< false, true >inlinestatic; opFull(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< false, true >inlinestatic; opIdentity(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< false, true >inlinestatic. Generated on Mon Nov 11 2024 03:31:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_mul_t_v-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_mul_t_v-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_mul_t_v.html:234,Modifiability,Inherit,Inheritance,234,"﻿. SOFA API: sofa::linearalgebra::BaseMatrixLinearOpMulTV Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::linearalgebra::BaseMatrixLinearOpMulTV Class Reference . Inheritance diagram for sofa::linearalgebra::BaseMatrixLinearOpMulTV:. [legend]. Additional Inherited Members;  Static Public Member Functions inherited from sofa::linearalgebra::BaseMatrixLinearOpMV< false, true >; static void opFull (const M *mat, V1 &result, const V2 &v);  ; static void opIdentity (const M *mat, V1 &result, const V2 &v);  ; static void opDiagonal (const M *mat, V1 &result, const V2 &v);  ; static void opDynamicRealDefault (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNLNC (const M *mat, V1 &result, const V2 &v, BaseMatrix::MatrixCategory category);  ; static void opDynamicRealNL (const M *mat, V1 &result, const V2 &v, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamicReal (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamic (const M *mat, V1 &result, const V2 &v);  . sofalinearalgebraBaseMatrixLinearOpMulTV; Generated on Mon Nov 11 2024 03:31:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_mul_t_v.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_mul_t_v.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_mul_t_v.html:326,Modifiability,Inherit,Inherited,326,"﻿. SOFA API: sofa::linearalgebra::BaseMatrixLinearOpMulTV Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::linearalgebra::BaseMatrixLinearOpMulTV Class Reference . Inheritance diagram for sofa::linearalgebra::BaseMatrixLinearOpMulTV:. [legend]. Additional Inherited Members;  Static Public Member Functions inherited from sofa::linearalgebra::BaseMatrixLinearOpMV< false, true >; static void opFull (const M *mat, V1 &result, const V2 &v);  ; static void opIdentity (const M *mat, V1 &result, const V2 &v);  ; static void opDiagonal (const M *mat, V1 &result, const V2 &v);  ; static void opDynamicRealDefault (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNLNC (const M *mat, V1 &result, const V2 &v, BaseMatrix::MatrixCategory category);  ; static void opDynamicRealNL (const M *mat, V1 &result, const V2 &v, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamicReal (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamic (const M *mat, V1 &result, const V2 &v);  . sofalinearalgebraBaseMatrixLinearOpMulTV; Generated on Mon Nov 11 2024 03:31:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_mul_t_v.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_mul_t_v.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_mul_t_v.html:377,Modifiability,inherit,inherited,377,"﻿. SOFA API: sofa::linearalgebra::BaseMatrixLinearOpMulTV Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::linearalgebra::BaseMatrixLinearOpMulTV Class Reference . Inheritance diagram for sofa::linearalgebra::BaseMatrixLinearOpMulTV:. [legend]. Additional Inherited Members;  Static Public Member Functions inherited from sofa::linearalgebra::BaseMatrixLinearOpMV< false, true >; static void opFull (const M *mat, V1 &result, const V2 &v);  ; static void opIdentity (const M *mat, V1 &result, const V2 &v);  ; static void opDiagonal (const M *mat, V1 &result, const V2 &v);  ; static void opDynamicRealDefault (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNLNC (const M *mat, V1 &result, const V2 &v, BaseMatrix::MatrixCategory category);  ; static void opDynamicRealNL (const M *mat, V1 &result, const V2 &v, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamicReal (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamic (const M *mat, V1 &result, const V2 &v);  . sofalinearalgebraBaseMatrixLinearOpMulTV; Generated on Mon Nov 11 2024 03:31:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_mul_t_v.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_mul_t_v.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_mul_v-members.html:258,Modifiability,inherit,inherited,258,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BaseMatrixLinearOpMulV Member List . This is the complete list of members for sofa::linearalgebra::BaseMatrixLinearOpMulV, including all inherited members. Index typedefsofa::linearalgebra::BaseMatrixLinearOpMV< false, false >; opDiagonal(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< false, false >inlinestatic; opDynamic(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< false, false >inlinestatic; opDynamicReal(const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpMV< false, false >inlinestatic; opDynamicRealDefault(const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory)sofa::linearalgebra::BaseMatrixLinearOpMV< false, false >inlinestatic; opDynamicRealNL(const M *mat, V1 &result, const V2 &v, Index NC, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpMV< false, false >inlinestatic; opDynamicRealNLNC(const M *mat, V1 &result, const V2 &v, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpMV< false, false >inlinestatic; opFull(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< false, false >inlinestatic; opIdentity(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< false, false >inlinestatic. Generated on Mon Nov 11 2024 03:31:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_mul_v-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_mul_v-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_mul_v.html:232,Modifiability,Inherit,Inheritance,232,"﻿. SOFA API: sofa::linearalgebra::BaseMatrixLinearOpMulV Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::linearalgebra::BaseMatrixLinearOpMulV Class Reference . Inheritance diagram for sofa::linearalgebra::BaseMatrixLinearOpMulV:. [legend]. Additional Inherited Members;  Static Public Member Functions inherited from sofa::linearalgebra::BaseMatrixLinearOpMV< false, false >; static void opFull (const M *mat, V1 &result, const V2 &v);  ; static void opIdentity (const M *mat, V1 &result, const V2 &v);  ; static void opDiagonal (const M *mat, V1 &result, const V2 &v);  ; static void opDynamicRealDefault (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNLNC (const M *mat, V1 &result, const V2 &v, BaseMatrix::MatrixCategory category);  ; static void opDynamicRealNL (const M *mat, V1 &result, const V2 &v, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamicReal (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamic (const M *mat, V1 &result, const V2 &v);  . sofalinearalgebraBaseMatrixLinearOpMulV; Generated on Mon Nov 11 2024 03:31:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_mul_v.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_mul_v.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_mul_v.html:323,Modifiability,Inherit,Inherited,323,"﻿. SOFA API: sofa::linearalgebra::BaseMatrixLinearOpMulV Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::linearalgebra::BaseMatrixLinearOpMulV Class Reference . Inheritance diagram for sofa::linearalgebra::BaseMatrixLinearOpMulV:. [legend]. Additional Inherited Members;  Static Public Member Functions inherited from sofa::linearalgebra::BaseMatrixLinearOpMV< false, false >; static void opFull (const M *mat, V1 &result, const V2 &v);  ; static void opIdentity (const M *mat, V1 &result, const V2 &v);  ; static void opDiagonal (const M *mat, V1 &result, const V2 &v);  ; static void opDynamicRealDefault (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNLNC (const M *mat, V1 &result, const V2 &v, BaseMatrix::MatrixCategory category);  ; static void opDynamicRealNL (const M *mat, V1 &result, const V2 &v, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamicReal (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamic (const M *mat, V1 &result, const V2 &v);  . sofalinearalgebraBaseMatrixLinearOpMulV; Generated on Mon Nov 11 2024 03:31:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_mul_v.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_mul_v.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_mul_v.html:374,Modifiability,inherit,inherited,374,"﻿. SOFA API: sofa::linearalgebra::BaseMatrixLinearOpMulV Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::linearalgebra::BaseMatrixLinearOpMulV Class Reference . Inheritance diagram for sofa::linearalgebra::BaseMatrixLinearOpMulV:. [legend]. Additional Inherited Members;  Static Public Member Functions inherited from sofa::linearalgebra::BaseMatrixLinearOpMV< false, false >; static void opFull (const M *mat, V1 &result, const V2 &v);  ; static void opIdentity (const M *mat, V1 &result, const V2 &v);  ; static void opDiagonal (const M *mat, V1 &result, const V2 &v);  ; static void opDynamicRealDefault (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNLNC (const M *mat, V1 &result, const V2 &v, BaseMatrix::MatrixCategory category);  ; static void opDynamicRealNL (const M *mat, V1 &result, const V2 &v, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamicReal (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamic (const M *mat, V1 &result, const V2 &v);  . sofalinearalgebraBaseMatrixLinearOpMulV; Generated on Mon Nov 11 2024 03:31:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_mul_v.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_mul_v.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_m_v-members.html:290,Modifiability,inherit,inherited,290,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BaseMatrixLinearOpMV< add, transpose > Member List . This is the complete list of members for sofa::linearalgebra::BaseMatrixLinearOpMV< add, transpose >, including all inherited members. Index typedefsofa::linearalgebra::BaseMatrixLinearOpMV< add, transpose >; opDiagonal(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< add, transpose >inlinestatic; opDynamic(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< add, transpose >inlinestatic; opDynamicReal(const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpMV< add, transpose >inlinestatic; opDynamicRealDefault(const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory)sofa::linearalgebra::BaseMatrixLinearOpMV< add, transpose >inlinestatic; opDynamicRealNL(const M *mat, V1 &result, const V2 &v, Index NC, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpMV< add, transpose >inlinestatic; opDynamicRealNLNC(const M *mat, V1 &result, const V2 &v, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpMV< add, transpose >inlinestatic; opFull(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< add, transpose >inlinestatic; opIdentity(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< add, transpose >inlinestatic. Generated on Mon Nov 11 2024 03:31:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_m_v-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_m_v-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_m_v.html:316,Modifiability,Inherit,Inheritance,316,"﻿. SOFA API: sofa::linearalgebra::BaseMatrixLinearOpMV< add, transpose > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::linearalgebra::BaseMatrixLinearOpMV< add, transpose > Class Template Reference . Inheritance diagram for sofa::linearalgebra::BaseMatrixLinearOpMV< add, transpose >:. [legend]. Static Public Member Functions; template<class M , class V1 , class V2 > ; static void opFull (const M *mat, V1 &result, const V2 &v);  ; template<class M , class V1 , class V2 > ; static void opIdentity (const M *mat, V1 &result, const V2 &v);  ; template<int NL, int NC, class M , class V1 , class V2 > ; static void opDiagonal (const M *mat, V1 &result, const V2 &v);  ; template<class Real , class M , class V1 , class V2 > ; static void opDynamicRealDefault (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory);  ; template<class Real , int NL, int NC, class M , class V1 , class V2 > ; static void opDynamicRealNLNC (const M *mat, V1 &result, const V2 &v, BaseMatrix::MatrixCategory category);  ; template<class Real , int NL, class M , class V1 , class V2 > ; static void opDynamicRealNL (const M *mat, V1 &result, const V2 &v, Index NC, BaseMatrix::MatrixCategory category);  ; template<class Real , class M , class V1 , class V2 > ; static void opDynamicReal (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory category);  ; template<class M , class V1 , class V2 > ; static void opDynamic (const M *mat, V1 &result, const V2 &v);  . Function details. ◆ opDiagonal(). template<bool add, bool transpose> . template<int NL, int NC, class M , class V1 , class V2 > . static void sofa::linearalgebra::BaseMatrixLinearOpMV< add, transpose >::opDiagonal ; (; const M * ; mat, . V1 & ; result, . const V2 & ; v . ). inlinestatic . ◆ opDynamic(). template<bool add, bool transpose> . template<class M , class V1 , clas",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_m_v.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_m_v.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_t_v-members.html:262,Modifiability,inherit,inherited,262,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BaseMatrixLinearOpPMulTV Member List . This is the complete list of members for sofa::linearalgebra::BaseMatrixLinearOpPMulTV, including all inherited members. Index typedefsofa::linearalgebra::BaseMatrixLinearOpMV< true, true >; opDiagonal(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< true, true >inlinestatic; opDynamic(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< true, true >inlinestatic; opDynamicReal(const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpMV< true, true >inlinestatic; opDynamicRealDefault(const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory)sofa::linearalgebra::BaseMatrixLinearOpMV< true, true >inlinestatic; opDynamicRealNL(const M *mat, V1 &result, const V2 &v, Index NC, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpMV< true, true >inlinestatic; opDynamicRealNLNC(const M *mat, V1 &result, const V2 &v, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpMV< true, true >inlinestatic; opFull(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< true, true >inlinestatic; opIdentity(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< true, true >inlinestatic. Generated on Mon Nov 11 2024 03:31:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_t_v-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_t_v-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_t_v.html:236,Modifiability,Inherit,Inheritance,236,"﻿. SOFA API: sofa::linearalgebra::BaseMatrixLinearOpPMulTV Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::linearalgebra::BaseMatrixLinearOpPMulTV Class Reference . Inheritance diagram for sofa::linearalgebra::BaseMatrixLinearOpPMulTV:. [legend]. Additional Inherited Members;  Static Public Member Functions inherited from sofa::linearalgebra::BaseMatrixLinearOpMV< true, true >; static void opFull (const M *mat, V1 &result, const V2 &v);  ; static void opIdentity (const M *mat, V1 &result, const V2 &v);  ; static void opDiagonal (const M *mat, V1 &result, const V2 &v);  ; static void opDynamicRealDefault (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNLNC (const M *mat, V1 &result, const V2 &v, BaseMatrix::MatrixCategory category);  ; static void opDynamicRealNL (const M *mat, V1 &result, const V2 &v, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamicReal (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamic (const M *mat, V1 &result, const V2 &v);  . sofalinearalgebraBaseMatrixLinearOpPMulTV; Generated on Mon Nov 11 2024 03:31:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_t_v.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_t_v.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_t_v.html:329,Modifiability,Inherit,Inherited,329,"﻿. SOFA API: sofa::linearalgebra::BaseMatrixLinearOpPMulTV Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::linearalgebra::BaseMatrixLinearOpPMulTV Class Reference . Inheritance diagram for sofa::linearalgebra::BaseMatrixLinearOpPMulTV:. [legend]. Additional Inherited Members;  Static Public Member Functions inherited from sofa::linearalgebra::BaseMatrixLinearOpMV< true, true >; static void opFull (const M *mat, V1 &result, const V2 &v);  ; static void opIdentity (const M *mat, V1 &result, const V2 &v);  ; static void opDiagonal (const M *mat, V1 &result, const V2 &v);  ; static void opDynamicRealDefault (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNLNC (const M *mat, V1 &result, const V2 &v, BaseMatrix::MatrixCategory category);  ; static void opDynamicRealNL (const M *mat, V1 &result, const V2 &v, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamicReal (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamic (const M *mat, V1 &result, const V2 &v);  . sofalinearalgebraBaseMatrixLinearOpPMulTV; Generated on Mon Nov 11 2024 03:31:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_t_v.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_t_v.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_t_v.html:380,Modifiability,inherit,inherited,380,"﻿. SOFA API: sofa::linearalgebra::BaseMatrixLinearOpPMulTV Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::linearalgebra::BaseMatrixLinearOpPMulTV Class Reference . Inheritance diagram for sofa::linearalgebra::BaseMatrixLinearOpPMulTV:. [legend]. Additional Inherited Members;  Static Public Member Functions inherited from sofa::linearalgebra::BaseMatrixLinearOpMV< true, true >; static void opFull (const M *mat, V1 &result, const V2 &v);  ; static void opIdentity (const M *mat, V1 &result, const V2 &v);  ; static void opDiagonal (const M *mat, V1 &result, const V2 &v);  ; static void opDynamicRealDefault (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNLNC (const M *mat, V1 &result, const V2 &v, BaseMatrix::MatrixCategory category);  ; static void opDynamicRealNL (const M *mat, V1 &result, const V2 &v, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamicReal (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamic (const M *mat, V1 &result, const V2 &v);  . sofalinearalgebraBaseMatrixLinearOpPMulTV; Generated on Mon Nov 11 2024 03:31:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_t_v.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_t_v.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_v-members.html:260,Modifiability,inherit,inherited,260,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BaseMatrixLinearOpPMulV Member List . This is the complete list of members for sofa::linearalgebra::BaseMatrixLinearOpPMulV, including all inherited members. Index typedefsofa::linearalgebra::BaseMatrixLinearOpMV< true, false >; opDiagonal(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< true, false >inlinestatic; opDynamic(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< true, false >inlinestatic; opDynamicReal(const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpMV< true, false >inlinestatic; opDynamicRealDefault(const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory)sofa::linearalgebra::BaseMatrixLinearOpMV< true, false >inlinestatic; opDynamicRealNL(const M *mat, V1 &result, const V2 &v, Index NC, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpMV< true, false >inlinestatic; opDynamicRealNLNC(const M *mat, V1 &result, const V2 &v, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpMV< true, false >inlinestatic; opFull(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< true, false >inlinestatic; opIdentity(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< true, false >inlinestatic. Generated on Mon Nov 11 2024 03:31:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_v-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_v-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_v.html:234,Modifiability,Inherit,Inheritance,234,"﻿. SOFA API: sofa::linearalgebra::BaseMatrixLinearOpPMulV Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::linearalgebra::BaseMatrixLinearOpPMulV Class Reference . Inheritance diagram for sofa::linearalgebra::BaseMatrixLinearOpPMulV:. [legend]. Additional Inherited Members;  Static Public Member Functions inherited from sofa::linearalgebra::BaseMatrixLinearOpMV< true, false >; static void opFull (const M *mat, V1 &result, const V2 &v);  ; static void opIdentity (const M *mat, V1 &result, const V2 &v);  ; static void opDiagonal (const M *mat, V1 &result, const V2 &v);  ; static void opDynamicRealDefault (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNLNC (const M *mat, V1 &result, const V2 &v, BaseMatrix::MatrixCategory category);  ; static void opDynamicRealNL (const M *mat, V1 &result, const V2 &v, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamicReal (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamic (const M *mat, V1 &result, const V2 &v);  . sofalinearalgebraBaseMatrixLinearOpPMulV; Generated on Mon Nov 11 2024 03:31:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_v.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_v.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_v.html:326,Modifiability,Inherit,Inherited,326,"﻿. SOFA API: sofa::linearalgebra::BaseMatrixLinearOpPMulV Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::linearalgebra::BaseMatrixLinearOpPMulV Class Reference . Inheritance diagram for sofa::linearalgebra::BaseMatrixLinearOpPMulV:. [legend]. Additional Inherited Members;  Static Public Member Functions inherited from sofa::linearalgebra::BaseMatrixLinearOpMV< true, false >; static void opFull (const M *mat, V1 &result, const V2 &v);  ; static void opIdentity (const M *mat, V1 &result, const V2 &v);  ; static void opDiagonal (const M *mat, V1 &result, const V2 &v);  ; static void opDynamicRealDefault (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNLNC (const M *mat, V1 &result, const V2 &v, BaseMatrix::MatrixCategory category);  ; static void opDynamicRealNL (const M *mat, V1 &result, const V2 &v, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamicReal (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamic (const M *mat, V1 &result, const V2 &v);  . sofalinearalgebraBaseMatrixLinearOpPMulV; Generated on Mon Nov 11 2024 03:31:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_v.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_v.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_v.html:377,Modifiability,inherit,inherited,377,"﻿. SOFA API: sofa::linearalgebra::BaseMatrixLinearOpPMulV Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::linearalgebra::BaseMatrixLinearOpPMulV Class Reference . Inheritance diagram for sofa::linearalgebra::BaseMatrixLinearOpPMulV:. [legend]. Additional Inherited Members;  Static Public Member Functions inherited from sofa::linearalgebra::BaseMatrixLinearOpMV< true, false >; static void opFull (const M *mat, V1 &result, const V2 &v);  ; static void opIdentity (const M *mat, V1 &result, const V2 &v);  ; static void opDiagonal (const M *mat, V1 &result, const V2 &v);  ; static void opDynamicRealDefault (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNLNC (const M *mat, V1 &result, const V2 &v, BaseMatrix::MatrixCategory category);  ; static void opDynamicRealNL (const M *mat, V1 &result, const V2 &v, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamicReal (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamic (const M *mat, V1 &result, const V2 &v);  . sofalinearalgebraBaseMatrixLinearOpPMulV; Generated on Mon Nov 11 2024 03:31:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_v.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_v.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector-members.html:234,Modifiability,inherit,inherited,234,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BaseVector Member List . This is the complete list of members for sofa::linearalgebra::BaseVector, including all inherited members. add(Index i, SReal v)=0sofa::linearalgebra::BaseVectorpure virtual; add(Index i0, Index n, const float *src)sofa::linearalgebra::BaseVectorinlinevirtual; add(Index i0, Index n, const double *src)sofa::linearalgebra::BaseVectorinlinevirtual; add(Index i0, Index n, const int *src)sofa::linearalgebra::BaseVectorinlinevirtual; addDefaultImpl(Index i0, Index n, const T *src)sofa::linearalgebra::BaseVectorinlineprotected; clear()=0sofa::linearalgebra::BaseVectorpure virtual; clear(Index i)sofa::linearalgebra::BaseVectorinlinevirtual; element(Index i) const =0sofa::linearalgebra::BaseVectorpure virtual; ELEMENT_FLOAT enum valuesofa::linearalgebra::BaseVector; ELEMENT_INT enum valuesofa::linearalgebra::BaseVector; ELEMENT_UNKNOWN enum valuesofa::linearalgebra::BaseVector; elements(Index i0, Index n, float *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, double *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, int *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elementsDefaultImpl(Index i0, Index n, T *buffer) constsofa::linearalgebra::BaseVectorinlineprotected; ElementType enum namesofa::linearalgebra::BaseVector; getElementSize() constsofa::linearalgebra::BaseVectorinlinevirtual; getElementType() constsofa::linearalgebra::BaseVectorinlinevirtual; Index typedefsofa::linearalgebra::BaseVector; isFull() constsofa::linearalgebra::BaseVectorinlinevirtual; isSparse() constsofa::linearalgebra::BaseVectorinline; operator<<(std::ostream &out, const BaseVector &v)sofa::linearalgebra::BaseVectorfriend; resize(Index dim)=0sofa::linearalgebra::BaseVectorpure virtual; set(Index i, SReal v)=0sofa::linearalgebra::BaseVectorpure virtual; set(Index i0, Index n, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector-members.html:673,Usability,clear,clear,673," add(Index i, SReal v)=0sofa::linearalgebra::BaseVectorpure virtual; add(Index i0, Index n, const float *src)sofa::linearalgebra::BaseVectorinlinevirtual; add(Index i0, Index n, const double *src)sofa::linearalgebra::BaseVectorinlinevirtual; add(Index i0, Index n, const int *src)sofa::linearalgebra::BaseVectorinlinevirtual; addDefaultImpl(Index i0, Index n, const T *src)sofa::linearalgebra::BaseVectorinlineprotected; clear()=0sofa::linearalgebra::BaseVectorpure virtual; clear(Index i)sofa::linearalgebra::BaseVectorinlinevirtual; element(Index i) const =0sofa::linearalgebra::BaseVectorpure virtual; ELEMENT_FLOAT enum valuesofa::linearalgebra::BaseVector; ELEMENT_INT enum valuesofa::linearalgebra::BaseVector; ELEMENT_UNKNOWN enum valuesofa::linearalgebra::BaseVector; elements(Index i0, Index n, float *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, double *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, int *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elementsDefaultImpl(Index i0, Index n, T *buffer) constsofa::linearalgebra::BaseVectorinlineprotected; ElementType enum namesofa::linearalgebra::BaseVector; getElementSize() constsofa::linearalgebra::BaseVectorinlinevirtual; getElementType() constsofa::linearalgebra::BaseVectorinlinevirtual; Index typedefsofa::linearalgebra::BaseVector; isFull() constsofa::linearalgebra::BaseVectorinlinevirtual; isSparse() constsofa::linearalgebra::BaseVectorinline; operator<<(std::ostream &out, const BaseVector &v)sofa::linearalgebra::BaseVectorfriend; resize(Index dim)=0sofa::linearalgebra::BaseVectorpure virtual; set(Index i, SReal v)=0sofa::linearalgebra::BaseVectorpure virtual; set(Index i0, Index n, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector-members.html:727,Usability,clear,clear,727," add(Index i, SReal v)=0sofa::linearalgebra::BaseVectorpure virtual; add(Index i0, Index n, const float *src)sofa::linearalgebra::BaseVectorinlinevirtual; add(Index i0, Index n, const double *src)sofa::linearalgebra::BaseVectorinlinevirtual; add(Index i0, Index n, const int *src)sofa::linearalgebra::BaseVectorinlinevirtual; addDefaultImpl(Index i0, Index n, const T *src)sofa::linearalgebra::BaseVectorinlineprotected; clear()=0sofa::linearalgebra::BaseVectorpure virtual; clear(Index i)sofa::linearalgebra::BaseVectorinlinevirtual; element(Index i) const =0sofa::linearalgebra::BaseVectorpure virtual; ELEMENT_FLOAT enum valuesofa::linearalgebra::BaseVector; ELEMENT_INT enum valuesofa::linearalgebra::BaseVector; ELEMENT_UNKNOWN enum valuesofa::linearalgebra::BaseVector; elements(Index i0, Index n, float *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, double *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, int *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elementsDefaultImpl(Index i0, Index n, T *buffer) constsofa::linearalgebra::BaseVectorinlineprotected; ElementType enum namesofa::linearalgebra::BaseVector; getElementSize() constsofa::linearalgebra::BaseVectorinlinevirtual; getElementType() constsofa::linearalgebra::BaseVectorinlinevirtual; Index typedefsofa::linearalgebra::BaseVector; isFull() constsofa::linearalgebra::BaseVectorinlinevirtual; isSparse() constsofa::linearalgebra::BaseVectorinline; operator<<(std::ostream &out, const BaseVector &v)sofa::linearalgebra::BaseVectorfriend; resize(Index dim)=0sofa::linearalgebra::BaseVectorpure virtual; set(Index i, SReal v)=0sofa::linearalgebra::BaseVectorpure virtual; set(Index i0, Index n, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html:309,Modifiability,Inherit,Inheritance,309,"﻿. SOFA API: sofa::linearalgebra::BaseVector Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::linearalgebra::BaseVector Class Referenceabstract . #include <BaseVector.h>. Inheritance diagram for sofa::linearalgebra::BaseVector:. [legend]; Detailed Description; Generic vector API, allowing to fill and use a vector independently of the linear algebra library in use.; Note that accessing values using this class is rather slow and should only be used in codes where the provided genericity is necessary. . Public Member Functions; virtual ~BaseVector ();  ; virtual Index size (void) const =0;  Number of elements. More...;  ; virtual SReal element (Index i) const =0;  Read the value of element i. More...;  ; virtual void resize (Index dim)=0;  Resize the vector, and reset all values to 0. More...;  ; virtual void clear ()=0;  Reset all values to 0. More...;  ; virtual void set (Index i, SReal v)=0;  Write the value of element i. More...;  ; virtual void add (Index i, SReal v)=0;  Add v to the existing value of element i. More...;  ; virtual const float * elements (Index i0, Index n, float *src) const;  Get the values of n elements, starting at element i0, into given float buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual const double * elements (Index i0, Index n, double *src) const;  Get the values of n elements, starting at element i0, into given double buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual const int * elements (Index i0, Index n, int *src) const;  Get the values of n elements, starting at element i0, into given int buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual void set (Index i0, Index n, const float *src);  Write the values of n float elements, starting at element i0. ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html:516,Security,access,accessing,516,"﻿. SOFA API: sofa::linearalgebra::BaseVector Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::linearalgebra::BaseVector Class Referenceabstract . #include <BaseVector.h>. Inheritance diagram for sofa::linearalgebra::BaseVector:. [legend]; Detailed Description; Generic vector API, allowing to fill and use a vector independently of the linear algebra library in use.; Note that accessing values using this class is rather slow and should only be used in codes where the provided genericity is necessary. . Public Member Functions; virtual ~BaseVector ();  ; virtual Index size (void) const =0;  Number of elements. More...;  ; virtual SReal element (Index i) const =0;  Read the value of element i. More...;  ; virtual void resize (Index dim)=0;  Resize the vector, and reset all values to 0. More...;  ; virtual void clear ()=0;  Reset all values to 0. More...;  ; virtual void set (Index i, SReal v)=0;  Write the value of element i. More...;  ; virtual void add (Index i, SReal v)=0;  Add v to the existing value of element i. More...;  ; virtual const float * elements (Index i0, Index n, float *src) const;  Get the values of n elements, starting at element i0, into given float buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual const double * elements (Index i0, Index n, double *src) const;  Get the values of n elements, starting at element i0, into given double buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual const int * elements (Index i0, Index n, int *src) const;  Get the values of n elements, starting at element i0, into given int buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual void set (Index i0, Index n, const float *src);  Write the values of n float elements, starting at element i0. ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html:956,Usability,clear,clear,956,"﻿. SOFA API: sofa::linearalgebra::BaseVector Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::linearalgebra::BaseVector Class Referenceabstract . #include <BaseVector.h>. Inheritance diagram for sofa::linearalgebra::BaseVector:. [legend]; Detailed Description; Generic vector API, allowing to fill and use a vector independently of the linear algebra library in use.; Note that accessing values using this class is rather slow and should only be used in codes where the provided genericity is necessary. . Public Member Functions; virtual ~BaseVector ();  ; virtual Index size (void) const =0;  Number of elements. More...;  ; virtual SReal element (Index i) const =0;  Read the value of element i. More...;  ; virtual void resize (Index dim)=0;  Resize the vector, and reset all values to 0. More...;  ; virtual void clear ()=0;  Reset all values to 0. More...;  ; virtual void set (Index i, SReal v)=0;  Write the value of element i. More...;  ; virtual void add (Index i, SReal v)=0;  Add v to the existing value of element i. More...;  ; virtual const float * elements (Index i0, Index n, float *src) const;  Get the values of n elements, starting at element i0, into given float buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual const double * elements (Index i0, Index n, double *src) const;  Get the values of n elements, starting at element i0, into given double buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual const int * elements (Index i0, Index n, int *src) const;  Get the values of n elements, starting at element i0, into given int buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual void set (Index i0, Index n, const float *src);  Write the values of n float elements, starting at element i0. ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html:2680,Usability,clear,clear,2680,"x n, int *src) const;  Get the values of n elements, starting at element i0, into given int buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual void set (Index i0, Index n, const float *src);  Write the values of n float elements, starting at element i0. More...;  ; virtual void set (Index i0, Index n, const double *src);  Write the values of n double elements, starting at element i0. More...;  ; virtual void set (Index i0, Index n, const int *src);  Write the values of n int elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const float *src);  Add to the values of n float elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const double *src);  Add to the values of n double elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const int *src);  Add to the values of n int elements, starting at element i0. More...;  ; virtual void clear (Index i);  Reset the value of element i to 0. More...;  . Protected Member Functions; template<class T > ; const T * elementsDefaultImpl (Index i0, Index n, T *buffer) const;  ; template<class T > ; void setDefaultImpl (Index i0, Index n, const T *src);  ; template<class T > ; void addDefaultImpl (Index i0, Index n, const T *src);  . Friends; SOFA_LINEARALGEBRA_API std::ostream & operator<< (std::ostream &out, const BaseVector &v);  Declare that the operator << exists but is defined in BaseVector.cpp. More...;  . Get information about the content and structure of this vector; enum  ElementType { ELEMENT_UNKNOWN = 0; , ELEMENT_FLOAT; , ELEMENT_INT; };  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual bool isFull () const;  Return true if this vector is full, i.a. all elements are stored in memory. More...;  ; bool isSparse () const;  . Constructor details. ◆ ~BaseVector(). virtual sofa::linearalgebra::BaseVector::~BaseVector ; (; ). inlinev",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html:4850,Usability,clear,clear,4850,"ing value of element i. ; Implemented in sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, sofa::linearalgebra::FullVector< SReal >, and sofa::linearalgebra::EigenVector< TReal, TBlockSize >. ◆ add() [2/4]. virtual void sofa::linearalgebra::BaseVector::add ; (; Index ; i0, . Index ; n, . const double * ; src . ). inlinevirtual . Add to the values of n double elements, starting at element i0. . ◆ add() [3/4]. virtual void sofa::linearalgebra::BaseVector::add ; (; Index ; i0, . Index ; n, . const float * ; src . ). inlinevirtual . Add to the values of n float elements, starting at element i0. . ◆ add() [4/4]. virtual void sofa::linearalgebra::BaseVector::add ; (; Index ; i0, . Index ; n, . const int * ; src . ). inlinevirtual . Add to the values of n int elements, starting at element i0. . ◆ addDefaultImpl(). template<class T > . void sofa::linearalgebra::BaseVector::addDefaultImpl ; (; Index ; i0, . Index ; n, . const T * ; src . ). inlineprotected . ◆ clear() [1/2]. virtual void sofa::linearalgebra::BaseVector::clear ; (; ). pure virtual . Reset all values to 0. ; Implemented in sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, sofa::linearalgebra::FullVector< SReal >, and sofa::linearalgebra::EigenVector< TReal, TBlockSize >. ◆ clear() [2/2]. virtual void sofa::linearalgebra::BaseVector::clear ; (; Index ; i). inlinevirtual . Reset the value of element i to 0. ; Reimplemented in sofa::linearalgebra::EigenVector< TReal, TBlockSize >, sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, and sofa::linearalgebra::FullVector< SReal >. ◆ element(). virtual SReal sofa::linearalgebra::BaseVector::element ; (; Index ; i); const. pure virtual . Read the value of element i. ; Implemented in sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, sofa::linearalgebra::FullVector< SReal >, and sofa::linearalgebra::EigenVector< TReal, TBlockSize >. ◆ elements() [1/3]. virtual",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html:4911,Usability,clear,clear,4911,"n sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, sofa::linearalgebra::FullVector< SReal >, and sofa::linearalgebra::EigenVector< TReal, TBlockSize >. ◆ add() [2/4]. virtual void sofa::linearalgebra::BaseVector::add ; (; Index ; i0, . Index ; n, . const double * ; src . ). inlinevirtual . Add to the values of n double elements, starting at element i0. . ◆ add() [3/4]. virtual void sofa::linearalgebra::BaseVector::add ; (; Index ; i0, . Index ; n, . const float * ; src . ). inlinevirtual . Add to the values of n float elements, starting at element i0. . ◆ add() [4/4]. virtual void sofa::linearalgebra::BaseVector::add ; (; Index ; i0, . Index ; n, . const int * ; src . ). inlinevirtual . Add to the values of n int elements, starting at element i0. . ◆ addDefaultImpl(). template<class T > . void sofa::linearalgebra::BaseVector::addDefaultImpl ; (; Index ; i0, . Index ; n, . const T * ; src . ). inlineprotected . ◆ clear() [1/2]. virtual void sofa::linearalgebra::BaseVector::clear ; (; ). pure virtual . Reset all values to 0. ; Implemented in sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, sofa::linearalgebra::FullVector< SReal >, and sofa::linearalgebra::EigenVector< TReal, TBlockSize >. ◆ clear() [2/2]. virtual void sofa::linearalgebra::BaseVector::clear ; (; Index ; i). inlinevirtual . Reset the value of element i to 0. ; Reimplemented in sofa::linearalgebra::EigenVector< TReal, TBlockSize >, sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, and sofa::linearalgebra::FullVector< SReal >. ◆ element(). virtual SReal sofa::linearalgebra::BaseVector::element ; (; Index ; i); const. pure virtual . Read the value of element i. ; Implemented in sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, sofa::linearalgebra::FullVector< SReal >, and sofa::linearalgebra::EigenVector< TReal, TBlockSize >. ◆ elements() [1/3]. virtual const double* sofa::linearalgebra::Ba",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html:5162,Usability,clear,clear,5162," n, . const double * ; src . ). inlinevirtual . Add to the values of n double elements, starting at element i0. . ◆ add() [3/4]. virtual void sofa::linearalgebra::BaseVector::add ; (; Index ; i0, . Index ; n, . const float * ; src . ). inlinevirtual . Add to the values of n float elements, starting at element i0. . ◆ add() [4/4]. virtual void sofa::linearalgebra::BaseVector::add ; (; Index ; i0, . Index ; n, . const int * ; src . ). inlinevirtual . Add to the values of n int elements, starting at element i0. . ◆ addDefaultImpl(). template<class T > . void sofa::linearalgebra::BaseVector::addDefaultImpl ; (; Index ; i0, . Index ; n, . const T * ; src . ). inlineprotected . ◆ clear() [1/2]. virtual void sofa::linearalgebra::BaseVector::clear ; (; ). pure virtual . Reset all values to 0. ; Implemented in sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, sofa::linearalgebra::FullVector< SReal >, and sofa::linearalgebra::EigenVector< TReal, TBlockSize >. ◆ clear() [2/2]. virtual void sofa::linearalgebra::BaseVector::clear ; (; Index ; i). inlinevirtual . Reset the value of element i to 0. ; Reimplemented in sofa::linearalgebra::EigenVector< TReal, TBlockSize >, sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, and sofa::linearalgebra::FullVector< SReal >. ◆ element(). virtual SReal sofa::linearalgebra::BaseVector::element ; (; Index ; i); const. pure virtual . Read the value of element i. ; Implemented in sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, sofa::linearalgebra::FullVector< SReal >, and sofa::linearalgebra::EigenVector< TReal, TBlockSize >. ◆ elements() [1/3]. virtual const double* sofa::linearalgebra::BaseVector::elements ; (; Index ; i0, . Index ; n, . double * ; src . ); const. inlinevirtual . Get the values of n elements, starting at element i0, into given double buffer, or return the pointer to the data if the in-memory format is compatible. . ◆ elements() [2/3]. virtu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html:5223,Usability,clear,clear,5223,"al . Add to the values of n double elements, starting at element i0. . ◆ add() [3/4]. virtual void sofa::linearalgebra::BaseVector::add ; (; Index ; i0, . Index ; n, . const float * ; src . ). inlinevirtual . Add to the values of n float elements, starting at element i0. . ◆ add() [4/4]. virtual void sofa::linearalgebra::BaseVector::add ; (; Index ; i0, . Index ; n, . const int * ; src . ). inlinevirtual . Add to the values of n int elements, starting at element i0. . ◆ addDefaultImpl(). template<class T > . void sofa::linearalgebra::BaseVector::addDefaultImpl ; (; Index ; i0, . Index ; n, . const T * ; src . ). inlineprotected . ◆ clear() [1/2]. virtual void sofa::linearalgebra::BaseVector::clear ; (; ). pure virtual . Reset all values to 0. ; Implemented in sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, sofa::linearalgebra::FullVector< SReal >, and sofa::linearalgebra::EigenVector< TReal, TBlockSize >. ◆ clear() [2/2]. virtual void sofa::linearalgebra::BaseVector::clear ; (; Index ; i). inlinevirtual . Reset the value of element i to 0. ; Reimplemented in sofa::linearalgebra::EigenVector< TReal, TBlockSize >, sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, and sofa::linearalgebra::FullVector< SReal >. ◆ element(). virtual SReal sofa::linearalgebra::BaseVector::element ; (; Index ; i); const. pure virtual . Read the value of element i. ; Implemented in sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, sofa::linearalgebra::FullVector< SReal >, and sofa::linearalgebra::EigenVector< TReal, TBlockSize >. ◆ elements() [1/3]. virtual const double* sofa::linearalgebra::BaseVector::elements ; (; Index ; i0, . Index ; n, . double * ; src . ); const. inlinevirtual . Get the values of n elements, starting at element i0, into given double buffer, or return the pointer to the data if the in-memory format is compatible. . ◆ elements() [2/3]. virtual const float* sofa::linearalgebra::BaseVe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html:270,Modifiability,inherit,inherited,270,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BlockDiagonalMatrix< LC, T > Member List . This is the complete list of members for sofa::linearalgebra::BlockDiagonalMatrix< LC, T >, including all inherited members. add(Index i, Index j, double v) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; add(Index row, Index col, double v)=0sofa::linearalgebra::BlockDiagonalMatrix< LC, T >; add(Index row, Index col, const type::Mat3x3d &_M)sofa::linearalgebra::BlockDiagonalMatrix< LC, T >; add(Index row, Index col, const type::Mat3x3f &_M)sofa::linearalgebra::BlockDiagonalMatrix< LC, T >; add(Index row, Index col, const type::Mat2x2d &_M)sofa::linearalgebra::BlockDiagonalMatrix< LC, T >; add(Index row, Index col, const type::Mat2x2f &_M)sofa::linearalgebra::BlockDiagonalMatrix< LC, T >; add(Index row, Index col, const type::Mat6x6d &_M)sofa::linearalgebra::BlockDiagonalMatrix< LC, T >; add(Index row, Index col, const type::Mat6x6f &_M)sofa::linearalgebra::BlockDiagonalMatrix< LC, T >; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat3x3d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat3x3f &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat2x2d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat2x2f &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat6x6d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat6x6f &_M)sofa::linearalgebra::BaseMatrixvirtual; addB(Index i, const Block &b)sofa::linearalgebra::BlockDiagonalMatrix< LC, T >inline; addB(Index i, Index j, const Block &b)sofa::linearalgebra::BlockDiagonalMatrix< LC, T >inl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html:6288,Usability,clear,clear,6288,"gebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; Block typedefsofa::linearalgebra::BlockDiagonalMatrix< LC, T >; BlockDiagonalMatrix()sofa::linearalgebra::BlockDiagonalMatrix< LC, T >inline; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; category enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clear() overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCol(Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBSize(void) constsofa::linearalgebra::BlockDiagonalMatrix< LC, T >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html:6384,Usability,clear,clear,6384,"tual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; Block typedefsofa::linearalgebra::BlockDiagonalMatrix< LC, T >; BlockDiagonalMatrix()sofa::linearalgebra::BlockDiagonalMatrix< LC, T >inline; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; category enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clear() overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCol(Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBSize(void) constsofa::linearalgebra::BlockDiagonalMatrix< LC, T >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html:6464,Usability,clear,clearCol,6464,"ck typedefsofa::linearalgebra::BlockDiagonalMatrix< LC, T >; BlockDiagonalMatrix()sofa::linearalgebra::BlockDiagonalMatrix< LC, T >inline; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; category enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clear() overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCol(Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBSize(void) constsofa::linearalgebra::BlockDiagonalMatrix< LC, T >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlinepro",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html:6554,Usability,clear,clearCols,6554,"earalgebra::BlockDiagonalMatrix< LC, T >inline; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; category enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clear() overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCol(Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBSize(void) constsofa::linearalgebra::BlockDiagonalMatrix< LC, T >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsof",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html:6633,Usability,clear,clearRow,6633,"t T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; category enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clear() overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCol(Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBSize(void) constsofa::linearalgebra::BlockDiagonalMatrix< LC, T >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html:6723,Usability,clear,clearRowCol,6723,"bra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; category enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clear() overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCol(Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBSize(void) constsofa::linearalgebra::BlockDiagonalMatrix< LC, T >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; creat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html:6816,Usability,clear,clearRows,6816,"rtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; category enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clear() overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCol(Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBSize(void) constsofa::linearalgebra::BlockDiagonalMatrix< LC, T >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html:6895,Usability,clear,clearRowsCols,6895,"wsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; category enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clear() overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCol(Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBSize(void) constsofa::linearalgebra::BlockDiagonalMatrix< LC, T >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, Index internalData) constsof",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:432,Modifiability,Inherit,Inheritance,432,"﻿. SOFA API: sofa::linearalgebra::BlockDiagonalMatrix< LC, T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::linearalgebra::BlockDiagonalMatrix< LC, T > Class Template Reference . #include <BlockDiagonalMatrix.h>; Simple full matrix container. ; More... Inheritance diagram for sofa::linearalgebra::BlockDiagonalMatrix< LC, T >:. [legend]; Detailed Description; template<std::size_t LC, typename T = SReal>; class sofa::linearalgebra::BlockDiagonalMatrix< LC, T >; Simple full matrix container. . Protected Attributes; std::vector< Block > data;  ; sofa::Index cSize;  . Public Member Functions;  BlockDiagonalMatrix ();  ;  ~BlockDiagonalMatrix () override;  ; void resize (Index nbRow, Index) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; Index rowBSize (void) const;  ; Index colBSize (void) const;  ; const Block & bloc (Index i) const;  ; const Block & bloc (Index i, Index j) const;  ; Block * wbloc (Index i);  ; Block * wbloc (Index i, Index j);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void setB (Index i, const Block &b);  ; void setB (Index i, Index j, const Block &b);  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void addB (Index i, const Block &b);  ; void addB (Index i, Index j, const Block &b);  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:3693,Modifiability,inherit,inherited,3693,"btain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain bet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:10225,Modifiability,Inherit,Inherited,10225,,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:10272,Modifiability,inherit,inherited,10272,,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:14695,Modifiability,inherit,inherited,14695,"tor *it, const InternalColBlockIterator *it2) const;  ; ColBlockConstIterator createColBlockConstIterator (Index row, void *internalPtr) const;  ; ColBlockConstIterator createColBlockConstIterator (Index row, Index internalData) const;  ; virtual void itCopyRowBlock (InternalRowBlockIterator *) const;  ; virtual void itDeleteRowBlock (const InternalRowBlockIterator *) const;  ; virtual Index itAccessRowBlock (InternalRowBlockIterator *it) const;  ; virtual ColBlockConstIterator itBeginRowBlock (InternalRowBlockIterator *it) const;  ; virtual ColBlockConstIterator itEndRowBlock (InternalRowBlockIterator *it) const;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > itRangeRowBlock (InternalRowBlockIterator *it) const;  ; virtual void itIncRowBlock (InternalRowBlockIterator *it) const;  ; virtual void itDecRowBlock (InternalRowBlockIterator *it) const;  ; virtual bool itEqRowBlock (const InternalRowBlockIterator *it, const InternalRowBlockIterator *it2) const;  ; virtual bool itLessRowBlock (const InternalRowBlockIterator *it, const InternalRowBlockIterator *it2) const;  ; RowBlockConstIterator createRowBlockConstIterator (void *internalPtr) const;  ; RowBlockConstIterator createRowBlockConstIterator (Index internalData0, Index internalData1) const;  ;  Static Protected Member Functions inherited from sofa::linearalgebra::BaseMatrix; static InternalBlockAccessor * getInternal (BlockConstAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockConstAccessor *b);  ; static InternalBlockAccessor * getInternal (BlockAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockAccessor *b);  ; static InternalColBlockIterator * getInternal (ColBlockConstIterator *b);  ; static const InternalColBlockIterator * getInternal (const ColBlockConstIterator *b);  ; static InternalRowBlockIterator * getInternal (RowBlockConstIterator *b);  ; static const InternalRowBlockIterator * getInternal (const RowBlockConstIterator *b);  .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:2772,Performance,perform,performances,2772,"olumn j (using 0-based indices) More...;  ; void addB (Index i, const Block &b);  ; void addB (Index i, Index j, const Block &b);  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void invert ();  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ()",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:2946,Performance,perform,performances,2946,"; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void invert ();  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API)",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:3120,Performance,perform,performances,3120,"d clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void invert ();  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:3294,Performance,perform,performances,3294,"emplate<class Real2 > ; void mul (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:3468,Performance,perform,performances,3468,"Real2 > &v) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:3642,Performance,perform,performances,3642,"virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:4242,Performance,perform,performances,4242,"es from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:4416,Performance,perform,performances,4416,"es from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:4590,Performance,perform,performances,4590,"es from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *resul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:4764,Performance,perform,performances,4764,"Matrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const floa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:4938,Performance,perform,performances,4938,"ible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply th",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:5112,Performance,perform,performances,5112,"virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:16559,Performance,perform,performances,16559,"plate<std::size_t LC, typename T = SReal> . std::vector< Block > sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::data. protected . Constructor details. ◆ BlockDiagonalMatrix(). template<std::size_t LC, typename T = SReal> . sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::BlockDiagonalMatrix ; (; ). inline . ◆ ~BlockDiagonalMatrix(). template<std::size_t LC, typename T = SReal> . sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::~BlockDiagonalMatrix ; (; ). inlineoverride . Function details. ◆ add() [1/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::add ; (; Index ; row, . Index ; col, . double ; v . ). inlineoverridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:16655,Performance,perform,performances,16655,"gebra::BlockDiagonalMatrix< LC, T >::data. protected . Constructor details. ◆ BlockDiagonalMatrix(). template<std::size_t LC, typename T = SReal> . sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::BlockDiagonalMatrix ; (; ). inline . ◆ ~BlockDiagonalMatrix(). template<std::size_t LC, typename T = SReal> . sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::~BlockDiagonalMatrix ; (; ). inlineoverride . Function details. ◆ add() [1/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::add ; (; Index ; row, . Index ; col, . double ; v . ). inlineoverridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<std::size_t LC, typename T = SR",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:16857,Performance,perform,performances,16857,"; (; ). inline . ◆ ~BlockDiagonalMatrix(). template<std::size_t LC, typename T = SReal> . sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::~BlockDiagonalMatrix ; (; ). inlineoverride . Function details. ◆ add() [1/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::add ; (; Index ; row, . Index ; col, . double ; v . ). inlineoverridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<std::size_t LC, typename T = SReal> . void sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:16953,Performance,perform,performances,16953,"= SReal> . sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::~BlockDiagonalMatrix ; (; ). inlineoverride . Function details. ◆ add() [1/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::add ; (; Index ; row, . Index ; col, . double ; v . ). inlineoverridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This functio",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:17155,Performance,perform,performances,17155,"DiagonalMatrix< LC, T >::add ; (; Index ; row, . Index ; col, . double ; v . ). inlineoverridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<std::size_t LC, typename T = SReal> . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, col",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:17251,Performance,perform,performances,17251," inlineoverridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<std::size_t LC, typename T = SReal> . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addB() [1/2]. template<std::size_t LC, typen",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:17453,Performance,perform,performances,17453,"void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<std::size_t LC, typename T = SReal> . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addB() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . const Block & ; b . ). inline . ◆ addB() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::Blo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:17549,Performance,perform,performances,17549,"is function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<std::size_t LC, typename T = SReal> . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addB() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . const Block & ; b . ). inline . ◆ addB() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . Index ; j, . const Block & ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:17751,Performance,perform,performances,17751,"void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<std::size_t LC, typename T = SReal> . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addB() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . const Block & ; b . ). inline . ◆ addB() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . Index ; j, . const Block & ; b . ). inline . ◆ bloc() [1/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i); const. inline . ◆ bloc() [2/2]. template<std::size_t L",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:17953,Performance,perform,performances,17953," to obtain better performances. . ◆ add() [4/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<std::size_t LC, typename T = SReal> . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addB() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . const Block & ; b . ). inline . ◆ addB() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . Index ; j, . const Block & ; b . ). inline . ◆ bloc() [1/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i); const. inline . ◆ bloc() [2/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i, . Index ; j . ); const. inline . ◆ clear() [1/2]. template<std::size_t LC, typename T = SRea",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:8499,Security,access,access,8499,"st;  Multiply the transposed matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulTV (double *result, const double *v) const;  Multiply the transposed matrix by double vector v and add the result in vector result. More...;  ; virtual void opMulTM (BaseMatrix *result, BaseMatrix *m) const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the give",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:8592,Security,access,access,8592,"const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:8687,Security,access,access,8687,"tual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  ; virtual RowBlockConstIterator bRowsBegin () const;  Get the iterator",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:392,Usability,Simpl,Simple,392,"﻿. SOFA API: sofa::linearalgebra::BlockDiagonalMatrix< LC, T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::linearalgebra::BlockDiagonalMatrix< LC, T > Class Template Reference . #include <BlockDiagonalMatrix.h>; Simple full matrix container. ; More... Inheritance diagram for sofa::linearalgebra::BlockDiagonalMatrix< LC, T >:. [legend]; Detailed Description; template<std::size_t LC, typename T = SReal>; class sofa::linearalgebra::BlockDiagonalMatrix< LC, T >; Simple full matrix container. . Protected Attributes; std::vector< Block > data;  ; sofa::Index cSize;  . Public Member Functions;  BlockDiagonalMatrix ();  ;  ~BlockDiagonalMatrix () override;  ; void resize (Index nbRow, Index) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; Index rowBSize (void) const;  ; Index colBSize (void) const;  ; const Block & bloc (Index i) const;  ; const Block & bloc (Index i, Index j) const;  ; Block * wbloc (Index i);  ; Block * wbloc (Index i, Index j);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void setB (Index i, const Block &b);  ; void setB (Index i, Index j, const Block &b);  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void addB (Index i, const Block &b);  ; void addB (Index i, Index j, const Block &b);  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:643,Usability,Simpl,Simple,643,"﻿. SOFA API: sofa::linearalgebra::BlockDiagonalMatrix< LC, T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::linearalgebra::BlockDiagonalMatrix< LC, T > Class Template Reference . #include <BlockDiagonalMatrix.h>; Simple full matrix container. ; More... Inheritance diagram for sofa::linearalgebra::BlockDiagonalMatrix< LC, T >:. [legend]; Detailed Description; template<std::size_t LC, typename T = SReal>; class sofa::linearalgebra::BlockDiagonalMatrix< LC, T >; Simple full matrix container. . Protected Attributes; std::vector< Block > data;  ; sofa::Index cSize;  . Public Member Functions;  BlockDiagonalMatrix ();  ;  ~BlockDiagonalMatrix () override;  ; void resize (Index nbRow, Index) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; Index rowBSize (void) const;  ; Index colBSize (void) const;  ; const Block & bloc (Index i) const;  ; const Block & bloc (Index i, Index j) const;  ; Block * wbloc (Index i);  ; Block * wbloc (Index i, Index j);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void setB (Index i, const Block &b);  ; void setB (Index i, Index j, const Block &b);  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void addB (Index i, const Block &b);  ; void addB (Index i, Index j, const Block &b);  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:1892,Usability,clear,clear,1892,"atrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; Index rowBSize (void) const;  ; Index colBSize (void) const;  ; const Block & bloc (Index i) const;  ; const Block & bloc (Index i, Index j) const;  ; Block * wbloc (Index i);  ; Block * wbloc (Index i, Index j);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void setB (Index i, const Block &b);  ; void setB (Index i, Index j, const Block &b);  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void addB (Index i, const Block &b);  ; void addB (Index i, Index j, const Block &b);  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void invert ();  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:1935,Usability,clear,clearRow,1935,"atrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; Index rowBSize (void) const;  ; Index colBSize (void) const;  ; const Block & bloc (Index i) const;  ; const Block & bloc (Index i, Index j) const;  ; Block * wbloc (Index i);  ; Block * wbloc (Index i, Index j);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void setB (Index i, const Block &b);  ; void setB (Index i, Index j, const Block &b);  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void addB (Index i, const Block &b);  ; void addB (Index i, Index j, const Block &b);  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void invert ();  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:2018,Usability,clear,clearCol,2018,"mber of columns. More...;  ; Index rowBSize (void) const;  ; Index colBSize (void) const;  ; const Block & bloc (Index i) const;  ; const Block & bloc (Index i, Index j) const;  ; Block * wbloc (Index i);  ; Block * wbloc (Index i, Index j);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void setB (Index i, const Block &b);  ; void setB (Index i, Index j, const Block &b);  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void addB (Index i, const Block &b);  ; void addB (Index i, Index j, const Block &b);  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void invert ();  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:2104,Usability,clear,clearRowCol,2104,"; const Block & bloc (Index i) const;  ; const Block & bloc (Index i, Index j) const;  ; Block * wbloc (Index i);  ; Block * wbloc (Index i, Index j);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void setB (Index i, const Block &b);  ; void setB (Index i, Index j, const Block &b);  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void addB (Index i, const Block &b);  ; void addB (Index i, Index j, const Block &b);  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void invert ();  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:2201,Usability,clear,clear,2201,"const;  ; Block * wbloc (Index i);  ; Block * wbloc (Index i, Index j);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void setB (Index i, const Block &b);  ; void setB (Index i, Index j, const Block &b);  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void addB (Index i, const Block &b);  ; void addB (Index i, Index j, const Block &b);  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void invert ();  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Addi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:5151,Usability,clear,clearRows,5151,"a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:5188,Usability,Clear,Clears,5188,"a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:5254,Usability,clear,clearCols,5254,"ndex row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:5291,Usability,Clear,Clears,5291,"ndex row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:5365,Usability,clear,clearRowsCols,5365,"ter performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulV (double *result, const double *v) const;  Multiply the matrix by",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:5406,Usability,Clear,Clears,5406,"ter performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulV (double *result, const double *v) const;  Multiply the matrix by",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:18879,Usability,clear,clear,18879,"s from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<std::size_t LC, typename T = SReal> . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addB() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . const Block & ; b . ). inline . ◆ addB() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . Index ; j, . const Block & ; b . ). inline . ◆ bloc() [1/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i); const. inline . ◆ bloc() [2/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i, . Index ; j . ); const. inline . ◆ clear() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:18997,Usability,clear,clear,18997,") [8/8]. template<std::size_t LC, typename T = SReal> . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addB() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . const Block & ; b . ). inline . ◆ addB() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . Index ; j, . const Block & ; b . ). inline . ◆ bloc() [1/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i); const. inline . ◆ bloc() [2/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i, . Index ; j . ); const. inline . ◆ clear() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:19106,Usability,clear,clear,19106,"f the element at row i, column j (using 0-based indices) . ◆ addB() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . const Block & ; b . ). inline . ◆ addB() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . Index ; j, . const Block & ; b . ). inline . ◆ bloc() [1/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i); const. inline . ◆ bloc() [2/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i, . Index ; j . ); const. inline . ◆ clear() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalg",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:19224,Usability,clear,clear,19224,"LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . const Block & ; b . ). inline . ◆ addB() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . Index ; j, . const Block & ; b . ). inline . ◆ bloc() [1/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i); const. inline . ◆ bloc() [2/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i, . Index ; j . ); const. inline . ◆ clear() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colBSize(). template<std::size_t LC, typename T = SReal> . Index sofa::line",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:19341,Usability,clear,clearCol,19341," addB() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . Index ; j, . const Block & ; b . ). inline . ◆ bloc() [1/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i); const. inline . ◆ bloc() [2/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i, . Index ; j . ); const. inline . ◆ clear() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colBSize(). template<std::size_t LC, typename T = SReal> . Index sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::colBSize ; (; void ; ); const. inline . ◆ colSize(). template<std::size_t LC, typename T = SReal>",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:19456,Usability,clear,clearCol,19456,"agonalMatrix< LC, T >::addB ; (; Index ; i, . Index ; j, . const Block & ; b . ). inline . ◆ bloc() [1/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i); const. inline . ◆ bloc() [2/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i, . Index ; j . ); const. inline . ◆ clear() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colBSize(). template<std::size_t LC, typename T = SReal> . Index sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::colBSize ; (; void ; ); const. inline . ◆ colSize(). template<std::size_t LC, typename T = SReal> . Index sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::colSize ; (; void ; ); const. inlin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:19601,Usability,clear,clearRow,19601,"& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i); const. inline . ◆ bloc() [2/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i, . Index ; j . ); const. inline . ◆ clear() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colBSize(). template<std::size_t LC, typename T = SReal> . Index sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::colBSize ; (; void ; ); const. inline . ◆ colSize(). template<std::size_t LC, typename T = SReal> . Index sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::size_t LC, typename T = SReal> . SReal sofa::linearalg",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:19716,Usability,clear,clearRow,19716,"oc() [2/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i, . Index ; j . ); const. inline . ◆ clear() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colBSize(). template<std::size_t LC, typename T = SReal> . Index sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::colBSize ; (; void ; ); const. inline . ◆ colSize(). template<std::size_t LC, typename T = SReal> . Index sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::size_t LC, typename T = SReal> . SReal sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::element ; (; Index ; i, . Index ; j . ); const. inlineoverr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:19858,Usability,clear,clearRowCol,19858,"nst. inline . ◆ clear() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colBSize(). template<std::size_t LC, typename T = SReal> . Index sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::colBSize ; (; void ; ); const. inline . ◆ colSize(). template<std::size_t LC, typename T = SReal> . Index sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::size_t LC, typename T = SReal> . SReal sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::element ; (; Index ; i, . Index ; j . ); const. inlineoverridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ invert(). template<std::size_t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:19976,Usability,clear,clearRowCol,19976,"ebra::BlockDiagonalMatrix< LC, T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colBSize(). template<std::size_t LC, typename T = SReal> . Index sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::colBSize ; (; void ; ); const. inline . ◆ colSize(). template<std::size_t LC, typename T = SReal> . Index sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::size_t LC, typename T = SReal> . SReal sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::element ; (; Index ; i, . Index ; j . ); const. inlineoverridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ invert(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::invert ; (; ). ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html:260,Modifiability,inherit,inherited,260,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BlockFullMatrix< N, T > Member List . This is the complete list of members for sofa::linearalgebra::BlockFullMatrix< N, T >, including all inherited members. add(Index i, Index j, double v) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat3x3d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat3x3f &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat2x2d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat2x2f &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat6x6d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat6x6f &_M)sofa::linearalgebra::BaseMatrixvirtual; allocsizesofa::linearalgebra::BlockFullMatrix< N, T >protected; asub(Index bi, Index bj, Index, Index) constsofa::linearalgebra::BlockFullMatrix< N, T >; asub(Index bi, Index bj, Index, Index)sofa::linearalgebra::BlockFullMatrix< N, T >; bAccessorAdd(InternalBlockAccessor *b, Index i, Index j, double v)sofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorAdd(InternalBlockAccessor *b, const float *buffer)sofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorAdd(InternalBlockAccessor *b, const double *buffer)sofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorAdd(InternalBlockAccessor *b, const int *buffer)sofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorAddDefaultImpl(InternalBlockAccessor *b, const T *buffer)sofa::linearalgebra::BaseMatrixinlineprotected; bAccessorCopy(InternalBlockAccessor *) constsofa::linearalgebra::BaseMatrixin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html:5548,Usability,clear,clear,5548,"tual; blocElements(Index i, Index j, T *buffer) constsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; BlockFullMatrix()sofa::linearalgebra::BlockFullMatrix< N, T >; BlockFullMatrix(Index nbRow, Index nbCol)sofa::linearalgebra::BlockFullMatrix< N, T >; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockFullMatrix< N, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clear() overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCol(Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html:5633,Usability,clear,clear,5633,"nline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; BlockFullMatrix()sofa::linearalgebra::BlockFullMatrix< N, T >; BlockFullMatrix(Index nbRow, Index nbCol)sofa::linearalgebra::BlockFullMatrix< N, T >; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockFullMatrix< N, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clear() overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCol(Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html:5702,Usability,clear,clearCol,5702,"nlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; BlockFullMatrix()sofa::linearalgebra::BlockFullMatrix< N, T >; BlockFullMatrix(Index nbRow, Index nbCol)sofa::linearalgebra::BlockFullMatrix< N, T >; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockFullMatrix< N, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clear() overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCol(Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html:5781,Usability,clear,clearCols,5781,"tual; BlockFullMatrix()sofa::linearalgebra::BlockFullMatrix< N, T >; BlockFullMatrix(Index nbRow, Index nbCol)sofa::linearalgebra::BlockFullMatrix< N, T >; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockFullMatrix< N, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clear() overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCol(Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html:5860,Usability,clear,clearRow,5860,"Matrix(Index nbRow, Index nbCol)sofa::linearalgebra::BlockFullMatrix< N, T >; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockFullMatrix< N, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clear() overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCol(Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstItera",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html:5939,Usability,clear,clearRowCol,5939,"cSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockFullMatrix< N, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clear() overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCol(Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprot",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html:6021,Usability,clear,clearRows,6021,"wBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockFullMatrix< N, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clear() overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCol(Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, Index internalData) constsofa::line",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html:6100,Usability,clear,clearRowsCols,6100," ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockFullMatrix< N, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clear() overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCol(Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createRowBlockConstIterator(void *internalP",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:448,Modifiability,Inherit,Inheritance,448,"﻿. SOFA API: sofa::linearalgebra::BlockFullMatrix< N, T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::linearalgebra::BlockFullMatrix< N, T > Class Template Reference . #include <BlockFullMatrix.h>; Simple block full matrix container (used for InvMatrixType) ; More... Inheritance diagram for sofa::linearalgebra::BlockFullMatrix< N, T >:. [legend]; Detailed Description; template<std::size_t N, typename T>; class sofa::linearalgebra::BlockFullMatrix< N, T >; Simple block full matrix container (used for InvMatrixType) . Classes; class  Block;  ; class  TransposedBlock;  . Protected Attributes; Block * data;  ; Index nTRow;  ; Index nTCol;  ; Index nBRow;  ; Index nBCol;  ; Index allocsize;  . Public Member Functions;  BlockFullMatrix ();  ;  BlockFullMatrix (Index nbRow, Index nbCol);  ;  ~BlockFullMatrix () override;  ; Block * ptr ();  ; const Block * ptr () const;  ; const Block & bloc (Index bi, Index bj) const;  ; Block & bloc (Index bi, Index bj);  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; const Block & asub (Index bi, Index bj, Index, Index) const;  ; const Block & sub (Index i, Index j, Index, Index) const;  ; Block & asub (Index bi, Index bj, Index, Index);  ; Block & sub (Index i, Index j, Index, Index);  ; template<class B > ; void getSubMatrix (Index i, Index j, Index nrow, Index ncol, B &m);  ; template<class B > ; void getAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, B &m);  ; template<class B > ; void setSubMatrix (Index i, Index j, ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:2920,Modifiability,inherit,inherited,2920,";  ; template<class B > ; void setSubMatrix (Index i, Index j, Index nrow, Index ncol, const B &m);  ; template<class B > ; void setAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, const B &m);  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f mat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:9451,Modifiability,Inherit,Inherited,9451,,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:9498,Modifiability,inherit,inherited,9498,,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:13921,Modifiability,inherit,inherited,13921,"tor *it, const InternalColBlockIterator *it2) const;  ; ColBlockConstIterator createColBlockConstIterator (Index row, void *internalPtr) const;  ; ColBlockConstIterator createColBlockConstIterator (Index row, Index internalData) const;  ; virtual void itCopyRowBlock (InternalRowBlockIterator *) const;  ; virtual void itDeleteRowBlock (const InternalRowBlockIterator *) const;  ; virtual Index itAccessRowBlock (InternalRowBlockIterator *it) const;  ; virtual ColBlockConstIterator itBeginRowBlock (InternalRowBlockIterator *it) const;  ; virtual ColBlockConstIterator itEndRowBlock (InternalRowBlockIterator *it) const;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > itRangeRowBlock (InternalRowBlockIterator *it) const;  ; virtual void itIncRowBlock (InternalRowBlockIterator *it) const;  ; virtual void itDecRowBlock (InternalRowBlockIterator *it) const;  ; virtual bool itEqRowBlock (const InternalRowBlockIterator *it, const InternalRowBlockIterator *it2) const;  ; virtual bool itLessRowBlock (const InternalRowBlockIterator *it, const InternalRowBlockIterator *it2) const;  ; RowBlockConstIterator createRowBlockConstIterator (void *internalPtr) const;  ; RowBlockConstIterator createRowBlockConstIterator (Index internalData0, Index internalData1) const;  ;  Static Protected Member Functions inherited from sofa::linearalgebra::BaseMatrix; static InternalBlockAccessor * getInternal (BlockConstAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockConstAccessor *b);  ; static InternalBlockAccessor * getInternal (BlockAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockAccessor *b);  ; static InternalColBlockIterator * getInternal (ColBlockConstIterator *b);  ; static const InternalColBlockIterator * getInternal (const ColBlockConstIterator *b);  ; static InternalRowBlockIterator * getInternal (RowBlockConstIterator *b);  ; static const InternalRowBlockIterator * getInternal (const RowBlockConstIterator *b);  .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:3469,Performance,perform,performances,3469,"Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:3643,Performance,perform,performances,3643,"o 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:3817,Performance,perform,performances,3817,"template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *resul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:3991,Performance,perform,performances,3991,"Matrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const floa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:4165,Performance,perform,performances,4165,"ible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply th",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:4339,Performance,perform,performances,4339,"virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:7726,Security,access,access,7726,"st;  Multiply the transposed matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulTV (double *result, const double *v) const;  Multiply the transposed matrix by double vector v and add the result in vector result. More...;  ; virtual void opMulTM (BaseMatrix *result, BaseMatrix *m) const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the give",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:7819,Security,access,access,7819,"const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:7914,Security,access,access,7914,"tual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  ; virtual RowBlockConstIterator bRowsBegin () const;  Get the iterator",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:378,Usability,Simpl,Simple,378,"﻿. SOFA API: sofa::linearalgebra::BlockFullMatrix< N, T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::linearalgebra::BlockFullMatrix< N, T > Class Template Reference . #include <BlockFullMatrix.h>; Simple block full matrix container (used for InvMatrixType) ; More... Inheritance diagram for sofa::linearalgebra::BlockFullMatrix< N, T >:. [legend]; Detailed Description; template<std::size_t N, typename T>; class sofa::linearalgebra::BlockFullMatrix< N, T >; Simple block full matrix container (used for InvMatrixType) . Classes; class  Block;  ; class  TransposedBlock;  . Protected Attributes; Block * data;  ; Index nTRow;  ; Index nTCol;  ; Index nBRow;  ; Index nBCol;  ; Index allocsize;  . Public Member Functions;  BlockFullMatrix ();  ;  BlockFullMatrix (Index nbRow, Index nbCol);  ;  ~BlockFullMatrix () override;  ; Block * ptr ();  ; const Block * ptr () const;  ; const Block & bloc (Index bi, Index bj) const;  ; Block & bloc (Index bi, Index bj);  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; const Block & asub (Index bi, Index bj, Index, Index) const;  ; const Block & sub (Index i, Index j, Index, Index) const;  ; Block & asub (Index bi, Index bj, Index, Index);  ; Block & sub (Index i, Index j, Index, Index);  ; template<class B > ; void getSubMatrix (Index i, Index j, Index nrow, Index ncol, B &m);  ; template<class B > ; void getAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, B &m);  ; template<class B > ; void setSubMatrix (Index i, Index j, ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:640,Usability,Simpl,Simple,640,"﻿. SOFA API: sofa::linearalgebra::BlockFullMatrix< N, T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::linearalgebra::BlockFullMatrix< N, T > Class Template Reference . #include <BlockFullMatrix.h>; Simple block full matrix container (used for InvMatrixType) ; More... Inheritance diagram for sofa::linearalgebra::BlockFullMatrix< N, T >:. [legend]; Detailed Description; template<std::size_t N, typename T>; class sofa::linearalgebra::BlockFullMatrix< N, T >; Simple block full matrix container (used for InvMatrixType) . Classes; class  Block;  ; class  TransposedBlock;  . Protected Attributes; Block * data;  ; Index nTRow;  ; Index nTCol;  ; Index nBRow;  ; Index nBCol;  ; Index allocsize;  . Public Member Functions;  BlockFullMatrix ();  ;  BlockFullMatrix (Index nbRow, Index nbCol);  ;  ~BlockFullMatrix () override;  ; Block * ptr ();  ; const Block * ptr () const;  ; const Block & bloc (Index bi, Index bj) const;  ; Block & bloc (Index bi, Index bj);  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; const Block & asub (Index bi, Index bj, Index, Index) const;  ; const Block & sub (Index i, Index j, Index, Index) const;  ; Block & asub (Index bi, Index bj, Index, Index);  ; Block & sub (Index i, Index j, Index, Index);  ; template<class B > ; void getSubMatrix (Index i, Index j, Index nrow, Index ncol, B &m);  ; template<class B > ; void getAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, B &m);  ; template<class B > ; void setSubMatrix (Index i, Index j, ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:2435,Usability,clear,clear,2435,"n j (using 0-based indices) More...;  ; const Block & asub (Index bi, Index bj, Index, Index) const;  ; const Block & sub (Index i, Index j, Index, Index) const;  ; Block & asub (Index bi, Index bj, Index, Index);  ; Block & sub (Index i, Index j, Index, Index);  ; template<class B > ; void getSubMatrix (Index i, Index j, Index nrow, Index ncol, B &m);  ; template<class B > ; void getAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, B &m);  ; template<class B > ; void setSubMatrix (Index i, Index j, Index nrow, Index ncol, const B &m);  ; template<class B > ; void setAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, const B &m);  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. M",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:2478,Usability,clear,clearRow,2478,"n j (using 0-based indices) More...;  ; const Block & asub (Index bi, Index bj, Index, Index) const;  ; const Block & sub (Index i, Index j, Index, Index) const;  ; Block & asub (Index bi, Index bj, Index, Index);  ; Block & sub (Index i, Index j, Index, Index);  ; template<class B > ; void getSubMatrix (Index i, Index j, Index nrow, Index ncol, B &m);  ; template<class B > ; void getAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, B &m);  ; template<class B > ; void setSubMatrix (Index i, Index j, Index nrow, Index ncol, const B &m);  ; template<class B > ; void setAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, const B &m);  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. M",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:2561,Usability,clear,clearCol,2561,"nst Block & sub (Index i, Index j, Index, Index) const;  ; Block & asub (Index bi, Index bj, Index, Index);  ; Block & sub (Index i, Index j, Index, Index);  ; template<class B > ; void getSubMatrix (Index i, Index j, Index nrow, Index ncol, B &m);  ; template<class B > ; void getAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, B &m);  ; template<class B > ; void setSubMatrix (Index i, Index j, Index nrow, Index ncol, const B &m);  ; template<class B > ; void setAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, const B &m);  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f ma",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:2647,Usability,clear,clearRowCol,2647,", Index, Index);  ; Block & sub (Index i, Index j, Index, Index);  ; template<class B > ; void getSubMatrix (Index i, Index j, Index nrow, Index ncol, B &m);  ; template<class B > ; void getAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, B &m);  ; template<class B > ; void setSubMatrix (Index i, Index j, Index nrow, Index ncol, const B &m);  ; template<class B > ; void setAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, const B &m);  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:2744,Usability,clear,clear,2744,"lass B > ; void getSubMatrix (Index i, Index j, Index nrow, Index ncol, B &m);  ; template<class B > ; void getAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, B &m);  ; template<class B > ; void setSubMatrix (Index i, Index j, Index nrow, Index ncol, const B &m);  ; template<class B > ; void setAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, const B &m);  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:4378,Usability,clear,clearRows,4378,"a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:4415,Usability,Clear,Clears,4415,"a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:4481,Usability,clear,clearCols,4481,"ndex row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:4518,Usability,Clear,Clears,4518,"ndex row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:4592,Usability,clear,clearRowsCols,4592,"ter performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulV (double *result, const double *v) const;  Multiply the matrix by",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:4633,Usability,Clear,Clears,4633,"ter performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulV (double *result, const double *v) const;  Multiply the matrix by",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:16888,Usability,clear,clear,16888,"llMatrix< N, T >::add ; (; Index ; row, . Index ; col, . double ; v . ). overridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ asub() [1/2]. template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ). ◆ asub() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ); const. ◆ bloc() [1/2]. template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ). ◆ bloc() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:16993,Usability,clear,clear,16993,"evirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ asub() [1/2]. template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ). ◆ asub() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ); const. ◆ bloc() [1/2]. template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ). ◆ bloc() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:17096,Usability,clear,clear,17096,"a::BaseMatrix. ◆ asub() [1/2]. template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ). ◆ asub() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ); const. ◆ bloc() [1/2]. template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ). ◆ bloc() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<std::size_t N, typename T > . BlockF",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:17201,Usability,clear,clear,17201,"< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ). ◆ asub() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ); const. ◆ bloc() [1/2]. template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ). ◆ bloc() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Index sofa::linearalgebra::BlockFullMatrix< N, T >::colSize ; (; v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:17312,Usability,clear,clearCol,17312,"asub() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ); const. ◆ bloc() [1/2]. template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ). ◆ bloc() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Index sofa::linearalgebra::BlockFullMatrix< N, T >::colSize ; (; void ; ); const. overridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::siz",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:17414,Usability,clear,clearCol,17414,"Block & sofa::linearalgebra::BlockFullMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ); const. ◆ bloc() [1/2]. template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ). ◆ bloc() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Index sofa::linearalgebra::BlockFullMatrix< N, T >::colSize ; (; void ; ); const. overridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::size_t N, typename T > . SReal sofa::linearalgebra::BlockFullMatrix< N, T >::element ; (",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:17553,Usability,clear,clearRow,17553,"ze_t N, typename T > . BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ). ◆ bloc() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Index sofa::linearalgebra::BlockFullMatrix< N, T >::colSize ; (; void ; ); const. overridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::size_t N, typename T > . SReal sofa::linearalgebra::BlockFullMatrix< N, T >::element ; (; Index ; i, . Index ; j . ); const. overridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalg",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:17655,Usability,clear,clearRow,17655,"llMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ). ◆ bloc() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Index sofa::linearalgebra::BlockFullMatrix< N, T >::colSize ; (; void ; ); const. overridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::size_t N, typename T > . SReal sofa::linearalgebra::BlockFullMatrix< N, T >::element ; (; Index ; i, . Index ; j . ); const. overridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ getAlignedSubMatrix(). template<std::size_t N, typename T > . tem",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:17791,Usability,clear,clearRowCol,17791,"a::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Index sofa::linearalgebra::BlockFullMatrix< N, T >::colSize ; (; void ; ); const. overridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::size_t N, typename T > . SReal sofa::linearalgebra::BlockFullMatrix< N, T >::element ; (; Index ; i, . Index ; j . ); const. overridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ getAlignedSubMatrix(). template<std::size_t N, typename T > . template<class B > . void sofa::linearalgebra::BlockFullMatrix< N, T >::getAlignedSubMatrix ; (; Index ; bi, . Index ; bj, . Index ; nrow, . Index ; ncol, . B",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:17896,Usability,clear,clearRowCol,17896,". ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Index sofa::linearalgebra::BlockFullMatrix< N, T >::colSize ; (; void ; ); const. overridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::size_t N, typename T > . SReal sofa::linearalgebra::BlockFullMatrix< N, T >::element ; (; Index ; i, . Index ; j . ); const. overridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ getAlignedSubMatrix(). template<std::size_t N, typename T > . template<class B > . void sofa::linearalgebra::BlockFullMatrix< N, T >::getAlignedSubMatrix ; (; Index ; bi, . Index ; bj, . Index ; nrow, . Index ; ncol, . B & ; m . ). ◆ getSubMatrix(). template<std::size_t N, typename T > . template<class B >",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block-members.html:274,Modifiability,inherit,inherited,274,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BlockFullMatrix< N, T >::Block Member List . This is the complete list of members for sofa::linearalgebra::BlockFullMatrix< N, T >::Block, including all inherited members. add(Index i, Index j, const T &v)sofa::linearalgebra::BlockFullMatrix< N, T >::Block; addTransposed(const Mat< C, L, Real > &m) noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; ArrayLineType typedefsofa::type::Mat< BSIZE, BSIZE, Real >; back()sofa::type::Mat< BSIZE, BSIZE, Real >inline; back() constsofa::type::Mat< BSIZE, BSIZE, Real >inline; begin() noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; begin() const noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; canSelfTranspose(const Mat< S, S, Real > &lhs, const Mat< S, S, Real > &rhs) noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inlinestatic; canSelfTranspose(const Mat< I, J, Real > &, const Mat< J, I, Real > &) noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inlinestatic; clear() noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; Col typedefsofa::type::Mat< BSIZE, BSIZE, Real >; col(Size j) const noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; const_iterator typedefsofa::type::Mat< BSIZE, BSIZE, Real >; const_reference typedefsofa::type::Mat< BSIZE, BSIZE, Real >; data() const noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; difference_type typedefsofa::type::Mat< BSIZE, BSIZE, Real >; element(Index i, Index j) constsofa::linearalgebra::BlockFullMatrix< N, T >::Block; elemssofa::type::Mat< BSIZE, BSIZE, Real >; end() noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; end() const noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; fill(Real r) noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; front()sofa::type::Mat< BSIZE, BSIZE, Real >inline; front() constsofa::type::Mat< BSIZE, BSIZE, Real >inline; getNbCols() constsofa::type::Mat< BSIZE, BSIZE, Real >inline; getNbLines() constsofa::type::Mat< BSIZE, ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block-members.html:1036,Usability,clear,clear,1036," add(Index i, Index j, const T &v)sofa::linearalgebra::BlockFullMatrix< N, T >::Block; addTransposed(const Mat< C, L, Real > &m) noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; ArrayLineType typedefsofa::type::Mat< BSIZE, BSIZE, Real >; back()sofa::type::Mat< BSIZE, BSIZE, Real >inline; back() constsofa::type::Mat< BSIZE, BSIZE, Real >inline; begin() noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; begin() const noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; canSelfTranspose(const Mat< S, S, Real > &lhs, const Mat< S, S, Real > &rhs) noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inlinestatic; canSelfTranspose(const Mat< I, J, Real > &, const Mat< J, I, Real > &) noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inlinestatic; clear() noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; Col typedefsofa::type::Mat< BSIZE, BSIZE, Real >; col(Size j) const noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; const_iterator typedefsofa::type::Mat< BSIZE, BSIZE, Real >; const_reference typedefsofa::type::Mat< BSIZE, BSIZE, Real >; data() const noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; difference_type typedefsofa::type::Mat< BSIZE, BSIZE, Real >; element(Index i, Index j) constsofa::linearalgebra::BlockFullMatrix< N, T >::Block; elemssofa::type::Mat< BSIZE, BSIZE, Real >; end() noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; end() const noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; fill(Real r) noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; front()sofa::type::Mat< BSIZE, BSIZE, Real >inline; front() constsofa::type::Mat< BSIZE, BSIZE, Real >inline; getNbCols() constsofa::type::Mat< BSIZE, BSIZE, Real >inline; getNbLines() constsofa::type::Mat< BSIZE, ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:305,Modifiability,Inherit,Inheritance,305,"﻿. SOFA API: sofa::linearalgebra::BlockFullMatrix< N, T >::Block Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::linearalgebra::BlockFullMatrix< N, T >::Block Class Reference . #include <BlockFullMatrix.h>. Inheritance diagram for sofa::linearalgebra::BlockFullMatrix< N, T >::Block:. [legend]. Public Member Functions; Index Nrows () const;  ; Index Ncols () const;  ; void resize (Index, Index);  ; const T & element (Index i, Index j) const;  ; void set (Index i, Index j, const T &v);  ; void add (Index i, Index j, const T &v);  ; void operator= (const type::Mat< BSIZE, BSIZE, Real > &v);  ; type::Mat< BSIZE, BSIZE, Real > operator- () const;  ; type::Mat< BSIZE, BSIZE, Real > operator- (const type::Mat< BSIZE, BSIZE, Real > &m) const;  ; type::Vec< BSIZE, Real > operator* (const type::Vec< BSIZE, Real > &v);  ; type::Mat< BSIZE, BSIZE, Real > operator* (const type::Mat< BSIZE, BSIZE, Real > &m);  ; type::Mat< BSIZE, BSIZE, Real > operator* (const Block &m);  ; type::Mat< BSIZE, BSIZE, Real > operator* (const TransposedBlock &mt);  ; TransposedBlock t () const;  ; Block i () const;  ;  Public Member Functions inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; constexpr Mat () noexcept=default;  ; constexpr Mat (NoInit) noexcept;  ; constexpr Mat (std::initializer_list< Real > &&scalars) noexcept;  ; constexpr Mat (std::initializer_list< std::initializer_list< Real >> &&rows) noexcept;  ; constexpr Mat (ArgsT &&... r) noexcept;  ; constexpr Mat (const Real &v) noexcept;  Constructor from an element. More...;  ; constexpr Mat (const Mat< L, C, real2 > &m) noexcept;  Constructor from another matrix. More...;  ; constexpr Mat (const Mat< L2, C2, real2 > &m) noexcept;  Constructor from another matrix with different size (with null default entries and ignoring outside entries) More...;  ; constexpr Mat (const real2 *p) noexcept;  Constructor from an array of elements (stored",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:1224,Modifiability,inherit,inherited,1224,"﻿. SOFA API: sofa::linearalgebra::BlockFullMatrix< N, T >::Block Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::linearalgebra::BlockFullMatrix< N, T >::Block Class Reference . #include <BlockFullMatrix.h>. Inheritance diagram for sofa::linearalgebra::BlockFullMatrix< N, T >::Block:. [legend]. Public Member Functions; Index Nrows () const;  ; Index Ncols () const;  ; void resize (Index, Index);  ; const T & element (Index i, Index j) const;  ; void set (Index i, Index j, const T &v);  ; void add (Index i, Index j, const T &v);  ; void operator= (const type::Mat< BSIZE, BSIZE, Real > &v);  ; type::Mat< BSIZE, BSIZE, Real > operator- () const;  ; type::Mat< BSIZE, BSIZE, Real > operator- (const type::Mat< BSIZE, BSIZE, Real > &m) const;  ; type::Vec< BSIZE, Real > operator* (const type::Vec< BSIZE, Real > &v);  ; type::Mat< BSIZE, BSIZE, Real > operator* (const type::Mat< BSIZE, BSIZE, Real > &m);  ; type::Mat< BSIZE, BSIZE, Real > operator* (const Block &m);  ; type::Mat< BSIZE, BSIZE, Real > operator* (const TransposedBlock &mt);  ; TransposedBlock t () const;  ; Block i () const;  ;  Public Member Functions inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; constexpr Mat () noexcept=default;  ; constexpr Mat (NoInit) noexcept;  ; constexpr Mat (std::initializer_list< Real > &&scalars) noexcept;  ; constexpr Mat (std::initializer_list< std::initializer_list< Real >> &&rows) noexcept;  ; constexpr Mat (ArgsT &&... r) noexcept;  ; constexpr Mat (const Real &v) noexcept;  Constructor from an element. More...;  ; constexpr Mat (const Mat< L, C, real2 > &m) noexcept;  Constructor from another matrix. More...;  ; constexpr Mat (const Mat< L2, C2, real2 > &m) noexcept;  Constructor from another matrix with different size (with null default entries and ignoring outside entries) More...;  ; constexpr Mat (const real2 *p) noexcept;  Constructor from an array of elements (stored",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:8767,Modifiability,Inherit,Inherited,8767,"r void symmetrize () noexcept;  ; constexpr const Real * data () const noexcept;  ; constexpr ArrayLineType::iterator begin () noexcept;  ; constexpr ArrayLineType::const_iterator begin () const noexcept;  ; constexpr ArrayLineType::iterator end () noexcept;  ; constexpr ArrayLineType::const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; constexpr bool operator== (const Mat< L, C, Real > &b) const noexcept;  ; constexpr bool operator!= (const Mat< L, C, Real > &b) const noexcept;  ; bool isSymmetric () const;  ; bool isDiagonal () const noexcept;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; ArrayLineType elems;  ;  Static Public Attributes inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; static constexpr sofa::Size N;  ; static constexpr Size nbLines;  ; static constexpr Size nbCols;  ; static constexpr sofa::Size static_size;  ; static constexpr sofa::Size total_size;  ;  Static Public Member Functions inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; static constexpr sofa::Size size ();  ; static const Mat< L, L, Real > & Identity () noexcept;  Returns the identity matrix. More...;  ; static bool canSelfTranspose (const Mat< S, S, Real > &lhs, const Mat< S, S, Real > &rhs) noexcept;  ; static bool canSelfTranspose (const Mat< I, J, Real > &, const Mat< J, I, Real > &) noexcept;  ; static Mat< L, C, Real > transformTranslation (const Vec< C-1, Real > &t) noexcept;  ; static Mat< L, C, Real > transformScale (Real s) noexcept;  ; static Mat< L, C, Real > transformScale (const Vec< C-1, Real > &s) noexcept;  ; static Mat< L, C, Real > transformRotation (const Quat &q) noexcept;  . Function details. ◆ add(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::Block::add ; (; Index ; i, . Index ; j, . const T & ; v . ). ◆ el",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:8805,Modifiability,inherit,inherited,8805,"r void symmetrize () noexcept;  ; constexpr const Real * data () const noexcept;  ; constexpr ArrayLineType::iterator begin () noexcept;  ; constexpr ArrayLineType::const_iterator begin () const noexcept;  ; constexpr ArrayLineType::iterator end () noexcept;  ; constexpr ArrayLineType::const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; constexpr bool operator== (const Mat< L, C, Real > &b) const noexcept;  ; constexpr bool operator!= (const Mat< L, C, Real > &b) const noexcept;  ; bool isSymmetric () const;  ; bool isDiagonal () const noexcept;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; ArrayLineType elems;  ;  Static Public Attributes inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; static constexpr sofa::Size N;  ; static constexpr Size nbLines;  ; static constexpr Size nbCols;  ; static constexpr sofa::Size static_size;  ; static constexpr sofa::Size total_size;  ;  Static Public Member Functions inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; static constexpr sofa::Size size ();  ; static const Mat< L, L, Real > & Identity () noexcept;  Returns the identity matrix. More...;  ; static bool canSelfTranspose (const Mat< S, S, Real > &lhs, const Mat< S, S, Real > &rhs) noexcept;  ; static bool canSelfTranspose (const Mat< I, J, Real > &, const Mat< J, I, Real > &) noexcept;  ; static Mat< L, C, Real > transformTranslation (const Vec< C-1, Real > &t) noexcept;  ; static Mat< L, C, Real > transformScale (Real s) noexcept;  ; static Mat< L, C, Real > transformScale (const Vec< C-1, Real > &s) noexcept;  ; static Mat< L, C, Real > transformRotation (const Quat &q) noexcept;  . Function details. ◆ add(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::Block::add ; (; Index ; i, . Index ; j, . const T & ; v . ). ◆ el",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:8909,Modifiability,inherit,inherited,8909,"r void symmetrize () noexcept;  ; constexpr const Real * data () const noexcept;  ; constexpr ArrayLineType::iterator begin () noexcept;  ; constexpr ArrayLineType::const_iterator begin () const noexcept;  ; constexpr ArrayLineType::iterator end () noexcept;  ; constexpr ArrayLineType::const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; constexpr bool operator== (const Mat< L, C, Real > &b) const noexcept;  ; constexpr bool operator!= (const Mat< L, C, Real > &b) const noexcept;  ; bool isSymmetric () const;  ; bool isDiagonal () const noexcept;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; ArrayLineType elems;  ;  Static Public Attributes inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; static constexpr sofa::Size N;  ; static constexpr Size nbLines;  ; static constexpr Size nbCols;  ; static constexpr sofa::Size static_size;  ; static constexpr sofa::Size total_size;  ;  Static Public Member Functions inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; static constexpr sofa::Size size ();  ; static const Mat< L, L, Real > & Identity () noexcept;  Returns the identity matrix. More...;  ; static bool canSelfTranspose (const Mat< S, S, Real > &lhs, const Mat< S, S, Real > &rhs) noexcept;  ; static bool canSelfTranspose (const Mat< I, J, Real > &, const Mat< J, I, Real > &) noexcept;  ; static Mat< L, C, Real > transformTranslation (const Vec< C-1, Real > &t) noexcept;  ; static Mat< L, C, Real > transformScale (Real s) noexcept;  ; static Mat< L, C, Real > transformScale (const Vec< C-1, Real > &s) noexcept;  ; static Mat< L, C, Real > transformRotation (const Quat &q) noexcept;  . Function details. ◆ add(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::Block::add ; (; Index ; i, . Index ; j, . const T & ; v . ). ◆ el",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:9183,Modifiability,inherit,inherited,9183,"r void symmetrize () noexcept;  ; constexpr const Real * data () const noexcept;  ; constexpr ArrayLineType::iterator begin () noexcept;  ; constexpr ArrayLineType::const_iterator begin () const noexcept;  ; constexpr ArrayLineType::iterator end () noexcept;  ; constexpr ArrayLineType::const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; constexpr bool operator== (const Mat< L, C, Real > &b) const noexcept;  ; constexpr bool operator!= (const Mat< L, C, Real > &b) const noexcept;  ; bool isSymmetric () const;  ; bool isDiagonal () const noexcept;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; ArrayLineType elems;  ;  Static Public Attributes inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; static constexpr sofa::Size N;  ; static constexpr Size nbLines;  ; static constexpr Size nbCols;  ; static constexpr sofa::Size static_size;  ; static constexpr sofa::Size total_size;  ;  Static Public Member Functions inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; static constexpr sofa::Size size ();  ; static const Mat< L, L, Real > & Identity () noexcept;  Returns the identity matrix. More...;  ; static bool canSelfTranspose (const Mat< S, S, Real > &lhs, const Mat< S, S, Real > &rhs) noexcept;  ; static bool canSelfTranspose (const Mat< I, J, Real > &, const Mat< J, I, Real > &) noexcept;  ; static Mat< L, C, Real > transformTranslation (const Vec< C-1, Real > &t) noexcept;  ; static Mat< L, C, Real > transformScale (Real s) noexcept;  ; static Mat< L, C, Real > transformScale (const Vec< C-1, Real > &s) noexcept;  ; static Mat< L, C, Real > transformRotation (const Quat &q) noexcept;  . Function details. ◆ add(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::Block::add ; (; Index ; i, . Index ; j, . const T & ; v . ). ◆ el",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:3129,Security,access,access,3129,"e getNbCols () const;  number of columns More...;  ; constexpr void operator= (const Real *p) noexcept;  Assignment from an array of elements (stored per line). More...;  ; constexpr void operator= (const Mat< L, C, real2 > &m) noexcept;  Assignment from another matrix. More...;  ; constexpr void operator= (const Mat< L2, C2, Real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, Real > &m) const noexcept;  ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, Real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standar",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:3293,Security,access,access,3293,"..;  ; constexpr void operator= (const Mat< L, C, real2 > &m) noexcept;  Assignment from another matrix. More...;  ; constexpr void operator= (const Mat< L2, C2, Real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, Real > &m) const noexcept;  ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, Real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:3399,Security,access,access,3399,"atrix. More...;  ; constexpr void operator= (const Mat< L2, C2, Real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, Real > &m) const noexcept;  ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, Real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const L",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:3489,Security,access,access,3489,"rom a matrix of different size. More...;  ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, Real > &m) const noexcept;  ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, Real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:3595,Security,access,access,3595,"Real > &m) const noexcept;  ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, Real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:3687,Security,access,access,3687," const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:3802,Security,access,access,3802,"sub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:4316,Security,access,access,4316,"line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:4403,Security,access,access,4403,"ead-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:4490,Security,access,access,4490,"pt;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose of m. More...;  ; constexpr Mat< L, C, Real > operator+ (const Mat< L, C, Real > &m) c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:4578,Security,access,access,4578,") const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose of m. More...;  ; constexpr Mat< L, C, Real > operator+ (const Mat< L, C, Real > &m) const noexcept;  Matrix addition operator. More...;  ; constexpr Mat< L, C, Real > operat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:4666,Security,access,access,4666,"(Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose of m. More...;  ; constexpr Mat< L, C, Real > operator+ (const Mat< L, C, Real > &m) const noexcept;  Matrix addition operator. More...;  ; constexpr Mat< L, C, Real > operator- (const Mat< L, C, Real > &m) const noexcept;  Matrix subtraction operator. More...; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:4753,Security,access,access,4753,"Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose of m. More...;  ; constexpr Mat< L, C, Real > operator+ (const Mat< L, C, Real > &m) const noexcept;  Matrix addition operator. More...;  ; constexpr Mat< L, C, Real > operator- (const Mat< L, C, Real > &m) const noexcept;  Matrix subtraction operator. More...;  ; constexpr Mat< L, C, Real > operator- () const noexcept;  Matrix negation operator. ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:4840,Security,access,access,4840,"ore...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose of m. More...;  ; constexpr Mat< L, C, Real > operator+ (const Mat< L, C, Real > &m) const noexcept;  Matrix addition operator. More...;  ; constexpr Mat< L, C, Real > operator- (const Mat< L, C, Real > &m) const noexcept;  Matrix subtraction operator. More...;  ; constexpr Mat< L, C, Real > operator- () const noexcept;  Matrix negation operator. More...;  ; constexpr Col operator* (const Line &v) const noexcept;  Multiplication ope",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:4928,Security,access,access,4928,"of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose of m. More...;  ; constexpr Mat< L, C, Real > operator+ (const Mat< L, C, Real > &m) const noexcept;  Matrix addition operator. More...;  ; constexpr Mat< L, C, Real > operator- (const Mat< L, C, Real > &m) const noexcept;  Matrix subtraction operator. More...;  ; constexpr Mat< L, C, Real > operator- () const noexcept;  Matrix negation operator. More...;  ; constexpr Col operator* (const Line &v) const noexcept;  Multiplication operator Matrix * Line. More...;  ; constexpr Mat< L, C, Real > operator* (Real f) const no",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:2933,Usability,clear,clear,2933,"texpr Mat (const Mat< L2, C2, real2 > &m) noexcept;  Constructor from another matrix with different size (with null default entries and ignoring outside entries) More...;  ; constexpr Mat (const real2 *p) noexcept;  Constructor from an array of elements (stored per line). More...;  ; constexpr Size getNbLines () const;  number of lines More...;  ; constexpr Size getNbCols () const;  number of columns More...;  ; constexpr void operator= (const Real *p) noexcept;  Assignment from an array of elements (stored per line). More...;  ; constexpr void operator= (const Mat< L, C, real2 > &m) noexcept;  Assignment from another matrix. More...;  ; constexpr void operator= (const Mat< L2, C2, Real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, Real > &m) const noexcept;  ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, Real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_transposed_block-members.html:294,Modifiability,inherit,inherited,294,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BlockFullMatrix< N, T >::TransposedBlock Member List . This is the complete list of members for sofa::linearalgebra::BlockFullMatrix< N, T >::TransposedBlock, including all inherited members. msofa::linearalgebra::BlockFullMatrix< N, T >::TransposedBlock; operator*(const type::Vec< BSIZE, Real > &v)sofa::linearalgebra::BlockFullMatrix< N, T >::TransposedBlockinline; operator-() constsofa::linearalgebra::BlockFullMatrix< N, T >::TransposedBlockinline; TransposedBlock(const sofa::type::Mat< BSIZE, BSIZE, Real > &m_a)sofa::linearalgebra::BlockFullMatrix< N, T >::TransposedBlockinline. Generated on Mon Nov 11 2024 03:31:08 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_transposed_block-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_transposed_block-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector-members.html:252,Modifiability,inherit,inherited,252,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BlockVector< N, T > Member List . This is the complete list of members for sofa::linearalgebra::BlockVector< N, T >, including all inherited members. add(Index i, SReal v) overridesofa::linearalgebra::FullVector< T >inlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const float *src)sofa::linearalgebra::BaseVectorinlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const double *src)sofa::linearalgebra::BaseVectorinlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const int *src)sofa::linearalgebra::BaseVectorinlinevirtual; addDefaultImpl(Index i0, Index n, const T *src)sofa::linearalgebra::BaseVectorinlineprotected; allocsizesofa::linearalgebra::FullVector< T >protected; asub(Index bi, Index) constsofa::linearalgebra::BlockVector< N, T >; asub(Index bi, Index)sofa::linearalgebra::BlockVector< N, T >; begin()sofa::linearalgebra::FullVector< T >inline; begin() constsofa::linearalgebra::FullVector< T >inline; BlockVector()sofa::linearalgebra::BlockVector< N, T >; BlockVector(Index n)sofa::linearalgebra::BlockVector< N, T >explicit; capacity() constsofa::linearalgebra::FullVector< T >inline; checkIndex(Index n) constsofa::linearalgebra::FullVector< T >protected; clear() overridesofa::linearalgebra::FullVector< T >virtual; clear(Index dim) overridesofa::linearalgebra::FullVector< T >virtual; const_iterator typedefsofa::linearalgebra::BlockVector< N, T >; ConstIterator typedefsofa::linearalgebra::FullVector< T >; cursizesofa::linearalgebra::FullVector< T >protected; datasofa::linearalgebra::FullVector< T >protected; dot(const FullVector< Real > &a) constsofa::linearalgebra::FullVector< T >; element(Index i) const overridesofa::linearalgebra::FullVector< T >inlinevirtual; ELEMENT_FLOAT enum valuesofa::linearalgebra::BaseVector; ELEMENT_INT enum valuesofa::linearalgebra::BaseVector; ELEMENT_UNKNOWN ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector-members.html:3448,Modifiability,Inherit,Inherit,3448,,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector-members.html:1356,Usability,clear,clear,1356,"inearalgebra::BaseVector::add(Index i0, Index n, const float *src)sofa::linearalgebra::BaseVectorinlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const double *src)sofa::linearalgebra::BaseVectorinlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const int *src)sofa::linearalgebra::BaseVectorinlinevirtual; addDefaultImpl(Index i0, Index n, const T *src)sofa::linearalgebra::BaseVectorinlineprotected; allocsizesofa::linearalgebra::FullVector< T >protected; asub(Index bi, Index) constsofa::linearalgebra::BlockVector< N, T >; asub(Index bi, Index)sofa::linearalgebra::BlockVector< N, T >; begin()sofa::linearalgebra::FullVector< T >inline; begin() constsofa::linearalgebra::FullVector< T >inline; BlockVector()sofa::linearalgebra::BlockVector< N, T >; BlockVector(Index n)sofa::linearalgebra::BlockVector< N, T >explicit; capacity() constsofa::linearalgebra::FullVector< T >inline; checkIndex(Index n) constsofa::linearalgebra::FullVector< T >protected; clear() overridesofa::linearalgebra::FullVector< T >virtual; clear(Index dim) overridesofa::linearalgebra::FullVector< T >virtual; const_iterator typedefsofa::linearalgebra::BlockVector< N, T >; ConstIterator typedefsofa::linearalgebra::FullVector< T >; cursizesofa::linearalgebra::FullVector< T >protected; datasofa::linearalgebra::FullVector< T >protected; dot(const FullVector< Real > &a) constsofa::linearalgebra::FullVector< T >; element(Index i) const overridesofa::linearalgebra::FullVector< T >inlinevirtual; ELEMENT_FLOAT enum valuesofa::linearalgebra::BaseVector; ELEMENT_INT enum valuesofa::linearalgebra::BaseVector; ELEMENT_UNKNOWN enum valuesofa::linearalgebra::BaseVector; elements(Index i0, Index n, float *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, double *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, int *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elementsDefaultImpl(Index i0, Index n, T *b",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector-members.html:1417,Usability,clear,clear,1417,"*src)sofa::linearalgebra::BaseVectorinlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const double *src)sofa::linearalgebra::BaseVectorinlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const int *src)sofa::linearalgebra::BaseVectorinlinevirtual; addDefaultImpl(Index i0, Index n, const T *src)sofa::linearalgebra::BaseVectorinlineprotected; allocsizesofa::linearalgebra::FullVector< T >protected; asub(Index bi, Index) constsofa::linearalgebra::BlockVector< N, T >; asub(Index bi, Index)sofa::linearalgebra::BlockVector< N, T >; begin()sofa::linearalgebra::FullVector< T >inline; begin() constsofa::linearalgebra::FullVector< T >inline; BlockVector()sofa::linearalgebra::BlockVector< N, T >; BlockVector(Index n)sofa::linearalgebra::BlockVector< N, T >explicit; capacity() constsofa::linearalgebra::FullVector< T >inline; checkIndex(Index n) constsofa::linearalgebra::FullVector< T >protected; clear() overridesofa::linearalgebra::FullVector< T >virtual; clear(Index dim) overridesofa::linearalgebra::FullVector< T >virtual; const_iterator typedefsofa::linearalgebra::BlockVector< N, T >; ConstIterator typedefsofa::linearalgebra::FullVector< T >; cursizesofa::linearalgebra::FullVector< T >protected; datasofa::linearalgebra::FullVector< T >protected; dot(const FullVector< Real > &a) constsofa::linearalgebra::FullVector< T >; element(Index i) const overridesofa::linearalgebra::FullVector< T >inlinevirtual; ELEMENT_FLOAT enum valuesofa::linearalgebra::BaseVector; ELEMENT_INT enum valuesofa::linearalgebra::BaseVector; ELEMENT_UNKNOWN enum valuesofa::linearalgebra::BaseVector; elements(Index i0, Index n, float *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, double *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, int *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elementsDefaultImpl(Index i0, Index n, T *buffer) constsofa::linearalgebra::BaseVectorinlineprotected; E",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html:308,Modifiability,Inherit,Inheritance,308,"﻿. SOFA API: sofa::linearalgebra::BlockVector< N, T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Member Functions |; List of all members . sofa::linearalgebra::BlockVector< N, T > Class Template Reference . #include <BlockVector.h>. Inheritance diagram for sofa::linearalgebra::BlockVector< N, T >:. [legend]. Classes; class  Block;  . Public Member Functions;  BlockVector ();  ;  BlockVector (Index n);  ; virtual ~BlockVector ();  ; const Block & sub (Index i, Index) const;  ; Block & sub (Index i, Index);  ; const Block & asub (Index bi, Index) const;  ; Block & asub (Index bi, Index);  ;  Public Member Functions inherited from sofa::linearalgebra::FullVector< T >;  FullVector ();  ;  FullVector (const FullVector &vect);  ;  FullVector (Index n);  ;  FullVector (T *ptr, Index n);  ;  FullVector (T *ptr, Index n, Index nmax);  ;  ~FullVector () override;  ; T * ptr ();  ; const T * ptr () const;  ; void setptr (T *p);  ; Index capacity () const;  ; Iterator begin ();  ; Iterator end ();  ; ConstIterator begin () const;  ; ConstIterator end () const;  ; void fastResize (Index dim);  ; void resize (Index dim) override;  Resize the vector, and reset all values to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void swap (FullVector< T > &v);  ; void clear (Index dim) override;  Reset the value of element i to 0. More...;  ; T & operator[] (Index i);  ; const T & operator[] (Index i) const;  ; SReal element (Index i) const override;  Read the value of element i. More...;  ; void set (Index i, SReal v) override;  Write the value of element i. More...;  ; void add (Index i, SReal v) override;  Add v to the existing value of element i. More...;  ; Index size () const override;  Number of elements. More...;  ; FullVector< T > sub (Index i, Index n);  ; template<class TV > ; void getsub (Index i, Index n, TV &v);  ; template<class TV > ; void setsub (Index i, Index n, const TV",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html:696,Modifiability,inherit,inherited,696,"﻿. SOFA API: sofa::linearalgebra::BlockVector< N, T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Member Functions |; List of all members . sofa::linearalgebra::BlockVector< N, T > Class Template Reference . #include <BlockVector.h>. Inheritance diagram for sofa::linearalgebra::BlockVector< N, T >:. [legend]. Classes; class  Block;  . Public Member Functions;  BlockVector ();  ;  BlockVector (Index n);  ; virtual ~BlockVector ();  ; const Block & sub (Index i, Index) const;  ; Block & sub (Index i, Index);  ; const Block & asub (Index bi, Index) const;  ; Block & asub (Index bi, Index);  ;  Public Member Functions inherited from sofa::linearalgebra::FullVector< T >;  FullVector ();  ;  FullVector (const FullVector &vect);  ;  FullVector (Index n);  ;  FullVector (T *ptr, Index n);  ;  FullVector (T *ptr, Index n, Index nmax);  ;  ~FullVector () override;  ; T * ptr ();  ; const T * ptr () const;  ; void setptr (T *p);  ; Index capacity () const;  ; Iterator begin ();  ; Iterator end ();  ; ConstIterator begin () const;  ; ConstIterator end () const;  ; void fastResize (Index dim);  ; void resize (Index dim) override;  Resize the vector, and reset all values to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void swap (FullVector< T > &v);  ; void clear (Index dim) override;  Reset the value of element i to 0. More...;  ; T & operator[] (Index i);  ; const T & operator[] (Index i) const;  ; SReal element (Index i) const override;  Read the value of element i. More...;  ; void set (Index i, SReal v) override;  Write the value of element i. More...;  ; void add (Index i, SReal v) override;  Add v to the existing value of element i. More...;  ; Index size () const override;  Number of elements. More...;  ; FullVector< T > sub (Index i, Index n);  ; template<class TV > ; void getsub (Index i, Index n, TV &v);  ; template<class TV > ; void setsub (Index i, Index n, const TV",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html:2624,Modifiability,inherit,inherited,2624,"v to the existing value of element i. More...;  ; Index size () const override;  Number of elements. More...;  ; FullVector< T > sub (Index i, Index n);  ; template<class TV > ; void getsub (Index i, Index n, TV &v);  ; template<class TV > ; void setsub (Index i, Index n, const TV &v);  ; void operator= (const FullVector< T > &a);  v = a More...;  ; void operator= (const T &a);  ; void operator+= (const FullVector< Real > &a);  v += a More...;  ; void operator-= (const FullVector< Real > &a);  v -= a More...;  ; void eq (const FullVector< Real > &a, Real f);  v = a*f More...;  ; void eq (const FullVector< Real > &a, const FullVector< Real > &b, Real f=1.0);  v = a+b*f More...;  ; void peq (const FullVector< Real > &a, Real f);  v += a*f More...;  ; void operator*= (Real f);  v *= f More...;  ; Real dot (const FullVector< Real > &a) const;  ; double norm () const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseVector; virtual ~BaseVector ();  ; virtual const float * elements (Index i0, Index n, float *src) const;  Get the values of n elements, starting at element i0, into given float buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual const double * elements (Index i0, Index n, double *src) const;  Get the values of n elements, starting at element i0, into given double buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual const int * elements (Index i0, Index n, int *src) const;  Get the values of n elements, starting at element i0, into given int buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual void set (Index i0, Index n, const float *src);  Write the values of n float elements, starting at element i0. More...;  ; virtual void set (Index i0, Index n, const double *src);  Write the values of n double elements, starting at element i0. More...;  ; virtual void set (Index i0, Index n, const int *src);  W",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html:4439,Modifiability,Inherit,Inherited,4439,"..;  ; virtual void add (Index i0, Index n, const float *src);  Add to the values of n float elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const double *src);  Add to the values of n double elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const int *src);  Add to the values of n int elements, starting at element i0. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual bool isFull () const;  Return true if this vector is full, i.a. all elements are stored in memory. More...;  ; bool isSparse () const;  . Additional Inherited Members;  Protected Attributes inherited from sofa::linearalgebra::FullVector< T >; T * data;  ; Index cursize;  ; Index allocsize;  ;  Static Public Member Functions inherited from sofa::linearalgebra::FullVector< T >; static const char * Name ();  ;  Protected Member Functions inherited from sofa::linearalgebra::FullVector< T >; void checkIndex (Index n) const;  ;  Protected Member Functions inherited from sofa::linearalgebra::BaseVector; template<class T > ; const T * elementsDefaultImpl (Index i0, Index n, T *buffer) const;  ; template<class T > ; void setDefaultImpl (Index i0, Index n, const T *src);  ; template<class T > ; void addDefaultImpl (Index i0, Index n, const T *src);  . Constructor details. ◆ BlockVector() [1/2]. template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::BlockVector. ◆ BlockVector() [2/2]. template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::BlockVector ; (; Index ; n). explicit . ◆ ~BlockVector(). template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::~BlockVector. virtual . Function details. ◆ asub() [1/2]. template<std::size_t N, typename T > . BlockVector< N, T >::Block & sofa::linearalgebra::BlockVector< N, T >::asub ; (; Index ; bi, . Index ;  . ). ◆ asub() [2/2]. template<std::size_t N, typename T > .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html:4480,Modifiability,inherit,inherited,4480,"..;  ; virtual void add (Index i0, Index n, const float *src);  Add to the values of n float elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const double *src);  Add to the values of n double elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const int *src);  Add to the values of n int elements, starting at element i0. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual bool isFull () const;  Return true if this vector is full, i.a. all elements are stored in memory. More...;  ; bool isSparse () const;  . Additional Inherited Members;  Protected Attributes inherited from sofa::linearalgebra::FullVector< T >; T * data;  ; Index cursize;  ; Index allocsize;  ;  Static Public Member Functions inherited from sofa::linearalgebra::FullVector< T >; static const char * Name ();  ;  Protected Member Functions inherited from sofa::linearalgebra::FullVector< T >; void checkIndex (Index n) const;  ;  Protected Member Functions inherited from sofa::linearalgebra::BaseVector; template<class T > ; const T * elementsDefaultImpl (Index i0, Index n, T *buffer) const;  ; template<class T > ; void setDefaultImpl (Index i0, Index n, const T *src);  ; template<class T > ; void addDefaultImpl (Index i0, Index n, const T *src);  . Constructor details. ◆ BlockVector() [1/2]. template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::BlockVector. ◆ BlockVector() [2/2]. template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::BlockVector ; (; Index ; n). explicit . ◆ ~BlockVector(). template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::~BlockVector. virtual . Function details. ◆ asub() [1/2]. template<std::size_t N, typename T > . BlockVector< N, T >::Block & sofa::linearalgebra::BlockVector< N, T >::asub ; (; Index ; bi, . Index ;  . ). ◆ asub() [2/2]. template<std::size_t N, typename T > .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html:4616,Modifiability,inherit,inherited,4616,"..;  ; virtual void add (Index i0, Index n, const float *src);  Add to the values of n float elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const double *src);  Add to the values of n double elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const int *src);  Add to the values of n int elements, starting at element i0. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual bool isFull () const;  Return true if this vector is full, i.a. all elements are stored in memory. More...;  ; bool isSparse () const;  . Additional Inherited Members;  Protected Attributes inherited from sofa::linearalgebra::FullVector< T >; T * data;  ; Index cursize;  ; Index allocsize;  ;  Static Public Member Functions inherited from sofa::linearalgebra::FullVector< T >; static const char * Name ();  ;  Protected Member Functions inherited from sofa::linearalgebra::FullVector< T >; void checkIndex (Index n) const;  ;  Protected Member Functions inherited from sofa::linearalgebra::BaseVector; template<class T > ; const T * elementsDefaultImpl (Index i0, Index n, T *buffer) const;  ; template<class T > ; void setDefaultImpl (Index i0, Index n, const T *src);  ; template<class T > ; void addDefaultImpl (Index i0, Index n, const T *src);  . Constructor details. ◆ BlockVector() [1/2]. template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::BlockVector. ◆ BlockVector() [2/2]. template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::BlockVector ; (; Index ; n). explicit . ◆ ~BlockVector(). template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::~BlockVector. virtual . Function details. ◆ asub() [1/2]. template<std::size_t N, typename T > . BlockVector< N, T >::Block & sofa::linearalgebra::BlockVector< N, T >::asub ; (; Index ; bi, . Index ;  . ). ◆ asub() [2/2]. template<std::size_t N, typename T > .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html:4729,Modifiability,inherit,inherited,4729,"..;  ; virtual void add (Index i0, Index n, const float *src);  Add to the values of n float elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const double *src);  Add to the values of n double elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const int *src);  Add to the values of n int elements, starting at element i0. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual bool isFull () const;  Return true if this vector is full, i.a. all elements are stored in memory. More...;  ; bool isSparse () const;  . Additional Inherited Members;  Protected Attributes inherited from sofa::linearalgebra::FullVector< T >; T * data;  ; Index cursize;  ; Index allocsize;  ;  Static Public Member Functions inherited from sofa::linearalgebra::FullVector< T >; static const char * Name ();  ;  Protected Member Functions inherited from sofa::linearalgebra::FullVector< T >; void checkIndex (Index n) const;  ;  Protected Member Functions inherited from sofa::linearalgebra::BaseVector; template<class T > ; const T * elementsDefaultImpl (Index i0, Index n, T *buffer) const;  ; template<class T > ; void setDefaultImpl (Index i0, Index n, const T *src);  ; template<class T > ; void addDefaultImpl (Index i0, Index n, const T *src);  . Constructor details. ◆ BlockVector() [1/2]. template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::BlockVector. ◆ BlockVector() [2/2]. template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::BlockVector ; (; Index ; n). explicit . ◆ ~BlockVector(). template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::~BlockVector. virtual . Function details. ◆ asub() [1/2]. template<std::size_t N, typename T > . BlockVector< N, T >::Block & sofa::linearalgebra::BlockVector< N, T >::asub ; (; Index ; bi, . Index ;  . ). ◆ asub() [2/2]. template<std::size_t N, typename T > .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html:4846,Modifiability,inherit,inherited,4846,"..;  ; virtual void add (Index i0, Index n, const float *src);  Add to the values of n float elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const double *src);  Add to the values of n double elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const int *src);  Add to the values of n int elements, starting at element i0. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual bool isFull () const;  Return true if this vector is full, i.a. all elements are stored in memory. More...;  ; bool isSparse () const;  . Additional Inherited Members;  Protected Attributes inherited from sofa::linearalgebra::FullVector< T >; T * data;  ; Index cursize;  ; Index allocsize;  ;  Static Public Member Functions inherited from sofa::linearalgebra::FullVector< T >; static const char * Name ();  ;  Protected Member Functions inherited from sofa::linearalgebra::FullVector< T >; void checkIndex (Index n) const;  ;  Protected Member Functions inherited from sofa::linearalgebra::BaseVector; template<class T > ; const T * elementsDefaultImpl (Index i0, Index n, T *buffer) const;  ; template<class T > ; void setDefaultImpl (Index i0, Index n, const T *src);  ; template<class T > ; void addDefaultImpl (Index i0, Index n, const T *src);  . Constructor details. ◆ BlockVector() [1/2]. template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::BlockVector. ◆ BlockVector() [2/2]. template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::BlockVector ; (; Index ; n). explicit . ◆ ~BlockVector(). template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::~BlockVector. virtual . Function details. ◆ asub() [1/2]. template<std::size_t N, typename T > . BlockVector< N, T >::Block & sofa::linearalgebra::BlockVector< N, T >::asub ; (; Index ; bi, . Index ;  . ). ◆ asub() [2/2]. template<std::size_t N, typename T > .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html:1273,Usability,clear,clear,1273,"e <BlockVector.h>. Inheritance diagram for sofa::linearalgebra::BlockVector< N, T >:. [legend]. Classes; class  Block;  . Public Member Functions;  BlockVector ();  ;  BlockVector (Index n);  ; virtual ~BlockVector ();  ; const Block & sub (Index i, Index) const;  ; Block & sub (Index i, Index);  ; const Block & asub (Index bi, Index) const;  ; Block & asub (Index bi, Index);  ;  Public Member Functions inherited from sofa::linearalgebra::FullVector< T >;  FullVector ();  ;  FullVector (const FullVector &vect);  ;  FullVector (Index n);  ;  FullVector (T *ptr, Index n);  ;  FullVector (T *ptr, Index n, Index nmax);  ;  ~FullVector () override;  ; T * ptr ();  ; const T * ptr () const;  ; void setptr (T *p);  ; Index capacity () const;  ; Iterator begin ();  ; Iterator end ();  ; ConstIterator begin () const;  ; ConstIterator end () const;  ; void fastResize (Index dim);  ; void resize (Index dim) override;  Resize the vector, and reset all values to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void swap (FullVector< T > &v);  ; void clear (Index dim) override;  Reset the value of element i to 0. More...;  ; T & operator[] (Index i);  ; const T & operator[] (Index i) const;  ; SReal element (Index i) const override;  Read the value of element i. More...;  ; void set (Index i, SReal v) override;  Write the value of element i. More...;  ; void add (Index i, SReal v) override;  Add v to the existing value of element i. More...;  ; Index size () const override;  Number of elements. More...;  ; FullVector< T > sub (Index i, Index n);  ; template<class TV > ; void getsub (Index i, Index n, TV &v);  ; template<class TV > ; void setsub (Index i, Index n, const TV &v);  ; void operator= (const FullVector< T > &a);  v = a More...;  ; void operator= (const T &a);  ; void operator+= (const FullVector< Real > &a);  v += a More...;  ; void operator-= (const FullVector< Real > &a);  v -= a More...;  ; void eq (const FullVector< Real > &a, Real f);  v =",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html
