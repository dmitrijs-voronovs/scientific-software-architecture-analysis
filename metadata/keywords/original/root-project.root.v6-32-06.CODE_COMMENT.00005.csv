id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update progress bar and status labels.; /// Use ""processed == total"" or ""processed < 0"" to indicate end of processing.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressDialog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:93,Usability,progress bar,progress bar,93,"////////////////////////////////////////////////////////////////////////////////; /// Update progress bar and status labels.; /// Use ""processed == total"" or ""processed < 0"" to indicate end of processing.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressDialog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:3,Deployability,Update,Update,3,"// Update title",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressDialog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:14,Deployability,update,update,14,"// Nothing to update",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressDialog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:3,Deployability,Update,Update,3,"// Update position",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressDialog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update progress bar and status labels.; /// Use ""processed == total"" or ""processed < 0"" to indicate end of processing.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressDialog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:93,Usability,progress bar,progress bar,93,"////////////////////////////////////////////////////////////////////////////////; /// Update progress bar and status labels.; /// Use ""processed == total"" or ""processed < 0"" to indicate end of processing.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressDialog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:3,Deployability,Update,Update,3,"// Update title",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressDialog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:14,Deployability,update,update,14,"// Nothing to update",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressDialog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:3,Deployability,Update,Update,3,"// Update position",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressDialog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:3,Deployability,Update,Update,3,"// Update average rates",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressDialog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load/append a log msg in the log frame, if open",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressDialog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:100,Testability,log,log,100,"////////////////////////////////////////////////////////////////////////////////; /// Load/append a log msg in the log frame, if open",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressDialog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:115,Testability,log,log,115,"////////////////////////////////////////////////////////////////////////////////; /// Load/append a log msg in the log frame, if open",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressDialog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:3,Performance,load,load,3,"// load buffer",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressDialog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:108,Testability,log,logs,108,"////////////////////////////////////////////////////////////////////////////////; /// Ask proof session for logs",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressDialog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:3,Usability,Clear,Clear,3,"// Clear window",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressDialog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:98,Deployability,toggle,toggle,98,"////////////////////////////////////////////////////////////////////////////////; /// Handle keep toggle button.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressDialog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:116,Deployability,toggle,toggle,116,"////////////////////////////////////////////////////////////////////////////////; /// Handle log-current-query-only toggle button.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressDialog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:93,Testability,log,log-current-query-only,93,"////////////////////////////////////////////////////////////////////////////////; /// Handle log-current-query-only toggle button.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressDialog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:3,Usability,Clear,Clear,3,"// Clear window",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressDialog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:10,Testability,log,log,10,"// If the log element has been retrieved at least once",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:10,Testability,log,log,10,// If the log element is active by default; /** \class TProofProgressLog; \ingroup sessionviewer. Dialog used to display Proof session logs from the Proof progress; dialog.; It uses TProofMgr::GetSessionLogs() mechanism internally. */,MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:135,Testability,log,logs,135,// If the log element is active by default; /** \class TProofProgressLog; \ingroup sessionviewer. Dialog used to display Proof session logs from the Proof progress; dialog.; It uses TProofMgr::GetSessionLogs() mechanism internally. */,MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:116,Integrability,message,messages,116,"////////////////////////////////////////////////////////////////////////////////; /// Create a window frame for log messages.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:112,Testability,log,log,112,"////////////////////////////////////////////////////////////////////////////////; /// Create a window frame for log messages.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:116,Integrability,message,messages,116,"////////////////////////////////////////////////////////////////////////////////; /// Create a window frame for log messages.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:112,Testability,log,log,112,"////////////////////////////////////////////////////////////////////////////////; /// Create a window frame for log messages.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:112,Integrability,message,messages,112,"////////////////////////////////////////////////////////////////////////////////; /// Init window frame for log messages.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:108,Testability,log,log,108,"////////////////////////////////////////////////////////////////////////////////; /// Init window frame for log messages.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:16,Usability,Clear,ClearAll,16,"//The SelectAll/ClearAll buttons",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:66,Integrability,message,messages,66,"// fRawLines->SetToolTipText(""Retrieve all type of lines, service messages included"");; // fRawLines->SetState(kButtonUp);; // vlines_buttons->AddFrame(fRawLines, new TGLayoutHints(kLHintsCenterY | kLHintsLeft, 2, 2, 2, 2));; //; // Add frames to the global picture; //",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:15,Testability,log,log,15,"// Cleanup the log object",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:91,Testability,log,log,91,"////////////////////////////////////////////////////////////////////////////////; /// Show log window.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:92,Testability,log,log,92,"////////////////////////////////////////////////////////////////////////////////; /// Clear log window.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear log window.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load a text buffer in the window.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load a file in the window.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:135,Testability,log,logs,135,"////////////////////////////////////////////////////////////////////////////////; /// Build the list of workers. For this, extract the logs and take the names; /// of TProofLogElements",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:94,Testability,log,logs,94,"////////////////////////////////////////////////////////////////////////////////; /// Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; /// 'Filter' button.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:18,Security,sanitiz,sanitize,18,"// Not a command: sanitize string",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:3,Security,sanitiz,sanitized,3,"// sanitized",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load/append a log msg in the log frame, if open",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:100,Testability,log,log,100,"////////////////////////////////////////////////////////////////////////////////; /// Load/append a log msg in the log frame, if open",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:115,Testability,log,log,115,"////////////////////////////////////////////////////////////////////////////////; /// Load/append a log msg in the log frame, if open",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:3,Performance,load,load,3,"// load buffer",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:94,Testability,log,logs,94,"////////////////////////////////////////////////////////////////////////////////; ///Save the logs to a file; ///Only the name of the file is taken, no expansion",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:43,Testability,log,log,43,"// File name: the default is <session-tag>.log",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:107,Usability,clear,clear,107,"////////////////////////////////////////////////////////////////////////////////; ///actions of select all/clear all button",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:98,Testability,log,log,98,"////////////////////////////////////////////////////////////////////////////////; /// Rebuild the log info for a new entered session",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressLog.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx:16,Usability,Clear,ClearAll,16,"//The SelectAll/ClearAll button",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressMemoryPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx:135,Testability,log,logs,135,"////////////////////////////////////////////////////////////////////////////////; /// Build the list of workers. For this, extract the logs and take the names; /// of TProofLogElements",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressMemoryPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear the canvases",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressMemoryPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx:109,Testability,log,logs,109,"////////////////////////////////////////////////////////////////////////////////; /// Draw the plot from the logs",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressMemoryPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx:24,Testability,log,log,24,"//a master or submaster log; //display without meaningful labels for now",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressMemoryPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx:18,Testability,log,log,18,"//skip the master log",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressMemoryPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx:100,Energy Efficiency,consumption,consumption,100,"////////////////////////////////////////////////////////////////////////////////; /// Make a memory consumption graph for a worker",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressMemoryPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx:6,Testability,log,log,6,"//the log is empty so far",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressMemoryPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx:108,Testability,log,log,108,"////////////////////////////////////////////////////////////////////////////////; /// a master or submaster log; /// display without meaningful labels for now",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressMemoryPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx:107,Usability,clear,clear,107,"////////////////////////////////////////////////////////////////////////////////; ///actions of select all/clear all button",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TProofProgressMemoryPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx:608,Availability,avail,available,608,"// @(#)root/sessionviewer:$Id$; // Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005; /*************************************************************************; * Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TSessionDialogs; \ingroup sessionviewer. This file defines several dialogs that are used by TSessionViewer.; The following dialogs are available: TNewChainDlg and TNewQueryDlg. */",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionDialogs.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update Memory list view.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionDialogs.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx:94,Integrability,message,messages,94,"////////////////////////////////////////////////////////////////////////////////; /// Process messages for new chain dialog.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionDialogs.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx:20,Deployability,update,update,20,"// if in edit mode, update fields with query description data",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionDialogs.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx:114,Deployability,update,update,114,"////////////////////////////////////////////////////////////////////////////////; /// Show/hide options frame and update button text accordingly.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionDialogs.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx:3,Deployability,update,update,3,"// update query description fields",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionDialogs.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx:32,Deployability,update,update,32,"// else if in editor mode, just update user data with modified; // query description",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionDialogs.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx:3,Deployability,update,update,3,"// update list tree",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionDialogs.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx:109,Deployability,update,update,109,"////////////////////////////////////////////////////////////////////////////////; /// Settings have changed, update GUI accordingly.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionDialogs.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update entry fields with query description values.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionDialogs.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx:94,Integrability,message,messages,94,"////////////////////////////////////////////////////////////////////////////////; /// Process messages for new query dialog.; /// Essentially used to navigate between text entry fields.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionDialogs.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx:94,Integrability,message,messages,94,"////////////////////////////////////////////////////////////////////////////////; /// Process messages for upload dataset dialog.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionDialogs.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx:3,Usability,Clear,Clear,3,"// Clear button",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionDialogs.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx:3,Deployability,update,update,3,"// update list view",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionDialogs.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx:3,Deployability,update,update,3,"// update list view",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionDialogs.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear content of the list view.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionDialogs.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx:3,Deployability,update,update,3,"// update list view",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionDialogs.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx:3,Deployability,update,update,3,"// update list view",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionDialogs.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx:36,Deployability,update,update,36,"// GG 17/8/2012 -- END; // finally, update list of datasets in session viewer",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionDialogs.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionLogView.cxx:83,Testability,log,logs,83,/** \class TSessionLogView; \ingroup sessionviewer. Dialog used to display session logs from the session viewer. */,MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionLogView.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionLogView.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionLogView.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load a text buffer in the editor.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionLogView.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionLogView.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionLogView.cxx:92,Testability,log,log,92,"////////////////////////////////////////////////////////////////////////////////; /// Clear log window.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionLogView.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionLogView.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionLogView.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear log window.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionLogView.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionLogView.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionLogView.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load a text buffer in the editor.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionLogView.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionLogView.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionLogView.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load a file in the editor.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionLogView.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionLogView.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:99,Deployability,configurat,configuration,99,"////////////////////////////////////////////////////////////////////////////////; /// Build server configuration frame.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:99,Modifiability,config,configuration,99,"////////////////////////////////////////////////////////////////////////////////; /// Build server configuration frame.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:109,Deployability,update,update,109,"////////////////////////////////////////////////////////////////////////////////; /// Settings have changed, update GUI accordingly.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:93,Security,expose,expose,93,"////////////////////////////////////////////////////////////////////////////////; /// Handle expose event in server frame.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:93,Deployability,configurat,configuration,93,"////////////////////////////////////////////////////////////////////////////////; /// Browse configuration files.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:93,Modifiability,config,configuration,93,"////////////////////////////////////////////////////////////////////////////////; /// Browse configuration files.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:110,Deployability,configurat,configuration,110,"////////////////////////////////////////////////////////////////////////////////; /// Delete selected session configuration (remove it from the list).",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:110,Modifiability,config,configuration,110,"////////////////////////////////////////////////////////////////////////////////; /// Delete selected session configuration (remove it from the list).",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Deployability,update,update,3,"// update configuration file",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:10,Deployability,configurat,configuration,10,"// update configuration file",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:10,Modifiability,config,configuration,10,"// update configuration file",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Safety,avoid,avoid,3,"// avoid input events in list tree while connecting",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:22,Usability,progress bar,progress bar,22,"// display connection progress bar in first part of status bar",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:40,Deployability,update,update,40,"// connect to proof startup message (to update progress bar)",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:28,Integrability,message,message,28,"// connect to proof startup message (to update progress bar)",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:47,Usability,progress bar,progress bar,47,"// connect to proof startup message (to update progress bar)",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:22,Deployability,configurat,configuration,22,"// collect and set-up configuration",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:22,Modifiability,config,configuration,22,"// collect and set-up configuration",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:22,Deployability,configurat,configuration,22,"// collect and set-up configuration",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:22,Modifiability,config,configuration,22,"// collect and set-up configuration",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:19,Usability,progress bar,progress bar,19,"// hide connection progress bar from status bar",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Deployability,release,release,3,"// release busy flag",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:18,Usability,feedback,feedback,18,"// browse list of feedback histos and check user's selected ones",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:11,Usability,feedback,feedback,11,"// connect feedback signal",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:6,Usability,feedback,feedback,6,"// if feedback option not selected, clear Proof's feedback option",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:36,Usability,clear,clear,36,"// if feedback option not selected, clear Proof's feedback option",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:50,Usability,feedback,feedback,50,"// if feedback option not selected, clear Proof's feedback option",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:7,Testability,log,log,7,"// set log level",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Deployability,update,update,3,"// update viewer",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:19,Usability,progress bar,progress bar,19,"// hide connection progress bar from status bar",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Deployability,release,release,3,"// release busy flag",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:99,Deployability,configurat,configuration,99,"////////////////////////////////////////////////////////////////////////////////; /// Reset server configuration fields.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:99,Modifiability,config,configuration,99,"////////////////////////////////////////////////////////////////////////////////; /// Reset server configuration fields.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:112,Deployability,configurat,configuration,112,"////////////////////////////////////////////////////////////////////////////////; /// Add newly created session configuration in the list of sessions.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:112,Modifiability,config,configuration,112,"////////////////////////////////////////////////////////////////////////////////; /// Add newly created session configuration in the list of sessions.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:29,Modifiability,config,config,29,"// add newly created session config to our session list",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:13,Deployability,configurat,configuration,13,"// save into configuration file",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:13,Modifiability,config,configuration,13,"// save into configuration file",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update fields with values from session description desc.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:94,Integrability,message,messages,94,"////////////////////////////////////////////////////////////////////////////////; /// Process messages for session server frame.; /// Used to navigate between text entry fields.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Deployability,configurat,configuration,3,"// configuration file",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Modifiability,config,configuration,3,"// configuration file",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Testability,log,log,3,"// log level",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:25,Usability,clear,clear,25,"// check box for option ""clear view""",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:7,Testability,Log,Log,7,"// add Log Level label and text entry",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update list of dataset present on the cluster.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:84,Energy Efficiency,adapt,adapted,84,"// ask for the list of datasets; // TODO: is now returning a TMap; viewer has to be adapted",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:84,Modifiability,adapt,adapted,84,"// ask for the list of datasets; // TODO: is now returning a TMap; viewer has to be adapted",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:101,Testability,log,log,101,"////////////////////////////////////////////////////////////////////////////////; /// Apply selected log level on current session.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:31,Testability,log,log,31,"// if valid Proof session, set log level",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update list of packages.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:36,Usability,clear,clear,36,"// if valid Proof session, disable (clear) packages",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear (disable) all packages in the current session.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:27,Usability,clear,clear,27,"// if valid Proof session, clear packages",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:127,Availability,down,down,127,"////////////////////////////////////////////////////////////////////////////////; /// Move selected package entry one position down in the list.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Deployability,update,update,3,"// update viewer",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:99,Testability,log,log,99,"////////////////////////////////////////////////////////////////////////////////; /// Show session log.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:15,Deployability,update,update,15,"// at the end, update list tree",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:17,Usability,clear,clear,17,"// if check box ""clear view"" is checked, open temp file in write mode; // (overwrite), in append mode otherwise.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:17,Usability,clear,clear,17,"// if check box ""clear view"" is checked, clear text view",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:41,Usability,clear,clear,41,"// if check box ""clear view"" is checked, clear text view",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Performance,load,load,3,"// load (display) temp file in text view",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:17,Usability,clear,clear,17,"// if check box ""clear view"" is checked, clear text view",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:41,Usability,clear,clear,41,"// if check box ""clear view"" is checked, clear text view",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Performance,load,load,3,"// load (display) temp file in text view",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Deployability,update,update,3,"// update viewer",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:114,Deployability,update,update,114,"////////////////////////////////////////////////////////////////////////////////; /// Show/hide options frame and update button text accordingly.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Deployability,update,update,3,"// update query description fields",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Deployability,update,update,3,"// update user data with modified query description",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Deployability,update,update,3,"// update list tree",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:109,Deployability,update,update,109,"////////////////////////////////////////////////////////////////////////////////; /// Settings have changed, update GUI accordingly.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update entry fields with query description values.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:44,Usability,feedback,feedback,44,"// new frame containing control buttons and feedback histos canvas",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Usability,feedback,feedback,3,"// feedback histos embedded canvas",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:2,Usability,progress bar,progress bar,2,"//progress bar",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:40,Testability,Log,Log,40,"// add ""Retrieve"", ""Finalize"" and ""Show Log"" buttons",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:147,Deployability,update,update,147,"////////////////////////////////////////////////////////////////////////////////; /// Feedback function connected to Feedback signal.; /// Used to update feedback histograms.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:86,Usability,Feedback,Feedback,86,"////////////////////////////////////////////////////////////////////////////////; /// Feedback function connected to Feedback signal.; /// Used to update feedback histograms.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:117,Usability,Feedback,Feedback,117,"////////////////////////////////////////////////////////////////////////////////; /// Feedback function connected to Feedback signal.; /// Used to update feedback histograms.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:154,Usability,feedback,feedback,154,"////////////////////////////////////////////////////////////////////////////////; /// Feedback function connected to Feedback signal.; /// Used to update feedback histograms.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:45,Deployability,update,update,45,"// if Proof sender match actual session one, update feedback histos",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:52,Usability,feedback,feedback,52,"// if Proof sender match actual session one, update feedback histos",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update feedback histograms.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:93,Usability,feedback,feedback,93,"////////////////////////////////////////////////////////////////////////////////; /// Update feedback histograms.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Deployability,update,update,3,"// update canvas",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update progress bar and status labels.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:93,Usability,progress bar,progress bar,93,"////////////////////////////////////////////////////////////////////////////////; /// Update progress bar and status labels.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Deployability,Update,Update,3,"// Update information at first call",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:37,Deployability,update,update,37,"// compute progress bar position and update",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:11,Usability,progress bar,progress bar,11,"// compute progress bar position and update",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Deployability,update,update,3,"// update status infos",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update progress bar and status labels.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:93,Usability,progress bar,progress bar,93,"////////////////////////////////////////////////////////////////////////////////; /// Update progress bar and status labels.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Deployability,Update,Update,3,"// Update information at first call",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:37,Deployability,update,update,37,"// compute progress bar position and update",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:11,Usability,progress bar,progress bar,11,"// compute progress bar position and update",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Deployability,update,update,3,"// update status infos",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Safety,Abort,Aborted,3,"// Aborted",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:97,Testability,log,log,97,"////////////////////////////////////////////////////////////////////////////////; /// Show query log.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Deployability,update,update,3,"// update list tree, query frame information, and buttons state",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:86,Safety,Abort,Abort,86,"////////////////////////////////////////////////////////////////////////////////; /// Abort processing query.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:6,Usability,feedback,feedback,6,"// if feedback option selected",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:18,Usability,feedback,feedback,18,"// browse list of feedback histos and check user's selected ones",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:11,Usability,feedback,feedback,11,"// connect feedback signal",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:6,Usability,feedback,feedback,6,"// if feedback option not selected, clear Proof's feedback option",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:36,Usability,clear,clear,36,"// if feedback option not selected, clear Proof's feedback option",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:50,Usability,feedback,feedback,50,"// if feedback option not selected, clear Proof's feedback option",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:29,Usability,feedback,feedback,29,"// local session case; // if feedback option selected",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:18,Usability,feedback,feedback,18,"// browse list of feedback histos and check user's selected ones",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Deployability,update,update,3,"// update buttons state",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update buttons state for the current query status.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update query information (header) text view.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:91,Deployability,configurat,configuration,91,"////////////////////////////////////////////////////////////////////////////////; /// Read configuration file and populate list of sessions; /// list of queries and list of packages.; /// Read and set also global options as feedback histos.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:91,Modifiability,config,configuration,91,"////////////////////////////////////////////////////////////////////////////////; /// Read configuration file and populate list of sessions; /// list of queries and list of packages.; /// Read and set also global options as feedback histos.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:224,Usability,feedback,feedback,224,"////////////////////////////////////////////////////////////////////////////////; /// Read configuration file and populate list of sessions; /// list of queries and list of packages.; /// Read and set also global options as feedback histos.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update list of existing Proof sessions.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Deployability,update,update,3,"// update session information frame",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update list of existing Proof sessions.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:98,Deployability,configurat,configuration,98,"////////////////////////////////////////////////////////////////////////////////; /// Save actual configuration in config file ""filename"".",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:98,Modifiability,config,configuration,98,"////////////////////////////////////////////////////////////////////////////////; /// Save actual configuration in config file ""filename"".",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:115,Modifiability,config,config,115,"////////////////////////////////////////////////////////////////////////////////; /// Save actual configuration in config file ""filename"".",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:18,Usability,feedback,feedback,18,"// browse list of feedback histos and check user's selected ones",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:18,Availability,avail,available,18,"// if description available, update server infos frame",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:29,Deployability,update,update,29,"// if description available, update server infos frame",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:14,Usability,progress bar,progress bar,14,"// connection progress bar",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Deployability,update,update,3,"// update server frame information",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:19,Deployability,update,update,19,"// if Proof valid, update connection infos",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Deployability,update,update,3,"// update session information frame",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Deployability,update,update,3,"// update query information and buttons state",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:12,Deployability,update,update,12,"// trick to update feedback histos",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:19,Usability,feedback,feedback,19,"// trick to update feedback histos",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Deployability,update,update,3,"// update input/output list views",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:19,Deployability,update,update,19,"// if Proof valid, update connection infos",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:111,Deployability,configurat,configuration,111,"////////////////////////////////////////////////////////////////////////////////; /// Terminate Session : save configuration, clean temporary files and close; /// Proof connections.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:111,Modifiability,config,configuration,111,"////////////////////////////////////////////////////////////////////////////////; /// Terminate Session : save configuration, clean temporary files and close; /// Proof connections.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:8,Deployability,configurat,configuration,8,"// Save configuration",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:8,Modifiability,config,configuration,8,"// Save configuration",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:8,Deployability,configurat,configuration,8,"// Save configuration",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:8,Modifiability,config,configuration,8,"// Save configuration",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:103,Testability,log,logo,103,"////////////////////////////////////////////////////////////////////////////////; /// Change the right logo (used for animation).",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load/append a log msg in the log frame.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:100,Testability,log,log,100,"////////////////////////////////////////////////////////////////////////////////; /// Load/append a log msg in the log frame.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:115,Testability,log,log,115,"////////////////////////////////////////////////////////////////////////////////; /// Load/append a log msg in the log frame.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Performance,load,load,3,"// load buffer",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Deployability,update,update,3,"// update list tree, query frame information, and buttons state",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Usability,clear,clear,3,"// clear the list of queries",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Deployability,update,update,3,"// update list tree",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Deployability,update,update,3,"// update list tree",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Usability,Clear,Clear,3,"// Clear window",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update the list of packages.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:23,Usability,Clear,Clear,23,"//fActDesc->fPackages->Clear();",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:18,Deployability,Update,UpdatePackages,18,"// fSessionFrame->UpdatePackages();",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Usability,Clear,Clear,3,"// Clear window",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:123,Testability,log,log,123,"////////////////////////////////////////////////////////////////////////////////; /// Display the content of the temporary log file for queryref; /// into a new text window.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Usability,Clear,Clear,3,"// Clear window",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:7,Testability,log,log,7,"// set log window position at the bottom of Session Viewer",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,Usability,Clear,Clear,3,"// Clear window",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:101,Integrability,message,message,101,"////////////////////////////////////////////////////////////////////////////////; /// Handle startup message (connection progress) coming from Proof session.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:113,Deployability,configurat,configuration,113,"////////////////////////////////////////////////////////////////////////////////; /// Handle feedback histograms configuration menu.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:113,Modifiability,config,configuration,113,"////////////////////////////////////////////////////////////////////////////////; /// Handle feedback histograms configuration menu.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:93,Usability,feedback,feedback,93,"////////////////////////////////////////////////////////////////////////////////; /// Handle feedback histograms configuration menu.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:45,Usability,feedback,feedback,45,"// divide stats canvas by number of selected feedback histos",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:18,Usability,feedback,feedback,18,"// browse list of feedback histos and check user's selected ones",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:6,Usability,feedback,feedback,6,"// if feedback option not selected, clear Proof's feedback option",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:36,Usability,clear,clear,36,"// if feedback option not selected, clear Proof's feedback option",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:50,Usability,feedback,feedback,50,"// if feedback option not selected, clear Proof's feedback option",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:13,Usability,feedback,feedback,13,"// loop over feedback histo list",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:32,Deployability,update,update,32,"// if actual query has results, update feedback histos",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:39,Usability,feedback,feedback,39,"// if actual query has results, update feedback histos",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:93,Integrability,message,messages,93,"////////////////////////////////////////////////////////////////////////////////; /// Handle messages send to the TSessionViewer object. E.g. all menu entries; /// messages.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:164,Integrability,message,messages,164,"////////////////////////////////////////////////////////////////////////////////; /// Handle messages send to the TSessionViewer object. E.g. all menu entries; /// messages.",MatchSource.CODE_COMMENT,gui/sessionviewer/src/TSessionViewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebDisplayArgs.hxx:174,Usability,Feedback,Feedback,174,"// Author: Sergey Linev <s.linev@gsi.de>; // Date: 2018-10-24; // Warning: This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,gui/webdisplay/inc/ROOT/RWebDisplayArgs.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebDisplayArgs.hxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebDisplayArgs.hxx:31,Testability,Log,Log,31,"// namespace Experimental; /// Log channel for WebGUI diagnostics.",MatchSource.CODE_COMMENT,gui/webdisplay/inc/ROOT/RWebDisplayArgs.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebDisplayArgs.hxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebDisplayArgs.hxx:12,Modifiability,config,configured,12,"/// returns configured browser kind, see EBrowserKind for supported values",MatchSource.CODE_COMMENT,gui/webdisplay/inc/ROOT/RWebDisplayArgs.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebDisplayArgs.hxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebDisplayHandle.hxx:174,Usability,Feedback,Feedback,174,"// Author: Sergey Linev <s.linev@gsi.de>; // Date: 2018-10-17; // Warning: This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,gui/webdisplay/inc/ROOT/RWebDisplayHandle.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebDisplayHandle.hxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebWindow.hxx:174,Usability,Feedback,Feedback,174,"// Author: Sergey Linev <s.linev@gsi.de>; // Date: 2017-10-16; // Warning: This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,gui/webdisplay/inc/ROOT/RWebWindow.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebWindow.hxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebWindow.hxx:249,Performance,perform,performed,249,"/// function signature for waiting call-backs; /// Such callback used when calling thread need to waits for some special data,; /// but wants to run application event loop; /// As argument, spent time in second will be provided; /// Waiting will be performed until function returns non-zero value",MatchSource.CODE_COMMENT,gui/webdisplay/inc/ROOT/RWebWindow.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebWindow.hxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebWindow.hxx:37,Performance,perform,performed,37,"///<! how many send operation can be performed without confirmation from other side",MatchSource.CODE_COMMENT,gui/webdisplay/inc/ROOT/RWebWindow.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebWindow.hxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebWindow.hxx:16,Performance,perform,performing,16,"///<! true when performing send operation",MatchSource.CODE_COMMENT,gui/webdisplay/inc/ROOT/RWebWindow.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebWindow.hxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebWindow.hxx:13,Performance,queue,queue,13,"///<! output queue",MatchSource.CODE_COMMENT,gui/webdisplay/inc/ROOT/RWebWindow.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebWindow.hxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebWindowsManager.hxx:174,Usability,Feedback,Feedback,174,"// Author: Sergey Linev <s.linev@gsi.de>; // Date: 2017-10-16; // Warning: This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,gui/webdisplay/inc/ROOT/RWebWindowsManager.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebWindowsManager.hxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebWindowsManager.hxx:6,Safety,timeout,timeout,6,"///<! timeout in seconds to start browser process, default 30s",MatchSource.CODE_COMMENT,gui/webdisplay/inc/ROOT/RWebWindowsManager.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebWindowsManager.hxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebWindowsManager.hxx:12,Safety,timeout,timeout,12,"/// Returns timeout for launching new browser process",MatchSource.CODE_COMMENT,gui/webdisplay/inc/ROOT/RWebWindowsManager.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebWindowsManager.hxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebWindowsManager.hxx:62,Availability,avail,available,62,"/// Returns http address of the server, empty string when not available",MatchSource.CODE_COMMENT,gui/webdisplay/inc/ROOT/RWebWindowsManager.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebWindowsManager.hxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayArgs.cxx:174,Usability,Feedback,Feedback,174,"// Author: Sergey Linev <s.linev@gsi.de>; // Date: 2018-10-24; // Warning: This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebDisplayArgs.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayArgs.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayArgs.cxx:284,Modifiability,config,configured,284,"/** \class ROOT::RWebDisplayArgs; \ingroup webdisplay. Holds different arguments for starting browser with RWebDisplayHandle::Display() method. */; ///////////////////////////////////////////////////////////////////////////////////////////; /// Default constructor.; /// Browser kind configured from gROOT->GetWebDisplay()",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebDisplayArgs.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayArgs.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayArgs.cxx:83,Modifiability,config,configured,83,"/////////////////////////////////////////////////////////////////////; /// Returns configured browser name",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebDisplayArgs.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayArgs.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayArgs.cxx:97,Modifiability,Config,Configure,97,"///////////////////////////////////////////////////////////////////////////////////////////; /// Configure custom web browser.; /// Either just name of browser which can be used like ""opera""; /// or full execution string which must includes $url like ""/usr/bin/opera $url""",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebDisplayArgs.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayArgs.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx:174,Usability,Feedback,Feedback,174,"// Author: Sergey Linev <s.linev@gsi.de>; // Date: 2018-10-17; // Warning: This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebDisplayHandle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx:94,Integrability,Depend,Depending,94,"/** \class ROOT::RWebDisplayHandle; \ingroup webdisplay. Handle of created web-based display; Depending from type of web display, holds handle of started browser process or other display-specific information; to correctly stop and cleanup display.; */; //////////////////////////////////////////////////////////////////////////////////////////////////; /// Static holder of registered creators of web displays",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebDisplayHandle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx:23,Usability,simpl,simplify,23,"// use UnixPathName to simplify handling of backslashes",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebDisplayHandle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx:8,Modifiability,sandbox,sandbox,8,"// --no-sandbox is required to run chrome with super-user, but only in headless mode",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebDisplayHandle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx:8,Testability,sandbox,sandbox,8,"// --no-sandbox is required to run chrome with super-user, but only in headless mode",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebDisplayHandle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx:17,Integrability,message,messages,17,"// allow to dump messages to std output",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebDisplayHandle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx:129,Modifiability,config,configured,129,"///////////////////////////////////////////////////////////////////////////////////////////////////; /// Display provided url in configured web browser; /// \param url - specified URL address like https://root.cern; /// Browser can specified when starting `root --web=firefox`; /// Returns true when browser started; /// It is convenience method, equivalent to:; /// ~~~; /// RWebDisplayArgs args;; /// args.SetUrl(url);; /// args.SetStandalone(false);; /// auto handle = RWebDisplayHandle::Display(args);; /// ~~~",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebDisplayHandle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx:115,Modifiability,config,configured,115,"///////////////////////////////////////////////////////////////////////////////////////////////////; /// Checks if configured browser can be used for image production",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebDisplayHandle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx:224,Modifiability,config,configured,224,"///////////////////////////////////////////////////////////////////////////////////////////////////; /// Returns true if image production for specified browser kind is supported; /// If browser not specified - use currently configured browser or try to test existing web browsers",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebDisplayHandle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx:253,Testability,test,test,253,"///////////////////////////////////////////////////////////////////////////////////////////////////; /// Returns true if image production for specified browser kind is supported; /// If browser not specified - use currently configured browser or try to test existing web browsers",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebDisplayHandle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx:105,Safety,Detect,Detect,105,"///////////////////////////////////////////////////////////////////////////////////////////////////; /// Detect image format; /// There is special handling of "".screenshot.pdf"" and "".screenshot.png"" extensions; /// Creation of such files relies on headless browser functionality and fully supported only by Chrome browser",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebDisplayHandle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx:166,Integrability,Depend,Depending,166,"///////////////////////////////////////////////////////////////////////////////////////////////////; /// Produce vector of file names for specified file pattern; /// Depending from supported file forma",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebDisplayHandle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx:66,Deployability,install,installation,66,"// When true, place HTML file into home directory; // Some Chrome installation do not allow run html code from files, created in /tmp directory",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebDisplayHandle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx:43,Safety,detect,detection,43,"// remove target image file - we use it as detection when chrome is ready",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebDisplayHandle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx:38,Modifiability,config,configures,38,"// chrome should have --dump-dom args configures",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebDisplayHandle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:174,Usability,Feedback,Feedback,174,"// Author: Sergey Linev <s.linev@gsi.de>; // Date: 2017-10-16; // Warning: This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:157,Modifiability,config,configured,157,"/** \class ROOT::RWebWindow; \ingroup webdisplay. Represents web window, which can be shown in web browser or any other supported environment. Window can be configured to run either in the normal or in the batch (headless) mode.; In second case no any graphical elements will be created. For the normal window one can configure geometry; (width and height), which are applied when window shown. Each window can be shown several times (if allowed) in different places - either as the; CEF (chromium embedded) window or in the standard web browser. When started, window will open and show; HTML page, configured with RWebWindow::SetDefaultPage() method. Typically (but not necessarily) clients open web socket connection to the window and one can exchange data,; using RWebWindow::Send() method and call-back function assigned via RWebWindow::SetDataCallBack(). */; //////////////////////////////////////////////////////////////////////////////////////////; /// RWebWindow constructor; /// Should be defined here because of std::unique_ptr<RWebWindowWSHandler>",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:318,Modifiability,config,configure,318,"/** \class ROOT::RWebWindow; \ingroup webdisplay. Represents web window, which can be shown in web browser or any other supported environment. Window can be configured to run either in the normal or in the batch (headless) mode.; In second case no any graphical elements will be created. For the normal window one can configure geometry; (width and height), which are applied when window shown. Each window can be shown several times (if allowed) in different places - either as the; CEF (chromium embedded) window or in the standard web browser. When started, window will open and show; HTML page, configured with RWebWindow::SetDefaultPage() method. Typically (but not necessarily) clients open web socket connection to the window and one can exchange data,; using RWebWindow::Send() method and call-back function assigned via RWebWindow::SetDataCallBack(). */; //////////////////////////////////////////////////////////////////////////////////////////; /// RWebWindow constructor; /// Should be defined here because of std::unique_ptr<RWebWindowWSHandler>",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:599,Modifiability,config,configured,599,"/** \class ROOT::RWebWindow; \ingroup webdisplay. Represents web window, which can be shown in web browser or any other supported environment. Window can be configured to run either in the normal or in the batch (headless) mode.; In second case no any graphical elements will be created. For the normal window one can configure geometry; (width and height), which are applied when window shown. Each window can be shown several times (if allowed) in different places - either as the; CEF (chromium embedded) window or in the standard web browser. When started, window will open and show; HTML page, configured with RWebWindow::SetDefaultPage() method. Typically (but not necessarily) clients open web socket connection to the window and one can exchange data,; using RWebWindow::Send() method and call-back function assigned via RWebWindow::SetDataCallBack(). */; //////////////////////////////////////////////////////////////////////////////////////////; /// RWebWindow constructor; /// Should be defined here because of std::unique_ptr<RWebWindowWSHandler>",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:8,Security,authenticat,authentication,8,"// does authentication key really required",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:3,Usability,clear,clear,3,"// clear connections vector under mutex",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:96,Modifiability,Config,Configure,96,"//////////////////////////////////////////////////////////////////////////////////////////; /// Configure window to show some of existing JSROOT panels; /// It uses ""file:rootui5sys/panel/panel.html"" as default HTML page; /// At the moment only FitPanel is existing",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:27,Security,access,access,27,"// use connection mutex to access hold request",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:12,Availability,error,error,12,"// indicate error if many same keys appears",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:12,Availability,error,error,12,"// indicate error if many same keys appears",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:114,Security,hash,hash,114,"//////////////////////////////////////////////////////////////////////////////////////////; /// Check if provided hash, ntry parameters from the connection request could be accepted; /// \param hash - provided hash value which should match with HMAC hash for generated before connection key; /// \param ntry - connection attempt number provided together with request, must come in increasing order; /// \param remote - boolean flag indicating if request comming from remote (via real http),; /// for local displays like Qt5 or CEF simpler connection rules are applied; /// \param test_first_time - true if hash/ntry tested for the first time, false appears only with; /// websocket when connection accepted by server",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:194,Security,hash,hash,194,"//////////////////////////////////////////////////////////////////////////////////////////; /// Check if provided hash, ntry parameters from the connection request could be accepted; /// \param hash - provided hash value which should match with HMAC hash for generated before connection key; /// \param ntry - connection attempt number provided together with request, must come in increasing order; /// \param remote - boolean flag indicating if request comming from remote (via real http),; /// for local displays like Qt5 or CEF simpler connection rules are applied; /// \param test_first_time - true if hash/ntry tested for the first time, false appears only with; /// websocket when connection accepted by server",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:210,Security,hash,hash,210,"//////////////////////////////////////////////////////////////////////////////////////////; /// Check if provided hash, ntry parameters from the connection request could be accepted; /// \param hash - provided hash value which should match with HMAC hash for generated before connection key; /// \param ntry - connection attempt number provided together with request, must come in increasing order; /// \param remote - boolean flag indicating if request comming from remote (via real http),; /// for local displays like Qt5 or CEF simpler connection rules are applied; /// \param test_first_time - true if hash/ntry tested for the first time, false appears only with; /// websocket when connection accepted by server",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:250,Security,hash,hash,250,"//////////////////////////////////////////////////////////////////////////////////////////; /// Check if provided hash, ntry parameters from the connection request could be accepted; /// \param hash - provided hash value which should match with HMAC hash for generated before connection key; /// \param ntry - connection attempt number provided together with request, must come in increasing order; /// \param remote - boolean flag indicating if request comming from remote (via real http),; /// for local displays like Qt5 or CEF simpler connection rules are applied; /// \param test_first_time - true if hash/ntry tested for the first time, false appears only with; /// websocket when connection accepted by server",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:606,Security,hash,hash,606,"//////////////////////////////////////////////////////////////////////////////////////////; /// Check if provided hash, ntry parameters from the connection request could be accepted; /// \param hash - provided hash value which should match with HMAC hash for generated before connection key; /// \param ntry - connection attempt number provided together with request, must come in increasing order; /// \param remote - boolean flag indicating if request comming from remote (via real http),; /// for local displays like Qt5 or CEF simpler connection rules are applied; /// \param test_first_time - true if hash/ntry tested for the first time, false appears only with; /// websocket when connection accepted by server",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:616,Testability,test,tested,616,"//////////////////////////////////////////////////////////////////////////////////////////; /// Check if provided hash, ntry parameters from the connection request could be accepted; /// \param hash - provided hash value which should match with HMAC hash for generated before connection key; /// \param ntry - connection attempt number provided together with request, must come in increasing order; /// \param remote - boolean flag indicating if request comming from remote (via real http),; /// for local displays like Qt5 or CEF simpler connection rules are applied; /// \param test_first_time - true if hash/ntry tested for the first time, false appears only with; /// websocket when connection accepted by server",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:531,Usability,simpl,simpler,531,"//////////////////////////////////////////////////////////////////////////////////////////; /// Check if provided hash, ntry parameters from the connection request could be accepted; /// \param hash - provided hash value which should match with HMAC hash for generated before connection key; /// \param ntry - connection attempt number provided together with request, must come in increasing order; /// \param remote - boolean flag indicating if request comming from remote (via real http),; /// for local displays like Qt5 or CEF simpler connection rules are applied; /// \param test_first_time - true if hash/ntry tested for the first time, false appears only with; /// websocket when connection accepted by server",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:24,Usability,simpl,simple,24,"// for local connection simple key can be used",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:61,Security,hash,hashed,61,"// this is indication of main in the middle, already checked hashed value was shown again!!!; // client sends id with increasing counter, if previous value is presented it is BAD",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:55,Security,hash,hash,55,"// remember counter, it should prevent trying previous hash values",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:18,Availability,error,error,18,"// this is rather error condition, should never happen",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:153,Safety,timeout,timeout,153,"//////////////////////////////////////////////////////////////////////////////////////////; /// Check if started process(es) establish connection. After timeout such processed will be killed; /// Method invoked from http server thread, therefore appropriate mutex must be used on all relevant data",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:19,Safety,timeout,timeout,19,"// introduce large timeout",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:79,Modifiability,Config,Configure,79,"/////////////////////////////////////////////////////////////////////////; /// Configure maximal number of allowed connections - 0 is unlimited; /// Will not affect already existing connections; /// Default is 1 - the only client is allowed",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:87,Modifiability,config,configured,87,"/////////////////////////////////////////////////////////////////////////; /// returns configured connections limit (0 - default)",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:79,Modifiability,Config,Configures,79,"/////////////////////////////////////////////////////////////////////////; /// Configures connection token (default none); /// When specified, in URL of webpage such token should be provided as &token=value parameter,; /// otherwise web window will refuse connection",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:87,Modifiability,config,configured,87,"/////////////////////////////////////////////////////////////////////////; /// Returns configured connection token",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:143,Safety,detect,detect,143,"// special workaround for local displays like qt5/qt6; // they are not disconnected regularly when page reload is invoked; // therefore try to detect if new key is applied",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:27,Safety,avoid,avoid,27,"// change connection id to avoid confusion",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:23,Safety,timeout,timeout,23,"// reset stamps, after timeout connection wll be removed",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:76,Integrability,message,messages,76,"// preserve key for longpoll or when with session key used for HMAC hash of messages; // conn->fKey.clear();",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:68,Security,hash,hash,68,"// preserve key for longpoll or when with session key used for HMAC hash of messages; // conn->fKey.clear();",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:100,Usability,clear,clear,100,"// preserve key for longpoll or when with session key used for HMAC hash of messages; // conn->fKey.clear();",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:27,Safety,avoid,avoid,27,"// change connection id to avoid confusion",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:23,Safety,timeout,timeout,23,"// reset stamps, after timeout connection wll be removed",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:50,Integrability,message,message,50,"// here start testing of HMAC in the begin of the message",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:14,Testability,test,testing,14,"// here start testing of HMAC in the begin of the message",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:22,Integrability,message,message,22,"// starting of normal message",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:51,Integrability,message,message,51,"// IMPORTANT: final place where integrity of input message is checked!",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:32,Security,integrity,integrity,32,"// IMPORTANT: final place where integrity of input message is checked!",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:20,Security,checksum,checksum,20,"// mismatch of HMAC checksum",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:46,Performance,perform,performed,46,"// here processing of received data should be performed; // this is task for the implemented windows",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:83,Integrability,message,message,83,"// remember connection; // record send event only for normal channel or very first message via ch0",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:135,Usability,Clear,Clear,135,"//////////////////////////////////////////////////////////////////////////////////////////; /// Complete websocket send operation; /// Clear ""doing send"" flag and check if next operation has to be started",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:194,Performance,perform,performed,194,"//////////////////////////////////////////////////////////////////////////////////////////; /// Checks if one should send data for specified connection; /// Returns true when send operation was performed",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:12,Security,checksum,checksum,12,"// add HMAC checksum for string send to client",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:3,Availability,failure,failure,3,"// failure, clear sending flag",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:12,Usability,clear,clear,12,"// failure, clear sending flag",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:240,Performance,perform,performed,240,"//////////////////////////////////////////////////////////////////////////////////////////; /// Checks if new data can be send (internal use only); /// If necessary, provide credits to the client; /// \param only_once if true, data sending performed once or until there is no data to send",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:292,Security,access,access,292,"///////////////////////////////////////////////////////////////////////////////////; /// DEPRECATED. Use GetUrl method instead while more arguments are required to connect with the widget; /// Returns relative URL address for the specified window; /// Address can be required if one needs to access data from one window into another window; /// Used for instance when inserting panel into canvas",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:233,Security,access,access,233,"///////////////////////////////////////////////////////////////////////////////////; /// DEPRECATED. Use GetUrl method instead while more arguments are required to connect with the widget; /// Address can be required if one needs to access data from one window into another window; /// Used for instance when inserting panel into canvas",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:188,Integrability,inject,injected,188,"/////////////////////////////////////////////////////////////////////////; /// Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript; /// This JSON code injected into main HTML document into connectWebWindow({}); /// Must be set before RWebWindow::Show() method is called; /// \param args - arbitrary JSON data which can be provided to client side",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:113,Security,access,accessible,113,"/////////////////////////////////////////////////////////////////////////; /// Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript; /// This JSON code injected into main HTML document into connectWebWindow({}); /// Must be set before RWebWindow::Show() method is called; /// \param args - arbitrary JSON data which can be provided to client side",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:188,Security,inject,injected,188,"/////////////////////////////////////////////////////////////////////////; /// Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript; /// This JSON code injected into main HTML document into connectWebWindow({}); /// Must be set before RWebWindow::Show() method is called; /// \param args - arbitrary JSON data which can be provided to client side",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:87,Modifiability,config,configured,87,"/////////////////////////////////////////////////////////////////////////; /// Returns configured user arguments for web window; /// See \ref SetUserArgs method for more details",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:135,Integrability,protocol,protocol,135,"///////////////////////////////////////////////////////////////////////////////////; /// Configures recording of communication data in protocol file; /// Provided filename will be used to store JSON array with names of written files - text or binary; /// If data was send from client, ""send"" entry will be placed. JSON file will look like:; ///; /// [""send"", ""msg0.txt"", ""send"", ""msg1.txt"", ""msg2.txt""]; ///; /// If empty file name is provided, data recording will be disabled; /// Recorded data can be used in JSROOT directly to test client code without running C++ server",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:89,Modifiability,Config,Configures,89,"///////////////////////////////////////////////////////////////////////////////////; /// Configures recording of communication data in protocol file; /// Provided filename will be used to store JSON array with names of written files - text or binary; /// If data was send from client, ""send"" entry will be placed. JSON file will look like:; ///; /// [""send"", ""msg0.txt"", ""send"", ""msg1.txt"", ""msg2.txt""]; ///; /// If empty file name is provided, data recording will be disabled; /// Recorded data can be used in JSROOT directly to test client code without running C++ server",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:530,Testability,test,test,530,"///////////////////////////////////////////////////////////////////////////////////; /// Configures recording of communication data in protocol file; /// Provided filename will be used to store JSON array with names of written files - text or binary; /// If data was send from client, ""send"" entry will be placed. JSON file will look like:; ///; /// [""send"", ""msg0.txt"", ""send"", ""msg1.txt"", ""msg2.txt""]; ///; /// If empty file name is provided, data recording will be disabled; /// Recorded data can be used in JSROOT directly to test client code without running C++ server",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:145,Performance,perform,performed,145,"///////////////////////////////////////////////////////////////////////////////////; /// Returns true if sending via specified connection can be performed; /// \param connid connection id, when 0 - all existing connections are checked; /// \param direct when true, checks if direct sending (without queuing) is possible",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:102,Performance,queue,queue,102,"///////////////////////////////////////////////////////////////////////////////////; /// Returns send queue length for specified connection; /// \param connid connection id, 0 - maximal value for all connections is returned; /// If wrong connection id specified, -1 is return",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:222,Integrability,message,message,222,"///////////////////////////////////////////////////////////////////////////////////; /// Internal method to send data; /// \param connid connection id, when 0 - data will be send to all connections; /// \param txt is text message that should be sent; /// \param data data to be std-moved to SubmitData function; /// \param chid channel id, 1 - normal communication, 0 - internal with highest priority",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:298,Performance,latency,latency,298,"/////////////////////////////////////////////////////////////////////////////////; /// Let use THttpServer threads to process requests; /// WARNING!!! only for expert use; /// Should be only used when application provides proper locking and; /// does not block. Such mode provides minimal possible latency; /// Must be called before callbacks are assigned",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:195,Security,access,access,195,"/////////////////////////////////////////////////////////////////////////////////; /// Start special thread which will be used by the window to handle all callbacks; /// One has to be sure, that access to global ROOT structures are minimized and; /// protected with ROOT::EnableThreadSafety(); call",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:439,Safety,detect,detected,439,"/////////////////////////////////////////////////////////////////////////////////; /// Set call-back function for data, received from the clients via websocket; ///; /// Function should have signature like void func(unsigned connid, const std::string &data); /// First argument identifies connection (unique for each window), second argument is received data; ///; /// At the moment when callback is assigned, RWebWindow working thread is detected.; /// If called not from main application thread, RWebWindow::Run() function must be regularly called from that thread.; ///; /// Most simple way to assign call-back - use of c++11 lambdas like:; /// ~~~ {.cpp}; /// auto win = RWebWindow::Create();; /// win->SetDefaultPage(""file:./page.htm"");; /// win->SetDataCallBack(; /// [](unsigned connid, const std::string &data) {; /// printf(""Conn:%u data:%s\n"", connid, data.c_str());; /// }; /// );; /// win->Show();; /// ~~~",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:583,Usability,simpl,simple,583,"/////////////////////////////////////////////////////////////////////////////////; /// Set call-back function for data, received from the clients via websocket; ///; /// Function should have signature like void func(unsigned connid, const std::string &data); /// First argument identifies connection (unique for each window), second argument is received data; ///; /// At the moment when callback is assigned, RWebWindow working thread is detected.; /// If called not from main application thread, RWebWindow::Run() function must be regularly called from that thread.; ///; /// Most simple way to assign call-back - use of c++11 lambdas like:; /// ~~~ {.cpp}; /// auto win = RWebWindow::Create();; /// win->SetDefaultPage(""file:./page.htm"");; /// win->SetDataCallBack(; /// [](unsigned connid, const std::string &data) {; /// printf(""Conn:%u data:%s\n"", connid, data.c_str());; /// }; /// );; /// win->Show();; /// ~~~",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:107,Usability,clear,cleared,107,"/////////////////////////////////////////////////////////////////////////////////; /// Set handle which is cleared when last active connection is closed; /// Typically can be used to destroy web-based widget at such moment",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:156,Performance,perform,performed,156,"/////////////////////////////////////////////////////////////////////////////////; /// Run window functionality for specified time; /// If no action can be performed - just sleep specified time",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:17,Deployability,release,release,17,"// workaround to release all connection-specific handles as soon as possible; // required to work with QWebEngine; // once problem solved, can be removed here",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:91,Modifiability,Config,Configure,91,"/////////////////////////////////////////////////////////////////////////////////////; /// Configure func which has to be used for starting dialog",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:118,Integrability,message,message,118,"/////////////////////////////////////////////////////////////////////////////////////; /// Check if this could be the message send by client to start new file dialog; /// If returns true, one can call RWebWindow::EmbedFileDialog() to really create file dialog; /// instance inside existing widget",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:372,Integrability,message,message,372,"/////////////////////////////////////////////////////////////////////////////////////; /// Create dialog instance to use as embedded dialog inside provided widget; /// Loads libROOTBrowserv7 and tries to call RFileDialog::Embedded() method; /// Embedded dialog started on the client side where FileDialogController.SaveAs() method called; /// Such method immediately send message with ""FILEDIALOG:"" prefix; /// On the server side widget should detect such message and call RFileDialog::Embedded(); /// providing received string as second argument.; /// Returned instance of shared_ptr<RFileDialog> may be used to assign callback when file is selected",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:456,Integrability,message,message,456,"/////////////////////////////////////////////////////////////////////////////////////; /// Create dialog instance to use as embedded dialog inside provided widget; /// Loads libROOTBrowserv7 and tries to call RFileDialog::Embedded() method; /// Embedded dialog started on the client side where FileDialogController.SaveAs() method called; /// Such method immediately send message with ""FILEDIALOG:"" prefix; /// On the server side widget should detect such message and call RFileDialog::Embedded(); /// providing received string as second argument.; /// Returned instance of shared_ptr<RFileDialog> may be used to assign callback when file is selected",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:168,Performance,Load,Loads,168,"/////////////////////////////////////////////////////////////////////////////////////; /// Create dialog instance to use as embedded dialog inside provided widget; /// Loads libROOTBrowserv7 and tries to call RFileDialog::Embedded() method; /// Embedded dialog started on the client side where FileDialogController.SaveAs() method called; /// Such method immediately send message with ""FILEDIALOG:"" prefix; /// On the server side widget should detect such message and call RFileDialog::Embedded(); /// providing received string as second argument.; /// Returned instance of shared_ptr<RFileDialog> may be used to assign callback when file is selected",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:444,Safety,detect,detect,444,"/////////////////////////////////////////////////////////////////////////////////////; /// Create dialog instance to use as embedded dialog inside provided widget; /// Loads libROOTBrowserv7 and tries to call RFileDialog::Embedded() method; /// Embedded dialog started on the client side where FileDialogController.SaveAs() method called; /// Such method immediately send message with ""FILEDIALOG:"" prefix; /// On the server side widget should detect such message and call RFileDialog::Embedded(); /// providing received string as second argument.; /// Returned instance of shared_ptr<RFileDialog> may be used to assign callback when file is selected",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:136,Integrability,message,message,136,"/////////////////////////////////////////////////////////////////////////////////////; /// Calculate HMAC checksum for provided key and message; /// Key combained from connection key and session key",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:106,Security,checksum,checksum,106,"/////////////////////////////////////////////////////////////////////////////////////; /// Calculate HMAC checksum for provided key and message; /// Key combained from connection key and session key",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:13,Security,hash,hash,13,"// calculate hash of sessionKey + key;",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:13,Security,hash,hash,13,"// calculate hash for ko + msg;",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:13,Security,hash,hash,13,"// calculate hash for ki + m2_digest;",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:174,Usability,Feedback,Feedback,174,"// Author: Sergey Linev <s.linev@gsi.de>; // Date: 2017-10-16; // Warning: This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:88,Modifiability,variab,variable,88,"///////////////////////////////////////////////////////////////; /// Parse boolean gEnv variable which should be ""yes"" or ""no""; /// \return 1 for true or 0 for false; /// Returns \param dflt if result is not defined; /// \param name name of the env variable",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:249,Modifiability,variab,variable,249,"///////////////////////////////////////////////////////////////; /// Parse boolean gEnv variable which should be ""yes"" or ""no""; /// \return 1 for true or 0 for false; /// Returns \param dflt if result is not defined; /// \param name name of the env variable",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:170,Integrability,inject,inject,170,"//////////////////////////////////////////////////////////////////; /// This thread id used to identify main application thread, where ROOT event processing runs; /// To inject code in that thread, one should use TTimer (like THttpServer does); /// In other threads special run methods have to be invoked like RWebWindow::Run(); ///; /// TODO: probably detection of main thread should be delivered by central ROOT instances like gApplication or gROOT; /// Main thread can only make sense if special processing runs there and one can inject own functionality there",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:533,Integrability,inject,inject,533,"//////////////////////////////////////////////////////////////////; /// This thread id used to identify main application thread, where ROOT event processing runs; /// To inject code in that thread, one should use TTimer (like THttpServer does); /// In other threads special run methods have to be invoked like RWebWindow::Run(); ///; /// TODO: probably detection of main thread should be delivered by central ROOT instances like gApplication or gROOT; /// Main thread can only make sense if special processing runs there and one can inject own functionality there",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:353,Safety,detect,detection,353,"//////////////////////////////////////////////////////////////////; /// This thread id used to identify main application thread, where ROOT event processing runs; /// To inject code in that thread, one should use TTimer (like THttpServer does); /// In other threads special run methods have to be invoked like RWebWindow::Run(); ///; /// TODO: probably detection of main thread should be delivered by central ROOT instances like gApplication or gROOT; /// Main thread can only make sense if special processing runs there and one can inject own functionality there",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:170,Security,inject,inject,170,"//////////////////////////////////////////////////////////////////; /// This thread id used to identify main application thread, where ROOT event processing runs; /// To inject code in that thread, one should use TTimer (like THttpServer does); /// In other threads special run methods have to be invoked like RWebWindow::Run(); ///; /// TODO: probably detection of main thread should be delivered by central ROOT instances like gApplication or gROOT; /// Main thread can only make sense if special processing runs there and one can inject own functionality there",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:533,Security,inject,inject,533,"//////////////////////////////////////////////////////////////////; /// This thread id used to identify main application thread, where ROOT event processing runs; /// To inject code in that thread, one should use TTimer (like THttpServer does); /// In other threads special run methods have to be invoked like RWebWindow::Run(); ///; /// TODO: probably detection of main thread should be delivered by central ROOT instances like gApplication or gROOT; /// Main thread can only make sense if special processing runs there and one can inject own functionality there",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:198,Performance,load,loaded,198,"//////////////////////////////////////////////////////////////////////////////////////////; /// Returns true when called from main process; /// Main process recognized at the moment when library is loaded; /// It supposed to be a thread where gApplication->Run() will be called; /// If application runs in separate thread, one have to use AssignMainThrd() method; /// to let RWebWindowsManager correctly recognize such situation",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:192,Performance,load,loaded,192,"//////////////////////////////////////////////////////////////////////////////////////////; /// Re-assigns main thread id; /// Normally main thread id recognized at the moment when library is loaded; /// It supposed to be a thread where gApplication->Run() will be called; /// If application runs in separate thread, one have to call this method; /// to let RWebWindowsManager correctly recognize such situation",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:301,Security,access,access,301,"//////////////////////////////////////////////////////////////////////////////////////////; /// Set loopback mode for THttpServer used for web widgets; /// By default is on. Only local communication via localhost address is possible; /// Disable it only if really necessary - it may open unauthorized access to your application from external nodes!!",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:203,Security,hash,hash,203,"//////////////////////////////////////////////////////////////////////////////////////////; /// Enable or disable usage of session key (default on); /// If enabled, secrete session key used to calculate hash sum of each packet send to or from server; /// This protects ROOT http server from anauthorized usage",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:297,Security,hash,hash,297,"//////////////////////////////////////////////////////////////////////////////////////////; /// Enable or disable usage of connection key (default on); /// If enabled, each connection (and reconnection) to widget requires unique key; /// Connection key used together with session key to calculate hash sum of each packet send to or from server; /// This protects ROOT http server from anauthorized usage",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:96,Modifiability,Config,Configure,96,"//////////////////////////////////////////////////////////////////////////////////////////; /// Configure server location which can be used for loading of custom scripts or files; /// When THttpServer instance of RWebWindowsManager will be created,; /// THttpServer::AddLocation() method with correspondent arguments will be invoked.",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:144,Performance,load,loading,144,"//////////////////////////////////////////////////////////////////////////////////////////; /// Configure server location which can be used for loading of custom scripts or files; /// When THttpServer instance of RWebWindowsManager will be created,; /// THttpServer::AddLocation() method with correspondent arguments will be invoked.",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:144,Deployability,configurat,configuration,144,"//////////////////////////////////////////////////////////////////////////////////////////; /// Clear all server locations; /// Does not change configuration of already running HTTP server",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:144,Modifiability,config,configuration,144,"//////////////////////////////////////////////////////////////////////////////////////////; /// Clear all server locations; /// Does not change configuration of already running HTTP server",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:96,Usability,Clear,Clear,96,"//////////////////////////////////////////////////////////////////////////////////////////; /// Clear all server locations; /// Does not change configuration of already running HTTP server",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:149,Integrability,message,message,149,"//////////////////////////////////////////////////////////////////////////////////////////; /// If ROOT_LISTENER_SOCKET variable is configured,; /// message will be sent to that unix socket",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:120,Modifiability,variab,variable,120,"//////////////////////////////////////////////////////////////////////////////////////////; /// If ROOT_LISTENER_SOCKET variable is configured,; /// message will be sent to that unix socket",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:132,Modifiability,config,configured,132,"//////////////////////////////////////////////////////////////////////////////////////////; /// If ROOT_LISTENER_SOCKET variable is configured,; /// message will be sent to that unix socket",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:622,Availability,avail,available,622,"//////////////////////////////////////////////////////////////////////////////////////////; /// Creates http server, if required - with real http engine (civetweb); /// One could configure concrete HTTP port, which should be used for the server,; /// provide following entry in rootrc file:; ///; /// WebGui.HttpPort: 8088; ///; /// or specify range of http ports, which can be used:; ///; /// WebGui.HttpPortMin: 8800; /// WebGui.HttpPortMax: 9800; ///; /// By default range [8800..9800] is used; ///; /// One also can bind HTTP server socket to loopback address,; /// In that case only connection from localhost will be available:; ///; /// WebGui.HttpLoopback: yes; ///; /// Or one could specify hostname which should be used for binding of server socket; ///; /// WebGui.HttpBind: hostname | ipaddress; ///; /// To use secured protocol, following parameter should be specified; ///; /// WebGui.UseHttps: yes; /// WebGui.ServerCert: sertificate_filename.pem; ///; /// Alternatively, one can specify unix socket to handle requests:; ///; /// WebGui.UnixSocket: /path/to/unix/socket; /// WebGui.UnixSocketMode: 0700; ///; /// Typically one used unix sockets together with server mode like `root --web=server:/tmp/root.socket` and; /// then redirect it via ssh tunnel (e.g. using `rootssh`) to client node; ///; /// All incoming requests processed in THttpServer in timer handler with 10 ms timeout.; /// One may decrease value to improve latency or increase value to minimize CPU load; ///; /// WebGui.HttpTimer: 10; ///; /// To processing incoming http requests and websockets, THttpServer allocate 10 threads; /// One have to increase this number if more simultaneous connections are expected:; ///; /// WebGui.HttpThrds: 10; ///; /// One also can configure usage of special thread of processing of http server requests; ///; /// WebGui.HttpThrd: no; ///; /// Extra threads can be used to send data to different clients via websocket (default no); ///; /// WebGui.SenderThrds: no; ///; /// If requi",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:1592,Energy Efficiency,allocate,allocate,1592,"lhost will be available:; ///; /// WebGui.HttpLoopback: yes; ///; /// Or one could specify hostname which should be used for binding of server socket; ///; /// WebGui.HttpBind: hostname | ipaddress; ///; /// To use secured protocol, following parameter should be specified; ///; /// WebGui.UseHttps: yes; /// WebGui.ServerCert: sertificate_filename.pem; ///; /// Alternatively, one can specify unix socket to handle requests:; ///; /// WebGui.UnixSocket: /path/to/unix/socket; /// WebGui.UnixSocketMode: 0700; ///; /// Typically one used unix sockets together with server mode like `root --web=server:/tmp/root.socket` and; /// then redirect it via ssh tunnel (e.g. using `rootssh`) to client node; ///; /// All incoming requests processed in THttpServer in timer handler with 10 ms timeout.; /// One may decrease value to improve latency or increase value to minimize CPU load; ///; /// WebGui.HttpTimer: 10; ///; /// To processing incoming http requests and websockets, THttpServer allocate 10 threads; /// One have to increase this number if more simultaneous connections are expected:; ///; /// WebGui.HttpThrds: 10; ///; /// One also can configure usage of special thread of processing of http server requests; ///; /// WebGui.HttpThrd: no; ///; /// Extra threads can be used to send data to different clients via websocket (default no); ///; /// WebGui.SenderThrds: no; ///; /// If required, one could change websocket timeouts (default is 10000 ms); ///; /// WebGui.HttpWSTmout: 10000; ///; /// By default, THttpServer created in restricted mode which only allows websocket handlers; /// and processes only very few other related http requests. For security reasons such mode; /// should be always enabled. Only if it is really necessary to process all other kinds; /// of HTTP requests, one could specify no for following parameter (default yes):; ///; /// WebGui.WSOnly: yes; ///; /// In some applications one may need to force longpoll websocket emulations from the beginning,; /// for insta",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:831,Integrability,protocol,protocol,831,"//////////////////////////////////////////////////////////////////////////////////////////; /// Creates http server, if required - with real http engine (civetweb); /// One could configure concrete HTTP port, which should be used for the server,; /// provide following entry in rootrc file:; ///; /// WebGui.HttpPort: 8088; ///; /// or specify range of http ports, which can be used:; ///; /// WebGui.HttpPortMin: 8800; /// WebGui.HttpPortMax: 9800; ///; /// By default range [8800..9800] is used; ///; /// One also can bind HTTP server socket to loopback address,; /// In that case only connection from localhost will be available:; ///; /// WebGui.HttpLoopback: yes; ///; /// Or one could specify hostname which should be used for binding of server socket; ///; /// WebGui.HttpBind: hostname | ipaddress; ///; /// To use secured protocol, following parameter should be specified; ///; /// WebGui.UseHttps: yes; /// WebGui.ServerCert: sertificate_filename.pem; ///; /// Alternatively, one can specify unix socket to handle requests:; ///; /// WebGui.UnixSocket: /path/to/unix/socket; /// WebGui.UnixSocketMode: 0700; ///; /// Typically one used unix sockets together with server mode like `root --web=server:/tmp/root.socket` and; /// then redirect it via ssh tunnel (e.g. using `rootssh`) to client node; ///; /// All incoming requests processed in THttpServer in timer handler with 10 ms timeout.; /// One may decrease value to improve latency or increase value to minimize CPU load; ///; /// WebGui.HttpTimer: 10; ///; /// To processing incoming http requests and websockets, THttpServer allocate 10 threads; /// One have to increase this number if more simultaneous connections are expected:; ///; /// WebGui.HttpThrds: 10; ///; /// One also can configure usage of special thread of processing of http server requests; ///; /// WebGui.HttpThrd: no; ///; /// Extra threads can be used to send data to different clients via websocket (default no); ///; /// WebGui.SenderThrds: no; ///; /// If requi",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:179,Modifiability,config,configure,179,"//////////////////////////////////////////////////////////////////////////////////////////; /// Creates http server, if required - with real http engine (civetweb); /// One could configure concrete HTTP port, which should be used for the server,; /// provide following entry in rootrc file:; ///; /// WebGui.HttpPort: 8088; ///; /// or specify range of http ports, which can be used:; ///; /// WebGui.HttpPortMin: 8800; /// WebGui.HttpPortMax: 9800; ///; /// By default range [8800..9800] is used; ///; /// One also can bind HTTP server socket to loopback address,; /// In that case only connection from localhost will be available:; ///; /// WebGui.HttpLoopback: yes; ///; /// Or one could specify hostname which should be used for binding of server socket; ///; /// WebGui.HttpBind: hostname | ipaddress; ///; /// To use secured protocol, following parameter should be specified; ///; /// WebGui.UseHttps: yes; /// WebGui.ServerCert: sertificate_filename.pem; ///; /// Alternatively, one can specify unix socket to handle requests:; ///; /// WebGui.UnixSocket: /path/to/unix/socket; /// WebGui.UnixSocketMode: 0700; ///; /// Typically one used unix sockets together with server mode like `root --web=server:/tmp/root.socket` and; /// then redirect it via ssh tunnel (e.g. using `rootssh`) to client node; ///; /// All incoming requests processed in THttpServer in timer handler with 10 ms timeout.; /// One may decrease value to improve latency or increase value to minimize CPU load; ///; /// WebGui.HttpTimer: 10; ///; /// To processing incoming http requests and websockets, THttpServer allocate 10 threads; /// One have to increase this number if more simultaneous connections are expected:; ///; /// WebGui.HttpThrds: 10; ///; /// One also can configure usage of special thread of processing of http server requests; ///; /// WebGui.HttpThrd: no; ///; /// Extra threads can be used to send data to different clients via websocket (default no); ///; /// WebGui.SenderThrds: no; ///; /// If requi",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:1751,Modifiability,config,configure,1751,"tpBind: hostname | ipaddress; ///; /// To use secured protocol, following parameter should be specified; ///; /// WebGui.UseHttps: yes; /// WebGui.ServerCert: sertificate_filename.pem; ///; /// Alternatively, one can specify unix socket to handle requests:; ///; /// WebGui.UnixSocket: /path/to/unix/socket; /// WebGui.UnixSocketMode: 0700; ///; /// Typically one used unix sockets together with server mode like `root --web=server:/tmp/root.socket` and; /// then redirect it via ssh tunnel (e.g. using `rootssh`) to client node; ///; /// All incoming requests processed in THttpServer in timer handler with 10 ms timeout.; /// One may decrease value to improve latency or increase value to minimize CPU load; ///; /// WebGui.HttpTimer: 10; ///; /// To processing incoming http requests and websockets, THttpServer allocate 10 threads; /// One have to increase this number if more simultaneous connections are expected:; ///; /// WebGui.HttpThrds: 10; ///; /// One also can configure usage of special thread of processing of http server requests; ///; /// WebGui.HttpThrd: no; ///; /// Extra threads can be used to send data to different clients via websocket (default no); ///; /// WebGui.SenderThrds: no; ///; /// If required, one could change websocket timeouts (default is 10000 ms); ///; /// WebGui.HttpWSTmout: 10000; ///; /// By default, THttpServer created in restricted mode which only allows websocket handlers; /// and processes only very few other related http requests. For security reasons such mode; /// should be always enabled. Only if it is really necessary to process all other kinds; /// of HTTP requests, one could specify no for following parameter (default yes):; ///; /// WebGui.WSOnly: yes; ///; /// In some applications one may need to force longpoll websocket emulations from the beginning,; /// for instance when clients connected via proxys. Although JSROOT should automatically fallback; /// to longpoll engine, one can configure this directly (default no); ///; /// Web",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:2727,Modifiability,config,configure,2727,"HttpThrds: 10; ///; /// One also can configure usage of special thread of processing of http server requests; ///; /// WebGui.HttpThrd: no; ///; /// Extra threads can be used to send data to different clients via websocket (default no); ///; /// WebGui.SenderThrds: no; ///; /// If required, one could change websocket timeouts (default is 10000 ms); ///; /// WebGui.HttpWSTmout: 10000; ///; /// By default, THttpServer created in restricted mode which only allows websocket handlers; /// and processes only very few other related http requests. For security reasons such mode; /// should be always enabled. Only if it is really necessary to process all other kinds; /// of HTTP requests, one could specify no for following parameter (default yes):; ///; /// WebGui.WSOnly: yes; ///; /// In some applications one may need to force longpoll websocket emulations from the beginning,; /// for instance when clients connected via proxys. Although JSROOT should automatically fallback; /// to longpoll engine, one can configure this directly (default no); ///; /// WebGui.WSLongpoll: no; ///; /// Following parameter controls browser max-age caching parameter for files (default 3600); /// When 0 is specified, browser cache will be disabled; ///; /// WebGui.HttpMaxAge: 3600; ///; /// Also one can provide extra URL options for, see TCivetweb::Create for list of supported options; ///; /// WebGui.HttpExtraArgs: winsymlinks=no; ///; /// One also can configure usage of FastCGI server for web windows:; ///; /// WebGui.FastCgiPort: 4000; /// WebGui.FastCgiThreads: 10; ///; /// To be able start web browser for such windows, one can provide real URL of the; /// web server which will connect with that FastCGI instance:; ///; /// WebGui.FastCgiServer: https://your_apache_server.com/root_cgi_path; ///; /// For some custom applications one requires to load JavaScript modules or other files.; /// For such applications one may require to load files from other locations which can be configured; /// with ",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:3161,Modifiability,config,configure,3161,"// Extra threads can be used to send data to different clients via websocket (default no); ///; /// WebGui.SenderThrds: no; ///; /// If required, one could change websocket timeouts (default is 10000 ms); ///; /// WebGui.HttpWSTmout: 10000; ///; /// By default, THttpServer created in restricted mode which only allows websocket handlers; /// and processes only very few other related http requests. For security reasons such mode; /// should be always enabled. Only if it is really necessary to process all other kinds; /// of HTTP requests, one could specify no for following parameter (default yes):; ///; /// WebGui.WSOnly: yes; ///; /// In some applications one may need to force longpoll websocket emulations from the beginning,; /// for instance when clients connected via proxys. Although JSROOT should automatically fallback; /// to longpoll engine, one can configure this directly (default no); ///; /// WebGui.WSLongpoll: no; ///; /// Following parameter controls browser max-age caching parameter for files (default 3600); /// When 0 is specified, browser cache will be disabled; ///; /// WebGui.HttpMaxAge: 3600; ///; /// Also one can provide extra URL options for, see TCivetweb::Create for list of supported options; ///; /// WebGui.HttpExtraArgs: winsymlinks=no; ///; /// One also can configure usage of FastCGI server for web windows:; ///; /// WebGui.FastCgiPort: 4000; /// WebGui.FastCgiThreads: 10; ///; /// To be able start web browser for such windows, one can provide real URL of the; /// web server which will connect with that FastCGI instance:; ///; /// WebGui.FastCgiServer: https://your_apache_server.com/root_cgi_path; ///; /// For some custom applications one requires to load JavaScript modules or other files.; /// For such applications one may require to load files from other locations which can be configured; /// with AddServerLocation() method or directly via:; ///; /// WebGui.ServerLocations: location1:/file/path/to/location1;location2:/file/path/to/location2",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:3693,Modifiability,config,configured,3693,"// Extra threads can be used to send data to different clients via websocket (default no); ///; /// WebGui.SenderThrds: no; ///; /// If required, one could change websocket timeouts (default is 10000 ms); ///; /// WebGui.HttpWSTmout: 10000; ///; /// By default, THttpServer created in restricted mode which only allows websocket handlers; /// and processes only very few other related http requests. For security reasons such mode; /// should be always enabled. Only if it is really necessary to process all other kinds; /// of HTTP requests, one could specify no for following parameter (default yes):; ///; /// WebGui.WSOnly: yes; ///; /// In some applications one may need to force longpoll websocket emulations from the beginning,; /// for instance when clients connected via proxys. Although JSROOT should automatically fallback; /// to longpoll engine, one can configure this directly (default no); ///; /// WebGui.WSLongpoll: no; ///; /// Following parameter controls browser max-age caching parameter for files (default 3600); /// When 0 is specified, browser cache will be disabled; ///; /// WebGui.HttpMaxAge: 3600; ///; /// Also one can provide extra URL options for, see TCivetweb::Create for list of supported options; ///; /// WebGui.HttpExtraArgs: winsymlinks=no; ///; /// One also can configure usage of FastCGI server for web windows:; ///; /// WebGui.FastCgiPort: 4000; /// WebGui.FastCgiThreads: 10; ///; /// To be able start web browser for such windows, one can provide real URL of the; /// web server which will connect with that FastCGI instance:; ///; /// WebGui.FastCgiServer: https://your_apache_server.com/root_cgi_path; ///; /// For some custom applications one requires to load JavaScript modules or other files.; /// For such applications one may require to load files from other locations which can be configured; /// with AddServerLocation() method or directly via:; ///; /// WebGui.ServerLocations: location1:/file/path/to/location1;location2:/file/path/to/location2",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:1439,Performance,latency,latency,1439,"//; /// By default range [8800..9800] is used; ///; /// One also can bind HTTP server socket to loopback address,; /// In that case only connection from localhost will be available:; ///; /// WebGui.HttpLoopback: yes; ///; /// Or one could specify hostname which should be used for binding of server socket; ///; /// WebGui.HttpBind: hostname | ipaddress; ///; /// To use secured protocol, following parameter should be specified; ///; /// WebGui.UseHttps: yes; /// WebGui.ServerCert: sertificate_filename.pem; ///; /// Alternatively, one can specify unix socket to handle requests:; ///; /// WebGui.UnixSocket: /path/to/unix/socket; /// WebGui.UnixSocketMode: 0700; ///; /// Typically one used unix sockets together with server mode like `root --web=server:/tmp/root.socket` and; /// then redirect it via ssh tunnel (e.g. using `rootssh`) to client node; ///; /// All incoming requests processed in THttpServer in timer handler with 10 ms timeout.; /// One may decrease value to improve latency or increase value to minimize CPU load; ///; /// WebGui.HttpTimer: 10; ///; /// To processing incoming http requests and websockets, THttpServer allocate 10 threads; /// One have to increase this number if more simultaneous connections are expected:; ///; /// WebGui.HttpThrds: 10; ///; /// One also can configure usage of special thread of processing of http server requests; ///; /// WebGui.HttpThrd: no; ///; /// Extra threads can be used to send data to different clients via websocket (default no); ///; /// WebGui.SenderThrds: no; ///; /// If required, one could change websocket timeouts (default is 10000 ms); ///; /// WebGui.HttpWSTmout: 10000; ///; /// By default, THttpServer created in restricted mode which only allows websocket handlers; /// and processes only very few other related http requests. For security reasons such mode; /// should be always enabled. Only if it is really necessary to process all other kinds; /// of HTTP requests, one could specify no for following parameter (de",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:1481,Performance,load,load,1481,"//; /// By default range [8800..9800] is used; ///; /// One also can bind HTTP server socket to loopback address,; /// In that case only connection from localhost will be available:; ///; /// WebGui.HttpLoopback: yes; ///; /// Or one could specify hostname which should be used for binding of server socket; ///; /// WebGui.HttpBind: hostname | ipaddress; ///; /// To use secured protocol, following parameter should be specified; ///; /// WebGui.UseHttps: yes; /// WebGui.ServerCert: sertificate_filename.pem; ///; /// Alternatively, one can specify unix socket to handle requests:; ///; /// WebGui.UnixSocket: /path/to/unix/socket; /// WebGui.UnixSocketMode: 0700; ///; /// Typically one used unix sockets together with server mode like `root --web=server:/tmp/root.socket` and; /// then redirect it via ssh tunnel (e.g. using `rootssh`) to client node; ///; /// All incoming requests processed in THttpServer in timer handler with 10 ms timeout.; /// One may decrease value to improve latency or increase value to minimize CPU load; ///; /// WebGui.HttpTimer: 10; ///; /// To processing incoming http requests and websockets, THttpServer allocate 10 threads; /// One have to increase this number if more simultaneous connections are expected:; ///; /// WebGui.HttpThrds: 10; ///; /// One also can configure usage of special thread of processing of http server requests; ///; /// WebGui.HttpThrd: no; ///; /// Extra threads can be used to send data to different clients via websocket (default no); ///; /// WebGui.SenderThrds: no; ///; /// If required, one could change websocket timeouts (default is 10000 ms); ///; /// WebGui.HttpWSTmout: 10000; ///; /// By default, THttpServer created in restricted mode which only allows websocket handlers; /// and processes only very few other related http requests. For security reasons such mode; /// should be always enabled. Only if it is really necessary to process all other kinds; /// of HTTP requests, one could specify no for following parameter (de",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:2928,Performance,cache,cache,2928,"// Extra threads can be used to send data to different clients via websocket (default no); ///; /// WebGui.SenderThrds: no; ///; /// If required, one could change websocket timeouts (default is 10000 ms); ///; /// WebGui.HttpWSTmout: 10000; ///; /// By default, THttpServer created in restricted mode which only allows websocket handlers; /// and processes only very few other related http requests. For security reasons such mode; /// should be always enabled. Only if it is really necessary to process all other kinds; /// of HTTP requests, one could specify no for following parameter (default yes):; ///; /// WebGui.WSOnly: yes; ///; /// In some applications one may need to force longpoll websocket emulations from the beginning,; /// for instance when clients connected via proxys. Although JSROOT should automatically fallback; /// to longpoll engine, one can configure this directly (default no); ///; /// WebGui.WSLongpoll: no; ///; /// Following parameter controls browser max-age caching parameter for files (default 3600); /// When 0 is specified, browser cache will be disabled; ///; /// WebGui.HttpMaxAge: 3600; ///; /// Also one can provide extra URL options for, see TCivetweb::Create for list of supported options; ///; /// WebGui.HttpExtraArgs: winsymlinks=no; ///; /// One also can configure usage of FastCGI server for web windows:; ///; /// WebGui.FastCgiPort: 4000; /// WebGui.FastCgiThreads: 10; ///; /// To be able start web browser for such windows, one can provide real URL of the; /// web server which will connect with that FastCGI instance:; ///; /// WebGui.FastCgiServer: https://your_apache_server.com/root_cgi_path; ///; /// For some custom applications one requires to load JavaScript modules or other files.; /// For such applications one may require to load files from other locations which can be configured; /// with AddServerLocation() method or directly via:; ///; /// WebGui.ServerLocations: location1:/file/path/to/location1;location2:/file/path/to/location2",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:3562,Performance,load,load,3562,"// Extra threads can be used to send data to different clients via websocket (default no); ///; /// WebGui.SenderThrds: no; ///; /// If required, one could change websocket timeouts (default is 10000 ms); ///; /// WebGui.HttpWSTmout: 10000; ///; /// By default, THttpServer created in restricted mode which only allows websocket handlers; /// and processes only very few other related http requests. For security reasons such mode; /// should be always enabled. Only if it is really necessary to process all other kinds; /// of HTTP requests, one could specify no for following parameter (default yes):; ///; /// WebGui.WSOnly: yes; ///; /// In some applications one may need to force longpoll websocket emulations from the beginning,; /// for instance when clients connected via proxys. Although JSROOT should automatically fallback; /// to longpoll engine, one can configure this directly (default no); ///; /// WebGui.WSLongpoll: no; ///; /// Following parameter controls browser max-age caching parameter for files (default 3600); /// When 0 is specified, browser cache will be disabled; ///; /// WebGui.HttpMaxAge: 3600; ///; /// Also one can provide extra URL options for, see TCivetweb::Create for list of supported options; ///; /// WebGui.HttpExtraArgs: winsymlinks=no; ///; /// One also can configure usage of FastCGI server for web windows:; ///; /// WebGui.FastCgiPort: 4000; /// WebGui.FastCgiThreads: 10; ///; /// To be able start web browser for such windows, one can provide real URL of the; /// web server which will connect with that FastCGI instance:; ///; /// WebGui.FastCgiServer: https://your_apache_server.com/root_cgi_path; ///; /// For some custom applications one requires to load JavaScript modules or other files.; /// For such applications one may require to load files from other locations which can be configured; /// with AddServerLocation() method or directly via:; ///; /// WebGui.ServerLocations: location1:/file/path/to/location1;location2:/file/path/to/location2",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:3648,Performance,load,load,3648,"// Extra threads can be used to send data to different clients via websocket (default no); ///; /// WebGui.SenderThrds: no; ///; /// If required, one could change websocket timeouts (default is 10000 ms); ///; /// WebGui.HttpWSTmout: 10000; ///; /// By default, THttpServer created in restricted mode which only allows websocket handlers; /// and processes only very few other related http requests. For security reasons such mode; /// should be always enabled. Only if it is really necessary to process all other kinds; /// of HTTP requests, one could specify no for following parameter (default yes):; ///; /// WebGui.WSOnly: yes; ///; /// In some applications one may need to force longpoll websocket emulations from the beginning,; /// for instance when clients connected via proxys. Although JSROOT should automatically fallback; /// to longpoll engine, one can configure this directly (default no); ///; /// WebGui.WSLongpoll: no; ///; /// Following parameter controls browser max-age caching parameter for files (default 3600); /// When 0 is specified, browser cache will be disabled; ///; /// WebGui.HttpMaxAge: 3600; ///; /// Also one can provide extra URL options for, see TCivetweb::Create for list of supported options; ///; /// WebGui.HttpExtraArgs: winsymlinks=no; ///; /// One also can configure usage of FastCGI server for web windows:; ///; /// WebGui.FastCgiPort: 4000; /// WebGui.FastCgiThreads: 10; ///; /// To be able start web browser for such windows, one can provide real URL of the; /// web server which will connect with that FastCGI instance:; ///; /// WebGui.FastCgiServer: https://your_apache_server.com/root_cgi_path; ///; /// For some custom applications one requires to load JavaScript modules or other files.; /// For such applications one may require to load files from other locations which can be configured; /// with AddServerLocation() method or directly via:; ///; /// WebGui.ServerLocations: location1:/file/path/to/location1;location2:/file/path/to/location2",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:1391,Safety,timeout,timeout,1391,"specify range of http ports, which can be used:; ///; /// WebGui.HttpPortMin: 8800; /// WebGui.HttpPortMax: 9800; ///; /// By default range [8800..9800] is used; ///; /// One also can bind HTTP server socket to loopback address,; /// In that case only connection from localhost will be available:; ///; /// WebGui.HttpLoopback: yes; ///; /// Or one could specify hostname which should be used for binding of server socket; ///; /// WebGui.HttpBind: hostname | ipaddress; ///; /// To use secured protocol, following parameter should be specified; ///; /// WebGui.UseHttps: yes; /// WebGui.ServerCert: sertificate_filename.pem; ///; /// Alternatively, one can specify unix socket to handle requests:; ///; /// WebGui.UnixSocket: /path/to/unix/socket; /// WebGui.UnixSocketMode: 0700; ///; /// Typically one used unix sockets together with server mode like `root --web=server:/tmp/root.socket` and; /// then redirect it via ssh tunnel (e.g. using `rootssh`) to client node; ///; /// All incoming requests processed in THttpServer in timer handler with 10 ms timeout.; /// One may decrease value to improve latency or increase value to minimize CPU load; ///; /// WebGui.HttpTimer: 10; ///; /// To processing incoming http requests and websockets, THttpServer allocate 10 threads; /// One have to increase this number if more simultaneous connections are expected:; ///; /// WebGui.HttpThrds: 10; ///; /// One also can configure usage of special thread of processing of http server requests; ///; /// WebGui.HttpThrd: no; ///; /// Extra threads can be used to send data to different clients via websocket (default no); ///; /// WebGui.SenderThrds: no; ///; /// If required, one could change websocket timeouts (default is 10000 ms); ///; /// WebGui.HttpWSTmout: 10000; ///; /// By default, THttpServer created in restricted mode which only allows websocket handlers; /// and processes only very few other related http requests. For security reasons such mode; /// should be always enabled. Only if it is ",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:2033,Safety,timeout,timeouts,2033,"requests:; ///; /// WebGui.UnixSocket: /path/to/unix/socket; /// WebGui.UnixSocketMode: 0700; ///; /// Typically one used unix sockets together with server mode like `root --web=server:/tmp/root.socket` and; /// then redirect it via ssh tunnel (e.g. using `rootssh`) to client node; ///; /// All incoming requests processed in THttpServer in timer handler with 10 ms timeout.; /// One may decrease value to improve latency or increase value to minimize CPU load; ///; /// WebGui.HttpTimer: 10; ///; /// To processing incoming http requests and websockets, THttpServer allocate 10 threads; /// One have to increase this number if more simultaneous connections are expected:; ///; /// WebGui.HttpThrds: 10; ///; /// One also can configure usage of special thread of processing of http server requests; ///; /// WebGui.HttpThrd: no; ///; /// Extra threads can be used to send data to different clients via websocket (default no); ///; /// WebGui.SenderThrds: no; ///; /// If required, one could change websocket timeouts (default is 10000 ms); ///; /// WebGui.HttpWSTmout: 10000; ///; /// By default, THttpServer created in restricted mode which only allows websocket handlers; /// and processes only very few other related http requests. For security reasons such mode; /// should be always enabled. Only if it is really necessary to process all other kinds; /// of HTTP requests, one could specify no for following parameter (default yes):; ///; /// WebGui.WSOnly: yes; ///; /// In some applications one may need to force longpoll websocket emulations from the beginning,; /// for instance when clients connected via proxys. Although JSROOT should automatically fallback; /// to longpoll engine, one can configure this directly (default no); ///; /// WebGui.WSLongpoll: no; ///; /// Following parameter controls browser max-age caching parameter for files (default 3600); /// When 0 is specified, browser cache will be disabled; ///; /// WebGui.HttpMaxAge: 3600; ///; /// Also one can provide extra UR",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:823,Security,secur,secured,823,"//////////////////////////////////////////////////////////////////////////////////////////; /// Creates http server, if required - with real http engine (civetweb); /// One could configure concrete HTTP port, which should be used for the server,; /// provide following entry in rootrc file:; ///; /// WebGui.HttpPort: 8088; ///; /// or specify range of http ports, which can be used:; ///; /// WebGui.HttpPortMin: 8800; /// WebGui.HttpPortMax: 9800; ///; /// By default range [8800..9800] is used; ///; /// One also can bind HTTP server socket to loopback address,; /// In that case only connection from localhost will be available:; ///; /// WebGui.HttpLoopback: yes; ///; /// Or one could specify hostname which should be used for binding of server socket; ///; /// WebGui.HttpBind: hostname | ipaddress; ///; /// To use secured protocol, following parameter should be specified; ///; /// WebGui.UseHttps: yes; /// WebGui.ServerCert: sertificate_filename.pem; ///; /// Alternatively, one can specify unix socket to handle requests:; ///; /// WebGui.UnixSocket: /path/to/unix/socket; /// WebGui.UnixSocketMode: 0700; ///; /// Typically one used unix sockets together with server mode like `root --web=server:/tmp/root.socket` and; /// then redirect it via ssh tunnel (e.g. using `rootssh`) to client node; ///; /// All incoming requests processed in THttpServer in timer handler with 10 ms timeout.; /// One may decrease value to improve latency or increase value to minimize CPU load; ///; /// WebGui.HttpTimer: 10; ///; /// To processing incoming http requests and websockets, THttpServer allocate 10 threads; /// One have to increase this number if more simultaneous connections are expected:; ///; /// WebGui.HttpThrds: 10; ///; /// One also can configure usage of special thread of processing of http server requests; ///; /// WebGui.HttpThrd: no; ///; /// Extra threads can be used to send data to different clients via websocket (default no); ///; /// WebGui.SenderThrds: no; ///; /// If requi",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:2264,Security,secur,security,2264," to client node; ///; /// All incoming requests processed in THttpServer in timer handler with 10 ms timeout.; /// One may decrease value to improve latency or increase value to minimize CPU load; ///; /// WebGui.HttpTimer: 10; ///; /// To processing incoming http requests and websockets, THttpServer allocate 10 threads; /// One have to increase this number if more simultaneous connections are expected:; ///; /// WebGui.HttpThrds: 10; ///; /// One also can configure usage of special thread of processing of http server requests; ///; /// WebGui.HttpThrd: no; ///; /// Extra threads can be used to send data to different clients via websocket (default no); ///; /// WebGui.SenderThrds: no; ///; /// If required, one could change websocket timeouts (default is 10000 ms); ///; /// WebGui.HttpWSTmout: 10000; ///; /// By default, THttpServer created in restricted mode which only allows websocket handlers; /// and processes only very few other related http requests. For security reasons such mode; /// should be always enabled. Only if it is really necessary to process all other kinds; /// of HTTP requests, one could specify no for following parameter (default yes):; ///; /// WebGui.WSOnly: yes; ///; /// In some applications one may need to force longpoll websocket emulations from the beginning,; /// for instance when clients connected via proxys. Although JSROOT should automatically fallback; /// to longpoll engine, one can configure this directly (default no); ///; /// WebGui.WSLongpoll: no; ///; /// Following parameter controls browser max-age caching parameter for files (default 3600); /// When 0 is specified, browser cache will be disabled; ///; /// WebGui.HttpMaxAge: 3600; ///; /// Also one can provide extra URL options for, see TCivetweb::Create for list of supported options; ///; /// WebGui.HttpExtraArgs: winsymlinks=no; ///; /// One also can configure usage of FastCGI server for web windows:; ///; /// WebGui.FastCgiPort: 4000; /// WebGui.FastCgiThreads: 10; ///; /// To",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:42,Performance,perform,performed,42,"// special mode when window communication performed in THttpServer::ProcessRequests; // used only with python which create special thread - but is has to be ignored!!!; // therefore use main thread id to detect callbacks which are invoked only from that main thread",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:204,Safety,detect,detect,204,"// special mode when window communication performed in THttpServer::ProcessRequests; // used only with python which create special thread - but is has to be ignored!!!; // therefore use main thread id to detect callbacks which are invoked only from that main thread",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:96,Deployability,Release,Release,96,"//////////////////////////////////////////////////////////////////////////////////////////; /// Release all references to specified window; /// Called from RWebWindow destructor",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:103,Security,access,access,103,"//////////////////////////////////////////////////////////////////////////; /// Provide URL address to access specified window from inside or from remote",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:429,Availability,avail,available,429,"///////////////////////////////////////////////////////////////////////////////////////////////////; /// Show web window in specified location.; ///; /// \param[inout] win web window by reference; /// \param user_args specifies where and how display web window; ///; /// As display args one can use string like ""firefox"" or ""chrome"" - these are two main supported web browsers.; /// See RWebDisplayArgs::SetBrowserKind() for all available options. Default value for the browser can be configured; /// when starting root with --web argument like: ""root --web=chrome"". When root started in web server mode ""root --web=server"",; /// no any web browser will be started - just URL will be printout, which can be entered in any running web browser; ///; /// If allowed, same window can be displayed several times (like for RCanvas or TCanvas); ///; /// Following parameters can be configured in rootrc file:; ///; /// WebGui.Display: kind of display like chrome or firefox or browser, can be overwritten by --web=value command line argument; /// WebGui.OnetimeKey: if configured requires unique key every time window is connected (default yes); /// WebGui.Chrome: full path to Google Chrome executable; /// WebGui.ChromeBatch: command to start chrome in batch, used for image production, like ""$prog --headless --disable-gpu $geometry $url""; /// WebGui.ChromeHeadless: command to start chrome in headless mode, like ""fork: --headless --disable-gpu $geometry $url""; /// WebGui.ChromeInteractive: command to start chrome in interactive mode, like ""$prog $geometry --app=\'$url\' &""; /// WebGui.Firefox: full path to Mozilla Firefox executable; /// WebGui.FirefoxHeadless: command to start Firefox in headless mode, like ""fork:--headless --private-window --no-remote $profile $url""; /// WebGui.FirefoxInteractive: command to start Firefox in interactive mode, like ""$prog --private-window \'$url\' &""; /// WebGui.FirefoxProfile: name of Firefox profile to use; /// WebGui.FirefoxProfilePath: file path to Firef",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:2683,Availability,error,error,2683,"start chrome in batch, used for image production, like ""$prog --headless --disable-gpu $geometry $url""; /// WebGui.ChromeHeadless: command to start chrome in headless mode, like ""fork: --headless --disable-gpu $geometry $url""; /// WebGui.ChromeInteractive: command to start chrome in interactive mode, like ""$prog $geometry --app=\'$url\' &""; /// WebGui.Firefox: full path to Mozilla Firefox executable; /// WebGui.FirefoxHeadless: command to start Firefox in headless mode, like ""fork:--headless --private-window --no-remote $profile $url""; /// WebGui.FirefoxInteractive: command to start Firefox in interactive mode, like ""$prog --private-window \'$url\' &""; /// WebGui.FirefoxProfile: name of Firefox profile to use; /// WebGui.FirefoxProfilePath: file path to Firefox profile; /// WebGui.FirefoxRandomProfile: usage of random Firefox profile -1 never, 0 - only for headless mode (dflt), 1 - always; /// WebGui.LaunchTmout: time required to start process in seconds (default 30 s); /// WebGui.OperationTmout: time required to perform WebWindow operation like execute command or update drawings; /// WebGui.RecordData: if specified enables data recording for each web window 0 - off, 1 - on; /// WebGui.JsonComp: compression factor for JSON conversion, if not specified - each widget uses own default values; /// WebGui.ForceHttp: 0 - off (default), 1 - always create real http server to run web window; /// WebGui.Console: -1 - output only console.error(), 0 - add console.warn(), 1 - add console.log() output; /// WebGui.ConnCredits: 10 - number of packets which can be send by server or client without acknowledge from receiving side; /// WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/1.128.0/; /// WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified; /// WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3; ///; /// THttpServer-related parameters documented in \ref CreateServer method",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:2313,Deployability,update,update,2313,"start chrome in batch, used for image production, like ""$prog --headless --disable-gpu $geometry $url""; /// WebGui.ChromeHeadless: command to start chrome in headless mode, like ""fork: --headless --disable-gpu $geometry $url""; /// WebGui.ChromeInteractive: command to start chrome in interactive mode, like ""$prog $geometry --app=\'$url\' &""; /// WebGui.Firefox: full path to Mozilla Firefox executable; /// WebGui.FirefoxHeadless: command to start Firefox in headless mode, like ""fork:--headless --private-window --no-remote $profile $url""; /// WebGui.FirefoxInteractive: command to start Firefox in interactive mode, like ""$prog --private-window \'$url\' &""; /// WebGui.FirefoxProfile: name of Firefox profile to use; /// WebGui.FirefoxProfilePath: file path to Firefox profile; /// WebGui.FirefoxRandomProfile: usage of random Firefox profile -1 never, 0 - only for headless mode (dflt), 1 - always; /// WebGui.LaunchTmout: time required to start process in seconds (default 30 s); /// WebGui.OperationTmout: time required to perform WebWindow operation like execute command or update drawings; /// WebGui.RecordData: if specified enables data recording for each web window 0 - off, 1 - on; /// WebGui.JsonComp: compression factor for JSON conversion, if not specified - each widget uses own default values; /// WebGui.ForceHttp: 0 - off (default), 1 - always create real http server to run web window; /// WebGui.Console: -1 - output only console.error(), 0 - add console.warn(), 1 - add console.log() output; /// WebGui.ConnCredits: 10 - number of packets which can be send by server or client without acknowledge from receiving side; /// WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/1.128.0/; /// WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified; /// WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3; ///; /// THttpServer-related parameters documented in \ref CreateServer method",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:485,Modifiability,config,configured,485,"///////////////////////////////////////////////////////////////////////////////////////////////////; /// Show web window in specified location.; ///; /// \param[inout] win web window by reference; /// \param user_args specifies where and how display web window; ///; /// As display args one can use string like ""firefox"" or ""chrome"" - these are two main supported web browsers.; /// See RWebDisplayArgs::SetBrowserKind() for all available options. Default value for the browser can be configured; /// when starting root with --web argument like: ""root --web=chrome"". When root started in web server mode ""root --web=server"",; /// no any web browser will be started - just URL will be printout, which can be entered in any running web browser; ///; /// If allowed, same window can be displayed several times (like for RCanvas or TCanvas); ///; /// Following parameters can be configured in rootrc file:; ///; /// WebGui.Display: kind of display like chrome or firefox or browser, can be overwritten by --web=value command line argument; /// WebGui.OnetimeKey: if configured requires unique key every time window is connected (default yes); /// WebGui.Chrome: full path to Google Chrome executable; /// WebGui.ChromeBatch: command to start chrome in batch, used for image production, like ""$prog --headless --disable-gpu $geometry $url""; /// WebGui.ChromeHeadless: command to start chrome in headless mode, like ""fork: --headless --disable-gpu $geometry $url""; /// WebGui.ChromeInteractive: command to start chrome in interactive mode, like ""$prog $geometry --app=\'$url\' &""; /// WebGui.Firefox: full path to Mozilla Firefox executable; /// WebGui.FirefoxHeadless: command to start Firefox in headless mode, like ""fork:--headless --private-window --no-remote $profile $url""; /// WebGui.FirefoxInteractive: command to start Firefox in interactive mode, like ""$prog --private-window \'$url\' &""; /// WebGui.FirefoxProfile: name of Firefox profile to use; /// WebGui.FirefoxProfilePath: file path to Firef",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:875,Modifiability,config,configured,875,"///////////////////////////////////////////////////////////////////////////////////////////////////; /// Show web window in specified location.; ///; /// \param[inout] win web window by reference; /// \param user_args specifies where and how display web window; ///; /// As display args one can use string like ""firefox"" or ""chrome"" - these are two main supported web browsers.; /// See RWebDisplayArgs::SetBrowserKind() for all available options. Default value for the browser can be configured; /// when starting root with --web argument like: ""root --web=chrome"". When root started in web server mode ""root --web=server"",; /// no any web browser will be started - just URL will be printout, which can be entered in any running web browser; ///; /// If allowed, same window can be displayed several times (like for RCanvas or TCanvas); ///; /// Following parameters can be configured in rootrc file:; ///; /// WebGui.Display: kind of display like chrome or firefox or browser, can be overwritten by --web=value command line argument; /// WebGui.OnetimeKey: if configured requires unique key every time window is connected (default yes); /// WebGui.Chrome: full path to Google Chrome executable; /// WebGui.ChromeBatch: command to start chrome in batch, used for image production, like ""$prog --headless --disable-gpu $geometry $url""; /// WebGui.ChromeHeadless: command to start chrome in headless mode, like ""fork: --headless --disable-gpu $geometry $url""; /// WebGui.ChromeInteractive: command to start chrome in interactive mode, like ""$prog $geometry --app=\'$url\' &""; /// WebGui.Firefox: full path to Mozilla Firefox executable; /// WebGui.FirefoxHeadless: command to start Firefox in headless mode, like ""fork:--headless --private-window --no-remote $profile $url""; /// WebGui.FirefoxInteractive: command to start Firefox in interactive mode, like ""$prog --private-window \'$url\' &""; /// WebGui.FirefoxProfile: name of Firefox profile to use; /// WebGui.FirefoxProfilePath: file path to Firef",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:1062,Modifiability,config,configured,1062,"/; /// Show web window in specified location.; ///; /// \param[inout] win web window by reference; /// \param user_args specifies where and how display web window; ///; /// As display args one can use string like ""firefox"" or ""chrome"" - these are two main supported web browsers.; /// See RWebDisplayArgs::SetBrowserKind() for all available options. Default value for the browser can be configured; /// when starting root with --web argument like: ""root --web=chrome"". When root started in web server mode ""root --web=server"",; /// no any web browser will be started - just URL will be printout, which can be entered in any running web browser; ///; /// If allowed, same window can be displayed several times (like for RCanvas or TCanvas); ///; /// Following parameters can be configured in rootrc file:; ///; /// WebGui.Display: kind of display like chrome or firefox or browser, can be overwritten by --web=value command line argument; /// WebGui.OnetimeKey: if configured requires unique key every time window is connected (default yes); /// WebGui.Chrome: full path to Google Chrome executable; /// WebGui.ChromeBatch: command to start chrome in batch, used for image production, like ""$prog --headless --disable-gpu $geometry $url""; /// WebGui.ChromeHeadless: command to start chrome in headless mode, like ""fork: --headless --disable-gpu $geometry $url""; /// WebGui.ChromeInteractive: command to start chrome in interactive mode, like ""$prog $geometry --app=\'$url\' &""; /// WebGui.Firefox: full path to Mozilla Firefox executable; /// WebGui.FirefoxHeadless: command to start Firefox in headless mode, like ""fork:--headless --private-window --no-remote $profile $url""; /// WebGui.FirefoxInteractive: command to start Firefox in interactive mode, like ""$prog --private-window \'$url\' &""; /// WebGui.FirefoxProfile: name of Firefox profile to use; /// WebGui.FirefoxProfilePath: file path to Firefox profile; /// WebGui.FirefoxRandomProfile: usage of random Firefox profile -1 never, 0 - only fo",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:2261,Performance,perform,perform,2261,"start chrome in batch, used for image production, like ""$prog --headless --disable-gpu $geometry $url""; /// WebGui.ChromeHeadless: command to start chrome in headless mode, like ""fork: --headless --disable-gpu $geometry $url""; /// WebGui.ChromeInteractive: command to start chrome in interactive mode, like ""$prog $geometry --app=\'$url\' &""; /// WebGui.Firefox: full path to Mozilla Firefox executable; /// WebGui.FirefoxHeadless: command to start Firefox in headless mode, like ""fork:--headless --private-window --no-remote $profile $url""; /// WebGui.FirefoxInteractive: command to start Firefox in interactive mode, like ""$prog --private-window \'$url\' &""; /// WebGui.FirefoxProfile: name of Firefox profile to use; /// WebGui.FirefoxProfilePath: file path to Firefox profile; /// WebGui.FirefoxRandomProfile: usage of random Firefox profile -1 never, 0 - only for headless mode (dflt), 1 - always; /// WebGui.LaunchTmout: time required to start process in seconds (default 30 s); /// WebGui.OperationTmout: time required to perform WebWindow operation like execute command or update drawings; /// WebGui.RecordData: if specified enables data recording for each web window 0 - off, 1 - on; /// WebGui.JsonComp: compression factor for JSON conversion, if not specified - each widget uses own default values; /// WebGui.ForceHttp: 0 - off (default), 1 - always create real http server to run web window; /// WebGui.Console: -1 - output only console.error(), 0 - add console.warn(), 1 - add console.log() output; /// WebGui.ConnCredits: 10 - number of packets which can be send by server or client without acknowledge from receiving side; /// WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/1.128.0/; /// WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified; /// WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3; ///; /// THttpServer-related parameters documented in \ref CreateServer method",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:3013,Performance,load,loaded,3013,"start chrome in batch, used for image production, like ""$prog --headless --disable-gpu $geometry $url""; /// WebGui.ChromeHeadless: command to start chrome in headless mode, like ""fork: --headless --disable-gpu $geometry $url""; /// WebGui.ChromeInteractive: command to start chrome in interactive mode, like ""$prog $geometry --app=\'$url\' &""; /// WebGui.Firefox: full path to Mozilla Firefox executable; /// WebGui.FirefoxHeadless: command to start Firefox in headless mode, like ""fork:--headless --private-window --no-remote $profile $url""; /// WebGui.FirefoxInteractive: command to start Firefox in interactive mode, like ""$prog --private-window \'$url\' &""; /// WebGui.FirefoxProfile: name of Firefox profile to use; /// WebGui.FirefoxProfilePath: file path to Firefox profile; /// WebGui.FirefoxRandomProfile: usage of random Firefox profile -1 never, 0 - only for headless mode (dflt), 1 - always; /// WebGui.LaunchTmout: time required to start process in seconds (default 30 s); /// WebGui.OperationTmout: time required to perform WebWindow operation like execute command or update drawings; /// WebGui.RecordData: if specified enables data recording for each web window 0 - off, 1 - on; /// WebGui.JsonComp: compression factor for JSON conversion, if not specified - each widget uses own default values; /// WebGui.ForceHttp: 0 - off (default), 1 - always create real http server to run web window; /// WebGui.Console: -1 - output only console.error(), 0 - add console.warn(), 1 - add console.log() output; /// WebGui.ConnCredits: 10 - number of packets which can be send by server or client without acknowledge from receiving side; /// WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/1.128.0/; /// WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified; /// WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3; ///; /// THttpServer-related parameters documented in \ref CreateServer method",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:2732,Testability,log,log,2732,"start chrome in batch, used for image production, like ""$prog --headless --disable-gpu $geometry $url""; /// WebGui.ChromeHeadless: command to start chrome in headless mode, like ""fork: --headless --disable-gpu $geometry $url""; /// WebGui.ChromeInteractive: command to start chrome in interactive mode, like ""$prog $geometry --app=\'$url\' &""; /// WebGui.Firefox: full path to Mozilla Firefox executable; /// WebGui.FirefoxHeadless: command to start Firefox in headless mode, like ""fork:--headless --private-window --no-remote $profile $url""; /// WebGui.FirefoxInteractive: command to start Firefox in interactive mode, like ""$prog --private-window \'$url\' &""; /// WebGui.FirefoxProfile: name of Firefox profile to use; /// WebGui.FirefoxProfilePath: file path to Firefox profile; /// WebGui.FirefoxRandomProfile: usage of random Firefox profile -1 never, 0 - only for headless mode (dflt), 1 - always; /// WebGui.LaunchTmout: time required to start process in seconds (default 30 s); /// WebGui.OperationTmout: time required to perform WebWindow operation like execute command or update drawings; /// WebGui.RecordData: if specified enables data recording for each web window 0 - off, 1 - on; /// WebGui.JsonComp: compression factor for JSON conversion, if not specified - each widget uses own default values; /// WebGui.ForceHttp: 0 - off (default), 1 - always create real http server to run web window; /// WebGui.Console: -1 - output only console.error(), 0 - add console.warn(), 1 - add console.log() output; /// WebGui.ConnCredits: 10 - number of packets which can be send by server or client without acknowledge from receiving side; /// WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/1.128.0/; /// WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified; /// WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3; ///; /// THttpServer-related parameters documented in \ref CreateServer method",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:23,Availability,failure,failure,23,"// empty url indicates failure, which already printed by GetUrl method",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowsManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowWSHandler.hxx:174,Usability,Feedback,Feedback,174,"// Author: Sergey Linev <s.linev@gsi.de>; // Date: 2018-08-20; // Warning: This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowWSHandler.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowWSHandler.hxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowWSHandler.hxx:9,Integrability,wrap,wrapper,9,"/// just wrapper to deliver websockets call-backs to the RWebWindow class",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowWSHandler.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowWSHandler.hxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowWSHandler.hxx:10,Performance,load,loading,10,"// refuse loading of default web page without token",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowWSHandler.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowWSHandler.hxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowWSHandler.hxx:10,Performance,load,loading,10,"// refuse loading of default web page without valid key",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowWSHandler.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowWSHandler.hxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowWSHandler.hxx:60,Integrability,interface,interface,60,"/// returns content of default web-page; /// THttpWSHandler interface",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowWSHandler.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowWSHandler.hxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowWSHandler.hxx:83,Integrability,interface,interface,83,"/// Process websocket request - called from THttpServer thread; /// THttpWSHandler interface",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowWSHandler.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowWSHandler.hxx
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowWSHandler.hxx:27,Performance,multi-thread,multi-threaded,27,"/// React on completion of multi-threaded send operation",MatchSource.CODE_COMMENT,gui/webdisplay/src/RWebWindowWSHandler.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowWSHandler.hxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h:62,Deployability,update,update,62,"/// Function type for signals, invoked when canvas drawing or update is completed",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebCanvas.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h:29,Integrability,message,message,29,"///<! hash of last send draw message, avoid looping",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebCanvas.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h:38,Safety,avoid,avoid,38,"///<! hash of last send draw message, avoid looping",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebCanvas.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h:6,Security,hash,hash,6,"///<! hash of last send draw message, avoid looping",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebCanvas.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h:11,Performance,queue,queue,11,"///<! send queue, processed after sending draw data",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebCanvas.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h:17,Safety,detect,detected,17,"///<! if pad was detected during last scan",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebCanvas.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h:30,Integrability,message,messages,30,"///<! timer to submit control messages",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebCanvas.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h:6,Modifiability,config,configured,6,"///!< configured display",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebCanvas.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h:29,Integrability,message,messages,29,"///<! compression factor for messages send to the client",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebCanvas.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h:39,Deployability,Update,Update,39,"///<! when true, methods like TCanvas::Update will never block",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebCanvas.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h:11,Security,hash,hash,11,"///<! last hash of gStyle",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebCanvas.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h:11,Security,hash,hash,11,"///<! last hash of colors/palette",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebCanvas.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h:33,Deployability,update,updated,33,"///<! signal emitted when canvas updated or state is changed",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebCanvas.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h:45,Performance,perform,performed,45,"///<! signal emitted when simple mouse click performed on the pad",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebCanvas.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h:26,Usability,simpl,simple,26,"///<! signal emitted when simple mouse click performed on the pad",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebCanvas.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h:45,Performance,perform,performed,45,"///<! signal emitted when simple mouse click performed on the pad",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebCanvas.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h:26,Usability,simpl,simple,26,"///<! signal emitted when simple mouse click performed on the pad",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebCanvas.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h:59,Performance,load,load,59,"///<! custom JavaScript code or URL on JavaScript files to load before start drawing",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebCanvas.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h:6,Modifiability,config,configured,6,"///<! configured batch size",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebCanvas.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebControlBar.h:6,Modifiability,config,configured,6,"///!< configured display",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebControlBar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebControlBar.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebPadOptions.h:9,Testability,log,log,9,"///< pad log properties",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebPadOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebPadOptions.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebPadOptions.h:27,Performance,perform,performed,27,"///< when double-click was performed",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebPadOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebPadOptions.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebPadPainter.h:70,Safety,detect,detection,70,"// NOLINT: not allowed to use = default because of TObject::kIsOnHeap detection, see ROOT-10300",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebPadPainter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebPadPainter.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebPadPainter.h:83,Usability,simpl,simply,83,"//Final overrides for TVirtualPadPainter pure virtual functions.; //1. Part, which simply catch attributes.; //Line attributes.",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebPadPainter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebPadPainter.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebPadPainter.h:18,Usability,clear,clear,18,"//Let's make this clear:",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebPadPainter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebPadPainter.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebPadPainter.h:11,Integrability,interface,interface,11,"//Abstract interface for painting in TPad",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebPadPainter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebPadPainter.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebPS.h:18,Usability,clear,clear,18,"//Let's make this clear:",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebPS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebPS.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebSnapshot.h:23,Performance,load,load,23,"///< custom scripts to load",MatchSource.CODE_COMMENT,gui/webgui6/inc/TWebSnapshot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebSnapshot.h
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:25,Integrability,message,messages,25,"/// used to send control messages to clients",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:104,Modifiability,Config,Configure,104,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Configure batch image mode for web graphics.; /// Allows to process many images with single headless browser invocation and increase performance of image production.; /// When many canvases are stored as image in difference places, they first collected in batch and then processed when at least `n`; /// images are prepared. Only then headless browser invoked and create all these images at once.; /// This allows to significantly increase performance of image production in web mode",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:237,Performance,perform,performance,237,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Configure batch image mode for web graphics.; /// Allows to process many images with single headless browser invocation and increase performance of image production.; /// When many canvases are stored as image in difference places, they first collected in batch and then processed when at least `n`; /// images are prepared. Only then headless browser invoked and create all these images at once.; /// This allows to significantly increase performance of image production in web mode",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:544,Performance,perform,performance,544,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Configure batch image mode for web graphics.; /// Allows to process many images with single headless browser invocation and increase performance of image production.; /// When many canvases are stored as image in difference places, they first collected in batch and then processed when at least `n`; /// images are prepared. Only then headless browser invoked and create all these images at once.; /// This allows to significantly increase performance of image production in web mode",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:18,Performance,multi-thread,multi-threaded,18,"// Workaround for multi-threaded environment; // Ensure main thread id picked when canvas implementation is created -; // otherwise it may be assigned in other thread and screw-up gPad access.; // Workaround may not work if main thread id was wrongly initialized before; // This resolves issue https://github.com/root-project/root/issues/15498",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:185,Security,access,access,185,"// Workaround for multi-threaded environment; // Ensure main thread id picked when canvas implementation is created -; // otherwise it may be assigned in other thread and screw-up gPad access.; // Workaround may not work if main thread id was wrongly initialized before; // This resolves issue https://github.com/root-project/root/issues/15498",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:53,Deployability,update,updates,53,"// add special connection which only used to perform updates",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:45,Performance,perform,perform,45,"// add special connection which only used to perform updates",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:390,Testability,test,test,390,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Add font to static list of fonts supported by the canvas; /// Name specifies name of the font, second is font file with .ttf or .woff2 extension; /// Only True Type Fonts (ttf) are supported by PDF; /// Returns font index which can be used in; /// auto font_indx = TWebCanvas::AddFont(""test"", ""test.ttf"", 2);; /// gStyle->SetStatFont(font_indx);",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:398,Testability,test,test,398,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Add font to static list of fonts supported by the canvas; /// Name specifies name of the font, second is font file with .ttf or .woff2 extension; /// Only True Type Fonts (ttf) are supported by PDF; /// Returns font index which can be used in; /// auto font_indx = TWebCanvas::AddFont(""test"", ""test.ttf"", 2);; /// gStyle->SetStatFont(font_indx);",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:35,Usability,simpl,simplify,35,"// can be handled via TWebPainter, simplify colors handling",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:13,Modifiability,inherit,inheritance,13,"// now check inheritance only for configured classes",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:34,Modifiability,config,configured,34,"// now check inheritance only for configured classes",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:104,Modifiability,Config,Configures,104,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Configures custom script for canvas.; /// If started with ""modules:"" prefix, module(s) will be imported with `loadModules` function of JSROOT.; /// If custom path was configured in RWebWindowsManager::AddServerLocation, it can be used in module paths.; /// If started with ""load:"" prefix, code will be loaded with `loadScript` function of JSROOT (old, deprecated way); /// Script also can be a plain JavaScript code which imports JSROOT and provides draw function for custom classes; /// See tutorials/webgui/custom/custom.mjs demonstrating such example",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:271,Modifiability,config,configured,271,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Configures custom script for canvas.; /// If started with ""modules:"" prefix, module(s) will be imported with `loadModules` function of JSROOT.; /// If custom path was configured in RWebWindowsManager::AddServerLocation, it can be used in module paths.; /// If started with ""load:"" prefix, code will be loaded with `loadScript` function of JSROOT (old, deprecated way); /// Script also can be a plain JavaScript code which imports JSROOT and provides draw function for custom classes; /// See tutorials/webgui/custom/custom.mjs demonstrating such example",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:214,Performance,load,loadModules,214,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Configures custom script for canvas.; /// If started with ""modules:"" prefix, module(s) will be imported with `loadModules` function of JSROOT.; /// If custom path was configured in RWebWindowsManager::AddServerLocation, it can be used in module paths.; /// If started with ""load:"" prefix, code will be loaded with `loadScript` function of JSROOT (old, deprecated way); /// Script also can be a plain JavaScript code which imports JSROOT and provides draw function for custom classes; /// See tutorials/webgui/custom/custom.mjs demonstrating such example",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:378,Performance,load,load,378,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Configures custom script for canvas.; /// If started with ""modules:"" prefix, module(s) will be imported with `loadModules` function of JSROOT.; /// If custom path was configured in RWebWindowsManager::AddServerLocation, it can be used in module paths.; /// If started with ""load:"" prefix, code will be loaded with `loadScript` function of JSROOT (old, deprecated way); /// Script also can be a plain JavaScript code which imports JSROOT and provides draw function for custom classes; /// See tutorials/webgui/custom/custom.mjs demonstrating such example",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:406,Performance,load,loaded,406,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Configures custom script for canvas.; /// If started with ""modules:"" prefix, module(s) will be imported with `loadModules` function of JSROOT.; /// If custom path was configured in RWebWindowsManager::AddServerLocation, it can be used in module paths.; /// If started with ""load:"" prefix, code will be loaded with `loadScript` function of JSROOT (old, deprecated way); /// Script also can be a plain JavaScript code which imports JSROOT and provides draw function for custom classes; /// See tutorials/webgui/custom/custom.mjs demonstrating such example",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:419,Performance,load,loadScript,419,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Configures custom script for canvas.; /// If started with ""modules:"" prefix, module(s) will be imported with `loadModules` function of JSROOT.; /// If custom path was configured in RWebWindowsManager::AddServerLocation, it can be used in module paths.; /// If started with ""load:"" prefix, code will be loaded with `loadScript` function of JSROOT (old, deprecated way); /// Script also can be a plain JavaScript code which imports JSROOT and provides draw function for custom classes; /// See tutorials/webgui/custom/custom.mjs demonstrating such example",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:112,Modifiability,config,configured,112,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Returns configured custom script",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:194,Performance,load,load,194,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// For batch mode special handling of scripts are required; /// Headless browser not able to load modules from the file system; /// Therefore custom web-canvas modules and scripts has to be loaded in advance and processed",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:291,Performance,load,loaded,291,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// For batch mode special handling of scripts are required; /// Headless browser not able to load modules from the file system; /// Therefore custom web-canvas modules and scripts has to be loaded in advance and processed",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:55,Modifiability,config,configuring,55,"// painter is not necessary for batch canvas, but keep configuring it for a while",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:15,Performance,perform,perform,15,"// Set view to perform first auto-range (scaling) pass",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:114,Security,hash,hash,114,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Calculate hash function for all colors and palette",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:52,Deployability,Update,Update,52,"// do not set optfit and optstat, they calling pad->Update,; // values correctly set already in TPaveStats constructor; // stats->SetOptFit(gStyle->GetOptFit());; // stats->SetOptStat(gStyle->GetOptStat());",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:44,Security,hash,hash,44,"// check that colors really changing, using hash",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:32,Performance,perform,performed,32,"// add colors after painting is performed - new colors may be generated only during painting",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:30,Performance,perform,perform,30,"// now hide all primitives to perform I/O",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:116,Integrability,message,message,116,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Add control message for specified connection; /// Same control message can be overwritten many time before it really sends to the client; /// If connid == 0, message will be add to all connections; /// After ctrl message is add to the output, short timer is activated and message send afterwards",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:167,Integrability,message,message,167,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Add control message for specified connection; /// Same control message can be overwritten many time before it really sends to the client; /// If connid == 0, message will be add to all connections; /// After ctrl message is add to the output, short timer is activated and message send afterwards",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:262,Integrability,message,message,262,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Add control message for specified connection; /// Same control message can be overwritten many time before it really sends to the client; /// If connid == 0, message will be add to all connections; /// After ctrl message is add to the output, short timer is activated and message send afterwards",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:317,Integrability,message,message,317,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Add control message for specified connection; /// Same control message can be overwritten many time before it really sends to the client; /// If connid == 0, message will be add to all connections; /// After ctrl message is add to the output, short timer is activated and message send afterwards",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:376,Integrability,message,message,376,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Add control message for specified connection; /// Same control message can be overwritten many time before it really sends to the client; /// If connid == 0, message will be add to all connections; /// After ctrl message is add to the output, short timer is activated and message send afterwards",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:108,Integrability,message,message,108,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Add message to send queue for specified connection; /// If connid == 0, message will be add to all connections",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:176,Integrability,message,message,176,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Add message to send queue for specified connection; /// If connid == 0, message will be add to all connections",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:124,Performance,queue,queue,124,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Add message to send queue for specified connection; /// If connid == 0, message will be add to all connections",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:24,Integrability,message,messages,24,"// check if any control messages still there to keep timer running",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:3,Modifiability,config,configure,3,"// configure connections limit",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:140,Deployability,toggle,toggle,140,"//////////////////////////////////////////////////////////////////////////////////////////; /// Function used to send command to browser to toggle menu, toolbar, editors, ...",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:23,Integrability,message,message,23,"// only if get OPTIONS message from client allow to change gPad",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:3,Safety,avoid,avoid,3,"// avoid call of original methods, set members directly; // pad->Range(r.px1, r.py1, r.px2, r.py2);; // pad->RangeAxis(r.ux1, r.uy1, r.ux2, r.uy2);",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:48,Deployability,update,update,48,"// without special objects no need for explicit update of the pad",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:148,Integrability,message,message,148,"//////////////////////////////////////////////////////////////////////////////////////////; /// Handle data from web browser; /// Returns kFALSE if message was not processed",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:106,Integrability,message,messages,106,"///////////////////////////////////////////////////////////////////////////////////////; // all following messages are not allowed in readonly mode or for secondary connections",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:27,Safety,avoid,avoid,27,"// set members directly to avoid redrawing of the client again",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:11,Integrability,message,message,11,"// unknown message, probably should be processed by other implementation",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:3,Usability,clear,clear,3,"// clear temporary flags",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:3,Usability,simpl,simple,3,"// simple polling loop until specified version delivered to the clients; // first 500 loops done without sleep, then with 1ms sleep and last 500 with 100 ms sleep",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:22,Security,access,access,22,"// one may require to access n-th object",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:161,Modifiability,plugin,plugin,161,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Static method to create TWebCanvas instance; /// Used by plugin manager",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebCanvas.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebControlBar.cxx:138,Deployability,configurat,configuration,138,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Send initial message with buttons configuration",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebControlBar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebControlBar.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebControlBar.cxx:117,Integrability,message,message,117,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Send initial message with buttons configuration",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebControlBar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebControlBar.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebControlBar.cxx:138,Modifiability,config,configuration,138,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Send initial message with buttons configuration",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebControlBar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebControlBar.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebControlBar.cxx:148,Integrability,message,message,148,"//////////////////////////////////////////////////////////////////////////////////////////; /// Handle data from web browser; /// Returns kFALSE if message was not processed",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebControlBar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebControlBar.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebControlBar.cxx:3,Modifiability,config,configure,3,"// configure connections limit",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebControlBar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebControlBar.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebControlBar.cxx:165,Modifiability,plugin,plugin,165,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Static method to create TWebControlBar instance; /// Used by plugin manager",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebControlBar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebControlBar.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebMenuItem.cxx:49,Deployability,toggle,toggle,49,"// execute getter method to get current state of toggle item",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebMenuItem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebMenuItem.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebMenuItem.cxx:3,Availability,Error,Error,3,"// Error(""CheckModifiedFlag"", ""Cannot get toggle value with getter %s"", getter.Data());",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebMenuItem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebMenuItem.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebMenuItem.cxx:42,Deployability,toggle,toggle,42,"// Error(""CheckModifiedFlag"", ""Cannot get toggle value with getter %s"", getter.Data());",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebMenuItem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebMenuItem.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebPadPainter.cxx:94,Usability,simpl,simple,94,"////////////////////////////////////////////////////////////////////////////////; /// Paint a simple line.",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebPadPainter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebPadPainter.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebPadPainter.cxx:94,Usability,simpl,simple,94,"////////////////////////////////////////////////////////////////////////////////; /// Paint a simple line in normalized coordinates.",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebPadPainter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebPadPainter.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebPadPainter.cxx:94,Usability,simpl,simple,94,"////////////////////////////////////////////////////////////////////////////////; /// Paint a simple box.",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebPadPainter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebPadPainter.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebPainting.cxx:254,Usability,simpl,simple,254,"///////////////////////////////////////////////////////////////////////////////////////; /// Add next custom operator to painting; /// Operations are separated by semicolons; /// Following operations are supported:; /// t - text; /// h - text coded into simple hex; /// r - rectangle; /// b - rectangular fill region; /// l - polyline; /// f - poly fill region; /// m - poly marker; /// z - line attributes; /// y - fill attributes; /// x - marker attributes; /// o - text attributes; /// After operation code optional arguments can be append like length of operation or coded text; /// Each operation may use data from binary float buffer",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebPainting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebPainting.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebPainting.cxx:158,Usability,simpl,simple,158,"///////////////////////////////////////////////////////////////////////////////////////; /// Create text operation; /// If text include special symbols - use simple hex coding",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebPainting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebPainting.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebPainting.cxx:7,Usability,simpl,simple,7,"// use simple hex coding while special symbols are hard to handle",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebPainting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebPainting.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebSnapshot.cxx:143,Security,Hash,Hash,143,"///////////////////////////////////////////////////////////////////////////////////////////; /// SetUse pointer to assign object id - TString::Hash",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebSnapshot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebSnapshot.cxx
https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebSnapshot.cxx:140,Security,Hash,Hash,140,"///////////////////////////////////////////////////////////////////////////////////////////; /// Use pointer to assign object id - TString::Hash",MatchSource.CODE_COMMENT,gui/webgui6/src/TWebSnapshot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebSnapshot.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hbook/inc/THbookFile.h:116,Integrability,interface,interface,116,"//////////////////////////////////////////////////////////////////////////; // //; // THbookFile //; // //; // ROOT interface to Hbook/PAW files //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,hist/hbook/inc/THbookFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hbook/inc/THbookFile.h
https://github.com/root-project/root/tree/v6-32-06/hist/hbook/inc/THbookFile.h:10,Testability,log,logical,10,"//Fortran logical unit for this file",MatchSource.CODE_COMMENT,hist/hbook/inc/THbookFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hbook/inc/THbookFile.h
https://github.com/root-project/root/tree/v6-32-06/hist/hbook/inc/THbookFile.h:7,Integrability,interface,interface,7,"//ROOT interface to Hbook/PAW files",MatchSource.CODE_COMMENT,hist/hbook/inc/THbookFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hbook/inc/THbookFile.h
https://github.com/root-project/root/tree/v6-32-06/hist/hbook/inc/THbookTree.h:113,Integrability,wrap,wrapper,113,"//////////////////////////////////////////////////////////////////////////; // //; // THbookTree //; // //; // A wrapper class supporting Hbook ntuples (CWN and RWN). //; // The normal TTree calls can be used, including TTree::Draw(). //; // Data read directly from the Hbook file via THbookFile. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,hist/hbook/inc/THbookTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hbook/inc/THbookTree.h
https://github.com/root-project/root/tree/v6-32-06/hist/hbook/inc/THbookTree.h:4,Integrability,wrap,wrapper,4,"//A wrapper class supporting Hbook ntuples (CWN and RWN)",MatchSource.CODE_COMMENT,hist/hbook/inc/THbookTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hbook/inc/THbookTree.h
https://github.com/root-project/root/tree/v6-32-06/hist/hbook/src/THbookBranch.cxx:94,Integrability,interface,interface,94,"////////////////////////////////////////////////////////////////////////////////; /// Browser interface.",MatchSource.CODE_COMMENT,hist/hbook/src/THbookBranch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hbook/src/THbookBranch.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hbook/src/THbookBranch.cxx:17,Modifiability,variab,variable,17,"//only for first variable of the block",MatchSource.CODE_COMMENT,hist/hbook/src/THbookBranch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hbook/src/THbookBranch.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hbook/src/THbookFile.cxx:470,Integrability,interface,interface,470,"// @(#)root/hbook:$Id$; // Author: Rene Brun 18/02/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class THbookFile; \ingroup Hist; This class is an interface to the Hbook objects in Hbook files.; Any Hbook object (1-D, 2-D, Profile, RWN or CWN can be read. NB: a THbookFile can only be used in READ mode; Use the utility in $ROOTSYS/bin/h2root to convert Hbook to Root. Example of use:. gSystem->Load(""libHbook"");; THbookFile f(""myfile.hbook"");; f.ls();; TH1F *h1 = (TH1F*)f.Get(1); //import histogram ID=1 in h1; h1->Fit(""gaus"");; THbookTree *T = (THbookTree*)f.Get(111); //import ntuple header; T->Print(); //show the Hbook ntuple variables; T->Draw(""x"",""y<0""); // as in normal TTree::Draw. THbookFile can be browsed via TBrowser.; */",MatchSource.CODE_COMMENT,hist/hbook/src/THbookFile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hbook/src/THbookFile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hbook/src/THbookFile.cxx:955,Modifiability,variab,variables,955,"// @(#)root/hbook:$Id$; // Author: Rene Brun 18/02/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class THbookFile; \ingroup Hist; This class is an interface to the Hbook objects in Hbook files.; Any Hbook object (1-D, 2-D, Profile, RWN or CWN can be read. NB: a THbookFile can only be used in READ mode; Use the utility in $ROOTSYS/bin/h2root to convert Hbook to Root. Example of use:. gSystem->Load(""libHbook"");; THbookFile f(""myfile.hbook"");; f.ls();; TH1F *h1 = (TH1F*)f.Get(1); //import histogram ID=1 in h1; h1->Fit(""gaus"");; THbookTree *T = (THbookTree*)f.Get(111); //import ntuple header; T->Print(); //show the Hbook ntuple variables; T->Draw(""x"",""y<0""); // as in normal TTree::Draw. THbookFile can be browsed via TBrowser.; */",MatchSource.CODE_COMMENT,hist/hbook/src/THbookFile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hbook/src/THbookFile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hbook/src/THbookFile.cxx:718,Performance,Load,Load,718,"// @(#)root/hbook:$Id$; // Author: Rene Brun 18/02/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class THbookFile; \ingroup Hist; This class is an interface to the Hbook objects in Hbook files.; Any Hbook object (1-D, 2-D, Profile, RWN or CWN can be read. NB: a THbookFile can only be used in READ mode; Use the utility in $ROOTSYS/bin/h2root to convert Hbook to Root. Example of use:. gSystem->Load(""libHbook"");; THbookFile f(""myfile.hbook"");; f.ls();; TH1F *h1 = (TH1F*)f.Get(1); //import histogram ID=1 in h1; h1->Fit(""gaus"");; THbookTree *T = (THbookTree*)f.Get(111); //import ntuple header; T->Print(); //show the Hbook ntuple variables; T->Draw(""x"",""y<0""); // as in normal TTree::Draw. THbookFile can be browsed via TBrowser.; */",MatchSource.CODE_COMMENT,hist/hbook/src/THbookFile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hbook/src/THbookFile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hbook/src/THbookFile.cxx:14,Testability,log,logical,14,"//find a free logical unit (max 10)",MatchSource.CODE_COMMENT,hist/hbook/src/THbookFile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hbook/src/THbookFile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hbook/src/THbookFile.cxx:185,Modifiability,variab,variables,185,"////////////////////////////////////////////////////////////////////////////////; /// This function is called from the first entry in TTreePlayer::InitLoop; /// It analyzes the list of variables involved in the current query; /// and pre-process the internal Hbook tables to speed-up the search; /// at the next entries.",MatchSource.CODE_COMMENT,hist/hbook/src/THbookFile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hbook/src/THbookFile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hbook/src/THbookTree.cxx:455,Integrability,wrap,wrapper,455,"// @(#)root/hbook:$Id$; // Author: Rene Brun 18/02/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class THbookTree; \ingroup Hist; A wrapper class supporting Hbook ntuples (CWN and RWN).; The normal TTree calls can be used, including TTree::Draw().; Data read directly from the Hbook file via THbookFile. IMPORTANT NOTE; When setting the branch address (via THbookTree::SetBranchAddress); for a branch in an Hbook block containing several names, eg; Hbook block SELEVN with the following variables:. ~~~; ******************************************************************; * 1 * R*4 * * * SELEVN * WGGS; * 2 * R*4 * * * SELEVN * AM12; * 3 * R*4 * * * SELEVN * AM34; * 4 * R*4 * * * SELEVN * AM14; * 5 * R*4 * * * SELEVN * AM32; * 6 * R*4 * * * SELEVN * PtPI(4); * 7 * R*4 * * * SELEVN * PHIPI(4); * 8 * R*4 * * * SELEVN * THTPI(4). one must define a C struct like:; struct {; Float_t Wggs;; Float_t Am12;; Float_t Am34;; Float_t Am14;; Float_t Am32;; Float_t Ptpi[4];; Float_t Phipi[4];; Float_t Thtpi[4];; } event;. and set ONLY the first variable address with:; h96->SetBranchAddress(""Wggs"",&event.Wggs);; ~~~; */",MatchSource.CODE_COMMENT,hist/hbook/src/THbookTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hbook/src/THbookTree.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hbook/src/THbookTree.cxx:810,Modifiability,variab,variables,810,"// @(#)root/hbook:$Id$; // Author: Rene Brun 18/02/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class THbookTree; \ingroup Hist; A wrapper class supporting Hbook ntuples (CWN and RWN).; The normal TTree calls can be used, including TTree::Draw().; Data read directly from the Hbook file via THbookFile. IMPORTANT NOTE; When setting the branch address (via THbookTree::SetBranchAddress); for a branch in an Hbook block containing several names, eg; Hbook block SELEVN with the following variables:. ~~~; ******************************************************************; * 1 * R*4 * * * SELEVN * WGGS; * 2 * R*4 * * * SELEVN * AM12; * 3 * R*4 * * * SELEVN * AM34; * 4 * R*4 * * * SELEVN * AM14; * 5 * R*4 * * * SELEVN * AM32; * 6 * R*4 * * * SELEVN * PtPI(4); * 7 * R*4 * * * SELEVN * PHIPI(4); * 8 * R*4 * * * SELEVN * THTPI(4). one must define a C struct like:; struct {; Float_t Wggs;; Float_t Am12;; Float_t Am34;; Float_t Am14;; Float_t Am32;; Float_t Ptpi[4];; Float_t Phipi[4];; Float_t Thtpi[4];; } event;. and set ONLY the first variable address with:; h96->SetBranchAddress(""Wggs"",&event.Wggs);; ~~~; */",MatchSource.CODE_COMMENT,hist/hbook/src/THbookTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hbook/src/THbookTree.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hbook/src/THbookTree.cxx:1362,Modifiability,variab,variable,1362,"// @(#)root/hbook:$Id$; // Author: Rene Brun 18/02/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class THbookTree; \ingroup Hist; A wrapper class supporting Hbook ntuples (CWN and RWN).; The normal TTree calls can be used, including TTree::Draw().; Data read directly from the Hbook file via THbookFile. IMPORTANT NOTE; When setting the branch address (via THbookTree::SetBranchAddress); for a branch in an Hbook block containing several names, eg; Hbook block SELEVN with the following variables:. ~~~; ******************************************************************; * 1 * R*4 * * * SELEVN * WGGS; * 2 * R*4 * * * SELEVN * AM12; * 3 * R*4 * * * SELEVN * AM34; * 4 * R*4 * * * SELEVN * AM14; * 5 * R*4 * * * SELEVN * AM32; * 6 * R*4 * * * SELEVN * PtPI(4); * 7 * R*4 * * * SELEVN * PHIPI(4); * 8 * R*4 * * * SELEVN * THTPI(4). one must define a C struct like:; struct {; Float_t Wggs;; Float_t Am12;; Float_t Am34;; Float_t Am14;; Float_t Am32;; Float_t Ptpi[4];; Float_t Phipi[4];; Float_t Thtpi[4];; } event;. and set ONLY the first variable address with:; h96->SetBranchAddress(""Wggs"",&event.Wggs);; ~~~; */",MatchSource.CODE_COMMENT,hist/hbook/src/THbookTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hbook/src/THbookTree.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Foption.h:48,Availability,error,error,48,"// ""P"" Use Pearson chi2 built with the expected error instead of the observed ones",MatchSource.CODE_COMMENT,hist/hist/inc/Foption.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Foption.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Foption.h:11,Testability,Log,Log,11,"// ""L"" Use Log Likelihood. Default is chisquare method except fitting THnsparse",MatchSource.CODE_COMMENT,hist/hist/inc/Foption.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Foption.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Foption.h:40,Availability,error,error,40,"// ""W"" Set all the weights to 1. Ignore error bars",MatchSource.CODE_COMMENT,hist/hist/inc/Foption.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Foption.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Foption.h:25,Availability,error,error,25,"// ""E"" Performs a better error evaluation, calling HESSE and MINOS",MatchSource.CODE_COMMENT,hist/hist/inc/Foption.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Foption.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Foption.h:7,Performance,Perform,Performs,7,"// ""E"" Performs a better error evaluation, calling HESSE and MINOS",MatchSource.CODE_COMMENT,hist/hist/inc/Foption.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Foption.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Foption.h:60,Availability,error,error,60,"// ""EX0"" or ""T"" When fitting a TGraphErrors do not consider error in coordinates",MatchSource.CODE_COMMENT,hist/hist/inc/Foption.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Foption.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Foption.h:34,Availability,robust,robust,34,"// ""ROB"" or ""H"": For a TGraph use robust fitting",MatchSource.CODE_COMMENT,hist/hist/inc/Foption.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Foption.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Foption.h:32,Availability,robust,robust,32,"// value of h parameter used in robust fitting",MatchSource.CODE_COMMENT,hist/hist/inc/Foption.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Foption.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/HFitInterface.h:417,Safety,avoid,avoid,417,"// @(#)root/hist:$Id$; // Author: L. Moneta Thu Aug 31 10:40:20 2006; /**********************************************************************; * *; * Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; * *; * *; **********************************************************************/; // Header file for class HFitInterface; // set of free functions used to couple the ROOT data object with the fitting classes; // avoid including this file when running CINT since free functions cannot be re-defined",MatchSource.CODE_COMMENT,hist/hist/inc/HFitInterface.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/HFitInterface.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/HFitInterface.h:117,Usability,simpl,simple,117,/**; compute initial parameter for an exponential function given the fit data; Set the constant and slope assuming a simple exponential going through xmin and xmax; of the data set; */,MatchSource.CODE_COMMENT,hist/hist/inc/HFitInterface.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/HFitInterface.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TAxis.h:17,Modifiability,extend,extended,17,"///< Axis can be extended",MatchSource.CODE_COMMENT,hist/hist/inc/TAxis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TAxis.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TAxis.h:20,Modifiability,variab,variable,20,"// true if axis has variable bin sizes, false otherwise",MatchSource.CODE_COMMENT,hist/hist/inc/TAxis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TAxis.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TAxis.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE* *GETTER=GetRotateTitle",MatchSource.CODE_COMMENT,hist/hist/inc/TAxis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TAxis.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TAxis.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE* *GETTER=GetDecimals",MatchSource.CODE_COMMENT,hist/hist/inc/TAxis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TAxis.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TAxis.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE* *GETTER=GetMoreLogLabels",MatchSource.CODE_COMMENT,hist/hist/inc/TAxis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TAxis.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TAxis.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE* *GETTER=GetNoExponent",MatchSource.CODE_COMMENT,hist/hist/inc/TAxis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TAxis.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TAxis.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE*",MatchSource.CODE_COMMENT,hist/hist/inc/TAxis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TAxis.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TAxis.h:182,Testability,log,log,182,"////////////////////////////////////////////////////////////////////////////////; /// Set the kMoreLogLabels bit flag; /// When this option is selected more labels are drawn when in log scale and there is a small number; /// of decades (<3).; /// The flag (in fBits) is passed to the drawing function TGaxis::PaintAxis",MatchSource.CODE_COMMENT,hist/hist/inc/TAxis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TAxis.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TBackCompFitter.h:13,Integrability,interface,interface,13,"// inherited interface",MatchSource.CODE_COMMENT,hist/hist/inc/TBackCompFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TBackCompFitter.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TBackCompFitter.h:3,Modifiability,inherit,inherited,3,"// inherited interface",MatchSource.CODE_COMMENT,hist/hist/inc/TBackCompFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TBackCompFitter.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TBackCompFitter.h:25,Deployability,configurat,configuration,25,"/// Get reference to Fit configuration (NOTE: it will be invalid when class is deleted)",MatchSource.CODE_COMMENT,hist/hist/inc/TBackCompFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TBackCompFitter.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TBackCompFitter.h:25,Modifiability,config,configuration,25,"/// Get reference to Fit configuration (NOTE: it will be invalid when class is deleted)",MatchSource.CODE_COMMENT,hist/hist/inc/TBackCompFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TBackCompFitter.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TBackCompFitter.h:21,Integrability,interface,interface,21,"// Set FCN using new interface",MatchSource.CODE_COMMENT,hist/hist/inc/TBackCompFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TBackCompFitter.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TBackCompFitter.h:5,Performance,Cache,Cached,5,"///< Cached covariance matrix (NxN)",MatchSource.CODE_COMMENT,hist/hist/inc/TBackCompFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TBackCompFitter.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TBackCompFitter.h:89,Integrability,interface,interface,89,"// Class providing backward compatibility for fitting by implementing the TVirtualFitter interface",MatchSource.CODE_COMMENT,hist/hist/inc/TBackCompFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TBackCompFitter.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TBinomialEfficiencyFitter.h:37,Deployability,integrat,integration,37,"///< Precision required for function integration (option ""I"")",MatchSource.CODE_COMMENT,hist/hist/inc/TBinomialEfficiencyFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TBinomialEfficiencyFitter.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TBinomialEfficiencyFitter.h:37,Integrability,integrat,integration,37,"///< Precision required for function integration (option ""I"")",MatchSource.CODE_COMMENT,hist/hist/inc/TBinomialEfficiencyFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TBinomialEfficiencyFitter.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TF1.h:14,Availability,error,errors,14,"///< Array of errors of the fNpar parameters",MatchSource.CODE_COMMENT,hist/hist/inc/TF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TF1.h:24,Integrability,wrap,wrap,24,"///<! Functor object to wrap any C++ callable object",MatchSource.CODE_COMMENT,hist/hist/inc/TF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TF1.h:23,Integrability,interface,interface,23,"// backward compatible interface",MatchSource.CODE_COMMENT,hist/hist/inc/TF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TF1.h:23,Integrability,interface,interface,23,"// backward compatible interface",MatchSource.CODE_COMMENT,hist/hist/inc/TF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TF1.h:435,Integrability,interface,interfaces,435,"////////////////////////////////////////////////////////////////////////////////; /// Eval for vectorized functions; // template <class T>; // T TF1::Eval(T x, T y, T z, T t) const; // {; // if (fType == EFType::kFormula); // return fFormula->Eval(x, y, z, t);; // T xx[] = {x, y, z, t};; // Double_t *pp = (Double_t *)fParams->GetParameters();; // return ((TF1 *)this)->EvalPar(xx, pp);; // }; // Internal to TF1. Evaluates Templated interfaces",MatchSource.CODE_COMMENT,hist/hist/inc/TF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TF1.h:24,Availability,error,error,24,"// this should throw an error; // we nned to implement a vectorized GetSave(x)",MatchSource.CODE_COMMENT,hist/hist/inc/TF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TF1.h:30,Safety,safe,safety,30,"// Copy parameters for thread safety",MatchSource.CODE_COMMENT,hist/hist/inc/TF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TF1.h:12,Availability,error,error,12,"// check if error has been computer (is not zero)",MatchSource.CODE_COMMENT,hist/hist/inc/TF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFitResult.h:56,Availability,Error,Error,56,"// need to re-implement to solve conflict with TObject::Error",MatchSource.CODE_COMMENT,hist/hist/inc/TFitResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFitResult.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h:46,Safety,avoid,avoid,46,"// order by length - first the longer ones to avoid replacing wrong functions",MatchSource.CODE_COMMENT,hist/hist/inc/TFormula.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h:13,Modifiability,variab,variables,13,"///<! Cached variables",MatchSource.CODE_COMMENT,hist/hist/inc/TFormula.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h:6,Performance,Cache,Cached,6,"///<! Cached variables",MatchSource.CODE_COMMENT,hist/hist/inc/TFormula.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h:14,Modifiability,variab,variable,14,"///<! List of variable names",MatchSource.CODE_COMMENT,hist/hist/inc/TFormula.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h:49,Modifiability,variab,variables,49,"///< Whether we should use vectorized or regular variables; // (we default to false since a lot of functions still cannot be expressed in vectorized form)",MatchSource.CODE_COMMENT,hist/hist/inc/TFormula.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h:34,Integrability,rout,routine,34,"/// Generate gradient computation routine with respect to the parameters.; /// \returns true if a gradient was generated and GradientPar can be called.",MatchSource.CODE_COMMENT,hist/hist/inc/TFormula.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h:33,Integrability,rout,routine,33,"/// Generate hessian computation routine with respect to the parameters.; /// \returns true if a hessian was generated and HessianPar can be called.",MatchSource.CODE_COMMENT,hist/hist/inc/TFormula.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h:97,Modifiability,variab,variables,97,"/// Compute the gradient employing automatic differentiation.; ///; /// \param[in] x - The given variables, if nullptr the already stored; /// variables are used.; /// \param[out] result - The result of the computation wrt each direction.",MatchSource.CODE_COMMENT,hist/hist/inc/TFormula.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h:143,Modifiability,variab,variables,143,"/// Compute the gradient employing automatic differentiation.; ///; /// \param[in] x - The given variables, if nullptr the already stored; /// variables are used.; /// \param[out] result - The result of the computation wrt each direction.",MatchSource.CODE_COMMENT,hist/hist/inc/TFormula.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h:97,Modifiability,variab,variables,97,"/// Compute the gradient employing automatic differentiation.; ///; /// \param[in] x - The given variables, if nullptr the already stored; /// variables are used.; /// \param[out] result - The 2D hessian matrix flattened to form a vector; /// in row-major order.",MatchSource.CODE_COMMENT,hist/hist/inc/TFormula.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h:143,Modifiability,variab,variables,143,"/// Compute the gradient employing automatic differentiation.; ///; /// \param[in] x - The given variables, if nullptr the already stored; /// variables are used.; /// \param[out] result - The 2D hessian matrix flattened to form a vector; /// in row-major order.",MatchSource.CODE_COMMENT,hist/hist/inc/TFormula.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h:109,Modifiability,variab,variables,109,"////////////////////////////////////////////////////////////////////////////////; /// Set first 1, 2, 3 or 4 variables (e.g. x, y, z and t); /// and evaluate formula.",MatchSource.CODE_COMMENT,hist/hist/inc/TFormula.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFractionFitter.h:30,Security,access,access,30,"// This global function needs access to computeFCN(); //friend void TFractionFitFCN(Int_t& npar, Double_t* gin, Double_t& f, Double_t* par, Int_t flag);; // Goodness of fit",MatchSource.CODE_COMMENT,hist/hist/inc/TFractionFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFractionFitter.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFractionFitter.h:6,Safety,predict,predictions,6,"// MC predictions (smeared templates)",MatchSource.CODE_COMMENT,hist/hist/inc/TFractionFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFractionFitter.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFractionFitter.h:40,Performance,perform,performed,40,"///< Flags whether a valid fit has been performed",MatchSource.CODE_COMMENT,hist/hist/inc/TFractionFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFractionFitter.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFractionFitter.h:26,Safety,predict,predictions,26,"///< Array of pointers to predictions of real template distributions; ///@name Histograms; ///@{",MatchSource.CODE_COMMENT,hist/hist/inc/TFractionFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFractionFitter.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFractionFitter.h:53,Safety,predict,predictions,53,"///< Pointer to histogram containing summed template predictions",MatchSource.CODE_COMMENT,hist/hist/inc/TFractionFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFractionFitter.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFractionFitter.h:49,Testability,log,log-likelihood,49,"//; // TFractionFitFCN; //; // Computes negative log-likelihood for TFractionFitter; //",MatchSource.CODE_COMMENT,hist/hist/inc/TFractionFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFractionFitter.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE* *GETTER=GetEditable",MatchSource.CODE_COMMENT,hist/hist/inc/TGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE* *GETTER=IsHighlight",MatchSource.CODE_COMMENT,hist/hist/inc/TGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DAsymmErrors.h:147,Availability,error,error,147,"//////////////////////////////////////////////////////////////////////////; // //; // TGraph2DAsymmErrors //; // //; // a 2D Graph with asymmetric error bars //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,hist/hist/inc/TGraph2DAsymmErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DAsymmErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DAsymmErrors.h:30,Availability,error,errors,30,"///<[fNpoints] array of X low errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraph2DAsymmErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DAsymmErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DAsymmErrors.h:31,Availability,error,errors,31,"///<[fNpoints] array of X high errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraph2DAsymmErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DAsymmErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DAsymmErrors.h:30,Availability,error,errors,30,"///<[fNpoints] array of Y low errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraph2DAsymmErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DAsymmErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DAsymmErrors.h:31,Availability,error,errors,31,"///<[fNpoints] array of Y high errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraph2DAsymmErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DAsymmErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DAsymmErrors.h:30,Availability,error,errors,30,"///<[fNpoints] array of Z low errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraph2DAsymmErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DAsymmErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DAsymmErrors.h:31,Availability,error,errors,31,"///<[fNpoints] array of Z high errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraph2DAsymmErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DAsymmErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DAsymmErrors.h:18,Availability,error,error,18,"//A 2D graph with error bars",MatchSource.CODE_COMMENT,hist/hist/inc/TGraph2DAsymmErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DAsymmErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DErrors.h:131,Availability,error,error,131,"//////////////////////////////////////////////////////////////////////////; // //; // TGraph2DErrors //; // //; // a 2D Graph with error bars //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,hist/hist/inc/TGraph2DErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DErrors.h:26,Availability,error,errors,26,"///<[fNpoints] array of X errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraph2DErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DErrors.h:26,Availability,error,errors,26,"///<[fNpoints] array of Y errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraph2DErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DErrors.h:26,Availability,error,errors,26,"///<[fNpoints] array of Z errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraph2DErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DErrors.h:18,Availability,error,error,18,"//A 2D graph with error bars",MatchSource.CODE_COMMENT,hist/hist/inc/TGraph2DErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraph2DErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphAsymmErrors.h:142,Availability,error,error,142,"//////////////////////////////////////////////////////////////////////////; // //; // TGraphAsymmErrors //; // //; // a Graph with asymmetric error bars //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphAsymmErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphAsymmErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphAsymmErrors.h:30,Availability,error,errors,30,"///<[fNpoints] array of X low errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphAsymmErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphAsymmErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphAsymmErrors.h:31,Availability,error,errors,31,"///<[fNpoints] array of X high errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphAsymmErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphAsymmErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphAsymmErrors.h:30,Availability,error,errors,30,"///<[fNpoints] array of Y low errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphAsymmErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphAsymmErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphAsymmErrors.h:31,Availability,error,errors,31,"///<[fNpoints] array of Y high errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphAsymmErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphAsymmErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphAsymmErrors.h:26,Availability,error,error,26,"//A graph with asymmetric error bars",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphAsymmErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphAsymmErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphBentErrors.h:147,Availability,error,error,147,"//////////////////////////////////////////////////////////////////////////; // //; // TGraphBentErrors //; // //; // a Graph with bent, asymmetric error bars //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphBentErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphBentErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphBentErrors.h:30,Availability,error,errors,30,"///<[fNpoints] array of X low errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphBentErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphBentErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphBentErrors.h:31,Availability,error,errors,31,"///<[fNpoints] array of X high errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphBentErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphBentErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphBentErrors.h:30,Availability,error,errors,30,"///<[fNpoints] array of Y low errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphBentErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphBentErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphBentErrors.h:31,Availability,error,errors,31,"///<[fNpoints] array of Y high errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphBentErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphBentErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphBentErrors.h:32,Availability,error,error,32,"//A graph with bent, asymmetric error bars",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphBentErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphBentErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphDelaunay.h:42,Performance,perform,performed,42,"///<! True if FindAllTriangles() has been performed on fGraph2D",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphDelaunay.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphDelaunay.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphDelaunay.h:70,Performance,perform,performed,70,"///<! True if CreateTrianglesDataStructure() and FindHull() have been performed",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphDelaunay.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphDelaunay.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphErrors.h:126,Availability,error,error,126,"//////////////////////////////////////////////////////////////////////////; // //; // TGraphErrors //; // //; // a Graph with error bars //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphErrors.h:26,Availability,error,errors,26,"///<[fNpoints] array of X errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphErrors.h:26,Availability,error,errors,26,"///<[fNpoints] array of Y errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphErrors.h:15,Availability,error,error,15,"//A graph with error bars",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h:142,Availability,error,error,142,"//////////////////////////////////////////////////////////////////////////; // //; // TGraphMultiErrors //; // //; // a Graph with asymmetric error bars and multiple y errors //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphMultiErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h:168,Availability,error,errors,168,"//////////////////////////////////////////////////////////////////////////; // //; // TGraphMultiErrors //; // //; // a Graph with asymmetric error bars and multiple y errors //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphMultiErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h:31,Availability,error,errors,31,"///< The amount of different y-errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphMultiErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h:11,Availability,error,errors,11,"///< How y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum =; ///< Absolute Addition",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphMultiErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h:30,Availability,error,errors,30,"///<[fNpoints] array of X low errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphMultiErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h:31,Availability,error,errors,31,"///<[fNpoints] array of X high errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphMultiErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h:36,Availability,error,errors,36,"///< Two dimensional array of Y low errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphMultiErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h:37,Availability,error,errors,37,"///< Two dimensional array of Y high errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphMultiErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h:28,Availability,error,errors,28,"///<! Array of summed Y low errors for fitting",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphMultiErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h:29,Availability,error,errors,29,"///<! Array of summed Y high errors for fitting",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphMultiErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h:45,Availability,error,errors,45,"///< The AttFill attributes of the different errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphMultiErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h:45,Availability,error,errors,45,"///< The AttLine attributes of the different errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphMultiErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h:15,Availability,error,errors,15,"///< Only take errors from first dimension",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphMultiErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h:37,Availability,error,errors,37,"///< Calculate the square sum of all errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphMultiErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h:39,Availability,error,errors,39,"///< Calculate the absolute sum of all errors",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphMultiErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h:27,Availability,error,error,27,"// A Graph with asymmetric error bars and multiple y error dimensions",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphMultiErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h:53,Availability,error,error,53,"// A Graph with asymmetric error bars and multiple y error dimensions",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphMultiErrors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphMultiErrors.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphSmooth.h:667,Energy Efficiency,adapt,adapted,667,"// @(#)root/hist:$Id$; // Author: Christian Stratowa 30/09/2001; /*************************************************************************; * Copyright (C) 2006, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /******************************************************************************; * Copyright(c) 2001-2006, Dr. Christian Stratowa, Vienna, Austria. *; * Author: Christian Stratowa with help from Rene Brun. *; * *; * Algorithms for smooth regression adapted from: *; * R: A Computer Language for Statistical Data Analysis *; ******************************************************************************/",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphSmooth.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphSmooth.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphSmooth.h:667,Modifiability,adapt,adapted,667,"// @(#)root/hist:$Id$; // Author: Christian Stratowa 30/09/2001; /*************************************************************************; * Copyright (C) 2006, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /******************************************************************************; * Copyright(c) 2001-2006, Dr. Christian Stratowa, Vienna, Austria. *; * Author: Christian Stratowa with help from Rene Brun. *; * *; * Algorithms for smooth regression adapted from: *; * R: A Computer Language for Statistical Data Analysis *; ******************************************************************************/",MatchSource.CODE_COMMENT,hist/hist/inc/TGraphSmooth.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TGraphSmooth.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h:54,Availability,error,errors,54,"/// Enumeration specifying type of statistics for bin errors",MatchSource.CODE_COMMENT,hist/hist/inc/TH1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h:5,Availability,Error,Errors,5,"///< Errors with Normal (Wald) approximation: errorUp=errorLow= sqrt(N)",MatchSource.CODE_COMMENT,hist/hist/inc/TH1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h:46,Availability,error,errorUp,46,"///< Errors with Normal (Wald) approximation: errorUp=errorLow= sqrt(N)",MatchSource.CODE_COMMENT,hist/hist/inc/TH1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h:54,Availability,error,errorLow,54,"///< Errors with Normal (Wald) approximation: errorUp=errorLow= sqrt(N)",MatchSource.CODE_COMMENT,hist/hist/inc/TH1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h:5,Availability,Error,Errors,5,"///< Errors from Poisson interval at 68.3% (1 sigma)",MatchSource.CODE_COMMENT,hist/hist/inc/TH1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h:5,Availability,Error,Errors,5,"///< Errors from Poisson interval at 95% CL (~ 2 sigma)",MatchSource.CODE_COMMENT,hist/hist/inc/TH1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h:45,Modifiability,extend,extended,45,"/// Enumeration specifying which axes can be extended",MatchSource.CODE_COMMENT,hist/hist/inc/TH1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h:5,Energy Efficiency,Adapt,Adapt,5,"///< Adapt to the global flag",MatchSource.CODE_COMMENT,hist/hist/inc/TH1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h:5,Modifiability,Adapt,Adapt,5,"///< Adapt to the global flag",MatchSource.CODE_COMMENT,hist/hist/inc/TH1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h:32,Availability,error,errors,32,"///< Option for bin statistical errors",MatchSource.CODE_COMMENT,hist/hist/inc/TH1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h:15,Testability,log,log,15,"///< X-axis in log scale",MatchSource.CODE_COMMENT,hist/hist/inc/TH1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h:9,Energy Efficiency,Power,Power,9,"///< Use Power(2)-based algorithm for autobinning",MatchSource.CODE_COMMENT,hist/hist/inc/TH1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE* *GETTER=IsHighlight",MatchSource.CODE_COMMENT,hist/hist/inc/TH1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH2Poly.h:3,Usability,Clear,Clears,3,"// Clears the content of all bins",MatchSource.CODE_COMMENT,hist/hist/inc/TH2Poly.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH2Poly.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THn.h:2,Energy Efficiency,allocate,allocate,2,/*allocate*/,MatchSource.CODE_COMMENT,hist/hist/inc/THn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THn.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THn.h:2,Energy Efficiency,allocate,allocate,2,/*allocate*/,MatchSource.CODE_COMMENT,hist/hist/inc/THn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THn.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THn.h:2,Energy Efficiency,allocate,allocate,2,/*allocate*/,MatchSource.CODE_COMMENT,hist/hist/inc/THn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THn.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THn.h:7,Availability,error,error,7,"// bin error, lazy allocation happens in TNDArrayT",MatchSource.CODE_COMMENT,hist/hist/inc/THn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THn.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THn.h:177,Integrability,interface,interfaces,177,"//______________________________________________________________________________; /** \class THnT; Templated implementation of the abstract base THn.; All functionality and the interfaces to be used are in THn!. THn does not know how to store any bin content itself. Instead, this; is delegated to the derived, templated class: the template parameter decides; what the format for the bin content is. The actual storage is delegated to; TNDArrayT<T>. Typedefs exist for template parameters with ROOT's generic types:. Templated name | Typedef | Bin content type; -----------------|---------------|--------------------; THnT<Char_t> | THnC | Char_t; THnT<Short_t> | THnS | Short_t; THnT<Int_t> | THnI | Int_t; THnT<Long64_t> | THnL | Long64_t; THnT<Float_t> | THnF | Float_t; THnT<Double_t> | THnD | Double_t. We recommend to use THnC wherever possible, and to map its value space; of 256 possible values to e.g. float values outside the class. This saves an; enormous amount of memory. Only if more than 256 values need to be; distinguished should e.g. THnS or even THnF be chosen. Implementation detail: the derived, templated class is kept extremely small; on purpose. That way the (templated thus inlined) uses of this class will; only create a small amount of machine code, in contrast to e.g. STL.; */",MatchSource.CODE_COMMENT,hist/hist/inc/THn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THn.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnBase.h:145,Integrability,interface,interfaces,145,/*************************************************************************. THnBase: Common base class for n-dimensional histogramming.; Defines interfaces and algorithms. *************************************************************************/,MatchSource.CODE_COMMENT,hist/hist/inc/THnBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnBase.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnBase.h:44,Availability,error,errors,44,"///< Total sum of weights squared; -1 if no errors are calculated",MatchSource.CODE_COMMENT,hist/hist/inc/THnBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnBase.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnBase.h:14,Availability,error,errors,14,"/// Calculate errors (or not if ""calc"" == kFALSE)",MatchSource.CODE_COMMENT,hist/hist/inc/THnBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnBase.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnBase.h:2,Energy Efficiency,allocate,allocate,2,/*allocate*/,MatchSource.CODE_COMMENT,hist/hist/inc/THnBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnBase.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnBase.h:2,Energy Efficiency,allocate,allocate,2,/*allocate*/,MatchSource.CODE_COMMENT,hist/hist/inc/THnBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnBase.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnBase.h:2,Energy Efficiency,allocate,allocate,2,/*allocate*/,MatchSource.CODE_COMMENT,hist/hist/inc/THnBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnBase.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnBase.h:122,Availability,error,errors,122,"/// Project all bins into a 1-dimensional histogram,; /// keeping only axis ""xDim"".; /// If ""option"" contains:; /// - ""E"" errors will be calculated.; /// - ""A"" ranges of the taget axes will be ignored.; /// - ""O"" original axis range of the taget axes will be; /// kept, but only bins inside the selected range; /// will be filled.",MatchSource.CODE_COMMENT,hist/hist/inc/THnBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnBase.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnBase.h:306,Availability,error,errors,306,"/// Project all bins into a 2-dimensional histogram,; /// keeping only axes ""xDim"" and ""yDim"".; ///; /// WARNING: just like TH3::Project3D(""yx"") and TTree::Draw(""y:x""),; /// Projection(y,x) uses the first argument to define the y-axis and the; /// second for the x-axis!; ///; /// If ""option"" contains ""E"" errors will be calculated.; /// ""A"" ranges of the taget axes will be ignored.",MatchSource.CODE_COMMENT,hist/hist/inc/THnBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnBase.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnBase.h:142,Availability,error,errors,142,"/// Project all bins into a 3-dimensional histogram,; /// keeping only axes ""xDim"", ""yDim"", and ""zDim"".; /// If ""option"" contains:; /// - ""E"" errors will be calculated.; /// - ""A"" ranges of the taget axes will be ignored.; /// - ""O"" original axis range of the taget axes will be; /// kept, but only bins inside the selected range; /// will be filled.",MatchSource.CODE_COMMENT,hist/hist/inc/THnBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnBase.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnChain.h:523,Deployability,integrat,integrate,523,"/** \class THnChain; A class to chain together multiple histograms. This class allows to chain together any `THnBase`-derived (`THn` or `THnSparse`); histograms from multiple files. Operations on the axes and projections are; supported. The intent is to allow convenient merging merging of projections; of high-dimensional histograms. \code{.cpp}; // `file1.root` and `file2.root` contain a `THnSparse` named `hsparse`.; THnChain hs(""hsparse"");; hs.AddFile(""file1.root"");; hs.AddFile(""file2.root"");. // Project out axis 0, integrate over other axes.; TH1* h0 = hs.Projection(0);. // Project out axis 0, integrate over other axes in their active ranges.; hs.GetAxis(1)->SetRangeUser(0, 0.1); // select a subrange; TH1* h0 = hs.Projection(0);; \endcode; */",MatchSource.CODE_COMMENT,hist/hist/inc/THnChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnChain.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnChain.h:603,Deployability,integrat,integrate,603,"/** \class THnChain; A class to chain together multiple histograms. This class allows to chain together any `THnBase`-derived (`THn` or `THnSparse`); histograms from multiple files. Operations on the axes and projections are; supported. The intent is to allow convenient merging merging of projections; of high-dimensional histograms. \code{.cpp}; // `file1.root` and `file2.root` contain a `THnSparse` named `hsparse`.; THnChain hs(""hsparse"");; hs.AddFile(""file1.root"");; hs.AddFile(""file2.root"");. // Project out axis 0, integrate over other axes.; TH1* h0 = hs.Projection(0);. // Project out axis 0, integrate over other axes in their active ranges.; hs.GetAxis(1)->SetRangeUser(0, 0.1); // select a subrange; TH1* h0 = hs.Projection(0);; \endcode; */",MatchSource.CODE_COMMENT,hist/hist/inc/THnChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnChain.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnChain.h:523,Integrability,integrat,integrate,523,"/** \class THnChain; A class to chain together multiple histograms. This class allows to chain together any `THnBase`-derived (`THn` or `THnSparse`); histograms from multiple files. Operations on the axes and projections are; supported. The intent is to allow convenient merging merging of projections; of high-dimensional histograms. \code{.cpp}; // `file1.root` and `file2.root` contain a `THnSparse` named `hsparse`.; THnChain hs(""hsparse"");; hs.AddFile(""file1.root"");; hs.AddFile(""file2.root"");. // Project out axis 0, integrate over other axes.; TH1* h0 = hs.Projection(0);. // Project out axis 0, integrate over other axes in their active ranges.; hs.GetAxis(1)->SetRangeUser(0, 0.1); // select a subrange; TH1* h0 = hs.Projection(0);; \endcode; */",MatchSource.CODE_COMMENT,hist/hist/inc/THnChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnChain.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnChain.h:603,Integrability,integrat,integrate,603,"/** \class THnChain; A class to chain together multiple histograms. This class allows to chain together any `THnBase`-derived (`THn` or `THnSparse`); histograms from multiple files. Operations on the axes and projections are; supported. The intent is to allow convenient merging merging of projections; of high-dimensional histograms. \code{.cpp}; // `file1.root` and `file2.root` contain a `THnSparse` named `hsparse`.; THnChain hs(""hsparse"");; hs.AddFile(""file1.root"");; hs.AddFile(""file2.root"");. // Project out axis 0, integrate over other axes.; TH1* h0 = hs.Projection(0);. // Project out axis 0, integrate over other axes in their active ranges.; hs.GetAxis(1)->SetRangeUser(0, 0.1); // select a subrange; TH1* h0 = hs.Projection(0);; \endcode; */",MatchSource.CODE_COMMENT,hist/hist/inc/THnChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnChain.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnSparse.h:154,Energy Efficiency,efficient,efficient,154,"/*************************************************************************. THnSparse: histogramming multi-dimensional, sparse distributions in; a memory-efficient way. *************************************************************************/",MatchSource.CODE_COMMENT,hist/hist/inc/THnSparse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnSparse.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnSparse.h:33,Security,hash,hashes,33,"///<! Filled bins for non-unique hashes, containing pairs of (bin index 0, bin index 1)",MatchSource.CODE_COMMENT,hist/hist/inc/THnSparse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnSparse.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnSparse.h:3,Integrability,Interface,Interfaces,3,"// Interfaces of sparse n-dimensional histogram",MatchSource.CODE_COMMENT,hist/hist/inc/THnSparse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnSparse.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnSparse.h:189,Integrability,interface,interfaces,189,"//______________________________________________________________________________; /** \class THnSparseT; Templated implementation of the abstract base THnSparse.; All functionality and the interfaces to be used are in THnSparse!. THnSparse does not know how to store any bin content itself. Instead, this; is delegated to the derived, templated class: the template parameter decides; what the format for the bin content is. In fact it even defines the array; itself; possible implementations probably derive from TArray. Typedefs exist for template parameters with ROOT's generic types:. Templated name | Typedef | Bin content type; ----------------------|---------------|--------------------; THnSparseT<TArrayC> | THnSparseC | Char_t; THnSparseT<TArrayS> | THnSparseS | Short_t; THnSparseT<TArrayI> | THnSparseI | Int_t; THnSparseT<TArrayL64> | THnSparseL | Long64_t; THnSparseT<TArrayF> | THnSparseF | Float_t; THnSparseT<TArrayD> | THnSparseD | Double_t. We recommend to use THnSparseC wherever possible, and to map its value space; of 256 possible values to e.g. float values outside the class. This saves an; enormous amount of memory. Only if more than 256 values need to be; distinguished should e.g. THnSparseS or even THnSparseF be chosen. Implementation detail: the derived, templated class is kept extremely small; on purpose. That way the (templated thus inlined) uses of this class will; only create a small amount of machine code, in contrast to e.g. STL.; */",MatchSource.CODE_COMMENT,hist/hist/inc/THnSparse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnSparse.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnSparse_Internal.h:18,Energy Efficiency,allocate,allocated,18,"///<! Size of the allocated coordinate buffer; -1 means none or fCoordinatesSize",MatchSource.CODE_COMMENT,hist/hist/inc/THnSparse_Internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnSparse_Internal.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnSparse_Internal.h:9,Availability,error,errors,9,"///< Bin errors",MatchSource.CODE_COMMENT,hist/hist/inc/THnSparse_Internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnSparse_Internal.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TKDE.h:505,Energy Efficiency,Energy,Energy,505,"/*; Kernel Density Estimation class.; The three main references are. (1) ""Scott DW, Multivariate Density Estimation.Theory, Practice and Visualization. New York: Wiley"",; (2) ""Jann Ben - ETH Zurich, Switzerland -, Univariate kernel density estimation document for KDENS: Stata module for univariate kernel density estimation.""; (3) ""Hardle W, Muller M, Sperlich S, Werwatz A, Nonparametric and Semiparametric Models. Springer.""The algorithm is briefly described in; ""Cranmer KS, Kernel Estimation in High-Energy Physics. Computer Physics Communications 136:198-207,2001"" - e-Print Archive: hep ex/0011057.; A binned version is also implemented to address the performance issue due to its data size dependence.; */",MatchSource.CODE_COMMENT,hist/hist/inc/TKDE.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TKDE.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TKDE.h:698,Integrability,depend,dependence,698,"/*; Kernel Density Estimation class.; The three main references are. (1) ""Scott DW, Multivariate Density Estimation.Theory, Practice and Visualization. New York: Wiley"",; (2) ""Jann Ben - ETH Zurich, Switzerland -, Univariate kernel density estimation document for KDENS: Stata module for univariate kernel density estimation.""; (3) ""Hardle W, Muller M, Sperlich S, Werwatz A, Nonparametric and Semiparametric Models. Springer.""The algorithm is briefly described in; ""Cranmer KS, Kernel Estimation in High-Energy Physics. Computer Physics Communications 136:198-207,2001"" - e-Print Archive: hep ex/0011057.; A binned version is also implemented to address the performance issue due to its data size dependence.; */",MatchSource.CODE_COMMENT,hist/hist/inc/TKDE.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TKDE.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TKDE.h:659,Performance,perform,performance,659,"/*; Kernel Density Estimation class.; The three main references are. (1) ""Scott DW, Multivariate Density Estimation.Theory, Practice and Visualization. New York: Wiley"",; (2) ""Jann Ben - ETH Zurich, Switzerland -, Univariate kernel density estimation document for KDENS: Stata module for univariate kernel density estimation.""; (3) ""Hardle W, Muller M, Sperlich S, Werwatz A, Nonparametric and Semiparametric Models. Springer.""The algorithm is briefly described in; ""Cranmer KS, Kernel Estimation in High-Energy Physics. Computer Physics Communications 136:198-207,2001"" - e-Print Archive: hep ex/0011057.; A binned version is also implemented to address the performance issue due to its data size dependence.; */",MatchSource.CODE_COMMENT,hist/hist/inc/TKDE.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TKDE.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TKDE.h:416,Energy Efficiency,Adapt,Adaptive,416,"/// Constructor for unweighted data; /// Varius option for TKDE can be passed in the option string as below.; /// Note that min and max will define the plotting range but will not restrict the data in the unbinned case; /// Instead when use binning, only the data in the range will be considered.; /// Note also, that when some data exists outside the range, one should not use the mirror option with unbinned.; /// Adaptive will be soon very slow especially for Nevents > 10000.; /// For this reason, by default for Nevents >=10000, the data are automatically binned in; /// nbins=Min(10000,Nevents/10); /// In case of ForceBinning option the default number of bins is 1000",MatchSource.CODE_COMMENT,hist/hist/inc/TKDE.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TKDE.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TKDE.h:416,Modifiability,Adapt,Adaptive,416,"/// Constructor for unweighted data; /// Varius option for TKDE can be passed in the option string as below.; /// Note that min and max will define the plotting range but will not restrict the data in the unbinned case; /// Instead when use binning, only the data in the range will be considered.; /// Note also, that when some data exists outside the range, one should not use the mirror option with unbinned.; /// Adaptive will be soon very slow especially for Nevents > 10000.; /// For this reason, by default for Nevents >=10000, the data are automatically binned in; /// nbins=Min(10000,Nevents/10); /// In case of ForceBinning option the default number of bins is 1000",MatchSource.CODE_COMMENT,hist/hist/inc/TKDE.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TKDE.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TKDE.h:19,Availability,error,errors,19,"//! Graph with the errors",MatchSource.CODE_COMMENT,hist/hist/inc/TKDE.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TKDE.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TKDE.h:25,Availability,robust,robust,25,"///< Data std deviation (robust estimation)",MatchSource.CODE_COMMENT,hist/hist/inc/TKDE.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TKDE.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TKDE.h:71,Energy Efficiency,adapt,adaptive,71,"///< Geometric mean of the kernel density estimation from the data for adaptive iteration",MatchSource.CODE_COMMENT,hist/hist/inc/TKDE.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TKDE.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TKDE.h:71,Modifiability,adapt,adaptive,71,"///< Geometric mean of the kernel density estimation from the data for adaptive iteration",MatchSource.CODE_COMMENT,hist/hist/inc/TKDE.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TKDE.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TKDE.h:5,Performance,Cache,Caches,5,"///< Caches the weight size",MatchSource.CODE_COMMENT,hist/hist/inc/TKDE.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TKDE.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TLimit.h:7,Testability,log,log,7,"///< A log table... just to speed up calculation",MatchSource.CODE_COMMENT,hist/hist/inc/TLimit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TLimit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TLimitDataSource.h:12,Availability,error,error,12,"///< Packed error sources for signal",MatchSource.CODE_COMMENT,hist/hist/inc/TLimitDataSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TLimitDataSource.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TLimitDataSource.h:12,Availability,error,error,12,"///< Packed error sources for background",MatchSource.CODE_COMMENT,hist/hist/inc/TLimitDataSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TLimitDataSource.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TLimitDataSource.h:34,Availability,error,error,34,"///< Packed IDs for the different error sources; ///@}; /// Dummy objects the class will use and delete; ///@{",MatchSource.CODE_COMMENT,hist/hist/inc/TLimitDataSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TLimitDataSource.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TLimitDataSource.h:20,Integrability,rout,routines,20,"// Input for TLimit routines",MatchSource.CODE_COMMENT,hist/hist/inc/TLimitDataSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TLimitDataSource.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:22,Integrability,depend,dependent,22,"///< Training sample, dependent quantity",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:22,Availability,error,error,22,"///< Training sample, error in quantity",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:13,Integrability,depend,dependent,13,"///< Mean of dependent quantity",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:18,Integrability,depend,dependent,18,"///< Max value of dependent quantity",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:18,Integrability,depend,dependent,18,"///< Min value of dependent quantity",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:18,Integrability,depend,dependent,18,"///< SumSquare of dependent quantity",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:34,Modifiability,variab,variables,34,"///< Training sample, independent variables",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:27,Modifiability,variab,variables,27,"///< Number of independent variables",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:31,Modifiability,variab,variables,31,"///< mean value of independent variables",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:30,Modifiability,variab,variables,30,"///< max value of independent variables",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:30,Modifiability,variab,variables,30,"///< min value of independent variables",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:18,Integrability,depend,dependent,18,"///< Test sample, dependent quantity",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:5,Testability,Test,Test,5,"///< Test sample, dependent quantity",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:18,Availability,Error,Error,18,"///< Test sample, Error in quantity",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:5,Testability,Test,Test,5,"///< Test sample, Error in quantity",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:30,Modifiability,variab,variables,30,"///< Test sample, independent variables",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:5,Testability,Test,Test,5,"///< Test sample, independent variables",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:13,Testability,test,test,13,"///< Size of test sample",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:18,Availability,error,error,18,"///< Min relative error accepted",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:26,Energy Efficiency,power,powers,26,"///<[fNVariables] maximum powers",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:26,Energy Efficiency,power,powers,26,"///<[fNVariables] maximum powers from fit;",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:34,Energy Efficiency,power,powers,34,"///<[fMaxTerms] Index of accepted powers",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:5,Availability,Error,Error,5,"///< Error from parametrization",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:5,Availability,Error,Error,5,"///< Error from test",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:16,Testability,test,test,16,"///< Error from test",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:27,Testability,test,test,27,"///< Relative precision of test",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:34,Modifiability,variab,variables,34,"///< Number of bin in independent variables",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:22,Integrability,depend,dependent,22,"///< Number of bin in dependent variables",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:32,Modifiability,variab,variables,32,"///< Number of bin in dependent variables",MatchSource.CODE_COMMENT,hist/hist/inc/TMultiDimFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TNDArray.h:298,Energy Efficiency,allocate,allocated,298,"/** \class TNDArray. N-Dim array class. Storage layout:; Assume 3 dimensions, array sizes 2, 4 and 3 i.e. 24 bins:; Data is stored as [0,0,0], [0,0,1], [0,0,2], [0,1,0],... fSizes stores the combined size of each bin in a dimension, i.e. in; above example it would contain 24, 12, 3, 1. Storage is allocated lazily, only when data is written to the array.; */; /** \class TNDArrayRef. gives access to a sub-dimension, e.g. arr[0][1] in above; three-dimensional example, up to an element with conversion operator; to double: double value = arr[0][1][2];; */; // Array layout:; // nbins[0] = 2, nbins[1] = 4, nbins[2] = 3 => 24 bins; //; // fSizes: 24, 12, 3 [, 1",MatchSource.CODE_COMMENT,hist/hist/inc/TNDArray.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TNDArray.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TNDArray.h:391,Security,access,access,391,"/** \class TNDArray. N-Dim array class. Storage layout:; Assume 3 dimensions, array sizes 2, 4 and 3 i.e. 24 bins:; Data is stored as [0,0,0], [0,0,1], [0,0,2], [0,1,0],... fSizes stores the combined size of each bin in a dimension, i.e. in; above example it would contain 24, 12, 3, 1. Storage is allocated lazily, only when data is written to the array.; */; /** \class TNDArrayRef. gives access to a sub-dimension, e.g. arr[0][1] in above; three-dimensional example, up to an element with conversion operator; to double: double value = arr[0][1][2];; */; // Array layout:; // nbins[0] = 2, nbins[1] = 4, nbins[2] = 3 => 24 bins; //; // fSizes: 24, 12, 3 [, 1",MatchSource.CODE_COMMENT,hist/hist/inc/TNDArray.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TNDArray.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TPrincipal.h:15,Modifiability,variab,variables,15,"///< Number of variables",MatchSource.CODE_COMMENT,hist/hist/inc/TPrincipal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TPrincipal.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TProfile.h:23,Availability,error,errors,23,"///< Option to compute errors",MatchSource.CODE_COMMENT,hist/hist/inc/TProfile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TProfile.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TProfile.h:9,Availability,error,error,9,"///< bin error approximation option",MatchSource.CODE_COMMENT,hist/hist/inc/TProfile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TProfile.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TProfile.h:15,Deployability,Update,UpdateBinContent,15,"//virtual void UpdateBinContent(Int_t bin, Double_t content);",MatchSource.CODE_COMMENT,hist/hist/inc/TProfile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TProfile.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TProfile2D.h:23,Availability,error,errors,23,"///< Option to compute errors",MatchSource.CODE_COMMENT,hist/hist/inc/TProfile2D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TProfile2D.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TProfile2D.h:9,Availability,error,error,9,"///< Bin error approximation option",MatchSource.CODE_COMMENT,hist/hist/inc/TProfile2D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TProfile2D.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TProfile2D.h:15,Deployability,Update,UpdateBinContent,15,"//virtual void UpdateBinContent(Int_t bin, Double_t content);",MatchSource.CODE_COMMENT,hist/hist/inc/TProfile2D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TProfile2D.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TProfile3D.h:23,Availability,error,errors,23,"///< Option to compute errors",MatchSource.CODE_COMMENT,hist/hist/inc/TProfile3D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TProfile3D.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TProfile3D.h:9,Availability,error,error,9,"///< Bin error approximation option",MatchSource.CODE_COMMENT,hist/hist/inc/TProfile3D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TProfile3D.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TProfile3D.h:15,Deployability,Update,UpdateBinContent,15,"//virtual void UpdateBinContent(Int_t bin, Double_t content);",MatchSource.CODE_COMMENT,hist/hist/inc/TProfile3D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TProfile3D.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TScatter.h:142,Modifiability,variab,variables,142,"//////////////////////////////////////////////////////////////////////////; // //; // TScatter //; // //; // A scatter plot able to draw four variables on a single plot //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,hist/hist/inc/TScatter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TScatter.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TSVDUnfold.h:297,Safety,detect,detector,297,"// Constructor; // Initialisation of unfolding; // ""bdat"" - measured data distribution (number of events); // ""Bcov"" - covariance matrix for measured data distribution; // ""bini"" - reconstructed MC distribution (number of events); // ""xini"" - truth MC distribution (number of events); // ""Adet"" - detector response matrix (number of events)",MatchSource.CODE_COMMENT,hist/hist/inc/TSVDUnfold.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TSVDUnfold.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TSVDUnfold.h:29,Availability,error,error,29,"// Determine for given input error matrix covariance matrix of unfolded; // spectrum from toy simulation; // ""cov"" - covariance matrix on the measured spectrum, to be propagated; // ""ntoys"" - number of pseudo experiments used for the propagation; // ""seed"" - seed for pseudo experiments",MatchSource.CODE_COMMENT,hist/hist/inc/TSVDUnfold.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TSVDUnfold.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TSVDUnfold.h:5,Safety,Detect,Detector,5,"///< Detector response matrix; ///@}; /// @name Evaluation of covariance matrices; ///@{",MatchSource.CODE_COMMENT,hist/hist/inc/TSVDUnfold.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TSVDUnfold.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TSVDUnfold.h:13,Safety,detect,detector,13,"///<! Toy MC detector response matrix",MatchSource.CODE_COMMENT,hist/hist/inc/TSVDUnfold.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TSVDUnfold.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TVirtualFitter.h:38,Performance,cache,cache,38,"///< Number of words per point in the cache",MatchSource.CODE_COMMENT,hist/hist/inc/TVirtualFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TVirtualFitter.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TVirtualFitter.h:245,Availability,Error,Error,245,"// static TVirtualFitter *fgFitter; //Current fitter (default TFitter); // static Int_t fgMaxpar; //Maximum number of fit parameters for current fitter; // static Int_t fgMaxiter; //Maximum number of iterations; // static Double_t fgErrorDef; //Error definition (default=1); // static Double_t fgPrecision; //maximum precision; // static TString fgDefault; //name of the default fitter (""Minuit"",""Fumili"",etc)",MatchSource.CODE_COMMENT,hist/hist/inc/TVirtualFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TVirtualFitter.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TVirtualFitter.h:11,Integrability,interface,interface,11,"//Abstract interface for fitting",MatchSource.CODE_COMMENT,hist/hist/inc/TVirtualFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TVirtualFitter.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TVirtualGraphPainter.h:11,Integrability,interface,interface,11,"//Abstract interface for histogram painters",MatchSource.CODE_COMMENT,hist/hist/inc/TVirtualGraphPainter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TVirtualGraphPainter.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TVirtualHistPainter.h:11,Integrability,interface,interface,11,"//Abstract interface for histogram painters",MatchSource.CODE_COMMENT,hist/hist/inc/TVirtualHistPainter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TVirtualHistPainter.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TVirtualPaveStats.h:11,Integrability,interface,interface,11,"//Abstract interface for TPaveStats",MatchSource.CODE_COMMENT,hist/hist/inc/TVirtualPaveStats.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TVirtualPaveStats.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h:315,Integrability,Wrap,WrappedTFunction,315,"// @(#)root/mathmore:$Id$; // Author: L. Moneta Wed Sep 6 09:52:26 2006; /**********************************************************************; * *; * Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; * *; * *; **********************************************************************/; // Header file for class WrappedTFunction",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedMultiTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h:14,Integrability,Wrap,Wrap,14,"/**; Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface; of multi-dimensions to be used in the ROOT::Math numerical algorithm.; This wrapper class does not own the TF1 pointer, so it assumes it exists during the wrapper lifetime.; The class copy the TF1 pointer only when it owns it. The class from ROOT version 6.03 does not contain anymore a copy of the parameters. The parameters are; stored in the TF1 class. @ingroup CppFunctions; */; //LM note: are there any issues when cloning the class for the parameters that are not copied anymore ??",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedMultiTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h:77,Integrability,interface,interface,77,"/**; Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface; of multi-dimensions to be used in the ROOT::Math numerical algorithm.; This wrapper class does not own the TF1 pointer, so it assumes it exists during the wrapper lifetime.; The class copy the TF1 pointer only when it owns it. The class from ROOT version 6.03 does not contain anymore a copy of the parameters. The parameters are; stored in the TF1 class. @ingroup CppFunctions; */; //LM note: are there any issues when cloning the class for the parameters that are not copied anymore ??",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedMultiTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h:164,Integrability,wrap,wrapper,164,"/**; Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface; of multi-dimensions to be used in the ROOT::Math numerical algorithm.; This wrapper class does not own the TF1 pointer, so it assumes it exists during the wrapper lifetime.; The class copy the TF1 pointer only when it owns it. The class from ROOT version 6.03 does not contain anymore a copy of the parameters. The parameters are; stored in the TF1 class. @ingroup CppFunctions; */; //LM note: are there any issues when cloning the class for the parameters that are not copied anymore ??",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedMultiTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h:243,Integrability,wrap,wrapper,243,"/**; Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface; of multi-dimensions to be used in the ROOT::Math numerical algorithm.; This wrapper class does not own the TF1 pointer, so it assumes it exists during the wrapper lifetime.; The class copy the TF1 pointer only when it owns it. The class from ROOT version 6.03 does not contain anymore a copy of the parameters. The parameters are; stored in the TF1 class. @ingroup CppFunctions; */; //LM note: are there any issues when cloning the class for the parameters that are not copied anymore ??",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedMultiTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h:10,Integrability,interface,interface,10,/** @name interface inherited from IParamFunction */; /**; Clone the wrapper but not the original function; */,MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedMultiTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h:69,Integrability,wrap,wrapper,69,/** @name interface inherited from IParamFunction */; /**; Clone the wrapper but not the original function; */,MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedMultiTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h:20,Modifiability,inherit,inherited,20,/** @name interface inherited from IParamFunction */; /**; Clone the wrapper but not the original function; */,MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedMultiTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h:35,Performance,cache,cached,35,"/// set parameter values (only the cached one in this class,leave unchanges those of TF1)",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedMultiTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h:32,Performance,cache,cached,32,"/// evaluate function using the cached parameter values (of TF1); /// re-implement for better efficiency",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedMultiTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h:32,Performance,cache,cached,32,"/// evaluate function using the cached parameter values (of TF1); /// re-implement for better efficiency",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedMultiTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h:3,Performance,cache,cached,3,"// cached value of dimension; //std::vector<double> fParams; // cached vector with parameter values",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedMultiTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h:64,Performance,cache,cached,64,"// cached value of dimension; //std::vector<double> fParams; // cached vector with parameter values",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedMultiTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h:510,Availability,error,error,510,"/**; * Auxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar.; *; * WrappedMultiTF1Templ::DoParameterDerivation calls TFormula::EvalPar in the case of a general linear function; * built with TFormula using ++; as EvalPar is not vectorized, in order to generalize DoParameterDerivative with; * a general type T, we use this auxiliar class to branch the code in compile time with the double; * specialization (that can call EvalPar) and the general implementation (that throws an error in the case of; * general linear function).; */",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedMultiTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h:26,Integrability,depend,depend,26,"// derivatives should not depend on parameters since; // function is linear",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedMultiTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h:20,Testability,test,test,20,"// time saving self-test",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedMultiTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h:142,Safety,avoid,avoid,142,"// evaluate the gradient of the function with respect to the parameters; //IMPORTANT NOTE: TF1::GradientPar returns 0 for fixed parameters to avoid computing useless derivatives; // BUT the TLinearFitter wants to have the derivatives also for fixed parameters.; // so in case of fLinear (or fPolynomial) a non-zero value will be returned for fixed parameters",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedMultiTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h:66,Availability,avail,available,66,"// struct for dealing of generic Hessian computation, since it is available only in TFormula",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedMultiTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h:45,Integrability,depend,dependency,45,"// case of polynomial function (no parameter dependency) (case for dim = 1)",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedMultiTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h:14,Integrability,Wrap,Wrap,14,"/**; Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface; of one dimensions to be used in the ROOT::Math numerical algorithms; The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. The class from ROOT version 6.03 does not contain anymore a copy of the parameters. The parameters are; stored in the TF1 class. @ingroup CppFunctions; */",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h:72,Integrability,interface,interface,72,"/**; Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface; of one dimensions to be used in the ROOT::Math numerical algorithms; The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. The class from ROOT version 6.03 does not contain anymore a copy of the parameters. The parameters are; stored in the TF1 class. @ingroup CppFunctions; */",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h:156,Integrability,wrap,wrapper,156,"/**; Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface; of one dimensions to be used in the ROOT::Math numerical algorithms; The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. The class from ROOT version 6.03 does not contain anymore a copy of the parameters. The parameters are; stored in the TF1 class. @ingroup CppFunctions; */",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h:241,Integrability,wrap,wrapper,241,"/**; Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface; of one dimensions to be used in the ROOT::Math numerical algorithms; The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. The class from ROOT version 6.03 does not contain anymore a copy of the parameters. The parameters are; stored in the TF1 class. @ingroup CppFunctions; */",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h:10,Integrability,interface,interface,10,/** @name interface inherited from IFunction */; /**; Clone the wrapper but not the original function; */,MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h:64,Integrability,wrap,wrapper,64,/** @name interface inherited from IFunction */; /**; Clone the wrapper but not the original function; */,MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h:20,Modifiability,inherit,inherited,20,/** @name interface inherited from IFunction */; /**; Clone the wrapper but not the original function; */,MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h:10,Integrability,interface,interface,10,"/** @name interface inherited from IParamFunction */; /// get the parameter values (return values cachen inside, those inside TF1 might be different)",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h:20,Modifiability,inherit,inherited,20,"/** @name interface inherited from IParamFunction */; /// get the parameter values (return values cachen inside, those inside TF1 might be different)",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h:98,Performance,cache,cachen,98,"/** @name interface inherited from IParamFunction */; /// get the parameter values (return values cachen inside, those inside TF1 might be different)",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h:74,Integrability,interface,interface,74,"/// calculate function and derivative at same time (required by IGradient interface)",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h:32,Performance,cache,cached,32,"/// evaluate function using the cached parameter values (of TF1); /// re-implement for better efficiency",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h:106,Energy Efficiency,efficient,efficient,106,"// no need to call InitArg for interpreted functions (done in ctor); // use EvalPar since it is much more efficient than Eval",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h:4,Performance,cache,cached,4,"//! cached vector for x value (needed for TF1::EvalPar signature); //std::vector<double> fParams; // cached vector with parameter values",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h:101,Performance,cache,cached,101,"//! cached vector for x value (needed for TF1::EvalPar signature); //std::vector<double> fParams; // cached vector with parameter values",MatchSource.CODE_COMMENT,hist/hist/inc/Math/WrappedTF1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/v5/TF1Data.h:19,Availability,error,errors,19,"//[fNpar] Array of errors of the fNpar parameters",MatchSource.CODE_COMMENT,hist/hist/inc/v5/TF1Data.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/v5/TF1Data.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/v5/TFormula.h:28,Performance,optimiz,optimized,28,"// where to jump in case of optimized boolen",MatchSource.CODE_COMMENT,hist/hist/inc/v5/TFormula.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/v5/TFormula.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/v5/TFormula.h:13,Modifiability,variab,variable,13,"// temporary variable used during optimization",MatchSource.CODE_COMMENT,hist/hist/inc/v5/TFormula.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/v5/TFormula.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/v5/TFormula.h:34,Performance,optimiz,optimization,34,"// temporary variable used during optimization",MatchSource.CODE_COMMENT,hist/hist/inc/v5/TFormula.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/v5/TFormula.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/v5/TFormula.h:22,Modifiability,variab,variables,22,"//Number of different variables in expression",MatchSource.CODE_COMMENT,hist/hist/inc/v5/TFormula.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/v5/TFormula.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/v5/TFormula.h:4,Performance,cache,cache,4,"//! cache for information; // Optimized expression",MatchSource.CODE_COMMENT,hist/hist/inc/v5/TFormula.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/v5/TFormula.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/v5/TFormula.h:30,Performance,Optimiz,Optimized,30,"//! cache for information; // Optimized expression",MatchSource.CODE_COMMENT,hist/hist/inc/v5/TFormula.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/v5/TFormula.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/v5/TFormula.h:29,Performance,optimiz,optimization,29,"//!Number of operators after optimization",MatchSource.CODE_COMMENT,hist/hist/inc/v5/TFormula.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/v5/TFormula.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/Haxis.cxx:309,Performance,scalab,scalable,309,"////////////////////////////////////////////////////////////////////////////////; /// Set font number used to draw axis labels.; ///; /// font : Text font code = 10*fontnumber + precision; /// Font numbers must be between 1 and 14; /// precision = 1 fast hardware fonts (steps in the size); /// precision = 2 scalable and rotatable hardware fonts; ///; /// The default font number is 62.; /// axis specifies which axis (""x"",""y"",""z""), default = ""x""; /// if axis=""xyz"" set all 3 axes",MatchSource.CODE_COMMENT,hist/hist/src/Haxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/Haxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:79,Integrability,rout,routines,79,"// perform fit of histograms, or graphs using new fitting classes; // use same routines for fitting both graphs and histograms",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:3,Performance,perform,perform,3,"// perform fit of histograms, or graphs using new fitting classes; // use same routines for fitting both graphs and histograms",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:30,Availability,error,errors,30,"// pearson chi2 with expected errors",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:21,Testability,log,log-likelihood,21,"// use empty bins in log-likelihood fits",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:29,Availability,error,errors,29,"// no need to use coordinate errors in a pol0 fit",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:25,Availability,error,errors,25,"// do not use coordinate errors when requested",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:20,Availability,error,errors,20,"// we are not using errors in chi2, it is like setting = 1",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:15,Availability,error,errors,15,"// we need the errors in weighted likelihood fit",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:57,Availability,error,errors,57,"// switch off linear fitting in case data has coordinate errors and the option is set",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:56,Availability,error,errors,56,"// linear fit cannot be done also in case of asymmetric errors",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:3,Availability,error,error,3,"// error normalization in case of zero error in the data",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:39,Availability,error,error,39,"// error normalization in case of zero error in the data",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:3,Availability,error,error,3,"// error normalization also in case of W or WW options (weights = 1)",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:13,Availability,error,errors,13,"// normalize errors also in case you are fitting a Ndim histo with a N-1 function",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:72,Availability,error,error,72,"// here need to get some static extra information (like max iterations, error def, etc...); // parameter settings and transfer the parameters values, names and limits from the functions; // is done automatically in the Fitter.cxx",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:104,Availability,error,error,104,"// set the parameter step size (by default are set to 0.3 of value); // if function provides meaningful error values",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:66,Availability,error,errors,66,"// needed for setting precision ?; // - Compute sum of squares of errors in the bin range; // should maybe use stat[1] ??; // Double_t ey, sumw2=0;; // for (i=hxfirst;i<=hxlast;i++) {; // ey = GetBinError(i);; // sumw2 += ey*ey;; // }; // set all default minimizer options (tolerance, max iterations, etc..)",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:274,Availability,toler,tolerance,274,"// needed for setting precision ?; // - Compute sum of squares of errors in the bin range; // should maybe use stat[1] ??; // Double_t ey, sumw2=0;; // for (i=hxfirst;i<=hxlast;i++) {; // ey = GetBinError(i);; // sumw2 += ey*ey;; // }; // set all default minimizer options (tolerance, max iterations, etc..)",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:30,Integrability,depend,depending,30,"// specific minimizer options depending on minimizer",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:3,Availability,robust,robust,3,"// robust fitting",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:7,Availability,toler,tolerance,7,"// use tolerance for passing robust parameter",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:29,Availability,robust,robust,29,"// use tolerance for passing robust parameter",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:12,Availability,Error,Error,12,"// check if Error option (run Hesse and Minos) then",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:89,Availability,error,errors,89,"// likelihood fit; // perform a weighted likelihood fit by applying weight correction to errors",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:22,Performance,perform,perform,22,"// likelihood fit; // perform a weighted likelihood fit by applying weight correction to errors",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:7,Modifiability,extend,extended,7,"//if (!extended) Info(""HFitImpl"",""Do a not -extended binned fit"");; // pass fitdata as a shared pointer so ownership is shared with Fitter and FitResult class",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:44,Modifiability,extend,extended,44,"//if (!extended) Info(""HFitImpl"",""Do a not -extended binned fit"");; // pass fitdata as a shared pointer so ownership is shared with Fitter and FitResult class",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:32,Deployability,update,update,32,"// get range from histogram and update the DataRange class; // if a ranges already exist in that dimension use that one",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:321,Energy Efficiency,efficient,efficient,321,"// get range for graph2D (used sub-set histogram); // N.B. : this is different than in previous implementation of TGraph2D::Fit. There range used was always(0,0); // cannot use TGraph2D::GetHistogram which makes an interpolation; //TH1 * h1 = gr->GetHistogram();; //if (h1) HFit::GetDrawingRange(h1, range);; // not very efficient (t.b.i.)",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:32,Deployability,update,update,32,"// get range from histogram and update the DataRange class; // if a ranges already exist in that dimension use that one",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:28,Safety,avoid,avoid,28,"// copy TF1 using TClass to avoid slicing in case of derived classes",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:113,Integrability,depend,depending,113,"// - Decode list of options into fitOption (used by both TGraph and TH1); // works for both histograms and graph depending on the enum FitObjectType defined in HFit",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:7,Modifiability,variab,variable,7,"// for variable bins: scale content by the bin width normalized by a reference value (typically the minimum bin); // this option is for variable bin widths",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:136,Modifiability,variab,variable,136,"// for variable bins: scale content by the bin width normalized by a reference value (typically the minimum bin); // this option is for variable bin widths",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:31,Availability,error,errors,31,"// does not make sense to have errors=1 in Pearson chi2 fits",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:6,Availability,robust,robust,6,"//for robust fitting, see if # of good points is defined; // decode parameters for robust fitting",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:83,Availability,robust,robust,83,"//for robust fitting, see if # of good points is defined; // decode parameters for robust fitting",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:6,Availability,error,error,6,"// no error in X",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:21,Availability,error,errors,21,"// ignorer all point errors when fitting",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:90,Integrability,wrap,wrapper,90,"// set the fit function; // if option grad is specified use gradient; // need to create a wrapper for an automatic normalized TF1 ???",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:31,Integrability,interface,interface,31,"// this is a limitation of TF1 interface - cannot fix a parameter to zero value",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:104,Availability,error,error,104,"// set the parameter step size (by default are set to 0.3 of value); // if function provides meaningful error values",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:103,Performance,multi-thread,multi-thread,103,"// store fitting result in the backward compatible TVirtualFitter object; // lock in case running in a multi-thread enabled mode",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:445,Usability,simpl,simple,445,"// Int_t TGraph2D::DoFit(TF2 *f2 ,Option_t *option ,Option_t *goption) {; // // internal graph2D fitting methods; // Foption_t fitOption;; // ROOT::Fit::FitOptionsMake(option,fitOption);; // // create range and minimizer options with default values; // ROOT::Fit::DataRange range(2);; // ROOT::Math::MinimizerOptions minOption;; // return ROOT::Fit::FitObject(this, f2 , fitOption , minOption, goption, range);; // }; // function to compute the simple chi2 for graphs and histograms",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:59,Availability,error,error,59,"// use empty bin when not using Neyman chisquare (observed error)",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:22,Availability,error,errors,22,"// not using observed errors in Pearson chi2",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:19,Testability,log,log-lokelihood,19,"// use the poisson log-lokelihood (Baker-Cousins chi2)",MatchSource.CODE_COMMENT,hist/hist/src/HFitImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:20,Availability,error,error,20,"// adjust the given error according to the option; // return false when point must be skipped.; // When point error = 0, the point is kept if the option UseEmpty is set or if; // fErrors1 is set and the point value is not zero.; // The value should be used only for points representing counts (histograms), not for the graph.; // In the graph points with zero errors are by default skipped indepentently of the value.; // If one wants to keep the points, the option fUseEmpty must be set",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:110,Availability,error,error,110,"// adjust the given error according to the option; // return false when point must be skipped.; // When point error = 0, the point is kept if the option UseEmpty is set or if; // fErrors1 is set and the point value is not zero.; // The value should be used only for points representing counts (histograms), not for the graph.; // In the graph points with zero errors are by default skipped indepentently of the value.; // If one wants to keep the points, the option fUseEmpty must be set",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:360,Availability,error,errors,360,"// adjust the given error according to the option; // return false when point must be skipped.; // When point error = 0, the point is kept if the option UseEmpty is set or if; // fErrors1 is set and the point value is not zero.; // The value should be used only for points representing counts (histograms), not for the graph.; // In the graph points with zero errors are by default skipped indepentently of the value.; // If one wants to keep the points, the option fUseEmpty must be set",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:7,Availability,error,error,7,"// set error to 1",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:23,Availability,error,errors,23,"// skip bins with zero errors or empty",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:11,Availability,error,error,11,"// set all error to 1 for non-empty bins",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:22,Energy Efficiency,efficient,efficient,22,"// reserve n for more efficient usage; //dv.Data().reserve(n);",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:58,Availability,error,error,58,"// case of fitting a function with dimension -1; // point error is bin width y / sqrt(N) where N is the number of entries in the bin; // normalization of error will be wrong - but they will be rescaled in the fit",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:154,Availability,error,error,154,"// case of fitting a function with dimension -1; // point error is bin width y / sqrt(N) where N is the number of entries in the bin; // normalization of error will be wrong - but they will be rescaled in the fit",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:3,Safety,avoid,avoid,3,"// avoid negative values of valxmin/valxmax",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:6,Safety,avoid,avoid,6,"// to avoid binwidth = 0 set arbitrarly to 1",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:6,Safety,avoid,avoid,6,"// to avoid binwidthx = 0 set arbitrarly to 1",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:43,Availability,error,errors,43,"// default case for graphs (when they have errors)",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:10,Availability,error,errors,10,"// if all errors are zero set option of using errors to 1",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:46,Availability,error,errors,46,"// if all errors are zero set option of using errors to 1",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:31,Availability,error,errors,31,"// need to treat case when all errors are zero; // note that by default fitOpt.fCoordError is true",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:18,Availability,error,errors,18,"// check that all errors are not zero",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:22,Availability,error,errors,22,"// case of asymmetric errors (by default fAsymErrors is true)",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:26,Availability,error,errors,26,"// check also if that all errors are non zero's",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:37,Availability,error,errors,37,"// need to look also a case when all errors in y are zero",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:43,Availability,error,errors,43,"// default case for graphs (when they have errors)",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:10,Availability,error,errors,10,"// if all errors are zero set option of using errors to 1",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:46,Availability,error,errors,46,"// if all errors are zero set option of using errors to 1",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:18,Availability,error,errors,18,"// check that all errors are not zero",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:11,Availability,error,errors,11,"// for the errors use the getters by index to avoid cases when the arrays are zero; // (like in a case of a graph)",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:46,Safety,avoid,avoid,46,"// for the errors use the getters by index to avoid cases when the arrays are zero; // (like in a case of a graph)",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:19,Availability,error,error,19,"// should consider error = 0 as 1 ? Decide to skip points with zero errors; // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:68,Availability,error,errors,68,"// should consider error = 0 as 1 ? Decide to skip points with zero errors; // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:112,Availability,error,error,112,"// should consider error = 0 as 1 ? Decide to skip points with zero errors; // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:12,Availability,error,error,12,"// case use error in x or asym errors",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:31,Availability,error,errors,31,"// case use error in x or asym errors",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:10,Availability,error,error,10,"// adjust error in y according to option",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:60,Availability,error,error,60,"// we do not check the return value since we check later if error in X and Y is zero for skipping the point",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:26,Availability,error,error,26,"// skip points with total error = 0",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:14,Availability,error,errors,14,"// asymmetric errors",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:20,Availability,error,errors,20,"// case symmetric Y errors",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:31,Availability,error,error,31,"// set this if we want to have error=1 for points with zero errors (by default they are skipped); // fitOpt.fUseEmpty = true;; // use coordinate or asym errors in case option is set and type is consistent",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:60,Availability,error,errors,60,"// set this if we want to have error=1 for points with zero errors (by default they are skipped); // fitOpt.fUseEmpty = true;; // use coordinate or asym errors in case option is set and type is consistent",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:153,Availability,error,errors,153,"// set this if we want to have error=1 for points with zero errors (by default they are skipped); // fitOpt.fUseEmpty = true;; // use coordinate or asym errors in case option is set and type is consistent",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:46,Availability,error,errors,46,"// check if size is correct otherwise flag an errors",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:26,Availability,error,errors,26,"// use coordinate or asym errors in case option is set and type is consistent",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:30,Availability,error,errors,30,"// a TGraph2D with asymmetric errors does not exist",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:10,Availability,error,errors,10,"// if all errors are zero set option of using errors to 1",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:46,Availability,error,errors,46,"// if all errors are zero set option of using errors to 1",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:12,Availability,error,error,12,"// case use error in coordinates (x and y)",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:18,Availability,error,error,18,"// make CL values error of the graph",MatchSource.CODE_COMMENT,hist/hist/src/HFitInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:364,Modifiability,variab,variable,364,"////////////////////////////////////////////////////////////////////////////////; /** \class TAxis; \ingroup Histograms; \brief Class to manage histogram axis. This class manages histogram axis. It is referenced by TH1 and TGraph.; To make a graphical representation of an histogram axis, this class; references the TGaxis class. TAxis supports axis with fixed or variable bin sizes.; Labels may be associated to individual bins.; See examples of various axis representations drawn by class TGaxis.; */; //////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:107,Modifiability,variab,variable,107,"////////////////////////////////////////////////////////////////////////////////; /// Axis constructor for variable bin size",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:320,Deployability,release,released,320,"////////////////////////////////////////////////////////////////////////////////; /// Execute action corresponding to one event; ///; /// This member function is called when an axis is clicked with the locator.; /// The axis range is set between the position where the mouse is pressed; /// and the position where it is released.; /// If the mouse position is outside the current axis range when it is released; /// the axis is unzoomed with the corresponding proportions.; /// Note that the mouse does not need to be in the pad or even canvas; /// when it is released.",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:402,Deployability,release,released,402,"////////////////////////////////////////////////////////////////////////////////; /// Execute action corresponding to one event; ///; /// This member function is called when an axis is clicked with the locator.; /// The axis range is set between the position where the mouse is pressed; /// and the position where it is released.; /// If the mouse position is outside the current axis range when it is released; /// the axis is unzoomed with the corresponding proportions.; /// Note that the mouse does not need to be in the pad or even canvas; /// when it is released.",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:560,Deployability,release,released,560,"////////////////////////////////////////////////////////////////////////////////; /// Execute action corresponding to one event; ///; /// This member function is called when an axis is clicked with the locator.; /// The axis range is set between the position where the mouse is pressed; /// and the position where it is released.; /// If the mouse position is outside the current axis range when it is released; /// the axis is unzoomed with the corresponding proportions.; /// Note that the mouse does not need to be in the pad or even canvas; /// when it is released.",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:242,Modifiability,extend,extend,242,"////////////////////////////////////////////////////////////////////////////////; /// Find bin number corresponding to abscissa x. NOTE: this method does not work with alphanumeric bins !!!; ///; /// If x is underflow or overflow, attempt to extend the axis if TAxis::kCanExtend is true.; /// Otherwise, return 0 or fNbins+1.",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:192,Modifiability,extend,extend,192,"// NOTE: This should not be allowed for Alphanumeric histograms,; // but it is heavily used (legacy) in the TTreePlayer to fill alphanumeric histograms.; // but in case of alphanumeric do-not extend the axis. It makes no sense",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:6,Modifiability,variab,variable,6,"//*-* variable bin sizes; //for (bin =1; x >= fXbins.fArray[bin]; bin++);",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:332,Integrability,depend,depending,332,"////////////////////////////////////////////////////////////////////////////////; /// Find bin number with label.; /// If the List of labels does not exist create it and make the axis alphanumeric; /// If one wants just to add a single label- just call TAxis::SetBinLabel; /// If label is not in the list of labels do the following depending on the; /// bit TAxis::kCanExtend; of the axis.; /// - if the bit is set add the new label and if the number of labels exceeds; /// the number of bins, double the number of bins via TH1::LabelsInflate; /// - if the bit is not set and the histogram has labels in each bin; /// set the bit automatically and consider the histogram as alphanumeric; /// if histogram has only some bins with labels then the histogram is not; /// consider alphanumeric and return -1; ///; /// -1 is returned only when the Axis has no parent histogram",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:30,Modifiability,extend,extend,30,"//Not yet in the list. Can we extend the axis ?",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:94,Modifiability,extend,extended,94,"// {; // if (gDebug>0); // Info(""FindBin"",""Label %s is not in the list and the axis cannot be extended - the entry will be added in the underflow bin"",label);; // return 0;; // }",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:237,Modifiability,extend,extend,237,"////////////////////////////////////////////////////////////////////////////////; /// Find bin number corresponding to abscissa x; ///; /// Identical to TAxis::FindBin except that if x is an underflow/overflow; /// no attempt is made to extend the axis.",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:6,Modifiability,variab,variable,6,"//*-* variable bin sizes; // for (bin =1; x >= fXbins.fArray[bin]; bin++);",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:110,Testability,log,log,110,"////////////////////////////////////////////////////////////////////////////////; /// Return center of bin in log; /// With a log-equidistant binning for a bin with low and up edges, the mean is :; /// 0.5*(ln low + ln up) i.e. sqrt(low*up) in logx (e.g. sqrt(10^0*10^2) = 10).; /// Imagine a bin with low=1 and up=100 :; /// - the center in lin is (100-1)/2=50.5; /// - the center in log would be sqrt(1*100)=10 (!=log(50.5)); ///; /// NB: if the low edge of the bin is negative, the function returns the bin center; /// as computed by TAxis::GetBinCenter",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:126,Testability,log,log-equidistant,126,"////////////////////////////////////////////////////////////////////////////////; /// Return center of bin in log; /// With a log-equidistant binning for a bin with low and up edges, the mean is :; /// 0.5*(ln low + ln up) i.e. sqrt(low*up) in logx (e.g. sqrt(10^0*10^2) = 10).; /// Imagine a bin with low=1 and up=100 :; /// - the center in lin is (100-1)/2=50.5; /// - the center in log would be sqrt(1*100)=10 (!=log(50.5)); ///; /// NB: if the low edge of the bin is negative, the function returns the bin center; /// as computed by TAxis::GetBinCenter",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:244,Testability,log,logx,244,"////////////////////////////////////////////////////////////////////////////////; /// Return center of bin in log; /// With a log-equidistant binning for a bin with low and up edges, the mean is :; /// 0.5*(ln low + ln up) i.e. sqrt(low*up) in logx (e.g. sqrt(10^0*10^2) = 10).; /// Imagine a bin with low=1 and up=100 :; /// - the center in lin is (100-1)/2=50.5; /// - the center in log would be sqrt(1*100)=10 (!=log(50.5)); ///; /// NB: if the low edge of the bin is negative, the function returns the bin center; /// as computed by TAxis::GetBinCenter",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:385,Testability,log,log,385,"////////////////////////////////////////////////////////////////////////////////; /// Return center of bin in log; /// With a log-equidistant binning for a bin with low and up edges, the mean is :; /// 0.5*(ln low + ln up) i.e. sqrt(low*up) in logx (e.g. sqrt(10^0*10^2) = 10).; /// Imagine a bin with low=1 and up=100 :; /// - the center in lin is (100-1)/2=50.5; /// - the center in log would be sqrt(1*100)=10 (!=log(50.5)); ///; /// NB: if the low edge of the bin is negative, the function returns the bin center; /// as computed by TAxis::GetBinCenter",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:416,Testability,log,log,416,"////////////////////////////////////////////////////////////////////////////////; /// Return center of bin in log; /// With a log-equidistant binning for a bin with low and up edges, the mean is :; /// 0.5*(ln low + ln up) i.e. sqrt(low*up) in logx (e.g. sqrt(10^0*10^2) = 10).; /// Imagine a bin with low=1 and up=100 :; /// - the center in lin is (100-1)/2=50.5; /// - the center in log would be sqrt(1*100)=10 (!=log(50.5)); ///; /// NB: if the low edge of the bin is negative, the function returns the bin center; /// as computed by TAxis::GetBinCenter",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:587,Performance,optimiz,optimization,587,"////////////////////////////////////////////////////////////////////////////////; /// Return the number of axis labels.; ///; /// It is sometimes useful to know the number of labels on an axis. For instance; /// when changing the labels with TAxis::ChangeLabel. The number of labels is equal; /// to `the_number_of_divisions + 1`. By default the number of divisions is; /// optimised to show a coherent labeling of the main tick marks. After optimisation the; /// real number of divisions will be smaller or equal to number of divisions requested.; /// In order to turn off the labeling optimization, it is enough to give a negative; /// number of divisions to TAttAxis::SetNdivisions. The absolute value of this number will be use as; /// the exact number of divisions. This method takes the two cases (optimised or not) into; /// account.",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:400,Availability,down,down,400,"////////////////////////////////////////////////////////////////////////////////; /// Set option(s) to draw axis with labels; /// option can be:; /// - ""a"" sort by alphabetic order; /// - "">"" sort by decreasing values; /// - ""<"" sort by increasing values; /// - ""h"" draw labels horizontal; /// - ""v"" draw labels vertical; /// - ""u"" draw labels up (end of label right adjusted); /// - ""d"" draw labels down (start of label left adjusted)",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:107,Modifiability,variab,variable,107,"////////////////////////////////////////////////////////////////////////////////; /// Initialize axis with variable bins",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:107,Modifiability,variab,variable,107,"////////////////////////////////////////////////////////////////////////////////; /// Initialize axis with variable bins",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:3,Usability,clear,clear,3,"// clear underflow and overflow (in an alphanumeric situation they do not make sense); // NOTE: using AddBinContent instead of SetBinContent in order to not change; // the number of entries; //((TH1 *)fParent)->ClearUnderflowAndOverflow();; // L.M. 26.1.15 Keep underflow and overflows (see ROOT-7034)",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:211,Usability,Clear,ClearUnderflowAndOverflow,211,"// clear underflow and overflow (in an alphanumeric situation they do not make sense); // NOTE: using AddBinContent instead of SetBinContent in order to not change; // the number of entries; //((TH1 *)fParent)->ClearUnderflowAndOverflow();; // L.M. 26.1.15 Keep underflow and overflows (see ROOT-7034)",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:218,Modifiability,extend,extendable,218,"////////////////////////////////////////////////////////////////////////////////; /// Set label for bin.; /// If no label list exists, it is created. If all the bins have labels, the; /// axis becomes alphanumeric and extendable.; /// New labels will not be added with the Fill method but will end-up in the; /// underflow bin. See documentation of TAxis::FindBin(const char*)",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:429,Availability,avail,available,429,"////////////////////////////////////////////////////////////////////////////////; /// Set the viewing range for the axis using bin numbers.; ///; /// \param first First bin of the range.; /// \param last Last bin of the range.; /// To set a range using the axis coordinates, use TAxis::SetRangeUser.; ///; /// If `first == last == 0` or if `first > last` or if the range specified does; /// not intersect at all with the maximum available range `[0, fNbins + 1]`,; /// then the viewing range is reset by removing the bit TAxis::kAxisRange. In this; /// case, the functions TAxis::GetFirst() and TAxis::GetLast() will return 1; /// and fNbins.; ///; /// If the range specified partially intersects with `[0, fNbins + 1]`, then the; /// intersection range is accepted. For instance, if `first == -2` and `last == fNbins`,; /// the accepted range will be `[0, fNbins]` (`fFirst = 0` and `fLast = fNbins`).; ///; /// \note For historical reasons, SetRange(0,0) resets the range even though bin 0 is; /// technically reserved for the underflow; in order to set the range of the axis; /// so that it only includes the underflow, use `SetRange(-1,0)`.",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:23,Availability,error,error,23,"// fixes for numerical error and for https://savannah.cern.ch/bugs/index.php?99777",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:857,Testability,Test,Test,857,"////////////////////////////////////////////////////////////////////////////////; /// Change the format used for time plotting; ///; /// The format string for date and time use the same options as the one used; /// in the standard strftime C function, i.e. :; /// for date :; ///; /// %a abbreviated weekday name; /// %b abbreviated month name; /// %d day of the month (01-31); /// %m month (01-12); /// %y year without century; ///; /// for time :; ///; /// %H hour (24-hour clock); /// %I hour (12-hour clock); /// %p local equivalent of AM or PM; /// %M minute (00-59); /// %S seconds (00-61); /// %% %; ///; /// This function allows also to define the time offset. It is done via %F; /// which should be appended at the end of the format string. The time; /// offset has the following format: 'yyyy-mm-dd hh:mm:ss'; /// Example:; ///; /// h = new TH1F(""Test"",""h"",3000,0.,200000.);; /// h->GetXaxis()->SetTimeDisplay(1);; /// h->GetXaxis()->SetTimeFormat(""%d\/%m\/%y%F2000-02-28 13:00:01"");; ///; /// This defines the time format being ""dd/mm/yy"" and the time offset as the; /// February 28th 2003 at 13:00:01; ///; /// If %F is not specified, the time offset used will be the one defined by:; /// gStyle->SetTimeOffset. For example like that:; ///; /// TDatime da(2003,02,28,12,00,00);; /// gStyle->SetTimeOffset(da.Convert());",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:31,Availability,repair,repair,31,"// following lines required to repair for a bug in Root version 1.03",MatchSource.CODE_COMMENT,hist/hist/src/TAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:889,Deployability,configurat,configuration,889,"// @(#)root/hist:$Id$; // Author: Lorenzo Moneta; /*************************************************************************; * Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /** \class TBackCompFitter; \ingroup Hist; \brief Backward compatible implementation of TVirtualFitter. Backward compatible implementation of TVirtualFitter using the; class ROOT::Fit::Fitter. This class is created after fitting an; histogram (TH1), TGraph or TTree and provides in addition to the; methods of the TVirtualFitter hooks to access the fit result class; (ROOT::Fit::FitResult), the fit configuration; (ROOT::Fit::FitConfig) or the fit data (ROOT::Fit::FitData) using. ~~~~~~~~{.cpp}; TBackCompFitter * fitter = (TBackCompFitter *) TVirtualFitter::GetFitter();; ROOT::Fit::FitResult & result = fitter->GetFitResult();; result.Print(std::cout);; ~~~~~~~~. Methods for getting the confidence level or contours are also; provided. Note that after a new calls to TH1::Fit (or similar) the; class will be deleted and all reference to the FitResult, FitConfig; or minimizer will be invalid. One could eventually copying the; class before issuing a new fit to avoid deleting this information.; */; //////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:889,Modifiability,config,configuration,889,"// @(#)root/hist:$Id$; // Author: Lorenzo Moneta; /*************************************************************************; * Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /** \class TBackCompFitter; \ingroup Hist; \brief Backward compatible implementation of TVirtualFitter. Backward compatible implementation of TVirtualFitter using the; class ROOT::Fit::Fitter. This class is created after fitting an; histogram (TH1), TGraph or TTree and provides in addition to the; methods of the TVirtualFitter hooks to access the fit result class; (ROOT::Fit::FitResult), the fit configuration; (ROOT::Fit::FitConfig) or the fit data (ROOT::Fit::FitData) using. ~~~~~~~~{.cpp}; TBackCompFitter * fitter = (TBackCompFitter *) TVirtualFitter::GetFitter();; ROOT::Fit::FitResult & result = fitter->GetFitResult();; result.Print(std::cout);; ~~~~~~~~. Methods for getting the confidence level or contours are also; provided. Note that after a new calls to TH1::Fit (or similar) the; class will be deleted and all reference to the FitResult, FitConfig; or minimizer will be invalid. One could eventually copying the; class before issuing a new fit to avoid deleting this information.; */; //////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:1455,Safety,avoid,avoid,1455,"// @(#)root/hist:$Id$; // Author: Lorenzo Moneta; /*************************************************************************; * Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /** \class TBackCompFitter; \ingroup Hist; \brief Backward compatible implementation of TVirtualFitter. Backward compatible implementation of TVirtualFitter using the; class ROOT::Fit::Fitter. This class is created after fitting an; histogram (TH1), TGraph or TTree and provides in addition to the; methods of the TVirtualFitter hooks to access the fit result class; (ROOT::Fit::FitResult), the fit configuration; (ROOT::Fit::FitConfig) or the fit data (ROOT::Fit::FitData) using. ~~~~~~~~{.cpp}; TBackCompFitter * fitter = (TBackCompFitter *) TVirtualFitter::GetFitter();; ROOT::Fit::FitResult & result = fitter->GetFitResult();; result.Print(std::cout);; ~~~~~~~~. Methods for getting the confidence level or contours are also; provided. Note that after a new calls to TH1::Fit (or similar) the; class will be deleted and all reference to the FitResult, FitConfig; or minimizer will be invalid. One could eventually copying the; class before issuing a new fit to avoid deleting this information.; */; //////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:828,Security,access,access,828,"// @(#)root/hist:$Id$; // Author: Lorenzo Moneta; /*************************************************************************; * Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /** \class TBackCompFitter; \ingroup Hist; \brief Backward compatible implementation of TVirtualFitter. Backward compatible implementation of TVirtualFitter using the; class ROOT::Fit::Fitter. This class is created after fitting an; histogram (TH1), TGraph or TTree and provides in addition to the; methods of the TVirtualFitter hooks to access the fit result class; (ROOT::Fit::FitResult), the fit configuration; (ROOT::Fit::FitConfig) or the fit data (ROOT::Fit::FitData) using. ~~~~~~~~{.cpp}; TBackCompFitter * fitter = (TBackCompFitter *) TVirtualFitter::GetFitter();; ROOT::Fit::FitResult & result = fitter->GetFitResult();; result.Print(std::cout);; ~~~~~~~~. Methods for getting the confidence level or contours are also; provided. Note that after a new calls to TH1::Fit (or similar) the; class will be deleted and all reference to the FitResult, FitConfig; or minimizer will be invalid. One could eventually copying the; class before issuing a new fit to avoid deleting this information.; */; //////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:123,Integrability,interface,interface,123,"////////////////////////////////////////////////////////////////////////////////; /// Constructor needed by TVirtualFitter interface. Same behavior as default constructor.; /// initialize setting name and the global pointer",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:193,Deployability,configurat,configuration,193,"////////////////////////////////////////////////////////////////////////////////; /// Constructor used after having fit using directly ROOT::Fit::Fitter; /// will create a dummy fitter copying configuration and parameter settings",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:193,Modifiability,config,configuration,193,"////////////////////////////////////////////////////////////////////////////////; /// Constructor used after having fit using directly ROOT::Fit::Fitter; /// will create a dummy fitter copying configuration and parameter settings",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear resources for consecutive fits",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:133,Integrability,interface,interface,133,"////////////////////////////////////////////////////////////////////////////////; /// Execute the command (Fortran Minuit compatible interface)",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:2,Usability,Simpl,Simplex,2,"//Simplex",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:23,Security,access,access,23,"// do only MINOS. need access to minimizer. For the moment re-run fitting with minos options",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:23,Security,access,access,23,"// do only HESSE. need access to minimizer. For the moment re-run fitting with hesse options",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:11,Availability,avail,available,11,"// not yet available; // fGradient = true;",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:400,Availability,error,errors,400,"////////////////////////////////////////////////////////////////////////////////; /// Computes confidence intervals at level cl. Default is 0.95; /// The TObject parameter can be a TGraphErrors, a TGraph2DErrors or a TH1,2,3.; /// For Graphs, confidence intervals are computed for each point,; /// the value of the graph at that point is set to the function value at that; /// point, and the graph y-errors (or z-errors) are set to the value of; /// the confidence interval at that point.; /// For Histograms, confidence intervals are computed for each bin center; /// The bin content of this bin is then set to the function value at the bin; /// center, and the bin error is set to the confidence interval value.; //; /// NOTE: confidence intervals are approximate for nonlinear models!; ///; /// Allowed combinations:; ///; /// Fitted object | Passed object; /// --------------------------|------------------; /// TGraph | TGraphErrors, TH1; /// TGraphErrors, AsymmErrors | TGraphErrors, TH1; /// TH1 | TGraphErrors, TH1; /// TGraph2D | TGraph2DErrors, TH2; /// TGraph2DErrors | TGraph2DErrors, TH2; /// TH2 | TGraph2DErrors, TH2; /// TH3 | TH3",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:413,Availability,error,errors,413,"////////////////////////////////////////////////////////////////////////////////; /// Computes confidence intervals at level cl. Default is 0.95; /// The TObject parameter can be a TGraphErrors, a TGraph2DErrors or a TH1,2,3.; /// For Graphs, confidence intervals are computed for each point,; /// the value of the graph at that point is set to the function value at that; /// point, and the graph y-errors (or z-errors) are set to the value of; /// the confidence interval at that point.; /// For Histograms, confidence intervals are computed for each bin center; /// The bin content of this bin is then set to the function value at the bin; /// center, and the bin error is set to the confidence interval value.; //; /// NOTE: confidence intervals are approximate for nonlinear models!; ///; /// Allowed combinations:; ///; /// Fitted object | Passed object; /// --------------------------|------------------; /// TGraph | TGraphErrors, TH1; /// TGraphErrors, AsymmErrors | TGraphErrors, TH1; /// TH1 | TGraphErrors, TH1; /// TGraph2D | TGraph2DErrors, TH2; /// TGraph2DErrors | TGraph2DErrors, TH2; /// TH2 | TGraph2DErrors, TH2; /// TH3 | TH3",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:667,Availability,error,error,667,"////////////////////////////////////////////////////////////////////////////////; /// Computes confidence intervals at level cl. Default is 0.95; /// The TObject parameter can be a TGraphErrors, a TGraph2DErrors or a TH1,2,3.; /// For Graphs, confidence intervals are computed for each point,; /// the value of the graph at that point is set to the function value at that; /// point, and the graph y-errors (or z-errors) are set to the value of; /// the confidence interval at that point.; /// For Histograms, confidence intervals are computed for each bin center; /// The bin content of this bin is then set to the function value at the bin; /// center, and the bin error is set to the confidence interval value.; //; /// NOTE: confidence intervals are approximate for nonlinear models!; ///; /// Allowed combinations:; ///; /// Fitted object | Passed object; /// --------------------------|------------------; /// TGraph | TGraphErrors, TH1; /// TGraphErrors, AsymmErrors | TGraphErrors, TH1; /// TH1 | TGraphErrors, TH1; /// TGraph2D | TGraph2DErrors, TH2; /// TGraph2DErrors | TGraph2DErrors, TH2; /// TH2 | TGraph2DErrors, TH2; /// TH3 | TH3",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:17,Modifiability,Inherit,InheritsFrom,17,"// else if (obj->InheritsFrom(TMultiGraph::Class()) ); // ROOT::Fit::FillData(data, dynamic_cast<TMultiGraph *>(obj) );",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:94,Availability,error,error,94,"////////////////////////////////////////////////////////////////////////////////; /// Get the error matrix in a pointer to a NxN array.; /// excluding the fixed parameters",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:90,Availability,error,error,90,"////////////////////////////////////////////////////////////////////////////////; /// Get error matrix element (return all zero if matrix is not available)",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:145,Availability,avail,available,145,"////////////////////////////////////////////////////////////////////////////////; /// Get error matrix element (return all zero if matrix is not available)",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:94,Availability,error,errors,94,"////////////////////////////////////////////////////////////////////////////////; /// Get fit errors",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:13,Modifiability,variab,variable,13,"// number of variable parameters",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:96,Availability,error,error,96,"////////////////////////////////////////////////////////////////////////////////; /// Parameter error",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:123,Availability,error,errors,123,"////////////////////////////////////////////////////////////////////////////////; /// Get all parameter info (name, value, errors)",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:3,Availability,error,error,3,"// error is step size in this case",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:93,Testability,log,log,93,"////////////////////////////////////////////////////////////////////////////////; /// Sum of log (un-needed)",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:23,Availability,error,errors,23,"// need to print minos errors and globalCC + other info",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:86,Deployability,Release,Release,86,"////////////////////////////////////////////////////////////////////////////////; /// Release a fit parameter",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:341,Testability,assert,assert,341,"//______________________________________________________________________________; // static method evaluating FCN; // void TBackCompFitter::FCN( int &, double * , double & f, double * x , int /* iflag */) {; // // get static instance of fitter; // TBackCompFitter * fitter = dynamic_cast<TBackCompFitter *>(TVirtualFitter::GetFitter());; // assert(fitter);; // if (fitter->fObjFunc == 0) fitter->RecreateFCN();; // assert(fitter->fObjFunc);; // f = (*(fitter.fObjFunc) )(x);; // }; ////////////////////////////////////////////////////////////////////////////////; /// Recreate a minimizer instance using the function and data; /// set objective function in minimizers function to re-create FCN from stored data object and fit options",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:415,Testability,assert,assert,415,"//______________________________________________________________________________; // static method evaluating FCN; // void TBackCompFitter::FCN( int &, double * , double & f, double * x , int /* iflag */) {; // // get static instance of fitter; // TBackCompFitter * fitter = dynamic_cast<TBackCompFitter *>(TVirtualFitter::GetFitter());; // assert(fitter);; // if (fitter->fObjFunc == 0) fitter->RecreateFCN();; // assert(fitter->fObjFunc);; // f = (*(fitter.fObjFunc) )(x);; // }; ////////////////////////////////////////////////////////////////////////////////; /// Recreate a minimizer instance using the function and data; /// set objective function in minimizers function to re-create FCN from stored data object and fit options",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:113,Energy Efficiency,Adapt,Adapter,113,"////////////////////////////////////////////////////////////////////////////////; /// Override setFCN to use the Adapter to Minuit2 FCN interface; /// To set the address of the minimization function",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:113,Integrability,Adapter,Adapter,113,"////////////////////////////////////////////////////////////////////////////////; /// Override setFCN to use the Adapter to Minuit2 FCN interface; /// To set the address of the minimization function",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:136,Integrability,interface,interface,136,"////////////////////////////////////////////////////////////////////////////////; /// Override setFCN to use the Adapter to Minuit2 FCN interface; /// To set the address of the minimization function",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:113,Modifiability,Adapt,Adapter,113,"////////////////////////////////////////////////////////////////////////////////; /// Override setFCN to use the Adapter to Minuit2 FCN interface; /// To set the address of the minimization function",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:641,Availability,Error,Error,641,"//______________________________________________________________________________; // bool TBackCompFitter::Scan2D(unsigned int ipar, unsigned int jpar, TGraph2D * gr,; // double xmin = 0, double xmax = 0, double ymin = 0, double ymax = 0) {; // // scan the parameters ipar between values of [xmin,xmax] and; // // jpar between values of [ymin,ymax] and; // // a graph2D must be given which will be on return filled with the scan resul; // // If the graph size is zero, a default size n = 20x20 will be used; // //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*; // if (!gr) return false;; // if (!fMinimizer) {; // Error(""Scan"",""Minimizer is not available - cannot scan before fitting"");; // return false;; // }; // unsigned int npoints = gr->GetN();; // if (npoints == 0) {; // npoints = 40;; // gr->Set(npoints);; // }; // // to be implemented; // for (unsigned int ix = 0; ix < npoints; ++ix) {; // return fMinimizer->Scan( ipar, npoints, gr->GetX(), gr->GetY(), xmin, xmax);; // }; ////////////////////////////////////////////////////////////////////////////////; /// Create a 2D contour around the minimum for the parameter ipar and jpar; /// if a minimum does not exist or is invalid it will return false; /// on exit a TGraph is filled with the contour points; /// the number of contour points is determined by the size of the TGraph.; /// if the size is zero a default number of points = 20 is used; /// pass optionally the confidence level, default is 0.683; /// it is assumed that ErrorDef() defines the right error definition; /// (i.e 1 sigma error for one parameter). If not the confidence level are scaled to new level",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:672,Availability,avail,available,672,"//______________________________________________________________________________; // bool TBackCompFitter::Scan2D(unsigned int ipar, unsigned int jpar, TGraph2D * gr,; // double xmin = 0, double xmax = 0, double ymin = 0, double ymax = 0) {; // // scan the parameters ipar between values of [xmin,xmax] and; // // jpar between values of [ymin,ymax] and; // // a graph2D must be given which will be on return filled with the scan resul; // // If the graph size is zero, a default size n = 20x20 will be used; // //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*; // if (!gr) return false;; // if (!fMinimizer) {; // Error(""Scan"",""Minimizer is not available - cannot scan before fitting"");; // return false;; // }; // unsigned int npoints = gr->GetN();; // if (npoints == 0) {; // npoints = 40;; // gr->Set(npoints);; // }; // // to be implemented; // for (unsigned int ix = 0; ix < npoints; ++ix) {; // return fMinimizer->Scan( ipar, npoints, gr->GetX(), gr->GetY(), xmin, xmax);; // }; ////////////////////////////////////////////////////////////////////////////////; /// Create a 2D contour around the minimum for the parameter ipar and jpar; /// if a minimum does not exist or is invalid it will return false; /// on exit a TGraph is filled with the contour points; /// the number of contour points is determined by the size of the TGraph.; /// if the size is zero a default number of points = 20 is used; /// pass optionally the confidence level, default is 0.683; /// it is assumed that ErrorDef() defines the right error definition; /// (i.e 1 sigma error for one parameter). If not the confidence level are scaled to new level",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:1517,Availability,Error,ErrorDef,1517,"//______________________________________________________________________________; // bool TBackCompFitter::Scan2D(unsigned int ipar, unsigned int jpar, TGraph2D * gr,; // double xmin = 0, double xmax = 0, double ymin = 0, double ymax = 0) {; // // scan the parameters ipar between values of [xmin,xmax] and; // // jpar between values of [ymin,ymax] and; // // a graph2D must be given which will be on return filled with the scan resul; // // If the graph size is zero, a default size n = 20x20 will be used; // //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*; // if (!gr) return false;; // if (!fMinimizer) {; // Error(""Scan"",""Minimizer is not available - cannot scan before fitting"");; // return false;; // }; // unsigned int npoints = gr->GetN();; // if (npoints == 0) {; // npoints = 40;; // gr->Set(npoints);; // }; // // to be implemented; // for (unsigned int ix = 0; ix < npoints; ++ix) {; // return fMinimizer->Scan( ipar, npoints, gr->GetX(), gr->GetY(), xmin, xmax);; // }; ////////////////////////////////////////////////////////////////////////////////; /// Create a 2D contour around the minimum for the parameter ipar and jpar; /// if a minimum does not exist or is invalid it will return false; /// on exit a TGraph is filled with the contour points; /// the number of contour points is determined by the size of the TGraph.; /// if the size is zero a default number of points = 20 is used; /// pass optionally the confidence level, default is 0.683; /// it is assumed that ErrorDef() defines the right error definition; /// (i.e 1 sigma error for one parameter). If not the confidence level are scaled to new level",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:1546,Availability,error,error,1546,"//______________________________________________________________________________; // bool TBackCompFitter::Scan2D(unsigned int ipar, unsigned int jpar, TGraph2D * gr,; // double xmin = 0, double xmax = 0, double ymin = 0, double ymax = 0) {; // // scan the parameters ipar between values of [xmin,xmax] and; // // jpar between values of [ymin,ymax] and; // // a graph2D must be given which will be on return filled with the scan resul; // // If the graph size is zero, a default size n = 20x20 will be used; // //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*; // if (!gr) return false;; // if (!fMinimizer) {; // Error(""Scan"",""Minimizer is not available - cannot scan before fitting"");; // return false;; // }; // unsigned int npoints = gr->GetN();; // if (npoints == 0) {; // npoints = 40;; // gr->Set(npoints);; // }; // // to be implemented; // for (unsigned int ix = 0; ix < npoints; ++ix) {; // return fMinimizer->Scan( ipar, npoints, gr->GetX(), gr->GetY(), xmin, xmax);; // }; ////////////////////////////////////////////////////////////////////////////////; /// Create a 2D contour around the minimum for the parameter ipar and jpar; /// if a minimum does not exist or is invalid it will return false; /// on exit a TGraph is filled with the contour points; /// the number of contour points is determined by the size of the TGraph.; /// if the size is zero a default number of points = 20 is used; /// pass optionally the confidence level, default is 0.683; /// it is assumed that ErrorDef() defines the right error definition; /// (i.e 1 sigma error for one parameter). If not the confidence level are scaled to new level",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:1581,Availability,error,error,1581,"//______________________________________________________________________________; // bool TBackCompFitter::Scan2D(unsigned int ipar, unsigned int jpar, TGraph2D * gr,; // double xmin = 0, double xmax = 0, double ymin = 0, double ymax = 0) {; // // scan the parameters ipar between values of [xmin,xmax] and; // // jpar between values of [ymin,ymax] and; // // a graph2D must be given which will be on return filled with the scan resul; // // If the graph size is zero, a default size n = 20x20 will be used; // //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*; // if (!gr) return false;; // if (!fMinimizer) {; // Error(""Scan"",""Minimizer is not available - cannot scan before fitting"");; // return false;; // }; // unsigned int npoints = gr->GetN();; // if (npoints == 0) {; // npoints = 40;; // gr->Set(npoints);; // }; // // to be implemented; // for (unsigned int ix = 0; ix < npoints; ++ix) {; // return fMinimizer->Scan( ipar, npoints, gr->GetX(), gr->GetY(), xmin, xmax);; // }; ////////////////////////////////////////////////////////////////////////////////; /// Create a 2D contour around the minimum for the parameter ipar and jpar; /// if a minimum does not exist or is invalid it will return false; /// on exit a TGraph is filled with the contour points; /// the number of contour points is determined by the size of the TGraph.; /// if the size is zero a default number of points = 20 is used; /// pass optionally the confidence level, default is 0.683; /// it is assumed that ErrorDef() defines the right error definition; /// (i.e 1 sigma error for one parameter). If not the confidence level are scaled to new level",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:7,Availability,error,error,7,"// get error level used for fitting",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:63,Availability,error,error,63,"// 2 is number of parameter we do the contour; // set required error definition in minimizer",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:15,Availability,error,error,15,"// restore the error level used for fitting",MatchSource.CODE_COMMENT,hist/hist/src/TBackCompFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx:757,Availability,avail,available,757,"// @(#)root/hist:$Id$; // Author: Frank Filthaut, Rene Brun 30/05/2007; /*************************************************************************; * Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TBinomialEfficiencyFitter; \ingroup Hist; \brief Binomial fitter for the division of two histograms. Use when you need to calculate a selection's efficiency from two histograms,; one containing all entries, and one containing the subset of these entries; that pass the selection, and when you have a parametrization available for; the efficiency as a function of the variable(s) under consideration. A very common problem when estimating efficiencies is that of error estimation:; when no other information is available than the total number of events N and; the selected number n, the best estimate for the selection efficiency p is n/N.; Standard binomial statistics dictates that the uncertainty (this presupposes; sufficiently high statistics that an approximation by a normal distribution is; reasonable) on p, given N, is; \f[; \sqrt{\frac{p(1-p)}{N}}; \f]; However, when p is estimated as n/N, fluctuations from the true p to its; estimate become important, especially for low numbers of events, and giving; rise to biased results. When fitting a parametrized efficiency, these problems can largely be overcome,; as a hypothesized true efficiency is available by construction. Even so, simply; using the corresponding uncertainty still presupposes that Gaussian errors; yields a reasonable approximation. When using, instead of binned efficiency; histograms, the original numerator and denominator histograms, a binned maximum; likelihood can be constructed as the product of bin-by-bin binomial probabilities; to select n out of N events. Assuming that",MatchSource.CODE_COMMENT,hist/hist/src/TBinomialEfficiencyFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx:903,Availability,error,error,903,"// @(#)root/hist:$Id$; // Author: Frank Filthaut, Rene Brun 30/05/2007; /*************************************************************************; * Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TBinomialEfficiencyFitter; \ingroup Hist; \brief Binomial fitter for the division of two histograms. Use when you need to calculate a selection's efficiency from two histograms,; one containing all entries, and one containing the subset of these entries; that pass the selection, and when you have a parametrization available for; the efficiency as a function of the variable(s) under consideration. A very common problem when estimating efficiencies is that of error estimation:; when no other information is available than the total number of events N and; the selected number n, the best estimate for the selection efficiency p is n/N.; Standard binomial statistics dictates that the uncertainty (this presupposes; sufficiently high statistics that an approximation by a normal distribution is; reasonable) on p, given N, is; \f[; \sqrt{\frac{p(1-p)}{N}}; \f]; However, when p is estimated as n/N, fluctuations from the true p to its; estimate become important, especially for low numbers of events, and giving; rise to biased results. When fitting a parametrized efficiency, these problems can largely be overcome,; as a hypothesized true efficiency is available by construction. Even so, simply; using the corresponding uncertainty still presupposes that Gaussian errors; yields a reasonable approximation. When using, instead of binned efficiency; histograms, the original numerator and denominator histograms, a binned maximum; likelihood can be constructed as the product of bin-by-bin binomial probabilities; to select n out of N events. Assuming that",MatchSource.CODE_COMMENT,hist/hist/src/TBinomialEfficiencyFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx:951,Availability,avail,available,951,"// @(#)root/hist:$Id$; // Author: Frank Filthaut, Rene Brun 30/05/2007; /*************************************************************************; * Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TBinomialEfficiencyFitter; \ingroup Hist; \brief Binomial fitter for the division of two histograms. Use when you need to calculate a selection's efficiency from two histograms,; one containing all entries, and one containing the subset of these entries; that pass the selection, and when you have a parametrization available for; the efficiency as a function of the variable(s) under consideration. A very common problem when estimating efficiencies is that of error estimation:; when no other information is available than the total number of events N and; the selected number n, the best estimate for the selection efficiency p is n/N.; Standard binomial statistics dictates that the uncertainty (this presupposes; sufficiently high statistics that an approximation by a normal distribution is; reasonable) on p, given N, is; \f[; \sqrt{\frac{p(1-p)}{N}}; \f]; However, when p is estimated as n/N, fluctuations from the true p to its; estimate become important, especially for low numbers of events, and giving; rise to biased results. When fitting a parametrized efficiency, these problems can largely be overcome,; as a hypothesized true efficiency is available by construction. Even so, simply; using the corresponding uncertainty still presupposes that Gaussian errors; yields a reasonable approximation. When using, instead of binned efficiency; histograms, the original numerator and denominator histograms, a binned maximum; likelihood can be constructed as the product of bin-by-bin binomial probabilities; to select n out of N events. Assuming that",MatchSource.CODE_COMMENT,hist/hist/src/TBinomialEfficiencyFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx:1598,Availability,avail,available,1598,"you need to calculate a selection's efficiency from two histograms,; one containing all entries, and one containing the subset of these entries; that pass the selection, and when you have a parametrization available for; the efficiency as a function of the variable(s) under consideration. A very common problem when estimating efficiencies is that of error estimation:; when no other information is available than the total number of events N and; the selected number n, the best estimate for the selection efficiency p is n/N.; Standard binomial statistics dictates that the uncertainty (this presupposes; sufficiently high statistics that an approximation by a normal distribution is; reasonable) on p, given N, is; \f[; \sqrt{\frac{p(1-p)}{N}}; \f]; However, when p is estimated as n/N, fluctuations from the true p to its; estimate become important, especially for low numbers of events, and giving; rise to biased results. When fitting a parametrized efficiency, these problems can largely be overcome,; as a hypothesized true efficiency is available by construction. Even so, simply; using the corresponding uncertainty still presupposes that Gaussian errors; yields a reasonable approximation. When using, instead of binned efficiency; histograms, the original numerator and denominator histograms, a binned maximum; likelihood can be constructed as the product of bin-by-bin binomial probabilities; to select n out of N events. Assuming that a correct parametrization of the; efficiency is provided, this construction in general yields less biased results; (and is much less sensitive to binning details). A generic use of this method is given below (note that the method works for 2D; and 3D histograms as well):. ~~~ {.cpp}; {; TH1* denominator; // denominator histogram; TH1* numerator; // corresponding numerator histogram; TF1* eff; // efficiency parametrization; .... // set step sizes and initial parameter; .... // values for the fit function; .... // possibly also set ranges, see TF",MatchSource.CODE_COMMENT,hist/hist/src/TBinomialEfficiencyFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx:1710,Availability,error,errors,1710,"ntries; that pass the selection, and when you have a parametrization available for; the efficiency as a function of the variable(s) under consideration. A very common problem when estimating efficiencies is that of error estimation:; when no other information is available than the total number of events N and; the selected number n, the best estimate for the selection efficiency p is n/N.; Standard binomial statistics dictates that the uncertainty (this presupposes; sufficiently high statistics that an approximation by a normal distribution is; reasonable) on p, given N, is; \f[; \sqrt{\frac{p(1-p)}{N}}; \f]; However, when p is estimated as n/N, fluctuations from the true p to its; estimate become important, especially for low numbers of events, and giving; rise to biased results. When fitting a parametrized efficiency, these problems can largely be overcome,; as a hypothesized true efficiency is available by construction. Even so, simply; using the corresponding uncertainty still presupposes that Gaussian errors; yields a reasonable approximation. When using, instead of binned efficiency; histograms, the original numerator and denominator histograms, a binned maximum; likelihood can be constructed as the product of bin-by-bin binomial probabilities; to select n out of N events. Assuming that a correct parametrization of the; efficiency is provided, this construction in general yields less biased results; (and is much less sensitive to binning details). A generic use of this method is given below (note that the method works for 2D; and 3D histograms as well):. ~~~ {.cpp}; {; TH1* denominator; // denominator histogram; TH1* numerator; // corresponding numerator histogram; TF1* eff; // efficiency parametrization; .... // set step sizes and initial parameter; .... // values for the fit function; .... // possibly also set ranges, see TF1::SetRange(); TBinomialEfficiencyFitter* f = new TBinomialEfficiencyFitter(; numerator, denominator);; Int_t status = f->Fit(eff, ""I"");",MatchSource.CODE_COMMENT,hist/hist/src/TBinomialEfficiencyFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx:3038,Availability,reliab,reliable,3038," presupposes; sufficiently high statistics that an approximation by a normal distribution is; reasonable) on p, given N, is; \f[; \sqrt{\frac{p(1-p)}{N}}; \f]; However, when p is estimated as n/N, fluctuations from the true p to its; estimate become important, especially for low numbers of events, and giving; rise to biased results. When fitting a parametrized efficiency, these problems can largely be overcome,; as a hypothesized true efficiency is available by construction. Even so, simply; using the corresponding uncertainty still presupposes that Gaussian errors; yields a reasonable approximation. When using, instead of binned efficiency; histograms, the original numerator and denominator histograms, a binned maximum; likelihood can be constructed as the product of bin-by-bin binomial probabilities; to select n out of N events. Assuming that a correct parametrization of the; efficiency is provided, this construction in general yields less biased results; (and is much less sensitive to binning details). A generic use of this method is given below (note that the method works for 2D; and 3D histograms as well):. ~~~ {.cpp}; {; TH1* denominator; // denominator histogram; TH1* numerator; // corresponding numerator histogram; TF1* eff; // efficiency parametrization; .... // set step sizes and initial parameter; .... // values for the fit function; .... // possibly also set ranges, see TF1::SetRange(); TBinomialEfficiencyFitter* f = new TBinomialEfficiencyFitter(; numerator, denominator);; Int_t status = f->Fit(eff, ""I"");; if (status == 0) {; // if the fit was successful, display bin-by-bin efficiencies; // as well as the result of the fit; numerator->Sumw2();; TH1* hEff = dynamic_cast<TH1*>(numerator->Clone(""heff""));; hEff->Divide(hEff, denominator, 1.0, 1.0, ""B"");; hEff->Draw(""E"");; eff->Draw(""same"");; }; }; ~~~. Note that this method cannot be expected to yield reliable results when using; weighted histograms (because the likelihood computation will be incorrect). */",MatchSource.CODE_COMMENT,hist/hist/src/TBinomialEfficiencyFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx:808,Modifiability,variab,variable,808,"// @(#)root/hist:$Id$; // Author: Frank Filthaut, Rene Brun 30/05/2007; /*************************************************************************; * Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TBinomialEfficiencyFitter; \ingroup Hist; \brief Binomial fitter for the division of two histograms. Use when you need to calculate a selection's efficiency from two histograms,; one containing all entries, and one containing the subset of these entries; that pass the selection, and when you have a parametrization available for; the efficiency as a function of the variable(s) under consideration. A very common problem when estimating efficiencies is that of error estimation:; when no other information is available than the total number of events N and; the selected number n, the best estimate for the selection efficiency p is n/N.; Standard binomial statistics dictates that the uncertainty (this presupposes; sufficiently high statistics that an approximation by a normal distribution is; reasonable) on p, given N, is; \f[; \sqrt{\frac{p(1-p)}{N}}; \f]; However, when p is estimated as n/N, fluctuations from the true p to its; estimate become important, especially for low numbers of events, and giving; rise to biased results. When fitting a parametrized efficiency, these problems can largely be overcome,; as a hypothesized true efficiency is available by construction. Even so, simply; using the corresponding uncertainty still presupposes that Gaussian errors; yields a reasonable approximation. When using, instead of binned efficiency; histograms, the original numerator and denominator histograms, a binned maximum; likelihood can be constructed as the product of bin-by-bin binomial probabilities; to select n out of N events. Assuming that",MatchSource.CODE_COMMENT,hist/hist/src/TBinomialEfficiencyFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx:1634,Usability,simpl,simply,1634,"ntries; that pass the selection, and when you have a parametrization available for; the efficiency as a function of the variable(s) under consideration. A very common problem when estimating efficiencies is that of error estimation:; when no other information is available than the total number of events N and; the selected number n, the best estimate for the selection efficiency p is n/N.; Standard binomial statistics dictates that the uncertainty (this presupposes; sufficiently high statistics that an approximation by a normal distribution is; reasonable) on p, given N, is; \f[; \sqrt{\frac{p(1-p)}{N}}; \f]; However, when p is estimated as n/N, fluctuations from the true p to its; estimate become important, especially for low numbers of events, and giving; rise to biased results. When fitting a parametrized efficiency, these problems can largely be overcome,; as a hypothesized true efficiency is available by construction. Even so, simply; using the corresponding uncertainty still presupposes that Gaussian errors; yields a reasonable approximation. When using, instead of binned efficiency; histograms, the original numerator and denominator histograms, a binned maximum; likelihood can be constructed as the product of bin-by-bin binomial probabilities; to select n out of N events. Assuming that a correct parametrization of the; efficiency is provided, this construction in general yields less biased results; (and is much less sensitive to binning details). A generic use of this method is given below (note that the method works for 2D; and 3D histograms as well):. ~~~ {.cpp}; {; TH1* denominator; // denominator histogram; TH1* numerator; // corresponding numerator histogram; TF1* eff; // efficiency parametrization; .... // set step sizes and initial parameter; .... // values for the fit function; .... // possibly also set ranges, see TF1::SetRange(); TBinomialEfficiencyFitter* f = new TBinomialEfficiencyFitter(; numerator, denominator);; Int_t status = f->Fit(eff, ""I"");",MatchSource.CODE_COMMENT,hist/hist/src/TBinomialEfficiencyFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx:103,Deployability,integrat,integration,103,"////////////////////////////////////////////////////////////////////////////////; /// Set the required integration precision, see TF1::Integral()",MatchSource.CODE_COMMENT,hist/hist/src/TBinomialEfficiencyFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx:103,Integrability,integrat,integration,103,"////////////////////////////////////////////////////////////////////////////////; /// Set the required integration precision, see TF1::Integral()",MatchSource.CODE_COMMENT,hist/hist/src/TBinomialEfficiencyFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx:94,Security,access,access,94,"////////////////////////////////////////////////////////////////////////////////; /// Provide access to the underlying fitter object.; /// This may be useful e.g. for the retrieval of additional information (such; /// as the output covariance matrix of the fit).",MatchSource.CODE_COMMENT,hist/hist/src/TBinomialEfficiencyFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx:825,Availability,error,error,825,"////////////////////////////////////////////////////////////////////////////////; /// Carry out the fit of the given function to the given histograms.; ///; /// If option ""I"" is used, the fit function will be averaged over the; /// bin (the default is to evaluate it simply at the bin center).; ///; /// If option ""R"" is used, the fit range will be taken from the fit; /// function (the default is to use the entire histogram).; ///; /// If option ""S"" a TFitResult object is returned and it can be used to obtain; /// additional fit information, like covariance or correlation matrix.; ///; /// Note that all parameter values, limits, and step sizes are copied; /// from the input fit function f1 (so they should be set before calling; /// this method. This is particularly relevant for the step sizes, taken; /// to be the ""error"" set on input, as a null step size usually fixes the; /// corresponding parameter. That is protected against, but in such cases; /// an arbitrary starting step size will be used, and the reliability of; /// the fit should be questioned). If parameters are to be fixed, this; /// should be done by specifying non-null parameter limits, with lower; /// limits larger than upper limits.; ///; /// On output, f1 contains the fitted parameters and errors, as well as; /// the number of degrees of freedom, and the goodness-of-fit estimator; /// as given by S. Baker and R. Cousins, Nucl. Instr. Meth. A221 (1984) 437.",MatchSource.CODE_COMMENT,hist/hist/src/TBinomialEfficiencyFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx:1018,Availability,reliab,reliability,1018,"////////////////////////////////////////////////////////////////////////////////; /// Carry out the fit of the given function to the given histograms.; ///; /// If option ""I"" is used, the fit function will be averaged over the; /// bin (the default is to evaluate it simply at the bin center).; ///; /// If option ""R"" is used, the fit range will be taken from the fit; /// function (the default is to use the entire histogram).; ///; /// If option ""S"" a TFitResult object is returned and it can be used to obtain; /// additional fit information, like covariance or correlation matrix.; ///; /// Note that all parameter values, limits, and step sizes are copied; /// from the input fit function f1 (so they should be set before calling; /// this method. This is particularly relevant for the step sizes, taken; /// to be the ""error"" set on input, as a null step size usually fixes the; /// corresponding parameter. That is protected against, but in such cases; /// an arbitrary starting step size will be used, and the reliability of; /// the fit should be questioned). If parameters are to be fixed, this; /// should be done by specifying non-null parameter limits, with lower; /// limits larger than upper limits.; ///; /// On output, f1 contains the fitted parameters and errors, as well as; /// the number of degrees of freedom, and the goodness-of-fit estimator; /// as given by S. Baker and R. Cousins, Nucl. Instr. Meth. A221 (1984) 437.",MatchSource.CODE_COMMENT,hist/hist/src/TBinomialEfficiencyFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx:1274,Availability,error,errors,1274,"////////////////////////////////////////////////////////////////////////////////; /// Carry out the fit of the given function to the given histograms.; ///; /// If option ""I"" is used, the fit function will be averaged over the; /// bin (the default is to evaluate it simply at the bin center).; ///; /// If option ""R"" is used, the fit range will be taken from the fit; /// function (the default is to use the entire histogram).; ///; /// If option ""S"" a TFitResult object is returned and it can be used to obtain; /// additional fit information, like covariance or correlation matrix.; ///; /// Note that all parameter values, limits, and step sizes are copied; /// from the input fit function f1 (so they should be set before calling; /// this method. This is particularly relevant for the step sizes, taken; /// to be the ""error"" set on input, as a null step size usually fixes the; /// corresponding parameter. That is protected against, but in such cases; /// an arbitrary starting step size will be used, and the reliability of; /// the fit should be questioned). If parameters are to be fixed, this; /// should be done by specifying non-null parameter limits, with lower; /// limits larger than upper limits.; ///; /// On output, f1 contains the fitted parameters and errors, as well as; /// the number of degrees of freedom, and the goodness-of-fit estimator; /// as given by S. Baker and R. Cousins, Nucl. Instr. Meth. A221 (1984) 437.",MatchSource.CODE_COMMENT,hist/hist/src/TBinomialEfficiencyFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx:267,Usability,simpl,simply,267,"////////////////////////////////////////////////////////////////////////////////; /// Carry out the fit of the given function to the given histograms.; ///; /// If option ""I"" is used, the fit function will be averaged over the; /// bin (the default is to evaluate it simply at the bin center).; ///; /// If option ""R"" is used, the fit range will be taken from the fit; /// function (the default is to use the entire histogram).; ///; /// If option ""S"" a TFitResult object is returned and it can be used to obtain; /// additional fit information, like covariance or correlation matrix.; ///; /// Note that all parameter values, limits, and step sizes are copied; /// from the input fit function f1 (so they should be set before calling; /// this method. This is particularly relevant for the step sizes, taken; /// to be the ""error"" set on input, as a null step size usually fixes the; /// corresponding parameter. That is protected against, but in such cases; /// an arbitrary starting step size will be used, and the reliability of; /// the fit should be questioned). If parameters are to be fixed, this; /// should be done by specifying non-null parameter limits, with lower; /// limits larger than upper limits.; ///; /// On output, f1 contains the fitted parameters and errors, as well as; /// the number of degrees of freedom, and the goodness-of-fit estimator; /// as given by S. Baker and R. Cousins, Nucl. Instr. Meth. A221 (1984) 437.",MatchSource.CODE_COMMENT,hist/hist/src/TBinomialEfficiencyFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx:32,Availability,error,error,32,"// assign an ARBITRARY starting error to ensure the parameter won't be fixed!",MatchSource.CODE_COMMENT,hist/hist/src/TBinomialEfficiencyFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx:3,Performance,perform,perform,3,"// perform the actual fit; // set the fit to be a binned likelihood fit; // so use as chi2 for goodness of fit Baker&Cousins LR",MatchSource.CODE_COMMENT,hist/hist/src/TBinomialEfficiencyFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TConfidenceLevel.cxx:415,Energy Efficiency,adapt,adapted,415,// @(#)root/hist:$Id$; // Author: Christophe.Delaere@cern.ch 21/08/2002; ////////////////////////////////////////////////////////////////////////////////; /** \class TConfidenceLevel; \ingroup Hist; \brief Class to compute 95% CL limits; */; //////////////////////////////////////////////////////////////////////////////; /*************************************************************************; * C.Delaere *; * adapted from the mclimit code from Tom Junk *; * see http://cern.ch/thomasj/searchlimits/ecl.html *; *************************************************************************/,MatchSource.CODE_COMMENT,hist/hist/src/TConfidenceLevel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TConfidenceLevel.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TConfidenceLevel.cxx:415,Modifiability,adapt,adapted,415,// @(#)root/hist:$Id$; // Author: Christophe.Delaere@cern.ch 21/08/2002; ////////////////////////////////////////////////////////////////////////////////; /** \class TConfidenceLevel; \ingroup Hist; \brief Class to compute 95% CL limits; */; //////////////////////////////////////////////////////////////////////////////; /*************************************************************************; * C.Delaere *; * adapted from the mclimit code from Tom Junk *; * see http://cern.ch/thomasj/searchlimits/ecl.html *; *************************************************************************/,MatchSource.CODE_COMMENT,hist/hist/src/TConfidenceLevel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TConfidenceLevel.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:1751,Availability,error,error,1751,"(\ref EFF05c); - [VI. Further operations](\ref EFF06); - [VI.1 Information about the internal histograms](\ref EFF061); - [VI.2 Fitting](\ref EFF062); - [VI.3 Draw a TEfficiency object](\ref EFF063); - [VI.4 TEfficiency object's axis customisation](\ref EFF064). \anchor EFF01; ## I. Overview; This class handles the calculation of efficiencies and their uncertainties. It; provides several statistical methods for calculating frequentist and Bayesian; confidence intervals as well as a function for combining several efficiencies. Efficiencies have a lot of applications and meanings but in principle, they can; be described by the fraction of good/passed events k out of sample containing; N events. One is usually interested in the dependency of the efficiency on other; (binned) variables. The number of passed and total events is therefore stored; internally in two histograms (TEfficiency::fTotalHistogram and TEfficiency::fPassedHistogram).; Then the efficiency, as well as its upper and lower error, can be calculated for each bin; individually. As the efficiency can be regarded as a parameter of a binomial distribution, the; number of passed and total events must always be integer numbers. Therefore a; filling with weights is not possible. However, you can assign a global weight to each; TEfficiency object (TEfficiency::SetWeight).; It is necessary to create one TEfficiency object; for each weight if you investigate a process involving different weights. This; procedure needs more effort but enables you to re-use the filled object in cases; where you want to change one or more weights. This would not be possible if all; events with different weights were filled in the same histogram. \anchor EFF02; ## II. Creating a TEfficiency object; If you start a new analysis, it is highly recommended to use the TEfficiency class; from the beginning. You can then use one of the constructors for fixed or; variable bin size and your desired dimension. These constructors append the; creat",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:8922,Availability,error,error,8922," \alpha}{N + \alpha + \beta}; \f]. Optionally the mode can also be used as a value for the estimated efficiency. This can be done by calling; SetBit(kPosteriorMode) or TEfficiency::SetPosteriorMode. In this case, the estimated efficiency is:. \f[; \hat{\varepsilon} = \frac{k + \alpha -1}{N + \alpha + \beta - 2}; \f]. In the case of a uniform prior distribution, B(x,1,1), the posterior mode is k/n, equivalent to the frequentist; estimate (the maximum likelihood value). The statistic options also specify which confidence interval is used for calculating; the uncertainties of the efficiency. The following properties define the error; calculation:; - **fConfLevel:** desired confidence level: 0 < fConfLevel < 1 (TEfficiency::GetConfidenceLevel / TEfficiency::SetConfidenceLevel); - **fStatisticOption** defines which method is used to calculate the boundaries of the confidence interval (TEfficiency::SetStatisticOption); - **fBeta_alpha, fBeta_beta:** parameters for the prior distribution which is only used in the bayesian case (TEfficiency::GetBetaAlpha / TEfficiency::GetBetaBeta / TEfficiency::SetBetaAlpha / TEfficiency::SetBetaBeta); - **kIsBayesian:** flag whether bayesian statistics are used or not (TEfficiency::UsesBayesianStat); - **kShortestInterval:** flag whether shortest interval (instead of central one) are used in case of Bayesian statistics (TEfficiency::UsesShortestInterval). Normally shortest interval should be used in combination with the mode (see TEfficiency::UsesPosteriorMode); - **fWeight:** global weight for this TEfficiency object which is used during combining or merging with other TEfficiency objects(TEfficiency::GetWeight / TEfficiency::SetWeight). In the following table, the implemented confidence intervals are listed; with their corresponding statistic option. For more details on the calculation,; please have a look at the mentioned functions. | name | statistic option | function | kIsBayesian | parameters |; |------------------|-----------------",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:15991,Deployability,continuous,continuously,15991,"ffrey95.gif ""Bayesian with Jeffrey Prior"". The average (over all possible true efficiencies) coverage probability for; different number of total events is shown in the next picture. \image html av_cov.png ""Average Coverage"". \anchor EFF05; ## V. Merging and combining TEfficiency objects; In many applications, the efficiency should be calculated for an inhomogeneous; sample in the sense that it contains events with different weights. In order; to be able to determine the correct overall efficiency, it is necessary to; use for each subsample (= all events with the same weight) a different; TEfficiency object. After finishing your analysis you can then construct the; overall efficiency with its uncertainty. This procedure has the advantage that you can change the weight of one; subsample easily without rerunning the whole analysis. On the other hand, more; effort is needed to handle several TEfficiency objects instead of one; histogram. In the case of many different or even continuously distributed; weights, this approach becomes cumbersome. One possibility to overcome this; problem is the usage of binned weights. \anchor EFF05a; ### Example; In particle physics weights arises from the fact that you want to; normalise your results to a certain reference value. A very common formula for; calculating weights is. \f{eqnarray*}{; w &=& \frac{\sigma L}{N_{gen} \epsilon_{trig}} \\; &-& \sigma ...\ cross\ section \\; &-& L ...\ luminosity \\; &-& N_{gen}\ ... number\ of\ generated\ events \\; &-& \epsilon_{trig}\ ...\ (known)\ trigger\ efficiency \\; \f}. The reason for different weights can therefore be:; - different processes; - other integrated luminosity; - varying trigger efficiency; - different sample sizes; - ...; - or even combination of them. Depending on the actual meaning of different weights in your case, you; should either merge or combine them to get the overall efficiency. \anchor EFF051; ### V.1 When should I use merging?; If the weights are artificial and do n",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:16660,Deployability,integrat,integrated,16660,"hen construct the; overall efficiency with its uncertainty. This procedure has the advantage that you can change the weight of one; subsample easily without rerunning the whole analysis. On the other hand, more; effort is needed to handle several TEfficiency objects instead of one; histogram. In the case of many different or even continuously distributed; weights, this approach becomes cumbersome. One possibility to overcome this; problem is the usage of binned weights. \anchor EFF05a; ### Example; In particle physics weights arises from the fact that you want to; normalise your results to a certain reference value. A very common formula for; calculating weights is. \f{eqnarray*}{; w &=& \frac{\sigma L}{N_{gen} \epsilon_{trig}} \\; &-& \sigma ...\ cross\ section \\; &-& L ...\ luminosity \\; &-& N_{gen}\ ... number\ of\ generated\ events \\; &-& \epsilon_{trig}\ ...\ (known)\ trigger\ efficiency \\; \f}. The reason for different weights can therefore be:; - different processes; - other integrated luminosity; - varying trigger efficiency; - different sample sizes; - ...; - or even combination of them. Depending on the actual meaning of different weights in your case, you; should either merge or combine them to get the overall efficiency. \anchor EFF051; ### V.1 When should I use merging?; If the weights are artificial and do not represent real alternative hypotheses,; you should merge the different TEfficiency objects. That means especially for; the Bayesian case that the prior probability should be the same for all merged; TEfficiency objects. The merging can be done by invoking one of the following; operations:; - eff1.Add(eff2); - eff1 += eff2; - eff1 = eff1 + eff2. The result of the merging is stored in the TEfficiency object which is marked; bold above. The contents of the internal histograms of both TEfficiency; objects are added and a new weight is assigned. The statistic options are not; changed. \f[; \frac{1}{w_{new}} = \frac{1}{w_{1}} + \frac{1}{w_{2}}; \f]",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:17822,Deployability,integrat,integrated,17822,"different weights in your case, you; should either merge or combine them to get the overall efficiency. \anchor EFF051; ### V.1 When should I use merging?; If the weights are artificial and do not represent real alternative hypotheses,; you should merge the different TEfficiency objects. That means especially for; the Bayesian case that the prior probability should be the same for all merged; TEfficiency objects. The merging can be done by invoking one of the following; operations:; - eff1.Add(eff2); - eff1 += eff2; - eff1 = eff1 + eff2. The result of the merging is stored in the TEfficiency object which is marked; bold above. The contents of the internal histograms of both TEfficiency; objects are added and a new weight is assigned. The statistic options are not; changed. \f[; \frac{1}{w_{new}} = \frac{1}{w_{1}} + \frac{1}{w_{2}}; \f]. \anchor EFF05b; ### Example:; If you use two samples with different numbers of generated events for the same; process and you want to normalise both to the same integrated luminosity and; trigger efficiency, the different weights then arise just from the fact that; you have different numbers of events. The TEfficiency objects should be merged; because the samples do not represent true alternatives. You expect the same; result as if you would have a big sample with all events in it. \f[; w_{1} = \frac{\sigma L}{\epsilon N_{1}}, w_{2} = \frac{\sigma L}{\epsilon N_{2}} \Rightarrow w_{new} = \frac{\sigma L}{\epsilon (N_{1} + N_{2})} = \frac{1}{\frac{1}{w_{1}} + \frac{1}{w_{2}}}; \f]. \anchor EFF052; ### V.2 When should I use combining?; You should combine TEfficiency objects whenever the weights represent; alternatives processes for the efficiency. As the combination of two TEfficiency; objects is not always consistent with the representation by two internal; histograms, the result is not stored in a TEfficiency object but a TGraphAsymmErrors; is returned which shows the estimated combined efficiency and its uncertainty; for each bin.; A",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:21724,Deployability,update,update,21724,"}w_{1}}{N_{1}w_{1} + N_{2}w_{2}}\\; p_{2} = \frac{\sigma_{2}}{\sigma_{1} + \sigma_{2}} = \frac{N_{2}w_{2}}{N_{1}w_{1} + N_{2}w_{2}}; \f]. \anchor EFF06; ## VI. Further operations. \anchor EFF061; ### VI.1 Information about the internal histograms; The methods TEfficiency::GetPassedHistogram and TEfficiency::GetTotalHistogram; return a constant pointer to the internal histograms. They can be used to; obtain information about the internal histograms (e.g., the binning, number of passed / total events in a bin, mean values...).; One can obtain a clone of the internal histograms by calling TEfficiency::GetCopyPassedHisto or TEfficiency::GetCopyTotalHisto.; The returned histograms are completely independent from the current; TEfficiency object. By default, they are not attached to a directory to; avoid the duplication of data and the user is responsible for deleting them. ~~~~~~~~~~~~~~~{.cpp}; //open a root file which contains a TEfficiency object; TFile* pFile = new TFile(""myfile.root"",""update"");. //get TEfficiency object with name ""my_eff""; TEfficiency* pEff = (TEfficiency*)pFile->Get(""my_eff"");. //get clone of total histogram; TH1* clone = pEff->GetCopyTotalHisto();. //change clone...; //save changes of clone directly; clone->Write();; //or append it to the current directory and write the file; //clone->SetDirectory(gDirectory);; //pFile->Write();. //delete histogram object; delete clone;; clone = 0;; ~~~~~~~~~~~~~~~. It is also possible to set the internal total or passed histogram by using the; methods TEfficiency::SetPassedHistogram or TEfficiency::SetTotalHistogram. In order to ensure the validity of the TEfficiency object, the consistency of the; new histogram and the stored histogram is checked. It might be; impossible sometimes to change the histograms in a consistent way. Therefore one can force; the replacement by passing the ""f"" option. Then the user has to ensure that the; other internal histogram is replaced as well and that the TEfficiency object is; in a",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:25097,Deployability,Update,Update,25097," a threshold function; TF1* f2 = new TF1(""thres"",""0.8"",0,10);; f2->SetLineColor(kRed);; //add it to the list of functions; //use add first because the parameters of the last function will be displayed; pEff->GetListOfFunctions()->AddFirst(f2);. pEff->Draw(""AP"");; }; End_Macro. \anchor EFF063; ### VI.3 Draw a TEfficiency object; A TEfficiency object can be drawn by calling the usual TEfficiency::Draw method.; At the moment drawing is only supported for 1- and 2-dimensional TEfficiency objects.; In the 1-dimensional case, you can use the same options as for the TGraphAsymmErrors::Draw; method. For 2-dimensional TEfficiency objects, you can pass the same options as; for a TH2::Draw object. \anchor EFF064; ### VI.4 TEfficiency object's axis customisation; The axes of a TEfficiency object can be accessed and customised by calling the; GetPaintedGraph method and then GetXaxis() or GetYaxis() and the corresponding TAxis; methods.; Note that in order to access the painted graph via GetPaintedGraph(), one should either; call Paint or, better, gPad->Update(). Begin_Macro(source); {; //canvas only needed for this documentation; TCanvas* c1 = new TCanvas(""example"","""",600,400);; c1->SetFillStyle(1001);; c1->SetFillColor(kWhite);; c1->Divide(2,1);. //create one-dimensional TEfficiency object with fixed bin size; TEfficiency* pEff = new TEfficiency(""eff"",""my efficiency;x;#epsilon"",20,0,10);; TRandom3 rand3;. bool bPassed;; double x;; for(int i=0; i<10000; ++i); {; //simulate events with variable under investigation; x = rand3.Uniform(10);; //check selection: bPassed = DoesEventPassSelection(x); bPassed = rand3.Rndm() < TMath::Gaus(x,5,4);; pEff->Fill(bPassed,x);; }; c1->cd(1);; pEff->Draw(""AP"");; c1->cd(2);; pEff->Draw(""AP"");; gPad->Update();; pEff->GetPaintedGraph()->GetXaxis()->SetTitleSize(0.05);; pEff->GetPaintedGraph()->GetXaxis()->SetLabelFont(42);; pEff->GetPaintedGraph()->GetXaxis()->SetLabelSize(0.05);; pEff->GetPaintedGraph()->GetYaxis()->SetTitleOffset(0.85);; pEff->GetP",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:25789,Deployability,Update,Update,25789," TEfficiency::Draw method.; At the moment drawing is only supported for 1- and 2-dimensional TEfficiency objects.; In the 1-dimensional case, you can use the same options as for the TGraphAsymmErrors::Draw; method. For 2-dimensional TEfficiency objects, you can pass the same options as; for a TH2::Draw object. \anchor EFF064; ### VI.4 TEfficiency object's axis customisation; The axes of a TEfficiency object can be accessed and customised by calling the; GetPaintedGraph method and then GetXaxis() or GetYaxis() and the corresponding TAxis; methods.; Note that in order to access the painted graph via GetPaintedGraph(), one should either; call Paint or, better, gPad->Update(). Begin_Macro(source); {; //canvas only needed for this documentation; TCanvas* c1 = new TCanvas(""example"","""",600,400);; c1->SetFillStyle(1001);; c1->SetFillColor(kWhite);; c1->Divide(2,1);. //create one-dimensional TEfficiency object with fixed bin size; TEfficiency* pEff = new TEfficiency(""eff"",""my efficiency;x;#epsilon"",20,0,10);; TRandom3 rand3;. bool bPassed;; double x;; for(int i=0; i<10000; ++i); {; //simulate events with variable under investigation; x = rand3.Uniform(10);; //check selection: bPassed = DoesEventPassSelection(x); bPassed = rand3.Rndm() < TMath::Gaus(x,5,4);; pEff->Fill(bPassed,x);; }; c1->cd(1);; pEff->Draw(""AP"");; c1->cd(2);; pEff->Draw(""AP"");; gPad->Update();; pEff->GetPaintedGraph()->GetXaxis()->SetTitleSize(0.05);; pEff->GetPaintedGraph()->GetXaxis()->SetLabelFont(42);; pEff->GetPaintedGraph()->GetXaxis()->SetLabelSize(0.05);; pEff->GetPaintedGraph()->GetYaxis()->SetTitleOffset(0.85);; pEff->GetPaintedGraph()->GetYaxis()->SetTitleSize(0.05);; pEff->GetPaintedGraph()->GetYaxis()->SetLabelFont(42);; pEff->GetPaintedGraph()->GetYaxis()->SetLabelSize(0.05);; pEff->GetPaintedGraph()->GetXaxis()->SetRangeUser(3,7);; }; End_Macro. */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor; ///; /// Should not be used explicitly",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:1485,Integrability,depend,dependency,1485,"rent methods](\ref EFF041); - [V. Merging and combining TEfficiency objects](\ref EFF05); - [Example](\ref EFF05a); - [V.1 When should I use merging?](\ref EFF051); - [Example](\ref EFF05b); - [V.2 When should I use combining?](\ref EFF052); - [Example](\ref EFF05c); - [VI. Further operations](\ref EFF06); - [VI.1 Information about the internal histograms](\ref EFF061); - [VI.2 Fitting](\ref EFF062); - [VI.3 Draw a TEfficiency object](\ref EFF063); - [VI.4 TEfficiency object's axis customisation](\ref EFF064). \anchor EFF01; ## I. Overview; This class handles the calculation of efficiencies and their uncertainties. It; provides several statistical methods for calculating frequentist and Bayesian; confidence intervals as well as a function for combining several efficiencies. Efficiencies have a lot of applications and meanings but in principle, they can; be described by the fraction of good/passed events k out of sample containing; N events. One is usually interested in the dependency of the efficiency on other; (binned) variables. The number of passed and total events is therefore stored; internally in two histograms (TEfficiency::fTotalHistogram and TEfficiency::fPassedHistogram).; Then the efficiency, as well as its upper and lower error, can be calculated for each bin; individually. As the efficiency can be regarded as a parameter of a binomial distribution, the; number of passed and total events must always be integer numbers. Therefore a; filling with weights is not possible. However, you can assign a global weight to each; TEfficiency object (TEfficiency::SetWeight).; It is necessary to create one TEfficiency object; for each weight if you investigate a process involving different weights. This; procedure needs more effort but enables you to re-use the filled object in cases; where you want to change one or more weights. This would not be possible if all; events with different weights were filled in the same histogram. \anchor EFF02; ## II. Creating a TEfficie",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:6670,Integrability,depend,depends,6670,"gram is filled).; The x, y and z variables determine the bin which is filled. For lower dimensions, the z- or even the y-value may be omitted. Begin_Macro(source); {; //canvas only needed for this documentation; TCanvas* c1 = new TCanvas(""example"","""",600,400);; c1->SetFillStyle(1001);; c1->SetFillColor(kWhite);. //create one-dimensional TEfficiency object with fixed bin size; TEfficiency* pEff = new TEfficiency(""eff"",""my efficiency;x;#epsilon"",20,0,10);; TRandom3 rand3;. bool bPassed;; double x;; for(int i=0; i<10000; ++i); {; //simulate events with variable under investigation; x = rand3.Uniform(10);; //check selection: bPassed = DoesEventPassSelection(x); bPassed = rand3.Rndm() < TMath::Gaus(x,5,4);; pEff->Fill(bPassed,x);; }. pEff->Draw(""AP"");; }; End_Macro. You can also set the number of passed or total events for a bin directly by; using the TEfficiency::SetPassedEvents or TEfficiency::SetTotalEvents method. \anchor EFF04; ## IV. Statistic options; The calculation of the estimated efficiency depends on the chosen statistic; option. Let k denotes the number of passed events and N the number of total; events. \anchor EFF04a; ### Frequentist methods; The expectation value of the number of passed events is given by the true; efficiency times the total number of events. One can estimate the efficiency; by replacing the expected number of passed events by the observed number of; passed events. \f[; k = \epsilon \times N \Rightarrow \hat{\varepsilon} = \frac{k}{N}; \f]. \anchor EFF04b; ### Bayesian methods; In Bayesian statistics a likelihood-function (how probable is it to get the; observed data assuming a true efficiency) and a prior probability (what is the; probability that a certain true efficiency is actually realised) are used to; determine a posterior probability by using Bayes theorem. At the moment, only; beta distributions (have 2 free parameters) are supported as prior; probabilities. \f{eqnarray*}{; P(\epsilon | k ; N) &=& \frac{1}{norm} \times P(k | \eps",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:16660,Integrability,integrat,integrated,16660,"hen construct the; overall efficiency with its uncertainty. This procedure has the advantage that you can change the weight of one; subsample easily without rerunning the whole analysis. On the other hand, more; effort is needed to handle several TEfficiency objects instead of one; histogram. In the case of many different or even continuously distributed; weights, this approach becomes cumbersome. One possibility to overcome this; problem is the usage of binned weights. \anchor EFF05a; ### Example; In particle physics weights arises from the fact that you want to; normalise your results to a certain reference value. A very common formula for; calculating weights is. \f{eqnarray*}{; w &=& \frac{\sigma L}{N_{gen} \epsilon_{trig}} \\; &-& \sigma ...\ cross\ section \\; &-& L ...\ luminosity \\; &-& N_{gen}\ ... number\ of\ generated\ events \\; &-& \epsilon_{trig}\ ...\ (known)\ trigger\ efficiency \\; \f}. The reason for different weights can therefore be:; - different processes; - other integrated luminosity; - varying trigger efficiency; - different sample sizes; - ...; - or even combination of them. Depending on the actual meaning of different weights in your case, you; should either merge or combine them to get the overall efficiency. \anchor EFF051; ### V.1 When should I use merging?; If the weights are artificial and do not represent real alternative hypotheses,; you should merge the different TEfficiency objects. That means especially for; the Bayesian case that the prior probability should be the same for all merged; TEfficiency objects. The merging can be done by invoking one of the following; operations:; - eff1.Add(eff2); - eff1 += eff2; - eff1 = eff1 + eff2. The result of the merging is stored in the TEfficiency object which is marked; bold above. The contents of the internal histograms of both TEfficiency; objects are added and a new weight is assigned. The statistic options are not; changed. \f[; \frac{1}{w_{new}} = \frac{1}{w_{1}} + \frac{1}{w_{2}}; \f]",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:16777,Integrability,Depend,Depending,16777," On the other hand, more; effort is needed to handle several TEfficiency objects instead of one; histogram. In the case of many different or even continuously distributed; weights, this approach becomes cumbersome. One possibility to overcome this; problem is the usage of binned weights. \anchor EFF05a; ### Example; In particle physics weights arises from the fact that you want to; normalise your results to a certain reference value. A very common formula for; calculating weights is. \f{eqnarray*}{; w &=& \frac{\sigma L}{N_{gen} \epsilon_{trig}} \\; &-& \sigma ...\ cross\ section \\; &-& L ...\ luminosity \\; &-& N_{gen}\ ... number\ of\ generated\ events \\; &-& \epsilon_{trig}\ ...\ (known)\ trigger\ efficiency \\; \f}. The reason for different weights can therefore be:; - different processes; - other integrated luminosity; - varying trigger efficiency; - different sample sizes; - ...; - or even combination of them. Depending on the actual meaning of different weights in your case, you; should either merge or combine them to get the overall efficiency. \anchor EFF051; ### V.1 When should I use merging?; If the weights are artificial and do not represent real alternative hypotheses,; you should merge the different TEfficiency objects. That means especially for; the Bayesian case that the prior probability should be the same for all merged; TEfficiency objects. The merging can be done by invoking one of the following; operations:; - eff1.Add(eff2); - eff1 += eff2; - eff1 = eff1 + eff2. The result of the merging is stored in the TEfficiency object which is marked; bold above. The contents of the internal histograms of both TEfficiency; objects are added and a new weight is assigned. The statistic options are not; changed. \f[; \frac{1}{w_{new}} = \frac{1}{w_{1}} + \frac{1}{w_{2}}; \f]. \anchor EFF05b; ### Example:; If you use two samples with different numbers of generated events for the same; process and you want to normalise both to the same integrated luminosity an",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:17822,Integrability,integrat,integrated,17822,"different weights in your case, you; should either merge or combine them to get the overall efficiency. \anchor EFF051; ### V.1 When should I use merging?; If the weights are artificial and do not represent real alternative hypotheses,; you should merge the different TEfficiency objects. That means especially for; the Bayesian case that the prior probability should be the same for all merged; TEfficiency objects. The merging can be done by invoking one of the following; operations:; - eff1.Add(eff2); - eff1 += eff2; - eff1 = eff1 + eff2. The result of the merging is stored in the TEfficiency object which is marked; bold above. The contents of the internal histograms of both TEfficiency; objects are added and a new weight is assigned. The statistic options are not; changed. \f[; \frac{1}{w_{new}} = \frac{1}{w_{1}} + \frac{1}{w_{2}}; \f]. \anchor EFF05b; ### Example:; If you use two samples with different numbers of generated events for the same; process and you want to normalise both to the same integrated luminosity and; trigger efficiency, the different weights then arise just from the fact that; you have different numbers of events. The TEfficiency objects should be merged; because the samples do not represent true alternatives. You expect the same; result as if you would have a big sample with all events in it. \f[; w_{1} = \frac{\sigma L}{\epsilon N_{1}}, w_{2} = \frac{\sigma L}{\epsilon N_{2}} \Rightarrow w_{new} = \frac{\sigma L}{\epsilon (N_{1} + N_{2})} = \frac{1}{\frac{1}{w_{1}} + \frac{1}{w_{2}}}; \f]. \anchor EFF052; ### V.2 When should I use combining?; You should combine TEfficiency objects whenever the weights represent; alternatives processes for the efficiency. As the combination of two TEfficiency; objects is not always consistent with the representation by two internal; histograms, the result is not stored in a TEfficiency object but a TGraphAsymmErrors; is returned which shows the estimated combined efficiency and its uncertainty; for each bin.; A",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:1533,Modifiability,variab,variables,1533,"rent methods](\ref EFF041); - [V. Merging and combining TEfficiency objects](\ref EFF05); - [Example](\ref EFF05a); - [V.1 When should I use merging?](\ref EFF051); - [Example](\ref EFF05b); - [V.2 When should I use combining?](\ref EFF052); - [Example](\ref EFF05c); - [VI. Further operations](\ref EFF06); - [VI.1 Information about the internal histograms](\ref EFF061); - [VI.2 Fitting](\ref EFF062); - [VI.3 Draw a TEfficiency object](\ref EFF063); - [VI.4 TEfficiency object's axis customisation](\ref EFF064). \anchor EFF01; ## I. Overview; This class handles the calculation of efficiencies and their uncertainties. It; provides several statistical methods for calculating frequentist and Bayesian; confidence intervals as well as a function for combining several efficiencies. Efficiencies have a lot of applications and meanings but in principle, they can; be described by the fraction of good/passed events k out of sample containing; N events. One is usually interested in the dependency of the efficiency on other; (binned) variables. The number of passed and total events is therefore stored; internally in two histograms (TEfficiency::fTotalHistogram and TEfficiency::fPassedHistogram).; Then the efficiency, as well as its upper and lower error, can be calculated for each bin; individually. As the efficiency can be regarded as a parameter of a binomial distribution, the; number of passed and total events must always be integer numbers. Therefore a; filling with weights is not possible. However, you can assign a global weight to each; TEfficiency object (TEfficiency::SetWeight).; It is necessary to create one TEfficiency object; for each weight if you investigate a process involving different weights. This; procedure needs more effort but enables you to re-use the filled object in cases; where you want to change one or more weights. This would not be possible if all; events with different weights were filled in the same histogram. \anchor EFF02; ## II. Creating a TEfficie",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:2668,Modifiability,variab,variable,2668,"and TEfficiency::fPassedHistogram).; Then the efficiency, as well as its upper and lower error, can be calculated for each bin; individually. As the efficiency can be regarded as a parameter of a binomial distribution, the; number of passed and total events must always be integer numbers. Therefore a; filling with weights is not possible. However, you can assign a global weight to each; TEfficiency object (TEfficiency::SetWeight).; It is necessary to create one TEfficiency object; for each weight if you investigate a process involving different weights. This; procedure needs more effort but enables you to re-use the filled object in cases; where you want to change one or more weights. This would not be possible if all; events with different weights were filled in the same histogram. \anchor EFF02; ## II. Creating a TEfficiency object; If you start a new analysis, it is highly recommended to use the TEfficiency class; from the beginning. You can then use one of the constructors for fixed or; variable bin size and your desired dimension. These constructors append the; created TEfficiency object to the current directory. So it will be written; automatically to a file during the next TFile::Write command. Example: create a two-dimensional TEfficiency object with; - name = ""eff""; - title = ""my efficiency""; - axis titles: x, y and LaTeX-formatted epsilon as a label for Z axis; - 10 bins with constant bin width (= 1) along X axis starting at 0 (lower edge; from the first bin) up to 10 (upper edge of last bin); - 20 bins with constant bin width (= 0.5) along Y axis starting at -5 (lower; edge from the first bin) up to 5 (upper edge of last bin). TEfficiency* pEff = new TEfficiency(""eff"",""my efficiency;x;y;#epsilon"",10,0,10,20,-5,5);. If you already have two histograms filled with the number of passed and total; events, you will use the constructor TEfficiency(const TH1& passed,const TH1& total); to construct the TEfficiency object. The histograms ""passed"" and ""total"" have; t",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:5691,Modifiability,variab,variables,5691,"Eff = 0;; TFile* pFile = new TFile(""myfile.root"",""recreate"");. //h_pass and h_total are valid and consistent histograms; if(TEfficiency::CheckConsistency(h_pass,h_total)); {; pEff = new TEfficiency(h_pass,h_total);; //this will attach the TEfficiency object to the current directory; pEff->SetDirectory(gDirectory);; //now all objects in gDirectory will be written to ""myfile.root""; pFile->Write();; }; ~~~~~~~~~~~~~~~. In case you already have two filled histograms and you only want to; plot them as a graph, you should rather use TGraphAsymmErrors::TGraphAsymmErrors(const TH1* pass,const TH1* total,Option_t* opt); to create a graph object. \anchor EFF03; ## III. Filling with events; You can fill the TEfficiency object by calling the TEfficiency::Fill(Bool_t bPassed,Double_t x,Double_t y,Double_t z) method.; The ""bPassed"" boolean flag indicates whether the current event is good; (both histograms are filled) or not (only TEfficiency::fTotalHistogram is filled).; The x, y and z variables determine the bin which is filled. For lower dimensions, the z- or even the y-value may be omitted. Begin_Macro(source); {; //canvas only needed for this documentation; TCanvas* c1 = new TCanvas(""example"","""",600,400);; c1->SetFillStyle(1001);; c1->SetFillColor(kWhite);. //create one-dimensional TEfficiency object with fixed bin size; TEfficiency* pEff = new TEfficiency(""eff"",""my efficiency;x;#epsilon"",20,0,10);; TRandom3 rand3;. bool bPassed;; double x;; for(int i=0; i<10000; ++i); {; //simulate events with variable under investigation; x = rand3.Uniform(10);; //check selection: bPassed = DoesEventPassSelection(x); bPassed = rand3.Rndm() < TMath::Gaus(x,5,4);; pEff->Fill(bPassed,x);; }. pEff->Draw(""AP"");; }; End_Macro. You can also set the number of passed or total events for a bin directly by; using the TEfficiency::SetPassedEvents or TEfficiency::SetTotalEvents method. \anchor EFF04; ## IV. Statistic options; The calculation of the estimated efficiency depends on the chosen statistic; op",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:6214,Modifiability,variab,variable,6214,"plot them as a graph, you should rather use TGraphAsymmErrors::TGraphAsymmErrors(const TH1* pass,const TH1* total,Option_t* opt); to create a graph object. \anchor EFF03; ## III. Filling with events; You can fill the TEfficiency object by calling the TEfficiency::Fill(Bool_t bPassed,Double_t x,Double_t y,Double_t z) method.; The ""bPassed"" boolean flag indicates whether the current event is good; (both histograms are filled) or not (only TEfficiency::fTotalHistogram is filled).; The x, y and z variables determine the bin which is filled. For lower dimensions, the z- or even the y-value may be omitted. Begin_Macro(source); {; //canvas only needed for this documentation; TCanvas* c1 = new TCanvas(""example"","""",600,400);; c1->SetFillStyle(1001);; c1->SetFillColor(kWhite);. //create one-dimensional TEfficiency object with fixed bin size; TEfficiency* pEff = new TEfficiency(""eff"",""my efficiency;x;#epsilon"",20,0,10);; TRandom3 rand3;. bool bPassed;; double x;; for(int i=0; i<10000; ++i); {; //simulate events with variable under investigation; x = rand3.Uniform(10);; //check selection: bPassed = DoesEventPassSelection(x); bPassed = rand3.Rndm() < TMath::Gaus(x,5,4);; pEff->Fill(bPassed,x);; }. pEff->Draw(""AP"");; }; End_Macro. You can also set the number of passed or total events for a bin directly by; using the TEfficiency::SetPassedEvents or TEfficiency::SetTotalEvents method. \anchor EFF04; ## IV. Statistic options; The calculation of the estimated efficiency depends on the chosen statistic; option. Let k denotes the number of passed events and N the number of total; events. \anchor EFF04a; ### Frequentist methods; The expectation value of the number of passed events is given by the true; efficiency times the total number of events. One can estimate the efficiency; by replacing the expected number of passed events by the observed number of; passed events. \f[; k = \epsilon \times N \Rightarrow \hat{\varepsilon} = \frac{k}{N}; \f]. \anchor EFF04b; ### Bayesian methods; In Ba",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:11960,Modifiability,variab,variable,11960,"Interval | false | total events, passed events, confidence level |; | Jeffrey | kBJeffrey | TEfficiency::Bayesian | true | total events, passed events, confidence level, fBeta_alpha = 0.5, fBeta_beta = 0.5 |; | Uniform prior | kBUniform |TEfficiency::Bayesian | true |total events, passed events, confidence level, fBeta_alpha = 1, fBeta_beta = 1 |; | custom prior | kBBayesian |TEfficiency::Bayesian | true |total events, passed events, confidence level, fBeta_alpha, fBeta_beta |. The following example demonstrates the effect of different statistic options and; confidence levels. Begin_Macro(source); {; //canvas only needed for the documentation; TCanvas* c1 = new TCanvas(""c1"","""",600,400);; c1->Divide(2);; c1->SetFillStyle(1001);; c1->SetFillColor(kWhite);. //create one-dimensional TEfficiency object with fixed bin size; TEfficiency* pEff = new TEfficiency(""eff"",""different confidence levels;x;#epsilon"",20,0,10);; TRandom3 rand3;. bool bPassed;; double x;; for(int i=0; i<1000; ++i); {; //simulate events with variable under investigation; x = rand3.Uniform(10);; //check selection: bPassed = DoesEventPassSelection(x); bPassed = rand3.Rndm() < TMath::Gaus(x,5,4);; pEff->Fill(bPassed,x);; }. //set style attributes; pEff->SetFillStyle(3004);; pEff->SetFillColor(kRed);. //copy current TEfficiency object and set new confidence level; TEfficiency* pCopy = new TEfficiency(*pEff);; pCopy->SetConfidenceLevel(0.90);. //set style attributes; pCopy->SetFillStyle(3005);; pCopy->SetFillColor(kBlue);. c1->cd(1);. //add legend; TLegend* leg1 = new TLegend(0.3,0.1,0.7,0.5);; leg1->AddEntry(pEff,""68.3%"",""F"");; leg1->AddEntry(pCopy,""90%"",""F"");. pEff->Draw(""A4"");; pCopy->Draw(""same4"");; leg1->Draw(""same"");. //use same confidence level but different statistic methods; TEfficiency* pEff2 = new TEfficiency(*pEff);; TEfficiency* pCopy2 = new TEfficiency(*pEff);. pEff2->SetStatisticOption(TEfficiency::kFNormal);; pCopy2->SetStatisticOption(TEfficiency::kFAC);. pEff2->SetTitle(""different statistic",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:23721,Modifiability,variab,variable,23721,"Efficiency object is; in a valid state. \anchor EFF062; ### VI.2 Fitting; The efficiency can be fitted using the TEfficiency::Fit function which internally uses; the TBinomialEfficiencyFitter::Fit method.; As this method is using a maximum-likelihood-fit, it is necessary to initialise; the given fit function with reasonable start values.; The resulting fit function is attached to the list of associated functions and; will be drawn automatically during the next TEfficiency::Draw command.; The list of associated function can be modified by using the pointer returned; by TEfficiency::GetListOfFunctions. Begin_Macro(source); {; //canvas only needed for this documentation; TCanvas* c1 = new TCanvas(""example"","""",600,400);; c1->SetFillStyle(1001);; c1->SetFillColor(kWhite);. //create one-dimensional TEfficiency object with fixed bin size; TEfficiency* pEff = new TEfficiency(""eff"",""my efficiency;x;#epsilon"",20,0,10);; TRandom3 rand3;. bool bPassed;; double x;; for (int i=0; i<10000; ++i) {; //simulate events with variable under investigation; x = rand3.Uniform(10);; //check selection: bPassed = DoesEventPassSelection(x); bPassed = rand3.Rndm() < TMath::Gaus(x,5,4);; pEff->Fill(bPassed,x);; }. //create a function for fitting and do the fit; TF1* f1 = new TF1(""f1"",""gaus"",0,10);; f1->SetParameters(1,5,2);; pEff->Fit(f1);. //create a threshold function; TF1* f2 = new TF1(""thres"",""0.8"",0,10);; f2->SetLineColor(kRed);; //add it to the list of functions; //use add first because the parameters of the last function will be displayed; pEff->GetListOfFunctions()->AddFirst(f2);. pEff->Draw(""AP"");; }; End_Macro. \anchor EFF063; ### VI.3 Draw a TEfficiency object; A TEfficiency object can be drawn by calling the usual TEfficiency::Draw method.; At the moment drawing is only supported for 1- and 2-dimensional TEfficiency objects.; In the 1-dimensional case, you can use the same options as for the TGraphAsymmErrors::Draw; method. For 2-dimensional TEfficiency objects, you can pass the same ",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:25538,Modifiability,variab,variable,25538," TEfficiency::Draw method.; At the moment drawing is only supported for 1- and 2-dimensional TEfficiency objects.; In the 1-dimensional case, you can use the same options as for the TGraphAsymmErrors::Draw; method. For 2-dimensional TEfficiency objects, you can pass the same options as; for a TH2::Draw object. \anchor EFF064; ### VI.4 TEfficiency object's axis customisation; The axes of a TEfficiency object can be accessed and customised by calling the; GetPaintedGraph method and then GetXaxis() or GetYaxis() and the corresponding TAxis; methods.; Note that in order to access the painted graph via GetPaintedGraph(), one should either; call Paint or, better, gPad->Update(). Begin_Macro(source); {; //canvas only needed for this documentation; TCanvas* c1 = new TCanvas(""example"","""",600,400);; c1->SetFillStyle(1001);; c1->SetFillColor(kWhite);; c1->Divide(2,1);. //create one-dimensional TEfficiency object with fixed bin size; TEfficiency* pEff = new TEfficiency(""eff"",""my efficiency;x;#epsilon"",20,0,10);; TRandom3 rand3;. bool bPassed;; double x;; for(int i=0; i<10000; ++i); {; //simulate events with variable under investigation; x = rand3.Uniform(10);; //check selection: bPassed = DoesEventPassSelection(x); bPassed = rand3.Rndm() < TMath::Gaus(x,5,4);; pEff->Fill(bPassed,x);; }; c1->cd(1);; pEff->Draw(""AP"");; c1->cd(2);; pEff->Draw(""AP"");; gPad->Update();; pEff->GetPaintedGraph()->GetXaxis()->SetTitleSize(0.05);; pEff->GetPaintedGraph()->GetXaxis()->SetLabelFont(42);; pEff->GetPaintedGraph()->GetXaxis()->SetLabelSize(0.05);; pEff->GetPaintedGraph()->GetYaxis()->SetTitleOffset(0.85);; pEff->GetPaintedGraph()->GetYaxis()->SetTitleSize(0.05);; pEff->GetPaintedGraph()->GetYaxis()->SetLabelFont(42);; pEff->GetPaintedGraph()->GetYaxis()->SetLabelSize(0.05);; pEff->GetPaintedGraph()->GetXaxis()->SetRangeUser(3,7);; }; End_Macro. */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor; ///; /// Should not be used explicitly",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:3884,Safety,avoid,avoid,3884," file during the next TFile::Write command. Example: create a two-dimensional TEfficiency object with; - name = ""eff""; - title = ""my efficiency""; - axis titles: x, y and LaTeX-formatted epsilon as a label for Z axis; - 10 bins with constant bin width (= 1) along X axis starting at 0 (lower edge; from the first bin) up to 10 (upper edge of last bin); - 20 bins with constant bin width (= 0.5) along Y axis starting at -5 (lower; edge from the first bin) up to 5 (upper edge of last bin). TEfficiency* pEff = new TEfficiency(""eff"",""my efficiency;x;y;#epsilon"",10,0,10,20,-5,5);. If you already have two histograms filled with the number of passed and total; events, you will use the constructor TEfficiency(const TH1& passed,const TH1& total); to construct the TEfficiency object. The histograms ""passed"" and ""total"" have; to fulfill the conditions mentioned in TEfficiency::CheckConsistency, otherwise the construction will fail.; As the histograms already exist, the new TEfficiency is by default **not** attached; to the current directory to avoid duplication of data. If you want to store the; new object anyway, you can either write it directly by calling TObject::Write or attach it to a directory using TEfficiency::SetDirectory.; This also applies to TEfficiency objects created by the copy constructor TEfficiency::TEfficiency(const TEfficiency& rEff). \anchor EFF02a; ### Example 1. ~~~~~~~~~~~~~~~{.cpp}; TEfficiency* pEff = 0;; TFile* pFile = new TFile(""myfile.root"",""recreate"");. //h_pass and h_total are valid and consistent histograms; if(TEfficiency::CheckConsistency(h_pass,h_total)); {; pEff = new TEfficiency(h_pass,h_total);; // this will write the TEfficiency object to ""myfile.root""; // AND pEff will be attached to the current directory; pEff->Write();; }; ~~~~~~~~~~~~~~~. \anchor EFF02b; ### Example 2. ~~~~~~~~~~~~~~~{.cpp}; TEfficiency* pEff = 0;; TFile* pFile = new TFile(""myfile.root"",""recreate"");. //h_pass and h_total are valid and consistent histograms; if(TEfficiency:",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:21528,Safety,avoid,avoid,21528,"ghts to be used in the; combination should be the probability that an; electron comes from the corresponding process. \f[; p_{1} = \frac{\sigma_{1}}{\sigma_{1} + \sigma_{2}} = \frac{N_{1}w_{1}}{N_{1}w_{1} + N_{2}w_{2}}\\; p_{2} = \frac{\sigma_{2}}{\sigma_{1} + \sigma_{2}} = \frac{N_{2}w_{2}}{N_{1}w_{1} + N_{2}w_{2}}; \f]. \anchor EFF06; ## VI. Further operations. \anchor EFF061; ### VI.1 Information about the internal histograms; The methods TEfficiency::GetPassedHistogram and TEfficiency::GetTotalHistogram; return a constant pointer to the internal histograms. They can be used to; obtain information about the internal histograms (e.g., the binning, number of passed / total events in a bin, mean values...).; One can obtain a clone of the internal histograms by calling TEfficiency::GetCopyPassedHisto or TEfficiency::GetCopyTotalHisto.; The returned histograms are completely independent from the current; TEfficiency object. By default, they are not attached to a directory to; avoid the duplication of data and the user is responsible for deleting them. ~~~~~~~~~~~~~~~{.cpp}; //open a root file which contains a TEfficiency object; TFile* pFile = new TFile(""myfile.root"",""update"");. //get TEfficiency object with name ""my_eff""; TEfficiency* pEff = (TEfficiency*)pFile->Get(""my_eff"");. //get clone of total histogram; TH1* clone = pEff->GetCopyTotalHisto();. //change clone...; //save changes of clone directly; clone->Write();; //or append it to the current directory and write the file; //clone->SetDirectory(gDirectory);; //pFile->Write();. //delete histogram object; delete clone;; clone = 0;; ~~~~~~~~~~~~~~~. It is also possible to set the internal total or passed histogram by using the; methods TEfficiency::SetPassedHistogram or TEfficiency::SetTotalHistogram. In order to ensure the validity of the TEfficiency object, the consistency of the; new histogram and the stored histogram is checked. It might be; impossible sometimes to change the histograms in a consistent way. Ther",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:24843,Security,access,accessed,24843,"x,5,4);; pEff->Fill(bPassed,x);; }. //create a function for fitting and do the fit; TF1* f1 = new TF1(""f1"",""gaus"",0,10);; f1->SetParameters(1,5,2);; pEff->Fit(f1);. //create a threshold function; TF1* f2 = new TF1(""thres"",""0.8"",0,10);; f2->SetLineColor(kRed);; //add it to the list of functions; //use add first because the parameters of the last function will be displayed; pEff->GetListOfFunctions()->AddFirst(f2);. pEff->Draw(""AP"");; }; End_Macro. \anchor EFF063; ### VI.3 Draw a TEfficiency object; A TEfficiency object can be drawn by calling the usual TEfficiency::Draw method.; At the moment drawing is only supported for 1- and 2-dimensional TEfficiency objects.; In the 1-dimensional case, you can use the same options as for the TGraphAsymmErrors::Draw; method. For 2-dimensional TEfficiency objects, you can pass the same options as; for a TH2::Draw object. \anchor EFF064; ### VI.4 TEfficiency object's axis customisation; The axes of a TEfficiency object can be accessed and customised by calling the; GetPaintedGraph method and then GetXaxis() or GetYaxis() and the corresponding TAxis; methods.; Note that in order to access the painted graph via GetPaintedGraph(), one should either; call Paint or, better, gPad->Update(). Begin_Macro(source); {; //canvas only needed for this documentation; TCanvas* c1 = new TCanvas(""example"","""",600,400);; c1->SetFillStyle(1001);; c1->SetFillColor(kWhite);; c1->Divide(2,1);. //create one-dimensional TEfficiency object with fixed bin size; TEfficiency* pEff = new TEfficiency(""eff"",""my efficiency;x;#epsilon"",20,0,10);; TRandom3 rand3;. bool bPassed;; double x;; for(int i=0; i<10000; ++i); {; //simulate events with variable under investigation; x = rand3.Uniform(10);; //check selection: bPassed = DoesEventPassSelection(x); bPassed = rand3.Rndm() < TMath::Gaus(x,5,4);; pEff->Fill(bPassed,x);; }; c1->cd(1);; pEff->Draw(""AP"");; c1->cd(2);; pEff->Draw(""AP"");; gPad->Update();; pEff->GetPaintedGraph()->GetXaxis()->SetTitleSize(0.05);; pEff->GetPa",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:25001,Security,access,access,25001," a threshold function; TF1* f2 = new TF1(""thres"",""0.8"",0,10);; f2->SetLineColor(kRed);; //add it to the list of functions; //use add first because the parameters of the last function will be displayed; pEff->GetListOfFunctions()->AddFirst(f2);. pEff->Draw(""AP"");; }; End_Macro. \anchor EFF063; ### VI.3 Draw a TEfficiency object; A TEfficiency object can be drawn by calling the usual TEfficiency::Draw method.; At the moment drawing is only supported for 1- and 2-dimensional TEfficiency objects.; In the 1-dimensional case, you can use the same options as for the TGraphAsymmErrors::Draw; method. For 2-dimensional TEfficiency objects, you can pass the same options as; for a TH2::Draw object. \anchor EFF064; ### VI.4 TEfficiency object's axis customisation; The axes of a TEfficiency object can be accessed and customised by calling the; GetPaintedGraph method and then GetXaxis() or GetYaxis() and the corresponding TAxis; methods.; Note that in order to access the painted graph via GetPaintedGraph(), one should either; call Paint or, better, gPad->Update(). Begin_Macro(source); {; //canvas only needed for this documentation; TCanvas* c1 = new TCanvas(""example"","""",600,400);; c1->SetFillStyle(1001);; c1->SetFillColor(kWhite);; c1->Divide(2,1);. //create one-dimensional TEfficiency object with fixed bin size; TEfficiency* pEff = new TEfficiency(""eff"",""my efficiency;x;#epsilon"",20,0,10);; TRandom3 rand3;. bool bPassed;; double x;; for(int i=0; i<10000; ++i); {; //simulate events with variable under investigation; x = rand3.Uniform(10);; //check selection: bPassed = DoesEventPassSelection(x); bPassed = rand3.Rndm() < TMath::Gaus(x,5,4);; pEff->Fill(bPassed,x);; }; c1->cd(1);; pEff->Draw(""AP"");; c1->cd(2);; pEff->Draw(""AP"");; gPad->Update();; pEff->GetPaintedGraph()->GetXaxis()->SetTitleSize(0.05);; pEff->GetPaintedGraph()->GetXaxis()->SetLabelFont(42);; pEff->GetPaintedGraph()->GetXaxis()->SetLabelSize(0.05);; pEff->GetPaintedGraph()->GetYaxis()->SetTitleOffset(0.85);; pEff->GetP",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:390,Integrability,depend,depends,390,"////////////////////////////////////////////////////////////////////////////////; /// Constructor using two existing histograms as input; ///; ///Input: passed - contains the events fulfilling some criteria; /// total - contains all investigated events; ///; ///Notes: - both histograms have to fulfill the conditions of CheckConsistency; /// - dimension of the resulting efficiency object depends; /// on the dimension of the given histograms; /// - Clones of both histograms are stored internally; /// - The function SetName(total.GetName() + ""_clone"") is called to set; /// the names of the new object and the internal histograms..; /// - The created TEfficiency object is NOT appended to a directory. It; /// will not be written to disk during the next TFile::Write() command; /// in order to prevent duplication of data. If you want to save this; /// TEfficiency object anyway, you can either append it to a; /// directory by calling SetDirectory(TDirectory*) or write it; /// explicitly to disk by calling Write().",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:131,Modifiability,variab,variable,131,"////////////////////////////////////////////////////////////////////////////////; /// Create 1-dimensional TEfficiency object with variable bin size.; ///; /// Constructor creates two new and empty histograms with a given binning; ///; /// Input:; ///; /// - `name`: the common part of the name for both histograms (no blanks); /// fTotalHistogram has name: name + ""_total""; /// fPassedHistogram has name: name + ""_passed""; /// - `title`: the common part of the title for both histogram; /// fTotalHistogram has title: title + "" (total)""; /// fPassedHistogram has title: title + "" (passed)""; /// It is possible to label the axis by passing a title with; /// the following format: ""title;xlabel;ylabel"".; /// - `nbins`: number of bins on the x-axis; /// - `xbins`: array of length (nbins + 1) with low-edges for each bin; /// xbins[nbinsx] ... lower edge for overflow bin",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:131,Modifiability,variab,variable,131,"////////////////////////////////////////////////////////////////////////////////; /// Create 2-dimensional TEfficiency object with variable bin size.; ///; /// Constructor creates two new and empty histograms with a given binning.; ///; /// Input:; ///; /// - `name`: the common part of the name for both histograms(no blanks); /// fTotalHistogram has name: name + ""_total""; /// fPassedHistogram has name: name + ""_passed""; /// - `title`: the common part of the title for both histogram; /// fTotalHistogram has title: title + "" (total)""; /// fPassedHistogram has title: title + "" (passed)""; /// It is possible to label the axis by passing a title with; /// the following format: ""title;xlabel;ylabel;zlabel"".; /// - `nbinsx`: number of bins on the x-axis; /// - `xbins`: array of length (nbins + 1) with low-edges for each bin; /// xbins[nbinsx] ... lower edge for overflow x-bin; /// - `nbinsy`: number of bins on the y-axis; /// - `ybins`: array of length (nbins + 1) with low-edges for each bin; /// ybins[nbinsy] ... lower edge for overflow y-bin",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:131,Modifiability,variab,variable,131,"////////////////////////////////////////////////////////////////////////////////; /// Create 3-dimensional TEfficiency object with variable bin size.; ///; /// Constructor creates two new and empty histograms with a given binning.; ///; /// Input:; ///; /// - `name`: the common part of the name for both histograms(no blanks); /// fTotalHistogram has name: name + ""_total""; /// fPassedHistogram has name: name + ""_passed""; /// - `title`: the common part of the title for both histogram; /// fTotalHistogram has title: title + "" (total)""; /// fPassedHistogram has title: title + "" (passed)""; /// It is possible to label the axis by passing a title with; /// the following format: ""title;xlabel;ylabel;zlabel"".; /// - `nbinsx`: number of bins on the x-axis; /// - `xbins`: array of length (nbins + 1) with low-edges for each bin; /// xbins[nbinsx] ... lower edge for overflow x-bin; /// - `nbinsy`: number of bins on the y-axis; /// - `ybins`: array of length (nbins + 1) with low-edges for each bin; /// xbins[nbinsx] ... lower edge for overflow y-bin; /// - `nbinsz`: number of bins on the z-axis; /// - `zbins`: array of length (nbins + 1) with low-edges for each bin; /// xbins[nbinsx] ... lower edge for overflow z-bin",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:49,Testability,log,logic,49,"//delete all function in fFunctions; // use same logic as in TH1 destructor; // (see TH1::~TH1 code in TH1.cxx)",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:3,Availability,toler,tolerance,3,"// tolerance",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:178,Integrability,depend,depending,178,"////////////////////////////////////////////////////////////////////////////////; /**; Calculates the boundaries for a Bayesian confidence interval (shortest or central interval depending on the option). \param[in] total number of total events; \param[in] passed 0 <= number of passed events <= total; \param[in] level confidence level; \param[in] alpha shape parameter > 0 for the prior distribution (fBeta_alpha); \param[in] beta shape parameter > 0 for the prior distribution (fBeta_beta); \param[in] bUpper; - true - upper boundary is returned; - false - lower boundary is returned; \param[in] bShortest ??. Note: In the case central confidence interval is calculated.; when passed = 0 (or passed = total) the lower (or upper); interval values will be larger than 0 (or smaller than 1). Calculation:. The posterior probability in bayesian statistics is given by:; \f[; P(\varepsilon |k,N) \propto L(\varepsilon|k,N) \times Prior(\varepsilon); \f]; As an efficiency can be interpreted as probability of a positive outcome of; a Bernoullli trial the likelihood function is given by the binomial; distribution:; \f[; L(\varepsilon|k,N) = Binomial(N,k) \varepsilon ^{k} (1 - \varepsilon)^{N-k}; \f]; At the moment only beta distributions are supported as prior probabilities; of the efficiency (\f$ B(\alpha,\beta)\f$ is the beta function):; \f[; Prior(\varepsilon) = \frac{1}{B(\alpha,\beta)} \varepsilon ^{\alpha - 1} (1 - \varepsilon)^{\beta - 1}; \f]; The posterior probability is therefore again given by a beta distribution:; \f[; P(\varepsilon |k,N) \propto \varepsilon ^{k + \alpha - 1} (1 - \varepsilon)^{N - k + \beta - 1}; \f]; In case of central intervals; the lower boundary for the equal-tailed confidence interval is given by the; inverse cumulative (= quantile) function for the quantile \f$ \frac{1 - level}{2} \f$.; The upper boundary for the equal-tailed confidence interval is given by the; inverse cumulative (= quantile) function for the quantile \f$ \frac{1 + level}{2} \f$.; He",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:22,Performance,perform,perform,22,"// for the other case perform a minimization; // make a function of the length of the posterior interval as a function of lower bound",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:521,Testability,test,test,521,"////////////////////////////////////////////////////////////////////////////////; /**; Calculates the boundaries for the frequentist Clopper-Pearson interval. This interval is recommended by the PDG. \param[in] total number of total events; \param[in] passed 0 <= number of passed events <= total; \param[in] level confidence level; \param[in] bUpper true - upper boundary is returned; ;false - lower boundary is returned. Calculation:. The lower boundary of the Clopper-Pearson interval is the ""exact"" inversion; of the test:; \f{eqnarray*}{; P(x \geq passed; total) &=& \frac{1 - level}{2}\\; P(x \geq passed; total) &=& 1 - P(x \leq passed - 1; total)\\; &=& 1 - \frac{1}{norm} * \int_{0}^{1 - \varepsilon} t^{total - passed} (1 - t)^{passed - 1} dt\\; &=& 1 - \frac{1}{norm} * \int_{\varepsilon}^{1} t^{passed - 1} (1 - t)^{total - passed} dt\\; &=& \frac{1}{norm} * \int_{0}^{\varepsilon} t^{passed - 1} (1 - t)^{total - passed} dt\\; &=& I_{\varepsilon}(passed,total - passed + 1); \f}; The lower boundary is therefore given by the \f$ \frac{1 - level}{2}\f$ quantile; of the beta distribution. The upper boundary of the Clopper-Pearson interval is the ""exact"" inversion; of the test:; \f{eqnarray*}{; P(x \leq passed; total) &=& \frac{1 - level}{2}\\; P(x \leq passed; total) &=& \frac{1}{norm} * \int_{0}^{1 - \varepsilon} t^{total - passed - 1} (1 - t)^{passed} dt\\; &=& \frac{1}{norm} * \int_{\varepsilon}^{1} t^{passed} (1 - t)^{total - passed - 1} dt\\; &=& 1 - \frac{1}{norm} * \int_{0}^{\varepsilon} t^{passed} (1 - t)^{total - passed - 1} dt\\; \Rightarrow 1 - \frac{1 - level}{2} &=& \frac{1}{norm} * \int_{0}^{\varepsilon} t^{passed} (1 - t)^{total - passed -1} dt\\; \frac{1 + level}{2} &=& I_{\varepsilon}(passed + 1,total - passed); \f}; The upper boundary is therefore given by the \f$\frac{1 + level}{2}\f$ quantile; of the beta distribution. Note: The connection between the binomial distribution and the regularized; incomplete beta function \f$ I_{\varepsilon}(\alpha,\beta)\",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:1185,Testability,test,test,1185,"//////////////////////////////////////////////////////////; /**; Calculates the boundaries for the frequentist Clopper-Pearson interval. This interval is recommended by the PDG. \param[in] total number of total events; \param[in] passed 0 <= number of passed events <= total; \param[in] level confidence level; \param[in] bUpper true - upper boundary is returned; ;false - lower boundary is returned. Calculation:. The lower boundary of the Clopper-Pearson interval is the ""exact"" inversion; of the test:; \f{eqnarray*}{; P(x \geq passed; total) &=& \frac{1 - level}{2}\\; P(x \geq passed; total) &=& 1 - P(x \leq passed - 1; total)\\; &=& 1 - \frac{1}{norm} * \int_{0}^{1 - \varepsilon} t^{total - passed} (1 - t)^{passed - 1} dt\\; &=& 1 - \frac{1}{norm} * \int_{\varepsilon}^{1} t^{passed - 1} (1 - t)^{total - passed} dt\\; &=& \frac{1}{norm} * \int_{0}^{\varepsilon} t^{passed - 1} (1 - t)^{total - passed} dt\\; &=& I_{\varepsilon}(passed,total - passed + 1); \f}; The lower boundary is therefore given by the \f$ \frac{1 - level}{2}\f$ quantile; of the beta distribution. The upper boundary of the Clopper-Pearson interval is the ""exact"" inversion; of the test:; \f{eqnarray*}{; P(x \leq passed; total) &=& \frac{1 - level}{2}\\; P(x \leq passed; total) &=& \frac{1}{norm} * \int_{0}^{1 - \varepsilon} t^{total - passed - 1} (1 - t)^{passed} dt\\; &=& \frac{1}{norm} * \int_{\varepsilon}^{1} t^{passed} (1 - t)^{total - passed - 1} dt\\; &=& 1 - \frac{1}{norm} * \int_{0}^{\varepsilon} t^{passed} (1 - t)^{total - passed - 1} dt\\; \Rightarrow 1 - \frac{1 - level}{2} &=& \frac{1}{norm} * \int_{0}^{\varepsilon} t^{passed} (1 - t)^{total - passed -1} dt\\; \frac{1 + level}{2} &=& I_{\varepsilon}(passed + 1,total - passed); \f}; The upper boundary is therefore given by the \f$\frac{1 + level}{2}\f$ quantile; of the beta distribution. Note: The connection between the binomial distribution and the regularized; incomplete beta function \f$ I_{\varepsilon}(\alpha,\beta)\f$ has been used.; */",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:22,Availability,error,errors,22,"//fill efficiency and errors",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:9,Availability,error,error,9,"//did an error occurred ?",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:639,Availability,error,error,639,"////////////////////////////////////////////////////////////////////////////////; /// Draws the current TEfficiency object; ///; /// \param[in] opt; /// - 1-dimensional case: same options as TGraphAsymmErrors::Draw(); /// but as default ""AP"" is used; /// - 2-dimensional case: by default use an histogram and in this case same options as TH2::Draw(); /// if using instad option ""GRAPH"" a TGraph2DAsymmErrors is used and; /// the same options as for TGraph2D applies; /// - 3-dimensional case: not yet supported; ///; /// Specific TEfficiency drawing options:; /// - E0 - plot bins where the total number of passed events is zero; /// (the error interval will be [0,1] )",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:329,Deployability,release,released,329,"////////////////////////////////////////////////////////////////////////////////; /// Execute action corresponding to one event.; ///; /// This member function is called when the drawn class is clicked with the locator; /// If Left button clicked on one of the line end points, this point; /// follows the cursor until button is released.; ///; /// if Middle button clicked, the line is moved parallel to itself; /// until the button is released.; /// Forward the call to the underlying graph",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:437,Deployability,release,released,437,"////////////////////////////////////////////////////////////////////////////////; /// Execute action corresponding to one event.; ///; /// This member function is called when the drawn class is clicked with the locator; /// If Left button clicked on one of the line end points, this point; /// follows the cursor until button is released.; ///; /// if Middle button clicked, the line is moved parallel to itself; /// until the button is released.; /// Forward the call to the underlying graph",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:697,Deployability,update,update,697,"////////////////////////////////////////////////////////////////////////////////; /// Returns a cloned version of fPassedHistogram; ///; /// Notes:; /// - The histogram is filled with unit weights. You might want to scale; /// it with the global weight GetWeight().; /// - The returned object is owned by the user who has to care about the; /// deletion of the new TH1 object.; /// - This histogram is by default NOT attached to the current directory; /// to avoid duplication of data. If you want to store it automatically; /// during the next TFile::Write() command, you have to attach it to; /// the corresponding directory.; ///; /// ~~~~~~~{.cpp}; /// TFile* pFile = new TFile(""passed.root"",""update"");; /// TEfficiency* pEff = (TEfficiency*)gDirectory->Get(""my_eff"");; /// TH1* copy = pEff->GetCopyPassedHisto();; /// copy->SetDirectory(gDirectory);; /// pFile->Write();; /// ~~~~~~~",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:459,Safety,avoid,avoid,459,"////////////////////////////////////////////////////////////////////////////////; /// Returns a cloned version of fPassedHistogram; ///; /// Notes:; /// - The histogram is filled with unit weights. You might want to scale; /// it with the global weight GetWeight().; /// - The returned object is owned by the user who has to care about the; /// deletion of the new TH1 object.; /// - This histogram is by default NOT attached to the current directory; /// to avoid duplication of data. If you want to store it automatically; /// during the next TFile::Write() command, you have to attach it to; /// the corresponding directory.; ///; /// ~~~~~~~{.cpp}; /// TFile* pFile = new TFile(""passed.root"",""update"");; /// TEfficiency* pEff = (TEfficiency*)gDirectory->Get(""my_eff"");; /// TH1* copy = pEff->GetCopyPassedHisto();; /// copy->SetDirectory(gDirectory);; /// pFile->Write();; /// ~~~~~~~",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:695,Deployability,update,update,695,"////////////////////////////////////////////////////////////////////////////////; /// Returns a cloned version of fTotalHistogram; ///; /// Notes:; /// - The histogram is filled with unit weights. You might want to scale; /// it with the global weight GetWeight().; /// - The returned object is owned by the user who has to care about the; /// deletion of the new TH1 object.; /// - This histogram is by default NOT attached to the current directory; /// to avoid duplication of data. If you want to store it automatically; /// during the next TFile::Write() command, you have to attach it to; /// the corresponding directory.; ///; /// ~~~~~~~{.cpp}; /// TFile* pFile = new TFile(""total.root"",""update"");; /// TEfficiency* pEff = (TEfficiency*)gDirectory->Get(""my_eff"");; /// TH1* copy = pEff->GetCopyTotalHisto();; /// copy->SetDirectory(gDirectory);; /// pFile->Write();; /// ~~~~~~~",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:458,Safety,avoid,avoid,458,"////////////////////////////////////////////////////////////////////////////////; /// Returns a cloned version of fTotalHistogram; ///; /// Notes:; /// - The histogram is filled with unit weights. You might want to scale; /// it with the global weight GetWeight().; /// - The returned object is owned by the user who has to care about the; /// deletion of the new TH1 object.; /// - This histogram is by default NOT attached to the current directory; /// to avoid duplication of data. If you want to store it automatically; /// during the next TFile::Write() command, you have to attach it to; /// the corresponding directory.; ///; /// ~~~~~~~{.cpp}; /// TFile* pFile = new TFile(""total.root"",""update"");; /// TEfficiency* pEff = (TEfficiency*)gDirectory->Get(""my_eff"");; /// TH1* copy = pEff->GetCopyTotalHisto();; /// copy->SetDirectory(gDirectory);; /// pFile->Write();; /// ~~~~~~~",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:181,Integrability,depend,depends,181,"////////////////////////////////////////////////////////////////////////////////; /// Returns the efficiency in the given global bin; ///; /// Note:; /// - The estimated efficiency depends on the chosen statistic option:; /// for frequentist ones:; /// \f$ \hat{\varepsilon} = \frac{passed}{total} \f$; /// for bayesian ones the expectation value of the resulting posterior; /// distribution is returned:; /// \f$ \hat{\varepsilon} = \frac{passed + \alpha}{total + \alpha + \beta} \f$; /// If the bit kPosteriorMode is set (or the method TEfficiency::UsePosteriorMode() has been called ) the; /// mode (most probable value) of the posterior is returned:; /// \f$ \hat{\varepsilon} = \frac{passed + \alpha -1}{total + \alpha + \beta -2} \f$; /// - If the denominator is equal to 0, an efficiency of 0 is returned.; /// - When \f$ passed + \alpha < 1 \f$ or \f$ total - passed + \beta < 1 \f$ the above; /// formula for the mode is not valid. In these cases values the estimated efficiency is 0 or 1.",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:104,Availability,error,error,104,"////////////////////////////////////////////////////////////////////////////////; /// Returns the lower error on the efficiency in the given global bin; ///; /// The result depends on the current confidence level fConfLevel and the; /// chosen statistic option fStatisticOption. See SetStatisticOption(Int_t) for; /// more details.; ///; /// Note: If the histograms are filled with weights, only bayesian methods and the; /// normal approximation are supported.",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:173,Integrability,depend,depends,173,"////////////////////////////////////////////////////////////////////////////////; /// Returns the lower error on the efficiency in the given global bin; ///; /// The result depends on the current confidence level fConfLevel and the; /// chosen statistic option fStatisticOption. See SetStatisticOption(Int_t) for; /// more details.; ///; /// Note: If the histograms are filled with weights, only bayesian methods and the; /// normal approximation are supported.",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:19,Availability,error,errors,19,"// avoid to return errors which makes eff-err < 0",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:3,Safety,avoid,avoid,3,"// avoid to return errors which makes eff-err < 0",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:104,Availability,error,error,104,"////////////////////////////////////////////////////////////////////////////////; /// Returns the upper error on the efficiency in the given global bin; ///; /// The result depends on the current confidence level fConfLevel and the; /// chosen statistic option fStatisticOption. See SetStatisticOption(Int_t) for; /// more details.; ///; /// Note: If the histograms are filled with weights, only bayesian methods and the; /// normal approximation are supported.",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:173,Integrability,depend,depends,173,"////////////////////////////////////////////////////////////////////////////////; /// Returns the upper error on the efficiency in the given global bin; ///; /// The result depends on the current confidence level fConfLevel and the; /// chosen statistic option fStatisticOption. See SetStatisticOption(Int_t) for; /// more details.; ///; /// Note: If the histograms are filled with weights, only bayesian methods and the; /// normal approximation are supported.",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:562,Deployability,update,updated,562,"////////////////////////////////////////////////////////////////////////////////; /// Paints this TEfficiency object; ///; /// For details on the possible option see Draw(Option_t*); ///; /// Note for 1D classes; /// In 1D the TEfficiency uses a TGraphAsymmErrors for drawing; /// The TGraph is created only the first time Paint is used. The user can manipulate the; /// TGraph via the method TEfficiency::GetPaintedGraph(); /// The TGraph creates behing an histogram for the axis. The histogram is created also only the first time.; /// If the axis needs to be updated because in the meantime the class changed use this trick; /// which will trigger a re-calculation of the axis of the graph; /// TEfficiency::GetPaintedGraph()->Set(0); ///; /// Note that in order to access the painted graph via GetPaintedGraph() you need either to call Paint or better; /// gPad->Update();; ///",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:867,Deployability,Update,Update,867,"////////////////////////////////////////////////////////////////////////////////; /// Paints this TEfficiency object; ///; /// For details on the possible option see Draw(Option_t*); ///; /// Note for 1D classes; /// In 1D the TEfficiency uses a TGraphAsymmErrors for drawing; /// The TGraph is created only the first time Paint is used. The user can manipulate the; /// TGraph via the method TEfficiency::GetPaintedGraph(); /// The TGraph creates behing an histogram for the axis. The histogram is created also only the first time.; /// If the axis needs to be updated because in the meantime the class changed use this trick; /// which will trigger a re-calculation of the axis of the graph; /// TEfficiency::GetPaintedGraph()->Set(0); ///; /// Note that in order to access the painted graph via GetPaintedGraph() you need either to call Paint or better; /// gPad->Update();; ///",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:769,Security,access,access,769,"////////////////////////////////////////////////////////////////////////////////; /// Paints this TEfficiency object; ///; /// For details on the possible option see Draw(Option_t*); ///; /// Note for 1D classes; /// In 1D the TEfficiency uses a TGraphAsymmErrors for drawing; /// The TGraph is created only the first time Paint is used. The user can manipulate the; /// TGraph via the method TEfficiency::GetPaintedGraph(); /// The TGraph creates behing an histogram for the axis. The histogram is created also only the first time.; /// If the axis needs to be updated because in the meantime the class changed use this trick; /// which will trigger a re-calculation of the axis of the graph; /// TEfficiency::GetPaintedGraph()->Set(0); ///; /// Note that in order to access the painted graph via GetPaintedGraph() you need either to call Paint or better; /// gPad->Update();; ///",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:3,Deployability,update,update,3,"// update existing graph already created",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:31,Modifiability,variab,variable,31,"//create arrays containing the variable binning",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:11,Modifiability,variab,variable,11,"//creating variable binning; //TEfficiency pointer has efficiency name + counter",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:2,Modifiability,variab,variable,2,"//variable bin size -> use n,*bins constructor",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:36,Availability,avail,available,36,"// doing this I get h1->fN which is available only for a TH1D",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:208,Deployability,update,updated,208,"////////////////////////////////////////////////////////////////////////////////; /// Sets the number of passed events in the given global bin; ///; /// returns ""true"" if the number of passed events has been updated; /// otherwise ""false"" ist returned; ///; /// Note: - requires: 0 <= events <= fTotalHistogram->GetBinContent(bin)",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:532,Usability,clear,cleared,532,"////////////////////////////////////////////////////////////////////////////////; /// Sets the histogram containing the passed events; ///; /// The given histogram is cloned and stored internally as histogram containing; /// the passed events. The given histogram has to be consistent with the current; /// fTotalHistogram (see CheckConsistency(const TH1&,const TH1&)).; /// The method returns whether the fPassedHistogram has been replaced (true) or; /// not (false).; ///; /// Note: The list of associated functions fFunctions is cleared.; ///; /// Option:; /// - ""f"": force the replacement without checking the consistency; /// This can lead to inconsistent histograms and useless results; /// or unexpected behaviour. But sometimes it might be the only; /// way to change the histograms. If you use this option, you; /// should ensure that the fTotalHistogram is replaced by a; /// consistent one (with respect to rPassed) as well.",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:206,Deployability,update,updated,206,"////////////////////////////////////////////////////////////////////////////////; /// Sets the number of total events in the given global bin; ///; /// returns ""true"" if the number of total events has been updated; /// otherwise ""false"" ist returned; ///; /// Note: - requires: fPassedHistogram->GetBinContent(bin) <= events",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:518,Usability,clear,cleared,518,"////////////////////////////////////////////////////////////////////////////////; /// Sets the histogram containing all events; ///; /// The given histogram is cloned and stored internally as histogram containing; /// all events. The given histogram has to be consistent with the current; /// fPassedHistogram (see CheckConsistency(const TH1&,const TH1&)).; /// The method returns whether the fTotalHistogram has been replaced (true) or; /// not (false).; ///; /// Note: The list of associated functions fFunctions is cleared.; ///; /// Option:; /// - ""f"": force the replacement without checking the consistency; /// This can lead to inconsistent histograms and useless results; /// or unexpected behaviour. But sometimes it might be the only; /// way to change the histograms. If you use this option, you; /// should ensure that the fPassedHistogram is replaced by a; /// consistent one (with respect to rTotal) as well.",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiency.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiencyHelper.h:350,Deployability,integrat,integration,350,"// @(#)root/mathcore:$Id$; // Author: L. Moneta Nov 2010; /**********************************************************************; * *; * Copyright (c) 2010 LCG ROOT Math Team, CERN/PH-SFT *; * *; * *; **********************************************************************/; // helper class for binomial Neyman intervals; // author Jordan Tucker; // integration in CMSSW: Luca Lista; // modified and integrated in ROOT: Lorenzo Moneta",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiencyHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiencyHelper.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiencyHelper.h:400,Deployability,integrat,integrated,400,"// @(#)root/mathcore:$Id$; // Author: L. Moneta Nov 2010; /**********************************************************************; * *; * Copyright (c) 2010 LCG ROOT Math Team, CERN/PH-SFT *; * *; * *; **********************************************************************/; // helper class for binomial Neyman intervals; // author Jordan Tucker; // integration in CMSSW: Luca Lista; // modified and integrated in ROOT: Lorenzo Moneta",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiencyHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiencyHelper.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiencyHelper.h:350,Integrability,integrat,integration,350,"// @(#)root/mathcore:$Id$; // Author: L. Moneta Nov 2010; /**********************************************************************; * *; * Copyright (c) 2010 LCG ROOT Math Team, CERN/PH-SFT *; * *; * *; **********************************************************************/; // helper class for binomial Neyman intervals; // author Jordan Tucker; // integration in CMSSW: Luca Lista; // modified and integrated in ROOT: Lorenzo Moneta",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiencyHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiencyHelper.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiencyHelper.h:400,Integrability,integrat,integrated,400,"// @(#)root/mathcore:$Id$; // Author: L. Moneta Nov 2010; /**********************************************************************; * *; * Copyright (c) 2010 LCG ROOT Math Team, CERN/PH-SFT *; * *; * *; **********************************************************************/; // helper class for binomial Neyman intervals; // author Jordan Tucker; // integration in CMSSW: Luca Lista; // modified and integrated in ROOT: Lorenzo Moneta",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiencyHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiencyHelper.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiencyHelper.h:3,Performance,Cache,Cache,3,"// Cache the likelihood ratio L(\rho)/L(\hat{\rho}), too.",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiencyHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiencyHelper.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiencyHelper.h:102,Energy Efficiency,allocate,allocated,102,"// Construct nrho acceptance sets in rho = [0,1] given ntot trials; // and put the results in already-allocated x_l and x_r.",MatchSource.CODE_COMMENT,hist/hist/src/TEfficiencyHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiencyHelper.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:72,Availability,error,error,72,"// formula functions; // if ndim is not 1 set xmin max to zero to avoid error in ctor",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:66,Safety,avoid,avoid,66,"// formula functions; // if ndim is not 1 set xmin max to zero to avoid error in ctor",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:9,Integrability,wrap,wrapping,9,"// class wrapping evaluation of TF1(x) - y0",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:9,Integrability,wrap,wrapping,9,"// class wrapping evaluation of -TF1(x)",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:9,Integrability,wrap,wrapping,9,"// class wrapping evaluation of -TF1(x) for multi-dimension",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:73,Deployability,integrat,integration,73,"// class wrapping function evaluation directly in 1D interface (used for integration); // and implementing the methods for the momentum calculations",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:9,Integrability,wrap,wrapping,9,"// class wrapping function evaluation directly in 1D interface (used for integration); // and implementing the methods for the momentum calculations",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:53,Integrability,interface,interface,53,"// class wrapping function evaluation directly in 1D interface (used for integration); // and implementing the methods for the momentum calculations",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:73,Integrability,integrat,integration,73,"// class wrapping function evaluation directly in 1D interface (used for integration); // and implementing the methods for the momentum calculations",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:2701,Energy Efficiency,power,power,2701,"iable x with 2 parameters. The parameters must be initialized via:. ~~~~{.cpp}; fa->SetParameter(0,value_first_parameter);; fa->SetParameter(1,value_second_parameter);; ~~~~. Parameters may be given a name:. ~~~~{.cpp}; fa->SetParName(0,""Constant"");; ~~~~. * Example b:. ~~~~{.cpp}; auto fb = new TF1(""fb"",""gaus(0)*expo(3)"",0,10);; ~~~~. ``gaus(0)`` is a substitute for ``[0]*exp(-0.5*((x-[1])/[2])**2)`` and ``(0)`` means start numbering parameters at ``0``. ``expo(3)`` is a substitute for ``exp([3]+[4]*x)``. #### Case 2: inline expression using TMath functions with parameters. Begin_Macro(source); {; auto fb2 = new TF1(""fa3"",""TMath::Landau(x,[0],[1],0)"",-5,10);; fb2->SetParameters(0.2,1.3);; fb2->Draw();; }; End_Macro. \anchor F3; ### 3 - A lambda expression with variables and parameters. \since **6.00/00:**; TF1 supports using lambda expressions in the formula. This allows, by using a full C++ syntax the full power of lambda; functions and still maintain the capability of storing the function in a file which cannot be done with; function pointer or lambda written not as expression, but as code (see items below). Example on how using lambda to define a sum of two functions.; Note that is necessary to provide the number of parameters. ~~~~{.cpp}; TF1 f1(""f1"",""sin(x)"",0,10);; TF1 f2(""f2"",""cos(x)"",0,10);; TF1 fsum(""f1"",""[&](double *x, double *p){ return p[0]*f1(x) + p[1]*f2(x); }"",0,10,2);; ~~~~. \anchor F4; ### 4 - A general C function with parameters. Consider the macro myfunc.C below:. ~~~~{.cpp}; // Macro myfunc.C; Double_t myfunction(Double_t *x, Double_t *par); {; Float_t xx =x[0];; Double_t f = TMath::Abs(par[0]*sin(par[1]*xx)/xx);; return f;; }; void myfunc(); {; auto f1 = new TF1(""myfunc"",myfunction,0,10,2);; f1->SetParameters(2,1);; f1->SetParNames(""constant"",""coefficient"");; f1->Draw();; }; void myfit(); {; auto h1 = new TH1F(""h1"",""test"",100,0,10);; h1->FillRandom(""myfunc"",20000);; TF1 *f1 = (TF1 *)gROOT->GetFunction(""myfunc"");; f1->SetParameters(800,1);; h1->",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:538,Modifiability,variab,variable,538,"////////////////////////////////////////////////////////////////////////////////; /** \class TF1; \ingroup Functions; \brief 1-Dim function class. ## TF1: 1-Dim function class. A TF1 object is a 1-Dim function defined between a lower and upper limit.; The function may be a simple function based on a TFormula expression or a precompiled user function.; The function may have associated parameters.; TF1 graphics function is via the TH1 and TGraph drawing functions. The following types of functions can be created:. 1. [Expression using variable x and no parameters](\ref F1); 2. [Expression using variable x with parameters](\ref F2); 3. [Lambda Expression with variable x and parameters](\ref F3); 4. [A general C function with parameters](\ref F4); 5. [A general C++ function object (functor) with parameters](\ref F5); 6. [A member function with parameters of a general C++ class](\ref F6). \anchor F1; ### 1 - Expression using variable x and no parameters. #### Case 1: inline expression using standard C++ functions/operators. Begin_Macro(source); {; auto fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();; }; End_Macro. #### Case 2: inline expression using a ROOT function (e.g. from TMath) without parameters. Begin_Macro(source); {; auto fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();; }; End_Macro. #### Case 3: inline expression using a user defined CLING function by name. ~~~~{.cpp}; Double_t myFunc(double x) { return x+sin(x); }; ....; auto fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();; ~~~~. \anchor F2; ### 2 - Expression using variable x with parameters. #### Case 1: inline expression using standard C++ functions/operators. * Example a:. ~~~~{.cpp}; auto fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);; ~~~~. This creates a function of variable x with 2 parameters. The parameters must be initialized via:. ~~~~{.cpp}; fa->SetParameter(0,value_first_parameter);; fa->SetParameter(1,value_second_parameter);; ~~~~. Parameters may be given a name:. ~~~~{.cpp}; fa",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:599,Modifiability,variab,variable,599,"////////////////////////////////////////////////////////////////////////////////; /** \class TF1; \ingroup Functions; \brief 1-Dim function class. ## TF1: 1-Dim function class. A TF1 object is a 1-Dim function defined between a lower and upper limit.; The function may be a simple function based on a TFormula expression or a precompiled user function.; The function may have associated parameters.; TF1 graphics function is via the TH1 and TGraph drawing functions. The following types of functions can be created:. 1. [Expression using variable x and no parameters](\ref F1); 2. [Expression using variable x with parameters](\ref F2); 3. [Lambda Expression with variable x and parameters](\ref F3); 4. [A general C function with parameters](\ref F4); 5. [A general C++ function object (functor) with parameters](\ref F5); 6. [A member function with parameters of a general C++ class](\ref F6). \anchor F1; ### 1 - Expression using variable x and no parameters. #### Case 1: inline expression using standard C++ functions/operators. Begin_Macro(source); {; auto fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();; }; End_Macro. #### Case 2: inline expression using a ROOT function (e.g. from TMath) without parameters. Begin_Macro(source); {; auto fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();; }; End_Macro. #### Case 3: inline expression using a user defined CLING function by name. ~~~~{.cpp}; Double_t myFunc(double x) { return x+sin(x); }; ....; auto fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();; ~~~~. \anchor F2; ### 2 - Expression using variable x with parameters. #### Case 1: inline expression using standard C++ functions/operators. * Example a:. ~~~~{.cpp}; auto fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);; ~~~~. This creates a function of variable x with 2 parameters. The parameters must be initialized via:. ~~~~{.cpp}; fa->SetParameter(0,value_first_parameter);; fa->SetParameter(1,value_second_parameter);; ~~~~. Parameters may be given a name:. ~~~~{.cpp}; fa",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:664,Modifiability,variab,variable,664,"////////////////////////////////////////////////////////////////////////////////; /** \class TF1; \ingroup Functions; \brief 1-Dim function class. ## TF1: 1-Dim function class. A TF1 object is a 1-Dim function defined between a lower and upper limit.; The function may be a simple function based on a TFormula expression or a precompiled user function.; The function may have associated parameters.; TF1 graphics function is via the TH1 and TGraph drawing functions. The following types of functions can be created:. 1. [Expression using variable x and no parameters](\ref F1); 2. [Expression using variable x with parameters](\ref F2); 3. [Lambda Expression with variable x and parameters](\ref F3); 4. [A general C function with parameters](\ref F4); 5. [A general C++ function object (functor) with parameters](\ref F5); 6. [A member function with parameters of a general C++ class](\ref F6). \anchor F1; ### 1 - Expression using variable x and no parameters. #### Case 1: inline expression using standard C++ functions/operators. Begin_Macro(source); {; auto fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();; }; End_Macro. #### Case 2: inline expression using a ROOT function (e.g. from TMath) without parameters. Begin_Macro(source); {; auto fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();; }; End_Macro. #### Case 3: inline expression using a user defined CLING function by name. ~~~~{.cpp}; Double_t myFunc(double x) { return x+sin(x); }; ....; auto fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();; ~~~~. \anchor F2; ### 2 - Expression using variable x with parameters. #### Case 1: inline expression using standard C++ functions/operators. * Example a:. ~~~~{.cpp}; auto fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);; ~~~~. This creates a function of variable x with 2 parameters. The parameters must be initialized via:. ~~~~{.cpp}; fa->SetParameter(0,value_first_parameter);; fa->SetParameter(1,value_second_parameter);; ~~~~. Parameters may be given a name:. ~~~~{.cpp}; fa",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:933,Modifiability,variab,variable,933,"////////////////////////////////////////////////////////////////////////////////; /** \class TF1; \ingroup Functions; \brief 1-Dim function class. ## TF1: 1-Dim function class. A TF1 object is a 1-Dim function defined between a lower and upper limit.; The function may be a simple function based on a TFormula expression or a precompiled user function.; The function may have associated parameters.; TF1 graphics function is via the TH1 and TGraph drawing functions. The following types of functions can be created:. 1. [Expression using variable x and no parameters](\ref F1); 2. [Expression using variable x with parameters](\ref F2); 3. [Lambda Expression with variable x and parameters](\ref F3); 4. [A general C function with parameters](\ref F4); 5. [A general C++ function object (functor) with parameters](\ref F5); 6. [A member function with parameters of a general C++ class](\ref F6). \anchor F1; ### 1 - Expression using variable x and no parameters. #### Case 1: inline expression using standard C++ functions/operators. Begin_Macro(source); {; auto fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();; }; End_Macro. #### Case 2: inline expression using a ROOT function (e.g. from TMath) without parameters. Begin_Macro(source); {; auto fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();; }; End_Macro. #### Case 3: inline expression using a user defined CLING function by name. ~~~~{.cpp}; Double_t myFunc(double x) { return x+sin(x); }; ....; auto fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();; ~~~~. \anchor F2; ### 2 - Expression using variable x with parameters. #### Case 1: inline expression using standard C++ functions/operators. * Example a:. ~~~~{.cpp}; auto fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);; ~~~~. This creates a function of variable x with 2 parameters. The parameters must be initialized via:. ~~~~{.cpp}; fa->SetParameter(0,value_first_parameter);; fa->SetParameter(1,value_second_parameter);; ~~~~. Parameters may be given a name:. ~~~~{.cpp}; fa",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1568,Modifiability,variab,variable,1568,"ters](\ref F1); 2. [Expression using variable x with parameters](\ref F2); 3. [Lambda Expression with variable x and parameters](\ref F3); 4. [A general C function with parameters](\ref F4); 5. [A general C++ function object (functor) with parameters](\ref F5); 6. [A member function with parameters of a general C++ class](\ref F6). \anchor F1; ### 1 - Expression using variable x and no parameters. #### Case 1: inline expression using standard C++ functions/operators. Begin_Macro(source); {; auto fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();; }; End_Macro. #### Case 2: inline expression using a ROOT function (e.g. from TMath) without parameters. Begin_Macro(source); {; auto fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();; }; End_Macro. #### Case 3: inline expression using a user defined CLING function by name. ~~~~{.cpp}; Double_t myFunc(double x) { return x+sin(x); }; ....; auto fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();; ~~~~. \anchor F2; ### 2 - Expression using variable x with parameters. #### Case 1: inline expression using standard C++ functions/operators. * Example a:. ~~~~{.cpp}; auto fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);; ~~~~. This creates a function of variable x with 2 parameters. The parameters must be initialized via:. ~~~~{.cpp}; fa->SetParameter(0,value_first_parameter);; fa->SetParameter(1,value_second_parameter);; ~~~~. Parameters may be given a name:. ~~~~{.cpp}; fa->SetParName(0,""Constant"");; ~~~~. * Example b:. ~~~~{.cpp}; auto fb = new TF1(""fb"",""gaus(0)*expo(3)"",0,10);; ~~~~. ``gaus(0)`` is a substitute for ``[0]*exp(-0.5*((x-[1])/[2])**2)`` and ``(0)`` means start numbering parameters at ``0``. ``expo(3)`` is a substitute for ``exp([3]+[4]*x)``. #### Case 2: inline expression using TMath functions with parameters. Begin_Macro(source); {; auto fb2 = new TF1(""fa3"",""TMath::Landau(x,[0],[1],0)"",-5,10);; fb2->SetParameters(0.2,1.3);; fb2->Draw();; }; End_Macro. \anchor F3; ### 3 - A lambda expression with variables an",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1776,Modifiability,variab,variable,1776,"ion object (functor) with parameters](\ref F5); 6. [A member function with parameters of a general C++ class](\ref F6). \anchor F1; ### 1 - Expression using variable x and no parameters. #### Case 1: inline expression using standard C++ functions/operators. Begin_Macro(source); {; auto fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();; }; End_Macro. #### Case 2: inline expression using a ROOT function (e.g. from TMath) without parameters. Begin_Macro(source); {; auto fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();; }; End_Macro. #### Case 3: inline expression using a user defined CLING function by name. ~~~~{.cpp}; Double_t myFunc(double x) { return x+sin(x); }; ....; auto fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();; ~~~~. \anchor F2; ### 2 - Expression using variable x with parameters. #### Case 1: inline expression using standard C++ functions/operators. * Example a:. ~~~~{.cpp}; auto fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);; ~~~~. This creates a function of variable x with 2 parameters. The parameters must be initialized via:. ~~~~{.cpp}; fa->SetParameter(0,value_first_parameter);; fa->SetParameter(1,value_second_parameter);; ~~~~. Parameters may be given a name:. ~~~~{.cpp}; fa->SetParName(0,""Constant"");; ~~~~. * Example b:. ~~~~{.cpp}; auto fb = new TF1(""fb"",""gaus(0)*expo(3)"",0,10);; ~~~~. ``gaus(0)`` is a substitute for ``[0]*exp(-0.5*((x-[1])/[2])**2)`` and ``(0)`` means start numbering parameters at ``0``. ``expo(3)`` is a substitute for ``exp([3]+[4]*x)``. #### Case 2: inline expression using TMath functions with parameters. Begin_Macro(source); {; auto fb2 = new TF1(""fa3"",""TMath::Landau(x,[0],[1],0)"",-5,10);; fb2->SetParameters(0.2,1.3);; fb2->Draw();; }; End_Macro. \anchor F3; ### 3 - A lambda expression with variables and parameters. \since **6.00/00:**; TF1 supports using lambda expressions in the formula. This allows, by using a full C++ syntax the full power of lambda; functions and still maintain the capability of storing the ",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:2551,Modifiability,variab,variables,2551,"2; ### 2 - Expression using variable x with parameters. #### Case 1: inline expression using standard C++ functions/operators. * Example a:. ~~~~{.cpp}; auto fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);; ~~~~. This creates a function of variable x with 2 parameters. The parameters must be initialized via:. ~~~~{.cpp}; fa->SetParameter(0,value_first_parameter);; fa->SetParameter(1,value_second_parameter);; ~~~~. Parameters may be given a name:. ~~~~{.cpp}; fa->SetParName(0,""Constant"");; ~~~~. * Example b:. ~~~~{.cpp}; auto fb = new TF1(""fb"",""gaus(0)*expo(3)"",0,10);; ~~~~. ``gaus(0)`` is a substitute for ``[0]*exp(-0.5*((x-[1])/[2])**2)`` and ``(0)`` means start numbering parameters at ``0``. ``expo(3)`` is a substitute for ``exp([3]+[4]*x)``. #### Case 2: inline expression using TMath functions with parameters. Begin_Macro(source); {; auto fb2 = new TF1(""fa3"",""TMath::Landau(x,[0],[1],0)"",-5,10);; fb2->SetParameters(0.2,1.3);; fb2->Draw();; }; End_Macro. \anchor F3; ### 3 - A lambda expression with variables and parameters. \since **6.00/00:**; TF1 supports using lambda expressions in the formula. This allows, by using a full C++ syntax the full power of lambda; functions and still maintain the capability of storing the function in a file which cannot be done with; function pointer or lambda written not as expression, but as code (see items below). Example on how using lambda to define a sum of two functions.; Note that is necessary to provide the number of parameters. ~~~~{.cpp}; TF1 f1(""f1"",""sin(x)"",0,10);; TF1 f2(""f2"",""cos(x)"",0,10);; TF1 fsum(""f1"",""[&](double *x, double *p){ return p[0]*f1(x) + p[1]*f2(x); }"",0,10,2);; ~~~~. \anchor F4; ### 4 - A general C function with parameters. Consider the macro myfunc.C below:. ~~~~{.cpp}; // Macro myfunc.C; Double_t myfunction(Double_t *x, Double_t *par); {; Float_t xx =x[0];; Double_t f = TMath::Abs(par[0]*sin(par[1]*xx)/xx);; return f;; }; void myfunc(); {; auto f1 = new TF1(""myfunc"",myfunction,0,10,2);; f1->SetParameters(2",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:3649,Testability,test,test,3649,"s and parameters. \since **6.00/00:**; TF1 supports using lambda expressions in the formula. This allows, by using a full C++ syntax the full power of lambda; functions and still maintain the capability of storing the function in a file which cannot be done with; function pointer or lambda written not as expression, but as code (see items below). Example on how using lambda to define a sum of two functions.; Note that is necessary to provide the number of parameters. ~~~~{.cpp}; TF1 f1(""f1"",""sin(x)"",0,10);; TF1 f2(""f2"",""cos(x)"",0,10);; TF1 fsum(""f1"",""[&](double *x, double *p){ return p[0]*f1(x) + p[1]*f2(x); }"",0,10,2);; ~~~~. \anchor F4; ### 4 - A general C function with parameters. Consider the macro myfunc.C below:. ~~~~{.cpp}; // Macro myfunc.C; Double_t myfunction(Double_t *x, Double_t *par); {; Float_t xx =x[0];; Double_t f = TMath::Abs(par[0]*sin(par[1]*xx)/xx);; return f;; }; void myfunc(); {; auto f1 = new TF1(""myfunc"",myfunction,0,10,2);; f1->SetParameters(2,1);; f1->SetParNames(""constant"",""coefficient"");; f1->Draw();; }; void myfit(); {; auto h1 = new TH1F(""h1"",""test"",100,0,10);; h1->FillRandom(""myfunc"",20000);; TF1 *f1 = (TF1 *)gROOT->GetFunction(""myfunc"");; f1->SetParameters(800,1);; h1->Fit(""myfunc"");; }; ~~~~. In an interactive session you can do:. ~~~~; Root > .L myfunc.C; Root > myfunc();; Root > myfit();; ~~~~. TF1 objects can reference other TF1 objects of type A or B defined above. This excludes CLing or compiled functions. However, there is a restriction. A function cannot reference a basic function if the basic function is a polynomial polN. Example:. ~~~~{.cpp}; {; auto fcos = new TF1 (""fcos"", ""[0]*cos(x)"", 0., 10.);; fcos->SetParNames( ""cos"");; fcos->SetParameter( 0, 1.1);. auto fsin = new TF1 (""fsin"", ""[0]*sin(x)"", 0., 10.);; fsin->SetParNames( ""sin"");; fsin->SetParameter( 0, 2.1);. auto fsincos = new TF1 (""fsc"", ""fcos+fsin"");. auto fs2 = new TF1 (""fs2"", ""fsc+fsc"");; }; ~~~~. \anchor F5; ### 5 - A general C++ function object (functor) with pa",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:274,Usability,simpl,simple,274,"////////////////////////////////////////////////////////////////////////////////; /** \class TF1; \ingroup Functions; \brief 1-Dim function class. ## TF1: 1-Dim function class. A TF1 object is a 1-Dim function defined between a lower and upper limit.; The function may be a simple function based on a TFormula expression or a precompiled user function.; The function may have associated parameters.; TF1 graphics function is via the TH1 and TGraph drawing functions. The following types of functions can be created:. 1. [Expression using variable x and no parameters](\ref F1); 2. [Expression using variable x with parameters](\ref F2); 3. [Lambda Expression with variable x and parameters](\ref F3); 4. [A general C function with parameters](\ref F4); 5. [A general C++ function object (functor) with parameters](\ref F5); 6. [A member function with parameters of a general C++ class](\ref F6). \anchor F1; ### 1 - Expression using variable x and no parameters. #### Case 1: inline expression using standard C++ functions/operators. Begin_Macro(source); {; auto fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();; }; End_Macro. #### Case 2: inline expression using a ROOT function (e.g. from TMath) without parameters. Begin_Macro(source); {; auto fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();; }; End_Macro. #### Case 3: inline expression using a user defined CLING function by name. ~~~~{.cpp}; Double_t myFunc(double x) { return x+sin(x); }; ....; auto fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();; ~~~~. \anchor F2; ### 2 - Expression using variable x with parameters. #### Case 1: inline expression using standard C++ functions/operators. * Example a:. ~~~~{.cpp}; auto fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);; ~~~~. This creates a function of variable x with 2 parameters. The parameters must be initialized via:. ~~~~{.cpp}; fa->SetParameter(0,value_first_parameter);; fa->SetParameter(1,value_second_parameter);; ~~~~. Parameters may be given a name:. ~~~~{.cpp}; fa",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:22,Modifiability,extend,extend,22,"// (note: may want to extend this in the future?)",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:22,Usability,simpl,simply,22,"// or if no constant, simply copy parameters from function2",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:22,Modifiability,extend,extend,22,"// (note: may want to extend functionality in the future)",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:3,Modifiability,inherit,inherit,3,"// inherit default parameters from normSum; // Parameter names",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:177,Availability,avail,available,177,"////////////////////////////////////////////////////////////////////////////////; /// Same constructor as above (for TFormula based function) but passing an option strings; /// available options; /// VEC - vectorize the formula expressions (not possible for lambda based expressions); /// NL - function is not stores in the global list of functions; /// GL - function will be always stored in the global list of functions ,; /// independently of the global setting of TF1::DefaultAddToGlobalList; ///////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:648,Integrability,interface,interface,648,"////////////////////////////////////////////////////////////////////////////////; /// Constructor using a pointer to a real function.; ///; /// \param[in] name object name; /// \param[in] fcn pointer to function; /// \param[in] xmin,xmax x axis limits; /// \param[in] npar is the number of free parameters used by the function; /// \param[in] ndim number of dimensions; /// \param[in] addToGlobList boolean marking if it should be added to global list; ///; /// This constructor creates a function of type C when invoked; /// with the normal C++ compiler.; ///; /// see test program test/stress.cxx (function stress1) for an example.; /// note the interface with an intermediate pointer.; ///; /// \warning A function created with this constructor cannot be Cloned.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:570,Testability,test,test,570,"////////////////////////////////////////////////////////////////////////////////; /// Constructor using a pointer to a real function.; ///; /// \param[in] name object name; /// \param[in] fcn pointer to function; /// \param[in] xmin,xmax x axis limits; /// \param[in] npar is the number of free parameters used by the function; /// \param[in] ndim number of dimensions; /// \param[in] addToGlobList boolean marking if it should be added to global list; ///; /// This constructor creates a function of type C when invoked; /// with the normal C++ compiler.; ///; /// see test program test/stress.cxx (function stress1) for an example.; /// note the interface with an intermediate pointer.; ///; /// \warning A function created with this constructor cannot be Cloned.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:583,Testability,test,test,583,"////////////////////////////////////////////////////////////////////////////////; /// Constructor using a pointer to a real function.; ///; /// \param[in] name object name; /// \param[in] fcn pointer to function; /// \param[in] xmin,xmax x axis limits; /// \param[in] npar is the number of free parameters used by the function; /// \param[in] ndim number of dimensions; /// \param[in] addToGlobList boolean marking if it should be added to global list; ///; /// This constructor creates a function of type C when invoked; /// with the normal C++ compiler.; ///; /// see test program test/stress.cxx (function stress1) for an example.; /// note the interface with an intermediate pointer.; ///; /// \warning A function created with this constructor cannot be Cloned.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:654,Integrability,interface,interface,654,"////////////////////////////////////////////////////////////////////////////////; /// Constructor using a pointer to (const) real function.; ///; /// \param[in] name object name; /// \param[in] fcn pointer to function; /// \param[in] xmin,xmax x axis limits; /// \param[in] npar is the number of free parameters used by the function; /// \param[in] ndim number of dimensions; /// \param[in] addToGlobList boolean marking if it should be added to global list; ///; /// This constructor creates a function of type C when invoked; /// with the normal C++ compiler.; ///; /// see test program test/stress.cxx (function stress1) for an example.; /// note the interface with an intermediate pointer.; ///; /// \warning A function created with this constructor cannot be Cloned.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:576,Testability,test,test,576,"////////////////////////////////////////////////////////////////////////////////; /// Constructor using a pointer to (const) real function.; ///; /// \param[in] name object name; /// \param[in] fcn pointer to function; /// \param[in] xmin,xmax x axis limits; /// \param[in] npar is the number of free parameters used by the function; /// \param[in] ndim number of dimensions; /// \param[in] addToGlobList boolean marking if it should be added to global list; ///; /// This constructor creates a function of type C when invoked; /// with the normal C++ compiler.; ///; /// see test program test/stress.cxx (function stress1) for an example.; /// note the interface with an intermediate pointer.; ///; /// \warning A function created with this constructor cannot be Cloned.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:589,Testability,test,test,589,"////////////////////////////////////////////////////////////////////////////////; /// Constructor using a pointer to (const) real function.; ///; /// \param[in] name object name; /// \param[in] fcn pointer to function; /// \param[in] xmin,xmax x axis limits; /// \param[in] npar is the number of free parameters used by the function; /// \param[in] ndim number of dimensions; /// \param[in] addToGlobList boolean marking if it should be added to global list; ///; /// This constructor creates a function of type C when invoked; /// with the normal C++ compiler.; ///; /// see test program test/stress.cxx (function stress1) for an example.; /// note the interface with an intermediate pointer.; ///; /// \warning A function created with this constructor cannot be Cloned.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:175,Modifiability,parameteriz,parameterized,175,"////////////////////////////////////////////////////////////////////////////////; /// Constructor using the Functor class.; ///; /// \param[in] name object name; /// \param f parameterized functor; /// \param xmin and; /// \param xmax define the plotting range of the function; /// \param[in] npar is the number of free parameters used by the function; /// \param[in] ndim number of dimensions; /// \param[in] addToGlobList boolean marking if it should be added to global list; ///; /// This constructor can be used only in compiled code; ///; /// WARNING! A function created with this constructor cannot be Cloned.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:107,Safety,avoid,avoid,107,"////////////////////////////////////////////////////////////////////////////////; /// Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ); /// After having called this static method, all the functions created afterwards will follow the; /// desired behaviour.; ///; /// By default the functions are added automatically; /// It returns the previous status (true if the functions are added automatically)",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:209,Security,sanitiz,sanitized,209,"////////////////////////////////////////////////////////////////////////////////; /// Helper functions for NSUM parsing; // Defines the formula that a given term uses, if not already defined,; // and appends ""sanitized"" formula to `fullFormula` string",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:67,Security,sanitiz,sanitized,67,"// `originalFunc` is the real formula and `cleanedFunc` is the; // sanitized version that will not confuse the TF1NormSum; // constructor",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:10,Security,sanitiz,sanitized,10,"// append sanitized term to `fullFormula`",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:131,Performance,cache,cached,131,"////////////////////////////////////////////////////////////////////////////////; /// Copy this F1 to a new F1.; /// Note that the cached integral with its related arrays are not copied; /// (they are also set as transient data members)",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1062,Availability,error,error,1062,"////////////////////////////////////////////////////////////////////////////////; /// Returns the first derivative of the function at point x,; /// computed by Richardson's extrapolation method (use 2 derivative estimates; /// to compute a third, more accurate estimation); /// first, derivatives with steps h and h/2 are computed by central difference formulas; /// \f[; /// D(h) = \frac{f(x+h) - f(x-h)}{2h}; /// \f]; /// the final estimate; /// \f[; /// D = \frac{4D(h/2) - D(h)}{3}; /// \f]; /// ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; ///; /// if the argument params is null, the current function parameters are used,; /// otherwise the parameters in params are used.; ///; /// the argument eps may be specified to control the step size (precision).; /// the step size is taken as eps*(xmax-xmin).; /// the default value (0.001) should be good enough for the vast majority; /// of functions. Give a smaller value if your function has many changes; /// of the second derivative in the function range.; ///; /// Getting the error via TF1::DerivativeError:; /// (total error = roundoff error + interpolation error); /// the estimate of the roundoff error is taken as follows:; /// \f[; /// err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; /// \f]; /// where k is the double precision, ai are coefficients used in; /// central difference formulas; /// interpolation error is decreased by making the step size h smaller.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1106,Availability,error,error,1106,"////////////////////////////////////////////////////////////////////////////////; /// Returns the first derivative of the function at point x,; /// computed by Richardson's extrapolation method (use 2 derivative estimates; /// to compute a third, more accurate estimation); /// first, derivatives with steps h and h/2 are computed by central difference formulas; /// \f[; /// D(h) = \frac{f(x+h) - f(x-h)}{2h}; /// \f]; /// the final estimate; /// \f[; /// D = \frac{4D(h/2) - D(h)}{3}; /// \f]; /// ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; ///; /// if the argument params is null, the current function parameters are used,; /// otherwise the parameters in params are used.; ///; /// the argument eps may be specified to control the step size (precision).; /// the step size is taken as eps*(xmax-xmin).; /// the default value (0.001) should be good enough for the vast majority; /// of functions. Give a smaller value if your function has many changes; /// of the second derivative in the function range.; ///; /// Getting the error via TF1::DerivativeError:; /// (total error = roundoff error + interpolation error); /// the estimate of the roundoff error is taken as follows:; /// \f[; /// err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; /// \f]; /// where k is the double precision, ai are coefficients used in; /// central difference formulas; /// interpolation error is decreased by making the step size h smaller.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1123,Availability,error,error,1123,"////////////////////////////////////////////////////////////////////////////////; /// Returns the first derivative of the function at point x,; /// computed by Richardson's extrapolation method (use 2 derivative estimates; /// to compute a third, more accurate estimation); /// first, derivatives with steps h and h/2 are computed by central difference formulas; /// \f[; /// D(h) = \frac{f(x+h) - f(x-h)}{2h}; /// \f]; /// the final estimate; /// \f[; /// D = \frac{4D(h/2) - D(h)}{3}; /// \f]; /// ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; ///; /// if the argument params is null, the current function parameters are used,; /// otherwise the parameters in params are used.; ///; /// the argument eps may be specified to control the step size (precision).; /// the step size is taken as eps*(xmax-xmin).; /// the default value (0.001) should be good enough for the vast majority; /// of functions. Give a smaller value if your function has many changes; /// of the second derivative in the function range.; ///; /// Getting the error via TF1::DerivativeError:; /// (total error = roundoff error + interpolation error); /// the estimate of the roundoff error is taken as follows:; /// \f[; /// err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; /// \f]; /// where k is the double precision, ai are coefficients used in; /// central difference formulas; /// interpolation error is decreased by making the step size h smaller.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1145,Availability,error,error,1145,"////////////////////////////////////////////////////////////////////////////////; /// Returns the first derivative of the function at point x,; /// computed by Richardson's extrapolation method (use 2 derivative estimates; /// to compute a third, more accurate estimation); /// first, derivatives with steps h and h/2 are computed by central difference formulas; /// \f[; /// D(h) = \frac{f(x+h) - f(x-h)}{2h}; /// \f]; /// the final estimate; /// \f[; /// D = \frac{4D(h/2) - D(h)}{3}; /// \f]; /// ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; ///; /// if the argument params is null, the current function parameters are used,; /// otherwise the parameters in params are used.; ///; /// the argument eps may be specified to control the step size (precision).; /// the step size is taken as eps*(xmax-xmin).; /// the default value (0.001) should be good enough for the vast majority; /// of functions. Give a smaller value if your function has many changes; /// of the second derivative in the function range.; ///; /// Getting the error via TF1::DerivativeError:; /// (total error = roundoff error + interpolation error); /// the estimate of the roundoff error is taken as follows:; /// \f[; /// err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; /// \f]; /// where k is the double precision, ai are coefficients used in; /// central difference formulas; /// interpolation error is decreased by making the step size h smaller.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1186,Availability,error,error,1186,"////////////////////////////////////////////////////////////////////////////////; /// Returns the first derivative of the function at point x,; /// computed by Richardson's extrapolation method (use 2 derivative estimates; /// to compute a third, more accurate estimation); /// first, derivatives with steps h and h/2 are computed by central difference formulas; /// \f[; /// D(h) = \frac{f(x+h) - f(x-h)}{2h}; /// \f]; /// the final estimate; /// \f[; /// D = \frac{4D(h/2) - D(h)}{3}; /// \f]; /// ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; ///; /// if the argument params is null, the current function parameters are used,; /// otherwise the parameters in params are used.; ///; /// the argument eps may be specified to control the step size (precision).; /// the step size is taken as eps*(xmax-xmin).; /// the default value (0.001) should be good enough for the vast majority; /// of functions. Give a smaller value if your function has many changes; /// of the second derivative in the function range.; ///; /// Getting the error via TF1::DerivativeError:; /// (total error = roundoff error + interpolation error); /// the estimate of the roundoff error is taken as follows:; /// \f[; /// err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; /// \f]; /// where k is the double precision, ai are coefficients used in; /// central difference formulas; /// interpolation error is decreased by making the step size h smaller.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1413,Availability,error,error,1413,"////////////////////////////////////////////////////////////////////////////////; /// Returns the first derivative of the function at point x,; /// computed by Richardson's extrapolation method (use 2 derivative estimates; /// to compute a third, more accurate estimation); /// first, derivatives with steps h and h/2 are computed by central difference formulas; /// \f[; /// D(h) = \frac{f(x+h) - f(x-h)}{2h}; /// \f]; /// the final estimate; /// \f[; /// D = \frac{4D(h/2) - D(h)}{3}; /// \f]; /// ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; ///; /// if the argument params is null, the current function parameters are used,; /// otherwise the parameters in params are used.; ///; /// the argument eps may be specified to control the step size (precision).; /// the step size is taken as eps*(xmax-xmin).; /// the default value (0.001) should be good enough for the vast majority; /// of functions. Give a smaller value if your function has many changes; /// of the second derivative in the function range.; ///; /// Getting the error via TF1::DerivativeError:; /// (total error = roundoff error + interpolation error); /// the estimate of the roundoff error is taken as follows:; /// \f[; /// err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; /// \f]; /// where k is the double precision, ai are coefficients used in; /// central difference formulas; /// interpolation error is decreased by making the step size h smaller.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:51,Integrability,wrap,wrapper,51,"// no need to set parameters used a non-parametric wrapper to avoid allocating; // an array with parameter values",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:62,Safety,avoid,avoid,62,"// no need to set parameters used a non-parametric wrapper to avoid allocating; // an array with parameter values",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1074,Availability,error,error,1074,"////////////////////////////////////////////////////////////////////////////////; /// Returns the second derivative of the function at point x,; /// computed by Richardson's extrapolation method (use 2 derivative estimates; /// to compute a third, more accurate estimation); /// first, derivatives with steps h and h/2 are computed by central difference formulas; /// \f[; /// D(h) = \frac{f(x+h) - 2f(x) + f(x-h)}{h^{2}}; /// \f]; /// the final estimate; /// \f[; /// D = \frac{4D(h/2) - D(h)}{3}; /// \f]; /// ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; ///; /// if the argument params is null, the current function parameters are used,; /// otherwise the parameters in params are used.; ///; /// the argument eps may be specified to control the step size (precision).; /// the step size is taken as eps*(xmax-xmin).; /// the default value (0.001) should be good enough for the vast majority; /// of functions. Give a smaller value if your function has many changes; /// of the second derivative in the function range.; ///; /// Getting the error via TF1::DerivativeError:; /// (total error = roundoff error + interpolation error); /// the estimate of the roundoff error is taken as follows:; /// \f[; /// err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; /// \f]; /// where k is the double precision, ai are coefficients used in; /// central difference formulas; /// interpolation error is decreased by making the step size h smaller.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1118,Availability,error,error,1118,"////////////////////////////////////////////////////////////////////////////////; /// Returns the second derivative of the function at point x,; /// computed by Richardson's extrapolation method (use 2 derivative estimates; /// to compute a third, more accurate estimation); /// first, derivatives with steps h and h/2 are computed by central difference formulas; /// \f[; /// D(h) = \frac{f(x+h) - 2f(x) + f(x-h)}{h^{2}}; /// \f]; /// the final estimate; /// \f[; /// D = \frac{4D(h/2) - D(h)}{3}; /// \f]; /// ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; ///; /// if the argument params is null, the current function parameters are used,; /// otherwise the parameters in params are used.; ///; /// the argument eps may be specified to control the step size (precision).; /// the step size is taken as eps*(xmax-xmin).; /// the default value (0.001) should be good enough for the vast majority; /// of functions. Give a smaller value if your function has many changes; /// of the second derivative in the function range.; ///; /// Getting the error via TF1::DerivativeError:; /// (total error = roundoff error + interpolation error); /// the estimate of the roundoff error is taken as follows:; /// \f[; /// err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; /// \f]; /// where k is the double precision, ai are coefficients used in; /// central difference formulas; /// interpolation error is decreased by making the step size h smaller.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1135,Availability,error,error,1135,"////////////////////////////////////////////////////////////////////////////////; /// Returns the second derivative of the function at point x,; /// computed by Richardson's extrapolation method (use 2 derivative estimates; /// to compute a third, more accurate estimation); /// first, derivatives with steps h and h/2 are computed by central difference formulas; /// \f[; /// D(h) = \frac{f(x+h) - 2f(x) + f(x-h)}{h^{2}}; /// \f]; /// the final estimate; /// \f[; /// D = \frac{4D(h/2) - D(h)}{3}; /// \f]; /// ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; ///; /// if the argument params is null, the current function parameters are used,; /// otherwise the parameters in params are used.; ///; /// the argument eps may be specified to control the step size (precision).; /// the step size is taken as eps*(xmax-xmin).; /// the default value (0.001) should be good enough for the vast majority; /// of functions. Give a smaller value if your function has many changes; /// of the second derivative in the function range.; ///; /// Getting the error via TF1::DerivativeError:; /// (total error = roundoff error + interpolation error); /// the estimate of the roundoff error is taken as follows:; /// \f[; /// err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; /// \f]; /// where k is the double precision, ai are coefficients used in; /// central difference formulas; /// interpolation error is decreased by making the step size h smaller.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1157,Availability,error,error,1157,"////////////////////////////////////////////////////////////////////////////////; /// Returns the second derivative of the function at point x,; /// computed by Richardson's extrapolation method (use 2 derivative estimates; /// to compute a third, more accurate estimation); /// first, derivatives with steps h and h/2 are computed by central difference formulas; /// \f[; /// D(h) = \frac{f(x+h) - 2f(x) + f(x-h)}{h^{2}}; /// \f]; /// the final estimate; /// \f[; /// D = \frac{4D(h/2) - D(h)}{3}; /// \f]; /// ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; ///; /// if the argument params is null, the current function parameters are used,; /// otherwise the parameters in params are used.; ///; /// the argument eps may be specified to control the step size (precision).; /// the step size is taken as eps*(xmax-xmin).; /// the default value (0.001) should be good enough for the vast majority; /// of functions. Give a smaller value if your function has many changes; /// of the second derivative in the function range.; ///; /// Getting the error via TF1::DerivativeError:; /// (total error = roundoff error + interpolation error); /// the estimate of the roundoff error is taken as follows:; /// \f[; /// err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; /// \f]; /// where k is the double precision, ai are coefficients used in; /// central difference formulas; /// interpolation error is decreased by making the step size h smaller.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1198,Availability,error,error,1198,"////////////////////////////////////////////////////////////////////////////////; /// Returns the second derivative of the function at point x,; /// computed by Richardson's extrapolation method (use 2 derivative estimates; /// to compute a third, more accurate estimation); /// first, derivatives with steps h and h/2 are computed by central difference formulas; /// \f[; /// D(h) = \frac{f(x+h) - 2f(x) + f(x-h)}{h^{2}}; /// \f]; /// the final estimate; /// \f[; /// D = \frac{4D(h/2) - D(h)}{3}; /// \f]; /// ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; ///; /// if the argument params is null, the current function parameters are used,; /// otherwise the parameters in params are used.; ///; /// the argument eps may be specified to control the step size (precision).; /// the step size is taken as eps*(xmax-xmin).; /// the default value (0.001) should be good enough for the vast majority; /// of functions. Give a smaller value if your function has many changes; /// of the second derivative in the function range.; ///; /// Getting the error via TF1::DerivativeError:; /// (total error = roundoff error + interpolation error); /// the estimate of the roundoff error is taken as follows:; /// \f[; /// err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; /// \f]; /// where k is the double precision, ai are coefficients used in; /// central difference formulas; /// interpolation error is decreased by making the step size h smaller.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1425,Availability,error,error,1425,"////////////////////////////////////////////////////////////////////////////////; /// Returns the second derivative of the function at point x,; /// computed by Richardson's extrapolation method (use 2 derivative estimates; /// to compute a third, more accurate estimation); /// first, derivatives with steps h and h/2 are computed by central difference formulas; /// \f[; /// D(h) = \frac{f(x+h) - 2f(x) + f(x-h)}{h^{2}}; /// \f]; /// the final estimate; /// \f[; /// D = \frac{4D(h/2) - D(h)}{3}; /// \f]; /// ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; ///; /// if the argument params is null, the current function parameters are used,; /// otherwise the parameters in params are used.; ///; /// the argument eps may be specified to control the step size (precision).; /// the step size is taken as eps*(xmax-xmin).; /// the default value (0.001) should be good enough for the vast majority; /// of functions. Give a smaller value if your function has many changes; /// of the second derivative in the function range.; ///; /// Getting the error via TF1::DerivativeError:; /// (total error = roundoff error + interpolation error); /// the estimate of the roundoff error is taken as follows:; /// \f[; /// err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; /// \f]; /// where k is the double precision, ai are coefficients used in; /// central difference formulas; /// interpolation error is decreased by making the step size h smaller.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:51,Integrability,wrap,wrapper,51,"// no need to set parameters used a non-parametric wrapper to avoid allocating; // an array with parameter values",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:62,Safety,avoid,avoid,62,"// no need to set parameters used a non-parametric wrapper to avoid allocating; // an array with parameter values",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1088,Availability,error,error,1088,"////////////////////////////////////////////////////////////////////////////////; /// Returns the third derivative of the function at point x,; /// computed by Richardson's extrapolation method (use 2 derivative estimates; /// to compute a third, more accurate estimation); /// first, derivatives with steps h and h/2 are computed by central difference formulas; /// \f[; /// D(h) = \frac{f(x+2h) - 2f(x+h) + 2f(x-h) - f(x-2h)}{2h^{3}}; /// \f]; /// the final estimate; /// \f[; /// D = \frac{4D(h/2) - D(h)}{3}; /// \f]; /// ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; ///; /// if the argument params is null, the current function parameters are used,; /// otherwise the parameters in params are used.; ///; /// the argument eps may be specified to control the step size (precision).; /// the step size is taken as eps*(xmax-xmin).; /// the default value (0.001) should be good enough for the vast majority; /// of functions. Give a smaller value if your function has many changes; /// of the second derivative in the function range.; ///; /// Getting the error via TF1::DerivativeError:; /// (total error = roundoff error + interpolation error); /// the estimate of the roundoff error is taken as follows:; /// \f[; /// err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; /// \f]; /// where k is the double precision, ai are coefficients used in; /// central difference formulas; /// interpolation error is decreased by making the step size h smaller.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1132,Availability,error,error,1132,"////////////////////////////////////////////////////////////////////////////////; /// Returns the third derivative of the function at point x,; /// computed by Richardson's extrapolation method (use 2 derivative estimates; /// to compute a third, more accurate estimation); /// first, derivatives with steps h and h/2 are computed by central difference formulas; /// \f[; /// D(h) = \frac{f(x+2h) - 2f(x+h) + 2f(x-h) - f(x-2h)}{2h^{3}}; /// \f]; /// the final estimate; /// \f[; /// D = \frac{4D(h/2) - D(h)}{3}; /// \f]; /// ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; ///; /// if the argument params is null, the current function parameters are used,; /// otherwise the parameters in params are used.; ///; /// the argument eps may be specified to control the step size (precision).; /// the step size is taken as eps*(xmax-xmin).; /// the default value (0.001) should be good enough for the vast majority; /// of functions. Give a smaller value if your function has many changes; /// of the second derivative in the function range.; ///; /// Getting the error via TF1::DerivativeError:; /// (total error = roundoff error + interpolation error); /// the estimate of the roundoff error is taken as follows:; /// \f[; /// err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; /// \f]; /// where k is the double precision, ai are coefficients used in; /// central difference formulas; /// interpolation error is decreased by making the step size h smaller.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1149,Availability,error,error,1149,"////////////////////////////////////////////////////////////////////////////////; /// Returns the third derivative of the function at point x,; /// computed by Richardson's extrapolation method (use 2 derivative estimates; /// to compute a third, more accurate estimation); /// first, derivatives with steps h and h/2 are computed by central difference formulas; /// \f[; /// D(h) = \frac{f(x+2h) - 2f(x+h) + 2f(x-h) - f(x-2h)}{2h^{3}}; /// \f]; /// the final estimate; /// \f[; /// D = \frac{4D(h/2) - D(h)}{3}; /// \f]; /// ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; ///; /// if the argument params is null, the current function parameters are used,; /// otherwise the parameters in params are used.; ///; /// the argument eps may be specified to control the step size (precision).; /// the step size is taken as eps*(xmax-xmin).; /// the default value (0.001) should be good enough for the vast majority; /// of functions. Give a smaller value if your function has many changes; /// of the second derivative in the function range.; ///; /// Getting the error via TF1::DerivativeError:; /// (total error = roundoff error + interpolation error); /// the estimate of the roundoff error is taken as follows:; /// \f[; /// err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; /// \f]; /// where k is the double precision, ai are coefficients used in; /// central difference formulas; /// interpolation error is decreased by making the step size h smaller.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1171,Availability,error,error,1171,"////////////////////////////////////////////////////////////////////////////////; /// Returns the third derivative of the function at point x,; /// computed by Richardson's extrapolation method (use 2 derivative estimates; /// to compute a third, more accurate estimation); /// first, derivatives with steps h and h/2 are computed by central difference formulas; /// \f[; /// D(h) = \frac{f(x+2h) - 2f(x+h) + 2f(x-h) - f(x-2h)}{2h^{3}}; /// \f]; /// the final estimate; /// \f[; /// D = \frac{4D(h/2) - D(h)}{3}; /// \f]; /// ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; ///; /// if the argument params is null, the current function parameters are used,; /// otherwise the parameters in params are used.; ///; /// the argument eps may be specified to control the step size (precision).; /// the step size is taken as eps*(xmax-xmin).; /// the default value (0.001) should be good enough for the vast majority; /// of functions. Give a smaller value if your function has many changes; /// of the second derivative in the function range.; ///; /// Getting the error via TF1::DerivativeError:; /// (total error = roundoff error + interpolation error); /// the estimate of the roundoff error is taken as follows:; /// \f[; /// err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; /// \f]; /// where k is the double precision, ai are coefficients used in; /// central difference formulas; /// interpolation error is decreased by making the step size h smaller.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1212,Availability,error,error,1212,"////////////////////////////////////////////////////////////////////////////////; /// Returns the third derivative of the function at point x,; /// computed by Richardson's extrapolation method (use 2 derivative estimates; /// to compute a third, more accurate estimation); /// first, derivatives with steps h and h/2 are computed by central difference formulas; /// \f[; /// D(h) = \frac{f(x+2h) - 2f(x+h) + 2f(x-h) - f(x-2h)}{2h^{3}}; /// \f]; /// the final estimate; /// \f[; /// D = \frac{4D(h/2) - D(h)}{3}; /// \f]; /// ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; ///; /// if the argument params is null, the current function parameters are used,; /// otherwise the parameters in params are used.; ///; /// the argument eps may be specified to control the step size (precision).; /// the step size is taken as eps*(xmax-xmin).; /// the default value (0.001) should be good enough for the vast majority; /// of functions. Give a smaller value if your function has many changes; /// of the second derivative in the function range.; ///; /// Getting the error via TF1::DerivativeError:; /// (total error = roundoff error + interpolation error); /// the estimate of the roundoff error is taken as follows:; /// \f[; /// err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; /// \f]; /// where k is the double precision, ai are coefficients used in; /// central difference formulas; /// interpolation error is decreased by making the step size h smaller.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1439,Availability,error,error,1439,"////////////////////////////////////////////////////////////////////////////////; /// Returns the third derivative of the function at point x,; /// computed by Richardson's extrapolation method (use 2 derivative estimates; /// to compute a third, more accurate estimation); /// first, derivatives with steps h and h/2 are computed by central difference formulas; /// \f[; /// D(h) = \frac{f(x+2h) - 2f(x+h) + 2f(x-h) - f(x-2h)}{2h^{3}}; /// \f]; /// the final estimate; /// \f[; /// D = \frac{4D(h/2) - D(h)}{3}; /// \f]; /// ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; ///; /// if the argument params is null, the current function parameters are used,; /// otherwise the parameters in params are used.; ///; /// the argument eps may be specified to control the step size (precision).; /// the step size is taken as eps*(xmax-xmin).; /// the default value (0.001) should be good enough for the vast majority; /// of functions. Give a smaller value if your function has many changes; /// of the second derivative in the function range.; ///; /// Getting the error via TF1::DerivativeError:; /// (total error = roundoff error + interpolation error); /// the estimate of the roundoff error is taken as follows:; /// \f[; /// err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; /// \f]; /// where k is the double precision, ai are coefficients used in; /// central difference formulas; /// interpolation error is decreased by making the step size h smaller.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:51,Integrability,wrap,wrapper,51,"// no need to set parameters used a non-parametric wrapper to avoid allocating; // an array with parameter values",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:62,Safety,avoid,avoid,62,"// no need to set parameters used a non-parametric wrapper to avoid allocating; // an array with parameter values",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:116,Availability,error,error,116,"////////////////////////////////////////////////////////////////////////////////; /// Static function returning the error of the last call to the of Derivative's; /// functions",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:278,Modifiability,variab,variables,278,"////////////////////////////////////////////////////////////////////////////////; /// Evaluate this function.; ///; /// Computes the value of this function (general case for a 3-d function); /// at point x,y,z.; /// For a 1-d function give y=0 and z=0; /// The current value of variables x,y,z is passed through x, y and z.; /// The parameters used will be the ones in the array params if params is given; /// otherwise parameters will be taken from the stored data members fParams",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:749,Testability,log,logx,749,"////////////////////////////////////////////////////////////////////////////////; /// Returns the maximum value of the function; ///; /// Method:; /// First, the grid search is used to bracket the maximum; /// with the step size = (xmax-xmin)/fNpx.; /// This way, the step size can be controlled via the SetNpx() function.; /// If the function is unimodal or if its extrema are far apart, setting; /// the fNpx to a small value speeds the algorithm up many times.; /// Then, Brent's method is applied on the bracketed interval; /// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); /// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; /// of iteration of the Brent algorithm; /// If the flag logx is set the grid search is done in log step size; /// This is done automatically if the log scale is set in the current Pad; ///; /// NOTE: see also TF1::GetMaximumX and TF1::GetX",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:788,Testability,log,log,788,"////////////////////////////////////////////////////////////////////////////////; /// Returns the maximum value of the function; ///; /// Method:; /// First, the grid search is used to bracket the maximum; /// with the step size = (xmax-xmin)/fNpx.; /// This way, the step size can be controlled via the SetNpx() function.; /// If the function is unimodal or if its extrema are far apart, setting; /// the fNpx to a small value speeds the algorithm up many times.; /// Then, Brent's method is applied on the bracketed interval; /// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); /// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; /// of iteration of the Brent algorithm; /// If the flag logx is set the grid search is done in log step size; /// This is done automatically if the log scale is set in the current Pad; ///; /// NOTE: see also TF1::GetMaximumX and TF1::GetX",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:841,Testability,log,log,841,"////////////////////////////////////////////////////////////////////////////////; /// Returns the maximum value of the function; ///; /// Method:; /// First, the grid search is used to bracket the maximum; /// with the step size = (xmax-xmin)/fNpx.; /// This way, the step size can be controlled via the SetNpx() function.; /// If the function is unimodal or if its extrema are far apart, setting; /// the fNpx to a small value speeds the algorithm up many times.; /// Then, Brent's method is applied on the bracketed interval; /// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); /// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; /// of iteration of the Brent algorithm; /// If the flag logx is set the grid search is done in log step size; /// This is done automatically if the log scale is set in the current Pad; ///; /// NOTE: see also TF1::GetMaximumX and TF1::GetX",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:778,Testability,log,logx,778,"////////////////////////////////////////////////////////////////////////////////; /// Returns the X value corresponding to the maximum value of the function; ///; /// Method:; /// First, the grid search is used to bracket the maximum; /// with the step size = (xmax-xmin)/fNpx.; /// This way, the step size can be controlled via the SetNpx() function.; /// If the function is unimodal or if its extrema are far apart, setting; /// the fNpx to a small value speeds the algorithm up many times.; /// Then, Brent's method is applied on the bracketed interval; /// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); /// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; /// of iteration of the Brent algorithm; /// If the flag logx is set the grid search is done in log step size; /// This is done automatically if the log scale is set in the current Pad; ///; /// NOTE: see also TF1::GetX",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:817,Testability,log,log,817,"////////////////////////////////////////////////////////////////////////////////; /// Returns the X value corresponding to the maximum value of the function; ///; /// Method:; /// First, the grid search is used to bracket the maximum; /// with the step size = (xmax-xmin)/fNpx.; /// This way, the step size can be controlled via the SetNpx() function.; /// If the function is unimodal or if its extrema are far apart, setting; /// the fNpx to a small value speeds the algorithm up many times.; /// Then, Brent's method is applied on the bracketed interval; /// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); /// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; /// of iteration of the Brent algorithm; /// If the flag logx is set the grid search is done in log step size; /// This is done automatically if the log scale is set in the current Pad; ///; /// NOTE: see also TF1::GetX",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:870,Testability,log,log,870,"////////////////////////////////////////////////////////////////////////////////; /// Returns the X value corresponding to the maximum value of the function; ///; /// Method:; /// First, the grid search is used to bracket the maximum; /// with the step size = (xmax-xmin)/fNpx.; /// This way, the step size can be controlled via the SetNpx() function.; /// If the function is unimodal or if its extrema are far apart, setting; /// the fNpx to a small value speeds the algorithm up many times.; /// Then, Brent's method is applied on the bracketed interval; /// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); /// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; /// of iteration of the Brent algorithm; /// If the flag logx is set the grid search is done in log step size; /// This is done automatically if the log scale is set in the current Pad; ///; /// NOTE: see also TF1::GetX",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:778,Testability,log,logx,778,"////////////////////////////////////////////////////////////////////////////////; /// Returns the minimum value of the function on the (xmin, xmax) interval; ///; /// Method:; /// First, the grid search is used to bracket the maximum; /// with the step size = (xmax-xmin)/fNpx. This way, the step size; /// can be controlled via the SetNpx() function. If the function is; /// unimodal or if its extrema are far apart, setting the fNpx to; /// a small value speeds the algorithm up many times.; /// Then, Brent's method is applied on the bracketed interval; /// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); /// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; /// of iteration of the Brent algorithm; /// If the flag logx is set the grid search is done in log step size; /// This is done automatically if the log scale is set in the current Pad; ///; /// NOTE: see also TF1::GetMaximumX and TF1::GetX",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:817,Testability,log,log,817,"////////////////////////////////////////////////////////////////////////////////; /// Returns the minimum value of the function on the (xmin, xmax) interval; ///; /// Method:; /// First, the grid search is used to bracket the maximum; /// with the step size = (xmax-xmin)/fNpx. This way, the step size; /// can be controlled via the SetNpx() function. If the function is; /// unimodal or if its extrema are far apart, setting the fNpx to; /// a small value speeds the algorithm up many times.; /// Then, Brent's method is applied on the bracketed interval; /// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); /// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; /// of iteration of the Brent algorithm; /// If the flag logx is set the grid search is done in log step size; /// This is done automatically if the log scale is set in the current Pad; ///; /// NOTE: see also TF1::GetMaximumX and TF1::GetX",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:870,Testability,log,log,870,"////////////////////////////////////////////////////////////////////////////////; /// Returns the minimum value of the function on the (xmin, xmax) interval; ///; /// Method:; /// First, the grid search is used to bracket the maximum; /// with the step size = (xmax-xmin)/fNpx. This way, the step size; /// can be controlled via the SetNpx() function. If the function is; /// unimodal or if its extrema are far apart, setting the fNpx to; /// a small value speeds the algorithm up many times.; /// Then, Brent's method is applied on the bracketed interval; /// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); /// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; /// of iteration of the Brent algorithm; /// If the flag logx is set the grid search is done in log step size; /// This is done automatically if the log scale is set in the current Pad; ///; /// NOTE: see also TF1::GetMaximumX and TF1::GetX",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:264,Integrability,interface,interface,264,"////////////////////////////////////////////////////////////////////////////////; /// Find the minimum of a function of whatever dimension.; /// While GetMinimum works only for 1D function , GetMinimumNDim works for all dimensions; /// since it uses the minimizer interface; /// vector x at beginning will contained the initial point, on exit will contain the result",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:10,Integrability,wrap,wrapper,10,"// create wrapper class from TF1 (cannot use Functor, t.b.i.)",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:46,Integrability,depend,depending,46,"// use range for step size or give some value depending on x if range is not defined",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:7,Modifiability,variab,variable,7,"// set variable names",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:812,Testability,log,logx,812,"////////////////////////////////////////////////////////////////////////////////; /// Returns the X value corresponding to the minimum value of the function; /// on the (xmin, xmax) interval; ///; /// Method:; /// First, the grid search is used to bracket the maximum; /// with the step size = (xmax-xmin)/fNpx. This way, the step size; /// can be controlled via the SetNpx() function. If the function is; /// unimodal or if its extrema are far apart, setting the fNpx to; /// a small value speeds the algorithm up many times.; /// Then, Brent's method is applied on the bracketed interval; /// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); /// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; /// of iteration of the Brent algorithm; /// If the flag logx is set the grid search is done in log step size; /// This is done automatically if the log scale is set in the current Pad; ///; /// NOTE: see also TF1::GetX",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:851,Testability,log,log,851,"////////////////////////////////////////////////////////////////////////////////; /// Returns the X value corresponding to the minimum value of the function; /// on the (xmin, xmax) interval; ///; /// Method:; /// First, the grid search is used to bracket the maximum; /// with the step size = (xmax-xmin)/fNpx. This way, the step size; /// can be controlled via the SetNpx() function. If the function is; /// unimodal or if its extrema are far apart, setting the fNpx to; /// a small value speeds the algorithm up many times.; /// Then, Brent's method is applied on the bracketed interval; /// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); /// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; /// of iteration of the Brent algorithm; /// If the flag logx is set the grid search is done in log step size; /// This is done automatically if the log scale is set in the current Pad; ///; /// NOTE: see also TF1::GetX",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:904,Testability,log,log,904,"////////////////////////////////////////////////////////////////////////////////; /// Returns the X value corresponding to the minimum value of the function; /// on the (xmin, xmax) interval; ///; /// Method:; /// First, the grid search is used to bracket the maximum; /// with the step size = (xmax-xmin)/fNpx. This way, the step size; /// can be controlled via the SetNpx() function. If the function is; /// unimodal or if its extrema are far apart, setting the fNpx to; /// a small value speeds the algorithm up many times.; /// Then, Brent's method is applied on the bracketed interval; /// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); /// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; /// of iteration of the Brent algorithm; /// If the flag logx is set the grid search is done in log step size; /// This is done automatically if the log scale is set in the current Pad; ///; /// NOTE: see also TF1::GetX",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:957,Testability,log,logx,957,"////////////////////////////////////////////////////////////////////////////////; /// Returns the X value corresponding to the function value fy for (xmin<x<xmax).; /// in other words it can find the roots of the function when fy=0 and successive calls; /// by changing the next call to [xmin+eps,xmax] where xmin is the previous root.; ///; /// Method:; /// First, the grid search is used to bracket the maximum; /// with the step size = (xmax-xmin)/fNpx. This way, the step size; /// can be controlled via the SetNpx() function. If the function is; /// unimodal or if its extrema are far apart, setting the fNpx to; /// a small value speeds the algorithm up many times.; /// Then, Brent's method is applied on the bracketed interval; /// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); /// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; /// of iteration of the Brent algorithm; /// If the flag logx is set the grid search is done in log step size; /// This is done automatically if the log scale is set in the current Pad; ///; /// NOTE: see also TF1::GetMaximumX, TF1::GetMinimumX",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:996,Testability,log,log,996,"////////////////////////////////////////////////////////////////////////////////; /// Returns the X value corresponding to the function value fy for (xmin<x<xmax).; /// in other words it can find the roots of the function when fy=0 and successive calls; /// by changing the next call to [xmin+eps,xmax] where xmin is the previous root.; ///; /// Method:; /// First, the grid search is used to bracket the maximum; /// with the step size = (xmax-xmin)/fNpx. This way, the step size; /// can be controlled via the SetNpx() function. If the function is; /// unimodal or if its extrema are far apart, setting the fNpx to; /// a small value speeds the algorithm up many times.; /// Then, Brent's method is applied on the bracketed interval; /// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); /// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; /// of iteration of the Brent algorithm; /// If the flag logx is set the grid search is done in log step size; /// This is done automatically if the log scale is set in the current Pad; ///; /// NOTE: see also TF1::GetMaximumX, TF1::GetMinimumX",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1049,Testability,log,log,1049,"////////////////////////////////////////////////////////////////////////////////; /// Returns the X value corresponding to the function value fy for (xmin<x<xmax).; /// in other words it can find the roots of the function when fy=0 and successive calls; /// by changing the next call to [xmin+eps,xmax] where xmin is the previous root.; ///; /// Method:; /// First, the grid search is used to bracket the maximum; /// with the step size = (xmax-xmin)/fNpx. This way, the step size; /// can be controlled via the SetNpx() function. If the function is; /// unimodal or if its extrema are far apart, setting the fNpx to; /// a small value speeds the algorithm up many times.; /// Then, Brent's method is applied on the bracketed interval; /// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); /// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; /// of iteration of the Brent algorithm; /// If the flag logx is set the grid search is done in log step size; /// This is done automatically if the log scale is set in the current Pad; ///; /// NOTE: see also TF1::GetMaximumX, TF1::GetMinimumX",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:420,Modifiability,variab,variable,420,"////////////////////////////////////////////////////////////////////////////////; /// Compute Quantiles for density distribution of this function; ///; /// Quantile x_p of a probability distribution Function F is defined as; /// \f[; /// F(x_{p}) = \int_{xmin}^{x_{p}} f dx = p with 0 <= p <= 1.; /// \f]; /// For instance the median \f$ x_{\frac{1}{2}} \f$ of a distribution is defined as that value; /// of the random variable for which the distribution function equals 0.5:; /// \f[; /// F(x_{\frac{1}{2}}) = \prod(x < x_{\frac{1}{2}}) = \frac{1}{2}; /// \f]; ///; /// \param[in] n maximum size of array xp and size of array p; /// \param[out] xp array filled with n quantiles evaluated at p. Memory has to be preallocated by caller.; /// \param[in] p array of cumulative probabilities where quantiles should be evaluated.; /// It is assumed to contain at least n values.; /// \return n, the number of quantiles computed (same as input argument n); ///; /// Getting quantiles from two histograms and storing results in a TGraph,; /// a so-called QQ-plot; ///; /// TGraph *gr = new TGraph(nprob);; /// f1->GetQuantiles(nprob,gr->GetX(),p);; /// f2->GetQuantiles(nprob,gr->GetY(),p);; /// gr->Draw(""alp"");; ///; /// \author Eddy Offermann; /// \warning Function leads to undefined behavior if xp or p are null or; /// their size does not match with n",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:114,Energy Efficiency,efficient,efficient,114,"// LM: change to use fNpx; // should we change code to use a root finder ?; // It should be more precise and more efficient",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:12,Availability,toler,tolerance,12,"// LM use a tolerance 1.E-12 (integral precision)",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:198,Testability,log,log,198,"////////////////////////////////////////////////////////////////////////////////; ///; /// Compute the cumulative function at fNpx points between fXmin and fXmax.; /// Option can be used to force a log scale (option = ""log""), linear (option = ""lin"") or automatic if empty.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:219,Testability,log,log,219,"////////////////////////////////////////////////////////////////////////////////; ///; /// Compute the cumulative function at fNpx points between fXmin and fXmax.; /// Option can be used to force a log scale (option = ""log""), linear (option = ""lin"") or automatic if empty.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:3,Performance,perform,perform,3,"// perform a log binning if specified by user (option=""Log"") or if some conditions are met; // and the user explicitly does not specify a Linear binning option",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:13,Testability,log,log,13,"// perform a log binning if specified by user (option=""Log"") or if some conditions are met; // and the user explicitly does not specify a Linear binning option",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:55,Testability,Log,Log,55,"// perform a log binning if specified by user (option=""Log"") or if some conditions are met; // and the user explicitly does not specify a Linear binning option",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:660,Deployability,integrat,integrated,660,"////////////////////////////////////////////////////////////////////////////////; /// Return a random number following this function shape.; ///; /// @param rng Random number generator. By default (or when passing a nullptr) the global gRandom is used; /// @param option Option string which controls the binning used to compute the integral. Default mode is automatic depending of; /// xmax, xmin and Npx (function points).; /// Possible values are:; /// - ""LOG"" to force usage of log scale for tabulating the integral; /// - ""LIN"" to force usage of linear scale when tabulating the integral; ///; /// The distribution contained in the function fname (TF1) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// For each bin the integral is approximated by a parabola.; /// The parabola coefficients are stored as non persistent data members; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Evaluate the parabolic curve in the selected bin to find the corresponding X value.; ///; /// The user can provide as optional parameter a Random number generator.; /// By default gRandom is used; ///; /// If the ratio fXmax/fXmin > fNpx the integral is tabulated in log scale in x; /// A log scale for the intergral is also always used if a user specifies the ""LOG"" option; /// Instead if a user requestes a ""LIN"" option the integral binning is never done in log scale; /// whatever the fXmax/fXmin ratio is; ///; /// Note that the parabolic approximation is very good as soon as the number of bins is greater than 50.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:368,Integrability,depend,depending,368,"////////////////////////////////////////////////////////////////////////////////; /// Return a random number following this function shape.; ///; /// @param rng Random number generator. By default (or when passing a nullptr) the global gRandom is used; /// @param option Option string which controls the binning used to compute the integral. Default mode is automatic depending of; /// xmax, xmin and Npx (function points).; /// Possible values are:; /// - ""LOG"" to force usage of log scale for tabulating the integral; /// - ""LIN"" to force usage of linear scale when tabulating the integral; ///; /// The distribution contained in the function fname (TF1) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// For each bin the integral is approximated by a parabola.; /// The parabola coefficients are stored as non persistent data members; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Evaluate the parabolic curve in the selected bin to find the corresponding X value.; ///; /// The user can provide as optional parameter a Random number generator.; /// By default gRandom is used; ///; /// If the ratio fXmax/fXmin > fNpx the integral is tabulated in log scale in x; /// A log scale for the intergral is also always used if a user specifies the ""LOG"" option; /// Instead if a user requestes a ""LIN"" option the integral binning is never done in log scale; /// whatever the fXmax/fXmin ratio is; ///; /// Note that the parabolic approximation is very good as soon as the number of bins is greater than 50.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:660,Integrability,integrat,integrated,660,"////////////////////////////////////////////////////////////////////////////////; /// Return a random number following this function shape.; ///; /// @param rng Random number generator. By default (or when passing a nullptr) the global gRandom is used; /// @param option Option string which controls the binning used to compute the integral. Default mode is automatic depending of; /// xmax, xmin and Npx (function points).; /// Possible values are:; /// - ""LOG"" to force usage of log scale for tabulating the integral; /// - ""LIN"" to force usage of linear scale when tabulating the integral; ///; /// The distribution contained in the function fname (TF1) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// For each bin the integral is approximated by a parabola.; /// The parabola coefficients are stored as non persistent data members; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Evaluate the parabolic curve in the selected bin to find the corresponding X value.; ///; /// The user can provide as optional parameter a Random number generator.; /// By default gRandom is used; ///; /// If the ratio fXmax/fXmin > fNpx the integral is tabulated in log scale in x; /// A log scale for the intergral is also always used if a user specifies the ""LOG"" option; /// Instead if a user requestes a ""LIN"" option the integral binning is never done in log scale; /// whatever the fXmax/fXmin ratio is; ///; /// Note that the parabolic approximation is very good as soon as the number of bins is greater than 50.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:458,Testability,LOG,LOG,458,"////////////////////////////////////////////////////////////////////////////////; /// Return a random number following this function shape.; ///; /// @param rng Random number generator. By default (or when passing a nullptr) the global gRandom is used; /// @param option Option string which controls the binning used to compute the integral. Default mode is automatic depending of; /// xmax, xmin and Npx (function points).; /// Possible values are:; /// - ""LOG"" to force usage of log scale for tabulating the integral; /// - ""LIN"" to force usage of linear scale when tabulating the integral; ///; /// The distribution contained in the function fname (TF1) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// For each bin the integral is approximated by a parabola.; /// The parabola coefficients are stored as non persistent data members; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Evaluate the parabolic curve in the selected bin to find the corresponding X value.; ///; /// The user can provide as optional parameter a Random number generator.; /// By default gRandom is used; ///; /// If the ratio fXmax/fXmin > fNpx the integral is tabulated in log scale in x; /// A log scale for the intergral is also always used if a user specifies the ""LOG"" option; /// Instead if a user requestes a ""LIN"" option the integral binning is never done in log scale; /// whatever the fXmax/fXmin ratio is; ///; /// Note that the parabolic approximation is very good as soon as the number of bins is greater than 50.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:481,Testability,log,log,481,"////////////////////////////////////////////////////////////////////////////////; /// Return a random number following this function shape.; ///; /// @param rng Random number generator. By default (or when passing a nullptr) the global gRandom is used; /// @param option Option string which controls the binning used to compute the integral. Default mode is automatic depending of; /// xmax, xmin and Npx (function points).; /// Possible values are:; /// - ""LOG"" to force usage of log scale for tabulating the integral; /// - ""LIN"" to force usage of linear scale when tabulating the integral; ///; /// The distribution contained in the function fname (TF1) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// For each bin the integral is approximated by a parabola.; /// The parabola coefficients are stored as non persistent data members; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Evaluate the parabolic curve in the selected bin to find the corresponding X value.; ///; /// The user can provide as optional parameter a Random number generator.; /// By default gRandom is used; ///; /// If the ratio fXmax/fXmin > fNpx the integral is tabulated in log scale in x; /// A log scale for the intergral is also always used if a user specifies the ""LOG"" option; /// Instead if a user requestes a ""LIN"" option the integral binning is never done in log scale; /// whatever the fXmax/fXmin ratio is; ///; /// Note that the parabolic approximation is very good as soon as the number of bins is greater than 50.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1309,Testability,log,log,1309,"////////////////////////////////////////////////////////////////////////////////; /// Return a random number following this function shape.; ///; /// @param rng Random number generator. By default (or when passing a nullptr) the global gRandom is used; /// @param option Option string which controls the binning used to compute the integral. Default mode is automatic depending of; /// xmax, xmin and Npx (function points).; /// Possible values are:; /// - ""LOG"" to force usage of log scale for tabulating the integral; /// - ""LIN"" to force usage of linear scale when tabulating the integral; ///; /// The distribution contained in the function fname (TF1) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// For each bin the integral is approximated by a parabola.; /// The parabola coefficients are stored as non persistent data members; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Evaluate the parabolic curve in the selected bin to find the corresponding X value.; ///; /// The user can provide as optional parameter a Random number generator.; /// By default gRandom is used; ///; /// If the ratio fXmax/fXmin > fNpx the integral is tabulated in log scale in x; /// A log scale for the intergral is also always used if a user specifies the ""LOG"" option; /// Instead if a user requestes a ""LIN"" option the integral binning is never done in log scale; /// whatever the fXmax/fXmin ratio is; ///; /// Note that the parabolic approximation is very good as soon as the number of bins is greater than 50.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1331,Testability,log,log,1331,"////////////////////////////////////////////////////////////////////////////////; /// Return a random number following this function shape.; ///; /// @param rng Random number generator. By default (or when passing a nullptr) the global gRandom is used; /// @param option Option string which controls the binning used to compute the integral. Default mode is automatic depending of; /// xmax, xmin and Npx (function points).; /// Possible values are:; /// - ""LOG"" to force usage of log scale for tabulating the integral; /// - ""LIN"" to force usage of linear scale when tabulating the integral; ///; /// The distribution contained in the function fname (TF1) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// For each bin the integral is approximated by a parabola.; /// The parabola coefficients are stored as non persistent data members; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Evaluate the parabolic curve in the selected bin to find the corresponding X value.; ///; /// The user can provide as optional parameter a Random number generator.; /// By default gRandom is used; ///; /// If the ratio fXmax/fXmin > fNpx the integral is tabulated in log scale in x; /// A log scale for the intergral is also always used if a user specifies the ""LOG"" option; /// Instead if a user requestes a ""LIN"" option the integral binning is never done in log scale; /// whatever the fXmax/fXmin ratio is; ///; /// Note that the parabolic approximation is very good as soon as the number of bins is greater than 50.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1404,Testability,LOG,LOG,1404,"////////////////////////////////////////////////////////////////////////////////; /// Return a random number following this function shape.; ///; /// @param rng Random number generator. By default (or when passing a nullptr) the global gRandom is used; /// @param option Option string which controls the binning used to compute the integral. Default mode is automatic depending of; /// xmax, xmin and Npx (function points).; /// Possible values are:; /// - ""LOG"" to force usage of log scale for tabulating the integral; /// - ""LIN"" to force usage of linear scale when tabulating the integral; ///; /// The distribution contained in the function fname (TF1) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// For each bin the integral is approximated by a parabola.; /// The parabola coefficients are stored as non persistent data members; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Evaluate the parabolic curve in the selected bin to find the corresponding X value.; ///; /// The user can provide as optional parameter a Random number generator.; /// By default gRandom is used; ///; /// If the ratio fXmax/fXmin > fNpx the integral is tabulated in log scale in x; /// A log scale for the intergral is also always used if a user specifies the ""LOG"" option; /// Instead if a user requestes a ""LIN"" option the integral binning is never done in log scale; /// whatever the fXmax/fXmin ratio is; ///; /// Note that the parabolic approximation is very good as soon as the number of bins is greater than 50.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1502,Testability,log,log,1502,"////////////////////////////////////////////////////////////////////////////////; /// Return a random number following this function shape.; ///; /// @param rng Random number generator. By default (or when passing a nullptr) the global gRandom is used; /// @param option Option string which controls the binning used to compute the integral. Default mode is automatic depending of; /// xmax, xmin and Npx (function points).; /// Possible values are:; /// - ""LOG"" to force usage of log scale for tabulating the integral; /// - ""LIN"" to force usage of linear scale when tabulating the integral; ///; /// The distribution contained in the function fname (TF1) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// For each bin the integral is approximated by a parabola.; /// The parabola coefficients are stored as non persistent data members; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Evaluate the parabolic curve in the selected bin to find the corresponding X value.; ///; /// The user can provide as optional parameter a Random number generator.; /// By default gRandom is used; ///; /// If the ratio fXmax/fXmin > fNpx the integral is tabulated in log scale in x; /// A log scale for the intergral is also always used if a user specifies the ""LOG"" option; /// Instead if a user requestes a ""LIN"" option the integral binning is never done in log scale; /// whatever the fXmax/fXmin ratio is; ///; /// Note that the parabolic approximation is very good as soon as the number of bins is greater than 50.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:222,Deployability,integrat,integrated,222,"////////////////////////////////////////////////////////////////////////////////; /// Return a random number following this function shape in [xmin,xmax]; ///; /// The distribution contained in the function fname (TF1) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// For each bin the integral is approximated by a parabola.; /// The parabola coefficients are stored as non persistent data members; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Evaluate the parabolic curve in the selected bin to find; /// the corresponding X value.; ///; /// The parabolic approximation is very good as soon as the number; /// of bins is greater than 50.; ///; /// @param xmin minimum value for generated random numbers; /// @param xmax maximum value for generated random numbers; /// @param rng (optional) random number generator pointer; /// @param option (optional) : `LOG` or `LIN` to force the usage of a log or linear scale for computing the cumulative integral table; ///; /// IMPORTANT NOTE; ///; /// The integral of the function is computed at fNpx points. If the function; /// has sharp peaks, you should increase the number of points (SetNpx); /// such that the peak is correctly tabulated at several points.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:222,Integrability,integrat,integrated,222,"////////////////////////////////////////////////////////////////////////////////; /// Return a random number following this function shape in [xmin,xmax]; ///; /// The distribution contained in the function fname (TF1) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// For each bin the integral is approximated by a parabola.; /// The parabola coefficients are stored as non persistent data members; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Evaluate the parabolic curve in the selected bin to find; /// the corresponding X value.; ///; /// The parabolic approximation is very good as soon as the number; /// of bins is greater than 50.; ///; /// @param xmin minimum value for generated random numbers; /// @param xmax maximum value for generated random numbers; /// @param rng (optional) random number generator pointer; /// @param option (optional) : `LOG` or `LIN` to force the usage of a log or linear scale for computing the cumulative integral table; ///; /// IMPORTANT NOTE; ///; /// The integral of the function is computed at fNpx points. If the function; /// has sharp peaks, you should increase the number of points (SetNpx); /// such that the peak is correctly tabulated at several points.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1016,Testability,LOG,LOG,1016,"////////////////////////////////////////////////////////////////////////////////; /// Return a random number following this function shape in [xmin,xmax]; ///; /// The distribution contained in the function fname (TF1) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// For each bin the integral is approximated by a parabola.; /// The parabola coefficients are stored as non persistent data members; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Evaluate the parabolic curve in the selected bin to find; /// the corresponding X value.; ///; /// The parabolic approximation is very good as soon as the number; /// of bins is greater than 50.; ///; /// @param xmin minimum value for generated random numbers; /// @param xmax maximum value for generated random numbers; /// @param rng (optional) random number generator pointer; /// @param option (optional) : `LOG` or `LIN` to force the usage of a log or linear scale for computing the cumulative integral table; ///; /// IMPORTANT NOTE; ///; /// The integral of the function is computed at fNpx points. If the function; /// has sharp peaks, you should increase the number of points (SetNpx); /// such that the peak is correctly tabulated at several points.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1054,Testability,log,log,1054,"////////////////////////////////////////////////////////////////////////////////; /// Return a random number following this function shape in [xmin,xmax]; ///; /// The distribution contained in the function fname (TF1) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// For each bin the integral is approximated by a parabola.; /// The parabola coefficients are stored as non persistent data members; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Evaluate the parabolic curve in the selected bin to find; /// the corresponding X value.; ///; /// The parabolic approximation is very good as soon as the number; /// of bins is greater than 50.; ///; /// @param xmin minimum value for generated random numbers; /// @param xmax maximum value for generated random numbers; /// @param rng (optional) random number generator pointer; /// @param option (optional) : `LOG` or `LIN` to force the usage of a log or linear scale for computing the cumulative integral table; ///; /// IMPORTANT NOTE; ///; /// The integral of the function is computed at fNpx points. If the function; /// has sharp peaks, you should increase the number of points (SetNpx); /// such that the peak is correctly tabulated at several points.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:298,Availability,error,errors,298,"////////////////////////////////////////////////////////////////////////////////; /// Compute the gradient (derivative) wrt a parameter ipar; ///; /// \param ipar index of parameter for which the derivative is computed; /// \param x point, where the derivative is computed; /// \param eps - if the errors of parameters have been computed, the step used in; /// numerical differentiation is eps*parameter_error.; ///; /// if the errors have not been computed, step=eps is used; /// default value of eps = 0.01; /// Method is the same as in Derivative() function; ///; /// If a parameter is fixed, the gradient on this parameter = 0",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:428,Availability,error,errors,428,"////////////////////////////////////////////////////////////////////////////////; /// Compute the gradient (derivative) wrt a parameter ipar; ///; /// \param ipar index of parameter for which the derivative is computed; /// \param x point, where the derivative is computed; /// \param eps - if the errors of parameters have been computed, the step used in; /// numerical differentiation is eps*parameter_error.; ///; /// if the errors have not been computed, step=eps is used; /// default value of eps = 0.01; /// Method is the same as in Derivative() function; ///; /// If a parameter is fixed, the gradient on this parameter = 0",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:534,Availability,error,errors,534,"////////////////////////////////////////////////////////////////////////////////; /// Compute the gradient wrt parameters; /// If the TF1 object is based on a formula expression (TFormula); /// and TFormula::GenerateGradientPar() has been successfully called; /// automatic differentiation using CLAD is used instead of the default; /// numerical differentiation; ///; /// \param x point, were the gradient is computed; /// \param grad used to return the computed gradient, assumed to be of at least fNpar size; /// \param eps if the errors of parameters have been computed, the step used in; /// numerical differentiation is eps*parameter_error.; ///; /// if the errors have not been computed, step=eps is used; /// default value of eps = 0.01; /// Method is the same as in Derivative() function; ///; /// If a parameter is fixed, the gradient on this parameter = 0",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:664,Availability,error,errors,664,"////////////////////////////////////////////////////////////////////////////////; /// Compute the gradient wrt parameters; /// If the TF1 object is based on a formula expression (TFormula); /// and TFormula::GenerateGradientPar() has been successfully called; /// automatic differentiation using CLAD is used instead of the default; /// numerical differentiation; ///; /// \param x point, were the gradient is computed; /// \param grad used to return the computed gradient, assumed to be of at least fNpar size; /// \param eps if the errors of parameters have been computed, the step used in; /// numerical differentiation is eps*parameter_error.; ///; /// if the errors have not been computed, step=eps is used; /// default value of eps = 0.01; /// Method is the same as in Derivative() function; ///; /// If a parameter is fixed, the gradient on this parameter = 0",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:194,Availability,toler,tolerance,194,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:227,Deployability,integrat,integrator,227,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:261,Deployability,Integrat,IntegratorOneDimOptions,261,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:369,Deployability,integrat,integrator,369,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:605,Deployability,integrat,integration,605,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:643,Deployability,integrat,integration,643,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:692,Deployability,Integrat,IntegratorOneDimOptions,692,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:738,Deployability,Integrat,IntegratorName,738,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:766,Deployability,integrat,integrator,766,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1160,Deployability,integrat,integrators,1160,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1211,Deployability,install,installed,1211,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1745,Deployability,integrat,integration,1745,"ar : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new double[np];; /// double *w=new double[np];; /// g->CalcGaussLegendreSamplingPoints(np,x,w,1e-15);; /// double r3 = g->IntegralFast(np,x,w,0,5);; /// double r4 = g->IntegralFast(np,x,w,0,1000);; /// double r5 = g->IntegralFast(np,x,w,0,10000);; /// double r6 = g->IntegralFast(np,x,w,0,100000);; /// printf(""g->Integral(0,5) = %g\n"",r1);; /// printf(""g->Integral(0,1000) = %g\n"",r2);; /// printf(""g->IntegralFast(n,x,w,0,5) = %g\n"",r3);; /// printf(""g->IntegralFast(n,x,w,0,1000) = %g\n"",r4);; /// printf(""g->IntegralFast(n,x,w,0,10000) = %g\n"",r5);; /// printf(""g->IntegralFast(n,x,w,0,100000)= %g\n"",r6);; /// delete [] x;; /// delete [] w;; /// }; /// ~~~; ///; /// This example produces the following results:; ///; /// ~~~ {.cpp}; /// g->Integral(0,5) = 1.25331; /// g->Integral(0,1000) = 1.25319; /// g->IntegralFast(n,x,w,0,5) = 1.25331; /// g->IntegralFast(n,x,w,0,1000) = 1.25331; /// g->IntegralFast(n,x,w,0,10000) = 1.25331; /// g->IntegralFast(n,x,w,0,100000)= 1.253; /// ~~~",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1801,Deployability,integrat,integrate,1801,"ar : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new double[np];; /// double *w=new double[np];; /// g->CalcGaussLegendreSamplingPoints(np,x,w,1e-15);; /// double r3 = g->IntegralFast(np,x,w,0,5);; /// double r4 = g->IntegralFast(np,x,w,0,1000);; /// double r5 = g->IntegralFast(np,x,w,0,10000);; /// double r6 = g->IntegralFast(np,x,w,0,100000);; /// printf(""g->Integral(0,5) = %g\n"",r1);; /// printf(""g->Integral(0,1000) = %g\n"",r2);; /// printf(""g->IntegralFast(n,x,w,0,5) = %g\n"",r3);; /// printf(""g->IntegralFast(n,x,w,0,1000) = %g\n"",r4);; /// printf(""g->IntegralFast(n,x,w,0,10000) = %g\n"",r5);; /// printf(""g->IntegralFast(n,x,w,0,100000)= %g\n"",r6);; /// delete [] x;; /// delete [] w;; /// }; /// ~~~; ///; /// This example produces the following results:; ///; /// ~~~ {.cpp}; /// g->Integral(0,5) = 1.25331; /// g->Integral(0,1000) = 1.25319; /// g->IntegralFast(n,x,w,0,5) = 1.25331; /// g->IntegralFast(n,x,w,0,1000) = 1.25331; /// g->IntegralFast(n,x,w,0,10000) = 1.25331; /// g->IntegralFast(n,x,w,0,100000)= 1.253; /// ~~~",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:402,Energy Efficiency,adapt,adaptive,402,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:905,Energy Efficiency,Adapt,Adaptive,905,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:946,Energy Efficiency,adapt,adaptive,946,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:975,Energy Efficiency,Adapt,AdaptiveSingular,975,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1024,Energy Efficiency,adapt,adaptive,1024,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1111,Energy Efficiency,adapt,adaptive,1111,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:227,Integrability,integrat,integrator,227,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:261,Integrability,Integrat,IntegratorOneDimOptions,261,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:369,Integrability,integrat,integrator,369,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:605,Integrability,integrat,integration,605,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:643,Integrability,integrat,integration,643,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:692,Integrability,Integrat,IntegratorOneDimOptions,692,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:738,Integrability,Integrat,IntegratorName,738,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:766,Integrability,integrat,integrator,766,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1160,Integrability,integrat,integrators,1160,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1745,Integrability,integrat,integration,1745,"ar : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new double[np];; /// double *w=new double[np];; /// g->CalcGaussLegendreSamplingPoints(np,x,w,1e-15);; /// double r3 = g->IntegralFast(np,x,w,0,5);; /// double r4 = g->IntegralFast(np,x,w,0,1000);; /// double r5 = g->IntegralFast(np,x,w,0,10000);; /// double r6 = g->IntegralFast(np,x,w,0,100000);; /// printf(""g->Integral(0,5) = %g\n"",r1);; /// printf(""g->Integral(0,1000) = %g\n"",r2);; /// printf(""g->IntegralFast(n,x,w,0,5) = %g\n"",r3);; /// printf(""g->IntegralFast(n,x,w,0,1000) = %g\n"",r4);; /// printf(""g->IntegralFast(n,x,w,0,10000) = %g\n"",r5);; /// printf(""g->IntegralFast(n,x,w,0,100000)= %g\n"",r6);; /// delete [] x;; /// delete [] w;; /// }; /// ~~~; ///; /// This example produces the following results:; ///; /// ~~~ {.cpp}; /// g->Integral(0,5) = 1.25331; /// g->Integral(0,1000) = 1.25319; /// g->IntegralFast(n,x,w,0,5) = 1.25331; /// g->IntegralFast(n,x,w,0,1000) = 1.25331; /// g->IntegralFast(n,x,w,0,10000) = 1.25331; /// g->IntegralFast(n,x,w,0,100000)= 1.253; /// ~~~",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1801,Integrability,integrat,integrate,1801,"ar : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new double[np];; /// double *w=new double[np];; /// g->CalcGaussLegendreSamplingPoints(np,x,w,1e-15);; /// double r3 = g->IntegralFast(np,x,w,0,5);; /// double r4 = g->IntegralFast(np,x,w,0,1000);; /// double r5 = g->IntegralFast(np,x,w,0,10000);; /// double r6 = g->IntegralFast(np,x,w,0,100000);; /// printf(""g->Integral(0,5) = %g\n"",r1);; /// printf(""g->Integral(0,1000) = %g\n"",r2);; /// printf(""g->IntegralFast(n,x,w,0,5) = %g\n"",r3);; /// printf(""g->IntegralFast(n,x,w,0,1000) = %g\n"",r4);; /// printf(""g->IntegralFast(n,x,w,0,10000) = %g\n"",r5);; /// printf(""g->IntegralFast(n,x,w,0,100000)= %g\n"",r6);; /// delete [] x;; /// delete [] w;; /// }; /// ~~~; ///; /// This example produces the following results:; ///; /// ~~~ {.cpp}; /// g->Integral(0,5) = 1.25331; /// g->Integral(0,1000) = 1.25319; /// g->IntegralFast(n,x,w,0,5) = 1.25331; /// g->IntegralFast(n,x,w,0,1000) = 1.25331; /// g->IntegralFast(n,x,w,0,10000) = 1.25331; /// g->IntegralFast(n,x,w,0,100000)= 1.253; /// ~~~",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:402,Modifiability,adapt,adaptive,402,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:905,Modifiability,Adapt,Adaptive,905,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:946,Modifiability,adapt,adaptive,946,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:975,Modifiability,Adapt,AdaptiveSingular,975,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1024,Modifiability,adapt,adaptive,1024,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1111,Modifiability,adapt,adaptive,1111,"////////////////////////////////////////////////////////////////////////////////; /// Return Integral of function between a and b using the given parameter values and; /// relative and absolute tolerance.; ///; /// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; /// If ROOT contains the MathMore library the default integrator is set to be; /// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; /// ROOT::Math::GaussIntegrator is used; /// See the reference documentation of these classes for more information about the; /// integration algorithms; /// To change integration algorithm just do :; /// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; /// Valid integrator names are:; /// - Gauss : for ROOT::Math::GaussIntegrator; /// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; /// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); /// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); /// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); ///; /// In order to use the GSL integrators one needs to have the MathMore library installed; ///; /// Note 1:; ///; /// Values of the function f(x) at the interval end-points A and B are not; /// required. The subprogram may therefore be used when these values are; /// undefined.; ///; /// Note 2:; ///; /// Instead of TF1::Integral, you may want to use the combination of; /// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; /// See an example with the following script:; ///; /// ~~~ {.cpp}; /// void gint() {; /// TF1 *g = new TF1(""g"",""gaus"",-5,5);; /// g->SetParameters(1,0,1);; /// //default gaus integration method uses 6 points; /// //not suitable to integrate on a large domain; /// double r1 = g->Integral(0,5);; /// double r2 = g->Integral(0,1000);; ///; /// //try with user directives computing more points; /// Int_t np = 1000;; /// double *x=new",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:93,Availability,Error,Error,93,"////////////////////////////////////////////////////////////////////////////////; /// Return Error on Integral of a parametric function between a and b; /// due to the parameter uncertainties and their covariance matrix from the fit.; /// In addition to the integral limits, this method takes as input a pointer to the fitted parameter values; /// and a pointer the covariance matrix from the fit. These pointers should be retrieved from the; /// previously performed fit using the TFitResult class.; /// Note that to get the TFitResult, te fit should be done using the fit option `S`.; /// Example:; /// ~~~~{.cpp}; /// TFitResultPtr r = histo->Fit(func, ""S"");; /// func->IntegralError(x1,x2,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; /// ~~~~; ///; /// IMPORTANT NOTE1:; ///; /// A null pointer to the parameter values vector and to the covariance matrix can be passed.; /// In this case, when the parameter values pointer is null, the parameter values stored in this; /// TF1 function object are used in the integral error computation.; /// When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved; /// from a global fitter instance when it exists. Note that the global fitter instance; /// esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True).; /// When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is; /// returned.; ///; ///; /// IMPORTANT NOTE2:; ///; /// When no covariance matrix is passed and in the meantime a fit is done; /// using another function, the routine will signal an error and it will return zero only; /// when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ).; /// In the case that npar is the same, an incorrect result is returned.; ///; /// IMPORTANT NOTE3:; ///; /// The user must pass a pointer to the elements of the full covariance matrix; /// dim",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1040,Availability,error,error,1040,"////////////////////////////////////////////////////////////////////////////////; /// Return Error on Integral of a parametric function between a and b; /// due to the parameter uncertainties and their covariance matrix from the fit.; /// In addition to the integral limits, this method takes as input a pointer to the fitted parameter values; /// and a pointer the covariance matrix from the fit. These pointers should be retrieved from the; /// previously performed fit using the TFitResult class.; /// Note that to get the TFitResult, te fit should be done using the fit option `S`.; /// Example:; /// ~~~~{.cpp}; /// TFitResultPtr r = histo->Fit(func, ""S"");; /// func->IntegralError(x1,x2,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; /// ~~~~; ///; /// IMPORTANT NOTE1:; ///; /// A null pointer to the parameter values vector and to the covariance matrix can be passed.; /// In this case, when the parameter values pointer is null, the parameter values stored in this; /// TF1 function object are used in the integral error computation.; /// When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved; /// from a global fitter instance when it exists. Note that the global fitter instance; /// esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True).; /// When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is; /// returned.; ///; ///; /// IMPORTANT NOTE2:; ///; /// When no covariance matrix is passed and in the meantime a fit is done; /// using another function, the routine will signal an error and it will return zero only; /// when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ).; /// In the case that npar is the same, an incorrect result is returned.; ///; /// IMPORTANT NOTE3:; ///; /// The user must pass a pointer to the elements of the full covariance matrix; /// dim",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1445,Availability,error,error,1445," input a pointer to the fitted parameter values; /// and a pointer the covariance matrix from the fit. These pointers should be retrieved from the; /// previously performed fit using the TFitResult class.; /// Note that to get the TFitResult, te fit should be done using the fit option `S`.; /// Example:; /// ~~~~{.cpp}; /// TFitResultPtr r = histo->Fit(func, ""S"");; /// func->IntegralError(x1,x2,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; /// ~~~~; ///; /// IMPORTANT NOTE1:; ///; /// A null pointer to the parameter values vector and to the covariance matrix can be passed.; /// In this case, when the parameter values pointer is null, the parameter values stored in this; /// TF1 function object are used in the integral error computation.; /// When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved; /// from a global fitter instance when it exists. Note that the global fitter instance; /// esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True).; /// When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is; /// returned.; ///; ///; /// IMPORTANT NOTE2:; ///; /// When no covariance matrix is passed and in the meantime a fit is done; /// using another function, the routine will signal an error and it will return zero only; /// when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ).; /// In the case that npar is the same, an incorrect result is returned.; ///; /// IMPORTANT NOTE3:; ///; /// The user must pass a pointer to the elements of the full covariance matrix; /// dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()),; /// including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as; /// shown above and not from TVirtualFitter::GetCovarianceMatrix() function.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1673,Availability,error,error,1673," input a pointer to the fitted parameter values; /// and a pointer the covariance matrix from the fit. These pointers should be retrieved from the; /// previously performed fit using the TFitResult class.; /// Note that to get the TFitResult, te fit should be done using the fit option `S`.; /// Example:; /// ~~~~{.cpp}; /// TFitResultPtr r = histo->Fit(func, ""S"");; /// func->IntegralError(x1,x2,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; /// ~~~~; ///; /// IMPORTANT NOTE1:; ///; /// A null pointer to the parameter values vector and to the covariance matrix can be passed.; /// In this case, when the parameter values pointer is null, the parameter values stored in this; /// TF1 function object are used in the integral error computation.; /// When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved; /// from a global fitter instance when it exists. Note that the global fitter instance; /// esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True).; /// When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is; /// returned.; ///; ///; /// IMPORTANT NOTE2:; ///; /// When no covariance matrix is passed and in the meantime a fit is done; /// using another function, the routine will signal an error and it will return zero only; /// when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ).; /// In the case that npar is the same, an incorrect result is returned.; ///; /// IMPORTANT NOTE3:; ///; /// The user must pass a pointer to the elements of the full covariance matrix; /// dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()),; /// including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as; /// shown above and not from TVirtualFitter::GetCovarianceMatrix() function.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1451,Integrability,message,message,1451," input a pointer to the fitted parameter values; /// and a pointer the covariance matrix from the fit. These pointers should be retrieved from the; /// previously performed fit using the TFitResult class.; /// Note that to get the TFitResult, te fit should be done using the fit option `S`.; /// Example:; /// ~~~~{.cpp}; /// TFitResultPtr r = histo->Fit(func, ""S"");; /// func->IntegralError(x1,x2,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; /// ~~~~; ///; /// IMPORTANT NOTE1:; ///; /// A null pointer to the parameter values vector and to the covariance matrix can be passed.; /// In this case, when the parameter values pointer is null, the parameter values stored in this; /// TF1 function object are used in the integral error computation.; /// When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved; /// from a global fitter instance when it exists. Note that the global fitter instance; /// esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True).; /// When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is; /// returned.; ///; ///; /// IMPORTANT NOTE2:; ///; /// When no covariance matrix is passed and in the meantime a fit is done; /// using another function, the routine will signal an error and it will return zero only; /// when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ).; /// In the case that npar is the same, an incorrect result is returned.; ///; /// IMPORTANT NOTE3:; ///; /// The user must pass a pointer to the elements of the full covariance matrix; /// dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()),; /// including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as; /// shown above and not from TVirtualFitter::GetCovarianceMatrix() function.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1650,Integrability,rout,routine,1650," input a pointer to the fitted parameter values; /// and a pointer the covariance matrix from the fit. These pointers should be retrieved from the; /// previously performed fit using the TFitResult class.; /// Note that to get the TFitResult, te fit should be done using the fit option `S`.; /// Example:; /// ~~~~{.cpp}; /// TFitResultPtr r = histo->Fit(func, ""S"");; /// func->IntegralError(x1,x2,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; /// ~~~~; ///; /// IMPORTANT NOTE1:; ///; /// A null pointer to the parameter values vector and to the covariance matrix can be passed.; /// In this case, when the parameter values pointer is null, the parameter values stored in this; /// TF1 function object are used in the integral error computation.; /// When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved; /// from a global fitter instance when it exists. Note that the global fitter instance; /// esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True).; /// When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is; /// returned.; ///; ///; /// IMPORTANT NOTE2:; ///; /// When no covariance matrix is passed and in the meantime a fit is done; /// using another function, the routine will signal an error and it will return zero only; /// when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ).; /// In the case that npar is the same, an incorrect result is returned.; ///; /// IMPORTANT NOTE3:; ///; /// The user must pass a pointer to the elements of the full covariance matrix; /// dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()),; /// including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as; /// shown above and not from TVirtualFitter::GetCovarianceMatrix() function.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:458,Performance,perform,performed,458,"////////////////////////////////////////////////////////////////////////////////; /// Return Error on Integral of a parametric function between a and b; /// due to the parameter uncertainties and their covariance matrix from the fit.; /// In addition to the integral limits, this method takes as input a pointer to the fitted parameter values; /// and a pointer the covariance matrix from the fit. These pointers should be retrieved from the; /// previously performed fit using the TFitResult class.; /// Note that to get the TFitResult, te fit should be done using the fit option `S`.; /// Example:; /// ~~~~{.cpp}; /// TFitResultPtr r = histo->Fit(func, ""S"");; /// func->IntegralError(x1,x2,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; /// ~~~~; ///; /// IMPORTANT NOTE1:; ///; /// A null pointer to the parameter values vector and to the covariance matrix can be passed.; /// In this case, when the parameter values pointer is null, the parameter values stored in this; /// TF1 function object are used in the integral error computation.; /// When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved; /// from a global fitter instance when it exists. Note that the global fitter instance; /// esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True).; /// When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is; /// returned.; ///; ///; /// IMPORTANT NOTE2:; ///; /// When no covariance matrix is passed and in the meantime a fit is done; /// using another function, the routine will signal an error and it will return zero only; /// when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ).; /// In the case that npar is the same, an incorrect result is returned.; ///; /// IMPORTANT NOTE3:; ///; /// The user must pass a pointer to the elements of the full covariance matrix; /// dim",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1309,Performance,multi-thread,multi-threading,1309," input a pointer to the fitted parameter values; /// and a pointer the covariance matrix from the fit. These pointers should be retrieved from the; /// previously performed fit using the TFitResult class.; /// Note that to get the TFitResult, te fit should be done using the fit option `S`.; /// Example:; /// ~~~~{.cpp}; /// TFitResultPtr r = histo->Fit(func, ""S"");; /// func->IntegralError(x1,x2,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; /// ~~~~; ///; /// IMPORTANT NOTE1:; ///; /// A null pointer to the parameter values vector and to the covariance matrix can be passed.; /// In this case, when the parameter values pointer is null, the parameter values stored in this; /// TF1 function object are used in the integral error computation.; /// When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved; /// from a global fitter instance when it exists. Note that the global fitter instance; /// esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True).; /// When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is; /// returned.; ///; ///; /// IMPORTANT NOTE2:; ///; /// When no covariance matrix is passed and in the meantime a fit is done; /// using another function, the routine will signal an error and it will return zero only; /// when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ).; /// In the case that npar is the same, an incorrect result is returned.; ///; /// IMPORTANT NOTE3:; ///; /// The user must pass a pointer to the elements of the full covariance matrix; /// dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()),; /// including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as; /// shown above and not from TVirtualFitter::GetCovarianceMatrix() function.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:93,Availability,Error,Error,93,"////////////////////////////////////////////////////////////////////////////////; /// Return Error on Integral of a parametric function with dimension larger than one; /// between a[] and b[] due to the parameters uncertainties.; /// For a TF1 with dimension larger than 1 (for example a TF2 or TF3); /// TF1::IntegralMultiple is used for the integral calculation; ///; /// In addition to the integral limits, this method takes as input a pointer to the fitted parameter values; /// and a pointer the covariance matrix from the fit. These pointers should be retrieved from the; /// previously performed fit using the TFitResult class.; /// Note that to get the TFitResult, te fit should be done using the fit option `S`.; /// Example:; /// ~~~~{.cpp}; /// TFitResultPtr r = histo2d->Fit(func2, ""S"");; /// func2->IntegralError(a,b,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; /// ~~~~; ///; /// IMPORTANT NOTE1:; ///; /// A null pointer to the parameter values vector and to the covariance matrix can be passed.; /// In this case, when the parameter values pointer is null, the parameter values stored in this; /// TF1 function object are used in the integral error computation.; /// When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved; /// from a global fitter instance when it exists. Note that the global fitter instance; /// esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True).; /// When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is; /// returned.; ///; ///; /// IMPORTANT NOTE2:; ///; /// When no covariance matrix is passed and in the meantime a fit is done; /// using another function, the routine will signal an error and it will return zero only; /// when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ).; /// In the case that npar is the same, an incorrect res",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1177,Availability,error,error,1177,"of a parametric function with dimension larger than one; /// between a[] and b[] due to the parameters uncertainties.; /// For a TF1 with dimension larger than 1 (for example a TF2 or TF3); /// TF1::IntegralMultiple is used for the integral calculation; ///; /// In addition to the integral limits, this method takes as input a pointer to the fitted parameter values; /// and a pointer the covariance matrix from the fit. These pointers should be retrieved from the; /// previously performed fit using the TFitResult class.; /// Note that to get the TFitResult, te fit should be done using the fit option `S`.; /// Example:; /// ~~~~{.cpp}; /// TFitResultPtr r = histo2d->Fit(func2, ""S"");; /// func2->IntegralError(a,b,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; /// ~~~~; ///; /// IMPORTANT NOTE1:; ///; /// A null pointer to the parameter values vector and to the covariance matrix can be passed.; /// In this case, when the parameter values pointer is null, the parameter values stored in this; /// TF1 function object are used in the integral error computation.; /// When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved; /// from a global fitter instance when it exists. Note that the global fitter instance; /// esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True).; /// When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is; /// returned.; ///; ///; /// IMPORTANT NOTE2:; ///; /// When no covariance matrix is passed and in the meantime a fit is done; /// using another function, the routine will signal an error and it will return zero only; /// when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ).; /// In the case that npar is the same, an incorrect result is returned.; ///; /// IMPORTANT NOTE3:; ///; /// The user must pass a pointer to the elements of the full ",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1582,Availability,error,error,1582,"nput a pointer to the fitted parameter values; /// and a pointer the covariance matrix from the fit. These pointers should be retrieved from the; /// previously performed fit using the TFitResult class.; /// Note that to get the TFitResult, te fit should be done using the fit option `S`.; /// Example:; /// ~~~~{.cpp}; /// TFitResultPtr r = histo2d->Fit(func2, ""S"");; /// func2->IntegralError(a,b,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; /// ~~~~; ///; /// IMPORTANT NOTE1:; ///; /// A null pointer to the parameter values vector and to the covariance matrix can be passed.; /// In this case, when the parameter values pointer is null, the parameter values stored in this; /// TF1 function object are used in the integral error computation.; /// When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved; /// from a global fitter instance when it exists. Note that the global fitter instance; /// esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True).; /// When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is; /// returned.; ///; ///; /// IMPORTANT NOTE2:; ///; /// When no covariance matrix is passed and in the meantime a fit is done; /// using another function, the routine will signal an error and it will return zero only; /// when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ).; /// In the case that npar is the same, an incorrect result is returned.; ///; /// IMPORTANT NOTE3:; ///; /// The user must pass a pointer to the elements of the full covariance matrix; /// dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()),; /// including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as; /// shown above and not from TVirtualFitter::GetCovarianceMatrix() function.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1810,Availability,error,error,1810,"nput a pointer to the fitted parameter values; /// and a pointer the covariance matrix from the fit. These pointers should be retrieved from the; /// previously performed fit using the TFitResult class.; /// Note that to get the TFitResult, te fit should be done using the fit option `S`.; /// Example:; /// ~~~~{.cpp}; /// TFitResultPtr r = histo2d->Fit(func2, ""S"");; /// func2->IntegralError(a,b,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; /// ~~~~; ///; /// IMPORTANT NOTE1:; ///; /// A null pointer to the parameter values vector and to the covariance matrix can be passed.; /// In this case, when the parameter values pointer is null, the parameter values stored in this; /// TF1 function object are used in the integral error computation.; /// When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved; /// from a global fitter instance when it exists. Note that the global fitter instance; /// esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True).; /// When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is; /// returned.; ///; ///; /// IMPORTANT NOTE2:; ///; /// When no covariance matrix is passed and in the meantime a fit is done; /// using another function, the routine will signal an error and it will return zero only; /// when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ).; /// In the case that npar is the same, an incorrect result is returned.; ///; /// IMPORTANT NOTE3:; ///; /// The user must pass a pointer to the elements of the full covariance matrix; /// dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()),; /// including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as; /// shown above and not from TVirtualFitter::GetCovarianceMatrix() function.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1588,Integrability,message,message,1588,"nput a pointer to the fitted parameter values; /// and a pointer the covariance matrix from the fit. These pointers should be retrieved from the; /// previously performed fit using the TFitResult class.; /// Note that to get the TFitResult, te fit should be done using the fit option `S`.; /// Example:; /// ~~~~{.cpp}; /// TFitResultPtr r = histo2d->Fit(func2, ""S"");; /// func2->IntegralError(a,b,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; /// ~~~~; ///; /// IMPORTANT NOTE1:; ///; /// A null pointer to the parameter values vector and to the covariance matrix can be passed.; /// In this case, when the parameter values pointer is null, the parameter values stored in this; /// TF1 function object are used in the integral error computation.; /// When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved; /// from a global fitter instance when it exists. Note that the global fitter instance; /// esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True).; /// When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is; /// returned.; ///; ///; /// IMPORTANT NOTE2:; ///; /// When no covariance matrix is passed and in the meantime a fit is done; /// using another function, the routine will signal an error and it will return zero only; /// when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ).; /// In the case that npar is the same, an incorrect result is returned.; ///; /// IMPORTANT NOTE3:; ///; /// The user must pass a pointer to the elements of the full covariance matrix; /// dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()),; /// including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as; /// shown above and not from TVirtualFitter::GetCovarianceMatrix() function.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1787,Integrability,rout,routine,1787,"nput a pointer to the fitted parameter values; /// and a pointer the covariance matrix from the fit. These pointers should be retrieved from the; /// previously performed fit using the TFitResult class.; /// Note that to get the TFitResult, te fit should be done using the fit option `S`.; /// Example:; /// ~~~~{.cpp}; /// TFitResultPtr r = histo2d->Fit(func2, ""S"");; /// func2->IntegralError(a,b,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; /// ~~~~; ///; /// IMPORTANT NOTE1:; ///; /// A null pointer to the parameter values vector and to the covariance matrix can be passed.; /// In this case, when the parameter values pointer is null, the parameter values stored in this; /// TF1 function object are used in the integral error computation.; /// When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved; /// from a global fitter instance when it exists. Note that the global fitter instance; /// esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True).; /// When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is; /// returned.; ///; ///; /// IMPORTANT NOTE2:; ///; /// When no covariance matrix is passed and in the meantime a fit is done; /// using another function, the routine will signal an error and it will return zero only; /// when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ).; /// In the case that npar is the same, an incorrect result is returned.; ///; /// IMPORTANT NOTE3:; ///; /// The user must pass a pointer to the elements of the full covariance matrix; /// dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()),; /// including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as; /// shown above and not from TVirtualFitter::GetCovarianceMatrix() function.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:593,Performance,perform,performed,593,"////////////////////////////////////////////////////////////////////////////////; /// Return Error on Integral of a parametric function with dimension larger than one; /// between a[] and b[] due to the parameters uncertainties.; /// For a TF1 with dimension larger than 1 (for example a TF2 or TF3); /// TF1::IntegralMultiple is used for the integral calculation; ///; /// In addition to the integral limits, this method takes as input a pointer to the fitted parameter values; /// and a pointer the covariance matrix from the fit. These pointers should be retrieved from the; /// previously performed fit using the TFitResult class.; /// Note that to get the TFitResult, te fit should be done using the fit option `S`.; /// Example:; /// ~~~~{.cpp}; /// TFitResultPtr r = histo2d->Fit(func2, ""S"");; /// func2->IntegralError(a,b,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; /// ~~~~; ///; /// IMPORTANT NOTE1:; ///; /// A null pointer to the parameter values vector and to the covariance matrix can be passed.; /// In this case, when the parameter values pointer is null, the parameter values stored in this; /// TF1 function object are used in the integral error computation.; /// When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved; /// from a global fitter instance when it exists. Note that the global fitter instance; /// esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True).; /// When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is; /// returned.; ///; ///; /// IMPORTANT NOTE2:; ///; /// When no covariance matrix is passed and in the meantime a fit is done; /// using another function, the routine will signal an error and it will return zero only; /// when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ).; /// In the case that npar is the same, an incorrect res",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1446,Performance,multi-thread,multi-threading,1446,"nput a pointer to the fitted parameter values; /// and a pointer the covariance matrix from the fit. These pointers should be retrieved from the; /// previously performed fit using the TFitResult class.; /// Note that to get the TFitResult, te fit should be done using the fit option `S`.; /// Example:; /// ~~~~{.cpp}; /// TFitResultPtr r = histo2d->Fit(func2, ""S"");; /// func2->IntegralError(a,b,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; /// ~~~~; ///; /// IMPORTANT NOTE1:; ///; /// A null pointer to the parameter values vector and to the covariance matrix can be passed.; /// In this case, when the parameter values pointer is null, the parameter values stored in this; /// TF1 function object are used in the integral error computation.; /// When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved; /// from a global fitter instance when it exists. Note that the global fitter instance; /// esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True).; /// When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is; /// returned.; ///; ///; /// IMPORTANT NOTE2:; ///; /// When no covariance matrix is passed and in the meantime a fit is done; /// using another function, the routine will signal an error and it will return zero only; /// when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ).; /// In the case that npar is the same, an incorrect result is returned.; ///; /// IMPORTANT NOTE3:; ///; /// The user must pass a pointer to the elements of the full covariance matrix; /// dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()),; /// including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as; /// shown above and not from TVirtualFitter::GetCovarianceMatrix() function.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:130,Integrability,interface,interface,130,"////////////////////////////////////////////////////////////////////////////////; /// See more general prototype below.; /// This interface kept for back compatibility; /// It is recommended to use the other interface where one can specify also epsabs and the maximum number of; /// points",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:208,Integrability,interface,interface,208,"////////////////////////////////////////////////////////////////////////////////; /// See more general prototype below.; /// This interface kept for back compatibility; /// It is recommended to use the other interface where one can specify also epsabs and the maximum number of; /// points",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:356,Deployability,integrat,integration,356,"////////////////////////////////////////////////////////////////////////////////; /// This function computes, to an attempted specified accuracy, the value of; /// the integral; ///; /// \param[in] n Number of dimensions [2,15]; /// \param[in] a,b One-dimensional arrays of length >= N . On entry A[i], and B[i],; /// contain the lower and upper limits of integration, respectively.; /// \param[in] maxpts Maximum number of function evaluations to be allowed.; /// maxpts >= 2^n +2*n*(n+1) +1; /// if maxpts<minpts, maxpts is set to 10*minpts; /// \param[in] epsrel Specified relative accuracy.; /// \param[in] epsabs Specified absolute accuracy.; /// The integration algorithm will attempt to reach either the relative or the absolute accuracy.; /// In case the maximum function called is reached the algorithm will stop earlier without having reached; /// the desired accuracy; ///; /// \param[out] relerr Contains, on exit, an estimation of the relative accuracy of the result.; /// \param[out] nfnevl number of function evaluations performed.; /// \param[out] ifail; /// \parblock; /// 0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; ///; /// 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the; /// specified value of maxpts.; ///; /// 3 n<2 or n>15; /// \endparblock; ///; /// Method:; ///; /// The default method used is the Genz-Mallik adaptive multidimensional algorithm; /// using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); ///; /// Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator(); /// to different integrators.; /// Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class; /// Possible methods are : Vegas, Miser or Plain; /// IN case of MC integration the accuracy is determined by the number of function calls, one should be; /// careful not t",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:656,Deployability,integrat,integration,656,"////////////////////////////////////////////////////////////////////////////////; /// This function computes, to an attempted specified accuracy, the value of; /// the integral; ///; /// \param[in] n Number of dimensions [2,15]; /// \param[in] a,b One-dimensional arrays of length >= N . On entry A[i], and B[i],; /// contain the lower and upper limits of integration, respectively.; /// \param[in] maxpts Maximum number of function evaluations to be allowed.; /// maxpts >= 2^n +2*n*(n+1) +1; /// if maxpts<minpts, maxpts is set to 10*minpts; /// \param[in] epsrel Specified relative accuracy.; /// \param[in] epsabs Specified absolute accuracy.; /// The integration algorithm will attempt to reach either the relative or the absolute accuracy.; /// In case the maximum function called is reached the algorithm will stop earlier without having reached; /// the desired accuracy; ///; /// \param[out] relerr Contains, on exit, an estimation of the relative accuracy of the result.; /// \param[out] nfnevl number of function evaluations performed.; /// \param[out] ifail; /// \parblock; /// 0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; ///; /// 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the; /// specified value of maxpts.; ///; /// 3 n<2 or n>15; /// \endparblock; ///; /// Method:; ///; /// The default method used is the Genz-Mallik adaptive multidimensional algorithm; /// using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); ///; /// Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator(); /// to different integrators.; /// Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class; /// Possible methods are : Vegas, Miser or Plain; /// IN case of MC integration the accuracy is determined by the number of function calls, one should be; /// careful not t",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1649,Deployability,Integrat,IntegratorMultiDimOptions,1649,"////////////////////////////////////////; /// This function computes, to an attempted specified accuracy, the value of; /// the integral; ///; /// \param[in] n Number of dimensions [2,15]; /// \param[in] a,b One-dimensional arrays of length >= N . On entry A[i], and B[i],; /// contain the lower and upper limits of integration, respectively.; /// \param[in] maxpts Maximum number of function evaluations to be allowed.; /// maxpts >= 2^n +2*n*(n+1) +1; /// if maxpts<minpts, maxpts is set to 10*minpts; /// \param[in] epsrel Specified relative accuracy.; /// \param[in] epsabs Specified absolute accuracy.; /// The integration algorithm will attempt to reach either the relative or the absolute accuracy.; /// In case the maximum function called is reached the algorithm will stop earlier without having reached; /// the desired accuracy; ///; /// \param[out] relerr Contains, on exit, an estimation of the relative accuracy of the result.; /// \param[out] nfnevl number of function evaluations performed.; /// \param[out] ifail; /// \parblock; /// 0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; ///; /// 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the; /// specified value of maxpts.; ///; /// 3 n<2 or n>15; /// \endparblock; ///; /// Method:; ///; /// The default method used is the Genz-Mallik adaptive multidimensional algorithm; /// using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); ///; /// Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator(); /// to different integrators.; /// Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class; /// Possible methods are : Vegas, Miser or Plain; /// IN case of MC integration the accuracy is determined by the number of function calls, one should be; /// careful not to use a too large value of maxpts; ///",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1717,Deployability,integrat,integrators,1717,"////////////////////////////////////////; /// This function computes, to an attempted specified accuracy, the value of; /// the integral; ///; /// \param[in] n Number of dimensions [2,15]; /// \param[in] a,b One-dimensional arrays of length >= N . On entry A[i], and B[i],; /// contain the lower and upper limits of integration, respectively.; /// \param[in] maxpts Maximum number of function evaluations to be allowed.; /// maxpts >= 2^n +2*n*(n+1) +1; /// if maxpts<minpts, maxpts is set to 10*minpts; /// \param[in] epsrel Specified relative accuracy.; /// \param[in] epsabs Specified absolute accuracy.; /// The integration algorithm will attempt to reach either the relative or the absolute accuracy.; /// In case the maximum function called is reached the algorithm will stop earlier without having reached; /// the desired accuracy; ///; /// \param[out] relerr Contains, on exit, an estimation of the relative accuracy of the result.; /// \param[out] nfnevl number of function evaluations performed.; /// \param[out] ifail; /// \parblock; /// 0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; ///; /// 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the; /// specified value of maxpts.; ///; /// 3 n<2 or n>15; /// \endparblock; ///; /// Method:; ///; /// The default method used is the Genz-Mallik adaptive multidimensional algorithm; /// using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); ///; /// Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator(); /// to different integrators.; /// Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class; /// Possible methods are : Vegas, Miser or Plain; /// IN case of MC integration the accuracy is determined by the number of function calls, one should be; /// careful not to use a too large value of maxpts; ///",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1750,Deployability,integrat,integrators,1750,"////////////////////////////////////////; /// This function computes, to an attempted specified accuracy, the value of; /// the integral; ///; /// \param[in] n Number of dimensions [2,15]; /// \param[in] a,b One-dimensional arrays of length >= N . On entry A[i], and B[i],; /// contain the lower and upper limits of integration, respectively.; /// \param[in] maxpts Maximum number of function evaluations to be allowed.; /// maxpts >= 2^n +2*n*(n+1) +1; /// if maxpts<minpts, maxpts is set to 10*minpts; /// \param[in] epsrel Specified relative accuracy.; /// \param[in] epsabs Specified absolute accuracy.; /// The integration algorithm will attempt to reach either the relative or the absolute accuracy.; /// In case the maximum function called is reached the algorithm will stop earlier without having reached; /// the desired accuracy; ///; /// \param[out] relerr Contains, on exit, an estimation of the relative accuracy of the result.; /// \param[out] nfnevl number of function evaluations performed.; /// \param[out] ifail; /// \parblock; /// 0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; ///; /// 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the; /// specified value of maxpts.; ///; /// 3 n<2 or n>15; /// \endparblock; ///; /// Method:; ///; /// The default method used is the Genz-Mallik adaptive multidimensional algorithm; /// using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); ///; /// Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator(); /// to different integrators.; /// Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class; /// Possible methods are : Vegas, Miser or Plain; /// IN case of MC integration the accuracy is determined by the number of function calls, one should be; /// careful not to use a too large value of maxpts; ///",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1769,Deployability,integrat,integrators,1769,"////////////////////////////////////////; /// This function computes, to an attempted specified accuracy, the value of; /// the integral; ///; /// \param[in] n Number of dimensions [2,15]; /// \param[in] a,b One-dimensional arrays of length >= N . On entry A[i], and B[i],; /// contain the lower and upper limits of integration, respectively.; /// \param[in] maxpts Maximum number of function evaluations to be allowed.; /// maxpts >= 2^n +2*n*(n+1) +1; /// if maxpts<minpts, maxpts is set to 10*minpts; /// \param[in] epsrel Specified relative accuracy.; /// \param[in] epsabs Specified absolute accuracy.; /// The integration algorithm will attempt to reach either the relative or the absolute accuracy.; /// In case the maximum function called is reached the algorithm will stop earlier without having reached; /// the desired accuracy; ///; /// \param[out] relerr Contains, on exit, an estimation of the relative accuracy of the result.; /// \param[out] nfnevl number of function evaluations performed.; /// \param[out] ifail; /// \parblock; /// 0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; ///; /// 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the; /// specified value of maxpts.; ///; /// 3 n<2 or n>15; /// \endparblock; ///; /// Method:; ///; /// The default method used is the Genz-Mallik adaptive multidimensional algorithm; /// using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); ///; /// Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator(); /// to different integrators.; /// Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class; /// Possible methods are : Vegas, Miser or Plain; /// IN case of MC integration the accuracy is determined by the number of function calls, one should be; /// careful not to use a too large value of maxpts; ///",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1897,Deployability,integrat,integration,1897,"////////////////////////////////////////; /// This function computes, to an attempted specified accuracy, the value of; /// the integral; ///; /// \param[in] n Number of dimensions [2,15]; /// \param[in] a,b One-dimensional arrays of length >= N . On entry A[i], and B[i],; /// contain the lower and upper limits of integration, respectively.; /// \param[in] maxpts Maximum number of function evaluations to be allowed.; /// maxpts >= 2^n +2*n*(n+1) +1; /// if maxpts<minpts, maxpts is set to 10*minpts; /// \param[in] epsrel Specified relative accuracy.; /// \param[in] epsabs Specified absolute accuracy.; /// The integration algorithm will attempt to reach either the relative or the absolute accuracy.; /// In case the maximum function called is reached the algorithm will stop earlier without having reached; /// the desired accuracy; ///; /// \param[out] relerr Contains, on exit, an estimation of the relative accuracy of the result.; /// \param[out] nfnevl number of function evaluations performed.; /// \param[out] ifail; /// \parblock; /// 0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; ///; /// 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the; /// specified value of maxpts.; ///; /// 3 n<2 or n>15; /// \endparblock; ///; /// Method:; ///; /// The default method used is the Genz-Mallik adaptive multidimensional algorithm; /// using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); ///; /// Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator(); /// to different integrators.; /// Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class; /// Possible methods are : Vegas, Miser or Plain; /// IN case of MC integration the accuracy is determined by the number of function calls, one should be; /// careful not to use a too large value of maxpts; ///",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1447,Energy Efficiency,adapt,adaptive,1447,"////////////////////////////////////////; /// This function computes, to an attempted specified accuracy, the value of; /// the integral; ///; /// \param[in] n Number of dimensions [2,15]; /// \param[in] a,b One-dimensional arrays of length >= N . On entry A[i], and B[i],; /// contain the lower and upper limits of integration, respectively.; /// \param[in] maxpts Maximum number of function evaluations to be allowed.; /// maxpts >= 2^n +2*n*(n+1) +1; /// if maxpts<minpts, maxpts is set to 10*minpts; /// \param[in] epsrel Specified relative accuracy.; /// \param[in] epsabs Specified absolute accuracy.; /// The integration algorithm will attempt to reach either the relative or the absolute accuracy.; /// In case the maximum function called is reached the algorithm will stop earlier without having reached; /// the desired accuracy; ///; /// \param[out] relerr Contains, on exit, an estimation of the relative accuracy of the result.; /// \param[out] nfnevl number of function evaluations performed.; /// \param[out] ifail; /// \parblock; /// 0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; ///; /// 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the; /// specified value of maxpts.; ///; /// 3 n<2 or n>15; /// \endparblock; ///; /// Method:; ///; /// The default method used is the Genz-Mallik adaptive multidimensional algorithm; /// using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); ///; /// Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator(); /// to different integrators.; /// Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class; /// Possible methods are : Vegas, Miser or Plain; /// IN case of MC integration the accuracy is determined by the number of function calls, one should be; /// careful not to use a too large value of maxpts; ///",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1516,Energy Efficiency,Adapt,AdaptiveIntegratorMultiDim,1516,"////////////////////////////////////////; /// This function computes, to an attempted specified accuracy, the value of; /// the integral; ///; /// \param[in] n Number of dimensions [2,15]; /// \param[in] a,b One-dimensional arrays of length >= N . On entry A[i], and B[i],; /// contain the lower and upper limits of integration, respectively.; /// \param[in] maxpts Maximum number of function evaluations to be allowed.; /// maxpts >= 2^n +2*n*(n+1) +1; /// if maxpts<minpts, maxpts is set to 10*minpts; /// \param[in] epsrel Specified relative accuracy.; /// \param[in] epsabs Specified absolute accuracy.; /// The integration algorithm will attempt to reach either the relative or the absolute accuracy.; /// In case the maximum function called is reached the algorithm will stop earlier without having reached; /// the desired accuracy; ///; /// \param[out] relerr Contains, on exit, an estimation of the relative accuracy of the result.; /// \param[out] nfnevl number of function evaluations performed.; /// \param[out] ifail; /// \parblock; /// 0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; ///; /// 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the; /// specified value of maxpts.; ///; /// 3 n<2 or n>15; /// \endparblock; ///; /// Method:; ///; /// The default method used is the Genz-Mallik adaptive multidimensional algorithm; /// using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); ///; /// Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator(); /// to different integrators.; /// Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class; /// Possible methods are : Vegas, Miser or Plain; /// IN case of MC integration the accuracy is determined by the number of function calls, one should be; /// careful not to use a too large value of maxpts; ///",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:356,Integrability,integrat,integration,356,"////////////////////////////////////////////////////////////////////////////////; /// This function computes, to an attempted specified accuracy, the value of; /// the integral; ///; /// \param[in] n Number of dimensions [2,15]; /// \param[in] a,b One-dimensional arrays of length >= N . On entry A[i], and B[i],; /// contain the lower and upper limits of integration, respectively.; /// \param[in] maxpts Maximum number of function evaluations to be allowed.; /// maxpts >= 2^n +2*n*(n+1) +1; /// if maxpts<minpts, maxpts is set to 10*minpts; /// \param[in] epsrel Specified relative accuracy.; /// \param[in] epsabs Specified absolute accuracy.; /// The integration algorithm will attempt to reach either the relative or the absolute accuracy.; /// In case the maximum function called is reached the algorithm will stop earlier without having reached; /// the desired accuracy; ///; /// \param[out] relerr Contains, on exit, an estimation of the relative accuracy of the result.; /// \param[out] nfnevl number of function evaluations performed.; /// \param[out] ifail; /// \parblock; /// 0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; ///; /// 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the; /// specified value of maxpts.; ///; /// 3 n<2 or n>15; /// \endparblock; ///; /// Method:; ///; /// The default method used is the Genz-Mallik adaptive multidimensional algorithm; /// using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); ///; /// Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator(); /// to different integrators.; /// Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class; /// Possible methods are : Vegas, Miser or Plain; /// IN case of MC integration the accuracy is determined by the number of function calls, one should be; /// careful not t",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:656,Integrability,integrat,integration,656,"////////////////////////////////////////////////////////////////////////////////; /// This function computes, to an attempted specified accuracy, the value of; /// the integral; ///; /// \param[in] n Number of dimensions [2,15]; /// \param[in] a,b One-dimensional arrays of length >= N . On entry A[i], and B[i],; /// contain the lower and upper limits of integration, respectively.; /// \param[in] maxpts Maximum number of function evaluations to be allowed.; /// maxpts >= 2^n +2*n*(n+1) +1; /// if maxpts<minpts, maxpts is set to 10*minpts; /// \param[in] epsrel Specified relative accuracy.; /// \param[in] epsabs Specified absolute accuracy.; /// The integration algorithm will attempt to reach either the relative or the absolute accuracy.; /// In case the maximum function called is reached the algorithm will stop earlier without having reached; /// the desired accuracy; ///; /// \param[out] relerr Contains, on exit, an estimation of the relative accuracy of the result.; /// \param[out] nfnevl number of function evaluations performed.; /// \param[out] ifail; /// \parblock; /// 0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; ///; /// 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the; /// specified value of maxpts.; ///; /// 3 n<2 or n>15; /// \endparblock; ///; /// Method:; ///; /// The default method used is the Genz-Mallik adaptive multidimensional algorithm; /// using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); ///; /// Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator(); /// to different integrators.; /// Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class; /// Possible methods are : Vegas, Miser or Plain; /// IN case of MC integration the accuracy is determined by the number of function calls, one should be; /// careful not t",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1649,Integrability,Integrat,IntegratorMultiDimOptions,1649,"////////////////////////////////////////; /// This function computes, to an attempted specified accuracy, the value of; /// the integral; ///; /// \param[in] n Number of dimensions [2,15]; /// \param[in] a,b One-dimensional arrays of length >= N . On entry A[i], and B[i],; /// contain the lower and upper limits of integration, respectively.; /// \param[in] maxpts Maximum number of function evaluations to be allowed.; /// maxpts >= 2^n +2*n*(n+1) +1; /// if maxpts<minpts, maxpts is set to 10*minpts; /// \param[in] epsrel Specified relative accuracy.; /// \param[in] epsabs Specified absolute accuracy.; /// The integration algorithm will attempt to reach either the relative or the absolute accuracy.; /// In case the maximum function called is reached the algorithm will stop earlier without having reached; /// the desired accuracy; ///; /// \param[out] relerr Contains, on exit, an estimation of the relative accuracy of the result.; /// \param[out] nfnevl number of function evaluations performed.; /// \param[out] ifail; /// \parblock; /// 0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; ///; /// 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the; /// specified value of maxpts.; ///; /// 3 n<2 or n>15; /// \endparblock; ///; /// Method:; ///; /// The default method used is the Genz-Mallik adaptive multidimensional algorithm; /// using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); ///; /// Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator(); /// to different integrators.; /// Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class; /// Possible methods are : Vegas, Miser or Plain; /// IN case of MC integration the accuracy is determined by the number of function calls, one should be; /// careful not to use a too large value of maxpts; ///",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1717,Integrability,integrat,integrators,1717,"////////////////////////////////////////; /// This function computes, to an attempted specified accuracy, the value of; /// the integral; ///; /// \param[in] n Number of dimensions [2,15]; /// \param[in] a,b One-dimensional arrays of length >= N . On entry A[i], and B[i],; /// contain the lower and upper limits of integration, respectively.; /// \param[in] maxpts Maximum number of function evaluations to be allowed.; /// maxpts >= 2^n +2*n*(n+1) +1; /// if maxpts<minpts, maxpts is set to 10*minpts; /// \param[in] epsrel Specified relative accuracy.; /// \param[in] epsabs Specified absolute accuracy.; /// The integration algorithm will attempt to reach either the relative or the absolute accuracy.; /// In case the maximum function called is reached the algorithm will stop earlier without having reached; /// the desired accuracy; ///; /// \param[out] relerr Contains, on exit, an estimation of the relative accuracy of the result.; /// \param[out] nfnevl number of function evaluations performed.; /// \param[out] ifail; /// \parblock; /// 0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; ///; /// 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the; /// specified value of maxpts.; ///; /// 3 n<2 or n>15; /// \endparblock; ///; /// Method:; ///; /// The default method used is the Genz-Mallik adaptive multidimensional algorithm; /// using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); ///; /// Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator(); /// to different integrators.; /// Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class; /// Possible methods are : Vegas, Miser or Plain; /// IN case of MC integration the accuracy is determined by the number of function calls, one should be; /// careful not to use a too large value of maxpts; ///",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1750,Integrability,integrat,integrators,1750,"////////////////////////////////////////; /// This function computes, to an attempted specified accuracy, the value of; /// the integral; ///; /// \param[in] n Number of dimensions [2,15]; /// \param[in] a,b One-dimensional arrays of length >= N . On entry A[i], and B[i],; /// contain the lower and upper limits of integration, respectively.; /// \param[in] maxpts Maximum number of function evaluations to be allowed.; /// maxpts >= 2^n +2*n*(n+1) +1; /// if maxpts<minpts, maxpts is set to 10*minpts; /// \param[in] epsrel Specified relative accuracy.; /// \param[in] epsabs Specified absolute accuracy.; /// The integration algorithm will attempt to reach either the relative or the absolute accuracy.; /// In case the maximum function called is reached the algorithm will stop earlier without having reached; /// the desired accuracy; ///; /// \param[out] relerr Contains, on exit, an estimation of the relative accuracy of the result.; /// \param[out] nfnevl number of function evaluations performed.; /// \param[out] ifail; /// \parblock; /// 0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; ///; /// 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the; /// specified value of maxpts.; ///; /// 3 n<2 or n>15; /// \endparblock; ///; /// Method:; ///; /// The default method used is the Genz-Mallik adaptive multidimensional algorithm; /// using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); ///; /// Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator(); /// to different integrators.; /// Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class; /// Possible methods are : Vegas, Miser or Plain; /// IN case of MC integration the accuracy is determined by the number of function calls, one should be; /// careful not to use a too large value of maxpts; ///",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1769,Integrability,integrat,integrators,1769,"////////////////////////////////////////; /// This function computes, to an attempted specified accuracy, the value of; /// the integral; ///; /// \param[in] n Number of dimensions [2,15]; /// \param[in] a,b One-dimensional arrays of length >= N . On entry A[i], and B[i],; /// contain the lower and upper limits of integration, respectively.; /// \param[in] maxpts Maximum number of function evaluations to be allowed.; /// maxpts >= 2^n +2*n*(n+1) +1; /// if maxpts<minpts, maxpts is set to 10*minpts; /// \param[in] epsrel Specified relative accuracy.; /// \param[in] epsabs Specified absolute accuracy.; /// The integration algorithm will attempt to reach either the relative or the absolute accuracy.; /// In case the maximum function called is reached the algorithm will stop earlier without having reached; /// the desired accuracy; ///; /// \param[out] relerr Contains, on exit, an estimation of the relative accuracy of the result.; /// \param[out] nfnevl number of function evaluations performed.; /// \param[out] ifail; /// \parblock; /// 0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; ///; /// 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the; /// specified value of maxpts.; ///; /// 3 n<2 or n>15; /// \endparblock; ///; /// Method:; ///; /// The default method used is the Genz-Mallik adaptive multidimensional algorithm; /// using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); ///; /// Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator(); /// to different integrators.; /// Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class; /// Possible methods are : Vegas, Miser or Plain; /// IN case of MC integration the accuracy is determined by the number of function calls, one should be; /// careful not to use a too large value of maxpts; ///",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1897,Integrability,integrat,integration,1897,"////////////////////////////////////////; /// This function computes, to an attempted specified accuracy, the value of; /// the integral; ///; /// \param[in] n Number of dimensions [2,15]; /// \param[in] a,b One-dimensional arrays of length >= N . On entry A[i], and B[i],; /// contain the lower and upper limits of integration, respectively.; /// \param[in] maxpts Maximum number of function evaluations to be allowed.; /// maxpts >= 2^n +2*n*(n+1) +1; /// if maxpts<minpts, maxpts is set to 10*minpts; /// \param[in] epsrel Specified relative accuracy.; /// \param[in] epsabs Specified absolute accuracy.; /// The integration algorithm will attempt to reach either the relative or the absolute accuracy.; /// In case the maximum function called is reached the algorithm will stop earlier without having reached; /// the desired accuracy; ///; /// \param[out] relerr Contains, on exit, an estimation of the relative accuracy of the result.; /// \param[out] nfnevl number of function evaluations performed.; /// \param[out] ifail; /// \parblock; /// 0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; ///; /// 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the; /// specified value of maxpts.; ///; /// 3 n<2 or n>15; /// \endparblock; ///; /// Method:; ///; /// The default method used is the Genz-Mallik adaptive multidimensional algorithm; /// using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); ///; /// Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator(); /// to different integrators.; /// Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class; /// Possible methods are : Vegas, Miser or Plain; /// IN case of MC integration the accuracy is determined by the number of function calls, one should be; /// careful not to use a too large value of maxpts; ///",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1447,Modifiability,adapt,adaptive,1447,"////////////////////////////////////////; /// This function computes, to an attempted specified accuracy, the value of; /// the integral; ///; /// \param[in] n Number of dimensions [2,15]; /// \param[in] a,b One-dimensional arrays of length >= N . On entry A[i], and B[i],; /// contain the lower and upper limits of integration, respectively.; /// \param[in] maxpts Maximum number of function evaluations to be allowed.; /// maxpts >= 2^n +2*n*(n+1) +1; /// if maxpts<minpts, maxpts is set to 10*minpts; /// \param[in] epsrel Specified relative accuracy.; /// \param[in] epsabs Specified absolute accuracy.; /// The integration algorithm will attempt to reach either the relative or the absolute accuracy.; /// In case the maximum function called is reached the algorithm will stop earlier without having reached; /// the desired accuracy; ///; /// \param[out] relerr Contains, on exit, an estimation of the relative accuracy of the result.; /// \param[out] nfnevl number of function evaluations performed.; /// \param[out] ifail; /// \parblock; /// 0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; ///; /// 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the; /// specified value of maxpts.; ///; /// 3 n<2 or n>15; /// \endparblock; ///; /// Method:; ///; /// The default method used is the Genz-Mallik adaptive multidimensional algorithm; /// using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); ///; /// Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator(); /// to different integrators.; /// Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class; /// Possible methods are : Vegas, Miser or Plain; /// IN case of MC integration the accuracy is determined by the number of function calls, one should be; /// careful not to use a too large value of maxpts; ///",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1516,Modifiability,Adapt,AdaptiveIntegratorMultiDim,1516,"////////////////////////////////////////; /// This function computes, to an attempted specified accuracy, the value of; /// the integral; ///; /// \param[in] n Number of dimensions [2,15]; /// \param[in] a,b One-dimensional arrays of length >= N . On entry A[i], and B[i],; /// contain the lower and upper limits of integration, respectively.; /// \param[in] maxpts Maximum number of function evaluations to be allowed.; /// maxpts >= 2^n +2*n*(n+1) +1; /// if maxpts<minpts, maxpts is set to 10*minpts; /// \param[in] epsrel Specified relative accuracy.; /// \param[in] epsabs Specified absolute accuracy.; /// The integration algorithm will attempt to reach either the relative or the absolute accuracy.; /// In case the maximum function called is reached the algorithm will stop earlier without having reached; /// the desired accuracy; ///; /// \param[out] relerr Contains, on exit, an estimation of the relative accuracy of the result.; /// \param[out] nfnevl number of function evaluations performed.; /// \param[out] ifail; /// \parblock; /// 0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; ///; /// 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the; /// specified value of maxpts.; ///; /// 3 n<2 or n>15; /// \endparblock; ///; /// Method:; ///; /// The default method used is the Genz-Mallik adaptive multidimensional algorithm; /// using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); ///; /// Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator(); /// to different integrators.; /// Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class; /// Possible methods are : Vegas, Miser or Plain; /// IN case of MC integration the accuracy is determined by the number of function calls, one should be; /// careful not to use a too large value of maxpts; ///",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1036,Performance,perform,performed,1036,"///////////////////////////////////////////////////////////////////; /// This function computes, to an attempted specified accuracy, the value of; /// the integral; ///; /// \param[in] n Number of dimensions [2,15]; /// \param[in] a,b One-dimensional arrays of length >= N . On entry A[i], and B[i],; /// contain the lower and upper limits of integration, respectively.; /// \param[in] maxpts Maximum number of function evaluations to be allowed.; /// maxpts >= 2^n +2*n*(n+1) +1; /// if maxpts<minpts, maxpts is set to 10*minpts; /// \param[in] epsrel Specified relative accuracy.; /// \param[in] epsabs Specified absolute accuracy.; /// The integration algorithm will attempt to reach either the relative or the absolute accuracy.; /// In case the maximum function called is reached the algorithm will stop earlier without having reached; /// the desired accuracy; ///; /// \param[out] relerr Contains, on exit, an estimation of the relative accuracy of the result.; /// \param[out] nfnevl number of function evaluations performed.; /// \param[out] ifail; /// \parblock; /// 0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; ///; /// 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the; /// specified value of maxpts.; ///; /// 3 n<2 or n>15; /// \endparblock; ///; /// Method:; ///; /// The default method used is the Genz-Mallik adaptive multidimensional algorithm; /// using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); ///; /// Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator(); /// to different integrators.; /// Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class; /// Possible methods are : Vegas, Miser or Plain; /// IN case of MC integration the accuracy is determined by the number of function calls, one should be; /// careful not to use a too ",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1167,Performance,perform,performed,1167,"////////////////////////////////////////; /// This function computes, to an attempted specified accuracy, the value of; /// the integral; ///; /// \param[in] n Number of dimensions [2,15]; /// \param[in] a,b One-dimensional arrays of length >= N . On entry A[i], and B[i],; /// contain the lower and upper limits of integration, respectively.; /// \param[in] maxpts Maximum number of function evaluations to be allowed.; /// maxpts >= 2^n +2*n*(n+1) +1; /// if maxpts<minpts, maxpts is set to 10*minpts; /// \param[in] epsrel Specified relative accuracy.; /// \param[in] epsabs Specified absolute accuracy.; /// The integration algorithm will attempt to reach either the relative or the absolute accuracy.; /// In case the maximum function called is reached the algorithm will stop earlier without having reached; /// the desired accuracy; ///; /// \param[out] relerr Contains, on exit, an estimation of the relative accuracy of the result.; /// \param[out] nfnevl number of function evaluations performed.; /// \param[out] ifail; /// \parblock; /// 0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; ///; /// 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the; /// specified value of maxpts.; ///; /// 3 n<2 or n>15; /// \endparblock; ///; /// Method:; ///; /// The default method used is the Genz-Mallik adaptive multidimensional algorithm; /// using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); ///; /// Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator(); /// to different integrators.; /// Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class; /// Possible methods are : Vegas, Miser or Plain; /// IN case of MC integration the accuracy is determined by the number of function calls, one should be; /// careful not to use a too large value of maxpts; ///",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:19,Availability,toler,tolerance,19,"// use default abs tolerance = relative tolerance",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:40,Availability,toler,tolerance,40,"// use default abs tolerance = relative tolerance",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:46,Testability,log,log,46,"// This can happen when switching from lin to log scale.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:3,Performance,Optimiz,Optimize,3,"// Optimize the computation of the scale in Y in case the min/max of the; // function oscillate around a constant value",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:6,Testability,log,logx,6,"// If logx, we must bin in logx and not in x; // otherwise in case of several decades, one gets wrong results.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:27,Testability,log,logx,27,"// If logx, we must bin in logx and not in x; // otherwise in case of several decades, one gets wrong results.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:3,Deployability,update,update,3,"// update saved histogram in case it was deleted or if it is the first time the method is called; // for example when called from TF1::GetHistogram()",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:86,Deployability,Release,Release,86,"////////////////////////////////////////////////////////////////////////////////; /// Release parameter number ipar during a fit operation.; /// After releasing it, the parameter; /// can vary freely in the fit. The parameter limits are reset to 0,0.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:165,Security,access,accessed,165,"////////////////////////////////////////////////////////////////////////////////; /// Static function setting the current function.; /// the current function may be accessed in static C-like functions; /// when fitting or painting a function.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:137,Availability,error,errors,137,"////////////////////////////////////////////////////////////////////////////////; /// Set the result from the fit; /// parameter values, errors, chi2, etc...; /// Optionally a pointer to a vector (with size fNpar) of the parameter indices in the FitResult can be passed; /// This is useful in the case of a combined fit with different functions, and the FitResult contains the global result; /// By default it is assume that indpar = {0,1,2,....,fNpar-1}.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:11,Availability,error,errors,11,"// in case errors are not present do not set them",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:13,Performance,cache,cached,13,"//invalidate cached integral since parameters have changed",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:90,Availability,error,error,90,"////////////////////////////////////////////////////////////////////////////////; /// Set error for parameter number ipar",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:90,Availability,error,errors,90,"////////////////////////////////////////////////////////////////////////////////; /// Set errors for all active parameters; /// when calling this function, the array errors must have at least fNpar values",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:166,Availability,error,errors,166,"////////////////////////////////////////////////////////////////////////////////; /// Set errors for all active parameters; /// when calling this function, the array errors must have at least fNpar values",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:17,Deployability,update,updates,17,"// automatically updates sub-functions",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:3,Usability,clear,clear,3,"// clear vector contents",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:43,Safety,safe,safe,43,"// should not be necessary, but just to be safe",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:180,Testability,test,tested,180,"////////////////////////////////////////////////////////////////////////////////; /// Static function to set the global flag to reject points; /// the fgRejectPoint global flag is tested by all fit functions; /// if TRUE the point is not included in the fit.; /// This flag can be set by a user in a fitting function.; /// The fgRejectPoint flag is reset by the TH1 and TGraph fitting functions.",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:3,Integrability,wrap,wrapped,3,"// wrapped function in interface for integral calculation; // using abs value of integral",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:23,Integrability,interface,interface,23,"// wrapped function in interface for integral calculation; // using abs value of integral",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:103,Deployability,integrat,integrator,103,"// calculate now integral of x^n f(x); // wrapped the member function EvalNum in interface required by integrator using the functor class",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:42,Integrability,wrap,wrapped,42,"// calculate now integral of x^n f(x); // wrapped the member function EvalNum in interface required by integrator using the functor class",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:81,Integrability,interface,interface,81,"// calculate now integral of x^n f(x); // wrapped the member function EvalNum in interface required by integrator using the functor class",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:103,Integrability,integrat,integrator,103,"// calculate now integral of x^n f(x); // wrapped the member function EvalNum in interface required by integrator using the functor class",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:105,Deployability,integrat,integrator,105,"// calculate now integral of xf(x); // wrapped the member function EvalFirstMom in interface required by integrator using the functor class",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:39,Integrability,wrap,wrapped,39,"// calculate now integral of xf(x); // wrapped the member function EvalFirstMom in interface required by integrator using the functor class",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:83,Integrability,interface,interface,83,"// calculate now integral of xf(x); // wrapped the member function EvalFirstMom in interface required by integrator using the functor class",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:105,Integrability,integrat,integrator,105,"// calculate now integral of xf(x); // wrapped the member function EvalFirstMom in interface required by integrator using the functor class",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:40,Integrability,wrap,wrapper,40,"// use different mean value in function wrapper",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:263,Integrability,interface,interface,263,"//______________________________________________________________________________; // some useful static utility functions to compute sampling points for IntegralFast; ////////////////////////////////////////////////////////////////////////////////; /// Type safe interface (static method); /// The number of sampling points are taken from the TGraph",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:258,Safety,safe,safe,258,"//______________________________________________________________________________; // some useful static utility functions to compute sampling points for IntegralFast; ////////////////////////////////////////////////////////////////////////////////; /// Type safe interface (static method); /// The number of sampling points are taken from the TGraph",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:96,Integrability,interface,interface,96,"////////////////////////////////////////////////////////////////////////////////; /// Type safe interface (static method); /// A TGraph is created with new with num points and the pointer to the; /// graph is returned by the function. It is the responsibility of the; /// user to delete the object.; /// if num is invalid (<=0) NULL is returned",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:91,Safety,safe,safe,91,"////////////////////////////////////////////////////////////////////////////////; /// Type safe interface (static method); /// A TGraph is created with new with num points and the pointer to the; /// graph is returned by the function. It is the responsibility of the; /// user to delete the object.; /// if num is invalid (<=0) NULL is returned",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:108,Integrability,interface,interface,108,"////////////////////////////////////////////////////////////////////////////////; /// Type: unsafe but fast interface filling the arrays x and w (static method); ///; /// Given the number of sampling points this routine fills the arrays x and w; /// of length num, containing the abscissa and weight of the Gauss-Legendre; /// n-point quadrature formula.; ///; /// Gauss-Legendre:; /** \f[; W(x)=1 -1<x<1 \\; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}; \f]; **/; /// num is the number of sampling points (>0); /// x and w are arrays of size num; /// eps is the relative precision; ///; /// If num<=0 or eps<=0 no action is done.; ///; /// Reference: Numerical Recipes in C, Second Edition",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:212,Integrability,rout,routine,212,"////////////////////////////////////////////////////////////////////////////////; /// Type: unsafe but fast interface filling the arrays x and w (static method); ///; /// Given the number of sampling points this routine fills the arrays x and w; /// of length num, containing the abscissa and weight of the Gauss-Legendre; /// n-point quadrature formula.; ///; /// Gauss-Legendre:; /** \f[; W(x)=1 -1<x<1 \\; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}; \f]; **/; /// num is the number of sampling points (>0); /// x and w are arrays of size num; /// eps is the relative precision; ///; /// If num<=0 or eps<=0 no action is done.; ///; /// Reference: Numerical Recipes in C, Second Edition",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:92,Safety,unsafe,unsafe,92,"////////////////////////////////////////////////////////////////////////////////; /// Type: unsafe but fast interface filling the arrays x and w (static method); ///; /// Given the number of sampling points this routine fills the arrays x and w; /// of length num, containing the abscissa and weight of the Gauss-Legendre; /// n-point quadrature formula.; ///; /// Gauss-Legendre:; /** \f[; W(x)=1 -1<x<1 \\; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}; \f]; **/; /// num is the number of sampling points (>0); /// x and w are arrays of size num; /// eps is the relative precision; ///; /// If num<=0 or eps<=0 no action is done.; ///; /// Reference: Numerical Recipes in C, Second Edition",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:194,Energy Efficiency,efficient,efficient,194,"/** \class TF1Parameters; TF1 Parameters class; */; ////////////////////////////////////////////////////////////////////////////////; /// Returns the parameter number given a name; /// not very efficient but list of parameters is typically small; /// could use a map if needed",MatchSource.CODE_COMMENT,hist/hist/src/TF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF12.cxx:311,Deployability,update,updated,311,"////////////////////////////////////////////////////////////////////////////////; /// Set the value of the constant for the TF2; ///; /// constant in X when projecting along Y; /// constant in Y when projecting along X; /// The function title is set to include the value of the constant; /// The current pad is updated",MatchSource.CODE_COMMENT,hist/hist/src/TF12.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF12.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx:243,Availability,avail,available,243,"/** \class TF1Convolution; \ingroup Functions; \brief Class wrapping convolution of two functions. Class wrapping convolution of two functions: evaluation of \f$\int f(x)g(x-t)dx\f$. The convolution is performed by default using FFTW if it is available .; One can pass optionally the range of the convolution (by default the first function range is used).; Note that when using Discrete Fourier Transform (as FFTW), it is a circular transform, so the functions should be; approximately zero at the end of the range. If they are significantly different than zero on one side (e.g. the left side); a spill over will occur on the other side (e.g right side).; If no function range is given by default the function1 range + 10% is used; One should use also a not too small number of points for the DFT (a minimum of 1000). By default 10000 points are used.; */",MatchSource.CODE_COMMENT,hist/hist/src/TF1Convolution.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx:60,Integrability,wrap,wrapping,60,"/** \class TF1Convolution; \ingroup Functions; \brief Class wrapping convolution of two functions. Class wrapping convolution of two functions: evaluation of \f$\int f(x)g(x-t)dx\f$. The convolution is performed by default using FFTW if it is available .; One can pass optionally the range of the convolution (by default the first function range is used).; Note that when using Discrete Fourier Transform (as FFTW), it is a circular transform, so the functions should be; approximately zero at the end of the range. If they are significantly different than zero on one side (e.g. the left side); a spill over will occur on the other side (e.g right side).; If no function range is given by default the function1 range + 10% is used; One should use also a not too small number of points for the DFT (a minimum of 1000). By default 10000 points are used.; */",MatchSource.CODE_COMMENT,hist/hist/src/TF1Convolution.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx:105,Integrability,wrap,wrapping,105,"/** \class TF1Convolution; \ingroup Functions; \brief Class wrapping convolution of two functions. Class wrapping convolution of two functions: evaluation of \f$\int f(x)g(x-t)dx\f$. The convolution is performed by default using FFTW if it is available .; One can pass optionally the range of the convolution (by default the first function range is used).; Note that when using Discrete Fourier Transform (as FFTW), it is a circular transform, so the functions should be; approximately zero at the end of the range. If they are significantly different than zero on one side (e.g. the left side); a spill over will occur on the other side (e.g right side).; If no function range is given by default the function1 range + 10% is used; One should use also a not too small number of points for the DFT (a minimum of 1000). By default 10000 points are used.; */",MatchSource.CODE_COMMENT,hist/hist/src/TF1Convolution.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx:202,Performance,perform,performed,202,"/** \class TF1Convolution; \ingroup Functions; \brief Class wrapping convolution of two functions. Class wrapping convolution of two functions: evaluation of \f$\int f(x)g(x-t)dx\f$. The convolution is performed by default using FFTW if it is available .; One can pass optionally the range of the convolution (by default the first function range is used).; Note that when using Discrete Fourier Transform (as FFTW), it is a circular transform, so the functions should be; approximately zero at the end of the range. If they are significantly different than zero on one side (e.g. the left side); a spill over will occur on the other side (e.g right side).; If no function range is given by default the function1 range + 10% is used; One should use also a not too small number of points for the DFT (a minimum of 1000). By default 10000 points are used.; */",MatchSource.CODE_COMMENT,hist/hist/src/TF1Convolution.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx:40,Availability,error,error,40,"// functions must be 1d- if not flag an error",MatchSource.CODE_COMMENT,hist/hist/src/TF1Convolution.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx:143,Modifiability,variab,variable,143,"////////////////////////////////////////////////////////////////////////////////; /// Copy constructor (necessary to hold unique_ptr as member variable).",MatchSource.CODE_COMMENT,hist/hist/src/TF1Convolution.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx:86,Performance,Perform,Perform,86,"////////////////////////////////////////////////////////////////////////////////; /// Perform the FFT of the two functions.",MatchSource.CODE_COMMENT,hist/hist/src/TF1Convolution.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx:86,Performance,Perform,Perform,86,"////////////////////////////////////////////////////////////////////////////////; /// Perform FFT convolution.",MatchSource.CODE_COMMENT,hist/hist/src/TF1Convolution.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx:86,Performance,Perform,Perform,86,"////////////////////////////////////////////////////////////////////////////////; /// Perform numerical convolution.; ///",MatchSource.CODE_COMMENT,hist/hist/src/TF1Convolution.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx:23,Performance,cache,cache,23,"/// Could in principle cache the integral in a Graph as it is done for the FFTW",MatchSource.CODE_COMMENT,hist/hist/src/TF1Convolution.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx:194,Safety,avoid,avoid,194,"////////////////////////////////////////////////////////////////////////////////; /// Set the fraction of extra range used when doing an FFT convolution.; /// The extra range is often needed to avoid mirroring effect of the resulting convolution; /// function at the borders.; /// By default an extra range of 0.1 is used.",MatchSource.CODE_COMMENT,hist/hist/src/TF1Convolution.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx:258,Modifiability,extend,extended,258,"////////////////////////////////////////////////////////////////////////////////; /// Set the actual range used for the convolution.; /// In case a or b are -inf or +inf and FFT convolution is used, then the; /// range of the first function will be used and extended by the default extra range fraction.",MatchSource.CODE_COMMENT,hist/hist/src/TF1Convolution.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update the two component functions of the convolution.",MatchSource.CODE_COMMENT,hist/hist/src/TF1Convolution.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx:139,Availability,error,error,139,"// calculate the eror on an integral from a to b of a parametetric function f when the parameters; // are estimated from a fit and have an error represented by the covariance matrix of the fit.; // The latest fit result is used; // need to create the gradient functions w.r.t to the parameters; // loop on all parameters",MatchSource.CODE_COMMENT,hist/hist/src/TF1Helper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx:14,Availability,error,errors,14,"// check that errors are provided",MatchSource.CODE_COMMENT,hist/hist/src/TF1Helper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx:43,Availability,error,errors,43,"// loop on the parameter and calculate the errors",MatchSource.CODE_COMMENT,hist/hist/src/TF1Helper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx:7,Availability,toler,tolerance,7,"// use tolerance factor of 10 smaller than parameter errors",MatchSource.CODE_COMMENT,hist/hist/src/TF1Helper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx:53,Availability,error,errors,53,"// use tolerance factor of 10 smaller than parameter errors",MatchSource.CODE_COMMENT,hist/hist/src/TF1Helper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx:24,Availability,error,error,24,"// check that parameter error is not zero - otherwise skip it; // should check the limits",MatchSource.CODE_COMMENT,hist/hist/src/TF1Helper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx:55,Deployability,integrat,integration,55,"//if (ifail) Warning(""TF1Helper::IntegralError"",""n-dim integration failed code=%d I = %g, relerr =%g, ncall = %d, maxpts = %d, epsrel = %g, epsabs = %g, "",ifail,integral,relerr,nfnevl,maxpts,epsrel,epsabs);",MatchSource.CODE_COMMENT,hist/hist/src/TF1Helper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx:55,Integrability,integrat,integration,55,"//if (ifail) Warning(""TF1Helper::IntegralError"",""n-dim integration failed code=%d I = %g, relerr =%g, ncall = %d, maxpts = %d, epsrel = %g, epsabs = %g, "",ifail,integral,relerr,nfnevl,maxpts,epsrel,epsabs);",MatchSource.CODE_COMMENT,hist/hist/src/TF1Helper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx:176,Availability,error,error,176,"// std::cout << "" ipar "" << i << "" sigma "" << sqrt(covMatrix(i,i)) << "" rel "" << sqrt(covMatrix(i,i))/std::abs(func->GetParameter(i)) << "" integral "" << integral << "" +/- "" << error << "" "" <<; // error/std::abs(integral) << std::endl;; // estimate numerical error (neglect correlations)",MatchSource.CODE_COMMENT,hist/hist/src/TF1Helper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx:196,Availability,error,error,196,"// std::cout << "" ipar "" << i << "" sigma "" << sqrt(covMatrix(i,i)) << "" rel "" << sqrt(covMatrix(i,i))/std::abs(func->GetParameter(i)) << "" integral "" << integral << "" +/- "" << error << "" "" <<; // error/std::abs(integral) << std::endl;; // estimate numerical error (neglect correlations)",MatchSource.CODE_COMMENT,hist/hist/src/TF1Helper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx:258,Availability,error,error,258,"// std::cout << "" ipar "" << i << "" sigma "" << sqrt(covMatrix(i,i)) << "" rel "" << sqrt(covMatrix(i,i))/std::abs(func->GetParameter(i)) << "" integral "" << integral << "" +/- "" << error << "" "" <<; // error/std::abs(integral) << std::endl;; // estimate numerical error (neglect correlations)",MatchSource.CODE_COMMENT,hist/hist/src/TF1Helper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx:25,Availability,error,error,25,"//std::cout << ""integral error is "" << result << "" num error is "" << numError << std::endl;",MatchSource.CODE_COMMENT,hist/hist/src/TF1Helper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx:55,Availability,error,error,55,"//std::cout << ""integral error is "" << result << "" num error is "" << numError << std::endl;",MatchSource.CODE_COMMENT,hist/hist/src/TF1Helper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1NormSum.cxx:143,Modifiability,variab,variable,143,"////////////////////////////////////////////////////////////////////////////////; /// Copy constructor (necessary to hold unique_ptr as member variable)",MatchSource.CODE_COMMENT,hist/hist/src/TF1NormSum.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1NormSum.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1NormSum.cxx:3,Deployability,update,update,3,"// update function integral if not equal",MatchSource.CODE_COMMENT,hist/hist/src/TF1NormSum.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1NormSum.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1NormSum.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update the component functions of the normalized sum",MatchSource.CODE_COMMENT,hist/hist/src/TF1NormSum.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1NormSum.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF2.cxx:148,Modifiability,variab,variables,148,"/** \class TF2; \ingroup Functions; \brief A 2-Dim function with parameters. The following types of functions can be created:. 1. [Expression using variables x and y](\ref TF2a); 2. [Expression using a user defined function](\ref TF2b); 3. [Lambda Expression with x and y variables and parameters](\ref TF2c). \anchor TF2a; ### Expression using variables x and y. Begin_Macro (source); {; auto f2 = new TF2(""f2"",""sin(x)*sin(y)/(x*y)"",0,5,0,5);; f2->Draw();; }; End_Macro. \anchor TF2b; ### Expression using a user defined function. ~~~~{.cpp}; Double_t func(Double_t *val, Double_t *par); {; Float_t x = val[0];; Float_t y = val[1];; Double_t f = x*x-y*y;; return f;; }. void fplot(); {; auto f = new TF2(""f"",func,-1,1,-1,1);; f->Draw(""surf1"");; }; ~~~~. \anchor TF2c; ### Lambda Expression with x and y variables and parameters. ~~~~{.cpp}; root [0] TF2 f2(""f2"", [](double* x, double*p) { return x[0] + x[1] * p[0]; }, 0., 1., 0., 1., 1); (TF2 &) Name: f2 Title: f2; root [1] f2.SetParameter(0, 1.); root [2] f2.Eval(1., 2.); (double) 3.0000000; ~~~~. See TF1 class for the list of functions formats; */; ////////////////////////////////////////////////////////////////////////////////; /// TF2 default constructor",MatchSource.CODE_COMMENT,hist/hist/src/TF2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF2.cxx:272,Modifiability,variab,variables,272,"/** \class TF2; \ingroup Functions; \brief A 2-Dim function with parameters. The following types of functions can be created:. 1. [Expression using variables x and y](\ref TF2a); 2. [Expression using a user defined function](\ref TF2b); 3. [Lambda Expression with x and y variables and parameters](\ref TF2c). \anchor TF2a; ### Expression using variables x and y. Begin_Macro (source); {; auto f2 = new TF2(""f2"",""sin(x)*sin(y)/(x*y)"",0,5,0,5);; f2->Draw();; }; End_Macro. \anchor TF2b; ### Expression using a user defined function. ~~~~{.cpp}; Double_t func(Double_t *val, Double_t *par); {; Float_t x = val[0];; Float_t y = val[1];; Double_t f = x*x-y*y;; return f;; }. void fplot(); {; auto f = new TF2(""f"",func,-1,1,-1,1);; f->Draw(""surf1"");; }; ~~~~. \anchor TF2c; ### Lambda Expression with x and y variables and parameters. ~~~~{.cpp}; root [0] TF2 f2(""f2"", [](double* x, double*p) { return x[0] + x[1] * p[0]; }, 0., 1., 0., 1., 1); (TF2 &) Name: f2 Title: f2; root [1] f2.SetParameter(0, 1.); root [2] f2.Eval(1., 2.); (double) 3.0000000; ~~~~. See TF1 class for the list of functions formats; */; ////////////////////////////////////////////////////////////////////////////////; /// TF2 default constructor",MatchSource.CODE_COMMENT,hist/hist/src/TF2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF2.cxx:345,Modifiability,variab,variables,345,"/** \class TF2; \ingroup Functions; \brief A 2-Dim function with parameters. The following types of functions can be created:. 1. [Expression using variables x and y](\ref TF2a); 2. [Expression using a user defined function](\ref TF2b); 3. [Lambda Expression with x and y variables and parameters](\ref TF2c). \anchor TF2a; ### Expression using variables x and y. Begin_Macro (source); {; auto f2 = new TF2(""f2"",""sin(x)*sin(y)/(x*y)"",0,5,0,5);; f2->Draw();; }; End_Macro. \anchor TF2b; ### Expression using a user defined function. ~~~~{.cpp}; Double_t func(Double_t *val, Double_t *par); {; Float_t x = val[0];; Float_t y = val[1];; Double_t f = x*x-y*y;; return f;; }. void fplot(); {; auto f = new TF2(""f"",func,-1,1,-1,1);; f->Draw(""surf1"");; }; ~~~~. \anchor TF2c; ### Lambda Expression with x and y variables and parameters. ~~~~{.cpp}; root [0] TF2 f2(""f2"", [](double* x, double*p) { return x[0] + x[1] * p[0]; }, 0., 1., 0., 1., 1); (TF2 &) Name: f2 Title: f2; root [1] f2.SetParameter(0, 1.); root [2] f2.Eval(1., 2.); (double) 3.0000000; ~~~~. See TF1 class for the list of functions formats; */; ////////////////////////////////////////////////////////////////////////////////; /// TF2 default constructor",MatchSource.CODE_COMMENT,hist/hist/src/TF2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF2.cxx:804,Modifiability,variab,variables,804,"/** \class TF2; \ingroup Functions; \brief A 2-Dim function with parameters. The following types of functions can be created:. 1. [Expression using variables x and y](\ref TF2a); 2. [Expression using a user defined function](\ref TF2b); 3. [Lambda Expression with x and y variables and parameters](\ref TF2c). \anchor TF2a; ### Expression using variables x and y. Begin_Macro (source); {; auto f2 = new TF2(""f2"",""sin(x)*sin(y)/(x*y)"",0,5,0,5);; f2->Draw();; }; End_Macro. \anchor TF2b; ### Expression using a user defined function. ~~~~{.cpp}; Double_t func(Double_t *val, Double_t *par); {; Float_t x = val[0];; Float_t y = val[1];; Double_t f = x*x-y*y;; return f;; }. void fplot(); {; auto f = new TF2(""f"",func,-1,1,-1,1);; f->Draw(""surf1"");; }; ~~~~. \anchor TF2c; ### Lambda Expression with x and y variables and parameters. ~~~~{.cpp}; root [0] TF2 f2(""f2"", [](double* x, double*p) { return x[0] + x[1] * p[0]; }, 0., 1., 0., 1., 1); (TF2 &) Name: f2 Title: f2; root [1] f2.SetParameter(0, 1.); root [2] f2.Eval(1., 2.); (double) 3.0000000; ~~~~. See TF1 class for the list of functions formats; */; ////////////////////////////////////////////////////////////////////////////////; /// TF2 default constructor",MatchSource.CODE_COMMENT,hist/hist/src/TF2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF2.cxx:465,Performance,perform,performed,465,"////////////////////////////////////////////////////////////////////////////////; /// Return minimum/maximum value of the function; ///; /// To find the minimum on a range, first set this range via the SetRange function.; /// If a vector x of coordinate is passed it will be used as starting point for the minimum.; /// In addition on exit x will contain the coordinate values at the minimuma; ///; /// If x is NULL or x is infinity or NaN, first, a grid search is performed to find the initial estimate of the; /// minimum location. The range of the function is divided into fNpx and fNpy; /// sub-ranges. If the function is ""good"" (or ""bad""), these values can be changed; /// by SetNpx and SetNpy functions; ///; /// Then, a minimization is used with starting values found by the grid search; /// The minimizer algorithm used (by default Minuit) can be changed by callinga; /// ROOT::Math::Minimizer::SetDefaultMinimizerType(""..""); /// Other option for the minimizer can be set using the static method of the MinimizerOptions class",MatchSource.CODE_COMMENT,hist/hist/src/TF2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF2.cxx:346,Performance,perform,performed,346,"////////////////////////////////////////////////////////////////////////////////; /// Compute the X and Y values corresponding to the minimum value of the function; ///; /// Return the minimum value of the function; /// To find the minimum on a range, first set this range via the SetRange function; ///; /// Method:; /// First, a grid search is performed to find the initial estimate of the; /// minimum location. The range of the function is divided into fNpx and fNpy; /// sub-ranges. If the function is ""good"" (or ""bad""), these values can be changed; /// by SetNpx and SetNpy functions; /// Then, a minimization is used with starting values found by the grid search; /// The minimizer algorithm used (by default Minuit) can be changed by callinga; /// ROOT::Math::Minimizer::SetDefaultMinimizerType(""..""); /// Other option for the minimizer can be set using the static method of the MinimizerOptions class; ///; /// Note that this method will always do first a grid search in contrast to GetMinimum",MatchSource.CODE_COMMENT,hist/hist/src/TF2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF2.cxx:459,Performance,perform,performed,459,"////////////////////////////////////////////////////////////////////////////////; /// Return minimum/maximum value of the function; ///; /// To find the minimum on a range, first set this range via the SetRange function; /// If a vector x of coordinate is passed it will be used as starting point for the minimum.; /// In addition on exit x will contain the coordinate values at the minimuma; /// If x is NULL or x is infinity or NaN, first, a grid search is performed to find the initial estimate of the; /// minimum location. The range of the function is divided into fNpx and fNpy; /// sub-ranges. If the function is ""good"" (or ""bad""), these values can be changed; /// by SetNpx and SetNpy functions; /// Then, a minimization is used with starting values found by the grid search; /// The minimizer algorithm used (by default Minuit) can be changed by callinga; /// ROOT::Math::Minimizer::SetDefaultMinimizerType(""..""); /// Other option for the minimizer can be set using the static method of the MinimizerOptions class",MatchSource.CODE_COMMENT,hist/hist/src/TF2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF2.cxx:201,Deployability,integrat,integrated,201,"////////////////////////////////////////////////////////////////////////////////; /// Return 2 random numbers following this function shape; ///; /// The distribution contained in this TF2 function is integrated; /// over the cell contents.; /// It is normalized to 1.; /// Getting the two random numbers implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which cell in the normalized integral r1 corresponds to; /// - make a linear interpolation in the returned cell; ///; ///; /// IMPORTANT NOTE; ///; /// The integral of the function is computed at fNpx * fNpy points.; /// If the function has sharp peaks, you should increase the number of; /// points (SetNpx, SetNpy) such that the peak is correctly tabulated; /// at several points.",MatchSource.CODE_COMMENT,hist/hist/src/TF2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF2.cxx:201,Integrability,integrat,integrated,201,"////////////////////////////////////////////////////////////////////////////////; /// Return 2 random numbers following this function shape; ///; /// The distribution contained in this TF2 function is integrated; /// over the cell contents.; /// It is normalized to 1.; /// Getting the two random numbers implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which cell in the normalized integral r1 corresponds to; /// - make a linear interpolation in the returned cell; ///; ///; /// IMPORTANT NOTE; ///; /// The integral of the function is computed at fNpx * fNpy points.; /// If the function has sharp peaks, you should increase the number of; /// points (SetNpx, SetNpy) such that the peak is correctly tabulated; /// at several points.",MatchSource.CODE_COMMENT,hist/hist/src/TF2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF3.cxx:460,Performance,perform,performed,460,"////////////////////////////////////////////////////////////////////////////////; /// Return minimum/maximum value of the function; ///; /// To find the minimum on a range, first set this range via the SetRange function; /// If a vector x of coordinate is passed it will be used as starting point for the minimum.; /// In addition on exit x will contain the coordinate values at the minimuma; /// If x is NULL or x is inifinity or NaN, first, a grid search is performed to find the initial estimate of the; /// minimum location. The range of the function is divided into fNpx and fNpy; /// sub-ranges. If the function is ""good"" (or ""bad""), these values can be changed; /// by SetNpx and SetNpy functions; ///; /// Then, a minimization is used with starting values found by the grid search; /// The minimizer algorithm used (by default Minuit) can be changed by callinga; /// ROOT::Math::Minimizer::SetDefaultMinimizerType(""..""); /// Other option for the minimizer can be set using the static method of the MinimizerOptions class",MatchSource.CODE_COMMENT,hist/hist/src/TF3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF3.cxx:361,Performance,perform,performed,361,"////////////////////////////////////////////////////////////////////////////////; /// Compute the X, Y and Z values corresponding to the minimum value of the function; /// on its range.; ///; /// Returns the function value at the minimum.; /// To find the minimum on a subrange, use the SetRange() function first.; ///; /// Method:; /// First, a grid search is performed to find the initial estimate of the; /// minimum location. The range of the function is divided; /// into fNpx,fNpy and fNpz sub-ranges. If the function is ""good"" (or ""bad""),; /// these values can be changed by SetNpx(), SetNpy() and SetNpz() functions.; /// Then, Minuit minimization is used with starting values found by the grid search; ///; /// Note that this method will always do first a grid search in contrast to GetMinimum",MatchSource.CODE_COMMENT,hist/hist/src/TF3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF3.cxx:201,Deployability,integrat,integrated,201,"////////////////////////////////////////////////////////////////////////////////; /// Return 3 random numbers following this function shape; ///; /// The distribution contained in this TF3 function is integrated; /// over the cell contents.; /// It is normalized to 1.; /// Getting the three random numbers implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which cell in the normalized integral r1 corresponds to; /// - make a linear interpolation in the returned cell; ///; /// IMPORTANT NOTE; ///; /// The integral of the function is computed at fNpx * fNpy * fNpz points.; /// If the function has sharp peaks, you should increase the number of; /// points (SetNpx, SetNpy, SetNpz) such that the peak is correctly tabulated; /// at several points.",MatchSource.CODE_COMMENT,hist/hist/src/TF3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF3.cxx:201,Integrability,integrat,integrated,201,"////////////////////////////////////////////////////////////////////////////////; /// Return 3 random numbers following this function shape; ///; /// The distribution contained in this TF3 function is integrated; /// over the cell contents.; /// It is normalized to 1.; /// Getting the three random numbers implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which cell in the normalized integral r1 corresponds to; /// - make a linear interpolation in the returned cell; ///; /// IMPORTANT NOTE; ///; /// The integral of the function is computed at fNpx * fNpy * fNpz points.; /// If the function has sharp peaks, you should increase the number of; /// points (SetNpx, SetNpy, SetNpz) such that the peak is correctly tabulated; /// at several points.",MatchSource.CODE_COMMENT,hist/hist/src/TF3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFitResult.cxx:38,Modifiability,Extend,Extends,38,/** \class TFitResult; \ingroup Hist; Extends the ROOT::Fit::Result class with a TNamed inheritance; providing easy possibility for I/O; */,MatchSource.CODE_COMMENT,hist/hist/src/TFitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFitResult.cxx:88,Modifiability,inherit,inheritance,88,/** \class TFitResult; \ingroup Hist; Extends the ROOT::Fit::Result class with a TNamed inheritance; providing easy possibility for I/O; */,MatchSource.CODE_COMMENT,hist/hist/src/TFitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFitResult.cxx:149,Availability,error,errors,149,"////////////////////////////////////////////////////////////////////////////////; /// Print result of the fit, by default chi2, parameter values and errors.; /// if option ""V"" is given print also error matrix and correlation",MatchSource.CODE_COMMENT,hist/hist/src/TFitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFitResult.cxx:196,Availability,error,error,196,"////////////////////////////////////////////////////////////////////////////////; /// Print result of the fit, by default chi2, parameter values and errors.; /// if option ""V"" is given print also error matrix and correlation",MatchSource.CODE_COMMENT,hist/hist/src/TFitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFitResult.cxx:505,Availability,Error,ErrorDef,505,"////////////////////////////////////////////////////////////////////////////////; /// Create a 2D contour around the minimum for the parameter ipar and jpar; /// if a minimum does not exist or is invalid it will return false; /// on exit a TGraph is filled with the contour points; /// the number of contour points is determined by the size of the TGraph.; /// if the size is zero a default number of points = 20 is used; /// pass optionally the confidence level, default is 0.683; /// it is assumed that ErrorDef() defines the right error definition; /// (i.e 1 sigma error for one parameter). If not the confidence level are scaled to new level",MatchSource.CODE_COMMENT,hist/hist/src/TFitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFitResult.cxx:534,Availability,error,error,534,"////////////////////////////////////////////////////////////////////////////////; /// Create a 2D contour around the minimum for the parameter ipar and jpar; /// if a minimum does not exist or is invalid it will return false; /// on exit a TGraph is filled with the contour points; /// the number of contour points is determined by the size of the TGraph.; /// if the size is zero a default number of points = 20 is used; /// pass optionally the confidence level, default is 0.683; /// it is assumed that ErrorDef() defines the right error definition; /// (i.e 1 sigma error for one parameter). If not the confidence level are scaled to new level",MatchSource.CODE_COMMENT,hist/hist/src/TFitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFitResult.cxx:569,Availability,error,error,569,"////////////////////////////////////////////////////////////////////////////////; /// Create a 2D contour around the minimum for the parameter ipar and jpar; /// if a minimum does not exist or is invalid it will return false; /// on exit a TGraph is filled with the contour points; /// the number of contour points is determined by the size of the TGraph.; /// if the size is zero a default number of points = 20 is used; /// pass optionally the confidence level, default is 0.683; /// it is assumed that ErrorDef() defines the right error definition; /// (i.e 1 sigma error for one parameter). If not the confidence level are scaled to new level",MatchSource.CODE_COMMENT,hist/hist/src/TFitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFitResultPtr.cxx:179,Testability,assert,assert,179,"////////////////////////////////////////////////////////////////////////////////; /// Implement the de-reference operator to make the class acts as a pointer to a TFitResult; /// assert in case the class does not contain a pointer to TFitResult",MatchSource.CODE_COMMENT,hist/hist/src/TFitResultPtr.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFitResultPtr.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFitResultPtr.cxx:170,Testability,assert,assert,170,"////////////////////////////////////////////////////////////////////////////////; /// Implement the -> operator to make the class acts as a pointer to a TFitResult.; /// assert in case the class does not contain a pointer to TFitResult",MatchSource.CODE_COMMENT,hist/hist/src/TFitResultPtr.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFitResultPtr.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:231,Availability,avail,available,231,"/** \class TFormula TFormula.h ""inc/TFormula.h""; \ingroup Hist; The Formula class. This is a new version of the TFormula class based on Cling.; This class is not 100% backward compatible with the old TFormula class, which is still available in ROOT as; `ROOT::v5::TFormula`. Some of the TFormula member functions available in version 5, such as; `Analyze` and `AnalyzeFunction` are not available in the new TFormula.; On the other hand formula expressions which were valid in version 5 are still valid in TFormula version 6. This class has been implemented during Google Summer of Code 2013 by Maciej Zimnoch. ### Example of valid expressions:. - `sin(x)/x`; - `[0]*sin(x) + [1]*exp(-[2]*x)`; - `x + y**2`; - `x^2 + y^2`; - `[0]*pow([1],4)`; - `2*pi*sqrt(x/y)`; - `gaus(0)*expo(3) + ypol3(5)*x`; - `gausn(0)*expo(3) + ypol3(5)*x`; - `gaus(x, [0..2]) + expo(y, [3..4])`. In the last examples above:. - `gaus(0)` is a substitute for `[0]*exp(-0.5*((x-[1])/[2])**2)`; and (0) means start numbering parameters at 0; - `gausn(0)` is a substitute for `[0]*exp(-0.5*((x-[1])/[2])**2)/(sqrt(2*pi)*[2]))`; and (0) means start numbering parameters at 0; - `expo(3)` is a substitute for `exp([3]+[4]*x)`; - `pol3(5)` is a substitute for `par[5]+par[6]*x+par[7]*x**2+par[8]*x**3`; (`PolN` stands for Polynomial of degree N); - `gaus(x, [0..2])` is a more explicit way of writing `gaus(0)`; - `expo(y, [3..4])` is a substitute for `exp([3]+[4]*y)`. See below the [full list of predefined functions](\ref FormulaFuncs) which can be used as shortcuts in; TFormula. `TMath` functions can be part of the expression, eg:. - `TMath::Landau(x)*sin(x)`; - `TMath::Erf(x)`. Formula may contain constants, eg:. - `sqrt2`; - `e`; - `pi`; - `ln10`; - `infinity`. and more. Formulas may also contain other user-defined ROOT functions defined with a; TFormula, eg, where `f1` is defined on one x-dimension and 2 parameters:. - `f1(x, [omega], [phi])`; - `f1([0..1])`; - `f1([1], [0])`; - `f1(y)`. To replace only parameter names",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:313,Availability,avail,available,313,"/** \class TFormula TFormula.h ""inc/TFormula.h""; \ingroup Hist; The Formula class. This is a new version of the TFormula class based on Cling.; This class is not 100% backward compatible with the old TFormula class, which is still available in ROOT as; `ROOT::v5::TFormula`. Some of the TFormula member functions available in version 5, such as; `Analyze` and `AnalyzeFunction` are not available in the new TFormula.; On the other hand formula expressions which were valid in version 5 are still valid in TFormula version 6. This class has been implemented during Google Summer of Code 2013 by Maciej Zimnoch. ### Example of valid expressions:. - `sin(x)/x`; - `[0]*sin(x) + [1]*exp(-[2]*x)`; - `x + y**2`; - `x^2 + y^2`; - `[0]*pow([1],4)`; - `2*pi*sqrt(x/y)`; - `gaus(0)*expo(3) + ypol3(5)*x`; - `gausn(0)*expo(3) + ypol3(5)*x`; - `gaus(x, [0..2]) + expo(y, [3..4])`. In the last examples above:. - `gaus(0)` is a substitute for `[0]*exp(-0.5*((x-[1])/[2])**2)`; and (0) means start numbering parameters at 0; - `gausn(0)` is a substitute for `[0]*exp(-0.5*((x-[1])/[2])**2)/(sqrt(2*pi)*[2]))`; and (0) means start numbering parameters at 0; - `expo(3)` is a substitute for `exp([3]+[4]*x)`; - `pol3(5)` is a substitute for `par[5]+par[6]*x+par[7]*x**2+par[8]*x**3`; (`PolN` stands for Polynomial of degree N); - `gaus(x, [0..2])` is a more explicit way of writing `gaus(0)`; - `expo(y, [3..4])` is a substitute for `exp([3]+[4]*y)`. See below the [full list of predefined functions](\ref FormulaFuncs) which can be used as shortcuts in; TFormula. `TMath` functions can be part of the expression, eg:. - `TMath::Landau(x)*sin(x)`; - `TMath::Erf(x)`. Formula may contain constants, eg:. - `sqrt2`; - `e`; - `pi`; - `ln10`; - `infinity`. and more. Formulas may also contain other user-defined ROOT functions defined with a; TFormula, eg, where `f1` is defined on one x-dimension and 2 parameters:. - `f1(x, [omega], [phi])`; - `f1([0..1])`; - `f1([1], [0])`; - `f1(y)`. To replace only parameter names",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:386,Availability,avail,available,386,"/** \class TFormula TFormula.h ""inc/TFormula.h""; \ingroup Hist; The Formula class. This is a new version of the TFormula class based on Cling.; This class is not 100% backward compatible with the old TFormula class, which is still available in ROOT as; `ROOT::v5::TFormula`. Some of the TFormula member functions available in version 5, such as; `Analyze` and `AnalyzeFunction` are not available in the new TFormula.; On the other hand formula expressions which were valid in version 5 are still valid in TFormula version 6. This class has been implemented during Google Summer of Code 2013 by Maciej Zimnoch. ### Example of valid expressions:. - `sin(x)/x`; - `[0]*sin(x) + [1]*exp(-[2]*x)`; - `x + y**2`; - `x^2 + y^2`; - `[0]*pow([1],4)`; - `2*pi*sqrt(x/y)`; - `gaus(0)*expo(3) + ypol3(5)*x`; - `gausn(0)*expo(3) + ypol3(5)*x`; - `gaus(x, [0..2]) + expo(y, [3..4])`. In the last examples above:. - `gaus(0)` is a substitute for `[0]*exp(-0.5*((x-[1])/[2])**2)`; and (0) means start numbering parameters at 0; - `gausn(0)` is a substitute for `[0]*exp(-0.5*((x-[1])/[2])**2)/(sqrt(2*pi)*[2]))`; and (0) means start numbering parameters at 0; - `expo(3)` is a substitute for `exp([3]+[4]*x)`; - `pol3(5)` is a substitute for `par[5]+par[6]*x+par[7]*x**2+par[8]*x**3`; (`PolN` stands for Polynomial of degree N); - `gaus(x, [0..2])` is a more explicit way of writing `gaus(0)`; - `expo(y, [3..4])` is a substitute for `exp([3]+[4]*y)`. See below the [full list of predefined functions](\ref FormulaFuncs) which can be used as shortcuts in; TFormula. `TMath` functions can be part of the expression, eg:. - `TMath::Landau(x)*sin(x)`; - `TMath::Erf(x)`. Formula may contain constants, eg:. - `sqrt2`; - `e`; - `pi`; - `ln10`; - `infinity`. and more. Formulas may also contain other user-defined ROOT functions defined with a; TFormula, eg, where `f1` is defined on one x-dimension and 2 parameters:. - `f1(x, [omega], [phi])`; - `f1([0..1])`; - `f1([1], [0])`; - `f1(y)`. To replace only parameter names",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:3963,Availability,avail,available,3963," `x,y,z,t` or; `x[0],x[1],x[2],x[3],....x[N]` for N-dimensional formulas. This class is not anymore the base class for the function classes `TF1`, but it has now; a data member of TF1 which can be accessed via `TF1::GetFormula`. TFormula supports gradient and hessian calculations through clad.; To calculate the gradient one needs to first declare a `CladStorage` of the; same size as the number of parameters and then pass the variables and the; created `CladStorage`:. ```; TFormula f(""f"", ""x*[0] - y*[1]"");; Double_t p[] = {40, 30};; Double_t x[] = {1, 2};; f.SetParameters(p);; TFormula::CladStorage grad(2);; f.GradientPar(x, grad);; ```. The process is similar for hessians, except that the size of the created; CladStorage should be the square of the number of parameters because; `HessianPar` returns a flattened matrix:. ```; TFormula::CladStorage hess(4);; f.HessianPar(x, hess);; ```. \anchor FormulaFuncs; ### List of predefined functions. The list of available predefined functions which can be used as shortcuts is the following:; 1. One Dimensional functions:; - `gaus` is a substitute for `[Constant]*exp(-0.5*((x-[Mean])/[Sigma])*((x-[Mean])/[Sigma]))`; - `landau` is a substitute for `[Constant]*TMath::Landau (x,[MPV],[Sigma],false)`; - `expo` is a substitute for `exp([Constant]+[Slope]*x)`; - `crystalball` is substitute for `[Constant]*ROOT::Math::crystalball_function (x,[Alpha],[N],[Sigma],[Mean])`; - `breitwigner` is a substitute for `[p0]*ROOT::Math::breitwigner_pdf (x,[p2],[p1])`; - `pol0,1,2,...N` is a substitute for a polynomial of degree `N` :; `([p0]+[p1]*x+[p2]*pow(x,2)+....[pN]*pow(x,N)`; - `cheb0,1,2,...N` is a substitute for a Chebyshev polynomial of degree `N`:; `ROOT::Math::Chebyshev10(x,[p0],[p1],[p2],...[pN])`. Note the maximum N allowed here is 10.; 2. Two Dimensional functions:; - `xygaus` is a substitute for `[Constant]*exp(-0.5*pow(((x-[MeanX])/[SigmaX]),2 )- 0.5*pow(((y-[MeanY])/[SigmaY]),2))`, a 2d Gaussian without correlation.; - `bigaus` is ",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:6913,Availability,error,error,6913,"ula. Here we consider; a very simple case where we have an exponential decay after some time t and a; number of events with timestamps for which we want to evaluate this function. ```; TFormula tf ("""", ""[0]*exp(-[1]*t)"");; tf.SetParameter(0, 1);; tf.SetParameter(1, 0.5);. for (auto & event : events) {; tf.Eval(event.t);; }; ```. The distinction between variables and parameters arose from the TFormula's; application in fitting. There parameters are fitted to the data provided; through variables. In other applications this distinction can go away. Parameter values can be provided dynamically using `TFormula::EvalPar`; instead of `TFormula::Eval`. In this way parameters can be used identically; to variables. See below for an example that uses only parameters to model a; function. ```; Int_t params[2] = {1, 2}; // {vel_x, vel_y}; TFormula tf ("""", ""[vel_x]/sqrt(([vel_x + vel_y])**2)"");. tf.EvalPar(nullptr, params);; ```. ### A note on operators. All operators of C/C++ are allowed in a TFormula with a few caveats. The operators `|`, `&`, `%` can be used but will raise an error if used in; conjunction with a variable or a parameter. Variables and parameters are treated; as doubles internally for which these operators are not defined.; This means the following command will run successfully; ```root -l -q -e TFormula("""", ""x+(10%3)"").Eval(0)```; but not; ```root -l -q -e TFormula("""", ""x%10"").Eval(0)```. The operator `^` is defined to mean exponentiation instead of the C/C++; interpretation xor. `**` is added, also meaning exponentiation. The operators `++` and `@` are added, and are shorthand for the a linear; function. That means the expression `x@2` will be expanded to; ```[n]*x + [n+1]*2``` where n is the first previously unused parameter number. \class TFormulaFunction; Helper class for TFormula. \class TFormulaVariable; Another helper class for TFormula. \class TFormulaParamOrder; Functor defining the parameter order; */; // prefix used for function name passed to Cling",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:2017,Modifiability,variab,variable,2017," at 0; - `gausn(0)` is a substitute for `[0]*exp(-0.5*((x-[1])/[2])**2)/(sqrt(2*pi)*[2]))`; and (0) means start numbering parameters at 0; - `expo(3)` is a substitute for `exp([3]+[4]*x)`; - `pol3(5)` is a substitute for `par[5]+par[6]*x+par[7]*x**2+par[8]*x**3`; (`PolN` stands for Polynomial of degree N); - `gaus(x, [0..2])` is a more explicit way of writing `gaus(0)`; - `expo(y, [3..4])` is a substitute for `exp([3]+[4]*y)`. See below the [full list of predefined functions](\ref FormulaFuncs) which can be used as shortcuts in; TFormula. `TMath` functions can be part of the expression, eg:. - `TMath::Landau(x)*sin(x)`; - `TMath::Erf(x)`. Formula may contain constants, eg:. - `sqrt2`; - `e`; - `pi`; - `ln10`; - `infinity`. and more. Formulas may also contain other user-defined ROOT functions defined with a; TFormula, eg, where `f1` is defined on one x-dimension and 2 parameters:. - `f1(x, [omega], [phi])`; - `f1([0..1])`; - `f1([1], [0])`; - `f1(y)`. To replace only parameter names, the dimension variable can be dropped.; Alternatively, to change only the dimension variable, the parameters can be; dropped. Note that if a parameter is dropped or keeps its old name, its old; value will be copied to the new function. The syntax used in the examples; above also applies to the predefined parametrized functions like `gaus` and; `expo`. Comparisons operators are also supported `(&amp;&amp;, ||, ==, &lt;=, &gt;=, !)`. Examples:. `sin(x*(x&lt;0.5 || x&gt;1))`. If the result of a comparison is TRUE, the result is 1, otherwise 0. Already predefined names can be given. For example, if the formula. `TFormula old(""old"",sin(x*(x&lt;0.5 || x&gt;1)))`. one can assign a name to the formula. By default the name of the object = title = formula itself. `TFormula new(""new"",""x*old"")`. is equivalent to:. `TFormula new(""new"",""x*sin(x*(x&lt;0.5 || x&gt;1))"")`. The class supports unlimited number of variables and parameters.; By default the names which can be used for the variables are `x,y,z",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:2087,Modifiability,variab,variable,2087,"*pi)*[2]))`; and (0) means start numbering parameters at 0; - `expo(3)` is a substitute for `exp([3]+[4]*x)`; - `pol3(5)` is a substitute for `par[5]+par[6]*x+par[7]*x**2+par[8]*x**3`; (`PolN` stands for Polynomial of degree N); - `gaus(x, [0..2])` is a more explicit way of writing `gaus(0)`; - `expo(y, [3..4])` is a substitute for `exp([3]+[4]*y)`. See below the [full list of predefined functions](\ref FormulaFuncs) which can be used as shortcuts in; TFormula. `TMath` functions can be part of the expression, eg:. - `TMath::Landau(x)*sin(x)`; - `TMath::Erf(x)`. Formula may contain constants, eg:. - `sqrt2`; - `e`; - `pi`; - `ln10`; - `infinity`. and more. Formulas may also contain other user-defined ROOT functions defined with a; TFormula, eg, where `f1` is defined on one x-dimension and 2 parameters:. - `f1(x, [omega], [phi])`; - `f1([0..1])`; - `f1([1], [0])`; - `f1(y)`. To replace only parameter names, the dimension variable can be dropped.; Alternatively, to change only the dimension variable, the parameters can be; dropped. Note that if a parameter is dropped or keeps its old name, its old; value will be copied to the new function. The syntax used in the examples; above also applies to the predefined parametrized functions like `gaus` and; `expo`. Comparisons operators are also supported `(&amp;&amp;, ||, ==, &lt;=, &gt;=, !)`. Examples:. `sin(x*(x&lt;0.5 || x&gt;1))`. If the result of a comparison is TRUE, the result is 1, otherwise 0. Already predefined names can be given. For example, if the formula. `TFormula old(""old"",sin(x*(x&lt;0.5 || x&gt;1)))`. one can assign a name to the formula. By default the name of the object = title = formula itself. `TFormula new(""new"",""x*old"")`. is equivalent to:. `TFormula new(""new"",""x*sin(x*(x&lt;0.5 || x&gt;1))"")`. The class supports unlimited number of variables and parameters.; By default the names which can be used for the variables are `x,y,z,t` or; `x[0],x[1],x[2],x[3],....x[N]` for N-dimensional formulas. This class is",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:2911,Modifiability,variab,variables,2911,"(x, [omega], [phi])`; - `f1([0..1])`; - `f1([1], [0])`; - `f1(y)`. To replace only parameter names, the dimension variable can be dropped.; Alternatively, to change only the dimension variable, the parameters can be; dropped. Note that if a parameter is dropped or keeps its old name, its old; value will be copied to the new function. The syntax used in the examples; above also applies to the predefined parametrized functions like `gaus` and; `expo`. Comparisons operators are also supported `(&amp;&amp;, ||, ==, &lt;=, &gt;=, !)`. Examples:. `sin(x*(x&lt;0.5 || x&gt;1))`. If the result of a comparison is TRUE, the result is 1, otherwise 0. Already predefined names can be given. For example, if the formula. `TFormula old(""old"",sin(x*(x&lt;0.5 || x&gt;1)))`. one can assign a name to the formula. By default the name of the object = title = formula itself. `TFormula new(""new"",""x*old"")`. is equivalent to:. `TFormula new(""new"",""x*sin(x*(x&lt;0.5 || x&gt;1))"")`. The class supports unlimited number of variables and parameters.; By default the names which can be used for the variables are `x,y,z,t` or; `x[0],x[1],x[2],x[3],....x[N]` for N-dimensional formulas. This class is not anymore the base class for the function classes `TF1`, but it has now; a data member of TF1 which can be accessed via `TF1::GetFormula`. TFormula supports gradient and hessian calculations through clad.; To calculate the gradient one needs to first declare a `CladStorage` of the; same size as the number of parameters and then pass the variables and the; created `CladStorage`:. ```; TFormula f(""f"", ""x*[0] - y*[1]"");; Double_t p[] = {40, 30};; Double_t x[] = {1, 2};; f.SetParameters(p);; TFormula::CladStorage grad(2);; f.GradientPar(x, grad);; ```. The process is similar for hessians, except that the size of the created; CladStorage should be the square of the number of parameters because; `HessianPar` returns a flattened matrix:. ```; TFormula::CladStorage hess(4);; f.HessianPar(x, hess);; ```. \anchor F",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:2985,Modifiability,variab,variables,2985," parameter names, the dimension variable can be dropped.; Alternatively, to change only the dimension variable, the parameters can be; dropped. Note that if a parameter is dropped or keeps its old name, its old; value will be copied to the new function. The syntax used in the examples; above also applies to the predefined parametrized functions like `gaus` and; `expo`. Comparisons operators are also supported `(&amp;&amp;, ||, ==, &lt;=, &gt;=, !)`. Examples:. `sin(x*(x&lt;0.5 || x&gt;1))`. If the result of a comparison is TRUE, the result is 1, otherwise 0. Already predefined names can be given. For example, if the formula. `TFormula old(""old"",sin(x*(x&lt;0.5 || x&gt;1)))`. one can assign a name to the formula. By default the name of the object = title = formula itself. `TFormula new(""new"",""x*old"")`. is equivalent to:. `TFormula new(""new"",""x*sin(x*(x&lt;0.5 || x&gt;1))"")`. The class supports unlimited number of variables and parameters.; By default the names which can be used for the variables are `x,y,z,t` or; `x[0],x[1],x[2],x[3],....x[N]` for N-dimensional formulas. This class is not anymore the base class for the function classes `TF1`, but it has now; a data member of TF1 which can be accessed via `TF1::GetFormula`. TFormula supports gradient and hessian calculations through clad.; To calculate the gradient one needs to first declare a `CladStorage` of the; same size as the number of parameters and then pass the variables and the; created `CladStorage`:. ```; TFormula f(""f"", ""x*[0] - y*[1]"");; Double_t p[] = {40, 30};; Double_t x[] = {1, 2};; f.SetParameters(p);; TFormula::CladStorage grad(2);; f.GradientPar(x, grad);; ```. The process is similar for hessians, except that the size of the created; CladStorage should be the square of the number of parameters because; `HessianPar` returns a flattened matrix:. ```; TFormula::CladStorage hess(4);; f.HessianPar(x, hess);; ```. \anchor FormulaFuncs; ### List of predefined functions. The list of available predefined fu",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:3427,Modifiability,variab,variables,3427,"re also supported `(&amp;&amp;, ||, ==, &lt;=, &gt;=, !)`. Examples:. `sin(x*(x&lt;0.5 || x&gt;1))`. If the result of a comparison is TRUE, the result is 1, otherwise 0. Already predefined names can be given. For example, if the formula. `TFormula old(""old"",sin(x*(x&lt;0.5 || x&gt;1)))`. one can assign a name to the formula. By default the name of the object = title = formula itself. `TFormula new(""new"",""x*old"")`. is equivalent to:. `TFormula new(""new"",""x*sin(x*(x&lt;0.5 || x&gt;1))"")`. The class supports unlimited number of variables and parameters.; By default the names which can be used for the variables are `x,y,z,t` or; `x[0],x[1],x[2],x[3],....x[N]` for N-dimensional formulas. This class is not anymore the base class for the function classes `TF1`, but it has now; a data member of TF1 which can be accessed via `TF1::GetFormula`. TFormula supports gradient and hessian calculations through clad.; To calculate the gradient one needs to first declare a `CladStorage` of the; same size as the number of parameters and then pass the variables and the; created `CladStorage`:. ```; TFormula f(""f"", ""x*[0] - y*[1]"");; Double_t p[] = {40, 30};; Double_t x[] = {1, 2};; f.SetParameters(p);; TFormula::CladStorage grad(2);; f.GradientPar(x, grad);; ```. The process is similar for hessians, except that the size of the created; CladStorage should be the square of the number of parameters because; `HessianPar` returns a flattened matrix:. ```; TFormula::CladStorage hess(4);; f.HessianPar(x, hess);; ```. \anchor FormulaFuncs; ### List of predefined functions. The list of available predefined functions which can be used as shortcuts is the following:; 1. One Dimensional functions:; - `gaus` is a substitute for `[Constant]*exp(-0.5*((x-[Mean])/[Sigma])*((x-[Mean])/[Sigma]))`; - `landau` is a substitute for `[Constant]*TMath::Landau (x,[MPV],[Sigma],false)`; - `expo` is a substitute for `exp([Constant]+[Slope]*x)`; - `crystalball` is substitute for `[Constant]*ROOT::Math::crystalball_",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:5392,Modifiability,variab,variables,5392,",[Alpha],[N],[Sigma],[Mean])`; - `breitwigner` is a substitute for `[p0]*ROOT::Math::breitwigner_pdf (x,[p2],[p1])`; - `pol0,1,2,...N` is a substitute for a polynomial of degree `N` :; `([p0]+[p1]*x+[p2]*pow(x,2)+....[pN]*pow(x,N)`; - `cheb0,1,2,...N` is a substitute for a Chebyshev polynomial of degree `N`:; `ROOT::Math::Chebyshev10(x,[p0],[p1],[p2],...[pN])`. Note the maximum N allowed here is 10.; 2. Two Dimensional functions:; - `xygaus` is a substitute for `[Constant]*exp(-0.5*pow(((x-[MeanX])/[SigmaX]),2 )- 0.5*pow(((y-[MeanY])/[SigmaY]),2))`, a 2d Gaussian without correlation.; - `bigaus` is a substitute for `[Constant]*ROOT::Math::bigaussian_pdf (x,y,[SigmaX],[SigmaY],[Rho],[MeanX],[MeanY])`, a 2d gaussian including a correlation parameter.; 3. Three Dimensional functions:; - `xyzgaus` is for a 3d Gaussians without correlations:; `[Constant]*exp(-0.5*pow(((x-[MeanX])/[SigmaX]),2 )- 0.5*pow(((y-[MeanY])/[SigmaY]),2 )- 0.5*pow(((z-[MeanZ])/[SigmaZ]),2))`. ### An expanded note on variables and parameters. In a TFormula, a variable is a defined by a name `x`, `y`, `z` or `t` or an; index like `x[0]`, `x[1]`, `x[2]`; that is `x[N]` where N is an integer. ```; TFormula("""", ""x[0] * x[1] + 10""); ```. Parameters are similar and can take any name. It is specified using brackets; e.g. `[expected_mass]` or `[0]`. ```; TFormula("""", ""exp([expected_mass])-1""); ```. Variables and parameters can be combined in the same TFormula. Here we consider; a very simple case where we have an exponential decay after some time t and a; number of events with timestamps for which we want to evaluate this function. ```; TFormula tf ("""", ""[0]*exp(-[1]*t)"");; tf.SetParameter(0, 1);; tf.SetParameter(1, 0.5);. for (auto & event : events) {; tf.Eval(event.t);; }; ```. The distinction between variables and parameters arose from the TFormula's; application in fitting. There parameters are fitted to the data provided; through variables. In other applications this distinction can go away. Parameter",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:5435,Modifiability,variab,variable,5435," (x,[p2],[p1])`; - `pol0,1,2,...N` is a substitute for a polynomial of degree `N` :; `([p0]+[p1]*x+[p2]*pow(x,2)+....[pN]*pow(x,N)`; - `cheb0,1,2,...N` is a substitute for a Chebyshev polynomial of degree `N`:; `ROOT::Math::Chebyshev10(x,[p0],[p1],[p2],...[pN])`. Note the maximum N allowed here is 10.; 2. Two Dimensional functions:; - `xygaus` is a substitute for `[Constant]*exp(-0.5*pow(((x-[MeanX])/[SigmaX]),2 )- 0.5*pow(((y-[MeanY])/[SigmaY]),2))`, a 2d Gaussian without correlation.; - `bigaus` is a substitute for `[Constant]*ROOT::Math::bigaussian_pdf (x,y,[SigmaX],[SigmaY],[Rho],[MeanX],[MeanY])`, a 2d gaussian including a correlation parameter.; 3. Three Dimensional functions:; - `xyzgaus` is for a 3d Gaussians without correlations:; `[Constant]*exp(-0.5*pow(((x-[MeanX])/[SigmaX]),2 )- 0.5*pow(((y-[MeanY])/[SigmaY]),2 )- 0.5*pow(((z-[MeanZ])/[SigmaZ]),2))`. ### An expanded note on variables and parameters. In a TFormula, a variable is a defined by a name `x`, `y`, `z` or `t` or an; index like `x[0]`, `x[1]`, `x[2]`; that is `x[N]` where N is an integer. ```; TFormula("""", ""x[0] * x[1] + 10""); ```. Parameters are similar and can take any name. It is specified using brackets; e.g. `[expected_mass]` or `[0]`. ```; TFormula("""", ""exp([expected_mass])-1""); ```. Variables and parameters can be combined in the same TFormula. Here we consider; a very simple case where we have an exponential decay after some time t and a; number of events with timestamps for which we want to evaluate this function. ```; TFormula tf ("""", ""[0]*exp(-[1]*t)"");; tf.SetParameter(0, 1);; tf.SetParameter(1, 0.5);. for (auto & event : events) {; tf.Eval(event.t);; }; ```. The distinction between variables and parameters arose from the TFormula's; application in fitting. There parameters are fitted to the data provided; through variables. In other applications this distinction can go away. Parameter values can be provided dynamically using `TFormula::EvalPar`; instead of `TFormula::Eval`. In this ",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:5773,Modifiability,Variab,Variables,5773,"Dimensional functions:; - `xygaus` is a substitute for `[Constant]*exp(-0.5*pow(((x-[MeanX])/[SigmaX]),2 )- 0.5*pow(((y-[MeanY])/[SigmaY]),2))`, a 2d Gaussian without correlation.; - `bigaus` is a substitute for `[Constant]*ROOT::Math::bigaussian_pdf (x,y,[SigmaX],[SigmaY],[Rho],[MeanX],[MeanY])`, a 2d gaussian including a correlation parameter.; 3. Three Dimensional functions:; - `xyzgaus` is for a 3d Gaussians without correlations:; `[Constant]*exp(-0.5*pow(((x-[MeanX])/[SigmaX]),2 )- 0.5*pow(((y-[MeanY])/[SigmaY]),2 )- 0.5*pow(((z-[MeanZ])/[SigmaZ]),2))`. ### An expanded note on variables and parameters. In a TFormula, a variable is a defined by a name `x`, `y`, `z` or `t` or an; index like `x[0]`, `x[1]`, `x[2]`; that is `x[N]` where N is an integer. ```; TFormula("""", ""x[0] * x[1] + 10""); ```. Parameters are similar and can take any name. It is specified using brackets; e.g. `[expected_mass]` or `[0]`. ```; TFormula("""", ""exp([expected_mass])-1""); ```. Variables and parameters can be combined in the same TFormula. Here we consider; a very simple case where we have an exponential decay after some time t and a; number of events with timestamps for which we want to evaluate this function. ```; TFormula tf ("""", ""[0]*exp(-[1]*t)"");; tf.SetParameter(0, 1);; tf.SetParameter(1, 0.5);. for (auto & event : events) {; tf.Eval(event.t);; }; ```. The distinction between variables and parameters arose from the TFormula's; application in fitting. There parameters are fitted to the data provided; through variables. In other applications this distinction can go away. Parameter values can be provided dynamically using `TFormula::EvalPar`; instead of `TFormula::Eval`. In this way parameters can be used identically; to variables. See below for an example that uses only parameters to model a; function. ```; Int_t params[2] = {1, 2}; // {vel_x, vel_y}; TFormula tf ("""", ""[vel_x]/sqrt(([vel_x + vel_y])**2)"");. tf.EvalPar(nullptr, params);; ```. ### A note on operators. All operators of C",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:6186,Modifiability,variab,variables,6186,"ussians without correlations:; `[Constant]*exp(-0.5*pow(((x-[MeanX])/[SigmaX]),2 )- 0.5*pow(((y-[MeanY])/[SigmaY]),2 )- 0.5*pow(((z-[MeanZ])/[SigmaZ]),2))`. ### An expanded note on variables and parameters. In a TFormula, a variable is a defined by a name `x`, `y`, `z` or `t` or an; index like `x[0]`, `x[1]`, `x[2]`; that is `x[N]` where N is an integer. ```; TFormula("""", ""x[0] * x[1] + 10""); ```. Parameters are similar and can take any name. It is specified using brackets; e.g. `[expected_mass]` or `[0]`. ```; TFormula("""", ""exp([expected_mass])-1""); ```. Variables and parameters can be combined in the same TFormula. Here we consider; a very simple case where we have an exponential decay after some time t and a; number of events with timestamps for which we want to evaluate this function. ```; TFormula tf ("""", ""[0]*exp(-[1]*t)"");; tf.SetParameter(0, 1);; tf.SetParameter(1, 0.5);. for (auto & event : events) {; tf.Eval(event.t);; }; ```. The distinction between variables and parameters arose from the TFormula's; application in fitting. There parameters are fitted to the data provided; through variables. In other applications this distinction can go away. Parameter values can be provided dynamically using `TFormula::EvalPar`; instead of `TFormula::Eval`. In this way parameters can be used identically; to variables. See below for an example that uses only parameters to model a; function. ```; Int_t params[2] = {1, 2}; // {vel_x, vel_y}; TFormula tf ("""", ""[vel_x]/sqrt(([vel_x + vel_y])**2)"");. tf.EvalPar(nullptr, params);; ```. ### A note on operators. All operators of C/C++ are allowed in a TFormula with a few caveats. The operators `|`, `&`, `%` can be used but will raise an error if used in; conjunction with a variable or a parameter. Variables and parameters are treated; as doubles internally for which these operators are not defined.; This means the following command will run successfully; ```root -l -q -e TFormula("""", ""x+(10%3)"").Eval(0)```; but not; ```root -l -q",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:6320,Modifiability,variab,variables,6320,"0.5*pow(((y-[MeanY])/[SigmaY]),2 )- 0.5*pow(((z-[MeanZ])/[SigmaZ]),2))`. ### An expanded note on variables and parameters. In a TFormula, a variable is a defined by a name `x`, `y`, `z` or `t` or an; index like `x[0]`, `x[1]`, `x[2]`; that is `x[N]` where N is an integer. ```; TFormula("""", ""x[0] * x[1] + 10""); ```. Parameters are similar and can take any name. It is specified using brackets; e.g. `[expected_mass]` or `[0]`. ```; TFormula("""", ""exp([expected_mass])-1""); ```. Variables and parameters can be combined in the same TFormula. Here we consider; a very simple case where we have an exponential decay after some time t and a; number of events with timestamps for which we want to evaluate this function. ```; TFormula tf ("""", ""[0]*exp(-[1]*t)"");; tf.SetParameter(0, 1);; tf.SetParameter(1, 0.5);. for (auto & event : events) {; tf.Eval(event.t);; }; ```. The distinction between variables and parameters arose from the TFormula's; application in fitting. There parameters are fitted to the data provided; through variables. In other applications this distinction can go away. Parameter values can be provided dynamically using `TFormula::EvalPar`; instead of `TFormula::Eval`. In this way parameters can be used identically; to variables. See below for an example that uses only parameters to model a; function. ```; Int_t params[2] = {1, 2}; // {vel_x, vel_y}; TFormula tf ("""", ""[vel_x]/sqrt(([vel_x + vel_y])**2)"");. tf.EvalPar(nullptr, params);; ```. ### A note on operators. All operators of C/C++ are allowed in a TFormula with a few caveats. The operators `|`, `&`, `%` can be used but will raise an error if used in; conjunction with a variable or a parameter. Variables and parameters are treated; as doubles internally for which these operators are not defined.; This means the following command will run successfully; ```root -l -q -e TFormula("""", ""x+(10%3)"").Eval(0)```; but not; ```root -l -q -e TFormula("""", ""x%10"").Eval(0)```. The operator `^` is defined to mean exponentiati",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:6535,Modifiability,variab,variables,6535,"`x[1]`, `x[2]`; that is `x[N]` where N is an integer. ```; TFormula("""", ""x[0] * x[1] + 10""); ```. Parameters are similar and can take any name. It is specified using brackets; e.g. `[expected_mass]` or `[0]`. ```; TFormula("""", ""exp([expected_mass])-1""); ```. Variables and parameters can be combined in the same TFormula. Here we consider; a very simple case where we have an exponential decay after some time t and a; number of events with timestamps for which we want to evaluate this function. ```; TFormula tf ("""", ""[0]*exp(-[1]*t)"");; tf.SetParameter(0, 1);; tf.SetParameter(1, 0.5);. for (auto & event : events) {; tf.Eval(event.t);; }; ```. The distinction between variables and parameters arose from the TFormula's; application in fitting. There parameters are fitted to the data provided; through variables. In other applications this distinction can go away. Parameter values can be provided dynamically using `TFormula::EvalPar`; instead of `TFormula::Eval`. In this way parameters can be used identically; to variables. See below for an example that uses only parameters to model a; function. ```; Int_t params[2] = {1, 2}; // {vel_x, vel_y}; TFormula tf ("""", ""[vel_x]/sqrt(([vel_x + vel_y])**2)"");. tf.EvalPar(nullptr, params);; ```. ### A note on operators. All operators of C/C++ are allowed in a TFormula with a few caveats. The operators `|`, `&`, `%` can be used but will raise an error if used in; conjunction with a variable or a parameter. Variables and parameters are treated; as doubles internally for which these operators are not defined.; This means the following command will run successfully; ```root -l -q -e TFormula("""", ""x+(10%3)"").Eval(0)```; but not; ```root -l -q -e TFormula("""", ""x%10"").Eval(0)```. The operator `^` is defined to mean exponentiation instead of the C/C++; interpretation xor. `**` is added, also meaning exponentiation. The operators `++` and `@` are added, and are shorthand for the a linear; function. That means the expression `x@2` will be expan",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:6950,Modifiability,variab,variable,6950,"ula. Here we consider; a very simple case where we have an exponential decay after some time t and a; number of events with timestamps for which we want to evaluate this function. ```; TFormula tf ("""", ""[0]*exp(-[1]*t)"");; tf.SetParameter(0, 1);; tf.SetParameter(1, 0.5);. for (auto & event : events) {; tf.Eval(event.t);; }; ```. The distinction between variables and parameters arose from the TFormula's; application in fitting. There parameters are fitted to the data provided; through variables. In other applications this distinction can go away. Parameter values can be provided dynamically using `TFormula::EvalPar`; instead of `TFormula::Eval`. In this way parameters can be used identically; to variables. See below for an example that uses only parameters to model a; function. ```; Int_t params[2] = {1, 2}; // {vel_x, vel_y}; TFormula tf ("""", ""[vel_x]/sqrt(([vel_x + vel_y])**2)"");. tf.EvalPar(nullptr, params);; ```. ### A note on operators. All operators of C/C++ are allowed in a TFormula with a few caveats. The operators `|`, `&`, `%` can be used but will raise an error if used in; conjunction with a variable or a parameter. Variables and parameters are treated; as doubles internally for which these operators are not defined.; This means the following command will run successfully; ```root -l -q -e TFormula("""", ""x+(10%3)"").Eval(0)```; but not; ```root -l -q -e TFormula("""", ""x%10"").Eval(0)```. The operator `^` is defined to mean exponentiation instead of the C/C++; interpretation xor. `**` is added, also meaning exponentiation. The operators `++` and `@` are added, and are shorthand for the a linear; function. That means the expression `x@2` will be expanded to; ```[n]*x + [n+1]*2``` where n is the first previously unused parameter number. \class TFormulaFunction; Helper class for TFormula. \class TFormulaVariable; Another helper class for TFormula. \class TFormulaParamOrder; Functor defining the parameter order; */; // prefix used for function name passed to Cling",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:6975,Modifiability,Variab,Variables,6975,"ula. Here we consider; a very simple case where we have an exponential decay after some time t and a; number of events with timestamps for which we want to evaluate this function. ```; TFormula tf ("""", ""[0]*exp(-[1]*t)"");; tf.SetParameter(0, 1);; tf.SetParameter(1, 0.5);. for (auto & event : events) {; tf.Eval(event.t);; }; ```. The distinction between variables and parameters arose from the TFormula's; application in fitting. There parameters are fitted to the data provided; through variables. In other applications this distinction can go away. Parameter values can be provided dynamically using `TFormula::EvalPar`; instead of `TFormula::Eval`. In this way parameters can be used identically; to variables. See below for an example that uses only parameters to model a; function. ```; Int_t params[2] = {1, 2}; // {vel_x, vel_y}; TFormula tf ("""", ""[vel_x]/sqrt(([vel_x + vel_y])**2)"");. tf.EvalPar(nullptr, params);; ```. ### A note on operators. All operators of C/C++ are allowed in a TFormula with a few caveats. The operators `|`, `&`, `%` can be used but will raise an error if used in; conjunction with a variable or a parameter. Variables and parameters are treated; as doubles internally for which these operators are not defined.; This means the following command will run successfully; ```root -l -q -e TFormula("""", ""x+(10%3)"").Eval(0)```; but not; ```root -l -q -e TFormula("""", ""x%10"").Eval(0)```. The operator `^` is defined to mean exponentiation instead of the C/C++; interpretation xor. `**` is added, also meaning exponentiation. The operators `++` and `@` are added, and are shorthand for the a linear; function. That means the expression `x@2` will be expanded to; ```[n]*x + [n+1]*2``` where n is the first previously unused parameter number. \class TFormulaFunction; Helper class for TFormula. \class TFormulaVariable; Another helper class for TFormula. \class TFormulaParamOrder; Functor defining the parameter order; */; // prefix used for function name passed to Cling",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:3195,Security,access,accessed,3195,"meter is dropped or keeps its old name, its old; value will be copied to the new function. The syntax used in the examples; above also applies to the predefined parametrized functions like `gaus` and; `expo`. Comparisons operators are also supported `(&amp;&amp;, ||, ==, &lt;=, &gt;=, !)`. Examples:. `sin(x*(x&lt;0.5 || x&gt;1))`. If the result of a comparison is TRUE, the result is 1, otherwise 0. Already predefined names can be given. For example, if the formula. `TFormula old(""old"",sin(x*(x&lt;0.5 || x&gt;1)))`. one can assign a name to the formula. By default the name of the object = title = formula itself. `TFormula new(""new"",""x*old"")`. is equivalent to:. `TFormula new(""new"",""x*sin(x*(x&lt;0.5 || x&gt;1))"")`. The class supports unlimited number of variables and parameters.; By default the names which can be used for the variables are `x,y,z,t` or; `x[0],x[1],x[2],x[3],....x[N]` for N-dimensional formulas. This class is not anymore the base class for the function classes `TF1`, but it has now; a data member of TF1 which can be accessed via `TF1::GetFormula`. TFormula supports gradient and hessian calculations through clad.; To calculate the gradient one needs to first declare a `CladStorage` of the; same size as the number of parameters and then pass the variables and the; created `CladStorage`:. ```; TFormula f(""f"", ""x*[0] - y*[1]"");; Double_t p[] = {40, 30};; Double_t x[] = {1, 2};; f.SetParameters(p);; TFormula::CladStorage grad(2);; f.GradientPar(x, grad);; ```. The process is similar for hessians, except that the size of the created; CladStorage should be the square of the number of parameters because; `HessianPar` returns a flattened matrix:. ```; TFormula::CladStorage hess(4);; f.HessianPar(x, hess);; ```. \anchor FormulaFuncs; ### List of predefined functions. The list of available predefined functions which can be used as shortcuts is the following:; 1. One Dimensional functions:; - `gaus` is a substitute for `[Constant]*exp(-0.5*((x-[Mean])/[Sigma])*((x",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:5861,Usability,simpl,simple,5861,"-[MeanY])/[SigmaY]),2))`, a 2d Gaussian without correlation.; - `bigaus` is a substitute for `[Constant]*ROOT::Math::bigaussian_pdf (x,y,[SigmaX],[SigmaY],[Rho],[MeanX],[MeanY])`, a 2d gaussian including a correlation parameter.; 3. Three Dimensional functions:; - `xyzgaus` is for a 3d Gaussians without correlations:; `[Constant]*exp(-0.5*pow(((x-[MeanX])/[SigmaX]),2 )- 0.5*pow(((y-[MeanY])/[SigmaY]),2 )- 0.5*pow(((z-[MeanZ])/[SigmaZ]),2))`. ### An expanded note on variables and parameters. In a TFormula, a variable is a defined by a name `x`, `y`, `z` or `t` or an; index like `x[0]`, `x[1]`, `x[2]`; that is `x[N]` where N is an integer. ```; TFormula("""", ""x[0] * x[1] + 10""); ```. Parameters are similar and can take any name. It is specified using brackets; e.g. `[expected_mass]` or `[0]`. ```; TFormula("""", ""exp([expected_mass])-1""); ```. Variables and parameters can be combined in the same TFormula. Here we consider; a very simple case where we have an exponential decay after some time t and a; number of events with timestamps for which we want to evaluate this function. ```; TFormula tf ("""", ""[0]*exp(-[1]*t)"");; tf.SetParameter(0, 1);; tf.SetParameter(1, 0.5);. for (auto & event : events) {; tf.Eval(event.t);; }; ```. The distinction between variables and parameters arose from the TFormula's; application in fitting. There parameters are fitted to the data provided; through variables. In other applications this distinction can go away. Parameter values can be provided dynamically using `TFormula::EvalPar`; instead of `TFormula::Eval`. In this way parameters can be used identically; to variables. See below for an example that uses only parameters to model a; function. ```; Int_t params[2] = {1, 2}; // {vel_x, vel_y}; TFormula tf ("""", ""[vel_x]/sqrt(([vel_x + vel_y])**2)"");. tf.EvalPar(nullptr, params);; ```. ### A note on operators. All operators of C/C++ are allowed in a TFormula with a few caveats. The operators `|`, `&`, `%` can be used but will raise an error if u",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:28,Security,hash,hash,28,"// set the cling name using hash of the static formulae map",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:12,Safety,avoid,avoid,12,"// add ; to avoid printing",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:3,Usability,clear,clear,3,"// clear if a formula was already existing",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:146,Modifiability,variab,variables,146,"////////////////////////////////////////////////////////////////////////////////; /// Clear the formula setting expression to empty and reset the variables and; /// parameters containers.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear the formula setting expression to empty and reset the variables and; /// parameters containers.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:22,Availability,failure,failure,22,"// Returns nullptr on failure.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:269,Availability,failure,failure,269,"////////////////////////////////////////////////////////////////////////////////; /// Sets TMethodCall to function inside Cling environment.; /// TFormula uses it to execute function.; /// After call, TFormula should be ready to evaluate formula.; /// Returns false on failure.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:18,Performance,optimiz,optimization,18,"// add pragma for optimization of the formula",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:42,Performance,load,loaded,42,"// Now that all libraries and headers are loaded, Declare() a performant version; // of the same code:",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:62,Performance,perform,performant,62,"// Now that all libraries and headers are loaded, Declare() a performant version; // of the same code:",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:115,Modifiability,variab,variables,115,"////////////////////////////////////////////////////////////////////////////////; /// Fill structures with default variables, constants and function shortcuts",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:160,Testability,log,loge,160,"// const pair<TString,Double_t> defconsts[] = { {""pi"",TMath::Pi()}, {""sqrt2"",TMath::Sqrt2()},; // {""infinity"",TMath::Infinity()}, {""ln10"",TMath::Ln10()},; // {""loge"",TMath::LogE()}, {""true"",1},{""false"",0} };",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:173,Testability,Log,LogE,173,"// const pair<TString,Double_t> defconsts[] = { {""pi"",TMath::Pi()}, {""sqrt2"",TMath::Sqrt2()},; // {""infinity"",TMath::Infinity()}, {""ln10"",TMath::Ln10()},; // {""loge"",TMath::LogE()}, {""true"",1},{""false"",0} };",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:16,Modifiability,variab,variables,16,"// add also the variables defined like x[0],x[1],x[2],...; // support up to x[9] - if needed extend that to higher value; // const int maxdim = 10;; // for (int i = 0; i < maxdim; ++i) {; // TString xvar = TString::Format(""x[%d]"",i);; // fVars[xvar] = TFormulaVariable(xvar,0,i);; // fClingVariables.push_back(0);; // }",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:93,Modifiability,extend,extend,93,"// add also the variables defined like x[0],x[1],x[2],...; // support up to x[9] - if needed extend that to higher value; // const int maxdim = 10;; // for (int i = 0; i < maxdim; ++i) {; // TString xvar = TString::Format(""x[%d]"",i);; // fVars[xvar] = TFormulaVariable(xvar,0,i);; // fClingVariables.push_back(0);; // }",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:166,Modifiability,variab,variable,166,"////////////////////////////////////////////////////////////////////////////////; /// Handling polN; /// If before 'pol' exist any name, this name will be treated as variable used in polynomial; /// eg.; /// varpol2(5) will be replaced with: [5] + [6]*var + [7]*var^2; /// Empty name is treated like variable x.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:300,Modifiability,variab,variable,300,"////////////////////////////////////////////////////////////////////////////////; /// Handling polN; /// If before 'pol' exist any name, this name will be treated as variable used in polynomial; /// eg.; /// varpol2(5) will be replaced with: [5] + [6]*var + [7]*var^2; /// Empty name is treated like variable x.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:170,Modifiability,variab,variable,170,"////////////////////////////////////////////////////////////////////////////////; /// Handling parametrized functions; /// Function can be normalized, and have different variable then x.; /// Variables should be placed in brackets after function name.; /// No brackets are treated like [x].; /// Normalized function has char 'n' after name, eg.; /// gausn[var](0) will be replaced with [0]*exp(-0.5*((var-[1])/[2])^2)/(sqrt(2*pi)*[2]); ///; /// Adding function is easy, just follow these rules, and add to; /// `TFormula::FillParametrizedFunctions` defined further below:; ///; /// - Key for function map is pair of name and dimension of function; /// - value of key is a pair function body and normalized function body; /// - {Vn} is a place where variable appear, n represents n-th variable from variable list.; /// Count starts from 0.; /// - [num] stands for parameter number.; /// If user pass to function argument 5, num will stand for (5 + num) parameter.; ///",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:192,Modifiability,Variab,Variables,192,"////////////////////////////////////////////////////////////////////////////////; /// Handling parametrized functions; /// Function can be normalized, and have different variable then x.; /// Variables should be placed in brackets after function name.; /// No brackets are treated like [x].; /// Normalized function has char 'n' after name, eg.; /// gausn[var](0) will be replaced with [0]*exp(-0.5*((var-[1])/[2])^2)/(sqrt(2*pi)*[2]); ///; /// Adding function is easy, just follow these rules, and add to; /// `TFormula::FillParametrizedFunctions` defined further below:; ///; /// - Key for function map is pair of name and dimension of function; /// - value of key is a pair function body and normalized function body; /// - {Vn} is a place where variable appear, n represents n-th variable from variable list.; /// Count starts from 0.; /// - [num] stands for parameter number.; /// If user pass to function argument 5, num will stand for (5 + num) parameter.; ///",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:749,Modifiability,variab,variable,749,"////////////////////////////////////////////////////////////////////////////////; /// Handling parametrized functions; /// Function can be normalized, and have different variable then x.; /// Variables should be placed in brackets after function name.; /// No brackets are treated like [x].; /// Normalized function has char 'n' after name, eg.; /// gausn[var](0) will be replaced with [0]*exp(-0.5*((var-[1])/[2])^2)/(sqrt(2*pi)*[2]); ///; /// Adding function is easy, just follow these rules, and add to; /// `TFormula::FillParametrizedFunctions` defined further below:; ///; /// - Key for function map is pair of name and dimension of function; /// - value of key is a pair function body and normalized function body; /// - {Vn} is a place where variable appear, n represents n-th variable from variable list.; /// Count starts from 0.; /// - [num] stands for parameter number.; /// If user pass to function argument 5, num will stand for (5 + num) parameter.; ///",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:784,Modifiability,variab,variable,784,"////////////////////////////////////////////////////////////////////////////////; /// Handling parametrized functions; /// Function can be normalized, and have different variable then x.; /// Variables should be placed in brackets after function name.; /// No brackets are treated like [x].; /// Normalized function has char 'n' after name, eg.; /// gausn[var](0) will be replaced with [0]*exp(-0.5*((var-[1])/[2])^2)/(sqrt(2*pi)*[2]); ///; /// Adding function is easy, just follow these rules, and add to; /// `TFormula::FillParametrizedFunctions` defined further below:; ///; /// - Key for function map is pair of name and dimension of function; /// - value of key is a pair function body and normalized function body; /// - {Vn} is a place where variable appear, n represents n-th variable from variable list.; /// Count starts from 0.; /// - [num] stands for parameter number.; /// If user pass to function argument 5, num will stand for (5 + num) parameter.; ///",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:798,Modifiability,variab,variable,798,"////////////////////////////////////////////////////////////////////////////////; /// Handling parametrized functions; /// Function can be normalized, and have different variable then x.; /// Variables should be placed in brackets after function name.; /// No brackets are treated like [x].; /// Normalized function has char 'n' after name, eg.; /// gausn[var](0) will be replaced with [0]*exp(-0.5*((var-[1])/[2])^2)/(sqrt(2*pi)*[2]); ///; /// Adding function is easy, just follow these rules, and add to; /// `TFormula::FillParametrizedFunctions` defined further below:; ///; /// - Key for function map is pair of name and dimension of function; /// - value of key is a pair function body and normalized function body; /// - {Vn} is a place where variable appear, n represents n-th variable from variable list.; /// Count starts from 0.; /// - [num] stands for parameter number.; /// If user pass to function argument 5, num will stand for (5 + num) parameter.; ///",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:147,Modifiability,variab,variables,147,"// check if also last character is not alphanumeric or is not an operator and not a parenthesis ( or [.; // Parenthesis [] are used to express the variables",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:54,Modifiability,variab,variables,54,"// in case of [..] found, assume they specify all the variables. Use it to get function dimension",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:21,Modifiability,variab,variable,21,"// we will miss last variable",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:21,Modifiability,variab,variable,21,"// replace {Vn} with variable names",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:3,Deployability,update,update,3,"// update i to reflect change in body string",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:3,Deployability,update,update,3,"// update parameter counters in case of many functions (e.g. gaus(0)+gaus(3) )",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:152,Modifiability,variab,variables,152,"////////////////////////////////////////////////////////////////////////////////; /// Handling user functions (and parametrized functions); /// to take variables and optionally parameters as arguments",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:20,Modifiability,variab,variables,20,"// loop through all variables and parameters, filling in argSubstitutions",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:28,Modifiability,variab,variable,28,"// Get new name (for either variable or parameter)",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:3,Modifiability,variab,variable,3,"// variable",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:17,Modifiability,variab,variables,17,"// Try to assume variables are implicit (need all arguments to be; // parameters); // loop to check if all arguments are parameters",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:52,Modifiability,variab,variable,52,"// Treat parameters as implicit; // loop to replace variable names",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:6,Availability,down,down,6,"// go down one; // handle scientific notation cases (1.e-2 ^ 3 )",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:3,Deployability,update,update,3,"// update the expression with the new formula",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:25,Modifiability,variab,variable,25,"// save formula to parse variable and parameters for Cling",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:214,Modifiability,variab,variable,214,"////////////////////////////////////////////////////////////////////////////////; /// Extracts functors from formula, and put them in fFuncs.; /// Simple grammar:; /// - `<function>` := name(arg1,arg2...); /// - `<variable>` := name; /// - `<parameter>` := [number]; /// - `<name>` := String containing lower and upper letters, numbers, underscores; /// - `<number>` := Integer number; /// Operators are omitted.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:147,Usability,Simpl,Simple,147,"////////////////////////////////////////////////////////////////////////////////; /// Extracts functors from formula, and put them in fFuncs.; /// Simple grammar:; /// - `<function>` := name(arg1,arg2...); /// - `<variable>` := name; /// - `<parameter>` := [number]; /// - `<name>` := String containing lower and upper letters, numbers, underscores; /// - `<number>` := Integer number; /// Operators are omitted.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:131,Modifiability,variab,variable,131,"// std::cout << ""investigating character : "" << i << "" "" << formula[i] << "" of formula "" << formula <<; // std::endl;; // look for variable and function names. They start in C++ with alphanumeric characters",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:150,Modifiability,variab,variables,150,"// Replacing user formula the old way (as opposed to 'HandleFunctionArguments'); // Note this is only for replacing functions that do; // not specify variables and/or parameters in brackets; // (the other case is done by `HandleFunctionArguments`)",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:31,Safety,avoid,avoid,31,"// start from higher number to avoid overlap",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:222,Modifiability,variab,variable,222,"////////////////////////////////////////////////////////////////////////////////; /// Iterates through functors in fFuncs and performs the appropriate action.; /// If functor has 0 arguments (has only name) can be:; /// - variable; /// * will be replaced with x[num], where x is an array containing value of this variable under num.; /// - pre-defined formula; /// * will be replaced with formulas body; /// - constant; /// * will be replaced with constant value; /// - parameter; /// * will be replaced with p[num], where p is an array containing value of this parameter under num.; /// If has arguments it can be :; /// - function shortcut, eg. sin; /// * will be replaced with fullname of function, eg. sin -> TMath::Sin; /// - function from cling environment, eg. TMath::BreitWigner(x,y,z); /// * first check if function exists, and has same number of arguments, then accept it and set as found.; /// If all functors after iteration are matched with corresponding action,; /// it inputs C++ code of formula into cling, and sets flag that formula is ready to evaluate.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:313,Modifiability,variab,variable,313,"////////////////////////////////////////////////////////////////////////////////; /// Iterates through functors in fFuncs and performs the appropriate action.; /// If functor has 0 arguments (has only name) can be:; /// - variable; /// * will be replaced with x[num], where x is an array containing value of this variable under num.; /// - pre-defined formula; /// * will be replaced with formulas body; /// - constant; /// * will be replaced with constant value; /// - parameter; /// * will be replaced with p[num], where p is an array containing value of this parameter under num.; /// If has arguments it can be :; /// - function shortcut, eg. sin; /// * will be replaced with fullname of function, eg. sin -> TMath::Sin; /// - function from cling environment, eg. TMath::BreitWigner(x,y,z); /// * first check if function exists, and has same number of arguments, then accept it and set as found.; /// If all functors after iteration are matched with corresponding action,; /// it inputs C++ code of formula into cling, and sets flag that formula is ready to evaluate.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:126,Performance,perform,performs,126,"////////////////////////////////////////////////////////////////////////////////; /// Iterates through functors in fFuncs and performs the appropriate action.; /// If functor has 0 arguments (has only name) can be:; /// - variable; /// * will be replaced with x[num], where x is an array containing value of this variable under num.; /// - pre-defined formula; /// * will be replaced with formulas body; /// - constant; /// * will be replaced with constant value; /// - parameter; /// * will be replaced with p[num], where p is an array containing value of this parameter under num.; /// If has arguments it can be :; /// - function shortcut, eg. sin; /// * will be replaced with fullname of function, eg. sin -> TMath::Sin; /// - function from cling environment, eg. TMath::BreitWigner(x,y,z); /// * first check if function exists, and has same number of arguments, then accept it and set as found.; /// If all functors after iteration are matched with corresponding action,; /// it inputs C++ code of formula into cling, and sets flag that formula is ready to evaluate.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:23,Modifiability,variab,variables,23,"// looking for default variables defined in fVars",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:22,Modifiability,variab,variable,22,"// this set the cling variable",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:3,Modifiability,variab,variable,3,"// variable dimensions (0 for x, 1 for y, 2, for z)",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:37,Modifiability,variab,variables,37,"// we need to be sure that all other variables are added with position less",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:39,Modifiability,variab,variable,39,"// remove the ""{.. }"" added around the variable",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:133,Modifiability,variab,variables,133,"// check for observables defined as x[0],x[1],....; // maybe could use a regular expression here; // only in case match with defined variables is not successful",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:22,Modifiability,variab,variables,22,"// we need to add the variables in fVars all of them before x[n]",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:39,Modifiability,variab,variable,39,"// remove the ""{.. }"" added around the variable",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:29,Modifiability,variab,variables,29,"// assume a function without variables is always 1-dimensional ???; // if (hasParameters && !hasVariables) {; // fNdim = 1;; // AddVariable(""x"", 0);; // hasVariables = true;; // }; // does not make sense to vectorize function which is of FNDim=0",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:21,Modifiability,variab,variables,21,"// when there are no variables but only parameter we still need to ad; //Bool_t hasBoth = hasVariables && hasParameters;",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:62,Modifiability,variab,variables,62,"// valid input formula - try to put into Cling (in case of no variables but only parameter we need to add the standard signature)",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:28,Security,hash,hash,28,"// set the cling name using hash of the static formulae map",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:44,Availability,failure,failure,44,"// needed in case of lazy initialization of failure compiling the expression",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:22,Availability,Error,Error,22,"// In case of a Cling Error check components which are not found in Cling; // check that all formula components are matched otherwise emit an error",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:142,Availability,error,error,142,"// In case of a Cling Error check components which are not found in Cling; // check that all formula components are matched otherwise emit an error",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:28,Modifiability,variab,variables,28,"// clean up un-used default variables in case formula is valid; //if (fClingInitialized && fReadyToExecute) {; //don't check fClingInitialized in case of lazy execution",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:23,Modifiability,variab,variable,23,"// std::cout << ""Erase variable "" << itvar->first << std::endl;",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:91,Modifiability,variab,variable,91,"////////////////////////////////////////////////////////////////////////////////; /// Adds variable to known variables, and reprocess formula.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:109,Modifiability,variab,variables,109,"////////////////////////////////////////////////////////////////////////////////; /// Adds variable to known variables, and reprocess formula.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:94,Modifiability,variab,variable,94,"// If the position is not defined in the Cling vectors, make space for it; // but normally is variable is defined in fVars a slot should be also present in fClingVariables",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:100,Modifiability,variab,variables,100,"////////////////////////////////////////////////////////////////////////////////; /// Adds multiple variables.; /// First argument is an array of pairs<TString,Double>, where; /// first argument is name of variable,; /// second argument represents value.; /// size - number of variables passed in first argument",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:206,Modifiability,variab,variable,206,"////////////////////////////////////////////////////////////////////////////////; /// Adds multiple variables.; /// First argument is an array of pairs<TString,Double>, where; /// first argument is name of variable,; /// second argument represents value.; /// size - number of variables passed in first argument",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:277,Modifiability,variab,variables,277,"////////////////////////////////////////////////////////////////////////////////; /// Adds multiple variables.; /// First argument is an array of pairs<TString,Double>, where; /// first argument is name of variable,; /// second argument represents value.; /// size - number of variables passed in first argument",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:181,Security,hash,hashes,181,"////////////////////////////////////////////////////////////////////////////////; /// Set the name of the formula. We need to allow the list of function to; /// properly handle the hashes.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:49,Security,hash,hashes,49,"// Here we need to remove and re-add to keep the hashes consistent with; // the underlying names.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:105,Modifiability,variab,variables,105,"////////////////////////////////////////////////////////////////////////////////; ///; /// Sets multiple variables.; /// First argument is an array of pairs<TString,Double>, where; /// first argument is name of variable,; /// second argument represents value.; /// size - number of variables passed in first argument",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:211,Modifiability,variab,variable,211,"////////////////////////////////////////////////////////////////////////////////; ///; /// Sets multiple variables.; /// First argument is an array of pairs<TString,Double>, where; /// first argument is name of variable,; /// second argument represents value.; /// size - number of variables passed in first argument",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:282,Modifiability,variab,variables,282,"////////////////////////////////////////////////////////////////////////////////; ///; /// Sets multiple variables.; /// First argument is an array of pairs<TString,Double>, where; /// first argument is name of variable,; /// second argument represents value.; /// size - number of variables passed in first argument",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:94,Modifiability,variab,variable,94,"////////////////////////////////////////////////////////////////////////////////; /// Returns variable value.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:94,Modifiability,variab,variable,94,"////////////////////////////////////////////////////////////////////////////////; /// Returns variable number (positon in array) given its name.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:94,Modifiability,variab,variable,94,"////////////////////////////////////////////////////////////////////////////////; /// Returns variable name given its position in the array.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:49,Modifiability,variab,variable,49,"// need to loop on the map to find corresponding variable",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:91,Modifiability,variab,variable,91,"////////////////////////////////////////////////////////////////////////////////; /// Sets variable value.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:188,Availability,error,error,188,"////////////////////////////////////////////////////////////////////////////////; /// Return parameter index given a name (return -1 for not existing parameters); /// non need to print an error",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:30,Safety,avoid,avoid,30,"// change whitespace to \s to avoid problems in parsing",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:177,Security,hash,hasher,177,"// Check if the gradient request was made as part of another TFormula.; // This can happen when we create multiple TFormula objects with the same; // formula. In that case, the hasher will give identical id and we can; // reuse the already generated gradient function.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:176,Security,hash,hasher,176,"// Check if the hessian request was made as part of another TFormula.; // This can happen when we create multiple TFormula objects with the same; // formula. In that case, the hasher will give identical id and we can; // reuse the already generated hessian function.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:163,Modifiability,variab,variables,163,"////////////////////////////////////////////////////////////////////////////////; /// Evaluate formula.; /// If formula is not ready to execute(missing parameters/variables),; /// print these which are not known.; /// If parameter has default value, and has not been set, appropriate warning is shown.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:83,Safety,safe,safe,83,"// try recompiling the formula. We need to lock because this is not anymore thread safe",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:83,Safety,safe,safe,83,"// try recompiling the formula. We need to lock because this is not anymore thread safe",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:212,Availability,failure,failure,212,"// R__HAS_VECCORE; //////////////////////////////////////////////////////////////////////////////; /// Re-initialize eval method; ///; /// This function is called by DoEval and DoEvalVector in case of a previous failure; /// or in case of reading from a file; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:51,Safety,avoid,avoid,51,"// when reading we initialize the formula later to avoid problem of recursive Jitting",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:2,Testability,assert,assert,2,"//assert(fParams.size() == paramMap.size() );",MatchSource.CODE_COMMENT,hist/hist/src/TFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormulaPrimitive_v5.cxx:2,Testability,log,logical,2,"//logical",MatchSource.CODE_COMMENT,hist/hist/src/TFormulaPrimitive_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormulaPrimitive_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormulaPrimitive_v5.cxx:7,Testability,log,logical,7,"//; // logical; //",MatchSource.CODE_COMMENT,hist/hist/src/TFormulaPrimitive_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormulaPrimitive_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormulaPrimitive_v5.cxx:17,Security,access,access,17,"//Disable direct access to TMath::Landau for now because of the default parameter.; //AddFormula(new TFormulaPrimitive(""TMath::Landau"",""TMath::Landau"",(TFormulaPrimitive::GenFunc1110)TMath::Landau));",MatchSource.CODE_COMMENT,hist/hist/src/TFormulaPrimitive_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormulaPrimitive_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:2340,Deployability,update,updated,2340,"hen, old can be reused in a new expression.; TFormula new(""x*old"") is equivalent to:; TFormula new(""x*sin(x*(x<0.5 || x>1))""). Up to 4 dimensions are supported (indicated by x, y, z, t); An expression may have 0 parameters or a list of parameters; indicated by the sequence [par_number]. A graph showing the logic to compile and analyze a formula; is shown in TFormula::Compile and TFormula::Analyze.; Once a formula has been compiled, it can be evaluated for a given; set of parameters. see graph in TFormula::EvalPar. This class is the base class for the function classes TF1,TF2 and TF3.; It is also used by the ntuple selection mechanism TNtupleFormula. In version 7 of TFormula, the usage of fOper has been changed; to improve the performance of TFormula::EvalPar.; Conceptually, fOper was changed from a simple array of Int_t; to an array of composite values.; For example a 'ylandau(5)' operation used to be encoded as 4105;; it is now encoded as (klandau >> kTFOperShift) + 5; Any class inheriting from TFormula and using directly fOper (which; is now a private data member), needs to be updated to take this; in consideration. The member functions recommended to set and; access fOper are: SetAction, GetAction, GetActionParam; For more performant access to the information, see the implementation; TFormula::EvalPar. ### CHANGING DEFAULT SETTINGS. When creating complex formula , it may be necessary to increase; some default parameters. see static function TFormula::SetMaxima. ### WHY TFormula CANNOT ACCEPT A CLASS MEMBER FUNCTION ?. This is a frequently asked question.; C++ is a strongly typed language. There is no way for TFormula (without; recompiling this class) to know about all possible user defined data types.; This also apply to the case of a static class function.; Because TMath is a special and frequent case, TFormula is aware; of all TMath functions.; */; ////////////////////////////////////////////////////////////////////////////////; /// Formula default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:2239,Modifiability,inherit,inheriting,2239,"hen, old can be reused in a new expression.; TFormula new(""x*old"") is equivalent to:; TFormula new(""x*sin(x*(x<0.5 || x>1))""). Up to 4 dimensions are supported (indicated by x, y, z, t); An expression may have 0 parameters or a list of parameters; indicated by the sequence [par_number]. A graph showing the logic to compile and analyze a formula; is shown in TFormula::Compile and TFormula::Analyze.; Once a formula has been compiled, it can be evaluated for a given; set of parameters. see graph in TFormula::EvalPar. This class is the base class for the function classes TF1,TF2 and TF3.; It is also used by the ntuple selection mechanism TNtupleFormula. In version 7 of TFormula, the usage of fOper has been changed; to improve the performance of TFormula::EvalPar.; Conceptually, fOper was changed from a simple array of Int_t; to an array of composite values.; For example a 'ylandau(5)' operation used to be encoded as 4105;; it is now encoded as (klandau >> kTFOperShift) + 5; Any class inheriting from TFormula and using directly fOper (which; is now a private data member), needs to be updated to take this; in consideration. The member functions recommended to set and; access fOper are: SetAction, GetAction, GetActionParam; For more performant access to the information, see the implementation; TFormula::EvalPar. ### CHANGING DEFAULT SETTINGS. When creating complex formula , it may be necessary to increase; some default parameters. see static function TFormula::SetMaxima. ### WHY TFormula CANNOT ACCEPT A CLASS MEMBER FUNCTION ?. This is a frequently asked question.; C++ is a strongly typed language. There is no way for TFormula (without; recompiling this class) to know about all possible user defined data types.; This also apply to the case of a static class function.; Because TMath is a special and frequent case, TFormula is aware; of all TMath functions.; */; ////////////////////////////////////////////////////////////////////////////////; /// Formula default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:1980,Performance,perform,performance,1980,"esult of a comparison is TRUE, the result is 1, otherwise 0. Already predefined names can be given. For example, if the formula. TFormula old(sin(x*(x<0.5 || x>1))) one can assign a name to the formula. By default; the name of the object = title = formula itself.; old.SetName(""old"").; then, old can be reused in a new expression.; TFormula new(""x*old"") is equivalent to:; TFormula new(""x*sin(x*(x<0.5 || x>1))""). Up to 4 dimensions are supported (indicated by x, y, z, t); An expression may have 0 parameters or a list of parameters; indicated by the sequence [par_number]. A graph showing the logic to compile and analyze a formula; is shown in TFormula::Compile and TFormula::Analyze.; Once a formula has been compiled, it can be evaluated for a given; set of parameters. see graph in TFormula::EvalPar. This class is the base class for the function classes TF1,TF2 and TF3.; It is also used by the ntuple selection mechanism TNtupleFormula. In version 7 of TFormula, the usage of fOper has been changed; to improve the performance of TFormula::EvalPar.; Conceptually, fOper was changed from a simple array of Int_t; to an array of composite values.; For example a 'ylandau(5)' operation used to be encoded as 4105;; it is now encoded as (klandau >> kTFOperShift) + 5; Any class inheriting from TFormula and using directly fOper (which; is now a private data member), needs to be updated to take this; in consideration. The member functions recommended to set and; access fOper are: SetAction, GetAction, GetActionParam; For more performant access to the information, see the implementation; TFormula::EvalPar. ### CHANGING DEFAULT SETTINGS. When creating complex formula , it may be necessary to increase; some default parameters. see static function TFormula::SetMaxima. ### WHY TFormula CANNOT ACCEPT A CLASS MEMBER FUNCTION ?. This is a frequently asked question.; C++ is a strongly typed language. There is no way for TFormula (without; recompiling this class) to know about all possible user",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:2490,Performance,perform,performant,2490,"en, old can be reused in a new expression.; TFormula new(""x*old"") is equivalent to:; TFormula new(""x*sin(x*(x<0.5 || x>1))""). Up to 4 dimensions are supported (indicated by x, y, z, t); An expression may have 0 parameters or a list of parameters; indicated by the sequence [par_number]. A graph showing the logic to compile and analyze a formula; is shown in TFormula::Compile and TFormula::Analyze.; Once a formula has been compiled, it can be evaluated for a given; set of parameters. see graph in TFormula::EvalPar. This class is the base class for the function classes TF1,TF2 and TF3.; It is also used by the ntuple selection mechanism TNtupleFormula. In version 7 of TFormula, the usage of fOper has been changed; to improve the performance of TFormula::EvalPar.; Conceptually, fOper was changed from a simple array of Int_t; to an array of composite values.; For example a 'ylandau(5)' operation used to be encoded as 4105;; it is now encoded as (klandau >> kTFOperShift) + 5; Any class inheriting from TFormula and using directly fOper (which; is now a private data member), needs to be updated to take this; in consideration. The member functions recommended to set and; access fOper are: SetAction, GetAction, GetActionParam; For more performant access to the information, see the implementation; TFormula::EvalPar. ### CHANGING DEFAULT SETTINGS. When creating complex formula , it may be necessary to increase; some default parameters. see static function TFormula::SetMaxima. ### WHY TFormula CANNOT ACCEPT A CLASS MEMBER FUNCTION ?. This is a frequently asked question.; C++ is a strongly typed language. There is no way for TFormula (without; recompiling this class) to know about all possible user defined data types.; This also apply to the case of a static class function.; Because TMath is a special and frequent case, TFormula is aware; of all TMath functions.; */; ////////////////////////////////////////////////////////////////////////////////; /// Formula default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:2425,Security,access,access,2425,"en, old can be reused in a new expression.; TFormula new(""x*old"") is equivalent to:; TFormula new(""x*sin(x*(x<0.5 || x>1))""). Up to 4 dimensions are supported (indicated by x, y, z, t); An expression may have 0 parameters or a list of parameters; indicated by the sequence [par_number]. A graph showing the logic to compile and analyze a formula; is shown in TFormula::Compile and TFormula::Analyze.; Once a formula has been compiled, it can be evaluated for a given; set of parameters. see graph in TFormula::EvalPar. This class is the base class for the function classes TF1,TF2 and TF3.; It is also used by the ntuple selection mechanism TNtupleFormula. In version 7 of TFormula, the usage of fOper has been changed; to improve the performance of TFormula::EvalPar.; Conceptually, fOper was changed from a simple array of Int_t; to an array of composite values.; For example a 'ylandau(5)' operation used to be encoded as 4105;; it is now encoded as (klandau >> kTFOperShift) + 5; Any class inheriting from TFormula and using directly fOper (which; is now a private data member), needs to be updated to take this; in consideration. The member functions recommended to set and; access fOper are: SetAction, GetAction, GetActionParam; For more performant access to the information, see the implementation; TFormula::EvalPar. ### CHANGING DEFAULT SETTINGS. When creating complex formula , it may be necessary to increase; some default parameters. see static function TFormula::SetMaxima. ### WHY TFormula CANNOT ACCEPT A CLASS MEMBER FUNCTION ?. This is a frequently asked question.; C++ is a strongly typed language. There is no way for TFormula (without; recompiling this class) to know about all possible user defined data types.; This also apply to the case of a static class function.; Because TMath is a special and frequent case, TFormula is aware; of all TMath functions.; */; ////////////////////////////////////////////////////////////////////////////////; /// Formula default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:2501,Security,access,access,2501,"en, old can be reused in a new expression.; TFormula new(""x*old"") is equivalent to:; TFormula new(""x*sin(x*(x<0.5 || x>1))""). Up to 4 dimensions are supported (indicated by x, y, z, t); An expression may have 0 parameters or a list of parameters; indicated by the sequence [par_number]. A graph showing the logic to compile and analyze a formula; is shown in TFormula::Compile and TFormula::Analyze.; Once a formula has been compiled, it can be evaluated for a given; set of parameters. see graph in TFormula::EvalPar. This class is the base class for the function classes TF1,TF2 and TF3.; It is also used by the ntuple selection mechanism TNtupleFormula. In version 7 of TFormula, the usage of fOper has been changed; to improve the performance of TFormula::EvalPar.; Conceptually, fOper was changed from a simple array of Int_t; to an array of composite values.; For example a 'ylandau(5)' operation used to be encoded as 4105;; it is now encoded as (klandau >> kTFOperShift) + 5; Any class inheriting from TFormula and using directly fOper (which; is now a private data member), needs to be updated to take this; in consideration. The member functions recommended to set and; access fOper are: SetAction, GetAction, GetActionParam; For more performant access to the information, see the implementation; TFormula::EvalPar. ### CHANGING DEFAULT SETTINGS. When creating complex formula , it may be necessary to increase; some default parameters. see static function TFormula::SetMaxima. ### WHY TFormula CANNOT ACCEPT A CLASS MEMBER FUNCTION ?. This is a frequently asked question.; C++ is a strongly typed language. There is no way for TFormula (without; recompiling this class) to know about all possible user defined data types.; This also apply to the case of a static class function.; Because TMath is a special and frequent case, TFormula is aware; of all TMath functions.; */; ////////////////////////////////////////////////////////////////////////////////; /// Formula default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:1552,Testability,log,logic,1552,"po(3) is a substitute for `exp([3]+[4]*x)`. pol3(5) is a substitute for `par[5]+par[6]*x+par[7]*x**2+par[8]*x**3`; (here Pol3 stands for Polynomial of degree 3). TMath functions can be part of the expression, eg:. - `TMath::Landau(x)*sin(x)`; - `TMath::Erf(x)`. Comparisons operators are also supported (&&, ||, ==, <=, >=, !); Examples:. sin(x*(x<0.5 || x>1)). If the result of a comparison is TRUE, the result is 1, otherwise 0. Already predefined names can be given. For example, if the formula. TFormula old(sin(x*(x<0.5 || x>1))) one can assign a name to the formula. By default; the name of the object = title = formula itself.; old.SetName(""old"").; then, old can be reused in a new expression.; TFormula new(""x*old"") is equivalent to:; TFormula new(""x*sin(x*(x<0.5 || x>1))""). Up to 4 dimensions are supported (indicated by x, y, z, t); An expression may have 0 parameters or a list of parameters; indicated by the sequence [par_number]. A graph showing the logic to compile and analyze a formula; is shown in TFormula::Compile and TFormula::Analyze.; Once a formula has been compiled, it can be evaluated for a given; set of parameters. see graph in TFormula::EvalPar. This class is the base class for the function classes TF1,TF2 and TF3.; It is also used by the ntuple selection mechanism TNtupleFormula. In version 7 of TFormula, the usage of fOper has been changed; to improve the performance of TFormula::EvalPar.; Conceptually, fOper was changed from a simple array of Int_t; to an array of composite values.; For example a 'ylandau(5)' operation used to be encoded as 4105;; it is now encoded as (klandau >> kTFOperShift) + 5; Any class inheriting from TFormula and using directly fOper (which; is now a private data member), needs to be updated to take this; in consideration. The member functions recommended to set and; access fOper are: SetAction, GetAction, GetActionParam; For more performant access to the information, see the implementation; TFormula::EvalPar. ### CHANGING DEFA",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:2054,Usability,simpl,simple,2054,"example, if the formula. TFormula old(sin(x*(x<0.5 || x>1))) one can assign a name to the formula. By default; the name of the object = title = formula itself.; old.SetName(""old"").; then, old can be reused in a new expression.; TFormula new(""x*old"") is equivalent to:; TFormula new(""x*sin(x*(x<0.5 || x>1))""). Up to 4 dimensions are supported (indicated by x, y, z, t); An expression may have 0 parameters or a list of parameters; indicated by the sequence [par_number]. A graph showing the logic to compile and analyze a formula; is shown in TFormula::Compile and TFormula::Analyze.; Once a formula has been compiled, it can be evaluated for a given; set of parameters. see graph in TFormula::EvalPar. This class is the base class for the function classes TF1,TF2 and TF3.; It is also used by the ntuple selection mechanism TNtupleFormula. In version 7 of TFormula, the usage of fOper has been changed; to improve the performance of TFormula::EvalPar.; Conceptually, fOper was changed from a simple array of Int_t; to an array of composite values.; For example a 'ylandau(5)' operation used to be encoded as 4105;; it is now encoded as (klandau >> kTFOperShift) + 5; Any class inheriting from TFormula and using directly fOper (which; is now a private data member), needs to be updated to take this; in consideration. The member functions recommended to set and; access fOper are: SetAction, GetAction, GetActionParam; For more performant access to the information, see the implementation; TFormula::EvalPar. ### CHANGING DEFAULT SETTINGS. When creating complex formula , it may be necessary to increase; some default parameters. see static function TFormula::SetMaxima. ### WHY TFormula CANNOT ACCEPT A CLASS MEMBER FUNCTION ?. This is a frequently asked question.; C++ is a strongly typed language. There is no way for TFormula (without; recompiling this class) to know about all possible user defined data types.; This also apply to the case of a static class function.; Because TMath is a specia",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:40,Availability,error,error,40,"// need to the replacement here for the error message before",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:46,Integrability,message,message,46,"// need to the replacement here for the error message before",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:4,Availability,Error,Error,4,"/*; Error(""Compile"",; ""TFormula can only call interpreted and compiled function that returns a numerical type %s returns a %s\n"",; method->GetMethodName(), method->GetMethod()->GetReturnTypeName());; */",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:19,Modifiability,extend,extended,19,"//; // MI change - extended space of functions; // not forward compatible change; //",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:288,Availability,error,errors,288,////////////////////////////////////////////////////////////////////////////////; /// Analyze a sub-expression in one formula.; ///; /// Expressions in one formula are recursively analyzed.; /// Result of analysis is stored in the object tables.; ///; /// ### Table of function codes and errors; ///; /// ~~~ {.cpp}; /// * functions :; ///; /// + 1 pow 20; /// - 2 sq 21; /// * 3 sqrt 22; /// / 4 strstr 23; /// % 5 min 24; /// max 25; /// log 30; /// cos 10 exp 31; /// sin 11 log10 32; /// tan 12; /// acos 13 abs 41; /// asin 14 sign 42; /// atan 15 int 43; /// atan2 16; /// fmod 17 rndm 50; ///; /// cosh 70 acosh 73; /// sinh 71 asinh 74; /// tanh 72 atanh 75; ///; /// expo 100 gaus 110 gausn (see note below); /// expo(0) 100 0 gaus(0) 110 0 gausn(0); /// expo(1) 100 1 gaus(1) 110 1 gausn(1); /// xexpo 100 x xgaus 110 x xgausn; /// yexpo 101 x ygaus 111 x ygausn; /// zexpo 102 x zgaus 112 x zgausn; /// xyexpo 105 x xygaus 115 x xygausn; /// yexpo(5) 102 5 ygaus(5) 111 5 ygausn(5); /// xyexpo(2) 105 2 xygaus(2) 115 2 xygausn(2); ///; /// landau 120 x landaun (see note below); /// landau(0) 120 0 landaun(0); /// landau(1) 120 1 landaun(1); /// xlandau 120 x xlandaun; /// ylandau 121 x ylandaun; /// zlandau 122 x zlandaun; /// xylandau 125 x xylandaun; /// ylandau(5) 121 5 ylandaun(5); /// xylandau(2) 125 2 xylandaun(2); ///; /// pol0 130 x pol1 130 1xx; /// pol0(0) 130 0 pol1(0) 130 100; /// pol0(1) 130 1 pol1(1) 130 101; /// xpol0 130 x xpol1 130 101; /// ypol0 131 x ypol1 131 101; /// zpol0 132 x zpol1 132 1xx; /// ypol0(5) 131 5 ypol1(5) 131 105; ///; /// pi 40; ///; /// && 60 < 64; /// || 61 > 65; /// == 62 <= 66; /// != 63 => 67; /// ! 68; /// ==(string) 76 & 78; /// !=(string) 77 | 79; /// <<(shift) 80 >>(shift) 81; /// ? : 82; ///; /// * constants (kConstants) :; ///; /// c0 141 1 c1 141 2 etc..; ///; /// * strings (kStringConst):; ///; /// sX 143 x; ///; /// * variables (kFormulaVar) :; ///; /// x 144 0 y 144 1 z 144 2 t 144 3; ///; /// * parameters :; ///; /// [,MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:3428,Availability,Error,Errors,3428,"ration are used to implement lazy evaluation of; /// && and ||. When the left hand of the expression if false; /// (respectively true), the evaluation of the right is entirely skipped; /// (since it would not change the value of the expression).; ///; /// && 142 11 (one operation on right) 142 21 (2 operations on right); /// || 142 12 (one operation on right) 142 22 (2 operations on right); ///; /// * functions calls (kFunctionCall) :; ///; /// f0 145 0 f1 145 1 etc..; ///; /// ### Errors :; ///; /// 1 : Division By Zero; /// 2 : Invalid Floating Point Operation; /// 4 : Empty String; /// 5 : invalid syntax; /// 6 : Too many operators; /// 7 : Too many parameters; /// 10 : z specified but not x and y; /// 11 : z and y specified but not x; /// 12 : y specified but not x; /// 13 : z and x specified but not y; /// 20 : non integer value for parameter number; /// 21 : atan2 requires two arguments; /// 22 : pow requires two arguments; /// 23 : degree of polynomial not specified; /// 24 : Degree of polynomial must be positive; /// 25 : Degree of polynomial must be less than 20; /// 26 : Unknown name; /// 27 : Too many constants in expression; /// 28 : strstr requires two arguments; /// 29 : interpreted or compiled function have to return a numerical type; /// 30 : Bad numerical expression; /// 31 : Part of the variable exist but some of it is not accessible or useable; /// 40 : '(' is expected; /// 41 : ')' is expected; /// 42 : '[' is expected; /// 43 : ']' is expected; ///; /// \image html TFormula_analyze.png; ///; /// ### Special functions; ///; /// By default, the formula is assigned fNumber=0. However, the following; /// formula built with simple functions are assigned fNumber:; ///; /// ""gaus"" 100 (or gausn); /// ""xygaus"" 110; /// ""expo"" 200; /// ""polN"" 300+N; /// ""landau"" 400; /// ""xylandau"" 410; ///; /// Note that expressions like gaus(0), expo(1) will force fNumber=0; ///; /// ### Warning when deriving a class from TFormula; ///; /// If you overload this member ",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:1897,Modifiability,variab,variables,1897,"us 115 x xygausn; /// yexpo(5) 102 5 ygaus(5) 111 5 ygausn(5); /// xyexpo(2) 105 2 xygaus(2) 115 2 xygausn(2); ///; /// landau 120 x landaun (see note below); /// landau(0) 120 0 landaun(0); /// landau(1) 120 1 landaun(1); /// xlandau 120 x xlandaun; /// ylandau 121 x ylandaun; /// zlandau 122 x zlandaun; /// xylandau 125 x xylandaun; /// ylandau(5) 121 5 ylandaun(5); /// xylandau(2) 125 2 xylandaun(2); ///; /// pol0 130 x pol1 130 1xx; /// pol0(0) 130 0 pol1(0) 130 100; /// pol0(1) 130 1 pol1(1) 130 101; /// xpol0 130 x xpol1 130 101; /// ypol0 131 x ypol1 131 101; /// zpol0 132 x zpol1 132 1xx; /// ypol0(5) 131 5 ypol1(5) 131 105; ///; /// pi 40; ///; /// && 60 < 64; /// || 61 > 65; /// == 62 <= 66; /// != 63 => 67; /// ! 68; /// ==(string) 76 & 78; /// !=(string) 77 | 79; /// <<(shift) 80 >>(shift) 81; /// ? : 82; ///; /// * constants (kConstants) :; ///; /// c0 141 1 c1 141 2 etc..; ///; /// * strings (kStringConst):; ///; /// sX 143 x; ///; /// * variables (kFormulaVar) :; ///; /// x 144 0 y 144 1 z 144 2 t 144 3; ///; /// * parameters :; ///; /// [1] 140 1; /// [2] 140 2; /// etc.; /// ~~~; ///; /// ### Special cases for normalized gaussian or landau distributions; ///; /// the expression ""gaus"" is a substitute for; ///; /// [0]*exp(-0.5*((x-[1])/[2])**2); ///; /// to obtain a standard normalized gaussian, use ""gausn"" instead of ""gaus""; /// the expression ""gausn"" is a substitute for; ///; /// [0]*exp(-0.5*((x-[1])/[2])**2)/(sqrt(2*pi)*[2])); ///; /// WARNING: gaus and gausn are mutually exclusive in the same expression.; ///; /// In the same way the expression ""landau"" is a substitute for; ///; /// [0]*TMath::Landau(x,[1],[2],kFALSE); ///; /// to obtain a standard normalized landau, use ""landaun"" instead of ""landau""; /// the expression ""landaun"" is a substitute for; ///; /// [0]*TMath::Landau(x,[1],[2],kTRUE); ///; /// WARNING: landau and landaun are mutually exclusive in the same expression.; ///; /// ### Boolean optimization (kBoolOptmize) :; ///; /// Those p",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:4267,Modifiability,variab,variable,4267,"ration are used to implement lazy evaluation of; /// && and ||. When the left hand of the expression if false; /// (respectively true), the evaluation of the right is entirely skipped; /// (since it would not change the value of the expression).; ///; /// && 142 11 (one operation on right) 142 21 (2 operations on right); /// || 142 12 (one operation on right) 142 22 (2 operations on right); ///; /// * functions calls (kFunctionCall) :; ///; /// f0 145 0 f1 145 1 etc..; ///; /// ### Errors :; ///; /// 1 : Division By Zero; /// 2 : Invalid Floating Point Operation; /// 4 : Empty String; /// 5 : invalid syntax; /// 6 : Too many operators; /// 7 : Too many parameters; /// 10 : z specified but not x and y; /// 11 : z and y specified but not x; /// 12 : y specified but not x; /// 13 : z and x specified but not y; /// 20 : non integer value for parameter number; /// 21 : atan2 requires two arguments; /// 22 : pow requires two arguments; /// 23 : degree of polynomial not specified; /// 24 : Degree of polynomial must be positive; /// 25 : Degree of polynomial must be less than 20; /// 26 : Unknown name; /// 27 : Too many constants in expression; /// 28 : strstr requires two arguments; /// 29 : interpreted or compiled function have to return a numerical type; /// 30 : Bad numerical expression; /// 31 : Part of the variable exist but some of it is not accessible or useable; /// 40 : '(' is expected; /// 41 : ')' is expected; /// 42 : '[' is expected; /// 43 : ']' is expected; ///; /// \image html TFormula_analyze.png; ///; /// ### Special functions; ///; /// By default, the formula is assigned fNumber=0. However, the following; /// formula built with simple functions are assigned fNumber:; ///; /// ""gaus"" 100 (or gausn); /// ""xygaus"" 110; /// ""expo"" 200; /// ""polN"" 300+N; /// ""landau"" 400; /// ""xylandau"" 410; ///; /// Note that expressions like gaus(0), expo(1) will force fNumber=0; ///; /// ### Warning when deriving a class from TFormula; ///; /// If you overload this member ",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:2885,Performance,optimiz,optimization,2885,"x 144 0 y 144 1 z 144 2 t 144 3; ///; /// * parameters :; ///; /// [1] 140 1; /// [2] 140 2; /// etc.; /// ~~~; ///; /// ### Special cases for normalized gaussian or landau distributions; ///; /// the expression ""gaus"" is a substitute for; ///; /// [0]*exp(-0.5*((x-[1])/[2])**2); ///; /// to obtain a standard normalized gaussian, use ""gausn"" instead of ""gaus""; /// the expression ""gausn"" is a substitute for; ///; /// [0]*exp(-0.5*((x-[1])/[2])**2)/(sqrt(2*pi)*[2])); ///; /// WARNING: gaus and gausn are mutually exclusive in the same expression.; ///; /// In the same way the expression ""landau"" is a substitute for; ///; /// [0]*TMath::Landau(x,[1],[2],kFALSE); ///; /// to obtain a standard normalized landau, use ""landaun"" instead of ""landau""; /// the expression ""landaun"" is a substitute for; ///; /// [0]*TMath::Landau(x,[1],[2],kTRUE); ///; /// WARNING: landau and landaun are mutually exclusive in the same expression.; ///; /// ### Boolean optimization (kBoolOptmize) :; ///; /// Those pseudo operation are used to implement lazy evaluation of; /// && and ||. When the left hand of the expression if false; /// (respectively true), the evaluation of the right is entirely skipped; /// (since it would not change the value of the expression).; ///; /// && 142 11 (one operation on right) 142 21 (2 operations on right); /// || 142 12 (one operation on right) 142 22 (2 operations on right); ///; /// * functions calls (kFunctionCall) :; ///; /// f0 145 0 f1 145 1 etc..; ///; /// ### Errors :; ///; /// 1 : Division By Zero; /// 2 : Invalid Floating Point Operation; /// 4 : Empty String; /// 5 : invalid syntax; /// 6 : Too many operators; /// 7 : Too many parameters; /// 10 : z specified but not x and y; /// 11 : z and y specified but not x; /// 12 : y specified but not x; /// 13 : z and x specified but not y; /// 20 : non integer value for parameter number; /// 21 : atan2 requires two arguments; /// 22 : pow requires two arguments; /// 23 : degree of polynomial not specified; ///",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:4304,Security,access,accessible,4304,"ration are used to implement lazy evaluation of; /// && and ||. When the left hand of the expression if false; /// (respectively true), the evaluation of the right is entirely skipped; /// (since it would not change the value of the expression).; ///; /// && 142 11 (one operation on right) 142 21 (2 operations on right); /// || 142 12 (one operation on right) 142 22 (2 operations on right); ///; /// * functions calls (kFunctionCall) :; ///; /// f0 145 0 f1 145 1 etc..; ///; /// ### Errors :; ///; /// 1 : Division By Zero; /// 2 : Invalid Floating Point Operation; /// 4 : Empty String; /// 5 : invalid syntax; /// 6 : Too many operators; /// 7 : Too many parameters; /// 10 : z specified but not x and y; /// 11 : z and y specified but not x; /// 12 : y specified but not x; /// 13 : z and x specified but not y; /// 20 : non integer value for parameter number; /// 21 : atan2 requires two arguments; /// 22 : pow requires two arguments; /// 23 : degree of polynomial not specified; /// 24 : Degree of polynomial must be positive; /// 25 : Degree of polynomial must be less than 20; /// 26 : Unknown name; /// 27 : Too many constants in expression; /// 28 : strstr requires two arguments; /// 29 : interpreted or compiled function have to return a numerical type; /// 30 : Bad numerical expression; /// 31 : Part of the variable exist but some of it is not accessible or useable; /// 40 : '(' is expected; /// 41 : ')' is expected; /// 42 : '[' is expected; /// 43 : ']' is expected; ///; /// \image html TFormula_analyze.png; ///; /// ### Special functions; ///; /// By default, the formula is assigned fNumber=0. However, the following; /// formula built with simple functions are assigned fNumber:; ///; /// ""gaus"" 100 (or gausn); /// ""xygaus"" 110; /// ""expo"" 200; /// ""polN"" 300+N; /// ""landau"" 400; /// ""xylandau"" 410; ///; /// Note that expressions like gaus(0), expo(1) will force fNumber=0; ///; /// ### Warning when deriving a class from TFormula; ///; /// If you overload this member ",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:440,Testability,log,log,440,///////////; /// Analyze a sub-expression in one formula.; ///; /// Expressions in one formula are recursively analyzed.; /// Result of analysis is stored in the object tables.; ///; /// ### Table of function codes and errors; ///; /// ~~~ {.cpp}; /// * functions :; ///; /// + 1 pow 20; /// - 2 sq 21; /// * 3 sqrt 22; /// / 4 strstr 23; /// % 5 min 24; /// max 25; /// log 30; /// cos 10 exp 31; /// sin 11 log10 32; /// tan 12; /// acos 13 abs 41; /// asin 14 sign 42; /// atan 15 int 43; /// atan2 16; /// fmod 17 rndm 50; ///; /// cosh 70 acosh 73; /// sinh 71 asinh 74; /// tanh 72 atanh 75; ///; /// expo 100 gaus 110 gausn (see note below); /// expo(0) 100 0 gaus(0) 110 0 gausn(0); /// expo(1) 100 1 gaus(1) 110 1 gausn(1); /// xexpo 100 x xgaus 110 x xgausn; /// yexpo 101 x ygaus 111 x ygausn; /// zexpo 102 x zgaus 112 x zgausn; /// xyexpo 105 x xygaus 115 x xygausn; /// yexpo(5) 102 5 ygaus(5) 111 5 ygausn(5); /// xyexpo(2) 105 2 xygaus(2) 115 2 xygausn(2); ///; /// landau 120 x landaun (see note below); /// landau(0) 120 0 landaun(0); /// landau(1) 120 1 landaun(1); /// xlandau 120 x xlandaun; /// ylandau 121 x ylandaun; /// zlandau 122 x zlandaun; /// xylandau 125 x xylandaun; /// ylandau(5) 121 5 ylandaun(5); /// xylandau(2) 125 2 xylandaun(2); ///; /// pol0 130 x pol1 130 1xx; /// pol0(0) 130 0 pol1(0) 130 100; /// pol0(1) 130 1 pol1(1) 130 101; /// xpol0 130 x xpol1 130 101; /// ypol0 131 x ypol1 131 101; /// zpol0 132 x zpol1 132 1xx; /// ypol0(5) 131 5 ypol1(5) 131 105; ///; /// pi 40; ///; /// && 60 < 64; /// || 61 > 65; /// == 62 <= 66; /// != 63 => 67; /// ! 68; /// ==(string) 76 & 78; /// !=(string) 77 | 79; /// <<(shift) 80 >>(shift) 81; /// ? : 82; ///; /// * constants (kConstants) :; ///; /// c0 141 1 c1 141 2 etc..; ///; /// * strings (kStringConst):; ///; /// sX 143 x; ///; /// * variables (kFormulaVar) :; ///; /// x 144 0 y 144 1 z 144 2 t 144 3; ///; /// * parameters :; ///; /// [1] 140 1; /// [2] 140 2; /// etc.; /// ~~~; ///; /// ### Special case,MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:4609,Usability,simpl,simple,4609," : Too many parameters; /// 10 : z specified but not x and y; /// 11 : z and y specified but not x; /// 12 : y specified but not x; /// 13 : z and x specified but not y; /// 20 : non integer value for parameter number; /// 21 : atan2 requires two arguments; /// 22 : pow requires two arguments; /// 23 : degree of polynomial not specified; /// 24 : Degree of polynomial must be positive; /// 25 : Degree of polynomial must be less than 20; /// 26 : Unknown name; /// 27 : Too many constants in expression; /// 28 : strstr requires two arguments; /// 29 : interpreted or compiled function have to return a numerical type; /// 30 : Bad numerical expression; /// 31 : Part of the variable exist but some of it is not accessible or useable; /// 40 : '(' is expected; /// 41 : ')' is expected; /// 42 : '[' is expected; /// 43 : ']' is expected; ///; /// \image html TFormula_analyze.png; ///; /// ### Special functions; ///; /// By default, the formula is assigned fNumber=0. However, the following; /// formula built with simple functions are assigned fNumber:; ///; /// ""gaus"" 100 (or gausn); /// ""xygaus"" 110; /// ""expo"" 200; /// ""polN"" 300+N; /// ""landau"" 400; /// ""xylandau"" 410; ///; /// Note that expressions like gaus(0), expo(1) will force fNumber=0; ///; /// ### Warning when deriving a class from TFormula; ///; /// If you overload this member function, you also HAVE TO; /// never call the constructor:; ///; /// ~~~ {.cpp}; /// TFormula::TFormula(const char *name,const char *expression); /// ~~~; ///; /// and write your own constructor; ///; /// ~~~ {.cpp}; /// MyClass::MyClass(const char *name,const char *expression) : TFormula(); /// ~~~; ///; /// which has to call the TFormula default constructor and whose implementation; /// should be similar to the implementation of the normal TFormula constructor; ///; /// This is necessary because the normal TFormula constructor call indirectly; /// the virtual member functions Analyze, DefaultString, DefaultValue; /// and DefaultVariable.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:12,Usability,simpl,simple,12,"// Look for simple operators",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:17,Security,authoriz,authorized,17,"// Character not authorized within a template parameter",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:126,Availability,error,error,126,"// The previous implementation allowed a '.' in the exponent.; // That information was ignored (by sscanf), we now make it an error; // hasDot = kFALSE;",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:32,Modifiability,variab,variable,32,"// Check if chaine is a defined variable.; // Note that DefinedVariable can be overloaded",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:3,Availability,Error,Error,3,"// Error message already issued",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:9,Integrability,message,message,9,"// Error message already issued",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:29,Availability,error,error,29,"// The '||err' is to grab an error coming from AnalyzeFunction",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:3,Availability,error,errors,3,"// errors!",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:9,Availability,error,errors,9,"// if no errors, copy local parameters to formula objects",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:29,Energy Efficiency,allocate,allocated,29,"// Here we shrink the arrays allocated like this:; // fExpr = new TString[gMAXOP];; // fConst = new Double_t[gMAXCONST];; // fParams = new Double_t[gMAXPAR];; // fNames = new TString[gMAXPAR];; // fOper = new Int_t[gMAXOP];; // fParams and fNames may be already 0, so we have to check.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:132,Modifiability,variab,variables,132,"////////////////////////////////////////////////////////////////////////////////; /// Check if expression is in the list of defined variables.; ///; /// This member function can be overloaded in derived classes; ///; /// If you overload this member function, you also HAVE TO; /// never call the constructor:; ///; /// ~~~ {.cpp}; /// TFormula::TFormula(const char *name,const char *expression); /// ~~~; ///; /// and write your own constructor; ///; /// ~~~ {.cpp}; /// MyClass::MyClass(const char *name,const char *expression) : TFormula(); /// ~~~; ///; /// which has to call the TFormula default constructor and whose implementation; /// should be similar to the implementation of the normal TFormula constructor; ///; /// This is necessary because the normal TFormula constructor call indirectly; /// the virtual member functions Analyze, DefaultString, DefaultValue; /// and DefaultVariable.; ///; /// The expected returns values are; /// - -2 : the name has been recognized but won't be usable; /// - -1 : the name has not been recognized; /// - >=0 : the name has been recognized, return the action parameter.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:994,Usability,usab,usable,994,"////////////////////////////////////////////////////////////////////////////////; /// Check if expression is in the list of defined variables.; ///; /// This member function can be overloaded in derived classes; ///; /// If you overload this member function, you also HAVE TO; /// never call the constructor:; ///; /// ~~~ {.cpp}; /// TFormula::TFormula(const char *name,const char *expression); /// ~~~; ///; /// and write your own constructor; ///; /// ~~~ {.cpp}; /// MyClass::MyClass(const char *name,const char *expression) : TFormula(); /// ~~~; ///; /// which has to call the TFormula default constructor and whose implementation; /// should be similar to the implementation of the normal TFormula constructor; ///; /// This is necessary because the normal TFormula constructor call indirectly; /// the virtual member functions Analyze, DefaultString, DefaultValue; /// and DefaultVariable.; ///; /// The expected returns values are; /// - -2 : the name has been recognized but won't be usable; /// - -1 : the name has not been recognized; /// - >=0 : the name has been recognized, return the action parameter.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:17,Modifiability,extend,extended,17,"// MI change; // extended defined variable (MI); //",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:34,Modifiability,variab,variable,34,"// MI change; // extended defined variable (MI); //",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:140,Modifiability,variab,variables,140,"////////////////////////////////////////////////////////////////////////////////; /// Evaluate this formula.; ///; /// The current value of variables x,y,z,t is passed through x, y, z and t.; /// The parameters used will be the ones in the array params if params is given; /// otherwise parameters will be taken from the stored data members fParams",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:140,Modifiability,variab,variables,140,"////////////////////////////////////////////////////////////////////////////////; /// Evaluate this formula.; ///; /// The current value of variables x,y,z,t is passed through the pointer x.; /// The parameters used will be the ones in the array params if params is given; /// otherwise parameters will be taken from the stored data members fParams; ///; /// \image html TFormula_eval.png",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:21,Performance,optimiz,optimizer,21,"// boolean operation optimizer",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:10,Usability,simpl,simplification,10,/* aucune simplification ! (sic) */,MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:510,Integrability,depend,depend,510,"////////////////////////////////////////////////////////////////////////////////; /// Reconstruct the formula expression from the internal TFormula member variables; ///; /// This function uses the internal member variables of TFormula to; /// construct the mathematical expression associated with the TFormula; /// instance. This function can be used to get an expanded version of the; /// expression originally assigned to the TFormula instance, i.e. that; /// the string returned by GetExpFormula() doesn't depend on other; /// TFormula object names.; ///; /// if option contains ""p"" the returned string will contain the formula; /// expression with symbolic parameters, eg [0] replaced by the actual value; /// of the parameter. Example:; /// if expression in formula is: ""[0]*(x>-[1])+[2]*exp(-[3]*x)""; /// and parameters are 3.25,-4.01,4.44,-0.04, GetExpFormula(""p"") will return:; /// ""(3.25*(x>+4.01))+(4.44*exp(+0.04*x))""",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:155,Modifiability,variab,variables,155,"////////////////////////////////////////////////////////////////////////////////; /// Reconstruct the formula expression from the internal TFormula member variables; ///; /// This function uses the internal member variables of TFormula to; /// construct the mathematical expression associated with the TFormula; /// instance. This function can be used to get an expanded version of the; /// expression originally assigned to the TFormula instance, i.e. that; /// the string returned by GetExpFormula() doesn't depend on other; /// TFormula object names.; ///; /// if option contains ""p"" the returned string will contain the formula; /// expression with symbolic parameters, eg [0] replaced by the actual value; /// of the parameter. Example:; /// if expression in formula is: ""[0]*(x>-[1])+[2]*exp(-[3]*x)""; /// and parameters are 3.25,-4.01,4.44,-0.04, GetExpFormula(""p"") will return:; /// ""(3.25*(x>+4.01))+(4.44*exp(+0.04*x))""",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:214,Modifiability,variab,variables,214,"////////////////////////////////////////////////////////////////////////////////; /// Reconstruct the formula expression from the internal TFormula member variables; ///; /// This function uses the internal member variables of TFormula to; /// construct the mathematical expression associated with the TFormula; /// instance. This function can be used to get an expanded version of the; /// expression originally assigned to the TFormula instance, i.e. that; /// the string returned by GetExpFormula() doesn't depend on other; /// TFormula object names.; ///; /// if option contains ""p"" the returned string will contain the formula; /// expression with symbolic parameters, eg [0] replaced by the actual value; /// of the parameter. Example:; /// if expression in formula is: ""[0]*(x>-[1])+[2]*exp(-[3]*x)""; /// and parameters are 3.25,-4.01,4.44,-0.04, GetExpFormula(""p"") will return:; /// ""(3.25*(x>+4.01))+(4.44*exp(+0.04*x))""",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:11,Performance,optimiz,optimization,11,"// Boolean optimization breakpoint",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:2,Usability,Simpl,Simple,2,"//Simple name (parameter,pol0,landau, etc)",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:13,Modifiability,variab,variables,13,"//constants, variables x,y,z,t, pi",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:64,Performance,Optimiz,Optimize,64,"// skip the implied multiplication.; // For consistency and for Optimize to work correctly; // we need to remove the ""-1"" string in fExpr",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:21,Performance,optimiz,optimizer,21,"// boolean operation optimizer",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:5,Modifiability,variab,variable,5,"// a variable",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:10,Modifiability,variab,variable,10,"// a tree variable",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:376,Modifiability,variab,variables,376,"////////////////////////////////////////////////////////////////////////////////; /// MI include; ///; /// Optimize formula; /// - Minimize the number of operands; /// 1. several operands are glued together; /// 2. some primitive functions glued together - exemp. (x+y) => PlusXY(x,y); /// 3. maximize number of standard calls minimizing number of jumps in Eval cases; /// 4. variables, parameters and constants are mapped - using fOperOfssets0; /// Eval procedure use direct acces to data (only one corresponding case statement in eval procedure); /// ~~~ {.cpp}; /// pdata[operand={Var,Par,Const}][offset]; /// pdata[fOperOffsets0[i]][fOperOffset1[i+1]]; /// ~~~; /// - The fastest evaluation function is chosen at the end; /// 1. fOptimal := pointer to the fastest function for given evaluation string; /// ~~~ {.cpp}; /// switch(GetActionOptimized(0)){; /// case kData : {fOptimal= (TFormulaPrimitive::TFuncG)&TFormula::EvalPrimitive0; break;}; /// case kUnary : {fOptimal= (TFormulaPrimitive::TFuncG)&TFormula::EvalPrimitive1; break;}; /// case kBinary : {fOptimal= (TFormulaPrimitive::TFuncG)&TFormula::EvalPrimitive2; break;}; /// case kThree : {fOptimal= (TFormulaPrimitive::TFuncG)&TFormula::EvalPrimitive3; break;}; /// case kFDM : {fOptimal= (TFormulaPrimitive::TFuncG)&TFormula::EvalPrimitive4; break;}; /// }; /// ~~~; /// 2. ex.; /// - fOptimal = TFormula::EvalPrimitive0 - if it return only variable, constant or parameter; /// - = TFormula::EvalPrimitive1 - if only one unary operation; /// - = TFormula::EvalPrimitive2 - if only one binary operation",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:1406,Modifiability,variab,variable,1406,"////////////////////////////////////////////////////////////////////////////////; /// MI include; ///; /// Optimize formula; /// - Minimize the number of operands; /// 1. several operands are glued together; /// 2. some primitive functions glued together - exemp. (x+y) => PlusXY(x,y); /// 3. maximize number of standard calls minimizing number of jumps in Eval cases; /// 4. variables, parameters and constants are mapped - using fOperOfssets0; /// Eval procedure use direct acces to data (only one corresponding case statement in eval procedure); /// ~~~ {.cpp}; /// pdata[operand={Var,Par,Const}][offset]; /// pdata[fOperOffsets0[i]][fOperOffset1[i+1]]; /// ~~~; /// - The fastest evaluation function is chosen at the end; /// 1. fOptimal := pointer to the fastest function for given evaluation string; /// ~~~ {.cpp}; /// switch(GetActionOptimized(0)){; /// case kData : {fOptimal= (TFormulaPrimitive::TFuncG)&TFormula::EvalPrimitive0; break;}; /// case kUnary : {fOptimal= (TFormulaPrimitive::TFuncG)&TFormula::EvalPrimitive1; break;}; /// case kBinary : {fOptimal= (TFormulaPrimitive::TFuncG)&TFormula::EvalPrimitive2; break;}; /// case kThree : {fOptimal= (TFormulaPrimitive::TFuncG)&TFormula::EvalPrimitive3; break;}; /// case kFDM : {fOptimal= (TFormulaPrimitive::TFuncG)&TFormula::EvalPrimitive4; break;}; /// }; /// ~~~; /// 2. ex.; /// - fOptimal = TFormula::EvalPrimitive0 - if it return only variable, constant or parameter; /// - = TFormula::EvalPrimitive1 - if only one unary operation; /// - = TFormula::EvalPrimitive2 - if only one binary operation",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:107,Performance,Optimiz,Optimize,107,"////////////////////////////////////////////////////////////////////////////////; /// MI include; ///; /// Optimize formula; /// - Minimize the number of operands; /// 1. several operands are glued together; /// 2. some primitive functions glued together - exemp. (x+y) => PlusXY(x,y); /// 3. maximize number of standard calls minimizing number of jumps in Eval cases; /// 4. variables, parameters and constants are mapped - using fOperOfssets0; /// Eval procedure use direct acces to data (only one corresponding case statement in eval procedure); /// ~~~ {.cpp}; /// pdata[operand={Var,Par,Const}][offset]; /// pdata[fOperOffsets0[i]][fOperOffset1[i+1]]; /// ~~~; /// - The fastest evaluation function is chosen at the end; /// 1. fOptimal := pointer to the fastest function for given evaluation string; /// ~~~ {.cpp}; /// switch(GetActionOptimized(0)){; /// case kData : {fOptimal= (TFormulaPrimitive::TFuncG)&TFormula::EvalPrimitive0; break;}; /// case kUnary : {fOptimal= (TFormulaPrimitive::TFuncG)&TFormula::EvalPrimitive1; break;}; /// case kBinary : {fOptimal= (TFormulaPrimitive::TFuncG)&TFormula::EvalPrimitive2; break;}; /// case kThree : {fOptimal= (TFormulaPrimitive::TFuncG)&TFormula::EvalPrimitive3; break;}; /// case kFDM : {fOptimal= (TFormulaPrimitive::TFuncG)&TFormula::EvalPrimitive4; break;}; /// }; /// ~~~; /// 2. ex.; /// - fOptimal = TFormula::EvalPrimitive0 - if it return only variable, constant or parameter; /// - = TFormula::EvalPrimitive1 - if only one unary operation; /// - = TFormula::EvalPrimitive2 - if only one binary operation",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:7,Performance,optimiz,optimize,7,"//; // optimize booleans; //",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:9,Performance,optimiz,optimized,9,"// to be optimized",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:9,Performance,optimiz,optimized,9,"// to be optimized",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:9,Performance,optimiz,optimized,9,"// to be optimized",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:9,Performance,optimiz,optimized,9,"// to be optimized",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:9,Performance,optimiz,optimized,9,"// to be optimized",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:9,Performance,optimiz,optimized,9,"// to be optimized",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:9,Performance,optimiz,optimized,9,"// to be optimized",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:9,Performance,optimiz,optimized,9,"// to be optimized",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:41,Performance,optimiz,optimize,41,"//; // Recalculate long jump for Boolean optimize; //",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:140,Modifiability,variab,variables,140,"////////////////////////////////////////////////////////////////////////////////; /// Evaluate this formula.; ///; /// The current value of variables x,y,z,t is passed through the pointer x.; /// The parameters used will be the ones in the array params if params is given; /// otherwise parameters will be taken from the stored data members fParams; ///; /// \image html TFormula_eval.png",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:56,Performance,optimiz,optimize,56,"// use the fact that other were check before - see bool optimize",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:21,Performance,optimiz,optimizer,21,"// boolean operation optimizer",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:10,Usability,simpl,simplification,10,/* aucune simplification ! (sic) */,MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:615,Performance,perform,performance,615,"////////////////////////////////////////////////////////////////////////////////; /// static function to set the maximum value of 3 parameters; ///; /// - maxop : maximum number of operations; /// - maxpar : maximum number of parameters; /// - maxconst : maximum number of constants; ///; /// None of these parameters cannot be less than 10 (default is 1000); /// call this function to increase one or all maxima when processing; /// very complex formula, eg TFormula::SetMaxima(100000,1000,1000000);; /// If you process many functions with a small number of operations/parameters; /// you may gain some memory and performance by decreasing these values.",MatchSource.CODE_COMMENT,hist/hist/src/TFormula_v5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:4534,Availability,error,errors,4534,"## Restricting the fit range; The fit range can be restricted through. fit->SetRangeX(first bin #, last bin #);; and freed using. fit->ReleaseRangeX();; For 2D histograms the Y range can be similarly restricted using. fit->SetRangeY(first bin #, last bin #);; fit->ReleaseRangeY();; and for 3D histograms also. fit->SetRangeZ(first bin #, last bin #);; fit->ReleaseRangeZ();; It is also possible to exclude individual bins from the fit through. fit->ExcludeBin(bin #);; where the given bin number is assumed to follow the TH1::GetBin() numbering.; Any bins excluded in this way can be included again using the corresponding. fit->IncludeBin(bin #);. ## Weights histograms; Weights histograms (for a motivation see the above publication) can be specified; for the individual MC sources through. fit->SetWeight(parameter #, pointer to weights histogram);; and unset by specifying a null pointer. ## Obtaining fit results; The fit is carried out through. Int_t status = fit->Fit();; where status is the code returned from the ""MINIMIZE"" command. For fits; that converged, parameter values and errors can be obtained through. fit->GetResult(parameter #, value, error);; and the histogram corresponding to the total Monte Carlo prediction (which; is not the same as a simple weighted sum of the input Monte Carlo distributions); can be obtained by. TH1* result = fit->GetPlot();; ## Using different histograms; It is possible to change the histogram being fitted through. fit->SetData(TH1* data);; and to change the template histogram for a given parameter number through. fit->SetMC(parameter #, TH1* MC);; This can speed up code in case of multiple data or template histograms;; however, it should be done with care as any settings are taken over from; the previous fit. In addition, neither the dimensionality nor the numbers of; bins of the histograms should change (in that case it is better to instantiate; a new TFractionFitter object). ## Errors; Any serious inconsistency results in an error.; */",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:4601,Availability,error,error,4601,"## Restricting the fit range; The fit range can be restricted through. fit->SetRangeX(first bin #, last bin #);; and freed using. fit->ReleaseRangeX();; For 2D histograms the Y range can be similarly restricted using. fit->SetRangeY(first bin #, last bin #);; fit->ReleaseRangeY();; and for 3D histograms also. fit->SetRangeZ(first bin #, last bin #);; fit->ReleaseRangeZ();; It is also possible to exclude individual bins from the fit through. fit->ExcludeBin(bin #);; where the given bin number is assumed to follow the TH1::GetBin() numbering.; Any bins excluded in this way can be included again using the corresponding. fit->IncludeBin(bin #);. ## Weights histograms; Weights histograms (for a motivation see the above publication) can be specified; for the individual MC sources through. fit->SetWeight(parameter #, pointer to weights histogram);; and unset by specifying a null pointer. ## Obtaining fit results; The fit is carried out through. Int_t status = fit->Fit();; where status is the code returned from the ""MINIMIZE"" command. For fits; that converged, parameter values and errors can be obtained through. fit->GetResult(parameter #, value, error);; and the histogram corresponding to the total Monte Carlo prediction (which; is not the same as a simple weighted sum of the input Monte Carlo distributions); can be obtained by. TH1* result = fit->GetPlot();; ## Using different histograms; It is possible to change the histogram being fitted through. fit->SetData(TH1* data);; and to change the template histogram for a given parameter number through. fit->SetMC(parameter #, TH1* MC);; This can speed up code in case of multiple data or template histograms;; however, it should be done with care as any settings are taken over from; the previous fit. In addition, neither the dimensionality nor the numbers of; bins of the histograms should change (in that case it is better to instantiate; a new TFractionFitter object). ## Errors; Any serious inconsistency results in an error.; */",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:5386,Availability,Error,Errors,5386,"## Restricting the fit range; The fit range can be restricted through. fit->SetRangeX(first bin #, last bin #);; and freed using. fit->ReleaseRangeX();; For 2D histograms the Y range can be similarly restricted using. fit->SetRangeY(first bin #, last bin #);; fit->ReleaseRangeY();; and for 3D histograms also. fit->SetRangeZ(first bin #, last bin #);; fit->ReleaseRangeZ();; It is also possible to exclude individual bins from the fit through. fit->ExcludeBin(bin #);; where the given bin number is assumed to follow the TH1::GetBin() numbering.; Any bins excluded in this way can be included again using the corresponding. fit->IncludeBin(bin #);. ## Weights histograms; Weights histograms (for a motivation see the above publication) can be specified; for the individual MC sources through. fit->SetWeight(parameter #, pointer to weights histogram);; and unset by specifying a null pointer. ## Obtaining fit results; The fit is carried out through. Int_t status = fit->Fit();; where status is the code returned from the ""MINIMIZE"" command. For fits; that converged, parameter values and errors can be obtained through. fit->GetResult(parameter #, value, error);; and the histogram corresponding to the total Monte Carlo prediction (which; is not the same as a simple weighted sum of the input Monte Carlo distributions); can be obtained by. TH1* result = fit->GetPlot();; ## Using different histograms; It is possible to change the histogram being fitted through. fit->SetData(TH1* data);; and to change the template histogram for a given parameter number through. fit->SetMC(parameter #, TH1* MC);; This can speed up code in case of multiple data or template histograms;; however, it should be done with care as any settings are taken over from; the previous fit. In addition, neither the dimensionality nor the numbers of; bins of the histograms should change (in that case it is better to instantiate; a new TFractionFitter object). ## Errors; Any serious inconsistency results in an error.; */",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:5434,Availability,error,error,5434,"## Restricting the fit range; The fit range can be restricted through. fit->SetRangeX(first bin #, last bin #);; and freed using. fit->ReleaseRangeX();; For 2D histograms the Y range can be similarly restricted using. fit->SetRangeY(first bin #, last bin #);; fit->ReleaseRangeY();; and for 3D histograms also. fit->SetRangeZ(first bin #, last bin #);; fit->ReleaseRangeZ();; It is also possible to exclude individual bins from the fit through. fit->ExcludeBin(bin #);; where the given bin number is assumed to follow the TH1::GetBin() numbering.; Any bins excluded in this way can be included again using the corresponding. fit->IncludeBin(bin #);. ## Weights histograms; Weights histograms (for a motivation see the above publication) can be specified; for the individual MC sources through. fit->SetWeight(parameter #, pointer to weights histogram);; and unset by specifying a null pointer. ## Obtaining fit results; The fit is carried out through. Int_t status = fit->Fit();; where status is the code returned from the ""MINIMIZE"" command. For fits; that converged, parameter values and errors can be obtained through. fit->GetResult(parameter #, value, error);; and the histogram corresponding to the total Monte Carlo prediction (which; is not the same as a simple weighted sum of the input Monte Carlo distributions); can be obtained by. TH1* result = fit->GetPlot();; ## Using different histograms; It is possible to change the histogram being fitted through. fit->SetData(TH1* data);; and to change the template histogram for a given parameter number through. fit->SetMC(parameter #, TH1* MC);; This can speed up code in case of multiple data or template histograms;; however, it should be done with care as any settings are taken over from; the previous fit. In addition, neither the dimensionality nor the numbers of; bins of the histograms should change (in that case it is better to instantiate; a new TFractionFitter object). ## Errors; Any serious inconsistency results in an error.; */",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:3579,Deployability,Release,ReleaseRangeX,3579,"istribution as the data one) are carried out.; The TVirtualFitter object is then addressed and all fit parameters (the; template fractions) declared (initially unbounded). ## Applying constraints; Fit parameters can be constrained through. fit->Constrain(parameter #, lower bound, upper bound);. Setting lower bound = upper bound = 0 removes the constraint (a la Minuit);; however, a function. fit->Unconstrain(parameter #). is also provided to simplify this. ## Setting parameter values; The function. ROOT::Fit::Fitter* fitter = fit->GetFitter();. is provided for direct access to the ROOT::Fit::Fitter object. This allows to; set and fix parameter values, limits and set step sizes directly via. fitter->Config().ParSettings(parameter #).Set(const std::string &name, double value, double step, double lower, double upper);. ## Restricting the fit range; The fit range can be restricted through. fit->SetRangeX(first bin #, last bin #);; and freed using. fit->ReleaseRangeX();; For 2D histograms the Y range can be similarly restricted using. fit->SetRangeY(first bin #, last bin #);; fit->ReleaseRangeY();; and for 3D histograms also. fit->SetRangeZ(first bin #, last bin #);; fit->ReleaseRangeZ();; It is also possible to exclude individual bins from the fit through. fit->ExcludeBin(bin #);; where the given bin number is assumed to follow the TH1::GetBin() numbering.; Any bins excluded in this way can be included again using the corresponding. fit->IncludeBin(bin #);. ## Weights histograms; Weights histograms (for a motivation see the above publication) can be specified; for the individual MC sources through. fit->SetWeight(parameter #, pointer to weights histogram);; and unset by specifying a null pointer. ## Obtaining fit results; The fit is carried out through. Int_t status = fit->Fit();; where status is the code returned from the ""MINIMIZE"" command. For fits; that converged, parameter values and errors can be obtained through. fit->GetResult(parameter #, value, error);; and the",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:3709,Deployability,Release,ReleaseRangeY,3709," and all fit parameters (the; template fractions) declared (initially unbounded). ## Applying constraints; Fit parameters can be constrained through. fit->Constrain(parameter #, lower bound, upper bound);. Setting lower bound = upper bound = 0 removes the constraint (a la Minuit);; however, a function. fit->Unconstrain(parameter #). is also provided to simplify this. ## Setting parameter values; The function. ROOT::Fit::Fitter* fitter = fit->GetFitter();. is provided for direct access to the ROOT::Fit::Fitter object. This allows to; set and fix parameter values, limits and set step sizes directly via. fitter->Config().ParSettings(parameter #).Set(const std::string &name, double value, double step, double lower, double upper);. ## Restricting the fit range; The fit range can be restricted through. fit->SetRangeX(first bin #, last bin #);; and freed using. fit->ReleaseRangeX();; For 2D histograms the Y range can be similarly restricted using. fit->SetRangeY(first bin #, last bin #);; fit->ReleaseRangeY();; and for 3D histograms also. fit->SetRangeZ(first bin #, last bin #);; fit->ReleaseRangeZ();; It is also possible to exclude individual bins from the fit through. fit->ExcludeBin(bin #);; where the given bin number is assumed to follow the TH1::GetBin() numbering.; Any bins excluded in this way can be included again using the corresponding. fit->IncludeBin(bin #);. ## Weights histograms; Weights histograms (for a motivation see the above publication) can be specified; for the individual MC sources through. fit->SetWeight(parameter #, pointer to weights histogram);; and unset by specifying a null pointer. ## Obtaining fit results; The fit is carried out through. Int_t status = fit->Fit();; where status is the code returned from the ""MINIMIZE"" command. For fits; that converged, parameter values and errors can be obtained through. fit->GetResult(parameter #, value, error);; and the histogram corresponding to the total Monte Carlo prediction (which; is not the same as a s",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:3802,Deployability,Release,ReleaseRangeZ,3802,"ameters can be constrained through. fit->Constrain(parameter #, lower bound, upper bound);. Setting lower bound = upper bound = 0 removes the constraint (a la Minuit);; however, a function. fit->Unconstrain(parameter #). is also provided to simplify this. ## Setting parameter values; The function. ROOT::Fit::Fitter* fitter = fit->GetFitter();. is provided for direct access to the ROOT::Fit::Fitter object. This allows to; set and fix parameter values, limits and set step sizes directly via. fitter->Config().ParSettings(parameter #).Set(const std::string &name, double value, double step, double lower, double upper);. ## Restricting the fit range; The fit range can be restricted through. fit->SetRangeX(first bin #, last bin #);; and freed using. fit->ReleaseRangeX();; For 2D histograms the Y range can be similarly restricted using. fit->SetRangeY(first bin #, last bin #);; fit->ReleaseRangeY();; and for 3D histograms also. fit->SetRangeZ(first bin #, last bin #);; fit->ReleaseRangeZ();; It is also possible to exclude individual bins from the fit through. fit->ExcludeBin(bin #);; where the given bin number is assumed to follow the TH1::GetBin() numbering.; Any bins excluded in this way can be included again using the corresponding. fit->IncludeBin(bin #);. ## Weights histograms; Weights histograms (for a motivation see the above publication) can be specified; for the individual MC sources through. fit->SetWeight(parameter #, pointer to weights histogram);; and unset by specifying a null pointer. ## Obtaining fit results; The fit is carried out through. Int_t status = fit->Fit();; where status is the code returned from the ""MINIMIZE"" command. For fits; that converged, parameter values and errors can be obtained through. fit->GetResult(parameter #, value, error);; and the histogram corresponding to the total Monte Carlo prediction (which; is not the same as a simple weighted sum of the input Monte Carlo distributions); can be obtained by. TH1* result = fit->GetPlot();; ##",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:3324,Modifiability,Config,Config,3324,"ay result if these conditions are not fulfilled; (see e.g. arXiv:0803.2711). ## Instantiation; A fit object is instantiated through; TFractionFitter* fit = new TFractionFitter(data, mc);; A number of basic checks (intended to ensure that the template histograms; represent the same ""kind"" of distribution as the data one) are carried out.; The TVirtualFitter object is then addressed and all fit parameters (the; template fractions) declared (initially unbounded). ## Applying constraints; Fit parameters can be constrained through. fit->Constrain(parameter #, lower bound, upper bound);. Setting lower bound = upper bound = 0 removes the constraint (a la Minuit);; however, a function. fit->Unconstrain(parameter #). is also provided to simplify this. ## Setting parameter values; The function. ROOT::Fit::Fitter* fitter = fit->GetFitter();. is provided for direct access to the ROOT::Fit::Fitter object. This allows to; set and fix parameter values, limits and set step sizes directly via. fitter->Config().ParSettings(parameter #).Set(const std::string &name, double value, double step, double lower, double upper);. ## Restricting the fit range; The fit range can be restricted through. fit->SetRangeX(first bin #, last bin #);; and freed using. fit->ReleaseRangeX();; For 2D histograms the Y range can be similarly restricted using. fit->SetRangeY(first bin #, last bin #);; fit->ReleaseRangeY();; and for 3D histograms also. fit->SetRangeZ(first bin #, last bin #);; fit->ReleaseRangeZ();; It is also possible to exclude individual bins from the fit through. fit->ExcludeBin(bin #);; where the given bin number is assumed to follow the TH1::GetBin() numbering.; Any bins excluded in this way can be included again using the corresponding. fit->IncludeBin(bin #);. ## Weights histograms; Weights histograms (for a motivation see the above publication) can be specified; for the individual MC sources through. fit->SetWeight(parameter #, pointer to weights histogram);; and unset by specifying a ",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:1701,Performance,perform,perform,1701,"er; template), but the minimisation with respect to these additional parameters is; done analytically rather than introducing them as formal fit parameters. Some; special care needs to be taken in the case of bins with zero content. For more; details please see the original publication cited above. An example application of this fit is given below. For a TH1* histogram; (""data"") fitted as the sum of three Monte Carlo sources (""mc""):. ~~~{.cpp}; {; TH1F *data; //data histogram; TH1F *mc0; // first MC histogram; TH1F *mc1; // second MC histogram; TH1F *mc2; // third MC histogram; .... // retrieve histograms; TObjArray *mc = new TObjArray(3); // MC histograms are put in this array; mc->Add(mc0);; mc->Add(mc1);; mc->Add(mc2);; TFractionFitter* fit = new TFractionFitter(data, mc); // initialise; fit->Constrain(1,0.0,1.0); // constrain fraction 1 to be between 0 and 1; fit->SetRangeX(1,15); // use only the first 15 bins in the fit; Int_t status = fit->Fit(); // perform the fit; std::cout << ""fit status: "" << status << std::endl;; if (status == 0) { // check on fit status; TH1F* result = (TH1F*) fit->GetPlot();; data->Draw(""Ep"");; result->Draw(""same"");; }; }; ~~~. ## Assumptions; A few assumptions need to be made for the fit procedure to be carried out:; 1 The total number of events in each template is not too small; (so that its Poisson uncertainty can be neglected).; 2 The number of events in each bin is much smaller than the total; number of events in each template (so that multinomial; uncertainties can be replaced with Poisson uncertainties). Biased fit uncertainties may result if these conditions are not fulfilled; (see e.g. arXiv:0803.2711). ## Instantiation; A fit object is instantiated through; TFractionFitter* fit = new TFractionFitter(data, mc);; A number of basic checks (intended to ensure that the template histograms; represent the same ""kind"" of distribution as the data one) are carried out.; The TVirtualFitter object is then addressed and all fit parameters ",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:566,Safety,predict,predictions,566,"// @(#)root/hist:$Id$; // Author: Frank Filthaut F.Filthaut@science.ru.nl 20/05/2002; // with additions by Bram Wijngaarden <dwijngaa@hef.kun.nl>; /** \class TFractionFitter; Fits MC fractions to data histogram. A la HMCMLL, see R. Barlow and C. Beeston,; Comp. Phys. Comm. 77 (1993) 219-228, and http://www.hep.man.ac.uk/~roger/hfrac.f. The virtue of this fit is that it takes into account both data and Monte Carlo; statistical uncertainties. The way in which this is done is through a standard; likelihood fit using Poisson statistics; however, the template (MC) predictions; are also varied within statistics, leading to additional contributions to the; overall likelihood. This leads to many more fit parameters (one per bin per; template), but the minimisation with respect to these additional parameters is; done analytically rather than introducing them as formal fit parameters. Some; special care needs to be taken in the case of bins with zero content. For more; details please see the original publication cited above. An example application of this fit is given below. For a TH1* histogram; (""data"") fitted as the sum of three Monte Carlo sources (""mc""):. ~~~{.cpp}; {; TH1F *data; //data histogram; TH1F *mc0; // first MC histogram; TH1F *mc1; // second MC histogram; TH1F *mc2; // third MC histogram; .... // retrieve histograms; TObjArray *mc = new TObjArray(3); // MC histograms are put in this array; mc->Add(mc0);; mc->Add(mc1);; mc->Add(mc2);; TFractionFitter* fit = new TFractionFitter(data, mc); // initialise; fit->Constrain(1,0.0,1.0); // constrain fraction 1 to be between 0 and 1; fit->SetRangeX(1,15); // use only the first 15 bins in the fit; Int_t status = fit->Fit(); // perform the fit; std::cout << ""fit status: "" << status << std::endl;; if (status == 0) { // check on fit status; TH1F* result = (TH1F*) fit->GetPlot();; data->Draw(""Ep"");; result->Draw(""same"");; }; }; ~~~. ## Assumptions; A few assumptions need to be made for the fit procedure to be carried out:; 1 ",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:4667,Safety,predict,prediction,4667,"## Restricting the fit range; The fit range can be restricted through. fit->SetRangeX(first bin #, last bin #);; and freed using. fit->ReleaseRangeX();; For 2D histograms the Y range can be similarly restricted using. fit->SetRangeY(first bin #, last bin #);; fit->ReleaseRangeY();; and for 3D histograms also. fit->SetRangeZ(first bin #, last bin #);; fit->ReleaseRangeZ();; It is also possible to exclude individual bins from the fit through. fit->ExcludeBin(bin #);; where the given bin number is assumed to follow the TH1::GetBin() numbering.; Any bins excluded in this way can be included again using the corresponding. fit->IncludeBin(bin #);. ## Weights histograms; Weights histograms (for a motivation see the above publication) can be specified; for the individual MC sources through. fit->SetWeight(parameter #, pointer to weights histogram);; and unset by specifying a null pointer. ## Obtaining fit results; The fit is carried out through. Int_t status = fit->Fit();; where status is the code returned from the ""MINIMIZE"" command. For fits; that converged, parameter values and errors can be obtained through. fit->GetResult(parameter #, value, error);; and the histogram corresponding to the total Monte Carlo prediction (which; is not the same as a simple weighted sum of the input Monte Carlo distributions); can be obtained by. TH1* result = fit->GetPlot();; ## Using different histograms; It is possible to change the histogram being fitted through. fit->SetData(TH1* data);; and to change the template histogram for a given parameter number through. fit->SetMC(parameter #, TH1* MC);; This can speed up code in case of multiple data or template histograms;; however, it should be done with care as any settings are taken over from; the previous fit. In addition, neither the dimensionality nor the numbers of; bins of the histograms should change (in that case it is better to instantiate; a new TFractionFitter object). ## Errors; Any serious inconsistency results in an error.; */",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:3190,Security,access,access,3190,"ts in each template (so that multinomial; uncertainties can be replaced with Poisson uncertainties). Biased fit uncertainties may result if these conditions are not fulfilled; (see e.g. arXiv:0803.2711). ## Instantiation; A fit object is instantiated through; TFractionFitter* fit = new TFractionFitter(data, mc);; A number of basic checks (intended to ensure that the template histograms; represent the same ""kind"" of distribution as the data one) are carried out.; The TVirtualFitter object is then addressed and all fit parameters (the; template fractions) declared (initially unbounded). ## Applying constraints; Fit parameters can be constrained through. fit->Constrain(parameter #, lower bound, upper bound);. Setting lower bound = upper bound = 0 removes the constraint (a la Minuit);; however, a function. fit->Unconstrain(parameter #). is also provided to simplify this. ## Setting parameter values; The function. ROOT::Fit::Fitter* fitter = fit->GetFitter();. is provided for direct access to the ROOT::Fit::Fitter object. This allows to; set and fix parameter values, limits and set step sizes directly via. fitter->Config().ParSettings(parameter #).Set(const std::string &name, double value, double step, double lower, double upper);. ## Restricting the fit range; The fit range can be restricted through. fit->SetRangeX(first bin #, last bin #);; and freed using. fit->ReleaseRangeX();; For 2D histograms the Y range can be similarly restricted using. fit->SetRangeY(first bin #, last bin #);; fit->ReleaseRangeY();; and for 3D histograms also. fit->SetRangeZ(first bin #, last bin #);; fit->ReleaseRangeZ();; It is also possible to exclude individual bins from the fit through. fit->ExcludeBin(bin #);; where the given bin number is assumed to follow the TH1::GetBin() numbering.; Any bins excluded in this way can be included again using the corresponding. fit->IncludeBin(bin #);. ## Weights histograms; Weights histograms (for a motivation see the above publication) can be specified;",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:3062,Usability,simpl,simplify,3062,"all; (so that its Poisson uncertainty can be neglected).; 2 The number of events in each bin is much smaller than the total; number of events in each template (so that multinomial; uncertainties can be replaced with Poisson uncertainties). Biased fit uncertainties may result if these conditions are not fulfilled; (see e.g. arXiv:0803.2711). ## Instantiation; A fit object is instantiated through; TFractionFitter* fit = new TFractionFitter(data, mc);; A number of basic checks (intended to ensure that the template histograms; represent the same ""kind"" of distribution as the data one) are carried out.; The TVirtualFitter object is then addressed and all fit parameters (the; template fractions) declared (initially unbounded). ## Applying constraints; Fit parameters can be constrained through. fit->Constrain(parameter #, lower bound, upper bound);. Setting lower bound = upper bound = 0 removes the constraint (a la Minuit);; however, a function. fit->Unconstrain(parameter #). is also provided to simplify this. ## Setting parameter values; The function. ROOT::Fit::Fitter* fitter = fit->GetFitter();. is provided for direct access to the ROOT::Fit::Fitter object. This allows to; set and fix parameter values, limits and set step sizes directly via. fitter->Config().ParSettings(parameter #).Set(const std::string &name, double value, double step, double lower, double upper);. ## Restricting the fit range; The fit range can be restricted through. fit->SetRangeX(first bin #, last bin #);; and freed using. fit->ReleaseRangeX();; For 2D histograms the Y range can be similarly restricted using. fit->SetRangeY(first bin #, last bin #);; fit->ReleaseRangeY();; and for 3D histograms also. fit->SetRangeZ(first bin #, last bin #);; fit->ReleaseRangeZ();; It is also possible to exclude individual bins from the fit through. fit->ExcludeBin(bin #);; where the given bin number is assumed to follow the TH1::GetBin() numbering.; Any bins excluded in this way can be included again using the corre",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:4707,Usability,simpl,simple,4707,"## Restricting the fit range; The fit range can be restricted through. fit->SetRangeX(first bin #, last bin #);; and freed using. fit->ReleaseRangeX();; For 2D histograms the Y range can be similarly restricted using. fit->SetRangeY(first bin #, last bin #);; fit->ReleaseRangeY();; and for 3D histograms also. fit->SetRangeZ(first bin #, last bin #);; fit->ReleaseRangeZ();; It is also possible to exclude individual bins from the fit through. fit->ExcludeBin(bin #);; where the given bin number is assumed to follow the TH1::GetBin() numbering.; Any bins excluded in this way can be included again using the corresponding. fit->IncludeBin(bin #);. ## Weights histograms; Weights histograms (for a motivation see the above publication) can be specified; for the individual MC sources through. fit->SetWeight(parameter #, pointer to weights histogram);; and unset by specifying a null pointer. ## Obtaining fit results; The fit is carried out through. Int_t status = fit->Fit();; where status is the code returned from the ""MINIMIZE"" command. For fits; that converged, parameter values and errors can be obtained through. fit->GetResult(parameter #, value, error);; and the histogram corresponding to the total Monte Carlo prediction (which; is not the same as a simple weighted sum of the input Monte Carlo distributions); can be obtained by. TH1* result = fit->GetPlot();; ## Using different histograms; It is possible to change the histogram being fitted through. fit->SetData(TH1* data);; and to change the template histogram for a given parameter number through. fit->SetMC(parameter #, TH1* MC);; This can speed up code in case of multiple data or template histograms;; however, it should be done with care as any settings are taken over from; the previous fit. In addition, neither the dimensionality nor the numbers of; bins of the histograms should change (in that case it is better to instantiate; a new TFractionFitter object). ## Errors; Any serious inconsistency results in an error.; */",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:614,Integrability,message,message,614,"////////////////////////////////////////////////////////////////////////////////; /// TFractionFitter constructor. Does a complete initialisation (including; /// consistency checks, default fit range as the whole histogram but without; /// under- and overflows, and declaration of the fit parameters). Note that; /// the histograms are not copied, only references are used.; /// \param[in] data histogram to be fitted; /// \param[in] MCs array of TH1* corresponding template distributions; /// \param[in] option can be used to control the print level of the minimization algorithm; /// - option = ""Q"" : quite - no message is printed; /// - option = ""V"" : verbose - max print out; /// - option = """" : default: print initial fraction values and result",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:33,Safety,predict,prediction,33,"// Histogram containing template prediction",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:279,Availability,error,error,279,"////////////////////////////////////////////////////////////////////////////////; /// Change the histogram to be fitted to. Notes:; /// - Parameter constraints and settings are retained from a possible previous fit.; /// - Modifying the dimension or number of bins results in an error (in this case; /// rather instantiate a new TFractionFitter object)",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:292,Availability,error,error,292,"////////////////////////////////////////////////////////////////////////////////; /// Change the histogram for template number `<parm>`. Notes:; /// - Parameter constraints and settings are retained from a possible previous fit.; /// - Modifying the dimension or number of bins results in an error (in this case; /// rather instantiate a new TFractionFitter object)",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:371,Availability,error,error,371,"////////////////////////////////////////////////////////////////////////////////; /// Set bin by bin weights for template number `<parm>` (the parameter numbering; /// follows that of the input template vector).; /// Weights can be ""unset"" by passing a null pointer.; /// Consistency of the weights histogram with the data histogram is checked at; /// this point, and an error in case of problems.",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:98,Security,access,access,98,"////////////////////////////////////////////////////////////////////////////////; /// Give direct access to the underlying fitter class. This can be; /// used e.g. to modify parameter values or step sizes.",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:181,Availability,error,error,181,"////////////////////////////////////////////////////////////////////////////////; /// Function for internal use, checking parameter validity; /// An invalid parameter results in an error.",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:151,Deployability,Release,ReleaseRangeX,151,"////////////////////////////////////////////////////////////////////////////////; /// Set the X range of the histogram to be used in the fit.; /// Use ReleaseRangeX() to go back to fitting the full histogram.; /// The consistency check ensures that no empty fit range occurs (and also; /// recomputes the bin content integrals).; /// \param[in] low lower X bin number; /// \param[in] high upper X bin number",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:86,Deployability,Release,Release,86,"////////////////////////////////////////////////////////////////////////////////; /// Release restrictions on the X range of the histogram to be used in the fit.",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:178,Deployability,Release,ReleaseRangeY,178,"////////////////////////////////////////////////////////////////////////////////; /// Set the Y range of the histogram to be used in the fit (2D or 3D histograms only).; /// Use ReleaseRangeY() to go back to fitting the full histogram.; /// The consistency check ensures that no empty fit range occurs (and also; /// recomputes the bin content integrals).; /// \param[in] low lower X bin number; /// \param[in] high upper X bin number",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:86,Deployability,Release,Release,86,"////////////////////////////////////////////////////////////////////////////////; /// Release restrictions on the Y range of the histogram to be used in the fit.",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:172,Deployability,Release,ReleaseRangeY,172,"////////////////////////////////////////////////////////////////////////////////; /// Set the Z range of the histogram to be used in the fit (3D histograms only).; /// Use ReleaseRangeY() to go back to fitting the full histogram.; /// The consistency check ensures that no empty fit range occurs (and also; /// recomputes the bin content integrals).; /// \param[in] low lower X bin number; /// \param[in] high upper X bin number",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:86,Deployability,Release,Release,86,"////////////////////////////////////////////////////////////////////////////////; /// Release restrictions on the Z range of the histogram to be used in the fit.",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:396,Availability,error,error,396,"////////////////////////////////////////////////////////////////////////////////; /// Function used internally to check the consistency between the; /// various histograms. Checks are performed on nonexistent or empty; /// histograms, the precise histogram class, and the number of bins.; /// In addition, integrals over the ""allowed"" bin ranges are computed.; /// Any inconsistency results in a error.",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:184,Performance,perform,performed,184,"////////////////////////////////////////////////////////////////////////////////; /// Function used internally to check the consistency between the; /// various histograms. Checks are performed on nonexistent or empty; /// histograms, the precise histogram class, and the number of bins.; /// In addition, integrals over the ""allowed"" bin ranges are computed.; /// Any inconsistency results in a error.",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:86,Performance,Perform,Perform,86,"////////////////////////////////////////////////////////////////////////////////; /// Perform the fit with the default UP value.; /// The value returned is the minimisation status.",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:137,Performance,perform,perform,137,"////////////////////////////////////////////////////////////////////////////////; /// Set UP to the given value (see class TMinuit), and perform a MINOS minimisation.",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:107,Safety,predict,prediction,107,"////////////////////////////////////////////////////////////////////////////////; /// Return the ""template prediction"" corresponding to the fit result (this is not; /// the same as the weighted sum of template distributions, as template statistical; /// uncertainties are taken into account).; /// Note that the name of this histogram will simply be the same as that of the; /// ""data"" histogram, prefixed with the string ""Fraction fit to hist: "".; /// Note also that the histogram is managed by the TFractionFitter class, so the returned pointer will be invalid if; /// the class is deleted",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:340,Usability,simpl,simply,340,"////////////////////////////////////////////////////////////////////////////////; /// Return the ""template prediction"" corresponding to the fit result (this is not; /// the same as the weighted sum of template distributions, as template statistical; /// uncertainties are taken into account).; /// Note that the name of this histogram will simply be the same as that of the; /// ""data"" histogram, prefixed with the string ""Fraction fit to hist: "".; /// Note also that the histogram is managed by the TFractionFitter class, so the returned pointer will be invalid if; /// the class is deleted",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:18,Safety,predict,predictions,18,"// Solve for the ""predictions""",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:134,Safety,predict,prediction,134,"////////////////////////////////////////////////////////////////////////////////; /// Function used internally to obtain the template prediction in the individual bins; /// 'bin' <=> 'i' (paper); /// 'par' <=> 'j' (paper)",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:53,Performance,Cache,Cache,53,"// number of events in the real data for bin 'i'; // Cache the weighted fractions and the number of observed MC events; // Sanity check: none of the fractions should be == 0",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:123,Safety,Sanity check,Sanity check,123,"// number of events in the real data for bin 'i'; // Cache the weighted fractions and the number of observed MC events; // Sanity check: none of the fractions should be == 0",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:3,Deployability,update,update,3,"// update delta",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:17,Safety,predict,prediction,17,"// likelihood of prediction",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:208,Safety,predict,prediction,208,"////////////////////////////////////////////////////////////////////////////////; /// Return the adjusted MC template (Aji) for template (parm).; /// Note that the (Aji) times fractions only sum to the total prediction; /// of the fit if all weights are 1.; /// Note also that the histogram is managed by the TFractionFitter class, so the returned pointer will be invalid if; /// the class is deleted",MatchSource.CODE_COMMENT,hist/hist/src/TFractionFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:1346,Integrability,depend,depending,1346,"////////////////////////////////////////////////////////////////////////////////; /** \class TGraph; \ingroup Graphs; A TGraph is an object made of two arrays X and Y with npoints each.; The TGraph painting is performed thanks to the TGraphPainter; class. All details about the various painting options are given in this class. #### Notes. - Unlike histogram or tree (or even TGraph2D), TGraph objects; are not automatically attached to the current TFile, in order to keep the; management and size of the TGraph as small as possible.; - The TGraph constructors do not have the TGraph title and name as parameters.; A TGraph has the default title and name ""Graph"". To change the default title; and name `SetTitle` and `SetName` should be called on the TGraph after its creation.; TGraph was a light weight object to start with, like TPolyline or TPolyMarker.; That’s why it did not have any title and name parameters in the constructors. #### Example. The picture below gives an example:. Begin_Macro(source); {; double x[100], y[100];; int n = 20;; for (int i=0;i<n;i++) {; x[i] = i*0.1;; y[i] = 10*sin(x[i]+0.2);; }; auto g = new TGraph(n,x,y);; g->SetTitle(""Graph title;X title;Y title"");; g->Draw(""AC*"");; }; End_Macro. #### Default X-Points. If one doesn't specify the points in the x-axis, they will get the default values 0, 1, 2, 3, (etc. depending; on the length of the y-points):. Begin_Macro(source); {; double y[6] = {3, 8, 1, 10, 5, 7};; auto g = new TGraph(6,y);; g->SetTitle(""A Graph with default X points"");; g->Draw();; }; End_Macro. */; ////////////////////////////////////////////////////////////////////////////////; /// Graph default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:210,Performance,perform,performed,210,"////////////////////////////////////////////////////////////////////////////////; /** \class TGraph; \ingroup Graphs; A TGraph is an object made of two arrays X and Y with npoints each.; The TGraph painting is performed thanks to the TGraphPainter; class. All details about the various painting options are given in this class. #### Notes. - Unlike histogram or tree (or even TGraph2D), TGraph objects; are not automatically attached to the current TFile, in order to keep the; management and size of the TGraph as small as possible.; - The TGraph constructors do not have the TGraph title and name as parameters.; A TGraph has the default title and name ""Graph"". To change the default title; and name `SetTitle` and `SetName` should be called on the TGraph after its creation.; TGraph was a light weight object to start with, like TPolyline or TPolyMarker.; That’s why it did not have any title and name parameters in the constructors. #### Example. The picture below gives an example:. Begin_Macro(source); {; double x[100], y[100];; int n = 20;; for (int i=0;i<n;i++) {; x[i] = i*0.1;; y[i] = 10*sin(x[i]+0.2);; }; auto g = new TGraph(n,x,y);; g->SetTitle(""Graph title;X title;Y title"");; g->Draw(""AC*"");; }; End_Macro. #### Default X-Points. If one doesn't specify the points in the x-axis, they will get the default values 0, 1, 2, 3, (etc. depending; on the length of the y-points):. Begin_Macro(source); {; double y[6] = {3, 8, 1, 10, 5, 7};; auto g = new TGraph(6,y);; g->SetTitle(""A Graph with default X points"");; g->Draw();; }; End_Macro. */; ////////////////////////////////////////////////////////////////////////////////; /// Graph default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:709,Safety,avoid,avoid,709,"////////////////////////////////////////////////////////////////////////////////; /// Graph constructor reading input from filename.; ///; /// `filename` is assumed to contain at least two columns of numbers.; /// The string format is by default `""%lg %lg""`.; /// This is a standard c formatting for `scanf()`.; /// For example, set format to `""%lg,%lg""` for a comma-separated file.; ///; /// If columns of numbers should be skipped, a `""%*lg""` or `""%*s""` for each column; /// can be added, e.g. `""%lg %*lg %lg""` would read x-values from the first and; /// y-values from the third column.; ///; /// For files separated by a specific delimiter different from ' ' and '\\t' (e.g.; /// ';' in csv files) you can avoid using `%*s` to bypass this delimiter by explicitly; /// specify the `option` argument,; /// e.g. option=`"" \\t,;""` for columns of figures separated by any of these characters; /// (' ', '\\t', ',', ';'); /// used once (e.g. `""1;1""`) or in a combined way (`"" 1;,;; 1""`).; /// Note in that case, the instantiation is about two times slower.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:45,Availability,error,error,45,"//first condition not to repeat the previous error message",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:51,Integrability,message,message,51,"//first condition not to repeat the previous error message",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:21,Modifiability,variab,variables,21,"// Initializing loop variables",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:10,Testability,log,logic,10,"//special logic to support the case where the same object is; //added multiple times in fFunctions.; //This case happens when the same object is added with different; //drawing modes",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:5,Safety,avoid,avoid,5,"//to avoid accessing a deleted object in RecursiveRemove",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:11,Security,access,accessing,11,"//to avoid accessing a deleted object in RecursiveRemove",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:86,Energy Efficiency,Allocate,Allocate,86,"////////////////////////////////////////////////////////////////////////////////; /// Allocate internal data structures for `newsize` points.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:86,Energy Efficiency,Allocate,Allocate,86,"////////////////////////////////////////////////////////////////////////////////; /// Allocate arrays.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:135,Availability,Error,Errors,135,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: `y = y + c1*f(x,y)`; /// Errors are not recalculated.; ///; /// \param f may be a 1-D function TF1 or 2-d function TF2; /// \param c1 a scaling factor, 1 by default",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: `y = y + c1*f(x,y)`; /// Errors are not recalculated.; ///; /// \param f may be a 1-D function TF1 or 2-d function TF2; /// \param c1 a scaling factor, 1 by default",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:472,Availability,error,errors,472,"////////////////////////////////////////////////////////////////////////////////; /// Return the chisquare of this graph with respect to f1.; /// The chisquare is computed as the sum of the quantity below at each point:; /// \f[; /// \frac{(y-f1(x))^{2}}{ey^{2}+(\frac{1}{2}(exl+exh)f1'(x))^{2}}; /// \f]; /// where x and y are the graph point coordinates and f1'(x) is the derivative of function f1(x).; /// This method to approximate the uncertainty in y because of the errors in x, is called; /// ""effective variance"" method.; /// In case of a pure TGraph, the denominator is 1.; /// In case of a TGraphErrors or TGraphAsymmErrors the errors are taken; /// into account.; /// By default the range of the graph is used whatever function range.; /// Use option ""R"" to use the function range",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:638,Availability,error,errors,638,"////////////////////////////////////////////////////////////////////////////////; /// Return the chisquare of this graph with respect to f1.; /// The chisquare is computed as the sum of the quantity below at each point:; /// \f[; /// \frac{(y-f1(x))^{2}}{ey^{2}+(\frac{1}{2}(exl+exh)f1'(x))^{2}}; /// \f]; /// where x and y are the graph point coordinates and f1'(x) is the derivative of function f1(x).; /// This method to approximate the uncertainty in y because of the errors in x, is called; /// ""effective variance"" method.; /// In case of a pure TGraph, the denominator is 1.; /// In case of a TGraphErrors or TGraphAsymmErrors the errors are taken; /// into account.; /// By default the range of the graph is used whatever function range.; /// Use option ""R"" to use the function range",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:37,Testability,log,log,37,"// Positive minimum. Used in case of log scale along X axis.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:37,Testability,log,log,37,"// Positive minimum. Used in case of log scale along Y axis.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:3,Availability,Error,Error,3,"// Error;",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:49,Usability,simpl,simply,49,"// case TGraph is not sorted; // find neighbours simply looping all points; // and find also the 2 adjacent points: (low2 < low < x < up < up2 ); // needed in case x is outside the graph ascissa interval",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:326,Deployability,release,released,326,"////////////////////////////////////////////////////////////////////////////////; /// Execute action corresponding to one event.; ///; /// This member function is called when a graph is clicked with the locator; ///; /// If Left button clicked on one of the line end points, this point; /// follows the cursor until button is released.; ///; /// if Middle button clicked, the line is moved parallel to itself; /// until the button is released.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:434,Deployability,release,released,434,"////////////////////////////////////////////////////////////////////////////////; /// Execute action corresponding to one event.; ///; /// This member function is called when a graph is clicked with the locator; ///; /// If Left button clicked on one of the line end points, this point; /// follows the cursor until button is released.; ///; /// if Middle button clicked, the line is moved parallel to itself; /// until the button is released.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:105,Energy Efficiency,allocate,allocate,105,"////////////////////////////////////////////////////////////////////////////////; /// if size > fMaxSize allocate new arrays of 2*size points and copy iend first; /// points.; /// Return pointer to new arrays.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:866,Availability,error,errors,866,"////////////////////////////////////////////////////////////////////////////////; /// Fit this graph with function f1.; ///; /// \param[in] f1 pointer to the function object; /// \param[in] option string defining the fit options (see table below).; /// \param[in] goption specify a list of graphics options. See TGraph::Draw and TGraphPainter for a complete list of these possible options.; /// \param[in] rxmin lower fitting range; /// \param[in] rxmax upper fitting range; ///; /// \anchor GFitOpt; /// ### Graph Fitting Options; /// The list of fit options is given in parameter option.; ///; /// option | description; /// -------|------------; /// ""S"" | The full result of the fit is returned in the `TFitResultPtr`. This is needed to get the covariance matrix of the fit. See `TFitResult` and the base class `ROOT::Math::FitResult`.; /// ""W"" | Ignore all point errors when fitting a TGraphErrors or TGraphAsymmErrors; /// ""F"" | Uses the default minimizer (e.g. Minuit) when fitting a linear function (e.g. polN) instead of the linear fitter.; /// ""U"" | Uses a user specified objective function (e.g. user providedlikelihood function) defined using `TVirtualFitter::SetFCN`; /// ""E"" | Performs a better parameter errors estimation using the Minos technique for all fit parameters.; /// ""M"" | Uses the IMPROVE algorithm (available only in TMinuit). This algorithm attempts improve the found local minimum by searching for a better one.; /// ""Q"" | Quiet mode (minimum printing); /// ""V"" | Verbose mode (default is between Q and V); /// ""+"" | Adds this new fitted function to the list of fitted functions. By default, the previous function is deleted and only the last one is kept.; /// ""N"" | Does not store the graphics function, does not draw the histogram with the function after fitting.; /// ""0"" | Does not draw the histogram and the fitted function after fitting, but in contrast to option ""N"", it stores the fitted function in the histogram list of functions.; /// ""R"" | Fit using a fitting ra",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:1217,Availability,error,errors,1217,"on string defining the fit options (see table below).; /// \param[in] goption specify a list of graphics options. See TGraph::Draw and TGraphPainter for a complete list of these possible options.; /// \param[in] rxmin lower fitting range; /// \param[in] rxmax upper fitting range; ///; /// \anchor GFitOpt; /// ### Graph Fitting Options; /// The list of fit options is given in parameter option.; ///; /// option | description; /// -------|------------; /// ""S"" | The full result of the fit is returned in the `TFitResultPtr`. This is needed to get the covariance matrix of the fit. See `TFitResult` and the base class `ROOT::Math::FitResult`.; /// ""W"" | Ignore all point errors when fitting a TGraphErrors or TGraphAsymmErrors; /// ""F"" | Uses the default minimizer (e.g. Minuit) when fitting a linear function (e.g. polN) instead of the linear fitter.; /// ""U"" | Uses a user specified objective function (e.g. user providedlikelihood function) defined using `TVirtualFitter::SetFCN`; /// ""E"" | Performs a better parameter errors estimation using the Minos technique for all fit parameters.; /// ""M"" | Uses the IMPROVE algorithm (available only in TMinuit). This algorithm attempts improve the found local minimum by searching for a better one.; /// ""Q"" | Quiet mode (minimum printing); /// ""V"" | Verbose mode (default is between Q and V); /// ""+"" | Adds this new fitted function to the list of fitted functions. By default, the previous function is deleted and only the last one is kept.; /// ""N"" | Does not store the graphics function, does not draw the histogram with the function after fitting.; /// ""0"" | Does not draw the histogram and the fitted function after fitting, but in contrast to option ""N"", it stores the fitted function in the histogram list of functions.; /// ""R"" | Fit using a fitting range specified in the function range with `TF1::SetRange`.; /// ""B"" | Use this option when you want to fix one or more parameters and the fitting function is a predefined one (e.g gaus, expo,..)",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:1324,Availability,avail,available,1324,"h::Draw and TGraphPainter for a complete list of these possible options.; /// \param[in] rxmin lower fitting range; /// \param[in] rxmax upper fitting range; ///; /// \anchor GFitOpt; /// ### Graph Fitting Options; /// The list of fit options is given in parameter option.; ///; /// option | description; /// -------|------------; /// ""S"" | The full result of the fit is returned in the `TFitResultPtr`. This is needed to get the covariance matrix of the fit. See `TFitResult` and the base class `ROOT::Math::FitResult`.; /// ""W"" | Ignore all point errors when fitting a TGraphErrors or TGraphAsymmErrors; /// ""F"" | Uses the default minimizer (e.g. Minuit) when fitting a linear function (e.g. polN) instead of the linear fitter.; /// ""U"" | Uses a user specified objective function (e.g. user providedlikelihood function) defined using `TVirtualFitter::SetFCN`; /// ""E"" | Performs a better parameter errors estimation using the Minos technique for all fit parameters.; /// ""M"" | Uses the IMPROVE algorithm (available only in TMinuit). This algorithm attempts improve the found local minimum by searching for a better one.; /// ""Q"" | Quiet mode (minimum printing); /// ""V"" | Verbose mode (default is between Q and V); /// ""+"" | Adds this new fitted function to the list of fitted functions. By default, the previous function is deleted and only the last one is kept.; /// ""N"" | Does not store the graphics function, does not draw the histogram with the function after fitting.; /// ""0"" | Does not draw the histogram and the fitted function after fitting, but in contrast to option ""N"", it stores the fitted function in the histogram list of functions.; /// ""R"" | Fit using a fitting range specified in the function range with `TF1::SetRange`.; /// ""B"" | Use this option when you want to fix one or more parameters and the fitting function is a predefined one (e.g gaus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits are set.; /// ""C"" | In case of linear f",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:2632,Availability,error,errors,2632,"""N"" | Does not store the graphics function, does not draw the histogram with the function after fitting.; /// ""0"" | Does not draw the histogram and the fitted function after fitting, but in contrast to option ""N"", it stores the fitted function in the histogram list of functions.; /// ""R"" | Fit using a fitting range specified in the function range with `TF1::SetRange`.; /// ""B"" | Use this option when you want to fix one or more parameters and the fitting function is a predefined one (e.g gaus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits are set.; /// ""C"" | In case of linear fitting, do no calculate the chisquare (saves CPU time).; /// ""G"" | Uses the gradient implemented in `TF1::GradientPar` for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function.; /// ""EX0"" | When fitting a TGraphErrors or TGraphAsymErrors do not consider errors in the X coordinates; /// ""ROB"" | In case of linear fitting, compute the LTS regression coefficients (robust (resistant) regression), using the default fraction of good points ""ROB=0.x"" - compute the LTS regression coefficients, using 0.x as a fraction of good points; ///; ///; /// This function is used for fitting also the derived TGraph classes such as TGraphErrors or TGraphAsymmErrors.; /// See the note below on how the errors are used when fitting a TGraphErrors or TGraphAsymmErrors.; ///; /// The fitting of the TGraph, i.e simple data points without any error associated, is performed using the; /// un-weighted least-square (chi-square) method.; ///; ///; ///\anchor GFitErrors; /// ### TGraphErrors fit:; ///; /// In case of a TGraphErrors or TGraphAsymmErrors object, when `x` errors are present, the error along x,; /// is projected along the y-direction by calculating the function at the points `x-ex_low` and; /// `x+ex_high`, where `ex_low` and `ex_high` are the corresponding lower and upper error in x.; /// The chi-square is th",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:2741,Availability,robust,robust,2741,"""N"" | Does not store the graphics function, does not draw the histogram with the function after fitting.; /// ""0"" | Does not draw the histogram and the fitted function after fitting, but in contrast to option ""N"", it stores the fitted function in the histogram list of functions.; /// ""R"" | Fit using a fitting range specified in the function range with `TF1::SetRange`.; /// ""B"" | Use this option when you want to fix one or more parameters and the fitting function is a predefined one (e.g gaus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits are set.; /// ""C"" | In case of linear fitting, do no calculate the chisquare (saves CPU time).; /// ""G"" | Uses the gradient implemented in `TF1::GradientPar` for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function.; /// ""EX0"" | When fitting a TGraphErrors or TGraphAsymErrors do not consider errors in the X coordinates; /// ""ROB"" | In case of linear fitting, compute the LTS regression coefficients (robust (resistant) regression), using the default fraction of good points ""ROB=0.x"" - compute the LTS regression coefficients, using 0.x as a fraction of good points; ///; ///; /// This function is used for fitting also the derived TGraph classes such as TGraphErrors or TGraphAsymmErrors.; /// See the note below on how the errors are used when fitting a TGraphErrors or TGraphAsymmErrors.; ///; /// The fitting of the TGraph, i.e simple data points without any error associated, is performed using the; /// un-weighted least-square (chi-square) method.; ///; ///; ///\anchor GFitErrors; /// ### TGraphErrors fit:; ///; /// In case of a TGraphErrors or TGraphAsymmErrors object, when `x` errors are present, the error along x,; /// is projected along the y-direction by calculating the function at the points `x-ex_low` and; /// `x+ex_high`, where `ex_low` and `ex_high` are the corresponding lower and upper error in x.; /// The chi-square is th",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:3066,Availability,error,errors,3066,"ption when you want to fix one or more parameters and the fitting function is a predefined one (e.g gaus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits are set.; /// ""C"" | In case of linear fitting, do no calculate the chisquare (saves CPU time).; /// ""G"" | Uses the gradient implemented in `TF1::GradientPar` for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function.; /// ""EX0"" | When fitting a TGraphErrors or TGraphAsymErrors do not consider errors in the X coordinates; /// ""ROB"" | In case of linear fitting, compute the LTS regression coefficients (robust (resistant) regression), using the default fraction of good points ""ROB=0.x"" - compute the LTS regression coefficients, using 0.x as a fraction of good points; ///; ///; /// This function is used for fitting also the derived TGraph classes such as TGraphErrors or TGraphAsymmErrors.; /// See the note below on how the errors are used when fitting a TGraphErrors or TGraphAsymmErrors.; ///; /// The fitting of the TGraph, i.e simple data points without any error associated, is performed using the; /// un-weighted least-square (chi-square) method.; ///; ///; ///\anchor GFitErrors; /// ### TGraphErrors fit:; ///; /// In case of a TGraphErrors or TGraphAsymmErrors object, when `x` errors are present, the error along x,; /// is projected along the y-direction by calculating the function at the points `x-ex_low` and; /// `x+ex_high`, where `ex_low` and `ex_high` are the corresponding lower and upper error in x.; /// The chi-square is then computed as the sum of the quantity below at each data point:; ///; /// \f[; /// \frac{(y-f(x))^{2}}{ey^{2}+(\frac{1}{2}(exl+exh)f'(x))^{2}}; /// \f]; ///; /// where `x` and `y` are the point coordinates, and `f'(x)` is the derivative of the; /// function `f(x)`.; ///; /// In case of asymmetric errors, if the function lies below (above) the data point, `ey` is `ey_low` (`ey_high`).; ///;",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:3204,Availability,error,error,3204,"tions, some default initial values and limits are set.; /// ""C"" | In case of linear fitting, do no calculate the chisquare (saves CPU time).; /// ""G"" | Uses the gradient implemented in `TF1::GradientPar` for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function.; /// ""EX0"" | When fitting a TGraphErrors or TGraphAsymErrors do not consider errors in the X coordinates; /// ""ROB"" | In case of linear fitting, compute the LTS regression coefficients (robust (resistant) regression), using the default fraction of good points ""ROB=0.x"" - compute the LTS regression coefficients, using 0.x as a fraction of good points; ///; ///; /// This function is used for fitting also the derived TGraph classes such as TGraphErrors or TGraphAsymmErrors.; /// See the note below on how the errors are used when fitting a TGraphErrors or TGraphAsymmErrors.; ///; /// The fitting of the TGraph, i.e simple data points without any error associated, is performed using the; /// un-weighted least-square (chi-square) method.; ///; ///; ///\anchor GFitErrors; /// ### TGraphErrors fit:; ///; /// In case of a TGraphErrors or TGraphAsymmErrors object, when `x` errors are present, the error along x,; /// is projected along the y-direction by calculating the function at the points `x-ex_low` and; /// `x+ex_high`, where `ex_low` and `ex_high` are the corresponding lower and upper error in x.; /// The chi-square is then computed as the sum of the quantity below at each data point:; ///; /// \f[; /// \frac{(y-f(x))^{2}}{ey^{2}+(\frac{1}{2}(exl+exh)f'(x))^{2}}; /// \f]; ///; /// where `x` and `y` are the point coordinates, and `f'(x)` is the derivative of the; /// function `f(x)`.; ///; /// In case of asymmetric errors, if the function lies below (above) the data point, `ey` is `ey_low` (`ey_high`).; ///; /// The approach used to approximate the uncertainty in y because of the; /// errors in x is to make it equal the error in x times the slope of the lin",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:3430,Availability,error,errors,3430,"Automatic Differentiation when it is supported by the provided TF1 function.; /// ""EX0"" | When fitting a TGraphErrors or TGraphAsymErrors do not consider errors in the X coordinates; /// ""ROB"" | In case of linear fitting, compute the LTS regression coefficients (robust (resistant) regression), using the default fraction of good points ""ROB=0.x"" - compute the LTS regression coefficients, using 0.x as a fraction of good points; ///; ///; /// This function is used for fitting also the derived TGraph classes such as TGraphErrors or TGraphAsymmErrors.; /// See the note below on how the errors are used when fitting a TGraphErrors or TGraphAsymmErrors.; ///; /// The fitting of the TGraph, i.e simple data points without any error associated, is performed using the; /// un-weighted least-square (chi-square) method.; ///; ///; ///\anchor GFitErrors; /// ### TGraphErrors fit:; ///; /// In case of a TGraphErrors or TGraphAsymmErrors object, when `x` errors are present, the error along x,; /// is projected along the y-direction by calculating the function at the points `x-ex_low` and; /// `x+ex_high`, where `ex_low` and `ex_high` are the corresponding lower and upper error in x.; /// The chi-square is then computed as the sum of the quantity below at each data point:; ///; /// \f[; /// \frac{(y-f(x))^{2}}{ey^{2}+(\frac{1}{2}(exl+exh)f'(x))^{2}}; /// \f]; ///; /// where `x` and `y` are the point coordinates, and `f'(x)` is the derivative of the; /// function `f(x)`.; ///; /// In case of asymmetric errors, if the function lies below (above) the data point, `ey` is `ey_low` (`ey_high`).; ///; /// The approach used to approximate the uncertainty in y because of the; /// errors in x is to make it equal the error in x times the slope of the line.; /// This approach is called ""effective variance method"" and; /// the implementation is provided in the function FitUtil::EvaluateChi2Effective; ///; /// \anchor GFitLinear; /// ### Linear fitting:; /// When the fitting function is linear (con",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:3454,Availability,error,error,3454,"Automatic Differentiation when it is supported by the provided TF1 function.; /// ""EX0"" | When fitting a TGraphErrors or TGraphAsymErrors do not consider errors in the X coordinates; /// ""ROB"" | In case of linear fitting, compute the LTS regression coefficients (robust (resistant) regression), using the default fraction of good points ""ROB=0.x"" - compute the LTS regression coefficients, using 0.x as a fraction of good points; ///; ///; /// This function is used for fitting also the derived TGraph classes such as TGraphErrors or TGraphAsymmErrors.; /// See the note below on how the errors are used when fitting a TGraphErrors or TGraphAsymmErrors.; ///; /// The fitting of the TGraph, i.e simple data points without any error associated, is performed using the; /// un-weighted least-square (chi-square) method.; ///; ///; ///\anchor GFitErrors; /// ### TGraphErrors fit:; ///; /// In case of a TGraphErrors or TGraphAsymmErrors object, when `x` errors are present, the error along x,; /// is projected along the y-direction by calculating the function at the points `x-ex_low` and; /// `x+ex_high`, where `ex_low` and `ex_high` are the corresponding lower and upper error in x.; /// The chi-square is then computed as the sum of the quantity below at each data point:; ///; /// \f[; /// \frac{(y-f(x))^{2}}{ey^{2}+(\frac{1}{2}(exl+exh)f'(x))^{2}}; /// \f]; ///; /// where `x` and `y` are the point coordinates, and `f'(x)` is the derivative of the; /// function `f(x)`.; ///; /// In case of asymmetric errors, if the function lies below (above) the data point, `ey` is `ey_low` (`ey_high`).; ///; /// The approach used to approximate the uncertainty in y because of the; /// errors in x is to make it equal the error in x times the slope of the line.; /// This approach is called ""effective variance method"" and; /// the implementation is provided in the function FitUtil::EvaluateChi2Effective; ///; /// \anchor GFitLinear; /// ### Linear fitting:; /// When the fitting function is linear (con",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:3651,Availability,error,error,3651,"Automatic Differentiation when it is supported by the provided TF1 function.; /// ""EX0"" | When fitting a TGraphErrors or TGraphAsymErrors do not consider errors in the X coordinates; /// ""ROB"" | In case of linear fitting, compute the LTS regression coefficients (robust (resistant) regression), using the default fraction of good points ""ROB=0.x"" - compute the LTS regression coefficients, using 0.x as a fraction of good points; ///; ///; /// This function is used for fitting also the derived TGraph classes such as TGraphErrors or TGraphAsymmErrors.; /// See the note below on how the errors are used when fitting a TGraphErrors or TGraphAsymmErrors.; ///; /// The fitting of the TGraph, i.e simple data points without any error associated, is performed using the; /// un-weighted least-square (chi-square) method.; ///; ///; ///\anchor GFitErrors; /// ### TGraphErrors fit:; ///; /// In case of a TGraphErrors or TGraphAsymmErrors object, when `x` errors are present, the error along x,; /// is projected along the y-direction by calculating the function at the points `x-ex_low` and; /// `x+ex_high`, where `ex_low` and `ex_high` are the corresponding lower and upper error in x.; /// The chi-square is then computed as the sum of the quantity below at each data point:; ///; /// \f[; /// \frac{(y-f(x))^{2}}{ey^{2}+(\frac{1}{2}(exl+exh)f'(x))^{2}}; /// \f]; ///; /// where `x` and `y` are the point coordinates, and `f'(x)` is the derivative of the; /// function `f(x)`.; ///; /// In case of asymmetric errors, if the function lies below (above) the data point, `ey` is `ey_low` (`ey_high`).; ///; /// The approach used to approximate the uncertainty in y because of the; /// errors in x is to make it equal the error in x times the slope of the line.; /// This approach is called ""effective variance method"" and; /// the implementation is provided in the function FitUtil::EvaluateChi2Effective; ///; /// \anchor GFitLinear; /// ### Linear fitting:; /// When the fitting function is linear (con",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:3987,Availability,error,errors,3987,"raphAsymmErrors.; /// See the note below on how the errors are used when fitting a TGraphErrors or TGraphAsymmErrors.; ///; /// The fitting of the TGraph, i.e simple data points without any error associated, is performed using the; /// un-weighted least-square (chi-square) method.; ///; ///; ///\anchor GFitErrors; /// ### TGraphErrors fit:; ///; /// In case of a TGraphErrors or TGraphAsymmErrors object, when `x` errors are present, the error along x,; /// is projected along the y-direction by calculating the function at the points `x-ex_low` and; /// `x+ex_high`, where `ex_low` and `ex_high` are the corresponding lower and upper error in x.; /// The chi-square is then computed as the sum of the quantity below at each data point:; ///; /// \f[; /// \frac{(y-f(x))^{2}}{ey^{2}+(\frac{1}{2}(exl+exh)f'(x))^{2}}; /// \f]; ///; /// where `x` and `y` are the point coordinates, and `f'(x)` is the derivative of the; /// function `f(x)`.; ///; /// In case of asymmetric errors, if the function lies below (above) the data point, `ey` is `ey_low` (`ey_high`).; ///; /// The approach used to approximate the uncertainty in y because of the; /// errors in x is to make it equal the error in x times the slope of the line.; /// This approach is called ""effective variance method"" and; /// the implementation is provided in the function FitUtil::EvaluateChi2Effective; ///; /// \anchor GFitLinear; /// ### Linear fitting:; /// When the fitting function is linear (contains the `++` sign) or the fitting; /// function is a polynomial, a linear fitter is initialised.; /// To create a linear function, use the following syntax: linear parts; /// separated by `++` sign.; /// Example: to fit the parameters of the function `p0*x + p1*sin(x)`, you can create a; /// TF1 object as; ///; /// TF1 *f1 = new TF1(""f1"", ""x++sin(x)"", xmin, xmax);; ///; /// For such a TF1 you don't have to set the initial conditions and the linear fitter is used.; /// Going via the linear fitter for functions, linear in paramete",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:4160,Availability,error,errors,4160,"f the TGraph, i.e simple data points without any error associated, is performed using the; /// un-weighted least-square (chi-square) method.; ///; ///; ///\anchor GFitErrors; /// ### TGraphErrors fit:; ///; /// In case of a TGraphErrors or TGraphAsymmErrors object, when `x` errors are present, the error along x,; /// is projected along the y-direction by calculating the function at the points `x-ex_low` and; /// `x+ex_high`, where `ex_low` and `ex_high` are the corresponding lower and upper error in x.; /// The chi-square is then computed as the sum of the quantity below at each data point:; ///; /// \f[; /// \frac{(y-f(x))^{2}}{ey^{2}+(\frac{1}{2}(exl+exh)f'(x))^{2}}; /// \f]; ///; /// where `x` and `y` are the point coordinates, and `f'(x)` is the derivative of the; /// function `f(x)`.; ///; /// In case of asymmetric errors, if the function lies below (above) the data point, `ey` is `ey_low` (`ey_high`).; ///; /// The approach used to approximate the uncertainty in y because of the; /// errors in x is to make it equal the error in x times the slope of the line.; /// This approach is called ""effective variance method"" and; /// the implementation is provided in the function FitUtil::EvaluateChi2Effective; ///; /// \anchor GFitLinear; /// ### Linear fitting:; /// When the fitting function is linear (contains the `++` sign) or the fitting; /// function is a polynomial, a linear fitter is initialised.; /// To create a linear function, use the following syntax: linear parts; /// separated by `++` sign.; /// Example: to fit the parameters of the function `p0*x + p1*sin(x)`, you can create a; /// TF1 object as; ///; /// TF1 *f1 = new TF1(""f1"", ""x++sin(x)"", xmin, xmax);; ///; /// For such a TF1 you don't have to set the initial conditions and the linear fitter is used.; /// Going via the linear fitter for functions, linear in parameters, gives a; /// considerable advantage in speed.; /// When using the linear fitting it is also possible to perform a robust fitting with th",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:4196,Availability,error,error,4196,"f the TGraph, i.e simple data points without any error associated, is performed using the; /// un-weighted least-square (chi-square) method.; ///; ///; ///\anchor GFitErrors; /// ### TGraphErrors fit:; ///; /// In case of a TGraphErrors or TGraphAsymmErrors object, when `x` errors are present, the error along x,; /// is projected along the y-direction by calculating the function at the points `x-ex_low` and; /// `x+ex_high`, where `ex_low` and `ex_high` are the corresponding lower and upper error in x.; /// The chi-square is then computed as the sum of the quantity below at each data point:; ///; /// \f[; /// \frac{(y-f(x))^{2}}{ey^{2}+(\frac{1}{2}(exl+exh)f'(x))^{2}}; /// \f]; ///; /// where `x` and `y` are the point coordinates, and `f'(x)` is the derivative of the; /// function `f(x)`.; ///; /// In case of asymmetric errors, if the function lies below (above) the data point, `ey` is `ey_low` (`ey_high`).; ///; /// The approach used to approximate the uncertainty in y because of the; /// errors in x is to make it equal the error in x times the slope of the line.; /// This approach is called ""effective variance method"" and; /// the implementation is provided in the function FitUtil::EvaluateChi2Effective; ///; /// \anchor GFitLinear; /// ### Linear fitting:; /// When the fitting function is linear (contains the `++` sign) or the fitting; /// function is a polynomial, a linear fitter is initialised.; /// To create a linear function, use the following syntax: linear parts; /// separated by `++` sign.; /// Example: to fit the parameters of the function `p0*x + p1*sin(x)`, you can create a; /// TF1 object as; ///; /// TF1 *f1 = new TF1(""f1"", ""x++sin(x)"", xmin, xmax);; ///; /// For such a TF1 you don't have to set the initial conditions and the linear fitter is used.; /// Going via the linear fitter for functions, linear in parameters, gives a; /// considerable advantage in speed.; /// When using the linear fitting it is also possible to perform a robust fitting with th",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:5133,Availability,robust,robust,5133,"he; /// errors in x is to make it equal the error in x times the slope of the line.; /// This approach is called ""effective variance method"" and; /// the implementation is provided in the function FitUtil::EvaluateChi2Effective; ///; /// \anchor GFitLinear; /// ### Linear fitting:; /// When the fitting function is linear (contains the `++` sign) or the fitting; /// function is a polynomial, a linear fitter is initialised.; /// To create a linear function, use the following syntax: linear parts; /// separated by `++` sign.; /// Example: to fit the parameters of the function `p0*x + p1*sin(x)`, you can create a; /// TF1 object as; ///; /// TF1 *f1 = new TF1(""f1"", ""x++sin(x)"", xmin, xmax);; ///; /// For such a TF1 you don't have to set the initial conditions and the linear fitter is used.; /// Going via the linear fitter for functions, linear in parameters, gives a; /// considerable advantage in speed.; /// When using the linear fitting it is also possible to perform a robust fitting with the; /// Least Trimmed Square (LTS) regression algorithm, by using the fit option `ROB`.; /// See the tutorial `fitLinearRobust.C`.; ///; /// ### Notes on TGraph/TGraphErrors Fitting:; ///; /// 1. By using the ""effective variance"" method a simple linear regression; /// becomes a non-linear case, which takes several iterations; /// instead of 0 as in the linear case.; /// 2. The effective variance technique assumes that there is no correlation; /// between the x and y coordinate.; /// 3. The standard chi2 (least square) method without error in the coordinates (x) can; /// be forced by using option ""EX0""; /// 4. The linear fitter doesn't take into account the errors in x. When fitting a; /// TGraphErrors with a linear functions the errors in x will not be considered.; /// If errors in x are important, use option ""F"" for linear function fitting.; /// 5. When fitting a TGraph (i.e. no errors associated with each point),; /// a correction is applied to the errors on the parameters with the ",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:5693,Availability,error,error,5693,"ynomial, a linear fitter is initialised.; /// To create a linear function, use the following syntax: linear parts; /// separated by `++` sign.; /// Example: to fit the parameters of the function `p0*x + p1*sin(x)`, you can create a; /// TF1 object as; ///; /// TF1 *f1 = new TF1(""f1"", ""x++sin(x)"", xmin, xmax);; ///; /// For such a TF1 you don't have to set the initial conditions and the linear fitter is used.; /// Going via the linear fitter for functions, linear in parameters, gives a; /// considerable advantage in speed.; /// When using the linear fitting it is also possible to perform a robust fitting with the; /// Least Trimmed Square (LTS) regression algorithm, by using the fit option `ROB`.; /// See the tutorial `fitLinearRobust.C`.; ///; /// ### Notes on TGraph/TGraphErrors Fitting:; ///; /// 1. By using the ""effective variance"" method a simple linear regression; /// becomes a non-linear case, which takes several iterations; /// instead of 0 as in the linear case.; /// 2. The effective variance technique assumes that there is no correlation; /// between the x and y coordinate.; /// 3. The standard chi2 (least square) method without error in the coordinates (x) can; /// be forced by using option ""EX0""; /// 4. The linear fitter doesn't take into account the errors in x. When fitting a; /// TGraphErrors with a linear functions the errors in x will not be considered.; /// If errors in x are important, use option ""F"" for linear function fitting.; /// 5. When fitting a TGraph (i.e. no errors associated with each point),; /// a correction is applied to the errors on the parameters with the following; /// formula:; /// `parameter_error *= sqrt(chisquare/(ndf-1))`; ///; /// ### General Fitting documentation; ///; /// See in TH1::Fit for the documentation of; /// - [Fit Result](\ref HFitRes); /// - [Fit Status](\ref HFitStatus); /// - [Fit Statistics Box](\ref HFitStatBox); /// - [Fitting in a Range](\ref HFitRange); /// - [Setting Initial Conditions](\ref HFitInitial)",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:5819,Availability,error,errors,5819,"ynomial, a linear fitter is initialised.; /// To create a linear function, use the following syntax: linear parts; /// separated by `++` sign.; /// Example: to fit the parameters of the function `p0*x + p1*sin(x)`, you can create a; /// TF1 object as; ///; /// TF1 *f1 = new TF1(""f1"", ""x++sin(x)"", xmin, xmax);; ///; /// For such a TF1 you don't have to set the initial conditions and the linear fitter is used.; /// Going via the linear fitter for functions, linear in parameters, gives a; /// considerable advantage in speed.; /// When using the linear fitting it is also possible to perform a robust fitting with the; /// Least Trimmed Square (LTS) regression algorithm, by using the fit option `ROB`.; /// See the tutorial `fitLinearRobust.C`.; ///; /// ### Notes on TGraph/TGraphErrors Fitting:; ///; /// 1. By using the ""effective variance"" method a simple linear regression; /// becomes a non-linear case, which takes several iterations; /// instead of 0 as in the linear case.; /// 2. The effective variance technique assumes that there is no correlation; /// between the x and y coordinate.; /// 3. The standard chi2 (least square) method without error in the coordinates (x) can; /// be forced by using option ""EX0""; /// 4. The linear fitter doesn't take into account the errors in x. When fitting a; /// TGraphErrors with a linear functions the errors in x will not be considered.; /// If errors in x are important, use option ""F"" for linear function fitting.; /// 5. When fitting a TGraph (i.e. no errors associated with each point),; /// a correction is applied to the errors on the parameters with the following; /// formula:; /// `parameter_error *= sqrt(chisquare/(ndf-1))`; ///; /// ### General Fitting documentation; ///; /// See in TH1::Fit for the documentation of; /// - [Fit Result](\ref HFitRes); /// - [Fit Status](\ref HFitStatus); /// - [Fit Statistics Box](\ref HFitStatBox); /// - [Fitting in a Range](\ref HFitRange); /// - [Setting Initial Conditions](\ref HFitInitial)",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:5893,Availability,error,errors,5893,"ynomial, a linear fitter is initialised.; /// To create a linear function, use the following syntax: linear parts; /// separated by `++` sign.; /// Example: to fit the parameters of the function `p0*x + p1*sin(x)`, you can create a; /// TF1 object as; ///; /// TF1 *f1 = new TF1(""f1"", ""x++sin(x)"", xmin, xmax);; ///; /// For such a TF1 you don't have to set the initial conditions and the linear fitter is used.; /// Going via the linear fitter for functions, linear in parameters, gives a; /// considerable advantage in speed.; /// When using the linear fitting it is also possible to perform a robust fitting with the; /// Least Trimmed Square (LTS) regression algorithm, by using the fit option `ROB`.; /// See the tutorial `fitLinearRobust.C`.; ///; /// ### Notes on TGraph/TGraphErrors Fitting:; ///; /// 1. By using the ""effective variance"" method a simple linear regression; /// becomes a non-linear case, which takes several iterations; /// instead of 0 as in the linear case.; /// 2. The effective variance technique assumes that there is no correlation; /// between the x and y coordinate.; /// 3. The standard chi2 (least square) method without error in the coordinates (x) can; /// be forced by using option ""EX0""; /// 4. The linear fitter doesn't take into account the errors in x. When fitting a; /// TGraphErrors with a linear functions the errors in x will not be considered.; /// If errors in x are important, use option ""F"" for linear function fitting.; /// 5. When fitting a TGraph (i.e. no errors associated with each point),; /// a correction is applied to the errors on the parameters with the following; /// formula:; /// `parameter_error *= sqrt(chisquare/(ndf-1))`; ///; /// ### General Fitting documentation; ///; /// See in TH1::Fit for the documentation of; /// - [Fit Result](\ref HFitRes); /// - [Fit Status](\ref HFitStatus); /// - [Fit Statistics Box](\ref HFitStatBox); /// - [Fitting in a Range](\ref HFitRange); /// - [Setting Initial Conditions](\ref HFitInitial)",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:5937,Availability,error,errors,5937,"ynomial, a linear fitter is initialised.; /// To create a linear function, use the following syntax: linear parts; /// separated by `++` sign.; /// Example: to fit the parameters of the function `p0*x + p1*sin(x)`, you can create a; /// TF1 object as; ///; /// TF1 *f1 = new TF1(""f1"", ""x++sin(x)"", xmin, xmax);; ///; /// For such a TF1 you don't have to set the initial conditions and the linear fitter is used.; /// Going via the linear fitter for functions, linear in parameters, gives a; /// considerable advantage in speed.; /// When using the linear fitting it is also possible to perform a robust fitting with the; /// Least Trimmed Square (LTS) regression algorithm, by using the fit option `ROB`.; /// See the tutorial `fitLinearRobust.C`.; ///; /// ### Notes on TGraph/TGraphErrors Fitting:; ///; /// 1. By using the ""effective variance"" method a simple linear regression; /// becomes a non-linear case, which takes several iterations; /// instead of 0 as in the linear case.; /// 2. The effective variance technique assumes that there is no correlation; /// between the x and y coordinate.; /// 3. The standard chi2 (least square) method without error in the coordinates (x) can; /// be forced by using option ""EX0""; /// 4. The linear fitter doesn't take into account the errors in x. When fitting a; /// TGraphErrors with a linear functions the errors in x will not be considered.; /// If errors in x are important, use option ""F"" for linear function fitting.; /// 5. When fitting a TGraph (i.e. no errors associated with each point),; /// a correction is applied to the errors on the parameters with the following; /// formula:; /// `parameter_error *= sqrt(chisquare/(ndf-1))`; ///; /// ### General Fitting documentation; ///; /// See in TH1::Fit for the documentation of; /// - [Fit Result](\ref HFitRes); /// - [Fit Status](\ref HFitStatus); /// - [Fit Statistics Box](\ref HFitStatBox); /// - [Fitting in a Range](\ref HFitRange); /// - [Setting Initial Conditions](\ref HFitInitial)",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:6047,Availability,error,errors,6047,"ynomial, a linear fitter is initialised.; /// To create a linear function, use the following syntax: linear parts; /// separated by `++` sign.; /// Example: to fit the parameters of the function `p0*x + p1*sin(x)`, you can create a; /// TF1 object as; ///; /// TF1 *f1 = new TF1(""f1"", ""x++sin(x)"", xmin, xmax);; ///; /// For such a TF1 you don't have to set the initial conditions and the linear fitter is used.; /// Going via the linear fitter for functions, linear in parameters, gives a; /// considerable advantage in speed.; /// When using the linear fitting it is also possible to perform a robust fitting with the; /// Least Trimmed Square (LTS) regression algorithm, by using the fit option `ROB`.; /// See the tutorial `fitLinearRobust.C`.; ///; /// ### Notes on TGraph/TGraphErrors Fitting:; ///; /// 1. By using the ""effective variance"" method a simple linear regression; /// becomes a non-linear case, which takes several iterations; /// instead of 0 as in the linear case.; /// 2. The effective variance technique assumes that there is no correlation; /// between the x and y coordinate.; /// 3. The standard chi2 (least square) method without error in the coordinates (x) can; /// be forced by using option ""EX0""; /// 4. The linear fitter doesn't take into account the errors in x. When fitting a; /// TGraphErrors with a linear functions the errors in x will not be considered.; /// If errors in x are important, use option ""F"" for linear function fitting.; /// 5. When fitting a TGraph (i.e. no errors associated with each point),; /// a correction is applied to the errors on the parameters with the following; /// formula:; /// `parameter_error *= sqrt(chisquare/(ndf-1))`; ///; /// ### General Fitting documentation; ///; /// See in TH1::Fit for the documentation of; /// - [Fit Result](\ref HFitRes); /// - [Fit Status](\ref HFitStatus); /// - [Fit Statistics Box](\ref HFitStatBox); /// - [Fitting in a Range](\ref HFitRange); /// - [Setting Initial Conditions](\ref HFitInitial)",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:6119,Availability,error,errors,6119,"ynomial, a linear fitter is initialised.; /// To create a linear function, use the following syntax: linear parts; /// separated by `++` sign.; /// Example: to fit the parameters of the function `p0*x + p1*sin(x)`, you can create a; /// TF1 object as; ///; /// TF1 *f1 = new TF1(""f1"", ""x++sin(x)"", xmin, xmax);; ///; /// For such a TF1 you don't have to set the initial conditions and the linear fitter is used.; /// Going via the linear fitter for functions, linear in parameters, gives a; /// considerable advantage in speed.; /// When using the linear fitting it is also possible to perform a robust fitting with the; /// Least Trimmed Square (LTS) regression algorithm, by using the fit option `ROB`.; /// See the tutorial `fitLinearRobust.C`.; ///; /// ### Notes on TGraph/TGraphErrors Fitting:; ///; /// 1. By using the ""effective variance"" method a simple linear regression; /// becomes a non-linear case, which takes several iterations; /// instead of 0 as in the linear case.; /// 2. The effective variance technique assumes that there is no correlation; /// between the x and y coordinate.; /// 3. The standard chi2 (least square) method without error in the coordinates (x) can; /// be forced by using option ""EX0""; /// 4. The linear fitter doesn't take into account the errors in x. When fitting a; /// TGraphErrors with a linear functions the errors in x will not be considered.; /// If errors in x are important, use option ""F"" for linear function fitting.; /// 5. When fitting a TGraph (i.e. no errors associated with each point),; /// a correction is applied to the errors on the parameters with the following; /// formula:; /// `parameter_error *= sqrt(chisquare/(ndf-1))`; ///; /// ### General Fitting documentation; ///; /// See in TH1::Fit for the documentation of; /// - [Fit Result](\ref HFitRes); /// - [Fit Status](\ref HFitStatus); /// - [Fit Statistics Box](\ref HFitStatBox); /// - [Fitting in a Range](\ref HFitRange); /// - [Setting Initial Conditions](\ref HFitInitial)",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:1189,Performance,Perform,Performs,1189,"on string defining the fit options (see table below).; /// \param[in] goption specify a list of graphics options. See TGraph::Draw and TGraphPainter for a complete list of these possible options.; /// \param[in] rxmin lower fitting range; /// \param[in] rxmax upper fitting range; ///; /// \anchor GFitOpt; /// ### Graph Fitting Options; /// The list of fit options is given in parameter option.; ///; /// option | description; /// -------|------------; /// ""S"" | The full result of the fit is returned in the `TFitResultPtr`. This is needed to get the covariance matrix of the fit. See `TFitResult` and the base class `ROOT::Math::FitResult`.; /// ""W"" | Ignore all point errors when fitting a TGraphErrors or TGraphAsymmErrors; /// ""F"" | Uses the default minimizer (e.g. Minuit) when fitting a linear function (e.g. polN) instead of the linear fitter.; /// ""U"" | Uses a user specified objective function (e.g. user providedlikelihood function) defined using `TVirtualFitter::SetFCN`; /// ""E"" | Performs a better parameter errors estimation using the Minos technique for all fit parameters.; /// ""M"" | Uses the IMPROVE algorithm (available only in TMinuit). This algorithm attempts improve the found local minimum by searching for a better one.; /// ""Q"" | Quiet mode (minimum printing); /// ""V"" | Verbose mode (default is between Q and V); /// ""+"" | Adds this new fitted function to the list of fitted functions. By default, the previous function is deleted and only the last one is kept.; /// ""N"" | Does not store the graphics function, does not draw the histogram with the function after fitting.; /// ""0"" | Does not draw the histogram and the fitted function after fitting, but in contrast to option ""N"", it stores the fitted function in the histogram list of functions.; /// ""R"" | Fit using a fitting range specified in the function range with `TF1::SetRange`.; /// ""B"" | Use this option when you want to fix one or more parameters and the fitting function is a predefined one (e.g gaus, expo,..)",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:3225,Performance,perform,performed,3225,"tions, some default initial values and limits are set.; /// ""C"" | In case of linear fitting, do no calculate the chisquare (saves CPU time).; /// ""G"" | Uses the gradient implemented in `TF1::GradientPar` for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function.; /// ""EX0"" | When fitting a TGraphErrors or TGraphAsymErrors do not consider errors in the X coordinates; /// ""ROB"" | In case of linear fitting, compute the LTS regression coefficients (robust (resistant) regression), using the default fraction of good points ""ROB=0.x"" - compute the LTS regression coefficients, using 0.x as a fraction of good points; ///; ///; /// This function is used for fitting also the derived TGraph classes such as TGraphErrors or TGraphAsymmErrors.; /// See the note below on how the errors are used when fitting a TGraphErrors or TGraphAsymmErrors.; ///; /// The fitting of the TGraph, i.e simple data points without any error associated, is performed using the; /// un-weighted least-square (chi-square) method.; ///; ///; ///\anchor GFitErrors; /// ### TGraphErrors fit:; ///; /// In case of a TGraphErrors or TGraphAsymmErrors object, when `x` errors are present, the error along x,; /// is projected along the y-direction by calculating the function at the points `x-ex_low` and; /// `x+ex_high`, where `ex_low` and `ex_high` are the corresponding lower and upper error in x.; /// The chi-square is then computed as the sum of the quantity below at each data point:; ///; /// \f[; /// \frac{(y-f(x))^{2}}{ey^{2}+(\frac{1}{2}(exl+exh)f'(x))^{2}}; /// \f]; ///; /// where `x` and `y` are the point coordinates, and `f'(x)` is the derivative of the; /// function `f(x)`.; ///; /// In case of asymmetric errors, if the function lies below (above) the data point, `ey` is `ey_low` (`ey_high`).; ///; /// The approach used to approximate the uncertainty in y because of the; /// errors in x is to make it equal the error in x times the slope of the lin",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:5123,Performance,perform,perform,5123,"he; /// errors in x is to make it equal the error in x times the slope of the line.; /// This approach is called ""effective variance method"" and; /// the implementation is provided in the function FitUtil::EvaluateChi2Effective; ///; /// \anchor GFitLinear; /// ### Linear fitting:; /// When the fitting function is linear (contains the `++` sign) or the fitting; /// function is a polynomial, a linear fitter is initialised.; /// To create a linear function, use the following syntax: linear parts; /// separated by `++` sign.; /// Example: to fit the parameters of the function `p0*x + p1*sin(x)`, you can create a; /// TF1 object as; ///; /// TF1 *f1 = new TF1(""f1"", ""x++sin(x)"", xmin, xmax);; ///; /// For such a TF1 you don't have to set the initial conditions and the linear fitter is used.; /// Going via the linear fitter for functions, linear in parameters, gives a; /// considerable advantage in speed.; /// When using the linear fitting it is also possible to perform a robust fitting with the; /// Least Trimmed Square (LTS) regression algorithm, by using the fit option `ROB`.; /// See the tutorial `fitLinearRobust.C`.; ///; /// ### Notes on TGraph/TGraphErrors Fitting:; ///; /// 1. By using the ""effective variance"" method a simple linear regression; /// becomes a non-linear case, which takes several iterations; /// instead of 0 as in the linear case.; /// 2. The effective variance technique assumes that there is no correlation; /// between the x and y coordinate.; /// 3. The standard chi2 (least square) method without error in the coordinates (x) can; /// be forced by using option ""EX0""; /// 4. The linear fitter doesn't take into account the errors in x. When fitting a; /// TGraphErrors with a linear functions the errors in x will not be considered.; /// If errors in x are important, use option ""F"" for linear function fitting.; /// 5. When fitting a TGraph (i.e. no errors associated with each point),; /// a correction is applied to the errors on the parameters with the ",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:3173,Usability,simpl,simple,3173,"tions, some default initial values and limits are set.; /// ""C"" | In case of linear fitting, do no calculate the chisquare (saves CPU time).; /// ""G"" | Uses the gradient implemented in `TF1::GradientPar` for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function.; /// ""EX0"" | When fitting a TGraphErrors or TGraphAsymErrors do not consider errors in the X coordinates; /// ""ROB"" | In case of linear fitting, compute the LTS regression coefficients (robust (resistant) regression), using the default fraction of good points ""ROB=0.x"" - compute the LTS regression coefficients, using 0.x as a fraction of good points; ///; ///; /// This function is used for fitting also the derived TGraph classes such as TGraphErrors or TGraphAsymmErrors.; /// See the note below on how the errors are used when fitting a TGraphErrors or TGraphAsymmErrors.; ///; /// The fitting of the TGraph, i.e simple data points without any error associated, is performed using the; /// un-weighted least-square (chi-square) method.; ///; ///; ///\anchor GFitErrors; /// ### TGraphErrors fit:; ///; /// In case of a TGraphErrors or TGraphAsymmErrors object, when `x` errors are present, the error along x,; /// is projected along the y-direction by calculating the function at the points `x-ex_low` and; /// `x+ex_high`, where `ex_low` and `ex_high` are the corresponding lower and upper error in x.; /// The chi-square is then computed as the sum of the quantity below at each data point:; ///; /// \f[; /// \frac{(y-f(x))^{2}}{ey^{2}+(\frac{1}{2}(exl+exh)f'(x))^{2}}; /// \f]; ///; /// where `x` and `y` are the point coordinates, and `f'(x)` is the derivative of the; /// function `f(x)`.; ///; /// In case of asymmetric errors, if the function lies below (above) the data point, `ey` is `ey_low` (`ey_high`).; ///; /// The approach used to approximate the uncertainty in y because of the; /// errors in x is to make it equal the error in x times the slope of the lin",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:5393,Usability,simpl,simple,5393,"/// When the fitting function is linear (contains the `++` sign) or the fitting; /// function is a polynomial, a linear fitter is initialised.; /// To create a linear function, use the following syntax: linear parts; /// separated by `++` sign.; /// Example: to fit the parameters of the function `p0*x + p1*sin(x)`, you can create a; /// TF1 object as; ///; /// TF1 *f1 = new TF1(""f1"", ""x++sin(x)"", xmin, xmax);; ///; /// For such a TF1 you don't have to set the initial conditions and the linear fitter is used.; /// Going via the linear fitter for functions, linear in parameters, gives a; /// considerable advantage in speed.; /// When using the linear fitting it is also possible to perform a robust fitting with the; /// Least Trimmed Square (LTS) regression algorithm, by using the fit option `ROB`.; /// See the tutorial `fitLinearRobust.C`.; ///; /// ### Notes on TGraph/TGraphErrors Fitting:; ///; /// 1. By using the ""effective variance"" method a simple linear regression; /// becomes a non-linear case, which takes several iterations; /// instead of 0 as in the linear case.; /// 2. The effective variance technique assumes that there is no correlation; /// between the x and y coordinate.; /// 3. The standard chi2 (least square) method without error in the coordinates (x) can; /// be forced by using option ""EX0""; /// 4. The linear fitter doesn't take into account the errors in x. When fitting a; /// TGraphErrors with a linear functions the errors in x will not be considered.; /// If errors in x are important, use option ""F"" for linear function fitting.; /// 5. When fitting a TGraph (i.e. no errors associated with each point),; /// a correction is applied to the errors on the parameters with the following; /// formula:; /// `parameter_error *= sqrt(chisquare/(ndf-1))`; ///; /// ### General Fitting documentation; ///; /// See in TH1::Fit for the documentation of; /// - [Fit Result](\ref HFitRes); /// - [Fit Status](\ref HFitStatus); /// - [Fit Statistics Box](\ref HFitStatB",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:164,Integrability,interface,interface,164,"////////////////////////////////////////////////////////////////////////////////; /// Fit this graph with function with name `fname`.; ///; /// This is a different interface to TGraph fitting using TGraph::Fit(TF1 *f1,Option_t *, Option_t *, Axis_t, Axis_t); /// See there for the details about fitting a TGraph.; ///; /// The parameter `fname` is the name of an already predefined function created by TF1 or TF2; /// Predefined functions such as gaus, expo and poln are automatically; /// created by ROOT.; ///; /// The parameter `fname` can also be a formula, accepted by the linear fitter (linear parts divided; /// by ""++"" sign), for example ""x++sin(x)"" for fitting ""[0]*x+[1]*sin(x)""",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:7,Modifiability,plugin,plugin,7,"// use plugin manager to create instance of TFitEditor",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:73,Testability,log,log,73,"//this is redefined in TGraphErrors; // (if fHistogram exist) && (if the log scale is on) &&; // (if the computed range minimum is > 0) && (if the fHistogram minimum is zero); // then it means fHistogram limits have been computed in linear scale; // therefore they might be too strict and cut some points. In that case the; // fHistogram limits should be recomputed ie: the existing fHistogram; // should not be returned.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:139,Safety,avoid,avoid,139,"// do not add the histogram to gDirectory; // use local TDirectory::TContect that will set temporarly gDirectory to a nullptr and; // will avoid that histogram is added in the global directory",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:162,Energy Efficiency,Adapt,Adapted,162,"////////////////////////////////////////////////////////////////////////////////; /// Implementation to get information on point of graph at cursor position; /// Adapted from class TH1",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:162,Modifiability,Adapt,Adapted,162,"////////////////////////////////////////////////////////////////////////////////; /// Implementation to get information on point of graph at cursor position; /// Adapted from class TH1",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:6,Safety,avoid,avoid,6,"// To avoid redefinitions in descendant classes",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:86,Deployability,Integrat,Integrate,86,"////////////////////////////////////////////////////////////////////////////////; /// Integrate the TGraph data within a given (index) range.; /// Note that this function computes the area of the polygon enclosed by the points of the TGraph.; /// The polygon segments, which are defined by the points of the TGraph, do not need to form a closed polygon,; /// since the last polygon segment, which closes the polygon, is taken as the line connecting the last TGraph point; /// with the first one. It is clear that the order of the point is essential in defining the polygon.; /// Also note that the segments should not intersect.; ///; /// NB:; /// - if last=-1 (default) last is set to the last point.; /// - if (first <0) the first point (0) is taken.; ///; /// ### Method:; ///; /// There are many ways to calculate the surface of a polygon. It all depends on what kind of data; /// you have to deal with. The most evident solution would be to divide the polygon in triangles and; /// calculate the surface of them. But this can quickly become complicated as you will have to test; /// every segments of every triangles and check if they are intersecting with a current polygon's; /// segment or if it goes outside the polygon. Many calculations that would lead to many problems...; ///; /// ### The solution (implemented by R.Brun); /// Fortunately for us, there is a simple way to solve this problem, as long as the polygon's; /// segments don't intersect.; /// It takes the x coordinate of the current vertex and multiply it by the y coordinate of the next; /// vertex. Then it subtracts from it the result of the y coordinate of the current vertex multiplied; /// by the x coordinate of the next vertex. Then divide the result by 2 to get the surface/area.; ///; /// ### Sources; /// - http://forums.wolfram.com/mathgroup/archive/1998/Mar/msg00462.html; /// - http://stackoverflow.com/questions/451426/how-do-i-calculate-the-surface-area-of-a-2d-polygon",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:86,Integrability,Integrat,Integrate,86,"////////////////////////////////////////////////////////////////////////////////; /// Integrate the TGraph data within a given (index) range.; /// Note that this function computes the area of the polygon enclosed by the points of the TGraph.; /// The polygon segments, which are defined by the points of the TGraph, do not need to form a closed polygon,; /// since the last polygon segment, which closes the polygon, is taken as the line connecting the last TGraph point; /// with the first one. It is clear that the order of the point is essential in defining the polygon.; /// Also note that the segments should not intersect.; ///; /// NB:; /// - if last=-1 (default) last is set to the last point.; /// - if (first <0) the first point (0) is taken.; ///; /// ### Method:; ///; /// There are many ways to calculate the surface of a polygon. It all depends on what kind of data; /// you have to deal with. The most evident solution would be to divide the polygon in triangles and; /// calculate the surface of them. But this can quickly become complicated as you will have to test; /// every segments of every triangles and check if they are intersecting with a current polygon's; /// segment or if it goes outside the polygon. Many calculations that would lead to many problems...; ///; /// ### The solution (implemented by R.Brun); /// Fortunately for us, there is a simple way to solve this problem, as long as the polygon's; /// segments don't intersect.; /// It takes the x coordinate of the current vertex and multiply it by the y coordinate of the next; /// vertex. Then it subtracts from it the result of the y coordinate of the current vertex multiplied; /// by the x coordinate of the next vertex. Then divide the result by 2 to get the surface/area.; ///; /// ### Sources; /// - http://forums.wolfram.com/mathgroup/archive/1998/Mar/msg00462.html; /// - http://stackoverflow.com/questions/451426/how-do-i-calculate-the-surface-area-of-a-2d-polygon",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:851,Integrability,depend,depends,851,"////////////////////////////////////////////////////////////////////////////////; /// Integrate the TGraph data within a given (index) range.; /// Note that this function computes the area of the polygon enclosed by the points of the TGraph.; /// The polygon segments, which are defined by the points of the TGraph, do not need to form a closed polygon,; /// since the last polygon segment, which closes the polygon, is taken as the line connecting the last TGraph point; /// with the first one. It is clear that the order of the point is essential in defining the polygon.; /// Also note that the segments should not intersect.; ///; /// NB:; /// - if last=-1 (default) last is set to the last point.; /// - if (first <0) the first point (0) is taken.; ///; /// ### Method:; ///; /// There are many ways to calculate the surface of a polygon. It all depends on what kind of data; /// you have to deal with. The most evident solution would be to divide the polygon in triangles and; /// calculate the surface of them. But this can quickly become complicated as you will have to test; /// every segments of every triangles and check if they are intersecting with a current polygon's; /// segment or if it goes outside the polygon. Many calculations that would lead to many problems...; ///; /// ### The solution (implemented by R.Brun); /// Fortunately for us, there is a simple way to solve this problem, as long as the polygon's; /// segments don't intersect.; /// It takes the x coordinate of the current vertex and multiply it by the y coordinate of the next; /// vertex. Then it subtracts from it the result of the y coordinate of the current vertex multiplied; /// by the x coordinate of the next vertex. Then divide the result by 2 to get the surface/area.; ///; /// ### Sources; /// - http://forums.wolfram.com/mathgroup/archive/1998/Mar/msg00462.html; /// - http://stackoverflow.com/questions/451426/how-do-i-calculate-the-surface-area-of-a-2d-polygon",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:1078,Testability,test,test,1078,"////////////////////////////////////////////////////////////////////////////////; /// Integrate the TGraph data within a given (index) range.; /// Note that this function computes the area of the polygon enclosed by the points of the TGraph.; /// The polygon segments, which are defined by the points of the TGraph, do not need to form a closed polygon,; /// since the last polygon segment, which closes the polygon, is taken as the line connecting the last TGraph point; /// with the first one. It is clear that the order of the point is essential in defining the polygon.; /// Also note that the segments should not intersect.; ///; /// NB:; /// - if last=-1 (default) last is set to the last point.; /// - if (first <0) the first point (0) is taken.; ///; /// ### Method:; ///; /// There are many ways to calculate the surface of a polygon. It all depends on what kind of data; /// you have to deal with. The most evident solution would be to divide the polygon in triangles and; /// calculate the surface of them. But this can quickly become complicated as you will have to test; /// every segments of every triangles and check if they are intersecting with a current polygon's; /// segment or if it goes outside the polygon. Many calculations that would lead to many problems...; ///; /// ### The solution (implemented by R.Brun); /// Fortunately for us, there is a simple way to solve this problem, as long as the polygon's; /// segments don't intersect.; /// It takes the x coordinate of the current vertex and multiply it by the y coordinate of the next; /// vertex. Then it subtracts from it the result of the y coordinate of the current vertex multiplied; /// by the x coordinate of the next vertex. Then divide the result by 2 to get the surface/area.; ///; /// ### Sources; /// - http://forums.wolfram.com/mathgroup/archive/1998/Mar/msg00462.html; /// - http://stackoverflow.com/questions/451426/how-do-i-calculate-the-surface-area-of-a-2d-polygon",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:502,Usability,clear,clear,502,"////////////////////////////////////////////////////////////////////////////////; /// Integrate the TGraph data within a given (index) range.; /// Note that this function computes the area of the polygon enclosed by the points of the TGraph.; /// The polygon segments, which are defined by the points of the TGraph, do not need to form a closed polygon,; /// since the last polygon segment, which closes the polygon, is taken as the line connecting the last TGraph point; /// with the first one. It is clear that the order of the point is essential in defining the polygon.; /// Also note that the segments should not intersect.; ///; /// NB:; /// - if last=-1 (default) last is set to the last point.; /// - if (first <0) the first point (0) is taken.; ///; /// ### Method:; ///; /// There are many ways to calculate the surface of a polygon. It all depends on what kind of data; /// you have to deal with. The most evident solution would be to divide the polygon in triangles and; /// calculate the surface of them. But this can quickly become complicated as you will have to test; /// every segments of every triangles and check if they are intersecting with a current polygon's; /// segment or if it goes outside the polygon. Many calculations that would lead to many problems...; ///; /// ### The solution (implemented by R.Brun); /// Fortunately for us, there is a simple way to solve this problem, as long as the polygon's; /// segments don't intersect.; /// It takes the x coordinate of the current vertex and multiply it by the y coordinate of the next; /// vertex. Then it subtracts from it the result of the y coordinate of the current vertex multiplied; /// by the x coordinate of the next vertex. Then divide the result by 2 to get the surface/area.; ///; /// ### Sources; /// - http://forums.wolfram.com/mathgroup/archive/1998/Mar/msg00462.html; /// - http://stackoverflow.com/questions/451426/how-do-i-calculate-the-surface-area-of-a-2d-polygon",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:1371,Usability,simpl,simple,1371,"////////////////////////////////////////////////////////////////////////////////; /// Integrate the TGraph data within a given (index) range.; /// Note that this function computes the area of the polygon enclosed by the points of the TGraph.; /// The polygon segments, which are defined by the points of the TGraph, do not need to form a closed polygon,; /// since the last polygon segment, which closes the polygon, is taken as the line connecting the last TGraph point; /// with the first one. It is clear that the order of the point is essential in defining the polygon.; /// Also note that the segments should not intersect.; ///; /// NB:; /// - if last=-1 (default) last is set to the last point.; /// - if (first <0) the first point (0) is taken.; ///; /// ### Method:; ///; /// There are many ways to calculate the surface of a polygon. It all depends on what kind of data; /// you have to deal with. The most evident solution would be to divide the polygon in triangles and; /// calculate the surface of them. But this can quickly become complicated as you will have to test; /// every segments of every triangles and check if they are intersecting with a current polygon's; /// segment or if it goes outside the polygon. Many calculations that would lead to many problems...; ///; /// ### The solution (implemented by R.Brun); /// Fortunately for us, there is a simple way to solve this problem, as long as the polygon's; /// segments don't intersect.; /// It takes the x coordinate of the current vertex and multiply it by the y coordinate of the next; /// vertex. Then it subtracts from it the result of the y coordinate of the current vertex multiplied; /// by the x coordinate of the next vertex. Then divide the result by 2 to get the surface/area.; ///; /// ### Sources; /// - http://forums.wolfram.com/mathgroup/archive/1998/Mar/msg00462.html; /// - http://stackoverflow.com/questions/451426/how-do-i-calculate-the-surface-area-of-a-2d-polygon",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:374,Integrability,rout,routine,374,"////////////////////////////////////////////////////////////////////////////////; /// Least squares polynomial fitting without weights.; ///; /// \param [in] m number of parameters; /// \param [in] a array of parameters; /// \param [in] xmin 1st point number to fit (default =0); /// \param [in] xmax last point number to fit (default=fNpoints-1); ///; /// based on CERNLIB routine LSQ: Translated to C++ by Rene Brun",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:245,Testability,log,logarithm,245,"////////////////////////////////////////////////////////////////////////////////; /// Least square linear fit without weights.; ///; /// Fit a straight line (a0 + a1*x) to the data in this graph.; ///; /// \param [in] ndata if ndata<0, fits the logarithm of the graph (used in InitExpo() to set; /// the initial parameter values for a fit with exponential function.; /// \param [in] a0 constant; /// \param [in] a1 slope; /// \param [in] ifail return parameter indicating the status of the fit (ifail=0, fit is OK); /// \param [in] xmin, xmax fitting range; ///; /// extracted from CERNLIB LLSQ: Translated to C++ by Rene Brun",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:308,Deployability,install,install,308,"////////////////////////////////////////////////////////////////////////////////; /// Save the graph as .csv, .tsv or .txt. In case of any other extension, fall; /// back to TObject::SaveAs; ///; /// The result can be immediately imported into Excel, gnuplot, Python or whatever,; /// without the needing to install pyroot, etc.; ///; /// \param filename the name of the file where to store the graph; /// \param option some tuning options; ///; /// The file extension defines the delimiter used:; /// - `.csv` : comma; /// - `.tsv` : tab; /// - `.txt` : space; ///; /// If option = ""title"" a title line is generated with the axis titles.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:74,Safety,avoid,avoid,74,"// points above i can be not initialized; // set zero up to i-th point to avoid redefinition; // of this method in descendant classes",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:108,Energy Efficiency,allocate,allocate,108,"////////////////////////////////////////////////////////////////////////////////; /// if size*2 <= fMaxSize allocate new arrays of size points,; /// copy points [0,oend).; /// Return newarray (passed or new instance if it was zero; /// and allocations are needed)",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:992,Availability,error,errors,992,"////////////////////////////////////////////////////////////////////////////////; /// Sorts the points of this TGraph using in-place quicksort (see e.g. older glibc).; /// To compare two points the function parameter greaterfunc is used (see TGraph::CompareX for an; /// example of such a method, which is also the default comparison function for Sort). After; /// the sort, greaterfunc(this, i, j) will return kTRUE for all i>j if ascending == kTRUE, and; /// kFALSE otherwise.; ///; /// The last two parameters are used for the recursive quick sort, stating the range to be sorted; ///; /// Examples:; /// ~~~ {.cpp}; /// // sort points along x axis; /// graph->Sort();; /// // sort points along their distance to origin; /// graph->Sort(&TGraph::CompareRadius);; ///; /// Bool_t CompareErrors(const TGraph* gr, Int_t i, Int_t j) {; /// const TGraphErrors* ge=(const TGraphErrors*)gr;; /// return (ge->GetEY()[i]>ge->GetEY()[j]); }; /// // sort using the above comparison function, largest errors first; /// graph->Sort(&CompareErrors, kFALSE);; /// ~~~",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:196,Availability,error,errors,196,"// Sort the indices using the provided comparison function; // We use std::stable_sort here because the libc++ implementation of std::sort; // is not standard-compliant until LLVM 14 which caused errors on the mac nodes; // of our CI, related issue: https://github.com/llvm/llvm-project/issues/21211",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update the fX and fY arrays with the sorted values.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:211,Availability,error,error,211,"////////////////////////////////////////////////////////////////////////////////; /// Adds all graphs from the collection to this graph.; /// Returns the total number of points in the result or -1 in case of an error.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:108,Performance,perform,perform,108,"////////////////////////////////////////////////////////////////////////////////; /// protected function to perform the merge operation of a graph",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:142,Testability,log,log,142,"////////////////////////////////////////////////////////////////////////////////; /// Move all graph points on specified values dx,dy; /// If log argument specified, calculation done in logarithmic scale like:; /// new_value = exp( log(old_value) + delta );",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:186,Testability,log,logarithmic,186,"////////////////////////////////////////////////////////////////////////////////; /// Move all graph points on specified values dx,dy; /// If log argument specified, calculation done in logarithmic scale like:; /// new_value = exp( log(old_value) + delta );",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:232,Testability,log,log,232,"////////////////////////////////////////////////////////////////////////////////; /// Move all graph points on specified values dx,dy; /// If log argument specified, calculation done in logarithmic scale like:; /// new_value = exp( log(old_value) + delta );",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:101,Deployability,continuous,continuous,101,"////////////////////////////////////////////////////////////////////////////////; /// Find zero of a continuous function.; /// This function finds a real zero of the continuous real; /// function Y(X) in a given interval (A,B). See accompanying; /// notes for details of the argument list and calling sequence",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:166,Deployability,continuous,continuous,166,"////////////////////////////////////////////////////////////////////////////////; /// Find zero of a continuous function.; /// This function finds a real zero of the continuous real; /// function Y(X) in a given interval (A,B). See accompanying; /// notes for details of the argument list and calling sequence",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:3,Testability,Test,Test,3,"// Test whether Y(X) is sufficiently small.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:3,Testability,Test,Test,3,"// Test whether the signs of Y(AZ) and Y(BZ) are different.; // if not, begin the binary subdivision.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:3,Testability,Test,Test,3,"// Test whether a bracket has been found .; // If not,continue the search",MatchSource.CODE_COMMENT,hist/hist/src/TGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:4224,Deployability,Update,Update,4224," Z; value found via a linear interpolation on the plane defined by the triangle above; the (X,Y) coordinates of the bin center. The existing (X,Y,Z) points can be randomly scattered.; The Delaunay triangles are build in the (X,Y) plane. These 2D triangles are then; used to define flat planes in (X,Y,Z) over which the interpolation is done to fill; the 2D histogram. The 3D triangles int takes build a 3D surface in; the form of tessellating triangles at various angles. The triangles found can be; drawn in 3D with one of the TGraph2D specific drawing options. The histogram generated by the Delaunay interpolation can be accessed using the; `GetHistogram()` method. The axis settings (title, ranges etc ...) can be changed accessing the axis via; the GetXaxis GetYaxis and GetZaxis methods. They access the histogram axis created; at drawing time only. Therefore they should called after the TGraph2D is drawn:. ~~~ {.cpp}; auto g = new TGraph2D();. [...]. g->Draw(""tri1"");; gPad->Update();; g->GetXaxis()->SetTitle(""X axis title"");; ~~~. \anchor G2D02; ## Examples. \anchor G2D021; ### SURF1 Example. Begin_Macro(source); {; auto c = new TCanvas(""c"",""Graph2D example"",0,0,600,400);; Double_t x, y, z, P = 6.;; Int_t np = 200;; auto dt = new TGraph2D();; dt->SetTitle(""Graph title; X axis title; Y axis title; Z axis title"");; auto r = new TRandom();; for (Int_t N=0; N<np; N++) {; x = 2*P*(r->Rndm(N))-P;; y = 2*P*(r->Rndm(N))-P;; z = (sin(x)/x)*(sin(y)/y)+0.2;; dt->SetPoint(N,x,y,z);; }; gStyle->SetPalette(1);; dt->Draw(""surf1"");; }; End_Macro. \anchor G2D022; ### Fitting Example. 2D graphs can be fitted as shown by the following example:. Begin_Macro(source); ../../../tutorials/fit/graph2dfit.C; End_Macro. \anchor G2D023; ### PCOL Example. Example showing the PCOL option. Begin_Macro(source); {; auto c = new TCanvas(""c"",""Graph2D example"",0,0,600,400);; Double_t P = 5.;; Int_t npx = 20 ;; Int_t npy = 20 ;; Double_t x = -P;; Double_t y = -P;; Double_t z;; Int_t k = 0;; Double_t dx = (2",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:1447,Modifiability,extend,extended,1447,"anchor G2D00; ## Creating a TGraph2D. This class has different constructors:; - With an array's dimension and three arrays x, y, and z:; ~~~ {.cpp}; auto g = new TGraph2D(n, x, y, z);; ~~~; x, y, z arrays can be doubles, floats, or ints.; - With an array's dimension only:; ~~~ {.cpp}; auto g = new TGraph2D(n);; ~~~; The internal arrays are then filled with `SetPoint()`. The following line; fills the internal arrays at the position `i` with the values; `x`, `y`, `z`.; ~~~ {.cpp}; g->SetPoint(i, x, y, z);; ~~~; - Without parameters:; ~~~ {.cpp}; auto g = new TGraph2D();; ~~~; again `SetPoint()` must be used to fill the internal arrays.; - From a file:; ~~~ {.cpp}; auto g = new TGraph2D(""graph.dat"");; ~~~; Arrays are read from the ASCII file ""graph.dat"" according to a specifies; format. The default format is `%%lg %%lg %%lg`. Note that in any of these three cases, `SetPoint()` can be used to change a data; point or add a new one. If the data point index (`i`) is greater than the; current size of the internal arrays, they are automatically extended. Like TGraph some TGraph2D constructors do not have the TGraph2D title and name as parameters.; For these constructors TGraph2D has the default title and name ""Graph2D"". To change the; default title and name `SetTitle` and `SetName` should be called on the TGraph2D after its; creation. \anchor G2D01; ## Drawing options. Specific drawing options can be used to paint a TGraph2D:. | Option | Description |; |----------|-------------------------------------------------------------------|; | ""TRI"" | The Delaunay triangles are drawn using filled area. An hidden surface drawing technique is used. The surface is painted with the current fill area color. The edges of each triangles are painted with the current line color. |; | ""TRIW"" | The Delaunay triangles are drawn as wire frame. |; | ""TRI1"" | The Delaunay triangles are painted with color levels. The edges of each triangles are painted with the current line color. |; | ""TRI2"" | The D",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:3864,Security,access,accessed,3864," `SURF`, `LEGO`, `CONT` etc..). When a TGraph2D is drawn with one of the 2D histogram drawing option,; an intermediate 2D histogram is filled using the Delaunay triangles; to interpolate the data set. The 2D histogram has equidistant bins along the X; and Y directions. The number of bins along each direction can be change using; `SetNpx()` and `SetNpy()`. Each bin is filled with the Z; value found via a linear interpolation on the plane defined by the triangle above; the (X,Y) coordinates of the bin center. The existing (X,Y,Z) points can be randomly scattered.; The Delaunay triangles are build in the (X,Y) plane. These 2D triangles are then; used to define flat planes in (X,Y,Z) over which the interpolation is done to fill; the 2D histogram. The 3D triangles int takes build a 3D surface in; the form of tessellating triangles at various angles. The triangles found can be; drawn in 3D with one of the TGraph2D specific drawing options. The histogram generated by the Delaunay interpolation can be accessed using the; `GetHistogram()` method. The axis settings (title, ranges etc ...) can be changed accessing the axis via; the GetXaxis GetYaxis and GetZaxis methods. They access the histogram axis created; at drawing time only. Therefore they should called after the TGraph2D is drawn:. ~~~ {.cpp}; auto g = new TGraph2D();. [...]. g->Draw(""tri1"");; gPad->Update();; g->GetXaxis()->SetTitle(""X axis title"");; ~~~. \anchor G2D02; ## Examples. \anchor G2D021; ### SURF1 Example. Begin_Macro(source); {; auto c = new TCanvas(""c"",""Graph2D example"",0,0,600,400);; Double_t x, y, z, P = 6.;; Int_t np = 200;; auto dt = new TGraph2D();; dt->SetTitle(""Graph title; X axis title; Y axis title; Z axis title"");; auto r = new TRandom();; for (Int_t N=0; N<np; N++) {; x = 2*P*(r->Rndm(N))-P;; y = 2*P*(r->Rndm(N))-P;; z = (sin(x)/x)*(sin(y)/y)+0.2;; dt->SetPoint(N,x,y,z);; }; gStyle->SetPalette(1);; dt->Draw(""surf1"");; }; End_Macro. \anchor G2D022; ### Fitting Example. 2D graphs can be fitted as",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:3966,Security,access,accessing,3966,"illed using the Delaunay triangles; to interpolate the data set. The 2D histogram has equidistant bins along the X; and Y directions. The number of bins along each direction can be change using; `SetNpx()` and `SetNpy()`. Each bin is filled with the Z; value found via a linear interpolation on the plane defined by the triangle above; the (X,Y) coordinates of the bin center. The existing (X,Y,Z) points can be randomly scattered.; The Delaunay triangles are build in the (X,Y) plane. These 2D triangles are then; used to define flat planes in (X,Y,Z) over which the interpolation is done to fill; the 2D histogram. The 3D triangles int takes build a 3D surface in; the form of tessellating triangles at various angles. The triangles found can be; drawn in 3D with one of the TGraph2D specific drawing options. The histogram generated by the Delaunay interpolation can be accessed using the; `GetHistogram()` method. The axis settings (title, ranges etc ...) can be changed accessing the axis via; the GetXaxis GetYaxis and GetZaxis methods. They access the histogram axis created; at drawing time only. Therefore they should called after the TGraph2D is drawn:. ~~~ {.cpp}; auto g = new TGraph2D();. [...]. g->Draw(""tri1"");; gPad->Update();; g->GetXaxis()->SetTitle(""X axis title"");; ~~~. \anchor G2D02; ## Examples. \anchor G2D021; ### SURF1 Example. Begin_Macro(source); {; auto c = new TCanvas(""c"",""Graph2D example"",0,0,600,400);; Double_t x, y, z, P = 6.;; Int_t np = 200;; auto dt = new TGraph2D();; dt->SetTitle(""Graph title; X axis title; Y axis title; Z axis title"");; auto r = new TRandom();; for (Int_t N=0; N<np; N++) {; x = 2*P*(r->Rndm(N))-P;; y = 2*P*(r->Rndm(N))-P;; z = (sin(x)/x)*(sin(y)/y)+0.2;; dt->SetPoint(N,x,y,z);; }; gStyle->SetPalette(1);; dt->Draw(""surf1"");; }; End_Macro. \anchor G2D022; ### Fitting Example. 2D graphs can be fitted as shown by the following example:. Begin_Macro(source); ../../../tutorials/fit/graph2dfit.C; End_Macro. \anchor G2D023; ### PCOL Example.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:4039,Security,access,access,4039,"istogram has equidistant bins along the X; and Y directions. The number of bins along each direction can be change using; `SetNpx()` and `SetNpy()`. Each bin is filled with the Z; value found via a linear interpolation on the plane defined by the triangle above; the (X,Y) coordinates of the bin center. The existing (X,Y,Z) points can be randomly scattered.; The Delaunay triangles are build in the (X,Y) plane. These 2D triangles are then; used to define flat planes in (X,Y,Z) over which the interpolation is done to fill; the 2D histogram. The 3D triangles int takes build a 3D surface in; the form of tessellating triangles at various angles. The triangles found can be; drawn in 3D with one of the TGraph2D specific drawing options. The histogram generated by the Delaunay interpolation can be accessed using the; `GetHistogram()` method. The axis settings (title, ranges etc ...) can be changed accessing the axis via; the GetXaxis GetYaxis and GetZaxis methods. They access the histogram axis created; at drawing time only. Therefore they should called after the TGraph2D is drawn:. ~~~ {.cpp}; auto g = new TGraph2D();. [...]. g->Draw(""tri1"");; gPad->Update();; g->GetXaxis()->SetTitle(""X axis title"");; ~~~. \anchor G2D02; ## Examples. \anchor G2D021; ### SURF1 Example. Begin_Macro(source); {; auto c = new TCanvas(""c"",""Graph2D example"",0,0,600,400);; Double_t x, y, z, P = 6.;; Int_t np = 200;; auto dt = new TGraph2D();; dt->SetTitle(""Graph title; X axis title; Y axis title; Z axis title"");; auto r = new TRandom();; for (Int_t N=0; N<np; N++) {; x = 2*P*(r->Rndm(N))-P;; y = 2*P*(r->Rndm(N))-P;; z = (sin(x)/x)*(sin(y)/y)+0.2;; dt->SetPoint(N,x,y,z);; }; gStyle->SetPalette(1);; dt->Draw(""surf1"");; }; End_Macro. \anchor G2D022; ### Fitting Example. 2D graphs can be fitted as shown by the following example:. Begin_Macro(source); ../../../tutorials/fit/graph2dfit.C; End_Macro. \anchor G2D023; ### PCOL Example. Example showing the PCOL option. Begin_Macro(source); {; auto c = new TC",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:247,Availability,error,errors,247,"////////////////////////////////////////////////////////////////////////////////; /// Graph2D constructor with a TH2 (h2) as input.; /// Only the h2's bins within the X and Y axis ranges are used.; /// Empty bins, recognized when both content and errors are zero, are excluded.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:192,Safety,avoid,avoid,192,"////////////////////////////////////////////////////////////////////////////////; /// Graph2D constructor with name, title and three vectors of doubles as input.; /// name : name of 2D graph (avoid blanks); /// title : 2D graph title; /// if title is of the form ""stringt;stringx;stringy;stringz""; /// the 2D graph title is set to stringt, the x axis title to stringx,; /// the y axis title to stringy,etc",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:320,Safety,avoid,avoid,320,"////////////////////////////////////////////////////////////////////////////////; /// Graph2D constructor reading input from filename; /// filename is assumed to contain at least three columns of numbers.; /// For files separated by a specific delimiter different from ' ' and '\\t' (e.g. ';' in csv files); /// you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; /// e.g. option="" \\t,;"" for columns of figures separated by any of these characters (' ', '\\t', ',', ';'); /// used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; /// Note in that case, the instantiation is about 2 times slower.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:45,Availability,error,error,45,"//first condition not to repeat the previous error message",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:51,Integrability,message,message,51,"//first condition not to repeat the previous error message",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:21,Modifiability,variab,variables,21,"// Initializing loop variables",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:137,Availability,Error,Errors,137,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: `z = z + c1*f(x,y,z)`; /// Errors are not recalculated.; ///; /// \param f may be a 2-D function TF2 or 3-d function TF3; /// \param c1 a scaling factor, 1 by default",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: `z = z + c1*f(x,y,z)`; /// Errors are not recalculated.; ///; /// \param f may be a 2-D function TF2 or 3-d function TF3; /// \param c1 a scaling factor, 1 by default",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:102,Energy Efficiency,allocate,allocated,102,"////////////////////////////////////////////////////////////////////////////////; /// Free all memory allocated by this object.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:86,Performance,Perform,Perform,86,"////////////////////////////////////////////////////////////////////////////////; /// Perform the automatic addition of the graph to the given directory; ///; /// Note this function is called in place when the semantic requires; /// this object to be added to a directory (I.e. when being read from; /// a TKey or being Cloned)",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:219,Availability,avail,available,219,"////////////////////////////////////////////////////////////////////////////////; /// Fits this 2D graph with function f2; ///; /// f2 is an already predefined function created by TF2.; ///; /// See TGraph::Fit for the available fitting options and fitting notes; ///",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:7,Modifiability,plugin,plugin,7,"// use plugin manager to create instance of TFitEditor",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:660,Integrability,rout,routine,660,"////////////////////////////////////////////////////////////////////////////////; /// By default returns a pointer to the Delaunay histogram. If fHistogram; /// doesn't exist, books the 2D histogram fHistogram with a margin around; /// the hull. Calls TGraphDelaunay::Interpolate at each bin centre to build up; /// an interpolated 2D histogram.; ///; /// If the ""empty"" option is selected, returns an empty histogram booked with; /// the limits of fX, fY and fZ. This option is used when the data set is; /// drawn with markers only. In that particular case there is no need to; /// find the Delaunay triangles.; ///; /// By default use the new interpolation routine based on Triangles; /// If the option ""old"" the old interpolation is used",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:6,Safety,avoid,avoid,6,"// to avoid adding fHistogram to gDirectory",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:132,Integrability,depend,depending,132,"////////////////////////////////////////////////////////////////////////////////; /// Projects a 2-d graph into 1 or 2-d histograms depending on the option parameter.; /// option may contain a combination of the characters x,y,z:; ///; /// - option = ""x"" return the x projection into a TH1D histogram; /// - option = ""y"" return the y projection into a TH1D histogram; /// - option = ""xy"" return the x versus y projection into a TH2D histogram; /// - option = ""yx"" return the y versus x projection into a TH2D histogram",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:540,Integrability,rout,routine,540,"////////////////////////////////////////////////////////////////////////////////; /// Sets the histogram to be filled.; /// If the 2D graph needs to be save in a TFile the following set should be; /// followed to read it back:; /// 1. Create TGraph2D; /// 2. Call g->SetHistogram(h), and do whatever you need to do; /// 3. Save g and h to the TFile, exit; /// 4. Open the TFile, retrieve g and h; /// 5. Call h->SetDirectory(0); /// 6. Call g->SetHistogram(h) again; /// 7. Carry on as normal; ///; /// By default use the new interpolation routine based on Triangles; /// If the option ""old"" the old interpolation is used",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:59,Deployability,update,update,59,"// 2D graphs are named objects in a THashList.; // We must update the hashlist if we change the name",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:70,Security,hash,hashlist,70,"// 2D graphs are named objects in a THashList.; // We must update the hashlist if we change the name",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:59,Deployability,update,update,59,"// 2D graphs are named objects in a THashList.; // We must update the hashlist if we change the name",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:70,Security,hash,hashlist,70,"// 2D graphs are named objects in a THashList.; // We must update the hashlist if we change the name",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:185,Modifiability,extend,extended,185,"////////////////////////////////////////////////////////////////////////////////; /// Sets point number n.; /// If n is greater than the current size, the arrays are automatically; /// extended.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:6,Energy Efficiency,allocate,allocate,6,"// re-allocate the object",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:69,Availability,error,errors,69,"/** \class TGraph2DAsymmErrors; \ingroup Graphs; Graph 2D class with errors. A TGraph2DAsymmErrors is a TGraph2D with asymmetric errors. It behaves like a TGraph2D and has; the same drawing options. The **""ERR""** drawing option allows to display the error bars. The; following example shows how to use it:. Begin_Macro(source); {; auto c = new TCanvas(""c"",""TGraph2DAsymmErrors example"",0,0,600,600);; Double_t P = 6.;; Int_t np = 200;. Double_t *rx=0, *ry=0, *rz=0;; Double_t *exl=0, *exh=0, *eyl=0, *eyh=0, *ezl=0, *ezh=0;. rx = new Double_t[np];; ry = new Double_t[np];; rz = new Double_t[np];; exl = new Double_t[np];; exh = new Double_t[np];; eyl = new Double_t[np];; eyh = new Double_t[np];; ezl = new Double_t[np];; ezh = new Double_t[np];. auto r = new TRandom();. for (Int_t N=0; N<np;N++) {; rx[N] = 2*P*(r->Rndm(N))-P;; ry[N] = 2*P*(r->Rndm(N))-P;; rz[N] = rx[N]*rx[N]-ry[N]*ry[N];; rx[N] = 10.+rx[N];; ry[N] = 10.+ry[N];; rz[N] = 40.+rz[N];; exl[N] = r->Rndm(N);; exh[N] = r->Rndm(N);; eyl[N] = r->Rndm(N);; eyh[N] = r->Rndm(N);; ezl[N] = 10*r->Rndm(N);; ezh[N] = 10*r->Rndm(N);; }. auto g = new TGraph2DAsymmErrors(np, rx, ry, rz, exl, exh, eyl, eyh, ezl, ezh);; g->SetTitle(""TGraph2D with asymmetric error bars: option \""ERR\"""");; g->SetFillColor(29);; g->SetMarkerSize(0.8);; g->SetMarkerStyle(20);; g->SetMarkerColor(kRed);; g->SetLineColor(kBlue-3);; g->SetLineWidth(2);; gPad->SetLogy(1);; g->Draw(""err p0"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraph2DAsymmErrors default constructor",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:129,Availability,error,errors,129,"/** \class TGraph2DAsymmErrors; \ingroup Graphs; Graph 2D class with errors. A TGraph2DAsymmErrors is a TGraph2D with asymmetric errors. It behaves like a TGraph2D and has; the same drawing options. The **""ERR""** drawing option allows to display the error bars. The; following example shows how to use it:. Begin_Macro(source); {; auto c = new TCanvas(""c"",""TGraph2DAsymmErrors example"",0,0,600,600);; Double_t P = 6.;; Int_t np = 200;. Double_t *rx=0, *ry=0, *rz=0;; Double_t *exl=0, *exh=0, *eyl=0, *eyh=0, *ezl=0, *ezh=0;. rx = new Double_t[np];; ry = new Double_t[np];; rz = new Double_t[np];; exl = new Double_t[np];; exh = new Double_t[np];; eyl = new Double_t[np];; eyh = new Double_t[np];; ezl = new Double_t[np];; ezh = new Double_t[np];. auto r = new TRandom();. for (Int_t N=0; N<np;N++) {; rx[N] = 2*P*(r->Rndm(N))-P;; ry[N] = 2*P*(r->Rndm(N))-P;; rz[N] = rx[N]*rx[N]-ry[N]*ry[N];; rx[N] = 10.+rx[N];; ry[N] = 10.+ry[N];; rz[N] = 40.+rz[N];; exl[N] = r->Rndm(N);; exh[N] = r->Rndm(N);; eyl[N] = r->Rndm(N);; eyh[N] = r->Rndm(N);; ezl[N] = 10*r->Rndm(N);; ezh[N] = 10*r->Rndm(N);; }. auto g = new TGraph2DAsymmErrors(np, rx, ry, rz, exl, exh, eyl, eyh, ezl, ezh);; g->SetTitle(""TGraph2D with asymmetric error bars: option \""ERR\"""");; g->SetFillColor(29);; g->SetMarkerSize(0.8);; g->SetMarkerStyle(20);; g->SetMarkerColor(kRed);; g->SetLineColor(kBlue-3);; g->SetLineWidth(2);; gPad->SetLogy(1);; g->Draw(""err p0"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraph2DAsymmErrors default constructor",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:250,Availability,error,error,250,"/** \class TGraph2DAsymmErrors; \ingroup Graphs; Graph 2D class with errors. A TGraph2DAsymmErrors is a TGraph2D with asymmetric errors. It behaves like a TGraph2D and has; the same drawing options. The **""ERR""** drawing option allows to display the error bars. The; following example shows how to use it:. Begin_Macro(source); {; auto c = new TCanvas(""c"",""TGraph2DAsymmErrors example"",0,0,600,600);; Double_t P = 6.;; Int_t np = 200;. Double_t *rx=0, *ry=0, *rz=0;; Double_t *exl=0, *exh=0, *eyl=0, *eyh=0, *ezl=0, *ezh=0;. rx = new Double_t[np];; ry = new Double_t[np];; rz = new Double_t[np];; exl = new Double_t[np];; exh = new Double_t[np];; eyl = new Double_t[np];; eyh = new Double_t[np];; ezl = new Double_t[np];; ezh = new Double_t[np];. auto r = new TRandom();. for (Int_t N=0; N<np;N++) {; rx[N] = 2*P*(r->Rndm(N))-P;; ry[N] = 2*P*(r->Rndm(N))-P;; rz[N] = rx[N]*rx[N]-ry[N]*ry[N];; rx[N] = 10.+rx[N];; ry[N] = 10.+ry[N];; rz[N] = 40.+rz[N];; exl[N] = r->Rndm(N);; exh[N] = r->Rndm(N);; eyl[N] = r->Rndm(N);; eyh[N] = r->Rndm(N);; ezl[N] = 10*r->Rndm(N);; ezh[N] = 10*r->Rndm(N);; }. auto g = new TGraph2DAsymmErrors(np, rx, ry, rz, exl, exh, eyl, eyh, ezl, ezh);; g->SetTitle(""TGraph2D with asymmetric error bars: option \""ERR\"""");; g->SetFillColor(29);; g->SetMarkerSize(0.8);; g->SetMarkerStyle(20);; g->SetMarkerColor(kRed);; g->SetLineColor(kBlue-3);; g->SetLineWidth(2);; gPad->SetLogy(1);; g->Draw(""err p0"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraph2DAsymmErrors default constructor",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:1213,Availability,error,error,1213,"/** \class TGraph2DAsymmErrors; \ingroup Graphs; Graph 2D class with errors. A TGraph2DAsymmErrors is a TGraph2D with asymmetric errors. It behaves like a TGraph2D and has; the same drawing options. The **""ERR""** drawing option allows to display the error bars. The; following example shows how to use it:. Begin_Macro(source); {; auto c = new TCanvas(""c"",""TGraph2DAsymmErrors example"",0,0,600,600);; Double_t P = 6.;; Int_t np = 200;. Double_t *rx=0, *ry=0, *rz=0;; Double_t *exl=0, *exh=0, *eyl=0, *eyh=0, *ezl=0, *ezh=0;. rx = new Double_t[np];; ry = new Double_t[np];; rz = new Double_t[np];; exl = new Double_t[np];; exh = new Double_t[np];; eyl = new Double_t[np];; eyh = new Double_t[np];; ezl = new Double_t[np];; ezh = new Double_t[np];. auto r = new TRandom();. for (Int_t N=0; N<np;N++) {; rx[N] = 2*P*(r->Rndm(N))-P;; ry[N] = 2*P*(r->Rndm(N))-P;; rz[N] = rx[N]*rx[N]-ry[N]*ry[N];; rx[N] = 10.+rx[N];; ry[N] = 10.+ry[N];; rz[N] = 40.+rz[N];; exl[N] = r->Rndm(N);; exh[N] = r->Rndm(N);; eyl[N] = r->Rndm(N);; eyh[N] = r->Rndm(N);; ezl[N] = 10*r->Rndm(N);; ezh[N] = 10*r->Rndm(N);; }. auto g = new TGraph2DAsymmErrors(np, rx, ry, rz, exl, exh, eyl, eyh, ezl, ezh);; g->SetTitle(""TGraph2D with asymmetric error bars: option \""ERR\"""");; g->SetFillColor(29);; g->SetMarkerSize(0.8);; g->SetMarkerStyle(20);; g->SetMarkerColor(kRed);; g->SetLineColor(kBlue-3);; g->SetLineWidth(2);; gPad->SetLogy(1);; g->Draw(""err p0"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraph2DAsymmErrors default constructor",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:8,Availability,error,error,8,"// copy error arrays",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:117,Availability,error,errorbars,117,"////////////////////////////////////////////////////////////////////////////////; /// Add a 3D point with asymmetric errorbars to an existing graph",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:107,Availability,error,error,107,"////////////////////////////////////////////////////////////////////////////////; /// Returns the combined error along X at point i by computing the average; /// of the lower and upper variance.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:102,Availability,error,error,102,"////////////////////////////////////////////////////////////////////////////////; /// Returns the low error along X at point i.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:103,Availability,error,error,103,"////////////////////////////////////////////////////////////////////////////////; /// Returns the high error along X at point i.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:107,Availability,error,error,107,"////////////////////////////////////////////////////////////////////////////////; /// Returns the combined error along Y at point i by computing the average; /// of the lower and upper variance.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:102,Availability,error,error,102,"////////////////////////////////////////////////////////////////////////////////; /// Returns the low error along Y at point i.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:103,Availability,error,error,103,"////////////////////////////////////////////////////////////////////////////////; /// Returns the high error along Y at point i.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:107,Availability,error,error,107,"////////////////////////////////////////////////////////////////////////////////; /// Returns the combined error along Z at point i by computing the average; /// of the lower and upper variance.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:102,Availability,error,error,102,"////////////////////////////////////////////////////////////////////////////////; /// Returns the low error along Z at point i.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:103,Availability,error,error,103,"////////////////////////////////////////////////////////////////////////////////; /// Returns the high error along Z at point i.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:113,Availability,error,errors,113,"////////////////////////////////////////////////////////////////////////////////; /// Returns the X maximum with errors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:113,Availability,error,errors,113,"////////////////////////////////////////////////////////////////////////////////; /// Returns the X minimum with errors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:113,Availability,error,errors,113,"////////////////////////////////////////////////////////////////////////////////; /// Returns the Y maximum with errors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:113,Availability,error,errors,113,"////////////////////////////////////////////////////////////////////////////////; /// Returns the Y minimum with errors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:113,Availability,error,errors,113,"////////////////////////////////////////////////////////////////////////////////; /// Returns the Z maximum with errors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:113,Availability,error,errors,113,"////////////////////////////////////////////////////////////////////////////////; /// Returns the Z minimum with errors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:105,Availability,error,errors,105,"////////////////////////////////////////////////////////////////////////////////; /// Print 2D graph and errors values.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:110,Availability,error,errors,110,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraph2DAsymmErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and errors are scaled; /// If option contains ""z"" the z values and errors are scaled; /// If option contains ""xyz"" all three x, y and z values and errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:210,Availability,error,errors,210,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraph2DAsymmErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and errors are scaled; /// If option contains ""z"" the z values and errors are scaled; /// If option contains ""xyz"" all three x, y and z values and errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:273,Availability,error,errors,273,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraph2DAsymmErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and errors are scaled; /// If option contains ""z"" the z values and errors are scaled; /// If option contains ""xyz"" all three x, y and z values and errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:336,Availability,error,errors,336,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraph2DAsymmErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and errors are scaled; /// If option contains ""z"" the z values and errors are scaled; /// If option contains ""xyz"" all three x, y and z values and errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:416,Availability,error,errors,416,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraph2DAsymmErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and errors are scaled; /// If option contains ""z"" the z values and errors are scaled; /// If option contains ""xyz"" all three x, y and z values and errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:6,Energy Efficiency,allocate,allocate,6,"// re-allocate the object",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:6,Energy Efficiency,allocate,allocate,6,"// re-allocate the object",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx:64,Availability,error,errors,64,"/** \class TGraph2DErrors; \ingroup Graphs; Graph 2D class with errors. A TGraph2DErrors is a TGraph2D with errors. It behaves like a TGraph2D and has; the same drawing options. The **""ERR""** drawing option allows to display the error bars. The; following example shows how to use it:. Begin_Macro(source); {; auto c = new TCanvas(""c"",""TGraph2DErrors example"",0,0,600,600);; Double_t P = 6.;; Int_t np = 200;. Double_t *rx=0, *ry=0, *rz=0;; Double_t *ex=0, *ey=0, *ez=0;. rx = new Double_t[np];; ry = new Double_t[np];; rz = new Double_t[np];; ex = new Double_t[np];; ey = new Double_t[np];; ez = new Double_t[np];. auto r = new TRandom();. for (Int_t N=0; N<np;N++) {; rx[N] = 2*P*(r->Rndm(N))-P;; ry[N] = 2*P*(r->Rndm(N))-P;; rz[N] = rx[N]*rx[N]-ry[N]*ry[N];; rx[N] = 10.+rx[N];; ry[N] = 10.+ry[N];; rz[N] = 40.+rz[N];; ex[N] = r->Rndm(N);; ey[N] = r->Rndm(N);; ez[N] = 10*r->Rndm(N);; }. auto g = new TGraph2DErrors(np, rx, ry, rz, ex, ey, ez);; g->SetTitle(""TGraph2D with error bars: option \""ERR\"""");; g->SetFillColor(29);; g->SetMarkerSize(0.8);; g->SetMarkerStyle(20);; g->SetMarkerColor(kRed);; g->SetLineColor(kBlue-3);; g->SetLineWidth(2);; gPad->SetLogy(1);; g->Draw(""err p0"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraph2DErrors default constructor",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx:108,Availability,error,errors,108,"/** \class TGraph2DErrors; \ingroup Graphs; Graph 2D class with errors. A TGraph2DErrors is a TGraph2D with errors. It behaves like a TGraph2D and has; the same drawing options. The **""ERR""** drawing option allows to display the error bars. The; following example shows how to use it:. Begin_Macro(source); {; auto c = new TCanvas(""c"",""TGraph2DErrors example"",0,0,600,600);; Double_t P = 6.;; Int_t np = 200;. Double_t *rx=0, *ry=0, *rz=0;; Double_t *ex=0, *ey=0, *ez=0;. rx = new Double_t[np];; ry = new Double_t[np];; rz = new Double_t[np];; ex = new Double_t[np];; ey = new Double_t[np];; ez = new Double_t[np];. auto r = new TRandom();. for (Int_t N=0; N<np;N++) {; rx[N] = 2*P*(r->Rndm(N))-P;; ry[N] = 2*P*(r->Rndm(N))-P;; rz[N] = rx[N]*rx[N]-ry[N]*ry[N];; rx[N] = 10.+rx[N];; ry[N] = 10.+ry[N];; rz[N] = 40.+rz[N];; ex[N] = r->Rndm(N);; ey[N] = r->Rndm(N);; ez[N] = 10*r->Rndm(N);; }. auto g = new TGraph2DErrors(np, rx, ry, rz, ex, ey, ez);; g->SetTitle(""TGraph2D with error bars: option \""ERR\"""");; g->SetFillColor(29);; g->SetMarkerSize(0.8);; g->SetMarkerStyle(20);; g->SetMarkerColor(kRed);; g->SetLineColor(kBlue-3);; g->SetLineWidth(2);; gPad->SetLogy(1);; g->Draw(""err p0"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraph2DErrors default constructor",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx:229,Availability,error,error,229,"/** \class TGraph2DErrors; \ingroup Graphs; Graph 2D class with errors. A TGraph2DErrors is a TGraph2D with errors. It behaves like a TGraph2D and has; the same drawing options. The **""ERR""** drawing option allows to display the error bars. The; following example shows how to use it:. Begin_Macro(source); {; auto c = new TCanvas(""c"",""TGraph2DErrors example"",0,0,600,600);; Double_t P = 6.;; Int_t np = 200;. Double_t *rx=0, *ry=0, *rz=0;; Double_t *ex=0, *ey=0, *ez=0;. rx = new Double_t[np];; ry = new Double_t[np];; rz = new Double_t[np];; ex = new Double_t[np];; ey = new Double_t[np];; ez = new Double_t[np];. auto r = new TRandom();. for (Int_t N=0; N<np;N++) {; rx[N] = 2*P*(r->Rndm(N))-P;; ry[N] = 2*P*(r->Rndm(N))-P;; rz[N] = rx[N]*rx[N]-ry[N]*ry[N];; rx[N] = 10.+rx[N];; ry[N] = 10.+ry[N];; rz[N] = 40.+rz[N];; ex[N] = r->Rndm(N);; ey[N] = r->Rndm(N);; ez[N] = 10*r->Rndm(N);; }. auto g = new TGraph2DErrors(np, rx, ry, rz, ex, ey, ez);; g->SetTitle(""TGraph2D with error bars: option \""ERR\"""");; g->SetFillColor(29);; g->SetMarkerSize(0.8);; g->SetMarkerStyle(20);; g->SetMarkerColor(kRed);; g->SetLineColor(kBlue-3);; g->SetLineWidth(2);; gPad->SetLogy(1);; g->Draw(""err p0"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraph2DErrors default constructor",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx:976,Availability,error,error,976,"/** \class TGraph2DErrors; \ingroup Graphs; Graph 2D class with errors. A TGraph2DErrors is a TGraph2D with errors. It behaves like a TGraph2D and has; the same drawing options. The **""ERR""** drawing option allows to display the error bars. The; following example shows how to use it:. Begin_Macro(source); {; auto c = new TCanvas(""c"",""TGraph2DErrors example"",0,0,600,600);; Double_t P = 6.;; Int_t np = 200;. Double_t *rx=0, *ry=0, *rz=0;; Double_t *ex=0, *ey=0, *ez=0;. rx = new Double_t[np];; ry = new Double_t[np];; rz = new Double_t[np];; ex = new Double_t[np];; ey = new Double_t[np];; ez = new Double_t[np];. auto r = new TRandom();. for (Int_t N=0; N<np;N++) {; rx[N] = 2*P*(r->Rndm(N))-P;; ry[N] = 2*P*(r->Rndm(N))-P;; rz[N] = rx[N]*rx[N]-ry[N]*ry[N];; rx[N] = 10.+rx[N];; ry[N] = 10.+ry[N];; rz[N] = 40.+rz[N];; ex[N] = r->Rndm(N);; ey[N] = r->Rndm(N);; ez[N] = 10*r->Rndm(N);; }. auto g = new TGraph2DErrors(np, rx, ry, rz, ex, ey, ez);; g->SetTitle(""TGraph2D with error bars: option \""ERR\"""");; g->SetFillColor(29);; g->SetMarkerSize(0.8);; g->SetMarkerStyle(20);; g->SetMarkerColor(kRed);; g->SetLineColor(kBlue-3);; g->SetLineWidth(2);; gPad->SetLogy(1);; g->Draw(""err p0"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraph2DErrors default constructor",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx:8,Availability,error,error,8,"// copy error arrays",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx:103,Availability,error,errorbars,103,"////////////////////////////////////////////////////////////////////////////////; /// Add a point with errorbars to the graph.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx:154,Availability,error,error,154,"////////////////////////////////////////////////////////////////////////////////; /// This function is called by Graph2DFitChisquare.; /// It returns the error along X at point i.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx:154,Availability,error,error,154,"////////////////////////////////////////////////////////////////////////////////; /// This function is called by Graph2DFitChisquare.; /// It returns the error along Y at point i.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx:154,Availability,error,error,154,"////////////////////////////////////////////////////////////////////////////////; /// This function is called by Graph2DFitChisquare.; /// It returns the error along Z at point i.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx:113,Availability,error,errors,113,"////////////////////////////////////////////////////////////////////////////////; /// Returns the X maximum with errors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx:113,Availability,error,errors,113,"////////////////////////////////////////////////////////////////////////////////; /// Returns the X minimum with errors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx:113,Availability,error,errors,113,"////////////////////////////////////////////////////////////////////////////////; /// Returns the Y maximum with errors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx:113,Availability,error,errors,113,"////////////////////////////////////////////////////////////////////////////////; /// Returns the Y minimum with errors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx:113,Availability,error,errors,113,"////////////////////////////////////////////////////////////////////////////////; /// Returns the Z maximum with errors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx:113,Availability,error,errors,113,"////////////////////////////////////////////////////////////////////////////////; /// Returns the Z minimum with errors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx:105,Availability,error,errors,105,"////////////////////////////////////////////////////////////////////////////////; /// Print 2D graph and errors values.",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx:110,Availability,error,errors,110,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraph2DErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and errors are scaled; /// If option contains ""z"" the z values and errors are scaled; /// If option contains ""xyz"" all three x, y and z values and errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx:205,Availability,error,errors,205,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraph2DErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and errors are scaled; /// If option contains ""z"" the z values and errors are scaled; /// If option contains ""xyz"" all three x, y and z values and errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx:268,Availability,error,errors,268,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraph2DErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and errors are scaled; /// If option contains ""z"" the z values and errors are scaled; /// If option contains ""xyz"" all three x, y and z values and errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx:331,Availability,error,errors,331,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraph2DErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and errors are scaled; /// If option contains ""z"" the z values and errors are scaled; /// If option contains ""xyz"" all three x, y and z values and errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx:411,Availability,error,errors,411,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraph2DErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and errors are scaled; /// If option contains ""z"" the z values and errors are scaled; /// If option contains ""xyz"" all three x, y and z values and errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx:6,Energy Efficiency,allocate,allocate,6,"// re-allocate the object",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx:6,Energy Efficiency,allocate,allocate,6,"// re-allocate the object",MatchSource.CODE_COMMENT,hist/hist/src/TGraph2DErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:70,Availability,error,error,70,"/** \class TGraphAsymmErrors; \ingroup Graphs; TGraph with asymmetric error bars. The TGraphAsymmErrors painting is performed thanks to the TGraphPainter; class. All details about the various painting options are given in this class. The picture below gives an example:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""A Simple Graph with asymmetric error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; auto gr = new TGraphAsymmErrors(n,x,y,exl,exh,eyl,eyh);; gr->SetTitle(""TGraphAsymmErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraphAsymmErrors default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:354,Availability,error,error,354,"/** \class TGraphAsymmErrors; \ingroup Graphs; TGraph with asymmetric error bars. The TGraphAsymmErrors painting is performed thanks to the TGraphPainter; class. All details about the various painting options are given in this class. The picture below gives an example:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""A Simple Graph with asymmetric error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; auto gr = new TGraphAsymmErrors(n,x,y,exl,exh,eyl,eyh);; gr->SetTitle(""TGraphAsymmErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraphAsymmErrors default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:116,Performance,perform,performed,116,"/** \class TGraphAsymmErrors; \ingroup Graphs; TGraph with asymmetric error bars. The TGraphAsymmErrors painting is performed thanks to the TGraphPainter; class. All details about the various painting options are given in this class. The picture below gives an example:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""A Simple Graph with asymmetric error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; auto gr = new TGraphAsymmErrors(n,x,y,exl,exh,eyl,eyh);; gr->SetTitle(""TGraphAsymmErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraphAsymmErrors default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:325,Usability,Simpl,Simple,325,"/** \class TGraphAsymmErrors; \ingroup Graphs; TGraph with asymmetric error bars. The TGraphAsymmErrors painting is performed thanks to the TGraphPainter; class. All details about the various painting options are given in this class. The picture below gives an example:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""A Simple Graph with asymmetric error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; auto gr = new TGraphAsymmErrors(n,x,y,exl,exh,eyl,eyh);; gr->SetTitle(""TGraphAsymmErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraphAsymmErrors default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:232,Availability,error,errors,232,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with six vectors of floats in input; /// A grapherrors is built with the X coordinates taken from vx and Y coord from vy; /// and the errors from vectors vexl/h and veyl/h.; /// The number of points in the graph is the minimum of number of points; /// in vx and vy.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:233,Availability,error,errors,233,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with six vectors of doubles in input; /// A grapherrors is built with the X coordinates taken from vx and Y coord from vy; /// and the errors from vectors vexl/h and veyl/h.; /// The number of points in the graph is the minimum of number of points; /// in vx and vy.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:202,Availability,error,errors,202,"////////////////////////////////////////////////////////////////////////////////; /// TGraphAsymmErrors constructor importing its parameters from the TH1 object passed as argument; /// the low and high errors are set to the bin error of the histogram.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:228,Availability,error,error,228,"////////////////////////////////////////////////////////////////////////////////; /// TGraphAsymmErrors constructor importing its parameters from the TH1 object passed as argument; /// the low and high errors are set to the bin error of the histogram.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:652,Safety,avoid,avoid,652,"////////////////////////////////////////////////////////////////////////////////; /// TGraphAsymmErrors constructor reading input from filename; /// filename is assumed to contain at least 2 columns of numbers; ///; /// convention for format (default=`""%lg %lg %lg %lg %lg %lg""`); /// - format = `""%lg %lg""` read only 2 first columns into X, Y; /// - format = `""%lg %lg %lg %lg""` read only 4 first columns into X, Y, ELY, EHY; /// - format = `""%lg %lg %lg %lg %lg %lg""` read only 6 first columns into X, Y, EXL, EYH, EYL, EHY; ///; /// For files separated by a specific delimiter different from `' '` and `'\\t'` (e.g. `';'` in csv files); /// you can avoid using `%*s` to bypass this delimiter by explicitly specify the `""option"" argument,; /// e.g. `option="" \\t,;""` for columns of figures separated by any of these characters `(' ', '\\t', ',', ';')`; /// used once `(e.g. ""1;1"")` or in a combined way `("" 1;,;; 1"")`.; /// Note in that case, the instantiation is about 2 times slower.; /// In case a delimiter is specified, the format `""%lg %lg %lg""` will read X,Y,EX.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:45,Availability,error,error,45,"//first condition not to repeat the previous error message",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:51,Integrability,message,message,51,"//first condition not to repeat the previous error message",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:21,Modifiability,variab,variables,21,"// Initializing loop variables",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:86,Energy Efficiency,Allocate,Allocate,86,"////////////////////////////////////////////////////////////////////////////////; /// Allocate internal data structures for `size` points.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:114,Availability,error,errorbars,114,"////////////////////////////////////////////////////////////////////////////////; /// Add a point with asymmetric errorbars to the graph.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:151,Availability,Error,Errors,151,"////////////////////////////////////////////////////////////////////////////////; /// Apply a function to all data points \f$ y = f(x,y) \f$; ///; /// Errors are calculated as \f$ eyh = f(x,y+eyh)-f(x,y) \f$ and; /// \f$ eyl = f(x,y)-f(x,y-eyl) \f$; ///; /// Special treatment has to be applied for the functions where the; /// role of ""up"" and ""down"" is reversed.; ///; /// Function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:346,Availability,down,down,346,"////////////////////////////////////////////////////////////////////////////////; /// Apply a function to all data points \f$ y = f(x,y) \f$; ///; /// Errors are calculated as \f$ eyh = f(x,y+eyh)-f(x,y) \f$ and; /// \f$ eyl = f(x,y)-f(x,y-eyl) \f$; ///; /// Special treatment has to be applied for the functions where the; /// role of ""up"" and ""down"" is reversed.; ///; /// Function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:83,Availability,error,error,83,"// in the case of the functions like y-> -1*y the roles of the; // upper and lower error bars is reversed",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:2,Availability,error,error,2,"//error on x doesn't change",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:1742,Availability,error,errors,1742,"ext{effective entries} = \frac{(\sum w_{i})^{2}}{\sum w_{i}^{2}}; /// \f]; /// The points are assigned a x value at the center of each histogram bin.; /// The y values are \f$\text{eff} = \frac{\text{pass}}{\text{total}}\f$; /// for all options except for the; /// bayesian methods where the result depends on the chosen option.; ///; /// If the denominator becomes 0 or pass > total, the corresponding bin is; /// skipped.; ///; /// ### 2) calculating ratios of two Poisson means (option 'pois'):; ///; /// The two histograms are interpreted as independent Poisson processes and the ratio; /// \f[; /// \tau = \frac{n_{1}}{n_{2}} = \frac{\varepsilon}{1 - \varepsilon}; /// \f]; /// with \f$\varepsilon = \frac{n_{1}}{n_{1} + n_{2}}\f$.; /// The histogram 'pass' is interpreted as \f$n_{1}\f$ and the total histogram; /// is used for \f$n_{2}\f$.; ///; /// The (asymmetric) uncertainties of the Poisson ratio are linked to the uncertainties; /// of efficiency by a parameter transformation:; /// \f[; /// \Delta \tau_{low/up} = \frac{1}{(1 - \varepsilon)^{2}} \Delta \varepsilon_{low/up}; /// \f]; ///; /// The x errors span each histogram bin (lowedge ... lowedge+width); /// The y errors depend on the chosen statistic methode which can be determined; /// by the options given below. For a detailed description of the used statistic; /// calculations please have a look at the corresponding functions!; ///; /// Options:; /// - v : verbose mode: prints information about the number of used bins; /// and calculated efficiencies with their errors; /// - cl=x : determine the used confidence level (0<x<1) (default is 0.683); /// - cp : Clopper-Pearson interval (see TEfficiency::ClopperPearson); /// - w : Wilson interval (see TEfficiency::Wilson); /// - n : normal approximation propagation (see TEfficiency::Normal); /// - ac : Agresti-Coull interval (see TEfficiency::AgrestiCoull); /// - fc : Feldman-Cousins interval (see TEfficiency::FeldmanCousinsInterval); /// - midp : Lancaster mid-P inter",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:1812,Availability,error,errors,1812,"\f$; /// for all options except for the; /// bayesian methods where the result depends on the chosen option.; ///; /// If the denominator becomes 0 or pass > total, the corresponding bin is; /// skipped.; ///; /// ### 2) calculating ratios of two Poisson means (option 'pois'):; ///; /// The two histograms are interpreted as independent Poisson processes and the ratio; /// \f[; /// \tau = \frac{n_{1}}{n_{2}} = \frac{\varepsilon}{1 - \varepsilon}; /// \f]; /// with \f$\varepsilon = \frac{n_{1}}{n_{1} + n_{2}}\f$.; /// The histogram 'pass' is interpreted as \f$n_{1}\f$ and the total histogram; /// is used for \f$n_{2}\f$.; ///; /// The (asymmetric) uncertainties of the Poisson ratio are linked to the uncertainties; /// of efficiency by a parameter transformation:; /// \f[; /// \Delta \tau_{low/up} = \frac{1}{(1 - \varepsilon)^{2}} \Delta \varepsilon_{low/up}; /// \f]; ///; /// The x errors span each histogram bin (lowedge ... lowedge+width); /// The y errors depend on the chosen statistic methode which can be determined; /// by the options given below. For a detailed description of the used statistic; /// calculations please have a look at the corresponding functions!; ///; /// Options:; /// - v : verbose mode: prints information about the number of used bins; /// and calculated efficiencies with their errors; /// - cl=x : determine the used confidence level (0<x<1) (default is 0.683); /// - cp : Clopper-Pearson interval (see TEfficiency::ClopperPearson); /// - w : Wilson interval (see TEfficiency::Wilson); /// - n : normal approximation propagation (see TEfficiency::Normal); /// - ac : Agresti-Coull interval (see TEfficiency::AgrestiCoull); /// - fc : Feldman-Cousins interval (see TEfficiency::FeldmanCousinsInterval); /// - midp : Lancaster mid-P interval (see TEfficiency::MidPInterval); /// - b(a,b): bayesian interval using a prior probability ~Beta(a,b); a,b > 0; /// (see TEfficiency::Bayesian); /// - mode : use mode of posterior for Bayesian interval (default is mea",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:2170,Availability,error,errors,2170," ratios of two Poisson means (option 'pois'):; ///; /// The two histograms are interpreted as independent Poisson processes and the ratio; /// \f[; /// \tau = \frac{n_{1}}{n_{2}} = \frac{\varepsilon}{1 - \varepsilon}; /// \f]; /// with \f$\varepsilon = \frac{n_{1}}{n_{1} + n_{2}}\f$.; /// The histogram 'pass' is interpreted as \f$n_{1}\f$ and the total histogram; /// is used for \f$n_{2}\f$.; ///; /// The (asymmetric) uncertainties of the Poisson ratio are linked to the uncertainties; /// of efficiency by a parameter transformation:; /// \f[; /// \Delta \tau_{low/up} = \frac{1}{(1 - \varepsilon)^{2}} \Delta \varepsilon_{low/up}; /// \f]; ///; /// The x errors span each histogram bin (lowedge ... lowedge+width); /// The y errors depend on the chosen statistic methode which can be determined; /// by the options given below. For a detailed description of the used statistic; /// calculations please have a look at the corresponding functions!; ///; /// Options:; /// - v : verbose mode: prints information about the number of used bins; /// and calculated efficiencies with their errors; /// - cl=x : determine the used confidence level (0<x<1) (default is 0.683); /// - cp : Clopper-Pearson interval (see TEfficiency::ClopperPearson); /// - w : Wilson interval (see TEfficiency::Wilson); /// - n : normal approximation propagation (see TEfficiency::Normal); /// - ac : Agresti-Coull interval (see TEfficiency::AgrestiCoull); /// - fc : Feldman-Cousins interval (see TEfficiency::FeldmanCousinsInterval); /// - midp : Lancaster mid-P interval (see TEfficiency::MidPInterval); /// - b(a,b): bayesian interval using a prior probability ~Beta(a,b); a,b > 0; /// (see TEfficiency::Bayesian); /// - mode : use mode of posterior for Bayesian interval (default is mean); /// - shortest: use shortest interval (done by default if mode is set); /// - central: use central interval (done by default if mode is NOT set); /// - pois: interpret histograms as poisson ratio instead of efficiency; /// - e0 ",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:928,Integrability,depend,depends,928,"////////////////////////////////////////////////////////////////////////////////; /// Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total; ///; /// This method serves two purposes:; ///; /// ### 1) calculating efficiencies:; ///; /// The assumption is that the entries in ""pass"" are a subset of those in; /// ""total"". That is, we create an ""efficiency"" graph, where each entry is; /// between 0 and 1, inclusive.; ///; /// If the histograms are not filled with unit weights, the number of effective; /// entries is used to normalise the bin contents which might lead to wrong results.; /// \f[; /// \text{effective entries} = \frac{(\sum w_{i})^{2}}{\sum w_{i}^{2}}; /// \f]; /// The points are assigned a x value at the center of each histogram bin.; /// The y values are \f$\text{eff} = \frac{\text{pass}}{\text{total}}\f$; /// for all options except for the; /// bayesian methods where the result depends on the chosen option.; ///; /// If the denominator becomes 0 or pass > total, the corresponding bin is; /// skipped.; ///; /// ### 2) calculating ratios of two Poisson means (option 'pois'):; ///; /// The two histograms are interpreted as independent Poisson processes and the ratio; /// \f[; /// \tau = \frac{n_{1}}{n_{2}} = \frac{\varepsilon}{1 - \varepsilon}; /// \f]; /// with \f$\varepsilon = \frac{n_{1}}{n_{1} + n_{2}}\f$.; /// The histogram 'pass' is interpreted as \f$n_{1}\f$ and the total histogram; /// is used for \f$n_{2}\f$.; ///; /// The (asymmetric) uncertainties of the Poisson ratio are linked to the uncertainties; /// of efficiency by a parameter transformation:; /// \f[; /// \Delta \tau_{low/up} = \frac{1}{(1 - \varepsilon)^{2}} \Delta \varepsilon_{low/up}; /// \f]; ///; /// The x errors span each histogram bin (lowedge ... lowedge+width); /// The y errors depend on the chosen statistic methode which can be determined; /// by the options given below. For a detailed description of the used statistic; /// calculations please have a look ",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:1819,Integrability,depend,depend,1819,"\f$; /// for all options except for the; /// bayesian methods where the result depends on the chosen option.; ///; /// If the denominator becomes 0 or pass > total, the corresponding bin is; /// skipped.; ///; /// ### 2) calculating ratios of two Poisson means (option 'pois'):; ///; /// The two histograms are interpreted as independent Poisson processes and the ratio; /// \f[; /// \tau = \frac{n_{1}}{n_{2}} = \frac{\varepsilon}{1 - \varepsilon}; /// \f]; /// with \f$\varepsilon = \frac{n_{1}}{n_{1} + n_{2}}\f$.; /// The histogram 'pass' is interpreted as \f$n_{1}\f$ and the total histogram; /// is used for \f$n_{2}\f$.; ///; /// The (asymmetric) uncertainties of the Poisson ratio are linked to the uncertainties; /// of efficiency by a parameter transformation:; /// \f[; /// \Delta \tau_{low/up} = \frac{1}{(1 - \varepsilon)^{2}} \Delta \varepsilon_{low/up}; /// \f]; ///; /// The x errors span each histogram bin (lowedge ... lowedge+width); /// The y errors depend on the chosen statistic methode which can be determined; /// by the options given below. For a detailed description of the used statistic; /// calculations please have a look at the corresponding functions!; ///; /// Options:; /// - v : verbose mode: prints information about the number of used bins; /// and calculated efficiencies with their errors; /// - cl=x : determine the used confidence level (0<x<1) (default is 0.683); /// - cp : Clopper-Pearson interval (see TEfficiency::ClopperPearson); /// - w : Wilson interval (see TEfficiency::Wilson); /// - n : normal approximation propagation (see TEfficiency::Normal); /// - ac : Agresti-Coull interval (see TEfficiency::AgrestiCoull); /// - fc : Feldman-Cousins interval (see TEfficiency::FeldmanCousinsInterval); /// - midp : Lancaster mid-P interval (see TEfficiency::MidPInterval); /// - b(a,b): bayesian interval using a prior probability ~Beta(a,b); a,b > 0; /// (see TEfficiency::Bayesian); /// - mode : use mode of posterior for Bayesian interval (default is mea",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:251,Availability,Error,Error,251,"// we do not want to ignore the weights; // if (bEffective && (pass->GetSumw2()->fN == 0 || total->GetSumw2()->fN == 0) ) {; // Warning(""Divide"",""histogram have been computed with weights but the sum of weight squares are not stored in the histogram. Error calculation is performed ignoring the weights"");; // bEffective = false;; // }; //parse option",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:272,Performance,perform,performed,272,"// we do not want to ignore the weights; // if (bEffective && (pass->GetSumw2()->fN == 0 || total->GetSumw2()->fN == 0) ) {; // Warning(""Divide"",""histogram have been computed with weights but the sum of weight squares are not stored in the histogram. Error calculation is performed ignoring the weights"");; // bEffective = false;; // }; //parse option",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:26,Availability,error,errors,26,"// case of bins with zero errors",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:14,Availability,error,error,14,"// use normal error calculation using variance of MLE with weights (F.James 8.5.2); // this is the same formula used in ROOT for TH1::Divide(""B"")",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:31,Availability,error,errors,31,"//Set the point center and its errors",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:95,Deployability,release,release,95,"////////////////////////////////////////////////////////////////////////////////; /// Copy and release.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:91,Availability,error,errors,91,"////////////////////////////////////////////////////////////////////////////////; /// Copy errors from `fE***` to `arrays[***]`; /// or to `f***` Copy points.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:163,Availability,error,errors,163,"////////////////////////////////////////////////////////////////////////////////; /// Protected function to perform the merge operation of a graph with asymmetric errors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:108,Performance,perform,perform,108,"////////////////////////////////////////////////////////////////////////////////; /// Protected function to perform the merge operation of a graph with asymmetric errors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:107,Availability,error,error,107,"////////////////////////////////////////////////////////////////////////////////; /// Returns the combined error along X at point i by computing the average; /// of the lower and upper variance.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:107,Availability,error,error,107,"////////////////////////////////////////////////////////////////////////////////; /// Returns the combined error along Y at point i by computing the average; /// of the lower and upper variance.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:95,Availability,error,error,95,"////////////////////////////////////////////////////////////////////////////////; /// Get high error on X.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:94,Availability,error,error,94,"////////////////////////////////////////////////////////////////////////////////; /// Get low error on X.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:95,Availability,error,error,95,"////////////////////////////////////////////////////////////////////////////////; /// Get high error on Y.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:94,Availability,error,error,94,"////////////////////////////////////////////////////////////////////////////////; /// Get low error on Y.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:118,Availability,error,errors,118,"////////////////////////////////////////////////////////////////////////////////; /// Adds all graphs with asymmetric errors from the collection to this graph.; /// Returns the total number of points in the result or -1 in case of an error.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:234,Availability,error,error,234,"////////////////////////////////////////////////////////////////////////////////; /// Adds all graphs with asymmetric errors from the collection to this graph.; /// Returns the total number of points in the result or -1 in case of an error.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:102,Availability,error,errors,102,"////////////////////////////////////////////////////////////////////////////////; /// Print graph and errors values.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:110,Availability,error,errors,110,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraphAsymmErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and errors are scaled; /// If option contains ""xy"" both x and y values and errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:208,Availability,error,errors,208,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraphAsymmErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and errors are scaled; /// If option contains ""xy"" both x and y values and errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:271,Availability,error,errors,271,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraphAsymmErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and errors are scaled; /// If option contains ""xy"" both x and y values and errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:342,Availability,error,errors,342,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraphAsymmErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and errors are scaled; /// If option contains ""xy"" both x and y values and errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:6,Energy Efficiency,allocate,allocate,6,"// re-allocate the object",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:6,Energy Efficiency,allocate,allocate,6,"// re-allocate the object",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:6,Energy Efficiency,allocate,allocate,6,"// re-allocate the object",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:6,Energy Efficiency,allocate,allocate,6,"// re-allocate the object",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:6,Energy Efficiency,allocate,allocate,6,"// re-allocate the object",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update the fX, fY, fEXlow, fEXhigh, fEYlow and fEYhigh arrays with the sorted values.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:27,Availability,error,error,27,"// Fill the sorted X and Y error values based on the sorted indices",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:27,Availability,error,error,27,"// Copy the sorted X and Y error values back to the original arrays",MatchSource.CODE_COMMENT,hist/hist/src/TGraphAsymmErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:181,Availability,error,error,181,"////////////////////////////////////////////////////////////////////////////////; /** \class TGraphBentErrors; \ingroup Graphs; A TGraphBentErrors is a TGraph with bent, asymmetric error bars. The TGraphBentErrors painting is performed thanks to the TGraphPainter; class. All details about the various painting options are given in this class. The picture below gives an example:; Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""A Simple Graph with bent error bars"",200,10,700,500);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; auto gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""TGraphBentErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraphBentErrors default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:458,Availability,error,error,458,"////////////////////////////////////////////////////////////////////////////////; /** \class TGraphBentErrors; \ingroup Graphs; A TGraphBentErrors is a TGraph with bent, asymmetric error bars. The TGraphBentErrors painting is performed thanks to the TGraphPainter; class. All details about the various painting options are given in this class. The picture below gives an example:; Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""A Simple Graph with bent error bars"",200,10,700,500);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; auto gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""TGraphBentErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraphBentErrors default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:226,Performance,perform,performed,226,"////////////////////////////////////////////////////////////////////////////////; /** \class TGraphBentErrors; \ingroup Graphs; A TGraphBentErrors is a TGraph with bent, asymmetric error bars. The TGraphBentErrors painting is performed thanks to the TGraphPainter; class. All details about the various painting options are given in this class. The picture below gives an example:; Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""A Simple Graph with bent error bars"",200,10,700,500);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; auto gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""TGraphBentErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraphBentErrors default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:435,Usability,Simpl,Simple,435,"////////////////////////////////////////////////////////////////////////////////; /** \class TGraphBentErrors; \ingroup Graphs; A TGraphBentErrors is a TGraph with bent, asymmetric error bars. The TGraphBentErrors painting is performed thanks to the TGraphPainter; class. All details about the various painting options are given in this class. The picture below gives an example:; Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""A Simple Graph with bent error bars"",200,10,700,500);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; auto gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""TGraphBentErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraphBentErrors default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:108,Availability,error,errors,108,"////////////////////////////////////////////////////////////////////////////////; /// Add a point with bent errors to the graph.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:152,Availability,Error,Errors,152,"////////////////////////////////////////////////////////////////////////////////; /// Apply a function to all data points \f$ y = f(x,y) \f$.; ///; /// Errors are calculated as \f$ eyh = f(x,y+eyh)-f(x,y) \f$ and; /// \f$ eyl = f(x,y)-f(x,y-eyl) \f$.; ///; /// Special treatment has to be applied for the functions where the; /// role of ""up"" and ""down"" is reversed.; ///; /// Function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:348,Availability,down,down,348,"////////////////////////////////////////////////////////////////////////////////; /// Apply a function to all data points \f$ y = f(x,y) \f$.; ///; /// Errors are calculated as \f$ eyh = f(x,y+eyh)-f(x,y) \f$ and; /// \f$ eyl = f(x,y)-f(x,y-eyl) \f$.; ///; /// Special treatment has to be applied for the functions where the; /// role of ""up"" and ""down"" is reversed.; ///; /// Function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:83,Availability,error,error,83,"// in the case of the functions like y-> -1*y the roles of the; // upper and lower error bars is reversed",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:2,Availability,error,error,2,"//error on x doesn't change",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:95,Deployability,release,release,95,"////////////////////////////////////////////////////////////////////////////////; /// Copy and release.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:91,Availability,error,errors,91,"////////////////////////////////////////////////////////////////////////////////; /// Copy errors from `fE*** `to `arrays[***]`; /// or to `f***` Copy points.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:163,Availability,error,errors,163,"////////////////////////////////////////////////////////////////////////////////; /// Protected function to perform the merge operation of a graph with asymmetric errors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:108,Performance,perform,perform,108,"////////////////////////////////////////////////////////////////////////////////; /// Protected function to perform the merge operation of a graph with asymmetric errors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:101,Availability,error,error,101,"////////////////////////////////////////////////////////////////////////////////; /// It returns the error along X at point `i`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:101,Availability,error,error,101,"////////////////////////////////////////////////////////////////////////////////; /// It returns the error along Y at point `i`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:95,Availability,error,error,95,"////////////////////////////////////////////////////////////////////////////////; /// Get high error on X[i].",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:94,Availability,error,error,94,"////////////////////////////////////////////////////////////////////////////////; /// Get low error on X[i].",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:95,Availability,error,error,95,"////////////////////////////////////////////////////////////////////////////////; /// Get high error on Y[i].",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:94,Availability,error,error,94,"////////////////////////////////////////////////////////////////////////////////; /// Get low error on Y[i].",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:102,Availability,error,errors,102,"////////////////////////////////////////////////////////////////////////////////; /// Print graph and errors values.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:110,Availability,error,errors,110,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraphBentErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and errors are scaled; /// If option contains ""xy"" both x and y values and errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:207,Availability,error,errors,207,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraphBentErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and errors are scaled; /// If option contains ""xy"" both x and y values and errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:270,Availability,error,errors,270,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraphBentErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and errors are scaled; /// If option contains ""xy"" both x and y values and errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:341,Availability,error,errors,341,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraphBentErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and errors are scaled; /// If option contains ""xy"" both x and y values and errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:6,Energy Efficiency,allocate,allocate,6,"// re-allocate the object",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update the fX, fY, fEXlow, fEXhigh, fEXlowd, fEXhighd, fEYlow, fEYhigh, fEYlowd, ; /// and fEYhighd arrays with the sorted values.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:27,Availability,error,error,27,"// Fill the sorted X and Y error values based on the sorted indices",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:27,Availability,error,error,27,"// Copy the sorted X and Y error values back to the original arrays",MatchSource.CODE_COMMENT,hist/hist/src/TGraphBentErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx:91,Safety,avoid,avoid,91,"// Wrong zeros may appear when points sit on a regular grid.; // The following line try to avoid this problem.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphDelaunay.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx:185,Availability,error,errors,185,"// increase/decrease xm and ym a little to produce a point; // just outside the triangle (ensuring that the amount added will; // be large enough such that it won't be lost in rounding errors)",MatchSource.CODE_COMMENT,hist/hist/src/TGraphDelaunay.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx:122,Testability,test,test,122,"// is it a Delaunay triangle? (ie. are there any other points; // inside the circle that is defined by its vertices?); // test the triangle for Delaunay'ness; // loop over all other points testing each to see if it's; // inside the triangle's circle",MatchSource.CODE_COMMENT,hist/hist/src/TGraphDelaunay.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx:189,Testability,test,testing,189,"// is it a Delaunay triangle? (ie. are there any other points; // inside the circle that is defined by its vertices?); // test the triangle for Delaunay'ness; // loop over all other points testing each to see if it's; // inside the triangle's circle",MatchSource.CODE_COMMENT,hist/hist/src/TGraphDelaunay.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx:248,Testability,test,test,248,"// An easy first check is to see if point z is inside the triangle; // (if it's in the triangle it's also in the circle); // point z cannot be inside the triangle if it's further from (xx,yy); // than the furthest pointing making up the triangle - test this",MatchSource.CODE_COMMENT,hist/hist/src/TGraphDelaunay.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx:4,Availability,Error,Error,4,"/// Error(""Interpolate"", ""Should not get to here"");; // may as well soldier on",MatchSource.CODE_COMMENT,hist/hist/src/TGraphDelaunay.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx:68,Availability,error,errors,68,"// point z lies on the circumference of the circle (within rounding errors); // defined by the triangle, so there is potential for degeneracy in the; // triangle set (Delaunay triangulation does not give a unique way to split; // a polygon whose points lie on a circle into constituent triangles). Make; // a note of the additional point number.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphDelaunay.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx:144,Availability,Error,Error,144,"// but is degenerate with at least one other,; // haven't figured out what to do if more than 4 points are involved; /// if (ndegen > 1) {; /// Error(""Interpolate"",; /// ""More than 4 points lying on a circle. No decision making process formulated for triangulating this region in a non-arbitrary way %d %d %d %d"",; /// p,n,m,degen);; /// return thevalue;; /// }; // we have a quadrilateral which can be split down either diagonal; // (d<->f or o1<->o2) to form valid Delaunay triangles. Choose diagonal; // with highest average z-value. Whichever we choose we will have; // verified two triangles as good and two as bad, only note the good ones",MatchSource.CODE_COMMENT,hist/hist/src/TGraphDelaunay.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx:409,Availability,down,down,409,"// but is degenerate with at least one other,; // haven't figured out what to do if more than 4 points are involved; /// if (ndegen > 1) {; /// Error(""Interpolate"",; /// ""More than 4 points lying on a circle. No decision making process formulated for triangulating this region in a non-arbitrary way %d %d %d %d"",; /// p,n,m,degen);; /// return thevalue;; /// }; // we have a quadrilateral which can be split down either diagonal; // (d<->f or o1<->o2) to form valid Delaunay triangles. Choose diagonal; // with highest average z-value. Whichever we choose we will have; // verified two triangles as good and two as bad, only note the good ones",MatchSource.CODE_COMMENT,hist/hist/src/TGraphDelaunay.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx:118,Testability,test,tested,118,"////////////////////////////////////////////////////////////////////////////////; /// Defines the number of triangles tested for a Delaunay triangle; /// (number of iterations) before abandoning the search",MatchSource.CODE_COMMENT,hist/hist/src/TGraphDelaunay.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay2D.cxx:492,Availability,avail,available,492,"/** \class TGraphDelaunay2D; \ingroup Graphs; TGraphDelaunay2D generates a Delaunay triangulation of a TGraph2D.; The algorithm used for finding the triangles is based on [CDT](https://github.com/artem-ogre/CDT),; a C++ library for generating constraint or conforming Delaunay triangulations. The ROOT::Math::Delaunay2D class provides a wrapper for using; the **CDT** library. This implementation provides large improvements in terms of computational performances; compared to the legacy one available in TGraphDelaunay, and it is by default; used in TGraph2D. The old, legacy implementation can be still used when calling; `TGraph2D::GetHistogram` and `TGraph2D::Draw` with the `old` option. Definition of Delaunay triangulation (After B. Delaunay):; For a set S of points in the Euclidean plane, the unique triangulation DT(S); of S such that no point in S is inside the circumcircle of any triangle in; DT(S). DT(S) is the dual of the Voronoi diagram of S. If n is the number of; points in S, the Voronoi diagram of S is the partitioning of the plane; containing S points into n convex polygons such that each polygon contains; exactly one point and every point in a given polygon is closer to its; central point than to any other. A Voronoi diagram is sometimes also known; as a Dirichlet tessellation. \image html tgraph2d_delaunay.png. [This applet](http://www.cs.cornell.edu/Info/People/chew/Delaunay.html); gives a nice practical view of Delaunay triangulation and Voronoi diagram.; */; /// TGraphDelaunay2D normal constructor",MatchSource.CODE_COMMENT,hist/hist/src/TGraphDelaunay2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay2D.cxx:337,Integrability,wrap,wrapper,337,"/** \class TGraphDelaunay2D; \ingroup Graphs; TGraphDelaunay2D generates a Delaunay triangulation of a TGraph2D.; The algorithm used for finding the triangles is based on [CDT](https://github.com/artem-ogre/CDT),; a C++ library for generating constraint or conforming Delaunay triangulations. The ROOT::Math::Delaunay2D class provides a wrapper for using; the **CDT** library. This implementation provides large improvements in terms of computational performances; compared to the legacy one available in TGraphDelaunay, and it is by default; used in TGraph2D. The old, legacy implementation can be still used when calling; `TGraph2D::GetHistogram` and `TGraph2D::Draw` with the `old` option. Definition of Delaunay triangulation (After B. Delaunay):; For a set S of points in the Euclidean plane, the unique triangulation DT(S); of S such that no point in S is inside the circumcircle of any triangle in; DT(S). DT(S) is the dual of the Voronoi diagram of S. If n is the number of; points in S, the Voronoi diagram of S is the partitioning of the plane; containing S points into n convex polygons such that each polygon contains; exactly one point and every point in a given polygon is closer to its; central point than to any other. A Voronoi diagram is sometimes also known; as a Dirichlet tessellation. \image html tgraph2d_delaunay.png. [This applet](http://www.cs.cornell.edu/Info/People/chew/Delaunay.html); gives a nice practical view of Delaunay triangulation and Voronoi diagram.; */; /// TGraphDelaunay2D normal constructor",MatchSource.CODE_COMMENT,hist/hist/src/TGraphDelaunay2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay2D.cxx:451,Performance,perform,performances,451,"/** \class TGraphDelaunay2D; \ingroup Graphs; TGraphDelaunay2D generates a Delaunay triangulation of a TGraph2D.; The algorithm used for finding the triangles is based on [CDT](https://github.com/artem-ogre/CDT),; a C++ library for generating constraint or conforming Delaunay triangulations. The ROOT::Math::Delaunay2D class provides a wrapper for using; the **CDT** library. This implementation provides large improvements in terms of computational performances; compared to the legacy one available in TGraphDelaunay, and it is by default; used in TGraph2D. The old, legacy implementation can be still used when calling; `TGraph2D::GetHistogram` and `TGraph2D::Draw` with the `old` option. Definition of Delaunay triangulation (After B. Delaunay):; For a set S of points in the Euclidean plane, the unique triangulation DT(S); of S such that no point in S is inside the circumcircle of any triangle in; DT(S). DT(S) is the dual of the Voronoi diagram of S. If n is the number of; points in S, the Voronoi diagram of S is the partitioning of the plane; containing S points into n convex polygons such that each polygon contains; exactly one point and every point in a given polygon is closer to its; central point than to any other. A Voronoi diagram is sometimes also known; as a Dirichlet tessellation. \image html tgraph2d_delaunay.png. [This applet](http://www.cs.cornell.edu/Info/People/chew/Delaunay.html); gives a nice practical view of Delaunay triangulation and Voronoi diagram.; */; /// TGraphDelaunay2D normal constructor",MatchSource.CODE_COMMENT,hist/hist/src/TGraphDelaunay2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:156,Availability,error,error,156,"////////////////////////////////////////////////////////////////////////////////; /** \class TGraphErrors; \ingroup Graphs; A TGraphErrors is a TGraph with error bars. The TGraphErrors painting is performed thanks to the TGraphPainter; class. All details about the various painting options are given in this class. The picture below gives an example:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; auto gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetTitle(""TGraphErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraphErrors default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:424,Availability,error,error,424,"////////////////////////////////////////////////////////////////////////////////; /** \class TGraphErrors; \ingroup Graphs; A TGraphErrors is a TGraph with error bars. The TGraphErrors painting is performed thanks to the TGraphPainter; class. All details about the various painting options are given in this class. The picture below gives an example:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; auto gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetTitle(""TGraphErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraphErrors default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:197,Performance,perform,performed,197,"////////////////////////////////////////////////////////////////////////////////; /** \class TGraphErrors; \ingroup Graphs; A TGraphErrors is a TGraph with error bars. The TGraphErrors painting is performed thanks to the TGraphPainter; class. All details about the various painting options are given in this class. The picture below gives an example:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; auto gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetTitle(""TGraphErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraphErrors default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:406,Usability,Simpl,Simple,406,"////////////////////////////////////////////////////////////////////////////////; /** \class TGraphErrors; \ingroup Graphs; A TGraphErrors is a TGraph with error bars. The TGraphErrors painting is performed thanks to the TGraphPainter; class. All details about the various painting options are given in this class. The picture below gives an example:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; auto gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetTitle(""TGraphErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraphErrors default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:239,Availability,error,errors,239,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with four vectors of floats in input.; ///; /// A grapherrors is built with the X coordinates taken from vx and Y coord from vy; /// and the errors from vectors vex and vey.; /// The number of points in the graph is the minimum of number of points; /// in vx and vy.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:240,Availability,error,errors,240,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with four vectors of doubles in input.; ///; /// A grapherrors is built with the X coordinates taken from vx and Y coord from vy; /// and the errors from vectors vex and vey.; /// The number of points in the graph is the minimum of number of points; /// in vx and vy.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:610,Safety,avoid,avoid,610,"////////////////////////////////////////////////////////////////////////////////; /// GraphErrors constructor reading input from `filename`.; ///; /// `filename` is assumed to contain at least 2 columns of numbers; ///; /// Convention for format (default=`""%lg %lg %lg %lg""`); ///; /// - format = `%lg %lg` read only 2 first columns into X,Y; /// - format = `%lg %lg %lg` read only 3 first columns into X,Y and EY; /// - format = `%lg %lg %lg %lg` read only 4 first columns into X,Y,EX,EY.; ///; /// For files separated by a specific delimiter different from ' ' and `\\t` (e.g. `;` in csv files); /// you can avoid using `%*s` to bypass this delimiter by explicitly specify the `option` argument,; /// e.g. `option="" \\t,;""` for columns of figures separated by any of these characters (`' ', '\\t', ',', ';'`); /// used once (e.g. `""1;1""`) or in a combined way (`"" 1;,;; 1""`).; ///; /// Note in that case, the instantiation is about 2 times slower.; /// In case a delimiter is specified, the format `""%lg %lg %lg""` will read X,Y,EX.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:45,Availability,error,error,45,"//first condition not to repeat the previous error message",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:51,Integrability,message,message,51,"//first condition not to repeat the previous error message",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:21,Modifiability,variab,variables,21,"// Initializing loop variables",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:103,Availability,error,errorbars,103,"////////////////////////////////////////////////////////////////////////////////; /// Add a point with errorbars to the graph.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:158,Availability,error,error,158,"////////////////////////////////////////////////////////////////////////////////; /// Apply function to all the data points \f$ y = f(x,y) \f$.; ///; /// The error is calculated as \f$ ey=(f(x,y+ey)-f(x,y-ey))/2 \f$.; /// This is the same as \f$ error(fy) = df/dy * ey \f$ for small errors.; ///; /// For generic functions the symmetric errors might become non-symmetric; /// and are averaged here. Use TGraphAsymmErrors if desired.; ///; /// Error on \f$ x \f$ doesn't change.; ///; /// function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:246,Availability,error,error,246,"////////////////////////////////////////////////////////////////////////////////; /// Apply function to all the data points \f$ y = f(x,y) \f$.; ///; /// The error is calculated as \f$ ey=(f(x,y+ey)-f(x,y-ey))/2 \f$.; /// This is the same as \f$ error(fy) = df/dy * ey \f$ for small errors.; ///; /// For generic functions the symmetric errors might become non-symmetric; /// and are averaged here. Use TGraphAsymmErrors if desired.; ///; /// Error on \f$ x \f$ doesn't change.; ///; /// function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:283,Availability,error,errors,283,"////////////////////////////////////////////////////////////////////////////////; /// Apply function to all the data points \f$ y = f(x,y) \f$.; ///; /// The error is calculated as \f$ ey=(f(x,y+ey)-f(x,y-ey))/2 \f$.; /// This is the same as \f$ error(fy) = df/dy * ey \f$ for small errors.; ///; /// For generic functions the symmetric errors might become non-symmetric; /// and are averaged here. Use TGraphAsymmErrors if desired.; ///; /// Error on \f$ x \f$ doesn't change.; ///; /// function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:337,Availability,error,errors,337,"////////////////////////////////////////////////////////////////////////////////; /// Apply function to all the data points \f$ y = f(x,y) \f$.; ///; /// The error is calculated as \f$ ey=(f(x,y+ey)-f(x,y-ey))/2 \f$.; /// This is the same as \f$ error(fy) = df/dy * ey \f$ for small errors.; ///; /// For generic functions the symmetric errors might become non-symmetric; /// and are averaged here. Use TGraphAsymmErrors if desired.; ///; /// Error on \f$ x \f$ doesn't change.; ///; /// function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:443,Availability,Error,Error,443,"////////////////////////////////////////////////////////////////////////////////; /// Apply function to all the data points \f$ y = f(x,y) \f$.; ///; /// The error is calculated as \f$ ey=(f(x,y+ey)-f(x,y-ey))/2 \f$.; /// This is the same as \f$ error(fy) = df/dy * ey \f$ for small errors.; ///; /// For generic functions the symmetric errors might become non-symmetric; /// and are averaged here. Use TGraphAsymmErrors if desired.; ///; /// Error on \f$ x \f$ doesn't change.; ///; /// function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:158,Availability,error,error,158,"////////////////////////////////////////////////////////////////////////////////; /// Apply function to all the data points \f$ x = f(x,y) \f$.; ///; /// The error is calculated as \f$ ex=(f(x+ex,y)-f(x-ex,y))/2 \f$.; /// This is the same as \f$ error(fx) = df/dx * ex \f$ for small errors.; ///; /// For generic functions the symmetric errors might become non-symmetric; /// and are averaged here. Use TGraphAsymmErrors if desired.; ///; /// Error on \f$ y \f$ doesn't change.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:246,Availability,error,error,246,"////////////////////////////////////////////////////////////////////////////////; /// Apply function to all the data points \f$ x = f(x,y) \f$.; ///; /// The error is calculated as \f$ ex=(f(x+ex,y)-f(x-ex,y))/2 \f$.; /// This is the same as \f$ error(fx) = df/dx * ex \f$ for small errors.; ///; /// For generic functions the symmetric errors might become non-symmetric; /// and are averaged here. Use TGraphAsymmErrors if desired.; ///; /// Error on \f$ y \f$ doesn't change.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:283,Availability,error,errors,283,"////////////////////////////////////////////////////////////////////////////////; /// Apply function to all the data points \f$ x = f(x,y) \f$.; ///; /// The error is calculated as \f$ ex=(f(x+ex,y)-f(x-ex,y))/2 \f$.; /// This is the same as \f$ error(fx) = df/dx * ex \f$ for small errors.; ///; /// For generic functions the symmetric errors might become non-symmetric; /// and are averaged here. Use TGraphAsymmErrors if desired.; ///; /// Error on \f$ y \f$ doesn't change.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:337,Availability,error,errors,337,"////////////////////////////////////////////////////////////////////////////////; /// Apply function to all the data points \f$ x = f(x,y) \f$.; ///; /// The error is calculated as \f$ ex=(f(x+ex,y)-f(x-ex,y))/2 \f$.; /// This is the same as \f$ error(fx) = df/dx * ex \f$ for small errors.; ///; /// For generic functions the symmetric errors might become non-symmetric; /// and are averaged here. Use TGraphAsymmErrors if desired.; ///; /// Error on \f$ y \f$ doesn't change.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:443,Availability,Error,Error,443,"////////////////////////////////////////////////////////////////////////////////; /// Apply function to all the data points \f$ x = f(x,y) \f$.; ///; /// The error is calculated as \f$ ex=(f(x+ex,y)-f(x-ex,y))/2 \f$.; /// This is the same as \f$ error(fx) = df/dx * ex \f$ for small errors.; ///; /// For generic functions the symmetric errors might become non-symmetric; /// and are averaged here. Use TGraphAsymmErrors if desired.; ///; /// Error on \f$ y \f$ doesn't change.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:95,Deployability,release,release,95,"////////////////////////////////////////////////////////////////////////////////; /// Copy and release.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:91,Availability,error,errors,91,"////////////////////////////////////////////////////////////////////////////////; /// Copy errors from `fEX` and `fEY` to `arrays[0]` and `arrays[1]`; /// or to `fEX` and `fEY` if `arrays == 0` and `ibegin != iend`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:98,Energy Efficiency,allocate,allocate,98,"////////////////////////////////////////////////////////////////////////////////; /// Constructor allocate.; ///; /// Note: This function should be called only from the constructor; /// since it does not delete previously existing arrays.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:152,Availability,error,errors,152,"////////////////////////////////////////////////////////////////////////////////; /// Protected function to perform the merge operation of a graph with errors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:108,Performance,perform,perform,108,"////////////////////////////////////////////////////////////////////////////////; /// Protected function to perform the merge operation of a graph with errors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:101,Availability,error,error,101,"////////////////////////////////////////////////////////////////////////////////; /// It returns the error along X at point `i`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:101,Availability,error,error,101,"////////////////////////////////////////////////////////////////////////////////; /// It returns the error along Y at point `i`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:101,Availability,error,error,101,"////////////////////////////////////////////////////////////////////////////////; /// It returns the error along X at point `i`. For TGraphErrors this method is; /// the same as GetErrorX.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:101,Availability,error,error,101,"////////////////////////////////////////////////////////////////////////////////; /// It returns the error along X at point `i`. For TGraphErrors this method is; /// the same as GetErrorX.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:101,Availability,error,error,101,"////////////////////////////////////////////////////////////////////////////////; /// It returns the error along Y at point `i`. For TGraphErrors this method is; /// the same as GetErrorY.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:101,Availability,error,error,101,"////////////////////////////////////////////////////////////////////////////////; /// It returns the error along Y at point `i`. For TGraphErrors this method is; /// the same as GetErrorY.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:107,Availability,error,errors,107,"////////////////////////////////////////////////////////////////////////////////; /// Adds all graphs with errors from the collection to this graph.; /// Returns the total number of points in the result or -1 in case of an error.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:223,Availability,error,error,223,"////////////////////////////////////////////////////////////////////////////////; /// Adds all graphs with errors from the collection to this graph.; /// Returns the total number of points in the result or -1 in case of an error.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:102,Availability,error,errors,102,"////////////////////////////////////////////////////////////////////////////////; /// Print graph and errors values.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:110,Availability,error,errors,110,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraphErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and errors are scaled; /// If option contains ""xy"" both x and y values and errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:203,Availability,error,errors,203,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraphErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and errors are scaled; /// If option contains ""xy"" both x and y values and errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:266,Availability,error,errors,266,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraphErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and errors are scaled; /// If option contains ""xy"" both x and y values and errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:337,Availability,error,errors,337,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraphErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and errors are scaled; /// If option contains ""xy"" both x and y values and errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:6,Energy Efficiency,allocate,allocate,6,"// re-allocate the object",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update the fX, fY, fEX, and fEY arrays with the sorted values.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:27,Availability,error,error,27,"// Fill the sorted X and Y error values based on the sorted indices",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:27,Availability,error,error,27,"// Copy the sorted X and Y error values back to the original arrays",MatchSource.CODE_COMMENT,hist/hist/src/TGraphErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:70,Availability,error,error,70,"/** \class TGraphMultiErrors; \ingroup Graphs; TGraph with asymmetric error bars and multiple y error dimensions. The TGraphMultiErrors painting is performed thanks to the TGraphPainter; class. All details about the various painting options are given in this class. The picture below gives an example:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"", ""A Simple Graph with multiple y-errors"", 200, 10, 700, 500);; c1->SetGrid();; c1->GetFrame()->SetBorderSize(12);; const Int_t np = 5;; Double_t x[np] = {0, 1, 2, 3, 4};; Double_t y[np] = {0, 2, 4, 1, 3};; Double_t exl[np] = {0.3, 0.3, 0.3, 0.3, 0.3};; Double_t exh[np] = {0.3, 0.3, 0.3, 0.3, 0.3};; Double_t eylstat[np] = {1, 0.5, 1, 0.5, 1};; Double_t eyhstat[np] = {0.5, 1, 0.5, 1, 2};; Double_t eylsys[np] = {0.5, 0.4, 0.8, 0.3, 1.2};; Double_t eyhsys[np] = {0.6, 0.7, 0.6, 0.4, 0.8};; auto gme = new TGraphMultiErrors(""gme"", ""TGraphMultiErrors Example"", np, x, y, exl, exh, eylstat, eyhstat);; gme->AddYError(np, eylsys, eyhsys);; gme->SetMarkerStyle(20);; gme->SetLineColor(kRed);; gme->GetAttLine(0)->SetLineColor(kRed);; gme->GetAttLine(1)->SetLineColor(kBlue);; gme->GetAttFill(1)->SetFillStyle(0);; gme->Draw(""APS ; Z ; 5 s=0.5"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:96,Availability,error,error,96,"/** \class TGraphMultiErrors; \ingroup Graphs; TGraph with asymmetric error bars and multiple y error dimensions. The TGraphMultiErrors painting is performed thanks to the TGraphPainter; class. All details about the various painting options are given in this class. The picture below gives an example:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"", ""A Simple Graph with multiple y-errors"", 200, 10, 700, 500);; c1->SetGrid();; c1->GetFrame()->SetBorderSize(12);; const Int_t np = 5;; Double_t x[np] = {0, 1, 2, 3, 4};; Double_t y[np] = {0, 2, 4, 1, 3};; Double_t exl[np] = {0.3, 0.3, 0.3, 0.3, 0.3};; Double_t exh[np] = {0.3, 0.3, 0.3, 0.3, 0.3};; Double_t eylstat[np] = {1, 0.5, 1, 0.5, 1};; Double_t eyhstat[np] = {0.5, 1, 0.5, 1, 2};; Double_t eylsys[np] = {0.5, 0.4, 0.8, 0.3, 1.2};; Double_t eyhsys[np] = {0.6, 0.7, 0.6, 0.4, 0.8};; auto gme = new TGraphMultiErrors(""gme"", ""TGraphMultiErrors Example"", np, x, y, exl, exh, eylstat, eyhstat);; gme->AddYError(np, eylsys, eyhsys);; gme->SetMarkerStyle(20);; gme->SetLineColor(kRed);; gme->GetAttLine(0)->SetLineColor(kRed);; gme->GetAttLine(1)->SetLineColor(kBlue);; gme->GetAttFill(1)->SetFillStyle(0);; gme->Draw(""APS ; Z ; 5 s=0.5"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:387,Availability,error,errors,387,"/** \class TGraphMultiErrors; \ingroup Graphs; TGraph with asymmetric error bars and multiple y error dimensions. The TGraphMultiErrors painting is performed thanks to the TGraphPainter; class. All details about the various painting options are given in this class. The picture below gives an example:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"", ""A Simple Graph with multiple y-errors"", 200, 10, 700, 500);; c1->SetGrid();; c1->GetFrame()->SetBorderSize(12);; const Int_t np = 5;; Double_t x[np] = {0, 1, 2, 3, 4};; Double_t y[np] = {0, 2, 4, 1, 3};; Double_t exl[np] = {0.3, 0.3, 0.3, 0.3, 0.3};; Double_t exh[np] = {0.3, 0.3, 0.3, 0.3, 0.3};; Double_t eylstat[np] = {1, 0.5, 1, 0.5, 1};; Double_t eyhstat[np] = {0.5, 1, 0.5, 1, 2};; Double_t eylsys[np] = {0.5, 0.4, 0.8, 0.3, 1.2};; Double_t eyhsys[np] = {0.6, 0.7, 0.6, 0.4, 0.8};; auto gme = new TGraphMultiErrors(""gme"", ""TGraphMultiErrors Example"", np, x, y, exl, exh, eylstat, eyhstat);; gme->AddYError(np, eylsys, eyhsys);; gme->SetMarkerStyle(20);; gme->SetLineColor(kRed);; gme->GetAttLine(0)->SetLineColor(kRed);; gme->GetAttLine(1)->SetLineColor(kBlue);; gme->GetAttFill(1)->SetFillStyle(0);; gme->Draw(""APS ; Z ; 5 s=0.5"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:148,Performance,perform,performed,148,"/** \class TGraphMultiErrors; \ingroup Graphs; TGraph with asymmetric error bars and multiple y error dimensions. The TGraphMultiErrors painting is performed thanks to the TGraphPainter; class. All details about the various painting options are given in this class. The picture below gives an example:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"", ""A Simple Graph with multiple y-errors"", 200, 10, 700, 500);; c1->SetGrid();; c1->GetFrame()->SetBorderSize(12);; const Int_t np = 5;; Double_t x[np] = {0, 1, 2, 3, 4};; Double_t y[np] = {0, 2, 4, 1, 3};; Double_t exl[np] = {0.3, 0.3, 0.3, 0.3, 0.3};; Double_t exh[np] = {0.3, 0.3, 0.3, 0.3, 0.3};; Double_t eylstat[np] = {1, 0.5, 1, 0.5, 1};; Double_t eyhstat[np] = {0.5, 1, 0.5, 1, 2};; Double_t eylsys[np] = {0.5, 0.4, 0.8, 0.3, 1.2};; Double_t eyhsys[np] = {0.6, 0.7, 0.6, 0.4, 0.8};; auto gme = new TGraphMultiErrors(""gme"", ""TGraphMultiErrors Example"", np, x, y, exl, exh, eylstat, eyhstat);; gme->AddYError(np, eylsys, eyhsys);; gme->SetMarkerStyle(20);; gme->SetLineColor(kRed);; gme->GetAttLine(0)->SetLineColor(kRed);; gme->GetAttLine(1)->SetLineColor(kBlue);; gme->GetAttFill(1)->SetFillStyle(0);; gme->Draw(""APS ; Z ; 5 s=0.5"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:358,Usability,Simpl,Simple,358,"/** \class TGraphMultiErrors; \ingroup Graphs; TGraph with asymmetric error bars and multiple y error dimensions. The TGraphMultiErrors painting is performed thanks to the TGraphPainter; class. All details about the various painting options are given in this class. The picture below gives an example:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"", ""A Simple Graph with multiple y-errors"", 200, 10, 700, 500);; c1->SetGrid();; c1->GetFrame()->SetBorderSize(12);; const Int_t np = 5;; Double_t x[np] = {0, 1, 2, 3, 4};; Double_t y[np] = {0, 2, 4, 1, 3};; Double_t exl[np] = {0.3, 0.3, 0.3, 0.3, 0.3};; Double_t exh[np] = {0.3, 0.3, 0.3, 0.3, 0.3};; Double_t eylstat[np] = {1, 0.5, 1, 0.5, 1};; Double_t eyhstat[np] = {0.5, 1, 0.5, 1, 2};; Double_t eylsys[np] = {0.5, 0.4, 0.8, 0.3, 1.2};; Double_t eyhsys[np] = {0.6, 0.7, 0.6, 0.4, 0.8};; auto gme = new TGraphMultiErrors(""gme"", ""TGraphMultiErrors Example"", np, x, y, exl, exh, eylstat, eyhstat);; gme->AddYError(np, eylsys, eyhsys);; gme->SetMarkerStyle(20);; gme->SetLineColor(kRed);; gme->GetAttLine(0)->SetLineColor(kRed);; gme->GetAttLine(1)->SetLineColor(kBlue);; gme->GetAttFill(1)->SetFillStyle(0);; gme->Draw(""APS ; Z ; 5 s=0.5"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:147,Availability,error,errors,147,"////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors normal constructor with np points and ne y-errors.; ///; /// All values are initialized to 0.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:168,Availability,error,errors,168,"////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors normal constructor with `name`, `title`, `np` points and `ne` y-errors.; ///; /// All values are initialized to 0.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:155,Availability,error,error,155,"////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors normal constructor with `np` points and a single y-error.; ///; /// The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors.; /// If `exL`,`exH` or `eyL`,`exH` are NULL, the corresponding values are preset to zero.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:172,Availability,error,error,172,"////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors normal constructor with `name`, `title`, `np` points and a single y-error.; ///; /// If `exL`,`exH` or `eyL`,`eyH` are NULL, the corresponding values are preset to zero.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:155,Availability,error,error,155,"////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors normal constructor with `np` points and a single y-error.; ///; /// The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors.; /// If `exL`,`exH` or `eyL`,`exH` are NULL, the corresponding values are preset to zero.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:168,Availability,error,error,168,"////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors normal constructor with name, title, `np` points and a single y-error.; ///; /// If `exL`,`exH` or `eyL`,`exH` are NULL, the corresponding values are preset to zero.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:151,Availability,error,errors,151,"////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors normal constructor with `np` points and `ne` y-errors.; ///; /// If `exL`,`exH` are NULL, the corresponding values are preset to zero.; /// The multiple y-errors are passed as std::vectors of std::vectors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:259,Availability,error,errors,259,"////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors normal constructor with `np` points and `ne` y-errors.; ///; /// If `exL`,`exH` are NULL, the corresponding values are preset to zero.; /// The multiple y-errors are passed as std::vectors of std::vectors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:164,Availability,error,errors,164,"////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors normal constructor with name, title, `np` points and `ne` y-errors.; ///; /// If `exL`,`exH` are NULL, the corresponding values are preset to zero.; /// The multiple y-errors are passed as std::vectors of std::vectors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:272,Availability,error,errors,272,"////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors normal constructor with name, title, `np` points and `ne` y-errors.; ///; /// If `exL`,`exH` are NULL, the corresponding values are preset to zero.; /// The multiple y-errors are passed as std::vectors of std::vectors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:151,Availability,error,errors,151,"////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors normal constructor with `np` points and `ne` y-errors.; ///; /// If `exL`,`exH` are NULL, the corresponding values are preset to zero.; /// The multiple y-errors are passed as std::vectors of std::vectors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:259,Availability,error,errors,259,"////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors normal constructor with `np` points and `ne` y-errors.; ///; /// If `exL`,`exH` are NULL, the corresponding values are preset to zero.; /// The multiple y-errors are passed as std::vectors of std::vectors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:168,Availability,error,errors,168,"////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors normal constructor with `name`, `title`, `np` points and `ne` y-errors.; ///; /// If `exL`,`exH` are NULL, the corresponding values are preset to zero.; /// The multiple y-errors are passed as std::vectors of std::vectors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:276,Availability,error,errors,276,"////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors normal constructor with `name`, `title`, `np` points and `ne` y-errors.; ///; /// If `exL`,`exH` are NULL, the corresponding values are preset to zero.; /// The multiple y-errors are passed as std::vectors of std::vectors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:151,Availability,error,errors,151,"////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors normal constructor with `np` points and `ne` y-errors.; ///; /// If `exL`,`exH` are NULL, the corresponding values are preset to zero.; /// The multiple y-errors are passed as std::vectors of TArrayF objects.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:259,Availability,error,errors,259,"////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors normal constructor with `np` points and `ne` y-errors.; ///; /// If `exL`,`exH` are NULL, the corresponding values are preset to zero.; /// The multiple y-errors are passed as std::vectors of TArrayF objects.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:164,Availability,error,errors,164,"////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors normal constructor with name, title, `np` points and `ne` y-errors.; ///; /// If `exL`,`exH` are NULL, the corresponding values are preset to zero.; /// The multiple y-errors are passed as std::vectors of TArrayF objects.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:272,Availability,error,errors,272,"////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors normal constructor with name, title, `np` points and `ne` y-errors.; ///; /// If `exL`,`exH` are NULL, the corresponding values are preset to zero.; /// The multiple y-errors are passed as std::vectors of TArrayF objects.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:151,Availability,error,errors,151,"////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors normal constructor with `np` points and `ne` y-errors.; ///; /// If `exL`,`exH` are NULL, the corresponding values are preset to zero.; /// The multiple y-errors are passed as std::vectors of TArrayD objects.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:259,Availability,error,errors,259,"////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors normal constructor with `np` points and `ne` y-errors.; ///; /// If `exL`,`exH` are NULL, the corresponding values are preset to zero.; /// The multiple y-errors are passed as std::vectors of TArrayD objects.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:168,Availability,error,errors,168,"////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors normal constructor with `name`, `title`, `np` points and `ne` y-errors.; ///; /// If `exL`,`exH` are NULL, the corresponding values are preset to zero.; /// The multiple y-errors are passed as std::vectors of TArrayD objects.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:276,Availability,error,errors,276,"////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors normal constructor with `name`, `title`, `np` points and `ne` y-errors.; ///; /// If `exL`,`exH` are NULL, the corresponding values are preset to zero.; /// The multiple y-errors are passed as std::vectors of TArrayD objects.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:149,Availability,error,error,149,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with six vectors of floats in input and a single y error dimension.; /// The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors.; /// A grapherrors is built with the X coordinates taken from `tvX` the Y coordinates from `tvY`; /// and the errors from vectors `tvExL`, `tvExH` and `tvEyL`, `tvEyH`.; /// The number of points in the graph is the minimum of number of points; /// in `tvX` and `tvY`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:379,Availability,error,errors,379,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with six vectors of floats in input and a single y error dimension.; /// The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors.; /// A grapherrors is built with the X coordinates taken from `tvX` the Y coordinates from `tvY`; /// and the errors from vectors `tvExL`, `tvExH` and `tvEyL`, `tvEyH`.; /// The number of points in the graph is the minimum of number of points; /// in `tvX` and `tvY`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:150,Availability,error,error,150,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with six vectors of doubles in input and a single y error dimension.; /// The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors.; /// A grapherrors is built with the X coordinates taken from `tvX` the Y coordinates from `tvY`; /// and the errors from vectors `tvExL`, `tvExH` and `tvEyL`, `tvEyH`.; /// The number of points in the graph is the minimum of number of points; /// in `tvX` and `tvY`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:380,Availability,error,errors,380,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with six vectors of doubles in input and a single y error dimension.; /// The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors.; /// A grapherrors is built with the X coordinates taken from `tvX` the Y coordinates from `tvY`; /// and the errors from vectors `tvExL`, `tvExH` and `tvEyL`, `tvEyH`.; /// The number of points in the graph is the minimum of number of points; /// in `tvX` and `tvY`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:154,Availability,error,error,154,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with multiple vectors of floats in input and multiple y error dimension.; /// A grapherrors is built with the X coordinates taken from `tvX` the Y coordinates from `tvY`; /// and the errors from vectors `tvExL`, `tvExH` and `tvEyL/H[yErrorDimension]`.; /// The number of points in the graph is the minimum of number of points; /// in `tvX` and `tvY`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:281,Availability,error,errors,281,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with multiple vectors of floats in input and multiple y error dimension.; /// A grapherrors is built with the X coordinates taken from `tvX` the Y coordinates from `tvY`; /// and the errors from vectors `tvExL`, `tvExH` and `tvEyL/H[yErrorDimension]`.; /// The number of points in the graph is the minimum of number of points; /// in `tvX` and `tvY`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:155,Availability,error,error,155,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with multiple vectors of doubles in input and multiple y error dimensions; /// A grapherrors is built with the X coordinates taken from `tvX` the Y coordinates from `tvY`; /// and the errors from vectors `tvExL`, `tvExH` and `tvEyL/H[yErrorDimension]`.; /// The number of points in the graph is the minimum of number of points; /// in `tvX` and `tvY`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:282,Availability,error,errors,282,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with multiple vectors of doubles in input and multiple y error dimensions; /// A grapherrors is built with the X coordinates taken from `tvX` the Y coordinates from `tvY`; /// and the errors from vectors `tvExL`, `tvExH` and `tvEyL/H[yErrorDimension]`.; /// The number of points in the graph is the minimum of number of points; /// in `tvX` and `tvY`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:203,Availability,error,errors,203,"////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors constructor importing its parameters from the TH1 object passed as argument.; /// The low and high errors are set to the bin error of the histogram.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:229,Availability,error,error,229,"////////////////////////////////////////////////////////////////////////////////; /// TGraphMultiErrors constructor importing its parameters from the TH1 object passed as argument.; /// The low and high errors are set to the bin error of the histogram.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:95,Deployability,release,release,95,"////////////////////////////////////////////////////////////////////////////////; /// Copy and release.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:91,Availability,error,errors,91,"////////////////////////////////////////////////////////////////////////////////; /// Copy errors from `fE***` to `arrays[***]`; /// or to `f***` Copy points.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:112,Availability,error,error,112,"////////////////////////////////////////////////////////////////////////////////; /// Recalculates the summed y error arrays.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:172,Availability,error,errors,172,"////////////////////////////////////////////////////////////////////////////////; /// Protected function to perform the merge operation of a graph with multiple asymmetric errors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:108,Performance,perform,perform,108,"////////////////////////////////////////////////////////////////////////////////; /// Protected function to perform the merge operation of a graph with multiple asymmetric errors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update the fX, fY, fExL, fExH, fEyL and fEyH arrays with the sorted values.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:98,Availability,error,error,98,"////////////////////////////////////////////////////////////////////////////////; /// Add a new y error to the graph and fill it with the values from `eyL` and `eyH`",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:86,Energy Efficiency,Allocate,Allocate,86,"////////////////////////////////////////////////////////////////////////////////; /// Allocate internal data structures for `size` points.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:152,Availability,Error,Errors,152,"////////////////////////////////////////////////////////////////////////////////; /// Apply a function to all data points \f$ y = f(x,y) \f$.; ///; /// Errors are calculated as \f$ eyh = f(x,y+eyh)-f(x,y) \f$ and; /// \f$ eyl = f(x,y)-f(x,y-eyl) \f$; ///; /// Only the first error dimension is affected.; ///; /// Special treatment has to be applied for the functions where the; /// role of ""up"" and ""down"" is reversed.; ///; /// Function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:275,Availability,error,error,275,"////////////////////////////////////////////////////////////////////////////////; /// Apply a function to all data points \f$ y = f(x,y) \f$.; ///; /// Errors are calculated as \f$ eyh = f(x,y+eyh)-f(x,y) \f$ and; /// \f$ eyl = f(x,y)-f(x,y-eyl) \f$; ///; /// Only the first error dimension is affected.; ///; /// Special treatment has to be applied for the functions where the; /// role of ""up"" and ""down"" is reversed.; ///; /// Function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:401,Availability,down,down,401,"////////////////////////////////////////////////////////////////////////////////; /// Apply a function to all data points \f$ y = f(x,y) \f$.; ///; /// Errors are calculated as \f$ eyh = f(x,y+eyh)-f(x,y) \f$ and; /// \f$ eyl = f(x,y)-f(x,y-eyl) \f$; ///; /// Only the first error dimension is affected.; ///; /// Special treatment has to be applied for the functions where the; /// role of ""up"" and ""down"" is reversed.; ///; /// Function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:14,Availability,error,errors,14,"// systematic errors and error on x doesn't change",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:25,Availability,error,error,25,"// systematic errors and error on x doesn't change",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:228,Availability,error,error,228,"////////////////////////////////////////////////////////////////////////////////; /// This function was adapted from the TGraphAsymmErrors class.; /// See TGraphAsymmErrors::Divide for the documentation; ///; /// Only the first error dimension is affected.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:104,Energy Efficiency,adapt,adapted,104,"////////////////////////////////////////////////////////////////////////////////; /// This function was adapted from the TGraphAsymmErrors class.; /// See TGraphAsymmErrors::Divide for the documentation; ///; /// Only the first error dimension is affected.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:104,Modifiability,adapt,adapted,104,"////////////////////////////////////////////////////////////////////////////////; /// This function was adapted from the TGraphAsymmErrors class.; /// See TGraphAsymmErrors::Divide for the documentation; ///; /// Only the first error dimension is affected.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:255,Availability,Error,Error,255,"// we do not want to ignore the weights; // if (bEffective && (pass->GetSumw2()->fN == 0 || total->GetSumw2()->fN == 0) ) {; // Warning(""Divide"",""histogram have been computed with weights but the sum of weight squares are not stored in the; // histogram. Error calculation is performed ignoring the weights""); bEffective = false;; // }; // parse option",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:276,Performance,perform,performed,276,"// we do not want to ignore the weights; // if (bEffective && (pass->GetSumw2()->fN == 0 || total->GetSumw2()->fN == 0) ) {; // Warning(""Divide"",""histogram have been computed with weights but the sum of weight squares are not stored in the; // histogram. Error calculation is performed ignoring the weights""); bEffective = false;; // }; // parse option",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:26,Availability,error,errors,26,"// case of bins with zero errors",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:14,Availability,error,error,14,"// use normal error calculation using variance of MLE with weights (F.James 8.5.2); // this is the same formula used in ROOT for TH1::Divide(""B"")",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:32,Availability,error,errors,32,"// Set the point center and its errors",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:100,Availability,error,error,100,"////////////////////////////////////////////////////////////////////////////////; /// Deletes the y error with the index `e`.; /// Note that you must keep at least 1 error",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:166,Availability,error,error,166,"////////////////////////////////////////////////////////////////////////////////; /// Deletes the y error with the index `e`.; /// Note that you must keep at least 1 error",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:90,Availability,error,error,90,"////////////////////////////////////////////////////////////////////////////////; /// Get error on x coordinate for point `i`.; /// In case of asymmetric errors the mean of the square sum is returned",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:154,Availability,error,errors,154,"////////////////////////////////////////////////////////////////////////////////; /// Get error on x coordinate for point `i`.; /// In case of asymmetric errors the mean of the square sum is returned",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:90,Availability,error,error,90,"////////////////////////////////////////////////////////////////////////////////; /// Get error on y coordinate for point `i`.; /// The multiple errors of the dimensions are summed according to `fSumErrorsMode`.; /// In case of asymmetric errors the mean of the square sum is returned",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:145,Availability,error,errors,145,"////////////////////////////////////////////////////////////////////////////////; /// Get error on y coordinate for point `i`.; /// The multiple errors of the dimensions are summed according to `fSumErrorsMode`.; /// In case of asymmetric errors the mean of the square sum is returned",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:239,Availability,error,errors,239,"////////////////////////////////////////////////////////////////////////////////; /// Get error on y coordinate for point `i`.; /// The multiple errors of the dimensions are summed according to `fSumErrorsMode`.; /// In case of asymmetric errors the mean of the square sum is returned",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:90,Availability,error,error,90,"////////////////////////////////////////////////////////////////////////////////; /// Get error e on y coordinate for point `i`.; /// In case of asymmetric errors the mean of the square sum is returned",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:156,Availability,error,errors,156,"////////////////////////////////////////////////////////////////////////////////; /// Get error e on y coordinate for point `i`.; /// In case of asymmetric errors the mean of the square sum is returned",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:94,Availability,error,error,94,"////////////////////////////////////////////////////////////////////////////////; /// Get low error on x coordinate for point `i`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:95,Availability,error,error,95,"////////////////////////////////////////////////////////////////////////////////; /// Get high error on x coordinate for point `i`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:94,Availability,error,error,94,"////////////////////////////////////////////////////////////////////////////////; /// Get low error on y coordinate for point `i`.; /// The multiple errors of the dimensions are summed according to `fSumErrorsMode`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:149,Availability,error,errors,149,"////////////////////////////////////////////////////////////////////////////////; /// Get low error on y coordinate for point `i`.; /// The multiple errors of the dimensions are summed according to `fSumErrorsMode`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:95,Availability,error,error,95,"////////////////////////////////////////////////////////////////////////////////; /// Get high error on y coordinate for point `i`.; /// The multiple errors of the dimensions are summed according to `fSumErrorsMode`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:150,Availability,error,errors,150,"////////////////////////////////////////////////////////////////////////////////; /// Get high error on y coordinate for point `i`.; /// The multiple errors of the dimensions are summed according to `fSumErrorsMode`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:94,Availability,error,error,94,"////////////////////////////////////////////////////////////////////////////////; /// Get low error e on y coordinate for point `i`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:95,Availability,error,error,95,"////////////////////////////////////////////////////////////////////////////////; /// Get high error e on y coordinate for point `i`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:98,Availability,error,errors,98,"////////////////////////////////////////////////////////////////////////////////; /// Get all low errors on y coordinates as an array summed according to `fSumErrorsMode`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:99,Availability,error,errors,99,"////////////////////////////////////////////////////////////////////////////////; /// Get all high errors on y coordinates as an array summed according to `fSumErrorsMode`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:98,Availability,error,errors,98,"////////////////////////////////////////////////////////////////////////////////; /// Get all low errors `e` on y coordinates as an array.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:99,Availability,error,errors,99,"////////////////////////////////////////////////////////////////////////////////; /// Get all high errors `e` on y coordinates as an array.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:120,Availability,error,error,120,"////////////////////////////////////////////////////////////////////////////////; /// Get AttFill pointer for specified error dimension.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:120,Availability,error,error,120,"////////////////////////////////////////////////////////////////////////////////; /// Get AttLine pointer for specified error dimension.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:115,Availability,error,error,115,"////////////////////////////////////////////////////////////////////////////////; /// Get Fill Color for specified error e (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:142,Availability,error,errors,142,"////////////////////////////////////////////////////////////////////////////////; /// Get Fill Color for specified error e (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:115,Availability,error,error,115,"////////////////////////////////////////////////////////////////////////////////; /// Get Fill Style for specified error e (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:142,Availability,error,errors,142,"////////////////////////////////////////////////////////////////////////////////; /// Get Fill Style for specified error e (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:115,Availability,error,error,115,"////////////////////////////////////////////////////////////////////////////////; /// Get Line Color for specified error e (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:142,Availability,error,errors,142,"////////////////////////////////////////////////////////////////////////////////; /// Get Line Color for specified error e (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:115,Availability,error,error,115,"////////////////////////////////////////////////////////////////////////////////; /// Get Line Style for specified error e (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:142,Availability,error,errors,142,"////////////////////////////////////////////////////////////////////////////////; /// Get Line Style for specified error e (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:115,Availability,error,error,115,"////////////////////////////////////////////////////////////////////////////////; /// Get Line Width for specified error e (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:142,Availability,error,errors,142,"////////////////////////////////////////////////////////////////////////////////; /// Get Line Width for specified error e (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:102,Availability,error,errors,102,"////////////////////////////////////////////////////////////////////////////////; /// Print graph and errors values.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:110,Availability,error,errors,110,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraphMultiErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and (multiple) errors are scaled; /// If option contains ""xy"" both x and y values and (multiple) errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:208,Availability,error,errors,208,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraphMultiErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and (multiple) errors are scaled; /// If option contains ""xy"" both x and y values and (multiple) errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:282,Availability,error,errors,282,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraphMultiErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and (multiple) errors are scaled; /// If option contains ""xy"" both x and y values and (multiple) errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:364,Availability,error,errors,364,"////////////////////////////////////////////////////////////////////////////////; /// Multiply the values and errors of a TGraphMultiErrors by a constant c1.; ///; /// If option contains ""x"" the x values and errors are scaled; /// If option contains ""y"" the y values and (multiple) errors are scaled; /// If option contains ""xy"" both x and y values and (multiple) errors are scaled",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:159,Availability,error,error,159,"////////////////////////////////////////////////////////////////////////////////; /// Set ex and ey values for point pointed by the mouse.; ///; /// Up to 3 y error dimensions possible.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:6,Energy Efficiency,allocate,allocate,6,"// re-allocate the object",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:6,Energy Efficiency,allocate,allocate,6,"// re-allocate the object",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:90,Availability,error,error,90,"////////////////////////////////////////////////////////////////////////////////; /// Set error e ey values for point `i`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:90,Availability,error,error,90,"////////////////////////////////////////////////////////////////////////////////; /// Set error e eyL value for point `i`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:6,Energy Efficiency,allocate,allocate,6,"// re-allocate the object",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:90,Availability,error,error,90,"////////////////////////////////////////////////////////////////////////////////; /// Set error e eyH value for point `i`.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:6,Energy Efficiency,allocate,allocate,6,"// re-allocate the object",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:90,Availability,error,error,90,"////////////////////////////////////////////////////////////////////////////////; /// Set error e ey values.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:90,Availability,error,error,90,"////////////////////////////////////////////////////////////////////////////////; /// Set error e eyL values.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:90,Availability,error,error,90,"////////////////////////////////////////////////////////////////////////////////; /// Set error e eyH values.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:98,Availability,error,errors,98,"////////////////////////////////////////////////////////////////////////////////; /// Set the sum errors mode and recalculate summed errors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:133,Availability,error,errors,133,"////////////////////////////////////////////////////////////////////////////////; /// Set the sum errors mode and recalculate summed errors.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:113,Availability,error,error,113,"////////////////////////////////////////////////////////////////////////////////; /// Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:173,Availability,error,errors,173,"////////////////////////////////////////////////////////////////////////////////; /// Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:113,Availability,error,error,113,"////////////////////////////////////////////////////////////////////////////////; /// Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:173,Availability,error,errors,173,"////////////////////////////////////////////////////////////////////////////////; /// Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:104,Availability,error,error,104,"////////////////////////////////////////////////////////////////////////////////; /// Set Fill Color of error e (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:131,Availability,error,errors,131,"////////////////////////////////////////////////////////////////////////////////; /// Set Fill Color of error e (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:114,Availability,error,error,114,"////////////////////////////////////////////////////////////////////////////////; /// Set Fill Color and Alpha of error e (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:141,Availability,error,errors,141,"////////////////////////////////////////////////////////////////////////////////; /// Set Fill Color and Alpha of error e (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:104,Availability,error,error,104,"////////////////////////////////////////////////////////////////////////////////; /// Set Fill Style of error e (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:131,Availability,error,errors,131,"////////////////////////////////////////////////////////////////////////////////; /// Set Fill Style of error e (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:104,Availability,error,error,104,"////////////////////////////////////////////////////////////////////////////////; /// Set Line Color of error e (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:131,Availability,error,errors,131,"////////////////////////////////////////////////////////////////////////////////; /// Set Line Color of error e (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:114,Availability,error,error,114,"////////////////////////////////////////////////////////////////////////////////; /// Set Line Color and Alpha of error e (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:141,Availability,error,errors,141,"////////////////////////////////////////////////////////////////////////////////; /// Set Line Color and Alpha of error e (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:104,Availability,error,error,104,"////////////////////////////////////////////////////////////////////////////////; /// Set Line Style of error e (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:131,Availability,error,errors,131,"////////////////////////////////////////////////////////////////////////////////; /// Set Line Style of error e (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:104,Availability,error,error,104,"////////////////////////////////////////////////////////////////////////////////; /// Set Line Width of error e (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:131,Availability,error,errors,131,"////////////////////////////////////////////////////////////////////////////////; /// Set Line Width of error e (-1 = Global and x errors).",MatchSource.CODE_COMMENT,hist/hist/src/TGraphMultiErrors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:667,Energy Efficiency,adapt,adapted,667,"// @(#)root/hist:$Id$; // Author: Christian Stratowa 30/09/2001; /*************************************************************************; * Copyright (C) 2006, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /******************************************************************************; * Copyright(c) 2001-2006, Dr. Christian Stratowa, Vienna, Austria. *; * Author: Christian Stratowa with help from Rene Brun. *; * *; * Algorithms for smooth regression adapted from: *; * R: A Computer Language for Statistical Data Analysis *; * *; ******************************************************************************/",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:667,Modifiability,adapt,adapted,667,"// @(#)root/hist:$Id$; // Author: Christian Stratowa 30/09/2001; /*************************************************************************; * Copyright (C) 2006, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /******************************************************************************; * Copyright(c) 2001-2006, Dr. Christian Stratowa, Vienna, Austria. *; * Author: Christian Stratowa with help from Rene Brun. *; * *; * Algorithms for smooth regression adapted from: *; * R: A Computer Language for Statistical Data Analysis *; * *; ******************************************************************************/",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:597,Availability,robust,robustifying,597,"////////////////////////////////////////////////////////////////////////////////; /// Smooth data with Lowess smoother; ///; /// This function performs the computations for the LOWESS smoother; /// (see the reference below). Lowess returns the output points; /// x and y which give the coordinates of the smooth.; ///; /// \param[in] grin Input graph; /// \param[in] option specific options; /// \param[in] span the smoother span. This gives the proportion of points in the plot; /// which influence the smooth at each value. Larger values give more smoothness.; /// \param[in] iter the number of robustifying iterations which should be performed.; /// Using smaller values of iter will make lowess run faster.; /// \param[in] delta values of x which lie within delta of each other replaced by a; /// single value in the output from lowess.; /// For delta = 0, delta will be calculated.; ///; /// References:; ///; /// - Cleveland, W. S. (1979) Robust locally weighted regression and smoothing; /// scatterplots. J. Amer. Statist. Assoc. 74, 829-836.; /// - Cleveland, W. S. (1981) LOWESS: A program for smoothing scatterplots; /// by robust locally weighted regression.; /// The American Statistician, 35, 54.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:945,Availability,Robust,Robust,945,"////////////////////////////////////////////////////////////////////////////////; /// Smooth data with Lowess smoother; ///; /// This function performs the computations for the LOWESS smoother; /// (see the reference below). Lowess returns the output points; /// x and y which give the coordinates of the smooth.; ///; /// \param[in] grin Input graph; /// \param[in] option specific options; /// \param[in] span the smoother span. This gives the proportion of points in the plot; /// which influence the smooth at each value. Larger values give more smoothness.; /// \param[in] iter the number of robustifying iterations which should be performed.; /// Using smaller values of iter will make lowess run faster.; /// \param[in] delta values of x which lie within delta of each other replaced by a; /// single value in the output from lowess.; /// For delta = 0, delta will be calculated.; ///; /// References:; ///; /// - Cleveland, W. S. (1979) Robust locally weighted regression and smoothing; /// scatterplots. J. Amer. Statist. Assoc. 74, 829-836.; /// - Cleveland, W. S. (1981) LOWESS: A program for smoothing scatterplots; /// by robust locally weighted regression.; /// The American Statistician, 35, 54.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:1135,Availability,robust,robust,1135,"////////////////////////////////////////////////////////////////////////////////; /// Smooth data with Lowess smoother; ///; /// This function performs the computations for the LOWESS smoother; /// (see the reference below). Lowess returns the output points; /// x and y which give the coordinates of the smooth.; ///; /// \param[in] grin Input graph; /// \param[in] option specific options; /// \param[in] span the smoother span. This gives the proportion of points in the plot; /// which influence the smooth at each value. Larger values give more smoothness.; /// \param[in] iter the number of robustifying iterations which should be performed.; /// Using smaller values of iter will make lowess run faster.; /// \param[in] delta values of x which lie within delta of each other replaced by a; /// single value in the output from lowess.; /// For delta = 0, delta will be calculated.; ///; /// References:; ///; /// - Cleveland, W. S. (1979) Robust locally weighted regression and smoothing; /// scatterplots. J. Amer. Statist. Assoc. 74, 829-836.; /// - Cleveland, W. S. (1981) LOWESS: A program for smoothing scatterplots; /// by robust locally weighted regression.; /// The American Statistician, 35, 54.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:143,Performance,perform,performs,143,"////////////////////////////////////////////////////////////////////////////////; /// Smooth data with Lowess smoother; ///; /// This function performs the computations for the LOWESS smoother; /// (see the reference below). Lowess returns the output points; /// x and y which give the coordinates of the smooth.; ///; /// \param[in] grin Input graph; /// \param[in] option specific options; /// \param[in] span the smoother span. This gives the proportion of points in the plot; /// which influence the smooth at each value. Larger values give more smoothness.; /// \param[in] iter the number of robustifying iterations which should be performed.; /// Using smaller values of iter will make lowess run faster.; /// \param[in] delta values of x which lie within delta of each other replaced by a; /// single value in the output from lowess.; /// For delta = 0, delta will be calculated.; ///; /// References:; ///; /// - Cleveland, W. S. (1979) Robust locally weighted regression and smoothing; /// scatterplots. J. Amer. Statist. Assoc. 74, 829-836.; /// - Cleveland, W. S. (1981) LOWESS: A program for smoothing scatterplots; /// by robust locally weighted regression.; /// The American Statistician, 35, 54.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:637,Performance,perform,performed,637,"////////////////////////////////////////////////////////////////////////////////; /// Smooth data with Lowess smoother; ///; /// This function performs the computations for the LOWESS smoother; /// (see the reference below). Lowess returns the output points; /// x and y which give the coordinates of the smooth.; ///; /// \param[in] grin Input graph; /// \param[in] option specific options; /// \param[in] span the smoother span. This gives the proportion of points in the plot; /// which influence the smooth at each value. Larger values give more smoothness.; /// \param[in] iter the number of robustifying iterations which should be performed.; /// Using smaller values of iter will make lowess run faster.; /// \param[in] delta values of x which lie within delta of each other replaced by a; /// single value in the output from lowess.; /// For delta = 0, delta will be calculated.; ///; /// References:; ///; /// - Cleveland, W. S. (1979) Robust locally weighted regression and smoothing; /// scatterplots. J. Amer. Statist. Assoc. 74, 829-836.; /// - Cleveland, W. S. (1981) LOWESS: A program for smoothing scatterplots; /// by robust locally weighted regression.; /// The American Statistician, 35, 54.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:3,Availability,robust,robustness,3,"// robustness iterations",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:11,Availability,robust,robustness,11,"// compute robustness weights except last time",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:1759,Modifiability,variab,variable,1759,"////////////////////////////////////////////////////////////////////////////////; /// Smooth data with Super smoother.; /// Smooth the (x, y) values by Friedman's ``super smoother''.; ///; /// \param[in] grin graph for smoothing; /// \param[in] option specific options; /// \param[in] span the fraction of the observations in the span of the running lines; /// smoother, or 0 to choose this by leave-one-out cross-validation.; /// \param[in] bass controls the smoothness of the fitted curve.; /// Values of up to 10 indicate increasing smoothness.; /// \param[in] isPeriodic if TRUE, the x values are assumed to be in [0, 1]; /// and of period 1.; /// \param[in] w case weights; ///; /// Details:; ///; /// supsmu is a running lines smoother which chooses between three spans for; /// the lines. The running lines smoothers are symmetric, with k/2 data points; /// each side of the predicted point, and values of k as 0.5 * n, 0.2 * n and; /// 0.05 * n, where n is the number of data points. If span is specified,; /// a single smoother with span span * n is used.; ///; /// The best of the three smoothers is chosen by cross-validation for each; /// prediction. The best spans are then smoothed by a running lines smoother; /// and the final prediction chosen by linear interpolation.; ///; /// The FORTRAN code says: ``For small samples (n < 40) or if there are; /// substantial serial correlations between observations close in x - value,; /// then a prespecified fixed span smoother (span > 0) should be used.; /// Reasonable span values are 0.2 to 0.4.''; ///; /// References:; /// - Friedman, J. H. (1984) SMART User's Guide.; /// Laboratory for Computational Statistics,; /// Stanford University Technical Report No. 1.; /// - Friedman, J. H. (1984) A variable span scatterplot smoother.; /// Laboratory for Computational Statistics,; /// Stanford University Technical Report No. 5.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:882,Safety,predict,predicted,882,"////////////////////////////////////////////////////////////////////////////////; /// Smooth data with Super smoother.; /// Smooth the (x, y) values by Friedman's ``super smoother''.; ///; /// \param[in] grin graph for smoothing; /// \param[in] option specific options; /// \param[in] span the fraction of the observations in the span of the running lines; /// smoother, or 0 to choose this by leave-one-out cross-validation.; /// \param[in] bass controls the smoothness of the fitted curve.; /// Values of up to 10 indicate increasing smoothness.; /// \param[in] isPeriodic if TRUE, the x values are assumed to be in [0, 1]; /// and of period 1.; /// \param[in] w case weights; ///; /// Details:; ///; /// supsmu is a running lines smoother which chooses between three spans for; /// the lines. The running lines smoothers are symmetric, with k/2 data points; /// each side of the predicted point, and values of k as 0.5 * n, 0.2 * n and; /// 0.05 * n, where n is the number of data points. If span is specified,; /// a single smoother with span span * n is used.; ///; /// The best of the three smoothers is chosen by cross-validation for each; /// prediction. The best spans are then smoothed by a running lines smoother; /// and the final prediction chosen by linear interpolation.; ///; /// The FORTRAN code says: ``For small samples (n < 40) or if there are; /// substantial serial correlations between observations close in x - value,; /// then a prespecified fixed span smoother (span > 0) should be used.; /// Reasonable span values are 0.2 to 0.4.''; ///; /// References:; /// - Friedman, J. H. (1984) SMART User's Guide.; /// Laboratory for Computational Statistics,; /// Stanford University Technical Report No. 1.; /// - Friedman, J. H. (1984) A variable span scatterplot smoother.; /// Laboratory for Computational Statistics,; /// Stanford University Technical Report No. 5.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:1151,Safety,predict,prediction,1151,"////////////////////////////////////////////////////////////////////////////////; /// Smooth data with Super smoother.; /// Smooth the (x, y) values by Friedman's ``super smoother''.; ///; /// \param[in] grin graph for smoothing; /// \param[in] option specific options; /// \param[in] span the fraction of the observations in the span of the running lines; /// smoother, or 0 to choose this by leave-one-out cross-validation.; /// \param[in] bass controls the smoothness of the fitted curve.; /// Values of up to 10 indicate increasing smoothness.; /// \param[in] isPeriodic if TRUE, the x values are assumed to be in [0, 1]; /// and of period 1.; /// \param[in] w case weights; ///; /// Details:; ///; /// supsmu is a running lines smoother which chooses between three spans for; /// the lines. The running lines smoothers are symmetric, with k/2 data points; /// each side of the predicted point, and values of k as 0.5 * n, 0.2 * n and; /// 0.05 * n, where n is the number of data points. If span is specified,; /// a single smoother with span span * n is used.; ///; /// The best of the three smoothers is chosen by cross-validation for each; /// prediction. The best spans are then smoothed by a running lines smoother; /// and the final prediction chosen by linear interpolation.; ///; /// The FORTRAN code says: ``For small samples (n < 40) or if there are; /// substantial serial correlations between observations close in x - value,; /// then a prespecified fixed span smoother (span > 0) should be used.; /// Reasonable span values are 0.2 to 0.4.''; ///; /// References:; /// - Friedman, J. H. (1984) SMART User's Guide.; /// Laboratory for Computational Statistics,; /// Stanford University Technical Report No. 1.; /// - Friedman, J. H. (1984) A variable span scatterplot smoother.; /// Laboratory for Computational Statistics,; /// Stanford University Technical Report No. 5.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:1243,Safety,predict,prediction,1243,"////////////////////////////////////////////////////////////////////////////////; /// Smooth data with Super smoother.; /// Smooth the (x, y) values by Friedman's ``super smoother''.; ///; /// \param[in] grin graph for smoothing; /// \param[in] option specific options; /// \param[in] span the fraction of the observations in the span of the running lines; /// smoother, or 0 to choose this by leave-one-out cross-validation.; /// \param[in] bass controls the smoothness of the fitted curve.; /// Values of up to 10 indicate increasing smoothness.; /// \param[in] isPeriodic if TRUE, the x values are assumed to be in [0, 1]; /// and of period 1.; /// \param[in] w case weights; ///; /// Details:; ///; /// supsmu is a running lines smoother which chooses between three spans for; /// the lines. The running lines smoothers are symmetric, with k/2 data points; /// each side of the predicted point, and values of k as 0.5 * n, 0.2 * n and; /// 0.05 * n, where n is the number of data points. If span is specified,; /// a single smoother with span span * n is used.; ///; /// The best of the three smoothers is chosen by cross-validation for each; /// prediction. The best spans are then smoothed by a running lines smoother; /// and the final prediction chosen by linear interpolation.; ///; /// The FORTRAN code says: ``For small samples (n < 40) or if there are; /// substantial serial correlations between observations close in x - value,; /// then a prespecified fixed span smoother (span > 0) should be used.; /// Reasonable span values are 0.2 to 0.4.''; ///; /// References:; /// - Friedman, J. H. (1984) SMART User's Guide.; /// Laboratory for Computational Statistics,; /// Stanford University Technical Report No. 1.; /// - Friedman, J. H. (1984) A variable span scatterplot smoother.; /// Laboratory for Computational Statistics,; /// Stanford University Technical Report No. 5.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:414,Security,validat,validation,414,"////////////////////////////////////////////////////////////////////////////////; /// Smooth data with Super smoother.; /// Smooth the (x, y) values by Friedman's ``super smoother''.; ///; /// \param[in] grin graph for smoothing; /// \param[in] option specific options; /// \param[in] span the fraction of the observations in the span of the running lines; /// smoother, or 0 to choose this by leave-one-out cross-validation.; /// \param[in] bass controls the smoothness of the fitted curve.; /// Values of up to 10 indicate increasing smoothness.; /// \param[in] isPeriodic if TRUE, the x values are assumed to be in [0, 1]; /// and of period 1.; /// \param[in] w case weights; ///; /// Details:; ///; /// supsmu is a running lines smoother which chooses between three spans for; /// the lines. The running lines smoothers are symmetric, with k/2 data points; /// each side of the predicted point, and values of k as 0.5 * n, 0.2 * n and; /// 0.05 * n, where n is the number of data points. If span is specified,; /// a single smoother with span span * n is used.; ///; /// The best of the three smoothers is chosen by cross-validation for each; /// prediction. The best spans are then smoothed by a running lines smoother; /// and the final prediction chosen by linear interpolation.; ///; /// The FORTRAN code says: ``For small samples (n < 40) or if there are; /// substantial serial correlations between observations close in x - value,; /// then a prespecified fixed span smoother (span > 0) should be used.; /// Reasonable span values are 0.2 to 0.4.''; ///; /// References:; /// - Friedman, J. H. (1984) SMART User's Guide.; /// Laboratory for Computational Statistics,; /// Stanford University Technical Report No. 1.; /// - Friedman, J. H. (1984) A variable span scatterplot smoother.; /// Laboratory for Computational Statistics,; /// Stanford University Technical Report No. 5.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:1126,Security,validat,validation,1126,"////////////////////////////////////////////////////////////////////////////////; /// Smooth data with Super smoother.; /// Smooth the (x, y) values by Friedman's ``super smoother''.; ///; /// \param[in] grin graph for smoothing; /// \param[in] option specific options; /// \param[in] span the fraction of the observations in the span of the running lines; /// smoother, or 0 to choose this by leave-one-out cross-validation.; /// \param[in] bass controls the smoothness of the fitted curve.; /// Values of up to 10 indicate increasing smoothness.; /// \param[in] isPeriodic if TRUE, the x values are assumed to be in [0, 1]; /// and of period 1.; /// \param[in] w case weights; ///; /// Details:; ///; /// supsmu is a running lines smoother which chooses between three spans for; /// the lines. The running lines smoothers are symmetric, with k/2 data points; /// each side of the predicted point, and values of k as 0.5 * n, 0.2 * n and; /// 0.05 * n, where n is the number of data points. If span is specified,; /// a single smoother with span span * n is used.; ///; /// The best of the three smoothers is chosen by cross-validation for each; /// prediction. The best spans are then smoothed by a running lines smoother; /// and the final prediction chosen by linear interpolation.; ///; /// The FORTRAN code says: ``For small samples (n < 40) or if there are; /// substantial serial correlations between observations close in x - value,; /// then a prespecified fixed span smoother (span > 0) should be used.; /// Reasonable span values are 0.2 to 0.4.''; ///; /// References:; /// - Friedman, J. H. (1984) SMART User's Guide.; /// Laboratory for Computational Statistics,; /// Stanford University Technical Report No. 1.; /// - Friedman, J. H. (1984) A variable span scatterplot smoother.; /// Laboratory for Computational Statistics,; /// Stanford University Technical Report No. 5.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:1625,Usability,Guid,Guide,1625,"////////////////////////////////////////////////////////////////////////////////; /// Smooth data with Super smoother.; /// Smooth the (x, y) values by Friedman's ``super smoother''.; ///; /// \param[in] grin graph for smoothing; /// \param[in] option specific options; /// \param[in] span the fraction of the observations in the span of the running lines; /// smoother, or 0 to choose this by leave-one-out cross-validation.; /// \param[in] bass controls the smoothness of the fitted curve.; /// Values of up to 10 indicate increasing smoothness.; /// \param[in] isPeriodic if TRUE, the x values are assumed to be in [0, 1]; /// and of period 1.; /// \param[in] w case weights; ///; /// Details:; ///; /// supsmu is a running lines smoother which chooses between three spans for; /// the lines. The running lines smoothers are symmetric, with k/2 data points; /// each side of the predicted point, and values of k as 0.5 * n, 0.2 * n and; /// 0.05 * n, where n is the number of data points. If span is specified,; /// a single smoother with span span * n is used.; ///; /// The best of the three smoothers is chosen by cross-validation for each; /// prediction. The best spans are then smoothed by a running lines smoother; /// and the final prediction chosen by linear interpolation.; ///; /// The FORTRAN code says: ``For small samples (n < 40) or if there are; /// substantial serial correlations between observations close in x - value,; /// then a prespecified fixed span smoother (span > 0) should be used.; /// Reasonable span values are 0.2 to 0.4.''; ///; /// References:; /// - Friedman, J. H. (1984) SMART User's Guide.; /// Laboratory for Computational Statistics,; /// Stanford University Technical Report No. 1.; /// - Friedman, J. H. (1984) A variable span scatterplot smoother.; /// Laboratory for Computational Statistics,; /// Stanford University Technical Report No. 5.",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:606,Modifiability,variab,variable,606,"////////////////////////////////////////////////////////////////////////////////; /// Friedmanns super smoother (Friedman, 1984).; ///; /// version 10/10/84; /// coded and copyright (c) 1984 by:; ///; /// Jerome H. Friedman; /// department of statistics; /// and; /// stanford linear accelerator center; /// stanford university; ///; /// all rights reserved.; ///; /// \param[in] n number of observations (x,y - pairs).; /// \param[in] x ordered abscissa values.; /// \param[in] y corresponding ordinate (response) values.; /// \param[in] w weight for each (x,y) observation.; /// \param[in] iper periodic variable flag.; /// - iper=1 => x is ordered interval variable.; /// - iper=2 => x is a periodic variable with values; /// in the range (0.0,1.0) and period 1.0.; /// \param[in] span smoother span (fraction of observations in window).; /// - span=0.0 => automatic (variable) span selection.; /// \param[in] alpha controls high frequency (small span) penality; /// used with automatic span selection (bass tone control).; /// (alpha.le.0.0 or alpha.gt.10.0 => no effect.); /// \param[out] smo smoothed ordinate (response) values.; /// \param sc internal working storage.; ///; /// note:; ///; /// for small samples (n < 40) or if there are substantial serial; /// correlations between observations close in x - value, then; /// a prespecified fixed span smoother (span > 0) should be; /// used. reasonable span values are 0.2 to 0.4.; ///; /// current implementation:; ///; /// Based on R function supsmu: Translated to C++ by C. Stratowa; /// (R source file: ppr.f by B.D.Ripley Copyright (C) 1994-97)",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:660,Modifiability,variab,variable,660,"////////////////////////////////////////////////////////////////////////////////; /// Friedmanns super smoother (Friedman, 1984).; ///; /// version 10/10/84; /// coded and copyright (c) 1984 by:; ///; /// Jerome H. Friedman; /// department of statistics; /// and; /// stanford linear accelerator center; /// stanford university; ///; /// all rights reserved.; ///; /// \param[in] n number of observations (x,y - pairs).; /// \param[in] x ordered abscissa values.; /// \param[in] y corresponding ordinate (response) values.; /// \param[in] w weight for each (x,y) observation.; /// \param[in] iper periodic variable flag.; /// - iper=1 => x is ordered interval variable.; /// - iper=2 => x is a periodic variable with values; /// in the range (0.0,1.0) and period 1.0.; /// \param[in] span smoother span (fraction of observations in window).; /// - span=0.0 => automatic (variable) span selection.; /// \param[in] alpha controls high frequency (small span) penality; /// used with automatic span selection (bass tone control).; /// (alpha.le.0.0 or alpha.gt.10.0 => no effect.); /// \param[out] smo smoothed ordinate (response) values.; /// \param sc internal working storage.; ///; /// note:; ///; /// for small samples (n < 40) or if there are substantial serial; /// correlations between observations close in x - value, then; /// a prespecified fixed span smoother (span > 0) should be; /// used. reasonable span values are 0.2 to 0.4.; ///; /// current implementation:; ///; /// Based on R function supsmu: Translated to C++ by C. Stratowa; /// (R source file: ppr.f by B.D.Ripley Copyright (C) 1994-97)",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:703,Modifiability,variab,variable,703,"////////////////////////////////////////////////////////////////////////////////; /// Friedmanns super smoother (Friedman, 1984).; ///; /// version 10/10/84; /// coded and copyright (c) 1984 by:; ///; /// Jerome H. Friedman; /// department of statistics; /// and; /// stanford linear accelerator center; /// stanford university; ///; /// all rights reserved.; ///; /// \param[in] n number of observations (x,y - pairs).; /// \param[in] x ordered abscissa values.; /// \param[in] y corresponding ordinate (response) values.; /// \param[in] w weight for each (x,y) observation.; /// \param[in] iper periodic variable flag.; /// - iper=1 => x is ordered interval variable.; /// - iper=2 => x is a periodic variable with values; /// in the range (0.0,1.0) and period 1.0.; /// \param[in] span smoother span (fraction of observations in window).; /// - span=0.0 => automatic (variable) span selection.; /// \param[in] alpha controls high frequency (small span) penality; /// used with automatic span selection (bass tone control).; /// (alpha.le.0.0 or alpha.gt.10.0 => no effect.); /// \param[out] smo smoothed ordinate (response) values.; /// \param sc internal working storage.; ///; /// note:; ///; /// for small samples (n < 40) or if there are substantial serial; /// correlations between observations close in x - value, then; /// a prespecified fixed span smoother (span > 0) should be; /// used. reasonable span values are 0.2 to 0.4.; ///; /// current implementation:; ///; /// Based on R function supsmu: Translated to C++ by C. Stratowa; /// (R source file: ppr.f by B.D.Ripley Copyright (C) 1994-97)",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:871,Modifiability,variab,variable,871,"////////////////////////////////////////////////////////////////////////////////; /// Friedmanns super smoother (Friedman, 1984).; ///; /// version 10/10/84; /// coded and copyright (c) 1984 by:; ///; /// Jerome H. Friedman; /// department of statistics; /// and; /// stanford linear accelerator center; /// stanford university; ///; /// all rights reserved.; ///; /// \param[in] n number of observations (x,y - pairs).; /// \param[in] x ordered abscissa values.; /// \param[in] y corresponding ordinate (response) values.; /// \param[in] w weight for each (x,y) observation.; /// \param[in] iper periodic variable flag.; /// - iper=1 => x is ordered interval variable.; /// - iper=2 => x is a periodic variable with values; /// in the range (0.0,1.0) and period 1.0.; /// \param[in] span smoother span (fraction of observations in window).; /// - span=0.0 => automatic (variable) span selection.; /// \param[in] alpha controls high frequency (small span) penality; /// used with automatic span selection (bass tone control).; /// (alpha.le.0.0 or alpha.gt.10.0 => no effect.); /// \param[out] smo smoothed ordinate (response) values.; /// \param sc internal working storage.; ///; /// note:; ///; /// for small samples (n < 40) or if there are substantial serial; /// correlations between observations close in x - value, then; /// a prespecified fixed span smoother (span > 0) should be; /// used. reasonable span values are 0.2 to 0.4.; ///; /// current implementation:; ///; /// Based on R function supsmu: Translated to C++ by C. Stratowa; /// (R source file: ppr.f by B.D.Ripley Copyright (C) 1994-97)",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:9,Modifiability,variab,variables,9,"// Local variables",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:17,Energy Efficiency,power,power,17,"// Computing 2nd power",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:9,Modifiability,variab,variables,9,"// Local variables",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:17,Energy Efficiency,power,power,17,"// Computing 2nd power",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:1430,Deployability,continuous,continuous,1430," (iKind = 2).; /// \param[in] nout If xout is not specified, interpolation takes place at n equally; /// spaced points spanning the interval [min(x), max(x)], where; /// nout = max(nout, number of input data).; /// \param[in] xout an optional set of values specifying where interpolation is to; /// take place.; /// \param[in] yleft the value to be returned when input x values less than min(x).; /// The default is defined by the value of rule given below.; /// \param[in] yright the value to be returned when input x values greater than max(x).; /// The default is defined by the value of rule given below.; /// \param[in] rule an integer describing how interpolation is to take place outside; /// the interval [min(x), max(x)]. If rule is 0 then the given yleft; /// and yright values are returned, if it is 1 then 0 is returned; /// for such points and if it is 2, the value at the closest data; /// extreme is used.; /// \param[in] f For method=""constant"" a number between 0 and 1 inclusive,; /// indicating a compromise between left- and right-continuous step; /// functions. If y0 and y1 are the values to the left and right of; /// the point then the value is y0*f+y1*(1-f) so that f=0 is; /// right-continuous and f=1 is left-continuous; /// \param[in] ties Handling of tied x values. An integer describing a function with; /// a single vector argument returning a single number result:; /// - ties = ""ordered"" (iTies = 0): input x are ""ordered""; /// - ties = ""mean"" (iTies = 1): function ""mean""; /// - ties = ""min"" (iTies = 2): function ""min""; /// - ties = ""max"" (iTies = 3): function ""max""; ///; /// Details:; ///; /// At least two complete (x, y) pairs are required.; /// If there are duplicated (tied) x values and ties is a function it is; /// applied to the y values for each distinct x value. Useful functions in; /// this context include mean, min, and max.; /// If ties=""ordered"" the x values are assumed to be already ordered. The; /// first y value will be used for interpolation t",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:1588,Deployability,continuous,continuous,1588,"number of input data).; /// \param[in] xout an optional set of values specifying where interpolation is to; /// take place.; /// \param[in] yleft the value to be returned when input x values less than min(x).; /// The default is defined by the value of rule given below.; /// \param[in] yright the value to be returned when input x values greater than max(x).; /// The default is defined by the value of rule given below.; /// \param[in] rule an integer describing how interpolation is to take place outside; /// the interval [min(x), max(x)]. If rule is 0 then the given yleft; /// and yright values are returned, if it is 1 then 0 is returned; /// for such points and if it is 2, the value at the closest data; /// extreme is used.; /// \param[in] f For method=""constant"" a number between 0 and 1 inclusive,; /// indicating a compromise between left- and right-continuous step; /// functions. If y0 and y1 are the values to the left and right of; /// the point then the value is y0*f+y1*(1-f) so that f=0 is; /// right-continuous and f=1 is left-continuous; /// \param[in] ties Handling of tied x values. An integer describing a function with; /// a single vector argument returning a single number result:; /// - ties = ""ordered"" (iTies = 0): input x are ""ordered""; /// - ties = ""mean"" (iTies = 1): function ""mean""; /// - ties = ""min"" (iTies = 2): function ""min""; /// - ties = ""max"" (iTies = 3): function ""max""; ///; /// Details:; ///; /// At least two complete (x, y) pairs are required.; /// If there are duplicated (tied) x values and ties is a function it is; /// applied to the y values for each distinct x value. Useful functions in; /// this context include mean, min, and max.; /// If ties=""ordered"" the x values are assumed to be already ordered. The; /// first y value will be used for interpolation to the left and the last; /// one for interpolation to the right.; ///; /// Value:; ///; /// approx returns a graph with components x and y, containing n coordinates; /// which interpolat",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:1615,Deployability,continuous,continuous,1615,"number of input data).; /// \param[in] xout an optional set of values specifying where interpolation is to; /// take place.; /// \param[in] yleft the value to be returned when input x values less than min(x).; /// The default is defined by the value of rule given below.; /// \param[in] yright the value to be returned when input x values greater than max(x).; /// The default is defined by the value of rule given below.; /// \param[in] rule an integer describing how interpolation is to take place outside; /// the interval [min(x), max(x)]. If rule is 0 then the given yleft; /// and yright values are returned, if it is 1 then 0 is returned; /// for such points and if it is 2, the value at the closest data; /// extreme is used.; /// \param[in] f For method=""constant"" a number between 0 and 1 inclusive,; /// indicating a compromise between left- and right-continuous step; /// functions. If y0 and y1 are the values to the left and right of; /// the point then the value is y0*f+y1*(1-f) so that f=0 is; /// right-continuous and f=1 is left-continuous; /// \param[in] ties Handling of tied x values. An integer describing a function with; /// a single vector argument returning a single number result:; /// - ties = ""ordered"" (iTies = 0): input x are ""ordered""; /// - ties = ""mean"" (iTies = 1): function ""mean""; /// - ties = ""min"" (iTies = 2): function ""min""; /// - ties = ""max"" (iTies = 3): function ""max""; ///; /// Details:; ///; /// At least two complete (x, y) pairs are required.; /// If there are duplicated (tied) x values and ties is a function it is; /// applied to the y values for each distinct x value. Useful functions in; /// this context include mean, min, and max.; /// If ties=""ordered"" the x values are assumed to be already ordered. The; /// first y value will be used for interpolation to the left and the last; /// one for interpolation to the right.; ///; /// Value:; ///; /// approx returns a graph with components x and y, containing n coordinates; /// which interpolat",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:135,Energy Efficiency,adapt,adapted,135,"////////////////////////////////////////////////////////////////////////////////; /// Static function; /// based on R function rPsort: adapted to C++ by Christian Stratowa; /// (R source file: R_sort.c by R Development Core Team (C) 1999-2001)",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:135,Modifiability,adapt,adapted,135,"////////////////////////////////////////////////////////////////////////////////; /// Static function; /// based on R function rPsort: adapted to C++ by Christian Stratowa; /// (R source file: R_sort.c by R Development Core Team (C) 1999-2001)",MatchSource.CODE_COMMENT,hist/hist/src/TGraphSmooth.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1156,Availability,error,errors,1156,"channel (see TH1 documentation); \class TH1F; \brief 1-D histogram with a float per channel (see TH1 documentation); \class TH1D; \brief 1-D histogram with a double per channel (see TH1 documentation); @}; */; /** \class TH1; \ingroup Histograms; TH1 is the base class of all histogram classes in %ROOT. It provides the common interface for operations such as binning, filling, drawing, which; will be detailed below. -# [Creating histograms](\ref creating-histograms); - [Labelling axes](\ref labelling-axis); -# [Binning](\ref binning); - [Fix or variable bin size](\ref fix-var); - [Convention for numbering bins](\ref convention); - [Alphanumeric Bin Labels](\ref alpha); - [Histograms with automatic bins](\ref auto-bin); - [Rebinning](\ref rebinning); -# [Filling histograms](\ref filling-histograms); - [Associated errors](\ref associated-errors); - [Associated functions](\ref associated-functions); - [Projections of histograms](\ref prof-hist); - [Random Numbers and histograms](\ref random-numbers); - [Making a copy of a histogram](\ref making-a-copy); - [Normalizing histograms](\ref normalizing); -# [Drawing histograms](\ref drawing-histograms); - [Setting Drawing histogram contour levels (2-D hists only)](\ref cont-level); - [Setting histogram graphics attributes](\ref graph-att); - [Customising how axes are drawn](\ref axis-drawing); -# [Fitting histograms](\ref fitting-histograms); -# [Saving/reading histograms to/from a ROOT file](\ref saving-histograms); -# [Operations on histograms](\ref operations-on-histograms); -# [Miscellaneous operations](\ref misc). ROOT supports the following histogram types:. - 1-D histograms:; - TH1C : histograms with one byte per channel. Maximum bin content = 127; - TH1S : histograms with one short per channel. Maximum bin content = 32767; - TH1I : histograms with one int per channel. Maximum bin content = INT_MAX (\ref intmax ""*""); - TH1L : histograms with one long64 per channel. Maximum bin content = LLONG_MAX (\ref llongmax ""**""); - ",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1180,Availability,error,errors,1180,"channel (see TH1 documentation); \class TH1F; \brief 1-D histogram with a float per channel (see TH1 documentation); \class TH1D; \brief 1-D histogram with a double per channel (see TH1 documentation); @}; */; /** \class TH1; \ingroup Histograms; TH1 is the base class of all histogram classes in %ROOT. It provides the common interface for operations such as binning, filling, drawing, which; will be detailed below. -# [Creating histograms](\ref creating-histograms); - [Labelling axes](\ref labelling-axis); -# [Binning](\ref binning); - [Fix or variable bin size](\ref fix-var); - [Convention for numbering bins](\ref convention); - [Alphanumeric Bin Labels](\ref alpha); - [Histograms with automatic bins](\ref auto-bin); - [Rebinning](\ref rebinning); -# [Filling histograms](\ref filling-histograms); - [Associated errors](\ref associated-errors); - [Associated functions](\ref associated-functions); - [Projections of histograms](\ref prof-hist); - [Random Numbers and histograms](\ref random-numbers); - [Making a copy of a histogram](\ref making-a-copy); - [Normalizing histograms](\ref normalizing); -# [Drawing histograms](\ref drawing-histograms); - [Setting Drawing histogram contour levels (2-D hists only)](\ref cont-level); - [Setting histogram graphics attributes](\ref graph-att); - [Customising how axes are drawn](\ref axis-drawing); -# [Fitting histograms](\ref fitting-histograms); -# [Saving/reading histograms to/from a ROOT file](\ref saving-histograms); -# [Operations on histograms](\ref operations-on-histograms); -# [Miscellaneous operations](\ref misc). ROOT supports the following histogram types:. - 1-D histograms:; - TH1C : histograms with one byte per channel. Maximum bin content = 127; - TH1S : histograms with one short per channel. Maximum bin content = 32767; - TH1I : histograms with one int per channel. Maximum bin content = INT_MAX (\ref intmax ""*""); - TH1L : histograms with one long64 per channel. Maximum bin content = LLONG_MAX (\ref llongmax ""**""); - ",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:8547,Availability,error,error,8547,"fill, manipulate, draw or access; histograms are identical in both cases. Each histogram always contains 3 axis objects of type TAxis: fXaxis, fYaxis and fZaxis.; To access the axis parameters, use:; ~~~ {.cpp}; TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; ~~~; See class TAxis for a description of all the access functions.; The axis range is always stored internally in double precision. \anchor convention; ### Convention for numbering bins. For all histogram types: nbins, xlow, xup; ~~~ {.cpp}; bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; ~~~; In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; For example, assuming a 3-D histogram with (binx, biny, binz), the function; ~~~ {.cpp}; Int_t gbin = h->GetBin(binx, biny, binz);; ~~~; returns a global/linearized gbin number. This global gbin is useful; to access the bin content/error information independently of the dimension.; Note that to access the information other than bin content and errors; one should use the TAxis object directly with e.g.:; ~~~ {.cpp}; Double_t xcenter = h3->GetZaxis()->GetBinCenter(27);; ~~~; returns the center along z of bin number 27 (not the global bin); in the 3-D histogram h3. \anchor alpha; ### Alphanumeric Bin Labels. By default, a histogram axis is drawn with its numeric bin labels.; One can specify alphanumeric labels instead with:. - call TAxis::SetBinLabel(bin, label);; This can always be done before or after filling.; When the histogram is drawn, bin labels will be automatically drawn.; See examples labels1.C and labels2.C; - call to a Fill function with one of the arguments being a string, e.g.; ~~~ {.cpp}; hist1->Fill(somename, weight);; hist2->Fill(x, somename, weight);; hist2->Fill(somename, y, weight);; hist2->Fill(somenamex, somenamey, weight);; ~~~; See examples hlabels1.C and hlabels2.C; - via TTree::Draw. see",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:8661,Availability,error,errors,8661,"objects of type TAxis: fXaxis, fYaxis and fZaxis.; To access the axis parameters, use:; ~~~ {.cpp}; TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; ~~~; See class TAxis for a description of all the access functions.; The axis range is always stored internally in double precision. \anchor convention; ### Convention for numbering bins. For all histogram types: nbins, xlow, xup; ~~~ {.cpp}; bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; ~~~; In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; For example, assuming a 3-D histogram with (binx, biny, binz), the function; ~~~ {.cpp}; Int_t gbin = h->GetBin(binx, biny, binz);; ~~~; returns a global/linearized gbin number. This global gbin is useful; to access the bin content/error information independently of the dimension.; Note that to access the information other than bin content and errors; one should use the TAxis object directly with e.g.:; ~~~ {.cpp}; Double_t xcenter = h3->GetZaxis()->GetBinCenter(27);; ~~~; returns the center along z of bin number 27 (not the global bin); in the 3-D histogram h3. \anchor alpha; ### Alphanumeric Bin Labels. By default, a histogram axis is drawn with its numeric bin labels.; One can specify alphanumeric labels instead with:. - call TAxis::SetBinLabel(bin, label);; This can always be done before or after filling.; When the histogram is drawn, bin labels will be automatically drawn.; See examples labels1.C and labels2.C; - call to a Fill function with one of the arguments being a string, e.g.; ~~~ {.cpp}; hist1->Fill(somename, weight);; hist2->Fill(x, somename, weight);; hist2->Fill(somename, y, weight);; hist2->Fill(somenamex, somenamey, weight);; ~~~; See examples hlabels1.C and hlabels2.C; - via TTree::Draw. see for example cernstaff.C; ~~~ {.cpp}; tree.Draw(""Nation::Division"");; ~~~; where ""Nation"" and ""Division"" are two ",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:10427,Availability,down,down,10427,"ring, e.g.; ~~~ {.cpp}; hist1->Fill(somename, weight);; hist2->Fill(x, somename, weight);; hist2->Fill(somename, y, weight);; hist2->Fill(somenamex, somenamey, weight);; ~~~; See examples hlabels1.C and hlabels2.C; - via TTree::Draw. see for example cernstaff.C; ~~~ {.cpp}; tree.Draw(""Nation::Division"");; ~~~; where ""Nation"" and ""Division"" are two branches of a Tree. When using the options 2 or 3 above, the labels are automatically; added to the list (THashList) of labels for a given axis.; By default, an axis is drawn with the order of bins corresponding; to the filling sequence. It is possible to reorder the axis. - alphabetically; - by increasing or decreasing values. The reordering can be triggered via the TAxis context menu by selecting; the menu item ""LabelsOption"" or by calling directly; TH1::LabelsOption(option, axis) where. - axis may be ""X"", ""Y"" or ""Z""; - option may be:; - ""a"" sort by alphabetic order; - "">"" sort by decreasing values; - ""<"" sort by increasing values; - ""h"" draw labels horizontal; - ""v"" draw labels vertical; - ""u"" draw labels up (end of label right adjusted); - ""d"" draw labels down (start of label left adjusted). When using the option 2 above, new labels are added by doubling the current; number of bins in case one label does not exist yet.; When the Filling is terminated, it is possible to trim the number; of bins to match the number of active labels by calling; ~~~ {.cpp}; TH1::LabelsDeflate(axis) with axis = ""X"", ""Y"" or ""Z""; ~~~; This operation is automatic when using TTree::Draw.; Once bin labels have been created, they become persistent if the histogram; is written to a file or when generating the C++ code via SavePrimitive. \anchor auto-bin; ### Histograms with automatic bins. When a histogram is created with an axis lower limit greater or equal; to its upper limit, the SetBuffer is automatically called with an; argument fBufferSize equal to fgBufferSize (default value=1000).; fgBufferSize may be reset via the static function TH1::Set",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:11614,Availability,error,errors,11614,"e to trim the number; of bins to match the number of active labels by calling; ~~~ {.cpp}; TH1::LabelsDeflate(axis) with axis = ""X"", ""Y"" or ""Z""; ~~~; This operation is automatic when using TTree::Draw.; Once bin labels have been created, they become persistent if the histogram; is written to a file or when generating the C++ code via SavePrimitive. \anchor auto-bin; ### Histograms with automatic bins. When a histogram is created with an axis lower limit greater or equal; to its upper limit, the SetBuffer is automatically called with an; argument fBufferSize equal to fgBufferSize (default value=1000).; fgBufferSize may be reset via the static function TH1::SetDefaultBufferSize.; The axis limits will be automatically computed when the buffer will; be full or when the function BufferEmpty is called. \anchor rebinning; ### Rebinning. At any time, a histogram can be rebinned via TH1::Rebin. This function; returns a new histogram with the rebinned contents.; If bin errors were stored, they are recomputed during the rebinning. \anchor filling-histograms; ## Filling histograms. A histogram is typically filled with statements like:; ~~~ {.cpp}; h1->Fill(x);; h1->Fill(x, w); //fill with weight; h2->Fill(x, y); h2->Fill(x, y, w); h3->Fill(x, y, z); h3->Fill(x, y, z, w); ~~~; or via one of the Fill functions accepting names described above.; The Fill functions compute the bin number corresponding to the given; x, y or z argument and increment this bin by the given weight.; The Fill functions return the bin number for 1-D histograms or global; bin number for 2-D and 3-D histograms.; If TH1::Sumw2 has been called before filling, the sum of squares of; weights is also stored.; One can also increment directly a bin number via TH1::AddBinContent; or replace the existing content via TH1::SetBinContent. Passing an; out-of-range bin to TH1::AddBinContent leads to undefined behavior.; To access the bin content of a given bin, do:; ~~~ {.cpp}; Double_t binContent = h->GetBinContent(bin);",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:13659,Availability,error,errors,13659,"rent axis ranges.; If the automatic binning option has been set via; ~~~ {.cpp}; h->SetCanExtend(TH1::kAllAxes);; ~~~; then, the Fill Function will automatically extend the axis range to; accomodate the new value specified in the Fill argument. The method; used is to double the bin size until the new value fits in the range,; merging bins two by two. This automatic binning options is extensively; used by the TTree::Draw function when histogramming Tree variables; with an unknown range.; This automatic binning option is supported for 1-D, 2-D and 3-D histograms. During filling, some statistics parameters are incremented to compute; the mean value and Root Mean Square with the maximum precision. In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S; a check is made that the bin contents do not exceed the maximum positive; capacity (127 or 32767). Histograms of all types may have positive; or/and negative bin contents. \anchor associated-errors; ### Associated errors; By default, for each bin, the sum of weights is computed at fill time.; One can also call TH1::Sumw2 to force the storage and computation; of the sum of the square of weights per bin.; If Sumw2 has been called, the error per bin is computed as the; sqrt(sum of squares of weights), otherwise the error is set equal; to the sqrt(bin content).; To return the error for a given bin number, do:; ~~~ {.cpp}; Double_t error = h->GetBinError(bin);; ~~~. \anchor associated-functions; ### Associated functions; One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated to each histogram.; When TH1::Fit is invoked, the fitted function is added to this list.; Given a histogram h, one can retrieve an associated function; with:; ~~~ {.cpp}; TF1 *myfunc = h->GetFunction(""myfunc"");; ~~~. \anchor operations-on-histograms; ## Operations on histograms. Many types of operations are supported on histograms or between histograms. - Addition of a histogram to the current histogra",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:13682,Availability,error,errors,13682,"rent axis ranges.; If the automatic binning option has been set via; ~~~ {.cpp}; h->SetCanExtend(TH1::kAllAxes);; ~~~; then, the Fill Function will automatically extend the axis range to; accomodate the new value specified in the Fill argument. The method; used is to double the bin size until the new value fits in the range,; merging bins two by two. This automatic binning options is extensively; used by the TTree::Draw function when histogramming Tree variables; with an unknown range.; This automatic binning option is supported for 1-D, 2-D and 3-D histograms. During filling, some statistics parameters are incremented to compute; the mean value and Root Mean Square with the maximum precision. In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S; a check is made that the bin contents do not exceed the maximum positive; capacity (127 or 32767). Histograms of all types may have positive; or/and negative bin contents. \anchor associated-errors; ### Associated errors; By default, for each bin, the sum of weights is computed at fill time.; One can also call TH1::Sumw2 to force the storage and computation; of the sum of the square of weights per bin.; If Sumw2 has been called, the error per bin is computed as the; sqrt(sum of squares of weights), otherwise the error is set equal; to the sqrt(bin content).; To return the error for a given bin number, do:; ~~~ {.cpp}; Double_t error = h->GetBinError(bin);; ~~~. \anchor associated-functions; ### Associated functions; One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated to each histogram.; When TH1::Fit is invoked, the fitted function is added to this list.; Given a histogram h, one can retrieve an associated function; with:; ~~~ {.cpp}; TF1 *myfunc = h->GetFunction(""myfunc"");; ~~~. \anchor operations-on-histograms; ## Operations on histograms. Many types of operations are supported on histograms or between histograms. - Addition of a histogram to the current histogra",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:13905,Availability,error,error,13905,"od; used is to double the bin size until the new value fits in the range,; merging bins two by two. This automatic binning options is extensively; used by the TTree::Draw function when histogramming Tree variables; with an unknown range.; This automatic binning option is supported for 1-D, 2-D and 3-D histograms. During filling, some statistics parameters are incremented to compute; the mean value and Root Mean Square with the maximum precision. In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S; a check is made that the bin contents do not exceed the maximum positive; capacity (127 or 32767). Histograms of all types may have positive; or/and negative bin contents. \anchor associated-errors; ### Associated errors; By default, for each bin, the sum of weights is computed at fill time.; One can also call TH1::Sumw2 to force the storage and computation; of the sum of the square of weights per bin.; If Sumw2 has been called, the error per bin is computed as the; sqrt(sum of squares of weights), otherwise the error is set equal; to the sqrt(bin content).; To return the error for a given bin number, do:; ~~~ {.cpp}; Double_t error = h->GetBinError(bin);; ~~~. \anchor associated-functions; ### Associated functions; One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated to each histogram.; When TH1::Fit is invoked, the fitted function is added to this list.; Given a histogram h, one can retrieve an associated function; with:; ~~~ {.cpp}; TF1 *myfunc = h->GetFunction(""myfunc"");; ~~~. \anchor operations-on-histograms; ## Operations on histograms. Many types of operations are supported on histograms or between histograms. - Addition of a histogram to the current histogram.; - Additions of two histograms with coefficients and storage into the current; histogram.; - Multiplications and Divisions are supported in the same way as additions.; - The Add, Divide and Multiply functions also exist to add, divide or multiply; a",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:13986,Availability,error,error,13986,"od; used is to double the bin size until the new value fits in the range,; merging bins two by two. This automatic binning options is extensively; used by the TTree::Draw function when histogramming Tree variables; with an unknown range.; This automatic binning option is supported for 1-D, 2-D and 3-D histograms. During filling, some statistics parameters are incremented to compute; the mean value and Root Mean Square with the maximum precision. In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S; a check is made that the bin contents do not exceed the maximum positive; capacity (127 or 32767). Histograms of all types may have positive; or/and negative bin contents. \anchor associated-errors; ### Associated errors; By default, for each bin, the sum of weights is computed at fill time.; One can also call TH1::Sumw2 to force the storage and computation; of the sum of the square of weights per bin.; If Sumw2 has been called, the error per bin is computed as the; sqrt(sum of squares of weights), otherwise the error is set equal; to the sqrt(bin content).; To return the error for a given bin number, do:; ~~~ {.cpp}; Double_t error = h->GetBinError(bin);; ~~~. \anchor associated-functions; ### Associated functions; One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated to each histogram.; When TH1::Fit is invoked, the fitted function is added to this list.; Given a histogram h, one can retrieve an associated function; with:; ~~~ {.cpp}; TF1 *myfunc = h->GetFunction(""myfunc"");; ~~~. \anchor operations-on-histograms; ## Operations on histograms. Many types of operations are supported on histograms or between histograms. - Addition of a histogram to the current histogram.; - Additions of two histograms with coefficients and storage into the current; histogram.; - Multiplications and Divisions are supported in the same way as additions.; - The Add, Divide and Multiply functions also exist to add, divide or multiply; a",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:14047,Availability,error,error,14047,"tomatic binning options is extensively; used by the TTree::Draw function when histogramming Tree variables; with an unknown range.; This automatic binning option is supported for 1-D, 2-D and 3-D histograms. During filling, some statistics parameters are incremented to compute; the mean value and Root Mean Square with the maximum precision. In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S; a check is made that the bin contents do not exceed the maximum positive; capacity (127 or 32767). Histograms of all types may have positive; or/and negative bin contents. \anchor associated-errors; ### Associated errors; By default, for each bin, the sum of weights is computed at fill time.; One can also call TH1::Sumw2 to force the storage and computation; of the sum of the square of weights per bin.; If Sumw2 has been called, the error per bin is computed as the; sqrt(sum of squares of weights), otherwise the error is set equal; to the sqrt(bin content).; To return the error for a given bin number, do:; ~~~ {.cpp}; Double_t error = h->GetBinError(bin);; ~~~. \anchor associated-functions; ### Associated functions; One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated to each histogram.; When TH1::Fit is invoked, the fitted function is added to this list.; Given a histogram h, one can retrieve an associated function; with:; ~~~ {.cpp}; TF1 *myfunc = h->GetFunction(""myfunc"");; ~~~. \anchor operations-on-histograms; ## Operations on histograms. Many types of operations are supported on histograms or between histograms. - Addition of a histogram to the current histogram.; - Additions of two histograms with coefficients and storage into the current; histogram.; - Multiplications and Divisions are supported in the same way as additions.; - The Add, Divide and Multiply functions also exist to add, divide or multiply; a histogram by a function. If a histogram has associated error bars (TH1::Sumw2 has been called),; the result",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:14103,Availability,error,error,14103,"Tree::Draw function when histogramming Tree variables; with an unknown range.; This automatic binning option is supported for 1-D, 2-D and 3-D histograms. During filling, some statistics parameters are incremented to compute; the mean value and Root Mean Square with the maximum precision. In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S; a check is made that the bin contents do not exceed the maximum positive; capacity (127 or 32767). Histograms of all types may have positive; or/and negative bin contents. \anchor associated-errors; ### Associated errors; By default, for each bin, the sum of weights is computed at fill time.; One can also call TH1::Sumw2 to force the storage and computation; of the sum of the square of weights per bin.; If Sumw2 has been called, the error per bin is computed as the; sqrt(sum of squares of weights), otherwise the error is set equal; to the sqrt(bin content).; To return the error for a given bin number, do:; ~~~ {.cpp}; Double_t error = h->GetBinError(bin);; ~~~. \anchor associated-functions; ### Associated functions; One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated to each histogram.; When TH1::Fit is invoked, the fitted function is added to this list.; Given a histogram h, one can retrieve an associated function; with:; ~~~ {.cpp}; TF1 *myfunc = h->GetFunction(""myfunc"");; ~~~. \anchor operations-on-histograms; ## Operations on histograms. Many types of operations are supported on histograms or between histograms. - Addition of a histogram to the current histogram.; - Additions of two histograms with coefficients and storage into the current; histogram.; - Multiplications and Divisions are supported in the same way as additions.; - The Add, Divide and Multiply functions also exist to add, divide or multiply; a histogram by a function. If a histogram has associated error bars (TH1::Sumw2 has been called),; the resulting error bars are also computed assuming independent",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:15008,Availability,error,error,15008,"r for a given bin number, do:; ~~~ {.cpp}; Double_t error = h->GetBinError(bin);; ~~~. \anchor associated-functions; ### Associated functions; One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated to each histogram.; When TH1::Fit is invoked, the fitted function is added to this list.; Given a histogram h, one can retrieve an associated function; with:; ~~~ {.cpp}; TF1 *myfunc = h->GetFunction(""myfunc"");; ~~~. \anchor operations-on-histograms; ## Operations on histograms. Many types of operations are supported on histograms or between histograms. - Addition of a histogram to the current histogram.; - Additions of two histograms with coefficients and storage into the current; histogram.; - Multiplications and Divisions are supported in the same way as additions.; - The Add, Divide and Multiply functions also exist to add, divide or multiply; a histogram by a function. If a histogram has associated error bars (TH1::Sumw2 has been called),; the resulting error bars are also computed assuming independent histograms.; In case of divisions, Binomial errors are also supported.; One can mark a histogram to be an ""average"" histogram by setting its bit kIsAverage via; myhist.SetBit(TH1::kIsAverage);; When adding (see TH1::Add) average histograms, the histograms are averaged and not summed. \anchor prof-hist; ### Projections of histograms. One can:. - make a 1-D projection of a 2-D histogram or Profile; see functions TH2::ProjectionX,Y, TH2::ProfileX,Y, TProfile::ProjectionX; - make a 1-D, 2-D or profile out of a 3-D histogram; see functions TH3::ProjectionZ, TH3::Project3D. One can fit these projections via:; ~~~ {.cpp}; TH2::FitSlicesX,Y, TH3::FitSlicesZ.; ~~~. \anchor random-numbers; ### Random Numbers and histograms. TH1::FillRandom can be used to randomly fill a histogram using; the contents of an existing TF1 function or another; TH1 histogram (for all dimensions).; For example, the following two statements create and fill a",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:15064,Availability,error,error,15064,"r for a given bin number, do:; ~~~ {.cpp}; Double_t error = h->GetBinError(bin);; ~~~. \anchor associated-functions; ### Associated functions; One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated to each histogram.; When TH1::Fit is invoked, the fitted function is added to this list.; Given a histogram h, one can retrieve an associated function; with:; ~~~ {.cpp}; TF1 *myfunc = h->GetFunction(""myfunc"");; ~~~. \anchor operations-on-histograms; ## Operations on histograms. Many types of operations are supported on histograms or between histograms. - Addition of a histogram to the current histogram.; - Additions of two histograms with coefficients and storage into the current; histogram.; - Multiplications and Divisions are supported in the same way as additions.; - The Add, Divide and Multiply functions also exist to add, divide or multiply; a histogram by a function. If a histogram has associated error bars (TH1::Sumw2 has been called),; the resulting error bars are also computed assuming independent histograms.; In case of divisions, Binomial errors are also supported.; One can mark a histogram to be an ""average"" histogram by setting its bit kIsAverage via; myhist.SetBit(TH1::kIsAverage);; When adding (see TH1::Add) average histograms, the histograms are averaged and not summed. \anchor prof-hist; ### Projections of histograms. One can:. - make a 1-D projection of a 2-D histogram or Profile; see functions TH2::ProjectionX,Y, TH2::ProfileX,Y, TProfile::ProjectionX; - make a 1-D, 2-D or profile out of a 3-D histogram; see functions TH3::ProjectionZ, TH3::Project3D. One can fit these projections via:; ~~~ {.cpp}; TH2::FitSlicesX,Y, TH3::FitSlicesZ.; ~~~. \anchor random-numbers; ### Random Numbers and histograms. TH1::FillRandom can be used to randomly fill a histogram using; the contents of an existing TF1 function or another; TH1 histogram (for all dimensions).; For example, the following two statements create and fill a",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:15158,Availability,error,errors,15158,"ed-functions; ### Associated functions; One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated to each histogram.; When TH1::Fit is invoked, the fitted function is added to this list.; Given a histogram h, one can retrieve an associated function; with:; ~~~ {.cpp}; TF1 *myfunc = h->GetFunction(""myfunc"");; ~~~. \anchor operations-on-histograms; ## Operations on histograms. Many types of operations are supported on histograms or between histograms. - Addition of a histogram to the current histogram.; - Additions of two histograms with coefficients and storage into the current; histogram.; - Multiplications and Divisions are supported in the same way as additions.; - The Add, Divide and Multiply functions also exist to add, divide or multiply; a histogram by a function. If a histogram has associated error bars (TH1::Sumw2 has been called),; the resulting error bars are also computed assuming independent histograms.; In case of divisions, Binomial errors are also supported.; One can mark a histogram to be an ""average"" histogram by setting its bit kIsAverage via; myhist.SetBit(TH1::kIsAverage);; When adding (see TH1::Add) average histograms, the histograms are averaged and not summed. \anchor prof-hist; ### Projections of histograms. One can:. - make a 1-D projection of a 2-D histogram or Profile; see functions TH2::ProjectionX,Y, TH2::ProfileX,Y, TProfile::ProjectionX; - make a 1-D, 2-D or profile out of a 3-D histogram; see functions TH3::ProjectionZ, TH3::Project3D. One can fit these projections via:; ~~~ {.cpp}; TH2::FitSlicesX,Y, TH3::FitSlicesZ.; ~~~. \anchor random-numbers; ### Random Numbers and histograms. TH1::FillRandom can be used to randomly fill a histogram using; the contents of an existing TF1 function or another; TH1 histogram (for all dimensions).; For example, the following two statements create and fill a histogram; 10000 times with a default gaussian distribution of mean 0 and sigma 1:; ~~~ {.cpp}; TH1F h1",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:16571,Availability,error,errors,16571,"nX,Y, TH2::ProfileX,Y, TProfile::ProjectionX; - make a 1-D, 2-D or profile out of a 3-D histogram; see functions TH3::ProjectionZ, TH3::Project3D. One can fit these projections via:; ~~~ {.cpp}; TH2::FitSlicesX,Y, TH3::FitSlicesZ.; ~~~. \anchor random-numbers; ### Random Numbers and histograms. TH1::FillRandom can be used to randomly fill a histogram using; the contents of an existing TF1 function or another; TH1 histogram (for all dimensions).; For example, the following two statements create and fill a histogram; 10000 times with a default gaussian distribution of mean 0 and sigma 1:; ~~~ {.cpp}; TH1F h1(""h1"", ""histo from a gaussian"", 100, -3, 3);; h1.FillRandom(""gaus"", 10000);; ~~~; TH1::GetRandom can be used to return a random number distributed; according to the contents of a histogram. \anchor making-a-copy; ### Making a copy of a histogram; Like for any other ROOT object derived from TObject, one can use; the Clone() function. This makes an identical copy of the original; histogram including all associated errors and functions, e.g.:; ~~~ {.cpp}; TH1F *hnew = (TH1F*)h->Clone(""hnew"");; ~~~. \anchor normalizing; ### Normalizing histograms. One can scale a histogram such that the bins integral is equal to; the normalization parameter via TH1::Scale(Double_t norm), where norm; is the desired normalization divided by the integral of the histogram. \anchor drawing-histograms; ## Drawing histograms. Histograms are drawn via the THistPainter class. Each histogram has; a pointer to its own painter (to be usable in a multithreaded program).; Many drawing options are supported.; See THistPainter::Paint() for more details. The same histogram can be drawn with different options in different pads.; When a histogram drawn in a pad is deleted, the histogram is; automatically removed from the pad or pads where it was drawn.; If a histogram is drawn in a pad, then filled again, the new status; of the histogram will be automatically shown in the pad next time; the pad is update",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:20802,Availability,error,errors,20802,"function via TH1::Fit.; See TH1::Fit(TF1*, Option_t *, Option_t *, Double_t, Double_t) for the fitting documentation and the possible [fitting options](\ref HFitOpt). The FitPanel can also be used for fitting an histogram. See the [FitPanel documentation](https://root.cern/manual/fitting/#using-the-fit-panel). \anchor saving-histograms; ## Saving/reading histograms to/from a ROOT file. The following statements create a ROOT file and store a histogram; on the file. Because TH1 derives from TNamed, the key identifier on; the file is the histogram name:; ~~~ {.cpp}; TFile f(""histos.root"", ""new"");; TH1F h1(""hgaus"", ""histo from a gaussian"", 100, -3, 3);; h1.FillRandom(""gaus"", 10000);; h1->Write();; ~~~; To read this histogram in another Root session, do:; ~~~ {.cpp}; TFile f(""histos.root"");; TH1F *h = (TH1F*)f.Get(""hgaus"");; ~~~; One can save all histograms in memory to the file by:; ~~~ {.cpp}; file->Write();; ~~~. \anchor misc; ## Miscellaneous operations. ~~~ {.cpp}; TH1::KolmogorovTest(): statistical test of compatibility in shape; between two histograms; TH1::Smooth() smooths the bin contents of a 1-d histogram; TH1::Integral() returns the integral of bin contents in a given bin range; TH1::GetMean(int axis) returns the mean value along axis; TH1::GetStdDev(int axis) returns the sigma distribution along axis; TH1::GetEntries() returns the number of entries; TH1::Reset() resets the bin contents and errors of a histogram; ~~~; IMPORTANT NOTE: The returned values for GetMean and GetStdDev depend on how the; histogram statistics are calculated. By default, if no range has been set, the; returned values are the (unbinned) ones calculated at fill time. If a range has been; set, however, the values are calculated using the bins in range; THIS IS TRUE EVEN; IF THE RANGE INCLUDES ALL BINS--use TAxis::SetRange(0, 0) to unset the range.; To ensure that the returned values are always those of the binned data stored in the; histogram, call TH1::ResetStats. See TH1::GetStats.; */",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:17536,Deployability,update,updated,17536,"e; the Clone() function. This makes an identical copy of the original; histogram including all associated errors and functions, e.g.:; ~~~ {.cpp}; TH1F *hnew = (TH1F*)h->Clone(""hnew"");; ~~~. \anchor normalizing; ### Normalizing histograms. One can scale a histogram such that the bins integral is equal to; the normalization parameter via TH1::Scale(Double_t norm), where norm; is the desired normalization divided by the integral of the histogram. \anchor drawing-histograms; ## Drawing histograms. Histograms are drawn via the THistPainter class. Each histogram has; a pointer to its own painter (to be usable in a multithreaded program).; Many drawing options are supported.; See THistPainter::Paint() for more details. The same histogram can be drawn with different options in different pads.; When a histogram drawn in a pad is deleted, the histogram is; automatically removed from the pad or pads where it was drawn.; If a histogram is drawn in a pad, then filled again, the new status; of the histogram will be automatically shown in the pad next time; the pad is updated. One does not need to redraw the histogram.; To draw the current version of a histogram in a pad, one can use; ~~~ {.cpp}; h->DrawCopy();; ~~~; This makes a clone (see Clone below) of the histogram. Once the clone; is drawn, the original histogram may be modified or deleted without; affecting the aspect of the clone. One can use TH1::SetMaximum() and TH1::SetMinimum() to force a particular; value for the maximum or the minimum scale on the plot. (For 1-D; histograms this means the y-axis, while for 2-D histograms these; functions affect the z-axis). TH1::UseCurrentStyle() can be used to change all histogram graphics; attributes to correspond to the current selected style.; This function must be called for each histogram.; In case one reads and draws many histograms from a file, one can force; the histograms to inherit automatically the current graphics style; by calling before gROOT->ForceStyle(). \anchor con",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:661,Integrability,interface,interface,661,"/** \addtogroup Histograms; @{; \class TH1C; \brief 1-D histogram with a byte per channel (see TH1 documentation); \class TH1S; \brief 1-D histogram with a short per channel (see TH1 documentation); \class TH1I; \brief 1-D histogram with an int per channel (see TH1 documentation); \class TH1L; \brief 1-D histogram with a long64 per channel (see TH1 documentation); \class TH1F; \brief 1-D histogram with a float per channel (see TH1 documentation); \class TH1D; \brief 1-D histogram with a double per channel (see TH1 documentation); @}; */; /** \class TH1; \ingroup Histograms; TH1 is the base class of all histogram classes in %ROOT. It provides the common interface for operations such as binning, filling, drawing, which; will be detailed below. -# [Creating histograms](\ref creating-histograms); - [Labelling axes](\ref labelling-axis); -# [Binning](\ref binning); - [Fix or variable bin size](\ref fix-var); - [Convention for numbering bins](\ref convention); - [Alphanumeric Bin Labels](\ref alpha); - [Histograms with automatic bins](\ref auto-bin); - [Rebinning](\ref rebinning); -# [Filling histograms](\ref filling-histograms); - [Associated errors](\ref associated-errors); - [Associated functions](\ref associated-functions); - [Projections of histograms](\ref prof-hist); - [Random Numbers and histograms](\ref random-numbers); - [Making a copy of a histogram](\ref making-a-copy); - [Normalizing histograms](\ref normalizing); -# [Drawing histograms](\ref drawing-histograms); - [Setting Drawing histogram contour levels (2-D hists only)](\ref cont-level); - [Setting histogram graphics attributes](\ref graph-att); - [Customising how axes are drawn](\ref axis-drawing); -# [Fitting histograms](\ref fitting-histograms); -# [Saving/reading histograms to/from a ROOT file](\ref saving-histograms); -# [Operations on histograms](\ref operations-on-histograms); -# [Miscellaneous operations](\ref misc). ROOT supports the following histogram types:. - 1-D histograms:; - TH1C : histogra",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:20892,Integrability,depend,depend,20892,"function via TH1::Fit.; See TH1::Fit(TF1*, Option_t *, Option_t *, Double_t, Double_t) for the fitting documentation and the possible [fitting options](\ref HFitOpt). The FitPanel can also be used for fitting an histogram. See the [FitPanel documentation](https://root.cern/manual/fitting/#using-the-fit-panel). \anchor saving-histograms; ## Saving/reading histograms to/from a ROOT file. The following statements create a ROOT file and store a histogram; on the file. Because TH1 derives from TNamed, the key identifier on; the file is the histogram name:; ~~~ {.cpp}; TFile f(""histos.root"", ""new"");; TH1F h1(""hgaus"", ""histo from a gaussian"", 100, -3, 3);; h1.FillRandom(""gaus"", 10000);; h1->Write();; ~~~; To read this histogram in another Root session, do:; ~~~ {.cpp}; TFile f(""histos.root"");; TH1F *h = (TH1F*)f.Get(""hgaus"");; ~~~; One can save all histograms in memory to the file by:; ~~~ {.cpp}; file->Write();; ~~~. \anchor misc; ## Miscellaneous operations. ~~~ {.cpp}; TH1::KolmogorovTest(): statistical test of compatibility in shape; between two histograms; TH1::Smooth() smooths the bin contents of a 1-d histogram; TH1::Integral() returns the integral of bin contents in a given bin range; TH1::GetMean(int axis) returns the mean value along axis; TH1::GetStdDev(int axis) returns the sigma distribution along axis; TH1::GetEntries() returns the number of entries; TH1::Reset() resets the bin contents and errors of a histogram; ~~~; IMPORTANT NOTE: The returned values for GetMean and GetStdDev depend on how the; histogram statistics are calculated. By default, if no range has been set, the; returned values are the (unbinned) ones calculated at fill time. If a range has been; set, however, the values are calculated using the bins in range; THIS IS TRUE EVEN; IF THE RANGE INCLUDES ALL BINS--use TAxis::SetRange(0, 0) to unset the range.; To ensure that the returned values are always those of the binned data stored in the; histogram, call TH1::ResetStats. See TH1::GetStats.; */",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:883,Modifiability,variab,variable,883,"channel (see TH1 documentation); \class TH1F; \brief 1-D histogram with a float per channel (see TH1 documentation); \class TH1D; \brief 1-D histogram with a double per channel (see TH1 documentation); @}; */; /** \class TH1; \ingroup Histograms; TH1 is the base class of all histogram classes in %ROOT. It provides the common interface for operations such as binning, filling, drawing, which; will be detailed below. -# [Creating histograms](\ref creating-histograms); - [Labelling axes](\ref labelling-axis); -# [Binning](\ref binning); - [Fix or variable bin size](\ref fix-var); - [Convention for numbering bins](\ref convention); - [Alphanumeric Bin Labels](\ref alpha); - [Histograms with automatic bins](\ref auto-bin); - [Rebinning](\ref rebinning); -# [Filling histograms](\ref filling-histograms); - [Associated errors](\ref associated-errors); - [Associated functions](\ref associated-functions); - [Projections of histograms](\ref prof-hist); - [Random Numbers and histograms](\ref random-numbers); - [Making a copy of a histogram](\ref making-a-copy); - [Normalizing histograms](\ref normalizing); -# [Drawing histograms](\ref drawing-histograms); - [Setting Drawing histogram contour levels (2-D hists only)](\ref cont-level); - [Setting histogram graphics attributes](\ref graph-att); - [Customising how axes are drawn](\ref axis-drawing); -# [Fitting histograms](\ref fitting-histograms); -# [Saving/reading histograms to/from a ROOT file](\ref saving-histograms); -# [Operations on histograms](\ref operations-on-histograms); -# [Miscellaneous operations](\ref misc). ROOT supports the following histogram types:. - 1-D histograms:; - TH1C : histograms with one byte per channel. Maximum bin content = 127; - TH1S : histograms with one short per channel. Maximum bin content = 32767; - TH1I : histograms with one int per channel. Maximum bin content = INT_MAX (\ref intmax ""*""); - TH1L : histograms with one long64 per channel. Maximum bin content = LLONG_MAX (\ref llongmax ""**""); - ",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:4595,Modifiability,variab,variable,4595,"ograms with one long64 per channel. Maximum bin content = LLONG_MAX (\ref llongmax ""**""); - TH3F : histograms with one float per channel. Maximum precision 7 digits, maximum integer bin content = +/-16777216 (\ref floatmax ""***""); - TH3D : histograms with one double per channel. Maximum precision 14 digits, maximum integer bin content = +/-9007199254740992 (\ref doublemax ""****""); - Profile histograms: See classes TProfile, TProfile2D and TProfile3D.; Profile histograms are used to display the mean value of Y and its standard deviation; for each bin in X. Profile histograms are in many cases an elegant; replacement of two-dimensional histograms : the inter-relation of two; measured quantities X and Y can always be visualized by a two-dimensional; histogram or scatter-plot; If Y is an unknown (but single-valued); approximate function of X, this function is displayed by a profile; histogram with much better precision than by a scatter-plot. <sup>; \anchor intmax (*) INT_MAX = 2147483647 is the [maximum value for a variable of type int.](https://docs.microsoft.com/en-us/cpp/c-language/cpp-integer-limits)<br>; \anchor llongmax (**) LLONG_MAX = 9223372036854775807 is the [maximum value for a variable of type long64.](https://docs.microsoft.com/en-us/cpp/c-language/cpp-integer-limits)<br>; \anchor floatmax (***) 2^24 = 16777216 is the [maximum integer that can be properly represented by a float32 with 23-bit mantissa.](https://stackoverflow.com/a/3793950/7471760)<br>; \anchor doublemax (****) 2^53 = 9007199254740992 is the [maximum integer that can be properly represented by a double64 with 52-bit mantissa.](https://stackoverflow.com/a/3793950/7471760); </sup>. The inheritance hierarchy looks as follows:. \image html classTH1__inherit__graph_org.svg width=100%. \anchor creating-histograms; ## Creating histograms. Histograms are created by invoking one of the constructors, e.g.; ~~~ {.cpp}; TH1F *h1 = new TH1F(""h1"", ""h1 title"", 100, 0, 4.4);; TH2F *h2 = new TH2F(""h2"", ""h2 t",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:4773,Modifiability,variab,variable,4773,"ion 7 digits, maximum integer bin content = +/-16777216 (\ref floatmax ""***""); - TH3D : histograms with one double per channel. Maximum precision 14 digits, maximum integer bin content = +/-9007199254740992 (\ref doublemax ""****""); - Profile histograms: See classes TProfile, TProfile2D and TProfile3D.; Profile histograms are used to display the mean value of Y and its standard deviation; for each bin in X. Profile histograms are in many cases an elegant; replacement of two-dimensional histograms : the inter-relation of two; measured quantities X and Y can always be visualized by a two-dimensional; histogram or scatter-plot; If Y is an unknown (but single-valued); approximate function of X, this function is displayed by a profile; histogram with much better precision than by a scatter-plot. <sup>; \anchor intmax (*) INT_MAX = 2147483647 is the [maximum value for a variable of type int.](https://docs.microsoft.com/en-us/cpp/c-language/cpp-integer-limits)<br>; \anchor llongmax (**) LLONG_MAX = 9223372036854775807 is the [maximum value for a variable of type long64.](https://docs.microsoft.com/en-us/cpp/c-language/cpp-integer-limits)<br>; \anchor floatmax (***) 2^24 = 16777216 is the [maximum integer that can be properly represented by a float32 with 23-bit mantissa.](https://stackoverflow.com/a/3793950/7471760)<br>; \anchor doublemax (****) 2^53 = 9007199254740992 is the [maximum integer that can be properly represented by a double64 with 52-bit mantissa.](https://stackoverflow.com/a/3793950/7471760); </sup>. The inheritance hierarchy looks as follows:. \image html classTH1__inherit__graph_org.svg width=100%. \anchor creating-histograms; ## Creating histograms. Histograms are created by invoking one of the constructors, e.g.; ~~~ {.cpp}; TH1F *h1 = new TH1F(""h1"", ""h1 title"", 100, 0, 4.4);; TH2F *h2 = new TH2F(""h2"", ""h2 title"", 40, 0, 4, 30, -3, 3);; ~~~; Histograms may also be created by:. - calling the Clone() function, see below; - making a projection from a 2-D or 3",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:5255,Modifiability,inherit,inheritance,5255,"nd Y can always be visualized by a two-dimensional; histogram or scatter-plot; If Y is an unknown (but single-valued); approximate function of X, this function is displayed by a profile; histogram with much better precision than by a scatter-plot. <sup>; \anchor intmax (*) INT_MAX = 2147483647 is the [maximum value for a variable of type int.](https://docs.microsoft.com/en-us/cpp/c-language/cpp-integer-limits)<br>; \anchor llongmax (**) LLONG_MAX = 9223372036854775807 is the [maximum value for a variable of type long64.](https://docs.microsoft.com/en-us/cpp/c-language/cpp-integer-limits)<br>; \anchor floatmax (***) 2^24 = 16777216 is the [maximum integer that can be properly represented by a float32 with 23-bit mantissa.](https://stackoverflow.com/a/3793950/7471760)<br>; \anchor doublemax (****) 2^53 = 9007199254740992 is the [maximum integer that can be properly represented by a double64 with 52-bit mantissa.](https://stackoverflow.com/a/3793950/7471760); </sup>. The inheritance hierarchy looks as follows:. \image html classTH1__inherit__graph_org.svg width=100%. \anchor creating-histograms; ## Creating histograms. Histograms are created by invoking one of the constructors, e.g.; ~~~ {.cpp}; TH1F *h1 = new TH1F(""h1"", ""h1 title"", 100, 0, 4.4);; TH2F *h2 = new TH2F(""h2"", ""h2 title"", 40, 0, 4, 30, -3, 3);; ~~~; Histograms may also be created by:. - calling the Clone() function, see below; - making a projection from a 2-D or 3-D histogram, see below; - reading a histogram from a file. When a histogram is created, a reference to it is automatically added; to the list of in-memory objects for the current file or directory.; Then the pointer to this histogram in the current directory can be found; by its name, doing:; ~~~ {.cpp}; TH1F *h1 = (TH1F*)gDirectory->FindObject(name);; ~~~. This default behaviour can be changed by:; ~~~ {.cpp}; h->SetDirectory(nullptr); // for the current histogram h; TH1::AddDirectory(kFALSE); // sets a global switch disabling the referencing; ~~",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:7352,Modifiability,variab,variable,7352,"e list of objects in memory.; When a file is closed, all histograms in memory associated with this file; are automatically deleted. \anchor labelling-axis; ### Labelling axes. Axis titles can be specified in the title argument of the constructor.; They must be separated by "";"":; ~~~ {.cpp}; TH1F* h=new TH1F(""h"", ""Histogram title;X Axis;Y Axis"", 100, 0, 1);; ~~~; The histogram title and the axis titles can be any TLatex string, and; are persisted if a histogram is written to a file. Any title can be omitted:; ~~~ {.cpp}; TH1F* h=new TH1F(""h"", ""Histogram title;;Y Axis"", 100, 0, 1);; TH1F* h=new TH1F(""h"", "";;Y Axis"", 100, 0, 1);; ~~~; The method SetTitle() has the same syntax:; ~~~ {.cpp}; h->SetTitle(""Histogram title;Another X title Axis"");; ~~~; Alternatively, the title of each axis can be set directly:; ~~~ {.cpp}; h->GetXaxis()->SetTitle(""X axis title"");; h->GetYaxis()->SetTitle(""Y axis title"");; ~~~; For bin labels see \ref binning. \anchor binning; ## Binning. \anchor fix-var; ### Fix or variable bin size. All histogram types support either fix or variable bin sizes.; 2-D histograms may have fix size bins along X and variable size bins; along Y or vice-versa. The functions to fill, manipulate, draw or access; histograms are identical in both cases. Each histogram always contains 3 axis objects of type TAxis: fXaxis, fYaxis and fZaxis.; To access the axis parameters, use:; ~~~ {.cpp}; TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; ~~~; See class TAxis for a description of all the access functions.; The axis range is always stored internally in double precision. \anchor convention; ### Convention for numbering bins. For all histogram types: nbins, xlow, xup; ~~~ {.cpp}; bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; ~~~; In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; For example, assuming a 3-D hist",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:7413,Modifiability,variab,variable,7413,"l histograms in memory associated with this file; are automatically deleted. \anchor labelling-axis; ### Labelling axes. Axis titles can be specified in the title argument of the constructor.; They must be separated by "";"":; ~~~ {.cpp}; TH1F* h=new TH1F(""h"", ""Histogram title;X Axis;Y Axis"", 100, 0, 1);; ~~~; The histogram title and the axis titles can be any TLatex string, and; are persisted if a histogram is written to a file. Any title can be omitted:; ~~~ {.cpp}; TH1F* h=new TH1F(""h"", ""Histogram title;;Y Axis"", 100, 0, 1);; TH1F* h=new TH1F(""h"", "";;Y Axis"", 100, 0, 1);; ~~~; The method SetTitle() has the same syntax:; ~~~ {.cpp}; h->SetTitle(""Histogram title;Another X title Axis"");; ~~~; Alternatively, the title of each axis can be set directly:; ~~~ {.cpp}; h->GetXaxis()->SetTitle(""X axis title"");; h->GetYaxis()->SetTitle(""Y axis title"");; ~~~; For bin labels see \ref binning. \anchor binning; ## Binning. \anchor fix-var; ### Fix or variable bin size. All histogram types support either fix or variable bin sizes.; 2-D histograms may have fix size bins along X and variable size bins; along Y or vice-versa. The functions to fill, manipulate, draw or access; histograms are identical in both cases. Each histogram always contains 3 axis objects of type TAxis: fXaxis, fYaxis and fZaxis.; To access the axis parameters, use:; ~~~ {.cpp}; TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; ~~~; See class TAxis for a description of all the access functions.; The axis range is always stored internally in double precision. \anchor convention; ### Convention for numbering bins. For all histogram types: nbins, xlow, xup; ~~~ {.cpp}; bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; ~~~; In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; For example, assuming a 3-D histogram with (binx, biny, binz), the function; ~~~ {.cpp",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:7484,Modifiability,variab,variable,7484,"anchor labelling-axis; ### Labelling axes. Axis titles can be specified in the title argument of the constructor.; They must be separated by "";"":; ~~~ {.cpp}; TH1F* h=new TH1F(""h"", ""Histogram title;X Axis;Y Axis"", 100, 0, 1);; ~~~; The histogram title and the axis titles can be any TLatex string, and; are persisted if a histogram is written to a file. Any title can be omitted:; ~~~ {.cpp}; TH1F* h=new TH1F(""h"", ""Histogram title;;Y Axis"", 100, 0, 1);; TH1F* h=new TH1F(""h"", "";;Y Axis"", 100, 0, 1);; ~~~; The method SetTitle() has the same syntax:; ~~~ {.cpp}; h->SetTitle(""Histogram title;Another X title Axis"");; ~~~; Alternatively, the title of each axis can be set directly:; ~~~ {.cpp}; h->GetXaxis()->SetTitle(""X axis title"");; h->GetYaxis()->SetTitle(""Y axis title"");; ~~~; For bin labels see \ref binning. \anchor binning; ## Binning. \anchor fix-var; ### Fix or variable bin size. All histogram types support either fix or variable bin sizes.; 2-D histograms may have fix size bins along X and variable size bins; along Y or vice-versa. The functions to fill, manipulate, draw or access; histograms are identical in both cases. Each histogram always contains 3 axis objects of type TAxis: fXaxis, fYaxis and fZaxis.; To access the axis parameters, use:; ~~~ {.cpp}; TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; ~~~; See class TAxis for a description of all the access functions.; The axis range is always stored internally in double precision. \anchor convention; ### Convention for numbering bins. For all histogram types: nbins, xlow, xup; ~~~ {.cpp}; bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; ~~~; In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; For example, assuming a 3-D histogram with (binx, biny, binz), the function; ~~~ {.cpp}; Int_t gbin = h->GetBin(binx, biny, binz);; ~~~; returns a global/linearized",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:12861,Modifiability,extend,extend,12861,"; h2->Fill(x, y, w); h3->Fill(x, y, z); h3->Fill(x, y, z, w); ~~~; or via one of the Fill functions accepting names described above.; The Fill functions compute the bin number corresponding to the given; x, y or z argument and increment this bin by the given weight.; The Fill functions return the bin number for 1-D histograms or global; bin number for 2-D and 3-D histograms.; If TH1::Sumw2 has been called before filling, the sum of squares of; weights is also stored.; One can also increment directly a bin number via TH1::AddBinContent; or replace the existing content via TH1::SetBinContent. Passing an; out-of-range bin to TH1::AddBinContent leads to undefined behavior.; To access the bin content of a given bin, do:; ~~~ {.cpp}; Double_t binContent = h->GetBinContent(bin);; ~~~. By default, the bin number is computed using the current axis ranges.; If the automatic binning option has been set via; ~~~ {.cpp}; h->SetCanExtend(TH1::kAllAxes);; ~~~; then, the Fill Function will automatically extend the axis range to; accomodate the new value specified in the Fill argument. The method; used is to double the bin size until the new value fits in the range,; merging bins two by two. This automatic binning options is extensively; used by the TTree::Draw function when histogramming Tree variables; with an unknown range.; This automatic binning option is supported for 1-D, 2-D and 3-D histograms. During filling, some statistics parameters are incremented to compute; the mean value and Root Mean Square with the maximum precision. In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S; a check is made that the bin contents do not exceed the maximum positive; capacity (127 or 32767). Histograms of all types may have positive; or/and negative bin contents. \anchor associated-errors; ### Associated errors; By default, for each bin, the sum of weights is computed at fill time.; One can also call TH1::Sumw2 to force the storage and computation; of the sum of the square of we",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:13156,Modifiability,variab,variables,13156,"ght.; The Fill functions return the bin number for 1-D histograms or global; bin number for 2-D and 3-D histograms.; If TH1::Sumw2 has been called before filling, the sum of squares of; weights is also stored.; One can also increment directly a bin number via TH1::AddBinContent; or replace the existing content via TH1::SetBinContent. Passing an; out-of-range bin to TH1::AddBinContent leads to undefined behavior.; To access the bin content of a given bin, do:; ~~~ {.cpp}; Double_t binContent = h->GetBinContent(bin);; ~~~. By default, the bin number is computed using the current axis ranges.; If the automatic binning option has been set via; ~~~ {.cpp}; h->SetCanExtend(TH1::kAllAxes);; ~~~; then, the Fill Function will automatically extend the axis range to; accomodate the new value specified in the Fill argument. The method; used is to double the bin size until the new value fits in the range,; merging bins two by two. This automatic binning options is extensively; used by the TTree::Draw function when histogramming Tree variables; with an unknown range.; This automatic binning option is supported for 1-D, 2-D and 3-D histograms. During filling, some statistics parameters are incremented to compute; the mean value and Root Mean Square with the maximum precision. In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S; a check is made that the bin contents do not exceed the maximum positive; capacity (127 or 32767). Histograms of all types may have positive; or/and negative bin contents. \anchor associated-errors; ### Associated errors; By default, for each bin, the sum of weights is computed at fill time.; One can also call TH1::Sumw2 to force the storage and computation; of the sum of the square of weights per bin.; If Sumw2 has been called, the error per bin is computed as the; sqrt(sum of squares of weights), otherwise the error is set equal; to the sqrt(bin content).; To return the error for a given bin number, do:; ~~~ {.cpp}; Double_t error = h->GetBin",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:18366,Modifiability,inherit,inherit,18366,"ads where it was drawn.; If a histogram is drawn in a pad, then filled again, the new status; of the histogram will be automatically shown in the pad next time; the pad is updated. One does not need to redraw the histogram.; To draw the current version of a histogram in a pad, one can use; ~~~ {.cpp}; h->DrawCopy();; ~~~; This makes a clone (see Clone below) of the histogram. Once the clone; is drawn, the original histogram may be modified or deleted without; affecting the aspect of the clone. One can use TH1::SetMaximum() and TH1::SetMinimum() to force a particular; value for the maximum or the minimum scale on the plot. (For 1-D; histograms this means the y-axis, while for 2-D histograms these; functions affect the z-axis). TH1::UseCurrentStyle() can be used to change all histogram graphics; attributes to correspond to the current selected style.; This function must be called for each histogram.; In case one reads and draws many histograms from a file, one can force; the histograms to inherit automatically the current graphics style; by calling before gROOT->ForceStyle(). \anchor cont-level; ### Setting Drawing histogram contour levels (2-D hists only). By default contours are automatically generated at equidistant; intervals. A default value of 20 levels is used. This can be modified; via TH1::SetContour() or TH1::SetContourLevel().; the contours level info is used by the drawing options ""cont"", ""surf"",; and ""lego"". \anchor graph-att; ### Setting histogram graphics attributes. The histogram classes inherit from the attribute classes:; TAttLine, TAttFill, and TAttMarker.; See the member functions of these classes for the list of options. \anchor axis-drawing; ### Customizing how axes are drawn. Use the functions of TAxis, such as; ~~~ {.cpp}; histogram.GetXaxis()->SetTicks(""+"");; histogram.GetYaxis()->SetRangeUser(1., 5.);; ~~~. \anchor fitting-histograms; ## Fitting histograms. Histograms (1-D, 2-D, 3-D and Profiles) can be fitted with a user; specified function ",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:18891,Modifiability,inherit,inherit,18891,"to force a particular; value for the maximum or the minimum scale on the plot. (For 1-D; histograms this means the y-axis, while for 2-D histograms these; functions affect the z-axis). TH1::UseCurrentStyle() can be used to change all histogram graphics; attributes to correspond to the current selected style.; This function must be called for each histogram.; In case one reads and draws many histograms from a file, one can force; the histograms to inherit automatically the current graphics style; by calling before gROOT->ForceStyle(). \anchor cont-level; ### Setting Drawing histogram contour levels (2-D hists only). By default contours are automatically generated at equidistant; intervals. A default value of 20 levels is used. This can be modified; via TH1::SetContour() or TH1::SetContourLevel().; the contours level info is used by the drawing options ""cont"", ""surf"",; and ""lego"". \anchor graph-att; ### Setting histogram graphics attributes. The histogram classes inherit from the attribute classes:; TAttLine, TAttFill, and TAttMarker.; See the member functions of these classes for the list of options. \anchor axis-drawing; ### Customizing how axes are drawn. Use the functions of TAxis, such as; ~~~ {.cpp}; histogram.GetXaxis()->SetTicks(""+"");; histogram.GetYaxis()->SetRangeUser(1., 5.);; ~~~. \anchor fitting-histograms; ## Fitting histograms. Histograms (1-D, 2-D, 3-D and Profiles) can be fitted with a user; specified function or a pre-defined function via TH1::Fit.; See TH1::Fit(TF1*, Option_t *, Option_t *, Double_t, Double_t) for the fitting documentation and the possible [fitting options](\ref HFitOpt). The FitPanel can also be used for fitting an histogram. See the [FitPanel documentation](https://root.cern/manual/fitting/#using-the-fit-panel). \anchor saving-histograms; ## Saving/reading histograms to/from a ROOT file. The following statements create a ROOT file and store a histogram; on the file. Because TH1 derives from TNamed, the key identifier on; the file i",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:7570,Security,access,access,7570,"t of the constructor.; They must be separated by "";"":; ~~~ {.cpp}; TH1F* h=new TH1F(""h"", ""Histogram title;X Axis;Y Axis"", 100, 0, 1);; ~~~; The histogram title and the axis titles can be any TLatex string, and; are persisted if a histogram is written to a file. Any title can be omitted:; ~~~ {.cpp}; TH1F* h=new TH1F(""h"", ""Histogram title;;Y Axis"", 100, 0, 1);; TH1F* h=new TH1F(""h"", "";;Y Axis"", 100, 0, 1);; ~~~; The method SetTitle() has the same syntax:; ~~~ {.cpp}; h->SetTitle(""Histogram title;Another X title Axis"");; ~~~; Alternatively, the title of each axis can be set directly:; ~~~ {.cpp}; h->GetXaxis()->SetTitle(""X axis title"");; h->GetYaxis()->SetTitle(""Y axis title"");; ~~~; For bin labels see \ref binning. \anchor binning; ## Binning. \anchor fix-var; ### Fix or variable bin size. All histogram types support either fix or variable bin sizes.; 2-D histograms may have fix size bins along X and variable size bins; along Y or vice-versa. The functions to fill, manipulate, draw or access; histograms are identical in both cases. Each histogram always contains 3 axis objects of type TAxis: fXaxis, fYaxis and fZaxis.; To access the axis parameters, use:; ~~~ {.cpp}; TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; ~~~; See class TAxis for a description of all the access functions.; The axis range is always stored internally in double precision. \anchor convention; ### Convention for numbering bins. For all histogram types: nbins, xlow, xup; ~~~ {.cpp}; bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; ~~~; In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; For example, assuming a 3-D histogram with (binx, biny, binz), the function; ~~~ {.cpp}; Int_t gbin = h->GetBin(binx, biny, binz);; ~~~; returns a global/linearized gbin number. This global gbin is useful; to access the bin content/error information indepen",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:7710,Security,access,access,7710,"tle and the axis titles can be any TLatex string, and; are persisted if a histogram is written to a file. Any title can be omitted:; ~~~ {.cpp}; TH1F* h=new TH1F(""h"", ""Histogram title;;Y Axis"", 100, 0, 1);; TH1F* h=new TH1F(""h"", "";;Y Axis"", 100, 0, 1);; ~~~; The method SetTitle() has the same syntax:; ~~~ {.cpp}; h->SetTitle(""Histogram title;Another X title Axis"");; ~~~; Alternatively, the title of each axis can be set directly:; ~~~ {.cpp}; h->GetXaxis()->SetTitle(""X axis title"");; h->GetYaxis()->SetTitle(""Y axis title"");; ~~~; For bin labels see \ref binning. \anchor binning; ## Binning. \anchor fix-var; ### Fix or variable bin size. All histogram types support either fix or variable bin sizes.; 2-D histograms may have fix size bins along X and variable size bins; along Y or vice-versa. The functions to fill, manipulate, draw or access; histograms are identical in both cases. Each histogram always contains 3 axis objects of type TAxis: fXaxis, fYaxis and fZaxis.; To access the axis parameters, use:; ~~~ {.cpp}; TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; ~~~; See class TAxis for a description of all the access functions.; The axis range is always stored internally in double precision. \anchor convention; ### Convention for numbering bins. For all histogram types: nbins, xlow, xup; ~~~ {.cpp}; bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; ~~~; In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; For example, assuming a 3-D histogram with (binx, biny, binz), the function; ~~~ {.cpp}; Int_t gbin = h->GetBin(binx, biny, binz);; ~~~; returns a global/linearized gbin number. This global gbin is useful; to access the bin content/error information independently of the dimension.; Note that to access the information other than bin content and errors; one should use the TAxis object directly with e.g.:; ~~~ {.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:7895,Security,access,access,7895," h=new TH1F(""h"", ""Histogram title;;Y Axis"", 100, 0, 1);; TH1F* h=new TH1F(""h"", "";;Y Axis"", 100, 0, 1);; ~~~; The method SetTitle() has the same syntax:; ~~~ {.cpp}; h->SetTitle(""Histogram title;Another X title Axis"");; ~~~; Alternatively, the title of each axis can be set directly:; ~~~ {.cpp}; h->GetXaxis()->SetTitle(""X axis title"");; h->GetYaxis()->SetTitle(""Y axis title"");; ~~~; For bin labels see \ref binning. \anchor binning; ## Binning. \anchor fix-var; ### Fix or variable bin size. All histogram types support either fix or variable bin sizes.; 2-D histograms may have fix size bins along X and variable size bins; along Y or vice-versa. The functions to fill, manipulate, draw or access; histograms are identical in both cases. Each histogram always contains 3 axis objects of type TAxis: fXaxis, fYaxis and fZaxis.; To access the axis parameters, use:; ~~~ {.cpp}; TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; ~~~; See class TAxis for a description of all the access functions.; The axis range is always stored internally in double precision. \anchor convention; ### Convention for numbering bins. For all histogram types: nbins, xlow, xup; ~~~ {.cpp}; bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; ~~~; In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; For example, assuming a 3-D histogram with (binx, biny, binz), the function; ~~~ {.cpp}; Int_t gbin = h->GetBin(binx, biny, binz);; ~~~; returns a global/linearized gbin number. This global gbin is useful; to access the bin content/error information independently of the dimension.; Note that to access the information other than bin content and errors; one should use the TAxis object directly with e.g.:; ~~~ {.cpp}; Double_t xcenter = h3->GetZaxis()->GetBinCenter(27);; ~~~; returns the center along z of bin number 27 (not the global bin); in the 3-D histogra",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:8524,Security,access,access,8524,"fill, manipulate, draw or access; histograms are identical in both cases. Each histogram always contains 3 axis objects of type TAxis: fXaxis, fYaxis and fZaxis.; To access the axis parameters, use:; ~~~ {.cpp}; TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; ~~~; See class TAxis for a description of all the access functions.; The axis range is always stored internally in double precision. \anchor convention; ### Convention for numbering bins. For all histogram types: nbins, xlow, xup; ~~~ {.cpp}; bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; ~~~; In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; For example, assuming a 3-D histogram with (binx, biny, binz), the function; ~~~ {.cpp}; Int_t gbin = h->GetBin(binx, biny, binz);; ~~~; returns a global/linearized gbin number. This global gbin is useful; to access the bin content/error information independently of the dimension.; Note that to access the information other than bin content and errors; one should use the TAxis object directly with e.g.:; ~~~ {.cpp}; Double_t xcenter = h3->GetZaxis()->GetBinCenter(27);; ~~~; returns the center along z of bin number 27 (not the global bin); in the 3-D histogram h3. \anchor alpha; ### Alphanumeric Bin Labels. By default, a histogram axis is drawn with its numeric bin labels.; One can specify alphanumeric labels instead with:. - call TAxis::SetBinLabel(bin, label);; This can always be done before or after filling.; When the histogram is drawn, bin labels will be automatically drawn.; See examples labels1.C and labels2.C; - call to a Fill function with one of the arguments being a string, e.g.; ~~~ {.cpp}; hist1->Fill(somename, weight);; hist2->Fill(x, somename, weight);; hist2->Fill(somename, y, weight);; hist2->Fill(somenamex, somenamey, weight);; ~~~; See examples hlabels1.C and hlabels2.C; - via TTree::Draw. see",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:8611,Security,access,access,8611,"objects of type TAxis: fXaxis, fYaxis and fZaxis.; To access the axis parameters, use:; ~~~ {.cpp}; TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; ~~~; See class TAxis for a description of all the access functions.; The axis range is always stored internally in double precision. \anchor convention; ### Convention for numbering bins. For all histogram types: nbins, xlow, xup; ~~~ {.cpp}; bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; ~~~; In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; For example, assuming a 3-D histogram with (binx, biny, binz), the function; ~~~ {.cpp}; Int_t gbin = h->GetBin(binx, biny, binz);; ~~~; returns a global/linearized gbin number. This global gbin is useful; to access the bin content/error information independently of the dimension.; Note that to access the information other than bin content and errors; one should use the TAxis object directly with e.g.:; ~~~ {.cpp}; Double_t xcenter = h3->GetZaxis()->GetBinCenter(27);; ~~~; returns the center along z of bin number 27 (not the global bin); in the 3-D histogram h3. \anchor alpha; ### Alphanumeric Bin Labels. By default, a histogram axis is drawn with its numeric bin labels.; One can specify alphanumeric labels instead with:. - call TAxis::SetBinLabel(bin, label);; This can always be done before or after filling.; When the histogram is drawn, bin labels will be automatically drawn.; See examples labels1.C and labels2.C; - call to a Fill function with one of the arguments being a string, e.g.; ~~~ {.cpp}; hist1->Fill(somename, weight);; hist2->Fill(x, somename, weight);; hist2->Fill(somename, y, weight);; hist2->Fill(somenamex, somenamey, weight);; ~~~; See examples hlabels1.C and hlabels2.C; - via TTree::Draw. see for example cernstaff.C; ~~~ {.cpp}; tree.Draw(""Nation::Division"");; ~~~; where ""Nation"" and ""Division"" are two ",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:12540,Security,access,access,12540,"a new histogram with the rebinned contents.; If bin errors were stored, they are recomputed during the rebinning. \anchor filling-histograms; ## Filling histograms. A histogram is typically filled with statements like:; ~~~ {.cpp}; h1->Fill(x);; h1->Fill(x, w); //fill with weight; h2->Fill(x, y); h2->Fill(x, y, w); h3->Fill(x, y, z); h3->Fill(x, y, z, w); ~~~; or via one of the Fill functions accepting names described above.; The Fill functions compute the bin number corresponding to the given; x, y or z argument and increment this bin by the given weight.; The Fill functions return the bin number for 1-D histograms or global; bin number for 2-D and 3-D histograms.; If TH1::Sumw2 has been called before filling, the sum of squares of; weights is also stored.; One can also increment directly a bin number via TH1::AddBinContent; or replace the existing content via TH1::SetBinContent. Passing an; out-of-range bin to TH1::AddBinContent leads to undefined behavior.; To access the bin content of a given bin, do:; ~~~ {.cpp}; Double_t binContent = h->GetBinContent(bin);; ~~~. By default, the bin number is computed using the current axis ranges.; If the automatic binning option has been set via; ~~~ {.cpp}; h->SetCanExtend(TH1::kAllAxes);; ~~~; then, the Fill Function will automatically extend the axis range to; accomodate the new value specified in the Fill argument. The method; used is to double the bin size until the new value fits in the range,; merging bins two by two. This automatic binning options is extensively; used by the TTree::Draw function when histogramming Tree variables; with an unknown range.; This automatic binning option is supported for 1-D, 2-D and 3-D histograms. During filling, some statistics parameters are incremented to compute; the mean value and Root Mean Square with the maximum precision. In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S; a check is made that the bin contents do not exceed the maximum positive; capacity (127 or 3276",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:20396,Testability,test,test,20396,"function via TH1::Fit.; See TH1::Fit(TF1*, Option_t *, Option_t *, Double_t, Double_t) for the fitting documentation and the possible [fitting options](\ref HFitOpt). The FitPanel can also be used for fitting an histogram. See the [FitPanel documentation](https://root.cern/manual/fitting/#using-the-fit-panel). \anchor saving-histograms; ## Saving/reading histograms to/from a ROOT file. The following statements create a ROOT file and store a histogram; on the file. Because TH1 derives from TNamed, the key identifier on; the file is the histogram name:; ~~~ {.cpp}; TFile f(""histos.root"", ""new"");; TH1F h1(""hgaus"", ""histo from a gaussian"", 100, -3, 3);; h1.FillRandom(""gaus"", 10000);; h1->Write();; ~~~; To read this histogram in another Root session, do:; ~~~ {.cpp}; TFile f(""histos.root"");; TH1F *h = (TH1F*)f.Get(""hgaus"");; ~~~; One can save all histograms in memory to the file by:; ~~~ {.cpp}; file->Write();; ~~~. \anchor misc; ## Miscellaneous operations. ~~~ {.cpp}; TH1::KolmogorovTest(): statistical test of compatibility in shape; between two histograms; TH1::Smooth() smooths the bin contents of a 1-d histogram; TH1::Integral() returns the integral of bin contents in a given bin range; TH1::GetMean(int axis) returns the mean value along axis; TH1::GetStdDev(int axis) returns the sigma distribution along axis; TH1::GetEntries() returns the number of entries; TH1::Reset() resets the bin contents and errors of a histogram; ~~~; IMPORTANT NOTE: The returned values for GetMean and GetStdDev depend on how the; histogram statistics are calculated. By default, if no range has been set, the; returned values are the (unbinned) ones calculated at fill time. If a range has been; set, however, the values are calculated using the bins in range; THIS IS TRUE EVEN; IF THE RANGE INCLUDES ALL BINS--use TAxis::SetRange(0, 0) to unset the range.; To ensure that the returned values are always those of the binned data stored in the; histogram, call TH1::ResetStats. See TH1::GetStats.; */",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:17070,Usability,usab,usable,17070,"am; 10000 times with a default gaussian distribution of mean 0 and sigma 1:; ~~~ {.cpp}; TH1F h1(""h1"", ""histo from a gaussian"", 100, -3, 3);; h1.FillRandom(""gaus"", 10000);; ~~~; TH1::GetRandom can be used to return a random number distributed; according to the contents of a histogram. \anchor making-a-copy; ### Making a copy of a histogram; Like for any other ROOT object derived from TObject, one can use; the Clone() function. This makes an identical copy of the original; histogram including all associated errors and functions, e.g.:; ~~~ {.cpp}; TH1F *hnew = (TH1F*)h->Clone(""hnew"");; ~~~. \anchor normalizing; ### Normalizing histograms. One can scale a histogram such that the bins integral is equal to; the normalization parameter via TH1::Scale(Double_t norm), where norm; is the desired normalization divided by the integral of the histogram. \anchor drawing-histograms; ## Drawing histograms. Histograms are drawn via the THistPainter class. Each histogram has; a pointer to its own painter (to be usable in a multithreaded program).; Many drawing options are supported.; See THistPainter::Paint() for more details. The same histogram can be drawn with different options in different pads.; When a histogram drawn in a pad is deleted, the histogram is; automatically removed from the pad or pads where it was drawn.; If a histogram is drawn in a pad, then filled again, the new status; of the histogram will be automatically shown in the pad next time; the pad is updated. One does not need to redraw the histogram.; To draw the current version of a histogram in a pad, one can use; ~~~ {.cpp}; h->DrawCopy();; ~~~; This makes a clone (see Clone below) of the histogram. Once the clone; is drawn, the original histogram may be modified or deleted without; affecting the aspect of the clone. One can use TH1::SetMaximum() and TH1::SetMinimum() to force a particular; value for the maximum or the minimum scale on the plot. (For 1-D; histograms this means the y-axis, while for 2-D histogr",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:10,Testability,log,logic,10,"//special logic to support the case where the same object is; //added multiple times in fFunctions.; //This case happens when the same object is added with different; //drawing modes; //In the loop below we must be careful with objects (eg TCutG) that may; // have been added to the list of functions of several histograms; //and may have been already deleted.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:215,Safety,avoid,avoid,215,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for fix bin size histograms.; /// Creates the main histogram structure.; ///; /// \param[in] name name of histogram (avoid blanks); /// \param[in] title histogram title.; /// If title is of the form `stringt;stringx;stringy;stringz`,; /// the histogram title is set to `stringt`,; /// the x axis title to `stringx`, the y axis title to `stringy`, etc.; /// \param[in] nbins number of bins; /// \param[in] xlow low edge of first bin; /// \param[in] xup upper edge of last bin (not included in last bin)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:102,Modifiability,variab,variable,102,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for variable bin size histograms using an input array of type float.; /// Creates the main histogram structure.; ///; /// \param[in] name name of histogram (avoid blanks); /// \param[in] title histogram title.; /// If title is of the form `stringt;stringx;stringy;stringz`; /// the histogram title is set to `stringt`,; /// the x axis title to `stringx`, the y axis title to `stringy`, etc.; /// \param[in] nbins number of bins; /// \param[in] xbins array of low-edges for each bin.; /// This is an array of type float and size nbins+1",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:255,Safety,avoid,avoid,255,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for variable bin size histograms using an input array of type float.; /// Creates the main histogram structure.; ///; /// \param[in] name name of histogram (avoid blanks); /// \param[in] title histogram title.; /// If title is of the form `stringt;stringx;stringy;stringz`; /// the histogram title is set to `stringt`,; /// the x axis title to `stringx`, the y axis title to `stringy`, etc.; /// \param[in] nbins number of bins; /// \param[in] xbins array of low-edges for each bin.; /// This is an array of type float and size nbins+1",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:102,Modifiability,variab,variable,102,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for variable bin size histograms using an input array of type double.; ///; /// \param[in] name name of histogram (avoid blanks); /// \param[in] title histogram title.; /// If title is of the form `stringt;stringx;stringy;stringz`; /// the histogram title is set to `stringt`,; /// the x axis title to `stringx`, the y axis title to `stringy`, etc.; /// \param[in] nbins number of bins; /// \param[in] xbins array of low-edges for each bin.; /// This is an array of type double and size nbins+1",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:213,Safety,avoid,avoid,213,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for variable bin size histograms using an input array of type double.; ///; /// \param[in] name name of histogram (avoid blanks); /// \param[in] title histogram title.; /// If title is of the form `stringt;stringx;stringy;stringz`; /// the histogram title is set to `stringt`,; /// the x axis title to `stringx`, the y axis title to `stringy`, etc.; /// \param[in] nbins number of bins; /// \param[in] xbins array of low-edges for each bin.; /// This is an array of type double and size nbins+1",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:140,Availability,error,errors,140,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: `this = this + c1*f1`; /// if errors are defined (see TH1::Sumw2), errors are also recalculated.; ///; /// By default, the function is computed at the centre of the bin.; /// if option ""I"" is specified (1-d histogram only), the integral of the; /// function in each bin is used instead of the value of the function at; /// the centre of the bin.; ///; /// Only bins inside the function range are recomputed.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Add; ///; /// The function return kFALSE if the Add operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:177,Availability,error,errors,177,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: `this = this + c1*f1`; /// if errors are defined (see TH1::Sumw2), errors are also recalculated.; ///; /// By default, the function is computed at the centre of the bin.; /// if option ""I"" is specified (1-d histogram only), the integral of the; /// function in each bin is used instead of the value of the function at; /// the centre of the bin.; ///; /// Only bins inside the function range are recomputed.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Add; ///; /// The function return kFALSE if the Add operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:569,Availability,error,errors,569,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: `this = this + c1*f1`; /// if errors are defined (see TH1::Sumw2), errors are also recalculated.; ///; /// By default, the function is computed at the centre of the bin.; /// if option ""I"" is specified (1-d histogram only), the integral of the; /// function in each bin is used instead of the value of the function at; /// the centre of the bin.; ///; /// Only bins inside the function range are recomputed.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Add; ///; /// The function return kFALSE if the Add operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: `this = this + c1*f1`; /// if errors are defined (see TH1::Sumw2), errors are also recalculated.; ///; /// By default, the function is computed at the centre of the bin.; /// if option ""I"" is specified (1-d histogram only), the integral of the; /// function in each bin is used instead of the value of the function at; /// the centre of the bin.; ///; /// Only bins inside the function range are recomputed.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Add; ///; /// The function return kFALSE if the Add operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:140,Availability,error,errors,140,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: `this = this + c1*h1`; /// If errors are defined (see TH1::Sumw2), errors are also recalculated.; ///; /// Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; ///; /// Note also that adding histogram with labels is not supported, histogram will be; /// added merging them by bin number independently of the labels.; /// For adding histogram with labels one should use TH1::Merge; ///; /// SPECIAL CASE (Average/Efficiency histograms); /// For histograms representing averages or efficiencies, one should compute the average; /// of the two histograms and not the sum. One can mark a histogram to be an average; /// histogram by setting its bit kIsAverage with; /// myhist.SetBit(TH1::kIsAverage);; /// Note that the two histograms must have their kIsAverage bit set; ///; /// IMPORTANT NOTE1: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Add; ///; /// IMPORTANT NOTE2: if h1 has a normalisation factor, the normalisation factor; /// is used , ie this = this + c1*factor*h1; /// Use the other TH1::Add function if you do not want this feature; ///; /// IMPORTANT NOTE3: You should be careful about the statistics of the; /// returned histogram, whose statistics may be binned or unbinned,; /// depending on whether c1 is negative, whether TAxis::kAxisRange is true,; /// and whether TH1::ResetStats has been called on either this or h1.; /// See TH1::GetStats.; ///; /// The function return kFALSE if the Add operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:177,Availability,error,errors,177,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: `this = this + c1*h1`; /// If errors are defined (see TH1::Sumw2), errors are also recalculated.; ///; /// Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; ///; /// Note also that adding histogram with labels is not supported, histogram will be; /// added merging them by bin number independently of the labels.; /// For adding histogram with labels one should use TH1::Merge; ///; /// SPECIAL CASE (Average/Efficiency histograms); /// For histograms representing averages or efficiencies, one should compute the average; /// of the two histograms and not the sum. One can mark a histogram to be an average; /// histogram by setting its bit kIsAverage with; /// myhist.SetBit(TH1::kIsAverage);; /// Note that the two histograms must have their kIsAverage bit set; ///; /// IMPORTANT NOTE1: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Add; ///; /// IMPORTANT NOTE2: if h1 has a normalisation factor, the normalisation factor; /// is used , ie this = this + c1*factor*h1; /// Use the other TH1::Add function if you do not want this feature; ///; /// IMPORTANT NOTE3: You should be careful about the statistics of the; /// returned histogram, whose statistics may be binned or unbinned,; /// depending on whether c1 is negative, whether TAxis::kAxisRange is true,; /// and whether TH1::ResetStats has been called on either this or h1.; /// See TH1::GetStats.; ///; /// The function return kFALSE if the Add operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:972,Availability,error,errors,972,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: `this = this + c1*h1`; /// If errors are defined (see TH1::Sumw2), errors are also recalculated.; ///; /// Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; ///; /// Note also that adding histogram with labels is not supported, histogram will be; /// added merging them by bin number independently of the labels.; /// For adding histogram with labels one should use TH1::Merge; ///; /// SPECIAL CASE (Average/Efficiency histograms); /// For histograms representing averages or efficiencies, one should compute the average; /// of the two histograms and not the sum. One can mark a histogram to be an average; /// histogram by setting its bit kIsAverage with; /// myhist.SetBit(TH1::kIsAverage);; /// Note that the two histograms must have their kIsAverage bit set; ///; /// IMPORTANT NOTE1: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Add; ///; /// IMPORTANT NOTE2: if h1 has a normalisation factor, the normalisation factor; /// is used , ie this = this + c1*factor*h1; /// Use the other TH1::Add function if you do not want this feature; ///; /// IMPORTANT NOTE3: You should be careful about the statistics of the; /// returned histogram, whose statistics may be binned or unbinned,; /// depending on whether c1 is negative, whether TAxis::kAxisRange is true,; /// and whether TH1::ResetStats has been called on either this or h1.; /// See TH1::GetStats.; ///; /// The function return kFALSE if the Add operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1487,Integrability,depend,depending,1487,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: `this = this + c1*h1`; /// If errors are defined (see TH1::Sumw2), errors are also recalculated.; ///; /// Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; ///; /// Note also that adding histogram with labels is not supported, histogram will be; /// added merging them by bin number independently of the labels.; /// For adding histogram with labels one should use TH1::Merge; ///; /// SPECIAL CASE (Average/Efficiency histograms); /// For histograms representing averages or efficiencies, one should compute the average; /// of the two histograms and not the sum. One can mark a histogram to be an average; /// histogram by setting its bit kIsAverage with; /// myhist.SetBit(TH1::kIsAverage);; /// Note that the two histograms must have their kIsAverage bit set; ///; /// IMPORTANT NOTE1: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Add; ///; /// IMPORTANT NOTE2: if h1 has a normalisation factor, the normalisation factor; /// is used , ie this = this + c1*factor*h1; /// Use the other TH1::Add function if you do not want this feature; ///; /// IMPORTANT NOTE3: You should be careful about the statistics of the; /// returned histogram, whose statistics may be binned or unbinned,; /// depending on whether c1 is negative, whether TAxis::kAxisRange is true,; /// and whether TH1::ResetStats has been called on either this or h1.; /// See TH1::GetStats.; ///; /// The function return kFALSE if the Add operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: `this = this + c1*h1`; /// If errors are defined (see TH1::Sumw2), errors are also recalculated.; ///; /// Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; ///; /// Note also that adding histogram with labels is not supported, histogram will be; /// added merging them by bin number independently of the labels.; /// For adding histogram with labels one should use TH1::Merge; ///; /// SPECIAL CASE (Average/Efficiency histograms); /// For histograms representing averages or efficiencies, one should compute the average; /// of the two histograms and not the sum. One can mark a histogram to be an average; /// histogram by setting its bit kIsAverage with; /// myhist.SetBit(TH1::kIsAverage);; /// Note that the two histograms must have their kIsAverage bit set; ///; /// IMPORTANT NOTE1: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Add; ///; /// IMPORTANT NOTE2: if h1 has a normalisation factor, the normalisation factor; /// is used , ie this = this + c1*factor*h1; /// Use the other TH1::Add function if you do not want this feature; ///; /// IMPORTANT NOTE3: You should be careful about the statistics of the; /// returned histogram, whose statistics may be binned or unbinned,; /// depending on whether c1 is negative, whether TAxis::kAxisRange is true,; /// and whether TH1::ResetStats has been called on either this or h1.; /// See TH1::GetStats.; ///; /// The function return kFALSE if the Add operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:128,Safety,risk,risks,128,"// statistics can be preserved only in case of positive coefficients; // otherwise with negative c1 (histogram subtraction) one risks to get negative variances",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:84,Integrability,depend,depending,84,"// need to initialize to zero s1 and s2 since; // GetStats fills only used elements depending on dimension and type",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:39,Availability,error,errors,39,"// consider all special cases when bin errors are zero; // see http://root-forum.cern.ch/viewtopic.php?f=3&t=13299",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:20,Availability,error,error,20,"// use an estimated error from the global histogram scale",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:20,Availability,error,error,20,"// use an estimated error from the global histogram scale",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:3,Deployability,update,update,3,"// update statistics (do here to avoid changes by SetBinContent)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:33,Safety,avoid,avoid,33,"// update statistics (do here to avoid changes by SetBinContent)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:192,Availability,error,errors,192,"////////////////////////////////////////////////////////////////////////////////; /// Replace contents of this histogram by the addition of h1 and h2.; ///; /// `this = c1*h1 + c2*h2`; /// if errors are defined (see TH1::Sumw2), errors are also recalculated; ///; /// Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; ///; /// Note also that adding histogram with labels is not supported, histogram will be; /// added merging them by bin number independently of the labels.; /// For adding histogram ith labels one should use TH1::Merge; ///; /// SPECIAL CASE (Average/Efficiency histograms); /// For histograms representing averages or efficiencies, one should compute the average; /// of the two histograms and not the sum. One can mark a histogram to be an average; /// histogram by setting its bit kIsAverage with; /// myhist.SetBit(TH1::kIsAverage);; /// Note that the two histograms must have their kIsAverage bit set; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Add; ///; /// IMPORTANT NOTE2: You should be careful about the statistics of the; /// returned histogram, whose statistics may be binned or unbinned,; /// depending on whether c1 is negative, whether TAxis::kAxisRange is true,; /// and whether TH1::ResetStats has been called on either this or h1.; /// See TH1::GetStats.; ///; /// ANOTHER SPECIAL CASE : h1 = h2 and c2 < 0; /// do a scaling this = c1 * h1 / (bin Volume); ///; /// The function returns kFALSE if the Add operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:229,Availability,error,errors,229,"////////////////////////////////////////////////////////////////////////////////; /// Replace contents of this histogram by the addition of h1 and h2.; ///; /// `this = c1*h1 + c2*h2`; /// if errors are defined (see TH1::Sumw2), errors are also recalculated; ///; /// Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; ///; /// Note also that adding histogram with labels is not supported, histogram will be; /// added merging them by bin number independently of the labels.; /// For adding histogram ith labels one should use TH1::Merge; ///; /// SPECIAL CASE (Average/Efficiency histograms); /// For histograms representing averages or efficiencies, one should compute the average; /// of the two histograms and not the sum. One can mark a histogram to be an average; /// histogram by setting its bit kIsAverage with; /// myhist.SetBit(TH1::kIsAverage);; /// Note that the two histograms must have their kIsAverage bit set; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Add; ///; /// IMPORTANT NOTE2: You should be careful about the statistics of the; /// returned histogram, whose statistics may be binned or unbinned,; /// depending on whether c1 is negative, whether TAxis::kAxisRange is true,; /// and whether TH1::ResetStats has been called on either this or h1.; /// See TH1::GetStats.; ///; /// ANOTHER SPECIAL CASE : h1 = h2 and c2 < 0; /// do a scaling this = c1 * h1 / (bin Volume); ///; /// The function returns kFALSE if the Add operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1028,Availability,error,errors,1028,"////////////////////////////////////////////////////////////////////////////////; /// Replace contents of this histogram by the addition of h1 and h2.; ///; /// `this = c1*h1 + c2*h2`; /// if errors are defined (see TH1::Sumw2), errors are also recalculated; ///; /// Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; ///; /// Note also that adding histogram with labels is not supported, histogram will be; /// added merging them by bin number independently of the labels.; /// For adding histogram ith labels one should use TH1::Merge; ///; /// SPECIAL CASE (Average/Efficiency histograms); /// For histograms representing averages or efficiencies, one should compute the average; /// of the two histograms and not the sum. One can mark a histogram to be an average; /// histogram by setting its bit kIsAverage with; /// myhist.SetBit(TH1::kIsAverage);; /// Note that the two histograms must have their kIsAverage bit set; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Add; ///; /// IMPORTANT NOTE2: You should be careful about the statistics of the; /// returned histogram, whose statistics may be binned or unbinned,; /// depending on whether c1 is negative, whether TAxis::kAxisRange is true,; /// and whether TH1::ResetStats has been called on either this or h1.; /// See TH1::GetStats.; ///; /// ANOTHER SPECIAL CASE : h1 = h2 and c2 < 0; /// do a scaling this = c1 * h1 / (bin Volume); ///; /// The function returns kFALSE if the Add operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1343,Integrability,depend,depending,1343,"////////////////////////////////////////////////////////////////////////////////; /// Replace contents of this histogram by the addition of h1 and h2.; ///; /// `this = c1*h1 + c2*h2`; /// if errors are defined (see TH1::Sumw2), errors are also recalculated; ///; /// Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; ///; /// Note also that adding histogram with labels is not supported, histogram will be; /// added merging them by bin number independently of the labels.; /// For adding histogram ith labels one should use TH1::Merge; ///; /// SPECIAL CASE (Average/Efficiency histograms); /// For histograms representing averages or efficiencies, one should compute the average; /// of the two histograms and not the sum. One can mark a histogram to be an average; /// histogram by setting its bit kIsAverage with; /// myhist.SetBit(TH1::kIsAverage);; /// Note that the two histograms must have their kIsAverage bit set; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Add; ///; /// IMPORTANT NOTE2: You should be careful about the statistics of the; /// returned histogram, whose statistics may be binned or unbinned,; /// depending on whether c1 is negative, whether TAxis::kAxisRange is true,; /// and whether TH1::ResetStats has been called on either this or h1.; /// See TH1::GetStats.; ///; /// ANOTHER SPECIAL CASE : h1 = h2 and c2 < 0; /// do a scaling this = c1 * h1 / (bin Volume); ///; /// The function returns kFALSE if the Add operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:144,Safety,risk,risks,144,"// TODO remove; // statistics can be preserved only in case of positive coefficients; // otherwise with negative c1 (histogram subtraction) one risks to get negative variances; // also in case of scaling with the width we cannot preserve the statistics",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:84,Integrability,depend,depending,84,"// need to initialize to zero s1 and s2 since; // GetStats fills only used elements depending on dimension and type",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:39,Availability,error,errors,39,"// consider all special cases when bin errors are zero; // see http://root-forum.cern.ch/viewtopic.php?f=3&t=13299",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:20,Availability,error,error,20,"// use an estimated error from the global histogram scale",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:20,Availability,error,error,20,"// use an estimated error from the global histogram scale",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:11,Usability,simpl,simple,11,"// case of simple histogram addition",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:3,Deployability,update,update,3,"// update statistics (do here to avoid changes by SetBinContent) FIXME remove???",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:33,Safety,avoid,avoid,33,"// update statistics (do here to avoid changes by SetBinContent) FIXME remove???",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:116,Energy Efficiency,power,power,116,"////////////////////////////////////////////////////////////////////////////////; /// Auxiliary function to get the power of 2 next (larger) or previous (smaller); /// a given x; ///; /// next = kTRUE : next larger; /// next = kFALSE : previous smaller; ///; /// Used by the autobin power of 2 algorithm",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:283,Energy Efficiency,power,power,283,"////////////////////////////////////////////////////////////////////////////////; /// Auxiliary function to get the power of 2 next (larger) or previous (smaller); /// a given x; ///; /// next = kTRUE : next larger; /// next = kFALSE : previous smaller; ///; /// Used by the autobin power of 2 algorithm",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:121,Energy Efficiency,power,power,121,"////////////////////////////////////////////////////////////////////////////////; /// Auxiliary function to get the next power of 2 integer value larger then n; ///; /// Used by the autobin power of 2 algorithm",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:190,Energy Efficiency,power,power,190,"////////////////////////////////////////////////////////////////////////////////; /// Auxiliary function to get the next power of 2 integer value larger then n; ///; /// Used by the autobin power of 2 algorithm",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:141,Energy Efficiency,power,power,141,"////////////////////////////////////////////////////////////////////////////////; /// Buffer-based estimate of the histogram range using the power of 2 algorithm.; ///; /// Used by the autobin power of 2 algorithm.; ///; /// Works on arguments (min and max from fBuffer) and internal inputs: fXmin,; /// fXmax, NBinsX (from fXaxis), ...; /// Result save internally in fXaxis.; ///; /// Overloaded by TH2 and TH3.; ///; /// Return -1 if internal inputs are inconsistent, 0 otherwise.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:193,Energy Efficiency,power,power,193,"////////////////////////////////////////////////////////////////////////////////; /// Buffer-based estimate of the histogram range using the power of 2 algorithm.; ///; /// Used by the autobin power of 2 algorithm.; ///; /// Works on arguments (min and max from fBuffer) and internal inputs: fXmin,; /// fXmax, NBinsX (from fXaxis), ...; /// Result save internally in fXaxis.; ///; /// Overloaded by TH2 and TH3.; ///; /// Return -1 if internal inputs are inconsistent, 0 otherwise.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:30,Energy Efficiency,power,power,30,"// Round the bins to the next power of 2; take into account the possible inflation; // of the range",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:53,Safety,avoid,avoid,53,"// if action is 1 we delete the buffer; // this will avoid infinite recursion",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:98,Safety,avoid,avoid,98,"// call DoFillN which will not put entries in the buffer as FillN does; // set fBuffer to zero to avoid re-emptying the buffer from functions called; // by DoFillN (e.g Sumw2)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:71,Safety,avoid,avoid,71,"// if number of entries is consistent with buffer - set it negative to avoid; // refilling the histogram every time BufferEmpty(0) is called; // In case it is not consistent, by setting fBuffer[0]=0 is like resetting the buffer; // (it will not be used anymore the next time BufferEmpty is called)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:26,Safety,avoid,avoid,26,"// set fBuffer to zero to avoid calling BufferEmpty in Reset",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:6,Safety,avoid,avoid,6,"// to avoid infinite recursion Fill->BufferFill->Fill",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:222,Modifiability,variab,variable,222,"////////////////////////////////////////////////////////////////////////////////; /// Check that two sub axis are the same.; /// The limits are defined by first bin and last bin; /// N.B. no check is done in this case for variable bins",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:7738,Availability,down,down,7738,"on; /// \f$ N(Wp_{i},\sigma_{i}^{2}) \f$ where \f$ \sigma_{i}^{2} \f$ is the variance of the weight wi.; /// If we replace the variance \f$ \sigma_{i}^{2} \f$; /// with estimate \f$ s_{i}^{2} \f$ (sum of squares of weights of; /// events in the ith bin) and the hypothesis of identity is valid, then the; /// maximum likelihood estimator of pi,i=1,...,r, is; ///\f[; /// \hat{p}_{i} = \frac{Ww_{i}-Ns_{i}^{2}+\sqrt{(Ww_{i}-Ns_{i}^{2})^{2}+4W^{2}s_{i}^{2}n_{i}}}{2W^{2}}; ///\f]; /// We may then use the test statistic; ///\f[; /// X^{2} = \sum_{i=1}^{r} \frac{(n_{i}-N\hat{p}_{i})^{2}}{N\hat{p}_{i}} + \sum_{i=1}^{r} \frac{(w_{i}-W\hat{p}_{i})^{2}}{s_{i}^{2}}; ///\f]; /// and it has approximately a \f$ \sigma^{2}_{(r-1)} \f$ distribution [2]. This test, as well; /// as the original one [3], has a restriction on the expected frequencies. The; /// expected frequencies recommended for the weighted histogram is more than 25.; /// The value of the minimal expected frequency can be decreased down to 10 for; /// the case when the weights of the events are close to constant. In the case; /// of a weighted histogram if the number of events is unknown, then we can; /// apply this recommendation for the equivalent number of events as; ///\f[; /// n_{i}^{equiv} = \frac{ w_{i}^{2} }{ s_{i}^{2} }; ///\f]; /// The minimal expected frequency for an unweighted histogram must be 1. Notice; /// that any usual (unweighted) histogram can be considered as a weighted; /// histogram with events that have constant weights equal to 1.; /// The variance \f$ z_{i}^{2} \f$ of the difference between the weight wi; /// and the estimated expectation value of the weight is approximately equal to:; ///\f[; /// z_{i}^{2} = Var(w_{i}-W\hat{p}_{i}) = N\hat{p}_{i}(1-N\hat{p}_{i})\left(\frac{Ws_{i}^{2}}{\sqrt{(Ns_{i}^{2}-w_{i}W)^{2}+4W^{2}s_{i}^{2}n_{i}}}\right)^{2}+\frac{s_{i}^{2}}{4}\left(1+\frac{Ns_{i}^{2}-w_{i}W}{\sqrt{(Ns_{i}^{2}-w_{i}W)^{2}+4W^{2}s_{i}^{2}n_{i}}}\right)^{2}; ///\f]; /// The residuals; ///\f",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:14604,Availability,robust,robustness,14604,"17 events (minimal expected; /// frequency equal to one) and the weighted histogram with 500 events (minimal; /// expected frequency equal to 25); /// Begin_Macro; /// ../../../tutorials/math/chi2test.C(17); /// End_Macro; /// Fig 2. An example of comparison of the unweighted histogram with 217 events; /// and the weighted histogram with 500 events:; /// 1. unweighted histogram;; /// 2. weighted histogram;; /// 3. normalized residuals plot;; /// 4. normal Q-Q plot of residuals.; ///; /// The value of the test statistic \f$ \chi^{2} \f$ is equal to; /// 32.33 with p-value equal to 0.029, therefore the hypothesis of identity of; /// the two histograms is rejected for 0.05 significant level. The behavior of; /// the normalized residuals plot (see Fig. 2c) and the normal Q-Q plot (see; /// Fig. 2d) of residuals are not regular and we can identify the outlier or; /// bin with a big influence on \f$ \chi^{2} \f$.; ///; /// #### References:; ///; /// - [1] Pearson, K., 1904. On the Theory of Contingency and Its Relation to; /// Association and Normal Correlation. Drapers' Co. Memoirs, Biometric; /// Series No. 1, London.; /// - [2] Gagunashvili, N., 2006. \f$ \sigma^{2} \f$ test for comparison; /// of weighted and unweighted histograms. Statistical Problems in Particle; /// Physics, Astrophysics and Cosmology, Proceedings of PHYSTAT05,; /// Oxford, UK, 12-15 September 2005, Imperial College Press, London, 43-44.; /// Gagunashvili,N., Comparison of weighted and unweighted histograms,; /// arXiv:physics/0605123, 2006.; /// - [3] Cramer, H., 1946. Mathematical methods of statistics.; /// Princeton University Press, Princeton.; /// - [4] Haberman, S.J., 1973. The analysis of residuals in cross-classified tables.; /// Biometrics 29, 205-220.; /// - [5] Lewontin, R.C. and Felsenstein, J., 1965. The robustness of homogeneity; /// test in 2xN tables. Biometrics 21, 19-33.; /// - [6] Seber, G.A.F., Lee, A.J., 2003, Linear Regression Analysis.; /// John Wiley & Sons Inc., New York.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:3021,Energy Efficiency,power,power,3021,"ew:; ///; /// Comparison of two histograms expect hypotheses that two histograms; /// represent identical distributions. To make a decision p-value should; /// be calculated. The hypotheses of identity is rejected if the p-value is; /// lower then some significance level. Traditionally significance levels; /// 0.1, 0.05 and 0.01 are used. The comparison procedure should include an; /// analysis of the residuals which is often helpful in identifying the; /// bins of histograms responsible for a significant overall \f$ \chi^{2} \f$ value.; /// Residuals are the difference between bin contents and expected bin; /// contents. Most convenient for analysis are the normalized residuals. If; /// hypotheses of identity are valid then normalized residuals are; /// approximately independent and identically distributed random variables; /// having N(0,1) distribution. Analysis of residuals expect test of above; /// mentioned properties of residuals. Notice that indirectly the analysis; /// of residuals increase the power of \f$ \chi^{2} \f$ test.; ///; /// #### Methods of comparison:; ///; /// \f$ \chi^{2} \f$ test for comparison two (unweighted) histograms:; /// Let us consider two histograms with the same binning and the number; /// of bins equal to r. Let us denote the number of events in the ith bin; /// in the first histogram as ni and as mi in the second one. The total; /// number of events in the first histogram is equal to:; /// \f[; /// N = \sum_{i=1}^{r} n_{i}; /// \f]; /// and; /// \f[; /// M = \sum_{i=1}^{r} m_{i}; /// \f]; /// in the second histogram. The hypothesis of identity (homogeneity) [3]; /// is that the two histograms represent random values with identical; /// distributions. It is equivalent that there exist r constants p1,...,pr,; /// such that; /// \f[; ///\sum_{i=1}^{r} p_{i}=1; /// \f]; /// and the probability of belonging to the ith bin for some measured value; /// in both experiments is equal to pi. The number of events in the ith; /// bin is a rando",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:2828,Modifiability,variab,variables,2828,"s; /// for comparison of weighted and unweighted histograms and two weighted; /// histograms [2] as well as usual Pearson's \f$ \chi^{2} \f$ test for; /// comparison two usual (unweighted) histograms.; ///; /// #### Overview:; ///; /// Comparison of two histograms expect hypotheses that two histograms; /// represent identical distributions. To make a decision p-value should; /// be calculated. The hypotheses of identity is rejected if the p-value is; /// lower then some significance level. Traditionally significance levels; /// 0.1, 0.05 and 0.01 are used. The comparison procedure should include an; /// analysis of the residuals which is often helpful in identifying the; /// bins of histograms responsible for a significant overall \f$ \chi^{2} \f$ value.; /// Residuals are the difference between bin contents and expected bin; /// contents. Most convenient for analysis are the normalized residuals. If; /// hypotheses of identity are valid then normalized residuals are; /// approximately independent and identically distributed random variables; /// having N(0,1) distribution. Analysis of residuals expect test of above; /// mentioned properties of residuals. Notice that indirectly the analysis; /// of residuals increase the power of \f$ \chi^{2} \f$ test.; ///; /// #### Methods of comparison:; ///; /// \f$ \chi^{2} \f$ test for comparison two (unweighted) histograms:; /// Let us consider two histograms with the same binning and the number; /// of bins equal to r. Let us denote the number of events in the ith bin; /// in the first histogram as ni and as mi in the second one. The total; /// number of events in the first histogram is equal to:; /// \f[; /// N = \sum_{i=1}^{r} n_{i}; /// \f]; /// and; /// \f[; /// M = \sum_{i=1}^{r} m_{i}; /// \f]; /// in the second histogram. The hypothesis of identity (homogeneity) [3]; /// is that the two histograms represent random values with identical; /// distributions. It is equivalent that there exist r constants p1,...,pr,; /// s",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:4005,Modifiability,variab,variable,4005,"r comparison two (unweighted) histograms:; /// Let us consider two histograms with the same binning and the number; /// of bins equal to r. Let us denote the number of events in the ith bin; /// in the first histogram as ni and as mi in the second one. The total; /// number of events in the first histogram is equal to:; /// \f[; /// N = \sum_{i=1}^{r} n_{i}; /// \f]; /// and; /// \f[; /// M = \sum_{i=1}^{r} m_{i}; /// \f]; /// in the second histogram. The hypothesis of identity (homogeneity) [3]; /// is that the two histograms represent random values with identical; /// distributions. It is equivalent that there exist r constants p1,...,pr,; /// such that; /// \f[; ///\sum_{i=1}^{r} p_{i}=1; /// \f]; /// and the probability of belonging to the ith bin for some measured value; /// in both experiments is equal to pi. The number of events in the ith; /// bin is a random variable with a distribution approximated by a Poisson; /// probability distribution; /// \f[; ///\frac{e^{-Np_{i}}(Np_{i})^{n_{i}}}{n_{i}!}; /// \f]; ///for the first histogram and with distribution; /// \f[; ///\frac{e^{-Mp_{i}}(Mp_{i})^{m_{i}}}{m_{i}!}; /// \f]; /// for the second histogram. If the hypothesis of homogeneity is valid,; /// then the maximum likelihood estimator of pi, i=1,...,r, is; /// \f[; ///\hat{p}_{i}= \frac{n_{i}+m_{i}}{N+M}; /// \f]; /// and then; /// \f[; /// X^{2} = \sum_{i=1}^{r}\frac{(n_{i}-N\hat{p}_{i})^{2}}{N\hat{p}_{i}} + \sum_{i=1}^{r}\frac{(m_{i}-M\hat{p}_{i})^{2}}{M\hat{p}_{i}} =\frac{1}{MN} \sum_{i=1}^{r}\frac{(Mn_{i}-Nm_{i})^{2}}{n_{i}+m_{i}}; /// \f]; /// has approximately a \f$ \chi^{2}_{(r-1)} \f$ distribution [3].; /// The comparison procedure can include an analysis of the residuals which; /// is often helpful in identifying the bins of histograms responsible for; /// a significant overall \f$ \chi^{2} \f$ value. Most convenient for; /// analysis are the adjusted (normalized) residuals [4]; /// \f[; /// r_{i} = \frac{n_{i}-N\hat{p}_{i}}{\sqrt{N\hat{p}_{i}}\sqrt{(",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:5303,Modifiability,variab,variables,5303,"for the first histogram and with distribution; /// \f[; ///\frac{e^{-Mp_{i}}(Mp_{i})^{m_{i}}}{m_{i}!}; /// \f]; /// for the second histogram. If the hypothesis of homogeneity is valid,; /// then the maximum likelihood estimator of pi, i=1,...,r, is; /// \f[; ///\hat{p}_{i}= \frac{n_{i}+m_{i}}{N+M}; /// \f]; /// and then; /// \f[; /// X^{2} = \sum_{i=1}^{r}\frac{(n_{i}-N\hat{p}_{i})^{2}}{N\hat{p}_{i}} + \sum_{i=1}^{r}\frac{(m_{i}-M\hat{p}_{i})^{2}}{M\hat{p}_{i}} =\frac{1}{MN} \sum_{i=1}^{r}\frac{(Mn_{i}-Nm_{i})^{2}}{n_{i}+m_{i}}; /// \f]; /// has approximately a \f$ \chi^{2}_{(r-1)} \f$ distribution [3].; /// The comparison procedure can include an analysis of the residuals which; /// is often helpful in identifying the bins of histograms responsible for; /// a significant overall \f$ \chi^{2} \f$ value. Most convenient for; /// analysis are the adjusted (normalized) residuals [4]; /// \f[; /// r_{i} = \frac{n_{i}-N\hat{p}_{i}}{\sqrt{N\hat{p}_{i}}\sqrt{(1-N/(N+M))(1-(n_{i}+m_{i})/(N+M))}}; /// \f]; /// If hypotheses of homogeneity are valid then residuals ri are; /// approximately independent and identically distributed random variables; /// having N(0,1) distribution. The application of the \f$ \chi^{2} \f$ test has; /// restrictions related to the value of the expected frequencies Npi,; /// Mpi, i=1,...,r. A conservative rule formulated in [5] is that all the; /// expectations must be 1 or greater for both histograms. In practical; /// cases when expected frequencies are not known the estimated expected; /// frequencies \f$ M\hat{p}_{i}, N\hat{p}_{i}, i=1,...,r \f$ can be used.; ///; /// #### Unweighted and weighted histograms comparison:; ///; /// A simple modification of the ideas described above can be used for the; /// comparison of the usual (unweighted) and weighted histograms. Let us; /// denote the number of events in the ith bin in the unweighted; /// histogram as ni and the common weight of events in the ith bin of the; /// weighted histogram as wi. The t",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:6662,Modifiability,variab,variable,6662,",...,r \f$ can be used.; ///; /// #### Unweighted and weighted histograms comparison:; ///; /// A simple modification of the ideas described above can be used for the; /// comparison of the usual (unweighted) and weighted histograms. Let us; /// denote the number of events in the ith bin in the unweighted; /// histogram as ni and the common weight of events in the ith bin of the; /// weighted histogram as wi. The total number of events in the; /// unweighted histogram is equal to; ///\f[; /// N = \sum_{i=1}^{r} n_{i}; ///\f]; /// and the total weight of events in the weighted histogram is equal to; ///\f[; /// W = \sum_{i=1}^{r} w_{i}; ///\f]; /// Let us formulate the hypothesis of identity of an unweighted histogram; /// to a weighted histogram so that there exist r constants p1,...,pr, such; /// that; ///\f[; /// \sum_{i=1}^{r} p_{i} = 1; ///\f]; /// for the unweighted histogram. The weight wi is a random variable with a; /// distribution approximated by the normal probability distribution; /// \f$ N(Wp_{i},\sigma_{i}^{2}) \f$ where \f$ \sigma_{i}^{2} \f$ is the variance of the weight wi.; /// If we replace the variance \f$ \sigma_{i}^{2} \f$; /// with estimate \f$ s_{i}^{2} \f$ (sum of squares of weights of; /// events in the ith bin) and the hypothesis of identity is valid, then the; /// maximum likelihood estimator of pi,i=1,...,r, is; ///\f[; /// \hat{p}_{i} = \frac{Ww_{i}-Ns_{i}^{2}+\sqrt{(Ww_{i}-Ns_{i}^{2})^{2}+4W^{2}s_{i}^{2}n_{i}}}{2W^{2}}; ///\f]; /// We may then use the test statistic; ///\f[; /// X^{2} = \sum_{i=1}^{r} \frac{(n_{i}-N\hat{p}_{i})^{2}}{N\hat{p}_{i}} + \sum_{i=1}^{r} \frac{(w_{i}-W\hat{p}_{i})^{2}}{s_{i}^{2}}; ///\f]; /// and it has approximately a \f$ \sigma^{2}_{(r-1)} \f$ distribution [2]. This test, as well; /// as the original one [3], has a restriction on the expected frequencies. The; /// expected frequencies recommended for the weighted histogram is more than 25.; /// The value of the minimal expected frequency can be decreased down",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:9634,Modifiability,variab,variables,9634," residuals; ///\f[; /// r_{i} = \frac{w_{i}-W\hat{p}_{i}}{z_{i}}; ///\f]; /// have approximately a normal distribution with mean equal to 0 and standard; /// deviation equal to 1.; ///; /// #### Two weighted histograms comparison:; ///; /// Let us denote the common weight of events of the ith bin in the first; /// histogram as w1i and as w2i in the second one. The total weight of events; /// in the first histogram is equal to; ///\f[; /// W_{1} = \sum_{i=1}^{r} w_{1i}; ///\f]; /// and; ///\f[; /// W_{2} = \sum_{i=1}^{r} w_{2i}; ///\f]; /// in the second histogram. Let us formulate the hypothesis of identity of; /// weighted histograms so that there exist r constants p1,...,pr, such that; ///\f[; /// \sum_{i=1}^{r} p_{i} = 1; ///\f]; /// and also expectation value of weight w1i equal to W1pi and expectation value; /// of weight w2i equal to W2pi. Weights in both the histograms are random; /// variables with distributions which can be approximated by a normal; /// probability distribution \f$ N(W_{1}p_{i},\sigma_{1i}^{2}) \f$ for the first histogram; /// and by a distribution \f$ N(W_{2}p_{i},\sigma_{2i}^{2}) \f$ for the second.; /// Here \f$ \sigma_{1i}^{2} \f$ and \f$ \sigma_{2i}^{2} \f$ are the variances; /// of w1i and w2i with estimators \f$ s_{1i}^{2} \f$ and \f$ s_{2i}^{2} \f$ respectively.; /// If the hypothesis of identity is valid, then the maximum likelihood and; /// Least Square Method estimator of pi,i=1,...,r, is; ///\f[; /// \hat{p}_{i} = \frac{w_{1i}W_{1}/s_{1i}^{2}+w_{2i}W_{2} /s_{2i}^{2}}{W_{1}^{2}/s_{1i}^{2}+W_{2}^{2}/s_{2i}^{2}}; ///\f]; /// We may then use the test statistic; ///\f[; /// X^{2} = \sum_{i=1}^{r} \frac{(w_{1i}-W_{1}\hat{p}_{i})^{2}}{s_{1i}^{2}} + \sum_{i=1}^{r} \frac{(w_{2i}-W_{2}\hat{p}_{i})^{2}}{s_{2i}^{2}} = \sum_{i=1}^{r} \frac{(W_{1}w_{2i}-W_{2}w_{1i})^{2}}{W_{1}^{2}s_{2i}^{2}+W_{2}^{2}s_{1i}^{2}}; ///\f]; /// and it has approximately a \f$ \chi^{2}_{(r-1)} \f$ distribution [2].; /// The normalized or studentised residuals [6]; /",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:13882,Security,Biometric,Biometric,13882,"17 events (minimal expected; /// frequency equal to one) and the weighted histogram with 500 events (minimal; /// expected frequency equal to 25); /// Begin_Macro; /// ../../../tutorials/math/chi2test.C(17); /// End_Macro; /// Fig 2. An example of comparison of the unweighted histogram with 217 events; /// and the weighted histogram with 500 events:; /// 1. unweighted histogram;; /// 2. weighted histogram;; /// 3. normalized residuals plot;; /// 4. normal Q-Q plot of residuals.; ///; /// The value of the test statistic \f$ \chi^{2} \f$ is equal to; /// 32.33 with p-value equal to 0.029, therefore the hypothesis of identity of; /// the two histograms is rejected for 0.05 significant level. The behavior of; /// the normalized residuals plot (see Fig. 2c) and the normal Q-Q plot (see; /// Fig. 2d) of residuals are not regular and we can identify the outlier or; /// bin with a big influence on \f$ \chi^{2} \f$.; ///; /// #### References:; ///; /// - [1] Pearson, K., 1904. On the Theory of Contingency and Its Relation to; /// Association and Normal Correlation. Drapers' Co. Memoirs, Biometric; /// Series No. 1, London.; /// - [2] Gagunashvili, N., 2006. \f$ \sigma^{2} \f$ test for comparison; /// of weighted and unweighted histograms. Statistical Problems in Particle; /// Physics, Astrophysics and Cosmology, Proceedings of PHYSTAT05,; /// Oxford, UK, 12-15 September 2005, Imperial College Press, London, 43-44.; /// Gagunashvili,N., Comparison of weighted and unweighted histograms,; /// arXiv:physics/0605123, 2006.; /// - [3] Cramer, H., 1946. Mathematical methods of statistics.; /// Princeton University Press, Princeton.; /// - [4] Haberman, S.J., 1973. The analysis of residuals in cross-classified tables.; /// Biometrics 29, 205-220.; /// - [5] Lewontin, R.C. and Felsenstein, J., 1965. The robustness of homogeneity; /// test in 2xN tables. Biometrics 21, 19-33.; /// - [6] Seber, G.A.F., Lee, A.J., 2003, Linear Regression Analysis.; /// John Wiley & Sons Inc., New York.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:14523,Security,Biometric,Biometrics,14523,"17 events (minimal expected; /// frequency equal to one) and the weighted histogram with 500 events (minimal; /// expected frequency equal to 25); /// Begin_Macro; /// ../../../tutorials/math/chi2test.C(17); /// End_Macro; /// Fig 2. An example of comparison of the unweighted histogram with 217 events; /// and the weighted histogram with 500 events:; /// 1. unweighted histogram;; /// 2. weighted histogram;; /// 3. normalized residuals plot;; /// 4. normal Q-Q plot of residuals.; ///; /// The value of the test statistic \f$ \chi^{2} \f$ is equal to; /// 32.33 with p-value equal to 0.029, therefore the hypothesis of identity of; /// the two histograms is rejected for 0.05 significant level. The behavior of; /// the normalized residuals plot (see Fig. 2c) and the normal Q-Q plot (see; /// Fig. 2d) of residuals are not regular and we can identify the outlier or; /// bin with a big influence on \f$ \chi^{2} \f$.; ///; /// #### References:; ///; /// - [1] Pearson, K., 1904. On the Theory of Contingency and Its Relation to; /// Association and Normal Correlation. Drapers' Co. Memoirs, Biometric; /// Series No. 1, London.; /// - [2] Gagunashvili, N., 2006. \f$ \sigma^{2} \f$ test for comparison; /// of weighted and unweighted histograms. Statistical Problems in Particle; /// Physics, Astrophysics and Cosmology, Proceedings of PHYSTAT05,; /// Oxford, UK, 12-15 September 2005, Imperial College Press, London, 43-44.; /// Gagunashvili,N., Comparison of weighted and unweighted histograms,; /// arXiv:physics/0605123, 2006.; /// - [3] Cramer, H., 1946. Mathematical methods of statistics.; /// Princeton University Press, Princeton.; /// - [4] Haberman, S.J., 1973. The analysis of residuals in cross-classified tables.; /// Biometrics 29, 205-220.; /// - [5] Lewontin, R.C. and Felsenstein, J., 1965. The robustness of homogeneity; /// test in 2xN tables. Biometrics 21, 19-33.; /// - [6] Seber, G.A.F., Lee, A.J., 2003, Linear Regression Analysis.; /// John Wiley & Sons Inc., New York.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:14655,Security,Biometric,Biometrics,14655,"17 events (minimal expected; /// frequency equal to one) and the weighted histogram with 500 events (minimal; /// expected frequency equal to 25); /// Begin_Macro; /// ../../../tutorials/math/chi2test.C(17); /// End_Macro; /// Fig 2. An example of comparison of the unweighted histogram with 217 events; /// and the weighted histogram with 500 events:; /// 1. unweighted histogram;; /// 2. weighted histogram;; /// 3. normalized residuals plot;; /// 4. normal Q-Q plot of residuals.; ///; /// The value of the test statistic \f$ \chi^{2} \f$ is equal to; /// 32.33 with p-value equal to 0.029, therefore the hypothesis of identity of; /// the two histograms is rejected for 0.05 significant level. The behavior of; /// the normalized residuals plot (see Fig. 2c) and the normal Q-Q plot (see; /// Fig. 2d) of residuals are not regular and we can identify the outlier or; /// bin with a big influence on \f$ \chi^{2} \f$.; ///; /// #### References:; ///; /// - [1] Pearson, K., 1904. On the Theory of Contingency and Its Relation to; /// Association and Normal Correlation. Drapers' Co. Memoirs, Biometric; /// Series No. 1, London.; /// - [2] Gagunashvili, N., 2006. \f$ \sigma^{2} \f$ test for comparison; /// of weighted and unweighted histograms. Statistical Problems in Particle; /// Physics, Astrophysics and Cosmology, Proceedings of PHYSTAT05,; /// Oxford, UK, 12-15 September 2005, Imperial College Press, London, 43-44.; /// Gagunashvili,N., Comparison of weighted and unweighted histograms,; /// arXiv:physics/0605123, 2006.; /// - [3] Cramer, H., 1946. Mathematical methods of statistics.; /// Princeton University Press, Princeton.; /// - [4] Haberman, S.J., 1973. The analysis of residuals in cross-classified tables.; /// Biometrics 29, 205-220.; /// - [5] Lewontin, R.C. and Felsenstein, J., 1965. The robustness of homogeneity; /// test in 2xN tables. Biometrics 21, 19-33.; /// - [6] Seber, G.A.F., Lee, A.J., 2003, Linear Regression Analysis.; /// John Wiley & Sons Inc., New York.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:103,Testability,test,test,103,"////////////////////////////////////////////////////////////////////////////////; /// \f$ \chi^{2} \f$ test for comparing weighted and unweighted histograms.; ///; /// Compares the histograms' adjusted (normalized) residuals.; /// Function: Returns p-value. Other return values are specified by the 3rd parameter; ///; /// \param[in] h2 the second histogram; /// \param[in] option; /// - ""UU"" = experiment experiment comparison (unweighted-unweighted); /// - ""UW"" = experiment MC comparison (unweighted-weighted). Note that; /// the first histogram should be unweighted; /// - ""WW"" = MC MC comparison (weighted-weighted); /// - ""NORM"" = to be used when one or both of the histograms is scaled; /// but the histogram originally was unweighted; /// - by default underflows and overflows are not included:; /// * ""OF"" = overflows included; /// * ""UF"" = underflows included; /// - ""P"" = print chi2, ndf, p_value, igood; /// - ""CHI2"" = returns chi2 instead of p-value; /// - ""CHI2/NDF"" = returns \f$ \chi^{2} \f$/ndf; /// \param[in] res not empty - computes normalized residuals and returns them in this array; ///; /// The current implementation is based on the papers \f$ \chi^{2} \f$ test for comparison; /// of weighted and unweighted histograms"" in Proceedings of PHYSTAT05 and; /// ""Comparison weighted and unweighted histograms"", arXiv:physics/0605123; /// by N.Gagunashvili. This function has been implemented by Daniel Haertl in August 2006.; ///; /// #### Introduction:; ///; /// A frequently used technique in data analysis is the comparison of; /// histograms. First suggested by Pearson [1] the \f$ \chi^{2} \f$ test of; /// homogeneity is used widely for comparing usual (unweighted) histograms.; /// This paper describes the implementation modified \f$ \chi^{2} \f$ tests; /// for comparison of weighted and unweighted histograms and two weighted; /// histograms [2] as well as usual Pearson's \f$ \chi^{2} \f$ test for; /// comparison two usual (unweighted) histograms.; ///; /// #### Overv",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1182,Testability,test,test,1182,"////////////////////////////////////////////////////////////////////////////////; /// \f$ \chi^{2} \f$ test for comparing weighted and unweighted histograms.; ///; /// Compares the histograms' adjusted (normalized) residuals.; /// Function: Returns p-value. Other return values are specified by the 3rd parameter; ///; /// \param[in] h2 the second histogram; /// \param[in] option; /// - ""UU"" = experiment experiment comparison (unweighted-unweighted); /// - ""UW"" = experiment MC comparison (unweighted-weighted). Note that; /// the first histogram should be unweighted; /// - ""WW"" = MC MC comparison (weighted-weighted); /// - ""NORM"" = to be used when one or both of the histograms is scaled; /// but the histogram originally was unweighted; /// - by default underflows and overflows are not included:; /// * ""OF"" = overflows included; /// * ""UF"" = underflows included; /// - ""P"" = print chi2, ndf, p_value, igood; /// - ""CHI2"" = returns chi2 instead of p-value; /// - ""CHI2/NDF"" = returns \f$ \chi^{2} \f$/ndf; /// \param[in] res not empty - computes normalized residuals and returns them in this array; ///; /// The current implementation is based on the papers \f$ \chi^{2} \f$ test for comparison; /// of weighted and unweighted histograms"" in Proceedings of PHYSTAT05 and; /// ""Comparison weighted and unweighted histograms"", arXiv:physics/0605123; /// by N.Gagunashvili. This function has been implemented by Daniel Haertl in August 2006.; ///; /// #### Introduction:; ///; /// A frequently used technique in data analysis is the comparison of; /// histograms. First suggested by Pearson [1] the \f$ \chi^{2} \f$ test of; /// homogeneity is used widely for comparing usual (unweighted) histograms.; /// This paper describes the implementation modified \f$ \chi^{2} \f$ tests; /// for comparison of weighted and unweighted histograms and two weighted; /// histograms [2] as well as usual Pearson's \f$ \chi^{2} \f$ test for; /// comparison two usual (unweighted) histograms.; ///; /// #### Overv",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1620,Testability,test,test,1620,"= to be used when one or both of the histograms is scaled; /// but the histogram originally was unweighted; /// - by default underflows and overflows are not included:; /// * ""OF"" = overflows included; /// * ""UF"" = underflows included; /// - ""P"" = print chi2, ndf, p_value, igood; /// - ""CHI2"" = returns chi2 instead of p-value; /// - ""CHI2/NDF"" = returns \f$ \chi^{2} \f$/ndf; /// \param[in] res not empty - computes normalized residuals and returns them in this array; ///; /// The current implementation is based on the papers \f$ \chi^{2} \f$ test for comparison; /// of weighted and unweighted histograms"" in Proceedings of PHYSTAT05 and; /// ""Comparison weighted and unweighted histograms"", arXiv:physics/0605123; /// by N.Gagunashvili. This function has been implemented by Daniel Haertl in August 2006.; ///; /// #### Introduction:; ///; /// A frequently used technique in data analysis is the comparison of; /// histograms. First suggested by Pearson [1] the \f$ \chi^{2} \f$ test of; /// homogeneity is used widely for comparing usual (unweighted) histograms.; /// This paper describes the implementation modified \f$ \chi^{2} \f$ tests; /// for comparison of weighted and unweighted histograms and two weighted; /// histograms [2] as well as usual Pearson's \f$ \chi^{2} \f$ test for; /// comparison two usual (unweighted) histograms.; ///; /// #### Overview:; ///; /// Comparison of two histograms expect hypotheses that two histograms; /// represent identical distributions. To make a decision p-value should; /// be calculated. The hypotheses of identity is rejected if the p-value is; /// lower then some significance level. Traditionally significance levels; /// 0.1, 0.05 and 0.01 are used. The comparison procedure should include an; /// analysis of the residuals which is often helpful in identifying the; /// bins of histograms responsible for a significant overall \f$ \chi^{2} \f$ value.; /// Residuals are the difference between bin contents and expected bin; /// contents. Most",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1776,Testability,test,tests,1776," ""UF"" = underflows included; /// - ""P"" = print chi2, ndf, p_value, igood; /// - ""CHI2"" = returns chi2 instead of p-value; /// - ""CHI2/NDF"" = returns \f$ \chi^{2} \f$/ndf; /// \param[in] res not empty - computes normalized residuals and returns them in this array; ///; /// The current implementation is based on the papers \f$ \chi^{2} \f$ test for comparison; /// of weighted and unweighted histograms"" in Proceedings of PHYSTAT05 and; /// ""Comparison weighted and unweighted histograms"", arXiv:physics/0605123; /// by N.Gagunashvili. This function has been implemented by Daniel Haertl in August 2006.; ///; /// #### Introduction:; ///; /// A frequently used technique in data analysis is the comparison of; /// histograms. First suggested by Pearson [1] the \f$ \chi^{2} \f$ test of; /// homogeneity is used widely for comparing usual (unweighted) histograms.; /// This paper describes the implementation modified \f$ \chi^{2} \f$ tests; /// for comparison of weighted and unweighted histograms and two weighted; /// histograms [2] as well as usual Pearson's \f$ \chi^{2} \f$ test for; /// comparison two usual (unweighted) histograms.; ///; /// #### Overview:; ///; /// Comparison of two histograms expect hypotheses that two histograms; /// represent identical distributions. To make a decision p-value should; /// be calculated. The hypotheses of identity is rejected if the p-value is; /// lower then some significance level. Traditionally significance levels; /// 0.1, 0.05 and 0.01 are used. The comparison procedure should include an; /// analysis of the residuals which is often helpful in identifying the; /// bins of histograms responsible for a significant overall \f$ \chi^{2} \f$ value.; /// Residuals are the difference between bin contents and expected bin; /// contents. Most convenient for analysis are the normalized residuals. If; /// hypotheses of identity are valid then normalized residuals are; /// approximately independent and identically distributed random variables; ///",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1921,Testability,test,test,1921," ""UF"" = underflows included; /// - ""P"" = print chi2, ndf, p_value, igood; /// - ""CHI2"" = returns chi2 instead of p-value; /// - ""CHI2/NDF"" = returns \f$ \chi^{2} \f$/ndf; /// \param[in] res not empty - computes normalized residuals and returns them in this array; ///; /// The current implementation is based on the papers \f$ \chi^{2} \f$ test for comparison; /// of weighted and unweighted histograms"" in Proceedings of PHYSTAT05 and; /// ""Comparison weighted and unweighted histograms"", arXiv:physics/0605123; /// by N.Gagunashvili. This function has been implemented by Daniel Haertl in August 2006.; ///; /// #### Introduction:; ///; /// A frequently used technique in data analysis is the comparison of; /// histograms. First suggested by Pearson [1] the \f$ \chi^{2} \f$ test of; /// homogeneity is used widely for comparing usual (unweighted) histograms.; /// This paper describes the implementation modified \f$ \chi^{2} \f$ tests; /// for comparison of weighted and unweighted histograms and two weighted; /// histograms [2] as well as usual Pearson's \f$ \chi^{2} \f$ test for; /// comparison two usual (unweighted) histograms.; ///; /// #### Overview:; ///; /// Comparison of two histograms expect hypotheses that two histograms; /// represent identical distributions. To make a decision p-value should; /// be calculated. The hypotheses of identity is rejected if the p-value is; /// lower then some significance level. Traditionally significance levels; /// 0.1, 0.05 and 0.01 are used. The comparison procedure should include an; /// analysis of the residuals which is often helpful in identifying the; /// bins of histograms responsible for a significant overall \f$ \chi^{2} \f$ value.; /// Residuals are the difference between bin contents and expected bin; /// contents. Most convenient for analysis are the normalized residuals. If; /// hypotheses of identity are valid then normalized residuals are; /// approximately independent and identically distributed random variables; ///",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:2900,Testability,test,test,2900,"i^{2} \f$ test for; /// comparison two usual (unweighted) histograms.; ///; /// #### Overview:; ///; /// Comparison of two histograms expect hypotheses that two histograms; /// represent identical distributions. To make a decision p-value should; /// be calculated. The hypotheses of identity is rejected if the p-value is; /// lower then some significance level. Traditionally significance levels; /// 0.1, 0.05 and 0.01 are used. The comparison procedure should include an; /// analysis of the residuals which is often helpful in identifying the; /// bins of histograms responsible for a significant overall \f$ \chi^{2} \f$ value.; /// Residuals are the difference between bin contents and expected bin; /// contents. Most convenient for analysis are the normalized residuals. If; /// hypotheses of identity are valid then normalized residuals are; /// approximately independent and identically distributed random variables; /// having N(0,1) distribution. Analysis of residuals expect test of above; /// mentioned properties of residuals. Notice that indirectly the analysis; /// of residuals increase the power of \f$ \chi^{2} \f$ test.; ///; /// #### Methods of comparison:; ///; /// \f$ \chi^{2} \f$ test for comparison two (unweighted) histograms:; /// Let us consider two histograms with the same binning and the number; /// of bins equal to r. Let us denote the number of events in the ith bin; /// in the first histogram as ni and as mi in the second one. The total; /// number of events in the first histogram is equal to:; /// \f[; /// N = \sum_{i=1}^{r} n_{i}; /// \f]; /// and; /// \f[; /// M = \sum_{i=1}^{r} m_{i}; /// \f]; /// in the second histogram. The hypothesis of identity (homogeneity) [3]; /// is that the two histograms represent random values with identical; /// distributions. It is equivalent that there exist r constants p1,...,pr,; /// such that; /// \f[; ///\sum_{i=1}^{r} p_{i}=1; /// \f]; /// and the probability of belonging to the ith bin for some measured value; ",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:3047,Testability,test,test,3047,"ew:; ///; /// Comparison of two histograms expect hypotheses that two histograms; /// represent identical distributions. To make a decision p-value should; /// be calculated. The hypotheses of identity is rejected if the p-value is; /// lower then some significance level. Traditionally significance levels; /// 0.1, 0.05 and 0.01 are used. The comparison procedure should include an; /// analysis of the residuals which is often helpful in identifying the; /// bins of histograms responsible for a significant overall \f$ \chi^{2} \f$ value.; /// Residuals are the difference between bin contents and expected bin; /// contents. Most convenient for analysis are the normalized residuals. If; /// hypotheses of identity are valid then normalized residuals are; /// approximately independent and identically distributed random variables; /// having N(0,1) distribution. Analysis of residuals expect test of above; /// mentioned properties of residuals. Notice that indirectly the analysis; /// of residuals increase the power of \f$ \chi^{2} \f$ test.; ///; /// #### Methods of comparison:; ///; /// \f$ \chi^{2} \f$ test for comparison two (unweighted) histograms:; /// Let us consider two histograms with the same binning and the number; /// of bins equal to r. Let us denote the number of events in the ith bin; /// in the first histogram as ni and as mi in the second one. The total; /// number of events in the first histogram is equal to:; /// \f[; /// N = \sum_{i=1}^{r} n_{i}; /// \f]; /// and; /// \f[; /// M = \sum_{i=1}^{r} m_{i}; /// \f]; /// in the second histogram. The hypothesis of identity (homogeneity) [3]; /// is that the two histograms represent random values with identical; /// distributions. It is equivalent that there exist r constants p1,...,pr,; /// such that; /// \f[; ///\sum_{i=1}^{r} p_{i}=1; /// \f]; /// and the probability of belonging to the ith bin for some measured value; /// in both experiments is equal to pi. The number of events in the ith; /// bin is a rando",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:3118,Testability,test,test,3118,"/// be calculated. The hypotheses of identity is rejected if the p-value is; /// lower then some significance level. Traditionally significance levels; /// 0.1, 0.05 and 0.01 are used. The comparison procedure should include an; /// analysis of the residuals which is often helpful in identifying the; /// bins of histograms responsible for a significant overall \f$ \chi^{2} \f$ value.; /// Residuals are the difference between bin contents and expected bin; /// contents. Most convenient for analysis are the normalized residuals. If; /// hypotheses of identity are valid then normalized residuals are; /// approximately independent and identically distributed random variables; /// having N(0,1) distribution. Analysis of residuals expect test of above; /// mentioned properties of residuals. Notice that indirectly the analysis; /// of residuals increase the power of \f$ \chi^{2} \f$ test.; ///; /// #### Methods of comparison:; ///; /// \f$ \chi^{2} \f$ test for comparison two (unweighted) histograms:; /// Let us consider two histograms with the same binning and the number; /// of bins equal to r. Let us denote the number of events in the ith bin; /// in the first histogram as ni and as mi in the second one. The total; /// number of events in the first histogram is equal to:; /// \f[; /// N = \sum_{i=1}^{r} n_{i}; /// \f]; /// and; /// \f[; /// M = \sum_{i=1}^{r} m_{i}; /// \f]; /// in the second histogram. The hypothesis of identity (homogeneity) [3]; /// is that the two histograms represent random values with identical; /// distributions. It is equivalent that there exist r constants p1,...,pr,; /// such that; /// \f[; ///\sum_{i=1}^{r} p_{i}=1; /// \f]; /// and the probability of belonging to the ith bin for some measured value; /// in both experiments is equal to pi. The number of events in the ith; /// bin is a random variable with a distribution approximated by a Poisson; /// probability distribution; /// \f[; ///\frac{e^{-Np_{i}}(Np_{i})^{n_{i}}}{n_{i}!}; /// \f]; //",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:5386,Testability,test,test,5386,"\f[; ///\hat{p}_{i}= \frac{n_{i}+m_{i}}{N+M}; /// \f]; /// and then; /// \f[; /// X^{2} = \sum_{i=1}^{r}\frac{(n_{i}-N\hat{p}_{i})^{2}}{N\hat{p}_{i}} + \sum_{i=1}^{r}\frac{(m_{i}-M\hat{p}_{i})^{2}}{M\hat{p}_{i}} =\frac{1}{MN} \sum_{i=1}^{r}\frac{(Mn_{i}-Nm_{i})^{2}}{n_{i}+m_{i}}; /// \f]; /// has approximately a \f$ \chi^{2}_{(r-1)} \f$ distribution [3].; /// The comparison procedure can include an analysis of the residuals which; /// is often helpful in identifying the bins of histograms responsible for; /// a significant overall \f$ \chi^{2} \f$ value. Most convenient for; /// analysis are the adjusted (normalized) residuals [4]; /// \f[; /// r_{i} = \frac{n_{i}-N\hat{p}_{i}}{\sqrt{N\hat{p}_{i}}\sqrt{(1-N/(N+M))(1-(n_{i}+m_{i})/(N+M))}}; /// \f]; /// If hypotheses of homogeneity are valid then residuals ri are; /// approximately independent and identically distributed random variables; /// having N(0,1) distribution. The application of the \f$ \chi^{2} \f$ test has; /// restrictions related to the value of the expected frequencies Npi,; /// Mpi, i=1,...,r. A conservative rule formulated in [5] is that all the; /// expectations must be 1 or greater for both histograms. In practical; /// cases when expected frequencies are not known the estimated expected; /// frequencies \f$ M\hat{p}_{i}, N\hat{p}_{i}, i=1,...,r \f$ can be used.; ///; /// #### Unweighted and weighted histograms comparison:; ///; /// A simple modification of the ideas described above can be used for the; /// comparison of the usual (unweighted) and weighted histograms. Let us; /// denote the number of events in the ith bin in the unweighted; /// histogram as ni and the common weight of events in the ith bin of the; /// weighted histogram as wi. The total number of events in the; /// unweighted histogram is equal to; ///\f[; /// N = \sum_{i=1}^{r} n_{i}; ///\f]; /// and the total weight of events in the weighted histogram is equal to; ///\f[; /// W = \sum_{i=1}^{r} w_{i}; ///\f]; /// Let us formulate ",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:7248,Testability,test,test,7248,"eight of events in the weighted histogram is equal to; ///\f[; /// W = \sum_{i=1}^{r} w_{i}; ///\f]; /// Let us formulate the hypothesis of identity of an unweighted histogram; /// to a weighted histogram so that there exist r constants p1,...,pr, such; /// that; ///\f[; /// \sum_{i=1}^{r} p_{i} = 1; ///\f]; /// for the unweighted histogram. The weight wi is a random variable with a; /// distribution approximated by the normal probability distribution; /// \f$ N(Wp_{i},\sigma_{i}^{2}) \f$ where \f$ \sigma_{i}^{2} \f$ is the variance of the weight wi.; /// If we replace the variance \f$ \sigma_{i}^{2} \f$; /// with estimate \f$ s_{i}^{2} \f$ (sum of squares of weights of; /// events in the ith bin) and the hypothesis of identity is valid, then the; /// maximum likelihood estimator of pi,i=1,...,r, is; ///\f[; /// \hat{p}_{i} = \frac{Ww_{i}-Ns_{i}^{2}+\sqrt{(Ww_{i}-Ns_{i}^{2})^{2}+4W^{2}s_{i}^{2}n_{i}}}{2W^{2}}; ///\f]; /// We may then use the test statistic; ///\f[; /// X^{2} = \sum_{i=1}^{r} \frac{(n_{i}-N\hat{p}_{i})^{2}}{N\hat{p}_{i}} + \sum_{i=1}^{r} \frac{(w_{i}-W\hat{p}_{i})^{2}}{s_{i}^{2}}; ///\f]; /// and it has approximately a \f$ \sigma^{2}_{(r-1)} \f$ distribution [2]. This test, as well; /// as the original one [3], has a restriction on the expected frequencies. The; /// expected frequencies recommended for the weighted histogram is more than 25.; /// The value of the minimal expected frequency can be decreased down to 10 for; /// the case when the weights of the events are close to constant. In the case; /// of a weighted histogram if the number of events is unknown, then we can; /// apply this recommendation for the equivalent number of events as; ///\f[; /// n_{i}^{equiv} = \frac{ w_{i}^{2} }{ s_{i}^{2} }; ///\f]; /// The minimal expected frequency for an unweighted histogram must be 1. Notice; /// that any usual (unweighted) histogram can be considered as a weighted; /// histogram with events that have constant weights equal to 1.; /// The variance \f$",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:7495,Testability,test,test,7495,"r, such; /// that; ///\f[; /// \sum_{i=1}^{r} p_{i} = 1; ///\f]; /// for the unweighted histogram. The weight wi is a random variable with a; /// distribution approximated by the normal probability distribution; /// \f$ N(Wp_{i},\sigma_{i}^{2}) \f$ where \f$ \sigma_{i}^{2} \f$ is the variance of the weight wi.; /// If we replace the variance \f$ \sigma_{i}^{2} \f$; /// with estimate \f$ s_{i}^{2} \f$ (sum of squares of weights of; /// events in the ith bin) and the hypothesis of identity is valid, then the; /// maximum likelihood estimator of pi,i=1,...,r, is; ///\f[; /// \hat{p}_{i} = \frac{Ww_{i}-Ns_{i}^{2}+\sqrt{(Ww_{i}-Ns_{i}^{2})^{2}+4W^{2}s_{i}^{2}n_{i}}}{2W^{2}}; ///\f]; /// We may then use the test statistic; ///\f[; /// X^{2} = \sum_{i=1}^{r} \frac{(n_{i}-N\hat{p}_{i})^{2}}{N\hat{p}_{i}} + \sum_{i=1}^{r} \frac{(w_{i}-W\hat{p}_{i})^{2}}{s_{i}^{2}}; ///\f]; /// and it has approximately a \f$ \sigma^{2}_{(r-1)} \f$ distribution [2]. This test, as well; /// as the original one [3], has a restriction on the expected frequencies. The; /// expected frequencies recommended for the weighted histogram is more than 25.; /// The value of the minimal expected frequency can be decreased down to 10 for; /// the case when the weights of the events are close to constant. In the case; /// of a weighted histogram if the number of events is unknown, then we can; /// apply this recommendation for the equivalent number of events as; ///\f[; /// n_{i}^{equiv} = \frac{ w_{i}^{2} }{ s_{i}^{2} }; ///\f]; /// The minimal expected frequency for an unweighted histogram must be 1. Notice; /// that any usual (unweighted) histogram can be considered as a weighted; /// histogram with events that have constant weights equal to 1.; /// The variance \f$ z_{i}^{2} \f$ of the difference between the weight wi; /// and the estimated expectation value of the weight is approximately equal to:; ///\f[; /// z_{i}^{2} = Var(w_{i}-W\hat{p}_{i}) = N\hat{p}_{i}(1-N\hat{p}_{i})\left(\frac{Ws_{i}^{2}}{\sqr",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:10335,Testability,test,test,10335,"; ///\f[; /// \sum_{i=1}^{r} p_{i} = 1; ///\f]; /// and also expectation value of weight w1i equal to W1pi and expectation value; /// of weight w2i equal to W2pi. Weights in both the histograms are random; /// variables with distributions which can be approximated by a normal; /// probability distribution \f$ N(W_{1}p_{i},\sigma_{1i}^{2}) \f$ for the first histogram; /// and by a distribution \f$ N(W_{2}p_{i},\sigma_{2i}^{2}) \f$ for the second.; /// Here \f$ \sigma_{1i}^{2} \f$ and \f$ \sigma_{2i}^{2} \f$ are the variances; /// of w1i and w2i with estimators \f$ s_{1i}^{2} \f$ and \f$ s_{2i}^{2} \f$ respectively.; /// If the hypothesis of identity is valid, then the maximum likelihood and; /// Least Square Method estimator of pi,i=1,...,r, is; ///\f[; /// \hat{p}_{i} = \frac{w_{1i}W_{1}/s_{1i}^{2}+w_{2i}W_{2} /s_{2i}^{2}}{W_{1}^{2}/s_{1i}^{2}+W_{2}^{2}/s_{2i}^{2}}; ///\f]; /// We may then use the test statistic; ///\f[; /// X^{2} = \sum_{i=1}^{r} \frac{(w_{1i}-W_{1}\hat{p}_{i})^{2}}{s_{1i}^{2}} + \sum_{i=1}^{r} \frac{(w_{2i}-W_{2}\hat{p}_{i})^{2}}{s_{2i}^{2}} = \sum_{i=1}^{r} \frac{(W_{1}w_{2i}-W_{2}w_{1i})^{2}}{W_{1}^{2}s_{2i}^{2}+W_{2}^{2}s_{1i}^{2}}; ///\f]; /// and it has approximately a \f$ \chi^{2}_{(r-1)} \f$ distribution [2].; /// The normalized or studentised residuals [6]; ///\f[; /// r_{i} = \frac{w_{1i}-W_{1}\hat{p}_{i}}{s_{1i}\sqrt{1 - \frac{1}{(1+W_{2}^{2}s_{1i}^{2}/W_{1}^{2}s_{2i}^{2})}}}; ///\f]; /// have approximately a normal distribution with mean equal to 0 and standard; /// deviation 1. A recommended minimal expected frequency is equal to 10 for; /// the proposed test.; ///; /// #### Numerical examples:; ///; /// The method described herein is now illustrated with an example.; /// We take a distribution; ///\f[; /// \phi(x) = \frac{2}{(x-10)^{2}+1} + \frac{1}{(x-14)^{2}+1} (1); ///\f]; /// defined on the interval [4,16]. Events distributed according to the formula; /// (1) are simulated to create the unweighted histogram. Uniformly distributed; ",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:11036,Testability,test,test,11036,"}^{2} \f$ and \f$ s_{2i}^{2} \f$ respectively.; /// If the hypothesis of identity is valid, then the maximum likelihood and; /// Least Square Method estimator of pi,i=1,...,r, is; ///\f[; /// \hat{p}_{i} = \frac{w_{1i}W_{1}/s_{1i}^{2}+w_{2i}W_{2} /s_{2i}^{2}}{W_{1}^{2}/s_{1i}^{2}+W_{2}^{2}/s_{2i}^{2}}; ///\f]; /// We may then use the test statistic; ///\f[; /// X^{2} = \sum_{i=1}^{r} \frac{(w_{1i}-W_{1}\hat{p}_{i})^{2}}{s_{1i}^{2}} + \sum_{i=1}^{r} \frac{(w_{2i}-W_{2}\hat{p}_{i})^{2}}{s_{2i}^{2}} = \sum_{i=1}^{r} \frac{(W_{1}w_{2i}-W_{2}w_{1i})^{2}}{W_{1}^{2}s_{2i}^{2}+W_{2}^{2}s_{1i}^{2}}; ///\f]; /// and it has approximately a \f$ \chi^{2}_{(r-1)} \f$ distribution [2].; /// The normalized or studentised residuals [6]; ///\f[; /// r_{i} = \frac{w_{1i}-W_{1}\hat{p}_{i}}{s_{1i}\sqrt{1 - \frac{1}{(1+W_{2}^{2}s_{1i}^{2}/W_{1}^{2}s_{2i}^{2})}}}; ///\f]; /// have approximately a normal distribution with mean equal to 0 and standard; /// deviation 1. A recommended minimal expected frequency is equal to 10 for; /// the proposed test.; ///; /// #### Numerical examples:; ///; /// The method described herein is now illustrated with an example.; /// We take a distribution; ///\f[; /// \phi(x) = \frac{2}{(x-10)^{2}+1} + \frac{1}{(x-14)^{2}+1} (1); ///\f]; /// defined on the interval [4,16]. Events distributed according to the formula; /// (1) are simulated to create the unweighted histogram. Uniformly distributed; /// events are simulated for the weighted histogram with weights calculated by; /// formula (1). Each histogram has the same number of bins: 20. Fig.1 shows; /// the result of comparison of the unweighted histogram with 200 events; /// (minimal expected frequency equal to one) and the weighted histogram with; /// 500 events (minimal expected frequency equal to 25); /// Begin_Macro; /// ../../../tutorials/math/chi2test.C; /// End_Macro; /// Fig 1. An example of comparison of the unweighted histogram with 200 events; /// and the weighted histogram with 500 events:; /// ",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:12152,Testability,test,test,12152,"a distribution; ///\f[; /// \phi(x) = \frac{2}{(x-10)^{2}+1} + \frac{1}{(x-14)^{2}+1} (1); ///\f]; /// defined on the interval [4,16]. Events distributed according to the formula; /// (1) are simulated to create the unweighted histogram. Uniformly distributed; /// events are simulated for the weighted histogram with weights calculated by; /// formula (1). Each histogram has the same number of bins: 20. Fig.1 shows; /// the result of comparison of the unweighted histogram with 200 events; /// (minimal expected frequency equal to one) and the weighted histogram with; /// 500 events (minimal expected frequency equal to 25); /// Begin_Macro; /// ../../../tutorials/math/chi2test.C; /// End_Macro; /// Fig 1. An example of comparison of the unweighted histogram with 200 events; /// and the weighted histogram with 500 events:; /// 1. unweighted histogram;; /// 2. weighted histogram;; /// 3. normalized residuals plot;; /// 4. normal Q-Q plot of residuals.; ///; /// The value of the test statistic \f$ \chi^{2} \f$ is equal to; /// 21.09 with p-value equal to 0.33, therefore the hypothesis of identity of; /// the two histograms can be accepted for 0.05 significant level. The behavior; /// of the normalized residuals plot (see Fig. 1c) and the normal Q-Q plot; /// (see Fig. 1d) of residuals are regular and we cannot identify the outliers; /// or bins with a big influence on \f$ \chi^{2} \f$.; ///; /// The second example presents the same two histograms but 17 events was added; /// to content of bin number 15 in unweighted histogram. Fig.2 shows the result; /// of comparison of the unweighted histogram with 217 events (minimal expected; /// frequency equal to one) and the weighted histogram with 500 events (minimal; /// expected frequency equal to 25); /// Begin_Macro; /// ../../../tutorials/math/chi2test.C(17); /// End_Macro; /// Fig 2. An example of comparison of the unweighted histogram with 217 events; /// and the weighted histogram with 500 events:; /// 1. unweighted histog",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:13297,Testability,test,test,13297,"epted for 0.05 significant level. The behavior; /// of the normalized residuals plot (see Fig. 1c) and the normal Q-Q plot; /// (see Fig. 1d) of residuals are regular and we cannot identify the outliers; /// or bins with a big influence on \f$ \chi^{2} \f$.; ///; /// The second example presents the same two histograms but 17 events was added; /// to content of bin number 15 in unweighted histogram. Fig.2 shows the result; /// of comparison of the unweighted histogram with 217 events (minimal expected; /// frequency equal to one) and the weighted histogram with 500 events (minimal; /// expected frequency equal to 25); /// Begin_Macro; /// ../../../tutorials/math/chi2test.C(17); /// End_Macro; /// Fig 2. An example of comparison of the unweighted histogram with 217 events; /// and the weighted histogram with 500 events:; /// 1. unweighted histogram;; /// 2. weighted histogram;; /// 3. normalized residuals plot;; /// 4. normal Q-Q plot of residuals.; ///; /// The value of the test statistic \f$ \chi^{2} \f$ is equal to; /// 32.33 with p-value equal to 0.029, therefore the hypothesis of identity of; /// the two histograms is rejected for 0.05 significant level. The behavior of; /// the normalized residuals plot (see Fig. 2c) and the normal Q-Q plot (see; /// Fig. 2d) of residuals are not regular and we can identify the outlier or; /// bin with a big influence on \f$ \chi^{2} \f$.; ///; /// #### References:; ///; /// - [1] Pearson, K., 1904. On the Theory of Contingency and Its Relation to; /// Association and Normal Correlation. Drapers' Co. Memoirs, Biometric; /// Series No. 1, London.; /// - [2] Gagunashvili, N., 2006. \f$ \sigma^{2} \f$ test for comparison; /// of weighted and unweighted histograms. Statistical Problems in Particle; /// Physics, Astrophysics and Cosmology, Proceedings of PHYSTAT05,; /// Oxford, UK, 12-15 September 2005, Imperial College Press, London, 43-44.; /// Gagunashvili,N., Comparison of weighted and unweighted histograms,; /// arXiv:physics/06",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:13973,Testability,test,test,13973,"17 events (minimal expected; /// frequency equal to one) and the weighted histogram with 500 events (minimal; /// expected frequency equal to 25); /// Begin_Macro; /// ../../../tutorials/math/chi2test.C(17); /// End_Macro; /// Fig 2. An example of comparison of the unweighted histogram with 217 events; /// and the weighted histogram with 500 events:; /// 1. unweighted histogram;; /// 2. weighted histogram;; /// 3. normalized residuals plot;; /// 4. normal Q-Q plot of residuals.; ///; /// The value of the test statistic \f$ \chi^{2} \f$ is equal to; /// 32.33 with p-value equal to 0.029, therefore the hypothesis of identity of; /// the two histograms is rejected for 0.05 significant level. The behavior of; /// the normalized residuals plot (see Fig. 2c) and the normal Q-Q plot (see; /// Fig. 2d) of residuals are not regular and we can identify the outlier or; /// bin with a big influence on \f$ \chi^{2} \f$.; ///; /// #### References:; ///; /// - [1] Pearson, K., 1904. On the Theory of Contingency and Its Relation to; /// Association and Normal Correlation. Drapers' Co. Memoirs, Biometric; /// Series No. 1, London.; /// - [2] Gagunashvili, N., 2006. \f$ \sigma^{2} \f$ test for comparison; /// of weighted and unweighted histograms. Statistical Problems in Particle; /// Physics, Astrophysics and Cosmology, Proceedings of PHYSTAT05,; /// Oxford, UK, 12-15 September 2005, Imperial College Press, London, 43-44.; /// Gagunashvili,N., Comparison of weighted and unweighted histograms,; /// arXiv:physics/0605123, 2006.; /// - [3] Cramer, H., 1946. Mathematical methods of statistics.; /// Princeton University Press, Princeton.; /// - [4] Haberman, S.J., 1973. The analysis of residuals in cross-classified tables.; /// Biometrics 29, 205-220.; /// - [5] Lewontin, R.C. and Felsenstein, J., 1965. The robustness of homogeneity; /// test in 2xN tables. Biometrics 21, 19-33.; /// - [6] Seber, G.A.F., Lee, A.J., 2003, Linear Regression Analysis.; /// John Wiley & Sons Inc., New York.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:14635,Testability,test,test,14635,"17 events (minimal expected; /// frequency equal to one) and the weighted histogram with 500 events (minimal; /// expected frequency equal to 25); /// Begin_Macro; /// ../../../tutorials/math/chi2test.C(17); /// End_Macro; /// Fig 2. An example of comparison of the unweighted histogram with 217 events; /// and the weighted histogram with 500 events:; /// 1. unweighted histogram;; /// 2. weighted histogram;; /// 3. normalized residuals plot;; /// 4. normal Q-Q plot of residuals.; ///; /// The value of the test statistic \f$ \chi^{2} \f$ is equal to; /// 32.33 with p-value equal to 0.029, therefore the hypothesis of identity of; /// the two histograms is rejected for 0.05 significant level. The behavior of; /// the normalized residuals plot (see Fig. 2c) and the normal Q-Q plot (see; /// Fig. 2d) of residuals are not regular and we can identify the outlier or; /// bin with a big influence on \f$ \chi^{2} \f$.; ///; /// #### References:; ///; /// - [1] Pearson, K., 1904. On the Theory of Contingency and Its Relation to; /// Association and Normal Correlation. Drapers' Co. Memoirs, Biometric; /// Series No. 1, London.; /// - [2] Gagunashvili, N., 2006. \f$ \sigma^{2} \f$ test for comparison; /// of weighted and unweighted histograms. Statistical Problems in Particle; /// Physics, Astrophysics and Cosmology, Proceedings of PHYSTAT05,; /// Oxford, UK, 12-15 September 2005, Imperial College Press, London, 43-44.; /// Gagunashvili,N., Comparison of weighted and unweighted histograms,; /// arXiv:physics/0605123, 2006.; /// - [3] Cramer, H., 1946. Mathematical methods of statistics.; /// Princeton University Press, Princeton.; /// - [4] Haberman, S.J., 1973. The analysis of residuals in cross-classified tables.; /// Biometrics 29, 205-220.; /// - [5] Lewontin, R.C. and Felsenstein, J., 1965. The robustness of homogeneity; /// test in 2xN tables. Biometrics 21, 19-33.; /// - [6] Seber, G.A.F., Lee, A.J., 2003, Linear Regression Analysis.; /// John Wiley & Sons Inc., New York.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:5839,Usability,simpl,simple,5839,"in identifying the bins of histograms responsible for; /// a significant overall \f$ \chi^{2} \f$ value. Most convenient for; /// analysis are the adjusted (normalized) residuals [4]; /// \f[; /// r_{i} = \frac{n_{i}-N\hat{p}_{i}}{\sqrt{N\hat{p}_{i}}\sqrt{(1-N/(N+M))(1-(n_{i}+m_{i})/(N+M))}}; /// \f]; /// If hypotheses of homogeneity are valid then residuals ri are; /// approximately independent and identically distributed random variables; /// having N(0,1) distribution. The application of the \f$ \chi^{2} \f$ test has; /// restrictions related to the value of the expected frequencies Npi,; /// Mpi, i=1,...,r. A conservative rule formulated in [5] is that all the; /// expectations must be 1 or greater for both histograms. In practical; /// cases when expected frequencies are not known the estimated expected; /// frequencies \f$ M\hat{p}_{i}, N\hat{p}_{i}, i=1,...,r \f$ can be used.; ///; /// #### Unweighted and weighted histograms comparison:; ///; /// A simple modification of the ideas described above can be used for the; /// comparison of the usual (unweighted) and weighted histograms. Let us; /// denote the number of events in the ith bin in the unweighted; /// histogram as ni and the common weight of events in the ith bin of the; /// weighted histogram as wi. The total number of events in the; /// unweighted histogram is equal to; ///\f[; /// N = \sum_{i=1}^{r} n_{i}; ///\f]; /// and the total weight of events in the weighted histogram is equal to; ///\f[; /// W = \sum_{i=1}^{r} w_{i}; ///\f]; /// Let us formulate the hypothesis of identity of an unweighted histogram; /// to a weighted histogram so that there exist r constants p1,...,pr, such; /// that; ///\f[; /// \sum_{i=1}^{r} p_{i} = 1; ///\f]; /// for the unweighted histogram. The weight wi is a random variable with a; /// distribution approximated by the normal probability distribution; /// \f$ N(Wp_{i},\sigma_{i}^{2}) \f$ where \f$ \sigma_{i}^{2} \f$ is the variance of the weight wi.; /// If we replace t",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:102,Integrability,rout,routine,102,"////////////////////////////////////////////////////////////////////////////////; /// The computation routine of the Chisquare test. For the method description,; /// see Chi2Test() function.; ///; /// \return p-value; /// \param[in] h2 the second histogram; /// \param[in] option; /// - ""UU"" = experiment experiment comparison (unweighted-unweighted); /// - ""UW"" = experiment MC comparison (unweighted-weighted). Note that the first; /// histogram should be unweighted; /// - ""WW"" = MC MC comparison (weighted-weighted); /// - ""NORM"" = if one or both histograms is scaled; /// - ""OF"" = overflows included; /// - ""UF"" = underflows included; /// by default underflows and overflows are not included; /// \param[out] igood test output; /// - igood=0 - no problems; /// - For unweighted unweighted comparison; /// - igood=1'There is a bin in the 1st histogram with less than 1 event'; /// - igood=2'There is a bin in the 2nd histogram with less than 1 event'; /// - igood=3'when the conditions for igood=1 and igood=2 are satisfied'; /// - For unweighted weighted comparison; /// - igood=1'There is a bin in the 1st histogram with less then 1 event'; /// - igood=2'There is a bin in the 2nd histogram with less then 10 effective number of events'; /// - igood=3'when the conditions for igood=1 and igood=2 are satisfied'; /// - For weighted weighted comparison; /// - igood=1'There is a bin in the 1st histogram with less then 10 effective; /// number of events'; /// - igood=2'There is a bin in the 2nd histogram with less then 10 effective; /// number of events'; /// - igood=3'when the conditions for igood=1 and igood=2 are satisfied'; /// \param[out] chi2 chisquare of the test; /// \param[out] ndf number of degrees of freedom (important, when both histograms have the same empty bins); /// \param[out] res normalized residuals for further analysis",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:127,Testability,test,test,127,"////////////////////////////////////////////////////////////////////////////////; /// The computation routine of the Chisquare test. For the method description,; /// see Chi2Test() function.; ///; /// \return p-value; /// \param[in] h2 the second histogram; /// \param[in] option; /// - ""UU"" = experiment experiment comparison (unweighted-unweighted); /// - ""UW"" = experiment MC comparison (unweighted-weighted). Note that the first; /// histogram should be unweighted; /// - ""WW"" = MC MC comparison (weighted-weighted); /// - ""NORM"" = if one or both histograms is scaled; /// - ""OF"" = overflows included; /// - ""UF"" = underflows included; /// by default underflows and overflows are not included; /// \param[out] igood test output; /// - igood=0 - no problems; /// - For unweighted unweighted comparison; /// - igood=1'There is a bin in the 1st histogram with less than 1 event'; /// - igood=2'There is a bin in the 2nd histogram with less than 1 event'; /// - igood=3'when the conditions for igood=1 and igood=2 are satisfied'; /// - For unweighted weighted comparison; /// - igood=1'There is a bin in the 1st histogram with less then 1 event'; /// - igood=2'There is a bin in the 2nd histogram with less then 10 effective number of events'; /// - igood=3'when the conditions for igood=1 and igood=2 are satisfied'; /// - For weighted weighted comparison; /// - igood=1'There is a bin in the 1st histogram with less then 10 effective; /// number of events'; /// - igood=2'There is a bin in the 2nd histogram with less then 10 effective; /// number of events'; /// - igood=3'when the conditions for igood=1 and igood=2 are satisfied'; /// \param[out] chi2 chisquare of the test; /// \param[out] ndf number of degrees of freedom (important, when both histograms have the same empty bins); /// \param[out] res normalized residuals for further analysis",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:720,Testability,test,test,720,"////////////////////////////////////////////////////////////////////////////////; /// The computation routine of the Chisquare test. For the method description,; /// see Chi2Test() function.; ///; /// \return p-value; /// \param[in] h2 the second histogram; /// \param[in] option; /// - ""UU"" = experiment experiment comparison (unweighted-unweighted); /// - ""UW"" = experiment MC comparison (unweighted-weighted). Note that the first; /// histogram should be unweighted; /// - ""WW"" = MC MC comparison (weighted-weighted); /// - ""NORM"" = if one or both histograms is scaled; /// - ""OF"" = overflows included; /// - ""UF"" = underflows included; /// by default underflows and overflows are not included; /// \param[out] igood test output; /// - igood=0 - no problems; /// - For unweighted unweighted comparison; /// - igood=1'There is a bin in the 1st histogram with less than 1 event'; /// - igood=2'There is a bin in the 2nd histogram with less than 1 event'; /// - igood=3'when the conditions for igood=1 and igood=2 are satisfied'; /// - For unweighted weighted comparison; /// - igood=1'There is a bin in the 1st histogram with less then 1 event'; /// - igood=2'There is a bin in the 2nd histogram with less then 10 effective number of events'; /// - igood=3'when the conditions for igood=1 and igood=2 are satisfied'; /// - For weighted weighted comparison; /// - igood=1'There is a bin in the 1st histogram with less then 10 effective; /// number of events'; /// - igood=2'There is a bin in the 2nd histogram with less then 10 effective; /// number of events'; /// - igood=3'when the conditions for igood=1 and igood=2 are satisfied'; /// \param[out] chi2 chisquare of the test; /// \param[out] ndf number of degrees of freedom (important, when both histograms have the same empty bins); /// \param[out] res normalized residuals for further analysis",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1674,Testability,test,test,1674,"////////////////////////////////////////////////////////////////////////////////; /// The computation routine of the Chisquare test. For the method description,; /// see Chi2Test() function.; ///; /// \return p-value; /// \param[in] h2 the second histogram; /// \param[in] option; /// - ""UU"" = experiment experiment comparison (unweighted-unweighted); /// - ""UW"" = experiment MC comparison (unweighted-weighted). Note that the first; /// histogram should be unweighted; /// - ""WW"" = MC MC comparison (weighted-weighted); /// - ""NORM"" = if one or both histograms is scaled; /// - ""OF"" = overflows included; /// - ""UF"" = underflows included; /// by default underflows and overflows are not included; /// \param[out] igood test output; /// - igood=0 - no problems; /// - For unweighted unweighted comparison; /// - igood=1'There is a bin in the 1st histogram with less than 1 event'; /// - igood=2'There is a bin in the 2nd histogram with less than 1 event'; /// - igood=3'when the conditions for igood=1 and igood=2 are satisfied'; /// - For unweighted weighted comparison; /// - igood=1'There is a bin in the 1st histogram with less then 1 event'; /// - igood=2'There is a bin in the 2nd histogram with less then 10 effective number of events'; /// - igood=3'when the conditions for igood=1 and igood=2 are satisfied'; /// - For weighted weighted comparison; /// - igood=1'There is a bin in the 1st histogram with less then 10 effective; /// number of events'; /// - igood=2'There is a bin in the 2nd histogram with less then 10 effective; /// number of events'; /// - igood=3'when the conditions for igood=1 and igood=2 are satisfied'; /// \param[out] chi2 chisquare of the test; /// \param[out] ndf number of degrees of freedom (important, when both histograms have the same empty bins); /// \param[out] res normalized residuals for further analysis",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:18,Availability,error,errors,18,"// avoid rounding errors",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:3,Safety,avoid,avoid,3,"// avoid rounding errors",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:18,Availability,error,errors,18,"// avoid rounding errors",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:3,Safety,avoid,avoid,3,"// avoid rounding errors",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:6,Testability,TEST,TEST,6,"//THE TEST",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:18,Availability,error,errors,18,"// avoid rounding errors",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:3,Safety,avoid,avoid,3,"// avoid rounding errors",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:18,Availability,error,errors,18,"// avoid rounding errors",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:3,Safety,avoid,avoid,3,"// avoid rounding errors",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:8,Availability,error,error,8,"// flag error only when of the two histogram is zero",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:48,Availability,error,error,48,"// unweighted - weighted comparison; // case of error = 0 and content not zero is treated without problems by excluding second chi2 sum; // and can be considered as a data-theory comparison",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:52,Availability,error,error,52,"// case weighted histogram has zero bin content and error",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:23,Availability,error,error,23,"// use as approximated error as 1 scaled by a scaling ratio; // estimated from the total sum weight and sum weight squared",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:10,Availability,error,error,10,"// return error because infinite discrepancy here:; // bin1 != 0 and bin2 =0 in a histogram with all errors zero",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:101,Availability,error,errors,101,"// return error because infinite discrepancy here:; // bin1 != 0 and bin2 =0 in a histogram with all errors zero",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:151,Availability,error,errors,151,"// if cnt1 is zero and cnt2 = 1 and sum1 = sum2 var1 = 0 && var2 == 0; // approximate by incrementing cnt1; // LM (this need to be fixed for numerical errors)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:92,Availability,error,errors,92,"// case both histogram have zero bin contents; // (use square of content to avoid numerical errors)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:76,Safety,avoid,avoid,76,"// case both histogram have zero bin contents; // (use square of content to avoid numerical errors)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:55,Availability,error,errors,55,"// cannot treat case of booth histogram have zero zero errors",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:240,Availability,error,error,240,"////////////////////////////////////////////////////////////////////////////////; /// Compute and return the chisquare of this histogram with respect to a function; /// The chisquare is computed by weighting each histogram point by the bin error; /// By default the full range of the histogram is used.; /// Use option ""R"" for restricting the chisquare calculation to the given range of the function; /// Use option ""L"" for using the chisquare based on the poisson likelihood (Baker-Cousins Chisquare); /// Use option ""P"" for using the Pearson chisquare based on the expected bin errors",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:580,Availability,error,errors,580,"////////////////////////////////////////////////////////////////////////////////; /// Compute and return the chisquare of this histogram with respect to a function; /// The chisquare is computed by weighting each histogram point by the bin error; /// By default the full range of the histogram is used.; /// Use option ""R"" for restricting the chisquare calculation to the given range of the function; /// Use option ""L"" for using the chisquare based on the poisson likelihood (Baker-Cousins Chisquare); /// Use option ""P"" for using the Pearson chisquare based on the expected bin errors",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:30,Availability,error,error,30,"// default chi2 with observed error",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:296,Usability,clear,cleared,296,"////////////////////////////////////////////////////////////////////////////////; /// Remove all the content from the underflow and overflow bins, without changing the number of entries; /// After calling this method, every undeflow and overflow bins will have content 0.0; /// The Sumw2 is also cleared, since there is no more content in the bins",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:550,Availability,error,error,550,"////////////////////////////////////////////////////////////////////////////////; /// Compute integral (normalized cumulative sum of bins) w/o under/overflows; /// The result is stored in fIntegral and used by the GetRandom functions.; /// This function is automatically called by GetRandom when the fIntegral; /// array does not exist or when the number of entries in the histogram; /// has changed since the previous call to GetRandom.; /// The resulting integral is normalized to 1.; /// If the routine is called with the onlyPositive flag set an error will; /// be produced in case of negative bin content and a NaN value returned; /// \return 1 if success, 0 if integral is zero, NAN if onlyPositive-test fails",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:498,Integrability,rout,routine,498,"////////////////////////////////////////////////////////////////////////////////; /// Compute integral (normalized cumulative sum of bins) w/o under/overflows; /// The result is stored in fIntegral and used by the GetRandom functions.; /// This function is automatically called by GetRandom when the fIntegral; /// array does not exist or when the number of entries in the histogram; /// has changed since the previous call to GetRandom.; /// The resulting integral is normalized to 1.; /// If the routine is called with the onlyPositive flag set an error will; /// be produced in case of negative bin content and a NaN value returned; /// \return 1 if success, 0 if integral is zero, NAN if onlyPositive-test fails",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:705,Testability,test,test,705,"////////////////////////////////////////////////////////////////////////////////; /// Compute integral (normalized cumulative sum of bins) w/o under/overflows; /// The result is stored in fIntegral and used by the GetRandom functions.; /// This function is automatically called by GetRandom when the fIntegral; /// array does not exist or when the number of entries in the histogram; /// has changed since the previous call to GetRandom.; /// The resulting integral is normalized to 1.; /// If the routine is called with the onlyPositive flag set an error will; /// be produced in case of negative bin content and a NaN value returned; /// \return 1 if success, 0 if integral is zero, NAN if onlyPositive-test fails",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:5,Energy Efficiency,Allocate,Allocate,5,"// - Allocate space to store the integral and compute integral",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:31,Security,hash,hash,31,"// We are likely to change the hash value of this object; // with TNamed::Copy, to keep things correct, we need to; // clean up its existing entries.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:290,Deployability,update,update,290,"// The Copy above might have published 'obj' to the ListOfCleanups.; // Clone can call RecursiveRemove, for example via TCheckHashRecursiveRemoveConsistency; // when dictionary information is initialized, so we need to; // keep obj->fFunction valid during its execution and; // protect the update with the write lock.; // Reset stats parent - else cloning the stats will clone this histogram, too.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:86,Performance,Perform,Perform,86,"////////////////////////////////////////////////////////////////////////////////; /// Perform the automatic addition of the histogram to the given directory; ///; /// Note this function is called in place when the semantic requires; /// this object to be added to a directory (I.e. when being read from; /// a TKey or being Cloned)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:326,Usability,simpl,simple,326,"////////////////////////////////////////////////////////////////////////////////; /// Compute distance from point px,py to a line.; ///; /// Compute the closest distance of approach from point px,py to elements; /// of a histogram.; /// The distance is computed in pixels units.; ///; /// #### Algorithm:; /// Currently, this simple model computes the distance from the mouse; /// to the histogram contour only.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:140,Availability,error,errors,140,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: `this = this/(c1*f1)`; /// if errors are defined (see TH1::Sumw2), errors are also recalculated.; ///; /// Only bins inside the function range are recomputed.; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Divide; ///; /// The function return kFALSE if the divide operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:177,Availability,error,errors,177,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: `this = this/(c1*f1)`; /// if errors are defined (see TH1::Sumw2), errors are also recalculated.; ///; /// Only bins inside the function range are recomputed.; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Divide; ///; /// The function return kFALSE if the divide operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:315,Availability,error,errors,315,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: `this = this/(c1*f1)`; /// if errors are defined (see TH1::Sumw2), errors are also recalculated.; ///; /// Only bins inside the function range are recomputed.; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Divide; ///; /// The function return kFALSE if the divide operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: `this = this/(c1*f1)`; /// if errors are defined (see TH1::Sumw2), errors are also recalculated.; ///; /// Only bins inside the function range are recomputed.; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Divide; ///; /// The function return kFALSE if the divide operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:150,Availability,error,errors,150,"////////////////////////////////////////////////////////////////////////////////; /// Divide this histogram by h1.; ///; /// `this = this/h1`; /// if errors are defined (see TH1::Sumw2), errors are also recalculated.; /// Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; /// The resulting errors are calculated assuming uncorrelated histograms.; /// See the other TH1::Divide that gives the possibility to optionally; /// compute binomial errors.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Scale; ///; /// The function return kFALSE if the divide operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:187,Availability,error,errors,187,"////////////////////////////////////////////////////////////////////////////////; /// Divide this histogram by h1.; ///; /// `this = this/h1`; /// if errors are defined (see TH1::Sumw2), errors are also recalculated.; /// Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; /// The resulting errors are calculated assuming uncorrelated histograms.; /// See the other TH1::Divide that gives the possibility to optionally; /// compute binomial errors.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Scale; ///; /// The function return kFALSE if the divide operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:336,Availability,error,errors,336,"////////////////////////////////////////////////////////////////////////////////; /// Divide this histogram by h1.; ///; /// `this = this/h1`; /// if errors are defined (see TH1::Sumw2), errors are also recalculated.; /// Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; /// The resulting errors are calculated assuming uncorrelated histograms.; /// See the other TH1::Divide that gives the possibility to optionally; /// compute binomial errors.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Scale; ///; /// The function return kFALSE if the divide operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:486,Availability,error,errors,486,"////////////////////////////////////////////////////////////////////////////////; /// Divide this histogram by h1.; ///; /// `this = this/h1`; /// if errors are defined (see TH1::Sumw2), errors are also recalculated.; /// Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; /// The resulting errors are calculated assuming uncorrelated histograms.; /// See the other TH1::Divide that gives the possibility to optionally; /// compute binomial errors.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Scale; ///; /// The function return kFALSE if the divide operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:545,Availability,error,errors,545,"////////////////////////////////////////////////////////////////////////////////; /// Divide this histogram by h1.; ///; /// `this = this/h1`; /// if errors are defined (see TH1::Sumw2), errors are also recalculated.; /// Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; /// The resulting errors are calculated assuming uncorrelated histograms.; /// See the other TH1::Divide that gives the possibility to optionally; /// compute binomial errors.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Scale; ///; /// The function return kFALSE if the divide operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:196,Availability,error,errors,196,"////////////////////////////////////////////////////////////////////////////////; /// Replace contents of this histogram by the division of h1 by h2.; ///; /// `this = c1*h1/(c2*h2)`; ///; /// If errors are defined (see TH1::Sumw2), errors are also recalculated; /// Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; /// The resulting errors are calculated assuming uncorrelated histograms.; /// However, if option =""B"" is specified, Binomial errors are computed.; /// In this case c1 and c2 do not make real sense and they are ignored.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Divide; ///; /// Please note also that in the binomial case errors are calculated using standard; /// binomial statistics, which means when b1 = b2, the error is zero.; /// If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must; /// use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower; /// error for the case b1=b2.; ///; /// The function return kFALSE if the divide operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:233,Availability,error,errors,233,"////////////////////////////////////////////////////////////////////////////////; /// Replace contents of this histogram by the division of h1 by h2.; ///; /// `this = c1*h1/(c2*h2)`; ///; /// If errors are defined (see TH1::Sumw2), errors are also recalculated; /// Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; /// The resulting errors are calculated assuming uncorrelated histograms.; /// However, if option =""B"" is specified, Binomial errors are computed.; /// In this case c1 and c2 do not make real sense and they are ignored.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Divide; ///; /// Please note also that in the binomial case errors are calculated using standard; /// binomial statistics, which means when b1 = b2, the error is zero.; /// If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must; /// use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower; /// error for the case b1=b2.; ///; /// The function return kFALSE if the divide operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:388,Availability,error,errors,388,"////////////////////////////////////////////////////////////////////////////////; /// Replace contents of this histogram by the division of h1 by h2.; ///; /// `this = c1*h1/(c2*h2)`; ///; /// If errors are defined (see TH1::Sumw2), errors are also recalculated; /// Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; /// The resulting errors are calculated assuming uncorrelated histograms.; /// However, if option =""B"" is specified, Binomial errors are computed.; /// In this case c1 and c2 do not make real sense and they are ignored.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Divide; ///; /// Please note also that in the binomial case errors are calculated using standard; /// binomial statistics, which means when b1 = b2, the error is zero.; /// If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must; /// use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower; /// error for the case b1=b2.; ///; /// The function return kFALSE if the divide operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:496,Availability,error,errors,496,"////////////////////////////////////////////////////////////////////////////////; /// Replace contents of this histogram by the division of h1 by h2.; ///; /// `this = c1*h1/(c2*h2)`; ///; /// If errors are defined (see TH1::Sumw2), errors are also recalculated; /// Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; /// The resulting errors are calculated assuming uncorrelated histograms.; /// However, if option =""B"" is specified, Binomial errors are computed.; /// In this case c1 and c2 do not make real sense and they are ignored.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Divide; ///; /// Please note also that in the binomial case errors are calculated using standard; /// binomial statistics, which means when b1 = b2, the error is zero.; /// If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must; /// use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower; /// error for the case b1=b2.; ///; /// The function return kFALSE if the divide operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:641,Availability,error,errors,641,"////////////////////////////////////////////////////////////////////////////////; /// Replace contents of this histogram by the division of h1 by h2.; ///; /// `this = c1*h1/(c2*h2)`; ///; /// If errors are defined (see TH1::Sumw2), errors are also recalculated; /// Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; /// The resulting errors are calculated assuming uncorrelated histograms.; /// However, if option =""B"" is specified, Binomial errors are computed.; /// In this case c1 and c2 do not make real sense and they are ignored.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Divide; ///; /// Please note also that in the binomial case errors are calculated using standard; /// binomial statistics, which means when b1 = b2, the error is zero.; /// If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must; /// use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower; /// error for the case b1=b2.; ///; /// The function return kFALSE if the divide operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:861,Availability,error,errors,861,"////////////////////////////////////////////////////////////////////////////////; /// Replace contents of this histogram by the division of h1 by h2.; ///; /// `this = c1*h1/(c2*h2)`; ///; /// If errors are defined (see TH1::Sumw2), errors are also recalculated; /// Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; /// The resulting errors are calculated assuming uncorrelated histograms.; /// However, if option =""B"" is specified, Binomial errors are computed.; /// In this case c1 and c2 do not make real sense and they are ignored.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Divide; ///; /// Please note also that in the binomial case errors are calculated using standard; /// binomial statistics, which means when b1 = b2, the error is zero.; /// If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must; /// use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower; /// error for the case b1=b2.; ///; /// The function return kFALSE if the divide operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:954,Availability,error,error,954,"////////////////////////////////////////////////////////////////////////////////; /// Replace contents of this histogram by the division of h1 by h2.; ///; /// `this = c1*h1/(c2*h2)`; ///; /// If errors are defined (see TH1::Sumw2), errors are also recalculated; /// Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; /// The resulting errors are calculated assuming uncorrelated histograms.; /// However, if option =""B"" is specified, Binomial errors are computed.; /// In this case c1 and c2 do not make real sense and they are ignored.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Divide; ///; /// Please note also that in the binomial case errors are calculated using standard; /// binomial statistics, which means when b1 = b2, the error is zero.; /// If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must; /// use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower; /// error for the case b1=b2.; ///; /// The function return kFALSE if the divide operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1007,Availability,error,errors,1007,"////////////////////////////////////////////////////////////////////////////////; /// Replace contents of this histogram by the division of h1 by h2.; ///; /// `this = c1*h1/(c2*h2)`; ///; /// If errors are defined (see TH1::Sumw2), errors are also recalculated; /// Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; /// The resulting errors are calculated assuming uncorrelated histograms.; /// However, if option =""B"" is specified, Binomial errors are computed.; /// In this case c1 and c2 do not make real sense and they are ignored.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Divide; ///; /// Please note also that in the binomial case errors are calculated using standard; /// binomial statistics, which means when b1 = b2, the error is zero.; /// If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must; /// use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower; /// error for the case b1=b2.; ///; /// The function return kFALSE if the divide operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1177,Availability,error,error,1177,"////////////////////////////////////////////////////////////////////////////////; /// Replace contents of this histogram by the division of h1 by h2.; ///; /// `this = c1*h1/(c2*h2)`; ///; /// If errors are defined (see TH1::Sumw2), errors are also recalculated; /// Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; /// The resulting errors are calculated assuming uncorrelated histograms.; /// However, if option =""B"" is specified, Binomial errors are computed.; /// In this case c1 and c2 do not make real sense and they are ignored.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Divide; ///; /// Please note also that in the binomial case errors are calculated using standard; /// binomial statistics, which means when b1 = b2, the error is zero.; /// If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must; /// use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower; /// error for the case b1=b2.; ///; /// The function return kFALSE if the divide operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:59,Availability,error,errors,59,"// Create Sumw2 if h1 or h2 have Sumw2 set, or if binomial errors are explicitly requested",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:16,Availability,error,error,16,"//in case b1=b2 error is zero; //use TGraphAsymmErrors::BayesDivide for getting the asymmetric error not equal to zero",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:95,Availability,error,error,95,"//in case b1=b2 error is zero; //use TGraphAsymmErrors::BayesDivide for getting the asymmetric error not equal to zero",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:648,Deployability,update,updated,648,"////////////////////////////////////////////////////////////////////////////////; /// Draw this histogram with options.; ///; /// Histograms are drawn via the THistPainter class. Each histogram has; /// a pointer to its own painter (to be usable in a multithreaded program).; /// The same histogram can be drawn with different options in different pads.; /// When a histogram drawn in a pad is deleted, the histogram is; /// automatically removed from the pad or pads where it was drawn.; /// If a histogram is drawn in a pad, then filled again, the new status; /// of the histogram will be automatically shown in the pad next time; /// the pad is updated. One does not need to redraw the histogram.; /// To draw the current version of a histogram in a pad, one can use; /// `h->DrawCopy();`; /// This makes a clone of the histogram. Once the clone is drawn, the original; /// histogram may be modified or deleted without affecting the aspect of the; /// clone.; /// By default, TH1::Draw clears the current pad.; ///; /// One can use TH1::SetMaximum and TH1::SetMinimum to force a particular; /// value for the maximum or the minimum scale on the plot.; ///; /// TH1::UseCurrentStyle can be used to change all histogram graphics; /// attributes to correspond to the current selected style.; /// This function must be called for each histogram.; /// In case one reads and draws many histograms from a file, one can force; /// the histograms to inherit automatically the current graphics style; /// by calling before gROOT->ForceStyle();; ///; /// See the THistPainter class for a description of all the drawing options.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1444,Modifiability,inherit,inherit,1444,"////////////////////////////////////////////////////////////////////////////////; /// Draw this histogram with options.; ///; /// Histograms are drawn via the THistPainter class. Each histogram has; /// a pointer to its own painter (to be usable in a multithreaded program).; /// The same histogram can be drawn with different options in different pads.; /// When a histogram drawn in a pad is deleted, the histogram is; /// automatically removed from the pad or pads where it was drawn.; /// If a histogram is drawn in a pad, then filled again, the new status; /// of the histogram will be automatically shown in the pad next time; /// the pad is updated. One does not need to redraw the histogram.; /// To draw the current version of a histogram in a pad, one can use; /// `h->DrawCopy();`; /// This makes a clone of the histogram. Once the clone is drawn, the original; /// histogram may be modified or deleted without affecting the aspect of the; /// clone.; /// By default, TH1::Draw clears the current pad.; ///; /// One can use TH1::SetMaximum and TH1::SetMinimum to force a particular; /// value for the maximum or the minimum scale on the plot.; ///; /// TH1::UseCurrentStyle can be used to change all histogram graphics; /// attributes to correspond to the current selected style.; /// This function must be called for each histogram.; /// In case one reads and draws many histograms from a file, one can force; /// the histograms to inherit automatically the current graphics style; /// by calling before gROOT->ForceStyle();; ///; /// See the THistPainter class for a description of all the drawing options.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:239,Usability,usab,usable,239,"////////////////////////////////////////////////////////////////////////////////; /// Draw this histogram with options.; ///; /// Histograms are drawn via the THistPainter class. Each histogram has; /// a pointer to its own painter (to be usable in a multithreaded program).; /// The same histogram can be drawn with different options in different pads.; /// When a histogram drawn in a pad is deleted, the histogram is; /// automatically removed from the pad or pads where it was drawn.; /// If a histogram is drawn in a pad, then filled again, the new status; /// of the histogram will be automatically shown in the pad next time; /// the pad is updated. One does not need to redraw the histogram.; /// To draw the current version of a histogram in a pad, one can use; /// `h->DrawCopy();`; /// This makes a clone of the histogram. Once the clone is drawn, the original; /// histogram may be modified or deleted without affecting the aspect of the; /// clone.; /// By default, TH1::Draw clears the current pad.; ///; /// One can use TH1::SetMaximum and TH1::SetMinimum to force a particular; /// value for the maximum or the minimum scale on the plot.; ///; /// TH1::UseCurrentStyle can be used to change all histogram graphics; /// attributes to correspond to the current selected style.; /// This function must be called for each histogram.; /// In case one reads and draws many histograms from a file, one can force; /// the histograms to inherit automatically the current graphics style; /// by calling before gROOT->ForceStyle();; ///; /// See the THistPainter class for a description of all the drawing options.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:989,Usability,clear,clears,989,"////////////////////////////////////////////////////////////////////////////////; /// Draw this histogram with options.; ///; /// Histograms are drawn via the THistPainter class. Each histogram has; /// a pointer to its own painter (to be usable in a multithreaded program).; /// The same histogram can be drawn with different options in different pads.; /// When a histogram drawn in a pad is deleted, the histogram is; /// automatically removed from the pad or pads where it was drawn.; /// If a histogram is drawn in a pad, then filled again, the new status; /// of the histogram will be automatically shown in the pad next time; /// the pad is updated. One does not need to redraw the histogram.; /// To draw the current version of a histogram in a pad, one can use; /// `h->DrawCopy();`; /// This makes a clone of the histogram. Once the clone is drawn, the original; /// histogram may be modified or deleted without affecting the aspect of the; /// clone.; /// By default, TH1::Draw clears the current pad.; ///; /// One can use TH1::SetMaximum and TH1::SetMinimum to force a particular; /// value for the maximum or the minimum scale on the plot.; ///; /// TH1::UseCurrentStyle can be used to change all histogram graphics; /// attributes to correspond to the current selected style.; /// This function must be called for each histogram.; /// In case one reads and draws many histograms from a file, one can force; /// the histograms to inherit automatically the current graphics style; /// by calling before gROOT->ForceStyle();; ///; /// See the THistPainter class for a description of all the drawing options.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:689,Usability,clear,cleared,689,"////////////////////////////////////////////////////////////////////////////////; /// Draw a normalized copy of this histogram.; ///; /// A clone of this histogram is normalized to norm and drawn with option.; /// A pointer to the normalized histogram is returned.; /// The contents of the histogram copy are scaled such that the new; /// sum of weights (excluding under and overflow) is equal to norm.; /// Note that the returned normalized histogram is not added to the list; /// of histograms in the current directory in memory.; /// It is the user's responsibility to delete this histogram.; /// The kCanDelete bit is set for the returned object. If a pad containing; /// this copy is cleared, the histogram will be automatically deleted.; ///; /// See Draw for the list of options",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:27,Availability,error,error,27,"// in case of drawing with error options - scale correctly the error",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:63,Availability,error,error,63,"// in case of drawing with error options - scale correctly the error",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:32,Availability,Error,Error,32,"// do not use in this case the ""Error option "" for drawing which is enabled by default since the normalized histogram has now errors",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:126,Availability,error,errors,126,"// do not use in this case the ""Error option "" for drawing which is enabled by default since the normalized histogram has now errors",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:370,Deployability,release,released,370,"////////////////////////////////////////////////////////////////////////////////; /// Execute action corresponding to one event.; ///; /// This member function is called when a histogram is clicked with the locator; ///; /// If Left button clicked on the bin top value, then the content of this bin; /// is modified according to the new position of the mouse when it is released.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:162,Availability,Avail,Available,162,"////////////////////////////////////////////////////////////////////////////////; /// This function allows to do discrete Fourier transforms of TH1 and TH2.; /// Available transform types and flags are described below.; ///; /// To extract more information about the transform, use the function; /// TVirtualFFT::GetCurrentTransform() to get a pointer to the current; /// transform object.; ///; /// \param[out] h_output histogram for the output. If a null pointer is passed, a new histogram is created; /// and returned, otherwise, the provided histogram is used and should be big enough; /// \param[in] option option parameters consists of 3 parts:; /// - option on what to return; /// - ""RE"" - returns a histogram of the real part of the output; /// - ""IM"" - returns a histogram of the imaginary part of the output; /// - ""MAG""- returns a histogram of the magnitude of the output; /// - ""PH"" - returns a histogram of the phase of the output; /// - option of transform type; /// - ""R2C"" - real to complex transforms - default; /// - ""R2HC"" - real to halfcomplex (special format of storing output data,; /// results the same as for R2C); /// - ""DHT"" - discrete Hartley transform; /// real to real transforms (sine and cosine):; /// - ""R2R_0"", ""R2R_1"", ""R2R_2"", ""R2R_3"" - discrete cosine transforms of types I-IV; /// - ""R2R_4"", ""R2R_5"", ""R2R_6"", ""R2R_7"" - discrete sine transforms of types I-IV; /// To specify the type of each dimension of a 2-dimensional real to real; /// transform, use options of form ""R2R_XX"", for example, ""R2R_02"" for a transform,; /// which is of type ""R2R_0"" in 1st dimension and ""R2R_2"" in the 2nd.; /// - option of transform flag; /// - ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal; /// performance; /// - ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; /// - ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; /// - ""EX"" (from ""exhaustive"") - the most opt",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:2053,Integrability,depend,depending,2053,"tTransform() to get a pointer to the current; /// transform object.; ///; /// \param[out] h_output histogram for the output. If a null pointer is passed, a new histogram is created; /// and returned, otherwise, the provided histogram is used and should be big enough; /// \param[in] option option parameters consists of 3 parts:; /// - option on what to return; /// - ""RE"" - returns a histogram of the real part of the output; /// - ""IM"" - returns a histogram of the imaginary part of the output; /// - ""MAG""- returns a histogram of the magnitude of the output; /// - ""PH"" - returns a histogram of the phase of the output; /// - option of transform type; /// - ""R2C"" - real to complex transforms - default; /// - ""R2HC"" - real to halfcomplex (special format of storing output data,; /// results the same as for R2C); /// - ""DHT"" - discrete Hartley transform; /// real to real transforms (sine and cosine):; /// - ""R2R_0"", ""R2R_1"", ""R2R_2"", ""R2R_3"" - discrete cosine transforms of types I-IV; /// - ""R2R_4"", ""R2R_5"", ""R2R_6"", ""R2R_7"" - discrete sine transforms of types I-IV; /// To specify the type of each dimension of a 2-dimensional real to real; /// transform, use options of form ""R2R_XX"", for example, ""R2R_02"" for a transform,; /// which is of type ""R2R_0"" in 1st dimension and ""R2R_2"" in the 2nd.; /// - option of transform flag; /// - ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal; /// performance; /// - ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; /// - ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; /// - ""EX"" (from ""exhaustive"") - the most optimal way is found; /// This option should be chosen depending on how many transforms of the same size and; /// type are going to be done. Planning is only done once, for the first transform of this; /// size and type. Default is ""ES"".; ///; /// Examples of valid options: ""Mag R2C M"" ""Re R2R_11"" ""Im R2C ES"" ""PH R2HC EX""",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1757,Performance,perform,performance,1757,"tTransform() to get a pointer to the current; /// transform object.; ///; /// \param[out] h_output histogram for the output. If a null pointer is passed, a new histogram is created; /// and returned, otherwise, the provided histogram is used and should be big enough; /// \param[in] option option parameters consists of 3 parts:; /// - option on what to return; /// - ""RE"" - returns a histogram of the real part of the output; /// - ""IM"" - returns a histogram of the imaginary part of the output; /// - ""MAG""- returns a histogram of the magnitude of the output; /// - ""PH"" - returns a histogram of the phase of the output; /// - option of transform type; /// - ""R2C"" - real to complex transforms - default; /// - ""R2HC"" - real to halfcomplex (special format of storing output data,; /// results the same as for R2C); /// - ""DHT"" - discrete Hartley transform; /// real to real transforms (sine and cosine):; /// - ""R2R_0"", ""R2R_1"", ""R2R_2"", ""R2R_3"" - discrete cosine transforms of types I-IV; /// - ""R2R_4"", ""R2R_5"", ""R2R_6"", ""R2R_7"" - discrete sine transforms of types I-IV; /// To specify the type of each dimension of a 2-dimensional real to real; /// transform, use options of form ""R2R_XX"", for example, ""R2R_02"" for a transform,; /// which is of type ""R2R_0"" in 1st dimension and ""R2R_2"" in the 2nd.; /// - option of transform flag; /// - ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal; /// performance; /// - ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; /// - ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; /// - ""EX"" (from ""exhaustive"") - the most optimal way is found; /// This option should be chosen depending on how many transforms of the same size and; /// type are going to be done. Planning is only done once, for the first transform of this; /// size and type. Default is ""ES"".; ///; /// Examples of valid options: ""Mag R2C M"" ""Re R2R_11"" ""Im R2C ES"" ""PH R2HC EX""",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:75,Modifiability,extend,extended,75,"// this make sense if the histogram is not expanding (the x axis cannot be extended)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:415,Deployability,integrat,integrated,415,"////////////////////////////////////////////////////////////////////////////////; /// Fill histogram following distribution in function fname.; ///; /// @param fname : Function name used for filling the histogram; /// @param ntimes : number of times the histogram is filled; /// @param rng : (optional) Random number generator used to sample; ///; ///; /// The distribution contained in the function fname (TF1) is integrated; /// over the channel contents for the bin range of this histogram.; /// It is normalized to 1.; ///; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Fill histogram channel; /// ntimes random numbers are generated; ///; /// One can also call TF1::GetRandom to get a random variate from a function.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:415,Integrability,integrat,integrated,415,"////////////////////////////////////////////////////////////////////////////////; /// Fill histogram following distribution in function fname.; ///; /// @param fname : Function name used for filling the histogram; /// @param ntimes : number of times the histogram is filled; /// @param rng : (optional) Random number generator used to sample; ///; ///; /// The distribution contained in the function fname (TF1) is integrated; /// over the channel contents for the bin range of this histogram.; /// It is normalized to 1.; ///; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Fill histogram channel; /// ntimes random numbers are generated; ///; /// One can also call TF1::GetRandom to get a random variate from a function.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:5,Energy Efficiency,Allocate,Allocate,5,"// - Allocate temporary space to store the integral and compute integral",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:408,Deployability,integrat,integrated,408,"////////////////////////////////////////////////////////////////////////////////; /// Fill histogram following distribution in histogram h.; ///; /// @param h : Histogram pointer used for sampling random number; /// @param ntimes : number of times the histogram is filled; /// @param rng : (optional) Random number generator used for sampling; ///; /// The distribution contained in the histogram h (TH1) is integrated; /// over the channel contents for the bin range of this histogram.; /// It is normalized to 1.; ///; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Fill histogram channel ntimes random numbers are generated; ///; /// SPECIAL CASE when the target histogram has the same binning as the source.; /// in this case we simply use a poisson distribution where; /// the mean value per bin = bincontent/integral.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:408,Integrability,integrat,integrated,408,"////////////////////////////////////////////////////////////////////////////////; /// Fill histogram following distribution in histogram h.; ///; /// @param h : Histogram pointer used for sampling random number; /// @param ntimes : number of times the histogram is filled; /// @param rng : (optional) Random number generator used for sampling; ///; /// The distribution contained in the histogram h (TH1) is integrated; /// over the channel contents for the bin range of this histogram.; /// It is normalized to 1.; ///; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Fill histogram channel ntimes random numbers are generated; ///; /// SPECIAL CASE when the target histogram has the same binning as the source.; /// in this case we simply use a poisson distribution where; /// the mean value per bin = bincontent/integral.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:861,Usability,simpl,simply,861,"////////////////////////////////////////////////////////////////////////////////; /// Fill histogram following distribution in histogram h.; ///; /// @param h : Histogram pointer used for sampling random number; /// @param ntimes : number of times the histogram is filled; /// @param rng : (optional) Random number generator used for sampling; ///; /// The distribution contained in the histogram h (TH1) is integrated; /// over the channel contents for the bin range of this histogram.; /// It is normalized to 1.; ///; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Fill histogram channel ntimes random numbers are generated; ///; /// SPECIAL CASE when the target histogram has the same binning as the source.; /// in this case we simply use a poisson distribution where; /// the mean value per bin = bincontent/integral.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:383,Modifiability,extend,extend,383,"////////////////////////////////////////////////////////////////////////////////; /// Return Global bin number corresponding to x,y,z; ///; /// 2-D and 3-D histograms are represented with a one dimensional; /// structure. This has the advantage that all existing functions, such as; /// GetBinContent, GetBinError, GetBinFunction work for all dimensions.; /// This function tries to extend the axis if the given point belongs to an; /// under-/overflow bin AND if CanExtendAllAxes() is true.; ///; /// See also TH1::GetBin, TAxis::FindBin and TAxis::FindFixBin",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:391,Modifiability,extend,extend,391,"////////////////////////////////////////////////////////////////////////////////; /// Return Global bin number corresponding to x,y,z.; ///; /// 2-D and 3-D histograms are represented with a one dimensional; /// structure. This has the advantage that all existing functions, such as; /// GetBinContent, GetBinError, GetBinFunction work for all dimensions.; /// This function DOES NOT try to extend the axis if the given point belongs; /// to an under-/overflow bin.; ///; /// See also TH1::GetBin, TAxis::FindBin and TAxis::FindFixBin",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:168,Availability,avail,available,168,"////////////////////////////////////////////////////////////////////////////////; /// Fit histogram with function fname.; ///; ///; /// fname is the name of a function available in the global ROOT list of functions; /// `gROOT->GetListOfFunctions`; /// The list include any TF1 object created by the user plus some pre-defined functions; /// which are automatically created by ROOT the first time a pre-defined function is requested from `gROOT`; /// (i.e. when calling `gROOT->GetFunction(const char *name)`).; /// These pre-defined functions are:; /// - `gaus, gausn` where gausn is the normalized Gaussian; /// - `landau, landaun`; /// - `expo`; /// - `pol1,...9, chebyshev1,...9`.; ///; /// For printing the list of all available functions do:; ///; /// TF1::InitStandardFunctions(); // not needed if `gROOT->GetFunction` is called before; /// gROOT->GetListOfFunctions()->ls(); ///; /// `fname` can also be a formula that is accepted by the linear fitter containing the special operator `++`,; /// representing linear components separated by `++` sign, for example `x++sin(x)` for fitting `[0]*x+[1]*sin(x)`; ///; /// This function finds a pointer to the TF1 object with name `fname` and calls TH1::Fit(TF1 *, Option_t *, Option_t *,; /// Double_t, Double_t). See there for the fitting options and the details about fitting histograms",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:724,Availability,avail,available,724,"////////////////////////////////////////////////////////////////////////////////; /// Fit histogram with function fname.; ///; ///; /// fname is the name of a function available in the global ROOT list of functions; /// `gROOT->GetListOfFunctions`; /// The list include any TF1 object created by the user plus some pre-defined functions; /// which are automatically created by ROOT the first time a pre-defined function is requested from `gROOT`; /// (i.e. when calling `gROOT->GetFunction(const char *name)`).; /// These pre-defined functions are:; /// - `gaus, gausn` where gausn is the normalized Gaussian; /// - `landau, landaun`; /// - `expo`; /// - `pol1,...9, chebyshev1,...9`.; ///; /// For printing the list of all available functions do:; ///; /// TF1::InitStandardFunctions(); // not needed if `gROOT->GetFunction` is called before; /// gROOT->GetListOfFunctions()->ls(); ///; /// `fname` can also be a formula that is accepted by the linear fitter containing the special operator `++`,; /// representing linear components separated by `++` sign, for example `x++sin(x)` for fitting `[0]*x+[1]*sin(x)`; ///; /// This function finds a pointer to the TF1 object with name `fname` and calls TH1::Fit(TF1 *, Option_t *, Option_t *,; /// Double_t, Double_t). See there for the fitting options and the details about fitting histograms",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1202,Availability,error,errors,1202,"ning the fit options (see table below).; /// \param[in] goption specify a list of graphics options. See TH1::Draw for a complete list of these options.; /// \param[in] xxmin lower fitting range; /// \param[in] xxmax upper fitting range; /// \return A smart pointer to the TFitResult class; ///; /// \anchor HFitOpt; /// ### Histogram Fitting Options; ///; /// Here is the full list of fit options that can be given in the parameter `option`.; /// Several options can be used together by concatanating the strings without the need of any delimiters.; ///; /// option | description; /// -------|------------; /// ""L"" | Uses a log likelihood method (default is chi-square method). To be used when the histogram represents counts.; /// ""WL"" | Weighted log likelihood method. To be used when the histogram has been filled with weights different than 1. This is needed for getting correct parameter uncertainties for weighted fits.; /// ""P"" | Uses Pearson chi-square method. Uses expected errors instead of the observed one (default case). The expected error is instead estimated from the square-root of the bin function value.; /// ""MULTI"" | Uses Loglikelihood method based on multi-nomial distribution. In this case the function must be normalized and one fits only the function shape.; /// ""W"" | Fit using the chi-square method and ignoring the bin uncertainties and skip empty bins.; /// ""WW"" | Fit using the chi-square method and ignoring the bin uncertainties and include the empty bins.; /// ""I"" | Uses the integral of function in the bin instead of the default bin center value.; /// ""F"" | Uses the default minimizer (e.g. Minuit) when fitting a linear function (e.g. polN) instead of the linear fitter.; /// ""U"" | Uses a user specified objective function (e.g. user providedlikelihood function) defined using `TVirtualFitter::SetFCN`; /// ""E"" | Performs a better parameter errors estimation using the Minos technique for all fit parameters.; /// ""M"" | Uses the IMPROVE algorithm (available only in ",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1266,Availability,error,error,1266,"t of graphics options. See TH1::Draw for a complete list of these options.; /// \param[in] xxmin lower fitting range; /// \param[in] xxmax upper fitting range; /// \return A smart pointer to the TFitResult class; ///; /// \anchor HFitOpt; /// ### Histogram Fitting Options; ///; /// Here is the full list of fit options that can be given in the parameter `option`.; /// Several options can be used together by concatanating the strings without the need of any delimiters.; ///; /// option | description; /// -------|------------; /// ""L"" | Uses a log likelihood method (default is chi-square method). To be used when the histogram represents counts.; /// ""WL"" | Weighted log likelihood method. To be used when the histogram has been filled with weights different than 1. This is needed for getting correct parameter uncertainties for weighted fits.; /// ""P"" | Uses Pearson chi-square method. Uses expected errors instead of the observed one (default case). The expected error is instead estimated from the square-root of the bin function value.; /// ""MULTI"" | Uses Loglikelihood method based on multi-nomial distribution. In this case the function must be normalized and one fits only the function shape.; /// ""W"" | Fit using the chi-square method and ignoring the bin uncertainties and skip empty bins.; /// ""WW"" | Fit using the chi-square method and ignoring the bin uncertainties and include the empty bins.; /// ""I"" | Uses the integral of function in the bin instead of the default bin center value.; /// ""F"" | Uses the default minimizer (e.g. Minuit) when fitting a linear function (e.g. polN) instead of the linear fitter.; /// ""U"" | Uses a user specified objective function (e.g. user providedlikelihood function) defined using `TVirtualFitter::SetFCN`; /// ""E"" | Performs a better parameter errors estimation using the Minos technique for all fit parameters.; /// ""M"" | Uses the IMPROVE algorithm (available only in TMinuit). This algorithm attempts improve the found local minimum by searchi",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:2095,Availability,error,errors,2095,"is needed for getting correct parameter uncertainties for weighted fits.; /// ""P"" | Uses Pearson chi-square method. Uses expected errors instead of the observed one (default case). The expected error is instead estimated from the square-root of the bin function value.; /// ""MULTI"" | Uses Loglikelihood method based on multi-nomial distribution. In this case the function must be normalized and one fits only the function shape.; /// ""W"" | Fit using the chi-square method and ignoring the bin uncertainties and skip empty bins.; /// ""WW"" | Fit using the chi-square method and ignoring the bin uncertainties and include the empty bins.; /// ""I"" | Uses the integral of function in the bin instead of the default bin center value.; /// ""F"" | Uses the default minimizer (e.g. Minuit) when fitting a linear function (e.g. polN) instead of the linear fitter.; /// ""U"" | Uses a user specified objective function (e.g. user providedlikelihood function) defined using `TVirtualFitter::SetFCN`; /// ""E"" | Performs a better parameter errors estimation using the Minos technique for all fit parameters.; /// ""M"" | Uses the IMPROVE algorithm (available only in TMinuit). This algorithm attempts improve the found local minimum by searching for a better one.; /// ""S"" | The full result of the fit is returned in the `TFitResultPtr`. This is needed to get the covariance matrix of the fit. See `TFitResult` and the base class `ROOT::Math::FitResult`.; /// ""Q"" | Quiet mode (minimum printing); /// ""V"" | Verbose mode (default is between Q and V); /// ""+"" | Adds this new fitted function to the list of fitted functions. By default, the previous function is deleted and only the last one is kept.; /// ""N"" | Does not store the graphics function, does not draw the histogram with the function after fitting.; /// ""0"" | Does not draw the histogram and the fitted function after fitting, but in contrast to option ""N"", it stores the fitted function in the histogram list of functions.; /// ""R"" | Fit using a fitting rang",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:2202,Availability,avail,available,2202,"pected errors instead of the observed one (default case). The expected error is instead estimated from the square-root of the bin function value.; /// ""MULTI"" | Uses Loglikelihood method based on multi-nomial distribution. In this case the function must be normalized and one fits only the function shape.; /// ""W"" | Fit using the chi-square method and ignoring the bin uncertainties and skip empty bins.; /// ""WW"" | Fit using the chi-square method and ignoring the bin uncertainties and include the empty bins.; /// ""I"" | Uses the integral of function in the bin instead of the default bin center value.; /// ""F"" | Uses the default minimizer (e.g. Minuit) when fitting a linear function (e.g. polN) instead of the linear fitter.; /// ""U"" | Uses a user specified objective function (e.g. user providedlikelihood function) defined using `TVirtualFitter::SetFCN`; /// ""E"" | Performs a better parameter errors estimation using the Minos technique for all fit parameters.; /// ""M"" | Uses the IMPROVE algorithm (available only in TMinuit). This algorithm attempts improve the found local minimum by searching for a better one.; /// ""S"" | The full result of the fit is returned in the `TFitResultPtr`. This is needed to get the covariance matrix of the fit. See `TFitResult` and the base class `ROOT::Math::FitResult`.; /// ""Q"" | Quiet mode (minimum printing); /// ""V"" | Verbose mode (default is between Q and V); /// ""+"" | Adds this new fitted function to the list of fitted functions. By default, the previous function is deleted and only the last one is kept.; /// ""N"" | Does not store the graphics function, does not draw the histogram with the function after fitting.; /// ""0"" | Does not draw the histogram and the fitted function after fitting, but in contrast to option ""N"", it stores the fitted function in the histogram list of functions.; /// ""R"" | Fit using a fitting range specified in the function range with `TF1::SetRange`.; /// ""B"" | Use this option when you want to fix or set limits on one",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:3905,Availability,Error,Errors,3905,"et limits on one or more parameters and the fitting function is a predefined one (e.g gaus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits will be used.; /// ""C"" | In case of linear fitting, do no calculate the chisquare (saves CPU time).; /// ""G"" | Uses the gradient implemented in `TF1::GradientPar` for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function.; /// ""WIDTH"" | Scales the histogran bin content by the bin width (useful for variable bins histograms); /// ""SERIAL"" | Runs in serial mode. By defult if ROOT is built with MT support and MT is enables, the fit is perfomed in multi-thread - ""E"" Perform better Errors estimation using Minos technique; /// ""MULTITHREAD"" | Forces usage of multi-thread execution whenever possible; ///; /// The default fitting of an histogram (when no option is given) is perfomed as following:; /// - a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; /// - the full range of the histogram is used;; /// - the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; /// - for linear functions (`polN`, `chenbyshev` or formula expressions combined using operator `++`) a linear minimization is used.; /// - only the status of the fit is returned;; /// - the fit is performed in Multithread whenever is enabled in ROOT;; /// - only the last fitted function is saved in the histogram;; /// - the histogram is drawn after fitting overalyed with the resulting fitting function; ///; /// \anchor HFitMinimizer; /// ### Minimizer Configuration; ///; /// The Fit is perfomed using the default Minimizer, defined in the `ROOT::Math::MinimizerOptions` class.; /// It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling `TH1",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:4206,Availability,error,errors,4206,"et limits on one or more parameters and the fitting function is a predefined one (e.g gaus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits will be used.; /// ""C"" | In case of linear fitting, do no calculate the chisquare (saves CPU time).; /// ""G"" | Uses the gradient implemented in `TF1::GradientPar` for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function.; /// ""WIDTH"" | Scales the histogran bin content by the bin width (useful for variable bins histograms); /// ""SERIAL"" | Runs in serial mode. By defult if ROOT is built with MT support and MT is enables, the fit is perfomed in multi-thread - ""E"" Perform better Errors estimation using Minos technique; /// ""MULTITHREAD"" | Forces usage of multi-thread execution whenever possible; ///; /// The default fitting of an histogram (when no option is given) is perfomed as following:; /// - a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; /// - the full range of the histogram is used;; /// - the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; /// - for linear functions (`polN`, `chenbyshev` or formula expressions combined using operator `++`) a linear minimization is used.; /// - only the status of the fit is returned;; /// - the fit is performed in Multithread whenever is enabled in ROOT;; /// - only the last fitted function is saved in the histogram;; /// - the histogram is drawn after fitting overalyed with the resulting fitting function; ///; /// \anchor HFitMinimizer; /// ### Minimizer Configuration; ///; /// The Fit is perfomed using the default Minimizer, defined in the `ROOT::Math::MinimizerOptions` class.; /// It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling `TH1",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:4242,Availability,error,errors,4242,"et limits on one or more parameters and the fitting function is a predefined one (e.g gaus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits will be used.; /// ""C"" | In case of linear fitting, do no calculate the chisquare (saves CPU time).; /// ""G"" | Uses the gradient implemented in `TF1::GradientPar` for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function.; /// ""WIDTH"" | Scales the histogran bin content by the bin width (useful for variable bins histograms); /// ""SERIAL"" | Runs in serial mode. By defult if ROOT is built with MT support and MT is enables, the fit is perfomed in multi-thread - ""E"" Perform better Errors estimation using Minos technique; /// ""MULTITHREAD"" | Forces usage of multi-thread execution whenever possible; ///; /// The default fitting of an histogram (when no option is given) is perfomed as following:; /// - a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; /// - the full range of the histogram is used;; /// - the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; /// - for linear functions (`polN`, `chenbyshev` or formula expressions combined using operator `++`) a linear minimization is used.; /// - only the status of the fit is returned;; /// - the fit is performed in Multithread whenever is enabled in ROOT;; /// - only the last fitted function is saved in the histogram;; /// - the histogram is drawn after fitting overalyed with the resulting fitting function; ///; /// \anchor HFitMinimizer; /// ### Minimizer Configuration; ///; /// The Fit is perfomed using the default Minimizer, defined in the `ROOT::Math::MinimizerOptions` class.; /// It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling `TH1",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:5644,Availability,avail,available,5644,"is performed in Multithread whenever is enabled in ROOT;; /// - only the last fitted function is saved in the histogram;; /// - the histogram is drawn after fitting overalyed with the resulting fitting function; ///; /// \anchor HFitMinimizer; /// ### Minimizer Configuration; ///; /// The Fit is perfomed using the default Minimizer, defined in the `ROOT::Math::MinimizerOptions` class.; /// It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling `TH1::Fit`):; /// - `ROOT::Math::MinimizerOptions::SetDefaultMinimizer(minimizerName, minimizerAgorithm)` for changing the minmizer and/or the corresponding algorithm.; /// For example `ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""GSLMultiMin"",""BFGS"");` will set the usage of the BFGS algorithm of the GSL multi-dimensional minimization; /// The current defaults are (""Minuit"",""Migrad"").; /// See the documentation of the `ROOT::Math::MinimizerOptions` for the available minimizers in ROOT and their corresponding algorithms.; /// - `ROOT::Math::MinimizerOptions::SetDefaultTolerance` for setting a different tolerance value for the minimization.; /// - `ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls` for setting the maximum number of function calls.; /// - `ROOT::Math::MinimizerOptions::SetDefaultPrintLevel` for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing; ///; /// Other options are possible depending on the Minimizer used, see the corresponding documentation.; /// The default minimizer can be also set in the resource file in etc/system.rootrc. For example; ///; /// ~~~ {.cpp}; /// Root.Fitter: Minuit2; /// ~~~; ///; /// \anchor HFitChi2; /// ### Chi-square Fits; ///; /// By default a chi-square (least-square) fit is performed on the histogram. The so-called modified least-square method; /// is used where the residual for each bin is computed using as error the observed value (th",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:5792,Availability,toler,tolerance,5792,"he histogram is drawn after fitting overalyed with the resulting fitting function; ///; /// \anchor HFitMinimizer; /// ### Minimizer Configuration; ///; /// The Fit is perfomed using the default Minimizer, defined in the `ROOT::Math::MinimizerOptions` class.; /// It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling `TH1::Fit`):; /// - `ROOT::Math::MinimizerOptions::SetDefaultMinimizer(minimizerName, minimizerAgorithm)` for changing the minmizer and/or the corresponding algorithm.; /// For example `ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""GSLMultiMin"",""BFGS"");` will set the usage of the BFGS algorithm of the GSL multi-dimensional minimization; /// The current defaults are (""Minuit"",""Migrad"").; /// See the documentation of the `ROOT::Math::MinimizerOptions` for the available minimizers in ROOT and their corresponding algorithms.; /// - `ROOT::Math::MinimizerOptions::SetDefaultTolerance` for setting a different tolerance value for the minimization.; /// - `ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls` for setting the maximum number of function calls.; /// - `ROOT::Math::MinimizerOptions::SetDefaultPrintLevel` for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing; ///; /// Other options are possible depending on the Minimizer used, see the corresponding documentation.; /// The default minimizer can be also set in the resource file in etc/system.rootrc. For example; ///; /// ~~~ {.cpp}; /// Root.Fitter: Minuit2; /// ~~~; ///; /// \anchor HFitChi2; /// ### Chi-square Fits; ///; /// By default a chi-square (least-square) fit is performed on the histogram. The so-called modified least-square method; /// is used where the residual for each bin is computed using as error the observed value (the bin error) returned by `TH1::GetBinError`; ///; /// \f[; /// Chi2 = \sum_{i}{ \left(\frac{y(i) - f(x(i) | p )}{e(i)} \right)^2 }",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:6611,Availability,error,error,6611,"T::Math::MinimizerOptions::SetDefaultTolerance` for setting a different tolerance value for the minimization.; /// - `ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls` for setting the maximum number of function calls.; /// - `ROOT::Math::MinimizerOptions::SetDefaultPrintLevel` for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing; ///; /// Other options are possible depending on the Minimizer used, see the corresponding documentation.; /// The default minimizer can be also set in the resource file in etc/system.rootrc. For example; ///; /// ~~~ {.cpp}; /// Root.Fitter: Minuit2; /// ~~~; ///; /// \anchor HFitChi2; /// ### Chi-square Fits; ///; /// By default a chi-square (least-square) fit is performed on the histogram. The so-called modified least-square method; /// is used where the residual for each bin is computed using as error the observed value (the bin error) returned by `TH1::GetBinError`; ///; /// \f[; /// Chi2 = \sum_{i}{ \left(\frac{y(i) - f(x(i) | p )}{e(i)} \right)^2 }; /// \f]; ///; /// where `y(i)` is the bin content for each bin `i`, `x(i)` is the bin center and `e(i)` is the bin error (`sqrt(y(i)` for; /// an un-weighted histogram). Bins with zero errors are excluded from the fit. See also later the note on the treatment; /// of empty bins. When using option ""I"" the residual is computed not using the function value at the bin center, `f(x(i)|p)`,; /// but the integral of the function in the bin, Integral{ f(x|p)dx }, divided by the bin volume.; /// When using option `P` (Pearson chi2), the expected error computed as `e(i) = sqrt(f(x(i)|p))` is used.; /// In this case empty bins are considered in the fit.; /// Both chi-square methods should not be used when the bin content represent counts, especially in case of low bin statistics,; /// because they could return a biased result.; ///; /// \anchor HFitNLL; /// ### Likelihood Fits; ///; /// When using option ""L"" a likelihood fit is used instead of the",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:6645,Availability,error,error,6645,"T::Math::MinimizerOptions::SetDefaultTolerance` for setting a different tolerance value for the minimization.; /// - `ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls` for setting the maximum number of function calls.; /// - `ROOT::Math::MinimizerOptions::SetDefaultPrintLevel` for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing; ///; /// Other options are possible depending on the Minimizer used, see the corresponding documentation.; /// The default minimizer can be also set in the resource file in etc/system.rootrc. For example; ///; /// ~~~ {.cpp}; /// Root.Fitter: Minuit2; /// ~~~; ///; /// \anchor HFitChi2; /// ### Chi-square Fits; ///; /// By default a chi-square (least-square) fit is performed on the histogram. The so-called modified least-square method; /// is used where the residual for each bin is computed using as error the observed value (the bin error) returned by `TH1::GetBinError`; ///; /// \f[; /// Chi2 = \sum_{i}{ \left(\frac{y(i) - f(x(i) | p )}{e(i)} \right)^2 }; /// \f]; ///; /// where `y(i)` is the bin content for each bin `i`, `x(i)` is the bin center and `e(i)` is the bin error (`sqrt(y(i)` for; /// an un-weighted histogram). Bins with zero errors are excluded from the fit. See also later the note on the treatment; /// of empty bins. When using option ""I"" the residual is computed not using the function value at the bin center, `f(x(i)|p)`,; /// but the integral of the function in the bin, Integral{ f(x|p)dx }, divided by the bin volume.; /// When using option `P` (Pearson chi2), the expected error computed as `e(i) = sqrt(f(x(i)|p))` is used.; /// In this case empty bins are considered in the fit.; /// Both chi-square methods should not be used when the bin content represent counts, especially in case of low bin statistics,; /// because they could return a biased result.; ///; /// \anchor HFitNLL; /// ### Likelihood Fits; ///; /// When using option ""L"" a likelihood fit is used instead of the",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:6886,Availability,error,error,6886,"T::Math::MinimizerOptions::SetDefaultTolerance` for setting a different tolerance value for the minimization.; /// - `ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls` for setting the maximum number of function calls.; /// - `ROOT::Math::MinimizerOptions::SetDefaultPrintLevel` for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing; ///; /// Other options are possible depending on the Minimizer used, see the corresponding documentation.; /// The default minimizer can be also set in the resource file in etc/system.rootrc. For example; ///; /// ~~~ {.cpp}; /// Root.Fitter: Minuit2; /// ~~~; ///; /// \anchor HFitChi2; /// ### Chi-square Fits; ///; /// By default a chi-square (least-square) fit is performed on the histogram. The so-called modified least-square method; /// is used where the residual for each bin is computed using as error the observed value (the bin error) returned by `TH1::GetBinError`; ///; /// \f[; /// Chi2 = \sum_{i}{ \left(\frac{y(i) - f(x(i) | p )}{e(i)} \right)^2 }; /// \f]; ///; /// where `y(i)` is the bin content for each bin `i`, `x(i)` is the bin center and `e(i)` is the bin error (`sqrt(y(i)` for; /// an un-weighted histogram). Bins with zero errors are excluded from the fit. See also later the note on the treatment; /// of empty bins. When using option ""I"" the residual is computed not using the function value at the bin center, `f(x(i)|p)`,; /// but the integral of the function in the bin, Integral{ f(x|p)dx }, divided by the bin volume.; /// When using option `P` (Pearson chi2), the expected error computed as `e(i) = sqrt(f(x(i)|p))` is used.; /// In this case empty bins are considered in the fit.; /// Both chi-square methods should not be used when the bin content represent counts, especially in case of low bin statistics,; /// because they could return a biased result.; ///; /// \anchor HFitNLL; /// ### Likelihood Fits; ///; /// When using option ""L"" a likelihood fit is used instead of the",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:6956,Availability,error,errors,6956,"::MinimizerOptions::SetDefaultPrintLevel` for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing; ///; /// Other options are possible depending on the Minimizer used, see the corresponding documentation.; /// The default minimizer can be also set in the resource file in etc/system.rootrc. For example; ///; /// ~~~ {.cpp}; /// Root.Fitter: Minuit2; /// ~~~; ///; /// \anchor HFitChi2; /// ### Chi-square Fits; ///; /// By default a chi-square (least-square) fit is performed on the histogram. The so-called modified least-square method; /// is used where the residual for each bin is computed using as error the observed value (the bin error) returned by `TH1::GetBinError`; ///; /// \f[; /// Chi2 = \sum_{i}{ \left(\frac{y(i) - f(x(i) | p )}{e(i)} \right)^2 }; /// \f]; ///; /// where `y(i)` is the bin content for each bin `i`, `x(i)` is the bin center and `e(i)` is the bin error (`sqrt(y(i)` for; /// an un-weighted histogram). Bins with zero errors are excluded from the fit. See also later the note on the treatment; /// of empty bins. When using option ""I"" the residual is computed not using the function value at the bin center, `f(x(i)|p)`,; /// but the integral of the function in the bin, Integral{ f(x|p)dx }, divided by the bin volume.; /// When using option `P` (Pearson chi2), the expected error computed as `e(i) = sqrt(f(x(i)|p))` is used.; /// In this case empty bins are considered in the fit.; /// Both chi-square methods should not be used when the bin content represent counts, especially in case of low bin statistics,; /// because they could return a biased result.; ///; /// \anchor HFitNLL; /// ### Likelihood Fits; ///; /// When using option ""L"" a likelihood fit is used instead of the default chi-square fit.; /// The likelihood is built assuming a Poisson probability density function for each bin.; /// The negative log-likelihood to be minimized is; ///; /// \f[; /// NLL = - \sum_{i}{ \log {\mathrm P} ( y(i) | f(x(i) | p ) ",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:7314,Availability,error,error,7314,"///; /// ~~~ {.cpp}; /// Root.Fitter: Minuit2; /// ~~~; ///; /// \anchor HFitChi2; /// ### Chi-square Fits; ///; /// By default a chi-square (least-square) fit is performed on the histogram. The so-called modified least-square method; /// is used where the residual for each bin is computed using as error the observed value (the bin error) returned by `TH1::GetBinError`; ///; /// \f[; /// Chi2 = \sum_{i}{ \left(\frac{y(i) - f(x(i) | p )}{e(i)} \right)^2 }; /// \f]; ///; /// where `y(i)` is the bin content for each bin `i`, `x(i)` is the bin center and `e(i)` is the bin error (`sqrt(y(i)` for; /// an un-weighted histogram). Bins with zero errors are excluded from the fit. See also later the note on the treatment; /// of empty bins. When using option ""I"" the residual is computed not using the function value at the bin center, `f(x(i)|p)`,; /// but the integral of the function in the bin, Integral{ f(x|p)dx }, divided by the bin volume.; /// When using option `P` (Pearson chi2), the expected error computed as `e(i) = sqrt(f(x(i)|p))` is used.; /// In this case empty bins are considered in the fit.; /// Both chi-square methods should not be used when the bin content represent counts, especially in case of low bin statistics,; /// because they could return a biased result.; ///; /// \anchor HFitNLL; /// ### Likelihood Fits; ///; /// When using option ""L"" a likelihood fit is used instead of the default chi-square fit.; /// The likelihood is built assuming a Poisson probability density function for each bin.; /// The negative log-likelihood to be minimized is; ///; /// \f[; /// NLL = - \sum_{i}{ \log {\mathrm P} ( y(i) | f(x(i) | p ) ) }; /// \f]; /// where `P(y|f)` is the Poisson distribution of observing a count `y(i)` in the bin when the expected count is `f(x(i)|p)`.; /// The exact likelihood used is the Poisson likelihood described in this paper:; /// S. Baker and R. D. Cousins, “Clarification of the use of chi-square and likelihood functions in fits to histograms,”; /",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:8640,Availability,error,errors,8640," ///; /// When using option ""L"" a likelihood fit is used instead of the default chi-square fit.; /// The likelihood is built assuming a Poisson probability density function for each bin.; /// The negative log-likelihood to be minimized is; ///; /// \f[; /// NLL = - \sum_{i}{ \log {\mathrm P} ( y(i) | f(x(i) | p ) ) }; /// \f]; /// where `P(y|f)` is the Poisson distribution of observing a count `y(i)` in the bin when the expected count is `f(x(i)|p)`.; /// The exact likelihood used is the Poisson likelihood described in this paper:; /// S. Baker and R. D. Cousins, “Clarification of the use of chi-square and likelihood functions in fits to histograms,”; /// Nucl. Instrum. Meth. 221 (1984) 437.; ///; /// \f[; /// NLL = \sum_{i}{( f(x(i) | p ) + y(i)\log(y(i)/ f(x(i) | p )) - y(i)) }; /// \f]; /// By using this formulation, `2*NLL` can be interpreted as the chi-square resulting from the fit.; ///; /// This method should be always used when the bin content represents counts (i.e. errors are sqrt(N) ).; /// The likelihood method has the advantage of treating correctly bins with low statistics. In case of high; /// statistics/bin the distribution of the bin content becomes a normal distribution and the likelihood and the chi2 fit; /// give the same result.; ///; /// The likelihood method, although a bit slower, it is therefore the recommended method,; /// when the histogram represent counts (Poisson statistics), where the chi-square methods may; /// give incorrect results, especially in case of low statistics.; /// In case of a weighted histogram, it is possible to perform also a likelihood fit by using the; /// option ""WL"". Note a weighted histogram is a histogram which has been filled with weights and it; /// has the information on the sum of the weight square for each bin ( TH1::Sumw2() has been called).; /// The bin error for a weighted histogram is the square root of the sum of the weight square.; ///; /// \anchor HFitRes; /// ### Fit Result; ///; /// The function ret",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:9495,Availability,error,error,9495,"sulting from the fit.; ///; /// This method should be always used when the bin content represents counts (i.e. errors are sqrt(N) ).; /// The likelihood method has the advantage of treating correctly bins with low statistics. In case of high; /// statistics/bin the distribution of the bin content becomes a normal distribution and the likelihood and the chi2 fit; /// give the same result.; ///; /// The likelihood method, although a bit slower, it is therefore the recommended method,; /// when the histogram represent counts (Poisson statistics), where the chi-square methods may; /// give incorrect results, especially in case of low statistics.; /// In case of a weighted histogram, it is possible to perform also a likelihood fit by using the; /// option ""WL"". Note a weighted histogram is a histogram which has been filled with weights and it; /// has the information on the sum of the weight square for each bin ( TH1::Sumw2() has been called).; /// The bin error for a weighted histogram is the square root of the sum of the weight square.; ///; /// \anchor HFitRes; /// ### Fit Result; ///; /// The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; /// By default the TFitResultPtr contains only the status of the fit which is return by an; /// automatic conversion of the TFitResultPtr to an integer. One can write in this case directly:; ///; /// ~~~ {.cpp}; /// Int_t fitStatus = h->Fit(myFunc);; /// ~~~; ///; /// If the option ""S"" is instead used, TFitResultPtr behaves as a smart; /// pointer to the TFitResult object. This is useful for retrieving the full result information from the fit, such as the covariance matrix,; /// as shown in this example code:; ///; /// ~~~ {.cpp}; /// TFitResultPtr r = h->Fit(myFunc,""S"");; /// TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; /// Double_t chi2 = r->Chi2(); // to retrieve the fit chi2; /// Double_t par0 = r->Parameter(0); // retrieve the value for the parameter 0; /// ",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:10577,Availability,error,error,10577,"//; /// \anchor HFitRes; /// ### Fit Result; ///; /// The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; /// By default the TFitResultPtr contains only the status of the fit which is return by an; /// automatic conversion of the TFitResultPtr to an integer. One can write in this case directly:; ///; /// ~~~ {.cpp}; /// Int_t fitStatus = h->Fit(myFunc);; /// ~~~; ///; /// If the option ""S"" is instead used, TFitResultPtr behaves as a smart; /// pointer to the TFitResult object. This is useful for retrieving the full result information from the fit, such as the covariance matrix,; /// as shown in this example code:; ///; /// ~~~ {.cpp}; /// TFitResultPtr r = h->Fit(myFunc,""S"");; /// TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; /// Double_t chi2 = r->Chi2(); // to retrieve the fit chi2; /// Double_t par0 = r->Parameter(0); // retrieve the value for the parameter 0; /// Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; /// r->Print(""V""); // print full information of fit including covariance matrix; /// r->Write(); // store the result in a file; /// ~~~; ///; /// The fit parameters, error and chi-square (but not covariance matrix) can be retrieved also; /// directly from the fitted function that is passed to this call.; /// Given a pointer to an associated fitted function `myfunc`, one can retrieve the function/fit; /// parameters with calls such as:; ///; /// ~~~ {.cpp}; /// Double_t chi2 = myfunc->GetChisquare();; /// Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; /// Double_t err0 = myfunc->GetParError(0); //error on first parameter; /// ~~~; ///; /// ##### Associated functions; ///; /// One or more object ( can be added to the list; /// of functions (fFunctions) associated to each histogram.; /// When TH1::Fit is invoked, the fitted function is added to the histogram list of functions (fFunctions).; /// If the histogram is made persistent, the list of as",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:10770,Availability,error,error,10770,"//; /// \anchor HFitRes; /// ### Fit Result; ///; /// The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; /// By default the TFitResultPtr contains only the status of the fit which is return by an; /// automatic conversion of the TFitResultPtr to an integer. One can write in this case directly:; ///; /// ~~~ {.cpp}; /// Int_t fitStatus = h->Fit(myFunc);; /// ~~~; ///; /// If the option ""S"" is instead used, TFitResultPtr behaves as a smart; /// pointer to the TFitResult object. This is useful for retrieving the full result information from the fit, such as the covariance matrix,; /// as shown in this example code:; ///; /// ~~~ {.cpp}; /// TFitResultPtr r = h->Fit(myFunc,""S"");; /// TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; /// Double_t chi2 = r->Chi2(); // to retrieve the fit chi2; /// Double_t par0 = r->Parameter(0); // retrieve the value for the parameter 0; /// Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; /// r->Print(""V""); // print full information of fit including covariance matrix; /// r->Write(); // store the result in a file; /// ~~~; ///; /// The fit parameters, error and chi-square (but not covariance matrix) can be retrieved also; /// directly from the fitted function that is passed to this call.; /// Given a pointer to an associated fitted function `myfunc`, one can retrieve the function/fit; /// parameters with calls such as:; ///; /// ~~~ {.cpp}; /// Double_t chi2 = myfunc->GetChisquare();; /// Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; /// Double_t err0 = myfunc->GetParError(0); //error on first parameter; /// ~~~; ///; /// ##### Associated functions; ///; /// One or more object ( can be added to the list; /// of functions (fFunctions) associated to each histogram.; /// When TH1::Fit is invoked, the fitted function is added to the histogram list of functions (fFunctions).; /// If the histogram is made persistent, the list of as",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:11227,Availability,error,error,11227," ///; /// ~~~ {.cpp}; /// TFitResultPtr r = h->Fit(myFunc,""S"");; /// TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; /// Double_t chi2 = r->Chi2(); // to retrieve the fit chi2; /// Double_t par0 = r->Parameter(0); // retrieve the value for the parameter 0; /// Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; /// r->Print(""V""); // print full information of fit including covariance matrix; /// r->Write(); // store the result in a file; /// ~~~; ///; /// The fit parameters, error and chi-square (but not covariance matrix) can be retrieved also; /// directly from the fitted function that is passed to this call.; /// Given a pointer to an associated fitted function `myfunc`, one can retrieve the function/fit; /// parameters with calls such as:; ///; /// ~~~ {.cpp}; /// Double_t chi2 = myfunc->GetChisquare();; /// Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; /// Double_t err0 = myfunc->GetParError(0); //error on first parameter; /// ~~~; ///; /// ##### Associated functions; ///; /// One or more object ( can be added to the list; /// of functions (fFunctions) associated to each histogram.; /// When TH1::Fit is invoked, the fitted function is added to the histogram list of functions (fFunctions).; /// If the histogram is made persistent, the list of associated functions is also persistent.; /// Given a histogram h, one can retrieve an associated function with:; ///; /// ~~~ {.cpp}; /// TF1 *myfunc = h->GetFunction(""myfunc"");; /// ~~~; /// or by quering directly the list obtained by calling `TH1::GetListOfFunctions`.; ///; /// \anchor HFitStatus; /// ### Fit status; ///; /// The status of the fit is obtained converting the TFitResultPtr to an integer; /// independently if the fit option ""S"" is used or not:; ///; /// ~~~ {.cpp}; /// TFitResultPtr r = h->Fit(myFunc,opt);; /// Int_t fitStatus = r;; /// ~~~; ///; /// - `status = 0` : the fit has been performed successfully (i.e no error occurred).; //",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:12217,Availability,error,error,12217,"); //error on first parameter; /// ~~~; ///; /// ##### Associated functions; ///; /// One or more object ( can be added to the list; /// of functions (fFunctions) associated to each histogram.; /// When TH1::Fit is invoked, the fitted function is added to the histogram list of functions (fFunctions).; /// If the histogram is made persistent, the list of associated functions is also persistent.; /// Given a histogram h, one can retrieve an associated function with:; ///; /// ~~~ {.cpp}; /// TF1 *myfunc = h->GetFunction(""myfunc"");; /// ~~~; /// or by quering directly the list obtained by calling `TH1::GetListOfFunctions`.; ///; /// \anchor HFitStatus; /// ### Fit status; ///; /// The status of the fit is obtained converting the TFitResultPtr to an integer; /// independently if the fit option ""S"" is used or not:; ///; /// ~~~ {.cpp}; /// TFitResultPtr r = h->Fit(myFunc,opt);; /// Int_t fitStatus = r;; /// ~~~; ///; /// - `status = 0` : the fit has been performed successfully (i.e no error occurred).; /// - `status < 0` : there is an error not connected with the minimization procedure, for example when a wrong function is used.; /// - `status > 0` : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; /// - `status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus`.; /// TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error; /// only in Minos but not in Migrad a fitStatus of 40 will be returned.; /// Minuit2 returns 0 in case of success and different values in migrad,minos or; /// hesse depending on the error. See in this case the documentation of; /// Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the; /// minos return status and Minuit2Minimizer::Hesse for the hesse return status.; /// If other minimizers are used see their specific documenta",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:12268,Availability,error,error,12268," ///; /// One or more object ( can be added to the list; /// of functions (fFunctions) associated to each histogram.; /// When TH1::Fit is invoked, the fitted function is added to the histogram list of functions (fFunctions).; /// If the histogram is made persistent, the list of associated functions is also persistent.; /// Given a histogram h, one can retrieve an associated function with:; ///; /// ~~~ {.cpp}; /// TF1 *myfunc = h->GetFunction(""myfunc"");; /// ~~~; /// or by quering directly the list obtained by calling `TH1::GetListOfFunctions`.; ///; /// \anchor HFitStatus; /// ### Fit status; ///; /// The status of the fit is obtained converting the TFitResultPtr to an integer; /// independently if the fit option ""S"" is used or not:; ///; /// ~~~ {.cpp}; /// TFitResultPtr r = h->Fit(myFunc,opt);; /// Int_t fitStatus = r;; /// ~~~; ///; /// - `status = 0` : the fit has been performed successfully (i.e no error occurred).; /// - `status < 0` : there is an error not connected with the minimization procedure, for example when a wrong function is used.; /// - `status > 0` : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; /// - `status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus`.; /// TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error; /// only in Minos but not in Migrad a fitStatus of 40 will be returned.; /// Minuit2 returns 0 in case of success and different values in migrad,minos or; /// hesse depending on the error. See in this case the documentation of; /// Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the; /// minos return status and Minuit2Minimizer::Hesse for the hesse return status.; /// If other minimizers are used see their specific documentation for the status code returned.; /// For example in the case of Fumili, ",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:12673,Availability,error,error,12673," can retrieve an associated function with:; ///; /// ~~~ {.cpp}; /// TF1 *myfunc = h->GetFunction(""myfunc"");; /// ~~~; /// or by quering directly the list obtained by calling `TH1::GetListOfFunctions`.; ///; /// \anchor HFitStatus; /// ### Fit status; ///; /// The status of the fit is obtained converting the TFitResultPtr to an integer; /// independently if the fit option ""S"" is used or not:; ///; /// ~~~ {.cpp}; /// TFitResultPtr r = h->Fit(myFunc,opt);; /// Int_t fitStatus = r;; /// ~~~; ///; /// - `status = 0` : the fit has been performed successfully (i.e no error occurred).; /// - `status < 0` : there is an error not connected with the minimization procedure, for example when a wrong function is used.; /// - `status > 0` : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; /// - `status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus`.; /// TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error; /// only in Minos but not in Migrad a fitStatus of 40 will be returned.; /// Minuit2 returns 0 in case of success and different values in migrad,minos or; /// hesse depending on the error. See in this case the documentation of; /// Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the; /// minos return status and Minuit2Minimizer::Hesse for the hesse return status.; /// If other minimizers are used see their specific documentation for the status code returned.; /// For example in the case of Fumili, see TFumili::Minimize.; ///; /// \anchor HFitRange; /// ### Fitting in a range; ///; /// In order to fit in a sub-range of the histogram you have two options:; /// - pass to this function the lower (`xxmin`) and upper (`xxmax`) values for the fitting range;; /// - define a specific range in the fitted function and use the fitting option ""R"".; /// Fo",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:12743,Availability,error,error,12743,"or by quering directly the list obtained by calling `TH1::GetListOfFunctions`.; ///; /// \anchor HFitStatus; /// ### Fit status; ///; /// The status of the fit is obtained converting the TFitResultPtr to an integer; /// independently if the fit option ""S"" is used or not:; ///; /// ~~~ {.cpp}; /// TFitResultPtr r = h->Fit(myFunc,opt);; /// Int_t fitStatus = r;; /// ~~~; ///; /// - `status = 0` : the fit has been performed successfully (i.e no error occurred).; /// - `status < 0` : there is an error not connected with the minimization procedure, for example when a wrong function is used.; /// - `status > 0` : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; /// - `status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus`.; /// TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error; /// only in Minos but not in Migrad a fitStatus of 40 will be returned.; /// Minuit2 returns 0 in case of success and different values in migrad,minos or; /// hesse depending on the error. See in this case the documentation of; /// Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the; /// minos return status and Minuit2Minimizer::Hesse for the hesse return status.; /// If other minimizers are used see their specific documentation for the status code returned.; /// For example in the case of Fumili, see TFumili::Minimize.; ///; /// \anchor HFitRange; /// ### Fitting in a range; ///; /// In order to fit in a sub-range of the histogram you have two options:; /// - pass to this function the lower (`xxmin`) and upper (`xxmax`) values for the fitting range;; /// - define a specific range in the fitted function and use the fitting option ""R"".; /// For example, if your histogram has a defined range between -4 and 4 and you want to fit a gaussian; /// only in the interval ",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:12932,Availability,error,error,12932," /// ### Fit status; ///; /// The status of the fit is obtained converting the TFitResultPtr to an integer; /// independently if the fit option ""S"" is used or not:; ///; /// ~~~ {.cpp}; /// TFitResultPtr r = h->Fit(myFunc,opt);; /// Int_t fitStatus = r;; /// ~~~; ///; /// - `status = 0` : the fit has been performed successfully (i.e no error occurred).; /// - `status < 0` : there is an error not connected with the minimization procedure, for example when a wrong function is used.; /// - `status > 0` : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; /// - `status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus`.; /// TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error; /// only in Minos but not in Migrad a fitStatus of 40 will be returned.; /// Minuit2 returns 0 in case of success and different values in migrad,minos or; /// hesse depending on the error. See in this case the documentation of; /// Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the; /// minos return status and Minuit2Minimizer::Hesse for the hesse return status.; /// If other minimizers are used see their specific documentation for the status code returned.; /// For example in the case of Fumili, see TFumili::Minimize.; ///; /// \anchor HFitRange; /// ### Fitting in a range; ///; /// In order to fit in a sub-range of the histogram you have two options:; /// - pass to this function the lower (`xxmin`) and upper (`xxmax`) values for the fitting range;; /// - define a specific range in the fitted function and use the fitting option ""R"".; /// For example, if your histogram has a defined range between -4 and 4 and you want to fit a gaussian; /// only in the interval 1 to 3, you can do:; ///; /// ~~~ {.cpp}; /// TF1 *f1 = new TF1(""f1"", ""gaus"", 1, 3);; /// histo->Fit(""f1"", """,MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:15921,Availability,error,errors,15921,"a function with 6 parameters, you can do:; ///; /// ~~~ {.cpp}; /// func->SetParameters(0, 3.1, 1.e-6, -8, 0, 100);; /// func->SetParLimits(3, -10, -4);; /// func->FixParameter(4, 0);; /// func->SetParLimits(5, 1, 1);; /// ~~~; ///; /// With this setup, parameters 0->2 can vary freely; /// Parameter 3 has boundaries [-10,-4] with initial value -8; /// Parameter 4 is fixed to 0; /// Parameter 5 is fixed to 100.; /// When the lower limit and upper limit are equal, the parameter is fixed.; /// However to fix a parameter to 0, one must call the FixParameter function.; ///; /// \anchor HFitStatBox; /// ### Fit Statistics Box; ///; /// The statistics box can display the result of the fit.; /// You can change the statistics box to display the fit parameters with; /// the TStyle::SetOptFit(mode) method. This mode has four digits.; /// mode = pcev (default = 0111); ///; /// v = 1; print name/values of parameters; /// e = 1; print errors (if e=1, v must be 1); /// c = 1; print Chisquare/Number of degrees of freedom; /// p = 1; print Probability; ///; /// For example: gStyle->SetOptFit(1011);; /// prints the fit probability, parameter names/values, and errors.; /// You can change the position of the statistics box with these lines; /// (where g is a pointer to the TGraph):; ///; /// TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats"");; /// st->SetX1NDC(newx1); //new x start position; /// st->SetX2NDC(newx2); //new x end position; ///; /// \anchor HFitExtra; /// ### Additional Notes on Fitting; ///; /// #### Fitting a histogram of dimension N with a function of dimension N-1; ///; /// It is possible to fit a TH2 with a TF1 or a TH3 with a TF2.; /// In this case the chi-square is computed from the squared error distance between the function values and the bin centers weighted by the bin content.; /// For correct error scaling, the obtained parameter error are corrected as in the case when the; /// option ""W"" is used.; ///; /// #### User defined objective f",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:16146,Availability,error,errors,16146,"a function with 6 parameters, you can do:; ///; /// ~~~ {.cpp}; /// func->SetParameters(0, 3.1, 1.e-6, -8, 0, 100);; /// func->SetParLimits(3, -10, -4);; /// func->FixParameter(4, 0);; /// func->SetParLimits(5, 1, 1);; /// ~~~; ///; /// With this setup, parameters 0->2 can vary freely; /// Parameter 3 has boundaries [-10,-4] with initial value -8; /// Parameter 4 is fixed to 0; /// Parameter 5 is fixed to 100.; /// When the lower limit and upper limit are equal, the parameter is fixed.; /// However to fix a parameter to 0, one must call the FixParameter function.; ///; /// \anchor HFitStatBox; /// ### Fit Statistics Box; ///; /// The statistics box can display the result of the fit.; /// You can change the statistics box to display the fit parameters with; /// the TStyle::SetOptFit(mode) method. This mode has four digits.; /// mode = pcev (default = 0111); ///; /// v = 1; print name/values of parameters; /// e = 1; print errors (if e=1, v must be 1); /// c = 1; print Chisquare/Number of degrees of freedom; /// p = 1; print Probability; ///; /// For example: gStyle->SetOptFit(1011);; /// prints the fit probability, parameter names/values, and errors.; /// You can change the position of the statistics box with these lines; /// (where g is a pointer to the TGraph):; ///; /// TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats"");; /// st->SetX1NDC(newx1); //new x start position; /// st->SetX2NDC(newx2); //new x end position; ///; /// \anchor HFitExtra; /// ### Additional Notes on Fitting; ///; /// #### Fitting a histogram of dimension N with a function of dimension N-1; ///; /// It is possible to fit a TH2 with a TF1 or a TH3 with a TF2.; /// In this case the chi-square is computed from the squared error distance between the function values and the bin centers weighted by the bin content.; /// For correct error scaling, the obtained parameter error are corrected as in the case when the; /// option ""W"" is used.; ///; /// #### User defined objective f",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:16731,Availability,error,error,16731,"s with; /// the TStyle::SetOptFit(mode) method. This mode has four digits.; /// mode = pcev (default = 0111); ///; /// v = 1; print name/values of parameters; /// e = 1; print errors (if e=1, v must be 1); /// c = 1; print Chisquare/Number of degrees of freedom; /// p = 1; print Probability; ///; /// For example: gStyle->SetOptFit(1011);; /// prints the fit probability, parameter names/values, and errors.; /// You can change the position of the statistics box with these lines; /// (where g is a pointer to the TGraph):; ///; /// TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats"");; /// st->SetX1NDC(newx1); //new x start position; /// st->SetX2NDC(newx2); //new x end position; ///; /// \anchor HFitExtra; /// ### Additional Notes on Fitting; ///; /// #### Fitting a histogram of dimension N with a function of dimension N-1; ///; /// It is possible to fit a TH2 with a TF1 or a TH3 with a TF2.; /// In this case the chi-square is computed from the squared error distance between the function values and the bin centers weighted by the bin content.; /// For correct error scaling, the obtained parameter error are corrected as in the case when the; /// option ""W"" is used.; ///; /// #### User defined objective functions; ///; /// By default when fitting a chi square function is used for fitting. When option ""L"" is used; /// a Poisson likelihood function is used. Using option ""MULTI"" a multinomial likelihood fit is used.; /// Thes functions are defined in the header Fit/Chi2Func.h or Fit/PoissonLikelihoodFCN and they; /// are implemented using the routines FitUtil::EvaluateChi2 or FitUtil::EvaluatePoissonLogL in; /// the file math/mathcore/src/FitUtil.cxx.; /// It is possible to specify a user defined fitting function, using option ""U"" and; /// calling the following functions:; ///; /// ~~~ {.cpp}; /// TVirtualFitter::Fitter(myhist)->SetFCN(MyFittingFunction);; /// ~~~; ///; /// where MyFittingFunction is of type:; ///; /// ~~~ {.cpp}; /// extern void MyFit",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:16840,Availability,error,error,16840,"lues of parameters; /// e = 1; print errors (if e=1, v must be 1); /// c = 1; print Chisquare/Number of degrees of freedom; /// p = 1; print Probability; ///; /// For example: gStyle->SetOptFit(1011);; /// prints the fit probability, parameter names/values, and errors.; /// You can change the position of the statistics box with these lines; /// (where g is a pointer to the TGraph):; ///; /// TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats"");; /// st->SetX1NDC(newx1); //new x start position; /// st->SetX2NDC(newx2); //new x end position; ///; /// \anchor HFitExtra; /// ### Additional Notes on Fitting; ///; /// #### Fitting a histogram of dimension N with a function of dimension N-1; ///; /// It is possible to fit a TH2 with a TF1 or a TH3 with a TF2.; /// In this case the chi-square is computed from the squared error distance between the function values and the bin centers weighted by the bin content.; /// For correct error scaling, the obtained parameter error are corrected as in the case when the; /// option ""W"" is used.; ///; /// #### User defined objective functions; ///; /// By default when fitting a chi square function is used for fitting. When option ""L"" is used; /// a Poisson likelihood function is used. Using option ""MULTI"" a multinomial likelihood fit is used.; /// Thes functions are defined in the header Fit/Chi2Func.h or Fit/PoissonLikelihoodFCN and they; /// are implemented using the routines FitUtil::EvaluateChi2 or FitUtil::EvaluatePoissonLogL in; /// the file math/mathcore/src/FitUtil.cxx.; /// It is possible to specify a user defined fitting function, using option ""U"" and; /// calling the following functions:; ///; /// ~~~ {.cpp}; /// TVirtualFitter::Fitter(myhist)->SetFCN(MyFittingFunction);; /// ~~~; ///; /// where MyFittingFunction is of type:; ///; /// ~~~ {.cpp}; /// extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; /// ~~~; ///; /// #### Note on treatment of empty bins; //",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:16878,Availability,error,error,16878,"lues of parameters; /// e = 1; print errors (if e=1, v must be 1); /// c = 1; print Chisquare/Number of degrees of freedom; /// p = 1; print Probability; ///; /// For example: gStyle->SetOptFit(1011);; /// prints the fit probability, parameter names/values, and errors.; /// You can change the position of the statistics box with these lines; /// (where g is a pointer to the TGraph):; ///; /// TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats"");; /// st->SetX1NDC(newx1); //new x start position; /// st->SetX2NDC(newx2); //new x end position; ///; /// \anchor HFitExtra; /// ### Additional Notes on Fitting; ///; /// #### Fitting a histogram of dimension N with a function of dimension N-1; ///; /// It is possible to fit a TH2 with a TF1 or a TH3 with a TF2.; /// In this case the chi-square is computed from the squared error distance between the function values and the bin centers weighted by the bin content.; /// For correct error scaling, the obtained parameter error are corrected as in the case when the; /// option ""W"" is used.; ///; /// #### User defined objective functions; ///; /// By default when fitting a chi square function is used for fitting. When option ""L"" is used; /// a Poisson likelihood function is used. Using option ""MULTI"" a multinomial likelihood fit is used.; /// Thes functions are defined in the header Fit/Chi2Func.h or Fit/PoissonLikelihoodFCN and they; /// are implemented using the routines FitUtil::EvaluateChi2 or FitUtil::EvaluatePoissonLogL in; /// the file math/mathcore/src/FitUtil.cxx.; /// It is possible to specify a user defined fitting function, using option ""U"" and; /// calling the following functions:; ///; /// ~~~ {.cpp}; /// TVirtualFitter::Fitter(myhist)->SetFCN(MyFittingFunction);; /// ~~~; ///; /// where MyFittingFunction is of type:; ///; /// ~~~ {.cpp}; /// extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; /// ~~~; ///; /// #### Note on treatment of empty bins; //",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:17944,Availability,error,error,17944,"rected as in the case when the; /// option ""W"" is used.; ///; /// #### User defined objective functions; ///; /// By default when fitting a chi square function is used for fitting. When option ""L"" is used; /// a Poisson likelihood function is used. Using option ""MULTI"" a multinomial likelihood fit is used.; /// Thes functions are defined in the header Fit/Chi2Func.h or Fit/PoissonLikelihoodFCN and they; /// are implemented using the routines FitUtil::EvaluateChi2 or FitUtil::EvaluatePoissonLogL in; /// the file math/mathcore/src/FitUtil.cxx.; /// It is possible to specify a user defined fitting function, using option ""U"" and; /// calling the following functions:; ///; /// ~~~ {.cpp}; /// TVirtualFitter::Fitter(myhist)->SetFCN(MyFittingFunction);; /// ~~~; ///; /// where MyFittingFunction is of type:; ///; /// ~~~ {.cpp}; /// extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; /// ~~~; ///; /// #### Note on treatment of empty bins; ///; /// Empty bins, which have the content equal to zero AND error equal to zero,; /// are excluded by default from the chi-square fit, but they are considered in the likelihood fit.; /// since they affect the likelihood if the function value in these bins is not negligible.; /// Note that if the histogram is having bins with zero content and non zero-errors they are considered as; /// any other bins in the fit. Instead bins with zero error and non-zero content are by default excluded in the chi-squared fit.; /// In general, one should not fit a histogram with non-empty bins and zero errors.; ///; /// If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square; /// fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1.; /// Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors; /// are corrected by the obtained chi2 value using ",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:18237,Availability,error,errors,18237,"ed in the header Fit/Chi2Func.h or Fit/PoissonLikelihoodFCN and they; /// are implemented using the routines FitUtil::EvaluateChi2 or FitUtil::EvaluatePoissonLogL in; /// the file math/mathcore/src/FitUtil.cxx.; /// It is possible to specify a user defined fitting function, using option ""U"" and; /// calling the following functions:; ///; /// ~~~ {.cpp}; /// TVirtualFitter::Fitter(myhist)->SetFCN(MyFittingFunction);; /// ~~~; ///; /// where MyFittingFunction is of type:; ///; /// ~~~ {.cpp}; /// extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; /// ~~~; ///; /// #### Note on treatment of empty bins; ///; /// Empty bins, which have the content equal to zero AND error equal to zero,; /// are excluded by default from the chi-square fit, but they are considered in the likelihood fit.; /// since they affect the likelihood if the function value in these bins is not negligible.; /// Note that if the histogram is having bins with zero content and non zero-errors they are considered as; /// any other bins in the fit. Instead bins with zero error and non-zero content are by default excluded in the chi-squared fit.; /// In general, one should not fit a histogram with non-empty bins and zero errors.; ///; /// If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square; /// fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1.; /// Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors; /// are corrected by the obtained chi2 value using this scaling expression:; /// `errorp *= sqrt(chisquare/(ndf-1))` as it is done when fitting a TGraph with; /// no point errors.; ///; /// #### Excluding points; ///; /// You can use TF1::RejectPoint inside your fitting function to exclude some points; /// within a certain range from the fit. See the tutorial `fit/fitExclude.C`.; ///;",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:18322,Availability,error,error,18322,"valuateChi2 or FitUtil::EvaluatePoissonLogL in; /// the file math/mathcore/src/FitUtil.cxx.; /// It is possible to specify a user defined fitting function, using option ""U"" and; /// calling the following functions:; ///; /// ~~~ {.cpp}; /// TVirtualFitter::Fitter(myhist)->SetFCN(MyFittingFunction);; /// ~~~; ///; /// where MyFittingFunction is of type:; ///; /// ~~~ {.cpp}; /// extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; /// ~~~; ///; /// #### Note on treatment of empty bins; ///; /// Empty bins, which have the content equal to zero AND error equal to zero,; /// are excluded by default from the chi-square fit, but they are considered in the likelihood fit.; /// since they affect the likelihood if the function value in these bins is not negligible.; /// Note that if the histogram is having bins with zero content and non zero-errors they are considered as; /// any other bins in the fit. Instead bins with zero error and non-zero content are by default excluded in the chi-squared fit.; /// In general, one should not fit a histogram with non-empty bins and zero errors.; ///; /// If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square; /// fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1.; /// Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors; /// are corrected by the obtained chi2 value using this scaling expression:; /// `errorp *= sqrt(chisquare/(ndf-1))` as it is done when fitting a TGraph with; /// no point errors.; ///; /// #### Excluding points; ///; /// You can use TF1::RejectPoint inside your fitting function to exclude some points; /// within a certain range from the fit. See the tutorial `fit/fitExclude.C`.; ///; ///; /// #### Warning when using the option ""0""; ///; /// When selecting the option ""0"", the fitted function is added ",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:18474,Availability,error,errors,18474,"; /// It is possible to specify a user defined fitting function, using option ""U"" and; /// calling the following functions:; ///; /// ~~~ {.cpp}; /// TVirtualFitter::Fitter(myhist)->SetFCN(MyFittingFunction);; /// ~~~; ///; /// where MyFittingFunction is of type:; ///; /// ~~~ {.cpp}; /// extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; /// ~~~; ///; /// #### Note on treatment of empty bins; ///; /// Empty bins, which have the content equal to zero AND error equal to zero,; /// are excluded by default from the chi-square fit, but they are considered in the likelihood fit.; /// since they affect the likelihood if the function value in these bins is not negligible.; /// Note that if the histogram is having bins with zero content and non zero-errors they are considered as; /// any other bins in the fit. Instead bins with zero error and non-zero content are by default excluded in the chi-squared fit.; /// In general, one should not fit a histogram with non-empty bins and zero errors.; ///; /// If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square; /// fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1.; /// Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors; /// are corrected by the obtained chi2 value using this scaling expression:; /// `errorp *= sqrt(chisquare/(ndf-1))` as it is done when fitting a TGraph with; /// no point errors.; ///; /// #### Excluding points; ///; /// You can use TF1::RejectPoint inside your fitting function to exclude some points; /// within a certain range from the fit. See the tutorial `fit/fitExclude.C`.; ///; ///; /// #### Warning when using the option ""0""; ///; /// When selecting the option ""0"", the fitted function is added to; /// the list of functions of the histogram, but it is not drawn when the histogram is dr",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:18503,Availability,error,errors,18503,":; ///; /// ~~~ {.cpp}; /// TVirtualFitter::Fitter(myhist)->SetFCN(MyFittingFunction);; /// ~~~; ///; /// where MyFittingFunction is of type:; ///; /// ~~~ {.cpp}; /// extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; /// ~~~; ///; /// #### Note on treatment of empty bins; ///; /// Empty bins, which have the content equal to zero AND error equal to zero,; /// are excluded by default from the chi-square fit, but they are considered in the likelihood fit.; /// since they affect the likelihood if the function value in these bins is not negligible.; /// Note that if the histogram is having bins with zero content and non zero-errors they are considered as; /// any other bins in the fit. Instead bins with zero error and non-zero content are by default excluded in the chi-squared fit.; /// In general, one should not fit a histogram with non-empty bins and zero errors.; ///; /// If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square; /// fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1.; /// Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors; /// are corrected by the obtained chi2 value using this scaling expression:; /// `errorp *= sqrt(chisquare/(ndf-1))` as it is done when fitting a TGraph with; /// no point errors.; ///; /// #### Excluding points; ///; /// You can use TF1::RejectPoint inside your fitting function to exclude some points; /// within a certain range from the fit. See the tutorial `fit/fitExclude.C`.; ///; ///; /// #### Warning when using the option ""0""; ///; /// When selecting the option ""0"", the fitted function is added to; /// the list of functions of the histogram, but it is not drawn when the histogram is drawn.; /// You can undo this behaviour resetting its corresponding bit in the TF1 object as following:; ///; /// ~~~ {.cpp}",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:18733,Availability,error,error,18733," of type:; ///; /// ~~~ {.cpp}; /// extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; /// ~~~; ///; /// #### Note on treatment of empty bins; ///; /// Empty bins, which have the content equal to zero AND error equal to zero,; /// are excluded by default from the chi-square fit, but they are considered in the likelihood fit.; /// since they affect the likelihood if the function value in these bins is not negligible.; /// Note that if the histogram is having bins with zero content and non zero-errors they are considered as; /// any other bins in the fit. Instead bins with zero error and non-zero content are by default excluded in the chi-squared fit.; /// In general, one should not fit a histogram with non-empty bins and zero errors.; ///; /// If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square; /// fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1.; /// Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors; /// are corrected by the obtained chi2 value using this scaling expression:; /// `errorp *= sqrt(chisquare/(ndf-1))` as it is done when fitting a TGraph with; /// no point errors.; ///; /// #### Excluding points; ///; /// You can use TF1::RejectPoint inside your fitting function to exclude some points; /// within a certain range from the fit. See the tutorial `fit/fitExclude.C`.; ///; ///; /// #### Warning when using the option ""0""; ///; /// When selecting the option ""0"", the fitted function is added to; /// the list of functions of the histogram, but it is not drawn when the histogram is drawn.; /// You can undo this behaviour resetting its corresponding bit in the TF1 object as following:; ///; /// ~~~ {.cpp}; /// h.Fit(""myFunction"", ""0""); // fit, store function but do not draw; /// h.Draw(); // function is not drawn; /// h.GetFunction(""",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:18833,Availability,error,errors,18833,"ble_t &f, Double_t *u, Int_t flag);; /// ~~~; ///; /// #### Note on treatment of empty bins; ///; /// Empty bins, which have the content equal to zero AND error equal to zero,; /// are excluded by default from the chi-square fit, but they are considered in the likelihood fit.; /// since they affect the likelihood if the function value in these bins is not negligible.; /// Note that if the histogram is having bins with zero content and non zero-errors they are considered as; /// any other bins in the fit. Instead bins with zero error and non-zero content are by default excluded in the chi-squared fit.; /// In general, one should not fit a histogram with non-empty bins and zero errors.; ///; /// If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square; /// fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1.; /// Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors; /// are corrected by the obtained chi2 value using this scaling expression:; /// `errorp *= sqrt(chisquare/(ndf-1))` as it is done when fitting a TGraph with; /// no point errors.; ///; /// #### Excluding points; ///; /// You can use TF1::RejectPoint inside your fitting function to exclude some points; /// within a certain range from the fit. See the tutorial `fit/fitExclude.C`.; ///; ///; /// #### Warning when using the option ""0""; ///; /// When selecting the option ""0"", the fitted function is added to; /// the list of functions of the histogram, but it is not drawn when the histogram is drawn.; /// You can undo this behaviour resetting its corresponding bit in the TF1 object as following:; ///; /// ~~~ {.cpp}; /// h.Fit(""myFunction"", ""0""); // fit, store function but do not draw; /// h.Draw(); // function is not drawn; /// h.GetFunction(""myFunction"")->ResetBit(TF1::kNotDraw);; /// h.Draw(); // function is visible again; /// ~~~; ///",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:18923,Availability,error,errorp,18923,"ble_t &f, Double_t *u, Int_t flag);; /// ~~~; ///; /// #### Note on treatment of empty bins; ///; /// Empty bins, which have the content equal to zero AND error equal to zero,; /// are excluded by default from the chi-square fit, but they are considered in the likelihood fit.; /// since they affect the likelihood if the function value in these bins is not negligible.; /// Note that if the histogram is having bins with zero content and non zero-errors they are considered as; /// any other bins in the fit. Instead bins with zero error and non-zero content are by default excluded in the chi-squared fit.; /// In general, one should not fit a histogram with non-empty bins and zero errors.; ///; /// If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square; /// fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1.; /// Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors; /// are corrected by the obtained chi2 value using this scaling expression:; /// `errorp *= sqrt(chisquare/(ndf-1))` as it is done when fitting a TGraph with; /// no point errors.; ///; /// #### Excluding points; ///; /// You can use TF1::RejectPoint inside your fitting function to exclude some points; /// within a certain range from the fit. See the tutorial `fit/fitExclude.C`.; ///; ///; /// #### Warning when using the option ""0""; ///; /// When selecting the option ""0"", the fitted function is added to; /// the list of functions of the histogram, but it is not drawn when the histogram is drawn.; /// You can undo this behaviour resetting its corresponding bit in the TF1 object as following:; ///; /// ~~~ {.cpp}; /// h.Fit(""myFunction"", ""0""); // fit, store function but do not draw; /// h.Draw(); // function is not drawn; /// h.GetFunction(""myFunction"")->ResetBit(TF1::kNotDraw);; /// h.Draw(); // function is visible again; /// ~~~; ///",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:19013,Availability,error,errors,19013,"ble_t &f, Double_t *u, Int_t flag);; /// ~~~; ///; /// #### Note on treatment of empty bins; ///; /// Empty bins, which have the content equal to zero AND error equal to zero,; /// are excluded by default from the chi-square fit, but they are considered in the likelihood fit.; /// since they affect the likelihood if the function value in these bins is not negligible.; /// Note that if the histogram is having bins with zero content and non zero-errors they are considered as; /// any other bins in the fit. Instead bins with zero error and non-zero content are by default excluded in the chi-squared fit.; /// In general, one should not fit a histogram with non-empty bins and zero errors.; ///; /// If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square; /// fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1.; /// Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors; /// are corrected by the obtained chi2 value using this scaling expression:; /// `errorp *= sqrt(chisquare/(ndf-1))` as it is done when fitting a TGraph with; /// no point errors.; ///; /// #### Excluding points; ///; /// You can use TF1::RejectPoint inside your fitting function to exclude some points; /// within a certain range from the fit. See the tutorial `fit/fitExclude.C`.; ///; ///; /// #### Warning when using the option ""0""; ///; /// When selecting the option ""0"", the fitted function is added to; /// the list of functions of the histogram, but it is not drawn when the histogram is drawn.; /// You can undo this behaviour resetting its corresponding bit in the TF1 object as following:; ///; /// ~~~ {.cpp}; /// h.Fit(""myFunction"", ""0""); // fit, store function but do not draw; /// h.Draw(); // function is not drawn; /// h.GetFunction(""myFunction"")->ResetBit(TF1::kNotDraw);; /// h.Draw(); // function is visible again; /// ~~~; ///",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:4357,Deployability,configurat,configuration,4357,"et limits on one or more parameters and the fitting function is a predefined one (e.g gaus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits will be used.; /// ""C"" | In case of linear fitting, do no calculate the chisquare (saves CPU time).; /// ""G"" | Uses the gradient implemented in `TF1::GradientPar` for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function.; /// ""WIDTH"" | Scales the histogran bin content by the bin width (useful for variable bins histograms); /// ""SERIAL"" | Runs in serial mode. By defult if ROOT is built with MT support and MT is enables, the fit is perfomed in multi-thread - ""E"" Perform better Errors estimation using Minos technique; /// ""MULTITHREAD"" | Forces usage of multi-thread execution whenever possible; ///; /// The default fitting of an histogram (when no option is given) is perfomed as following:; /// - a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; /// - the full range of the histogram is used;; /// - the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; /// - for linear functions (`polN`, `chenbyshev` or formula expressions combined using operator `++`) a linear minimization is used.; /// - only the status of the fit is returned;; /// - the fit is performed in Multithread whenever is enabled in ROOT;; /// - only the last fitted function is saved in the histogram;; /// - the histogram is drawn after fitting overalyed with the resulting fitting function; ///; /// \anchor HFitMinimizer; /// ### Minimizer Configuration; ///; /// The Fit is perfomed using the default Minimizer, defined in the `ROOT::Math::MinimizerOptions` class.; /// It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling `TH1",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:4400,Deployability,Configurat,Configuration,4400,"et limits on one or more parameters and the fitting function is a predefined one (e.g gaus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits will be used.; /// ""C"" | In case of linear fitting, do no calculate the chisquare (saves CPU time).; /// ""G"" | Uses the gradient implemented in `TF1::GradientPar` for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function.; /// ""WIDTH"" | Scales the histogran bin content by the bin width (useful for variable bins histograms); /// ""SERIAL"" | Runs in serial mode. By defult if ROOT is built with MT support and MT is enables, the fit is perfomed in multi-thread - ""E"" Perform better Errors estimation using Minos technique; /// ""MULTITHREAD"" | Forces usage of multi-thread execution whenever possible; ///; /// The default fitting of an histogram (when no option is given) is perfomed as following:; /// - a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; /// - the full range of the histogram is used;; /// - the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; /// - for linear functions (`polN`, `chenbyshev` or formula expressions combined using operator `++`) a linear minimization is used.; /// - only the status of the fit is returned;; /// - the fit is performed in Multithread whenever is enabled in ROOT;; /// - only the last fitted function is saved in the histogram;; /// - the histogram is drawn after fitting overalyed with the resulting fitting function; ///; /// \anchor HFitMinimizer; /// ### Minimizer Configuration; ///; /// The Fit is perfomed using the default Minimizer, defined in the `ROOT::Math::MinimizerOptions` class.; /// It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling `TH1",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:4901,Deployability,Configurat,Configuration,4901,"OT is built with MT support and MT is enables, the fit is perfomed in multi-thread - ""E"" Perform better Errors estimation using Minos technique; /// ""MULTITHREAD"" | Forces usage of multi-thread execution whenever possible; ///; /// The default fitting of an histogram (when no option is given) is perfomed as following:; /// - a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; /// - the full range of the histogram is used;; /// - the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; /// - for linear functions (`polN`, `chenbyshev` or formula expressions combined using operator `++`) a linear minimization is used.; /// - only the status of the fit is returned;; /// - the fit is performed in Multithread whenever is enabled in ROOT;; /// - only the last fitted function is saved in the histogram;; /// - the histogram is drawn after fitting overalyed with the resulting fitting function; ///; /// \anchor HFitMinimizer; /// ### Minimizer Configuration; ///; /// The Fit is perfomed using the default Minimizer, defined in the `ROOT::Math::MinimizerOptions` class.; /// It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling `TH1::Fit`):; /// - `ROOT::Math::MinimizerOptions::SetDefaultMinimizer(minimizerName, minimizerAgorithm)` for changing the minmizer and/or the corresponding algorithm.; /// For example `ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""GSLMultiMin"",""BFGS"");` will set the usage of the BFGS algorithm of the GSL multi-dimensional minimization; /// The current defaults are (""Minuit"",""Migrad"").; /// See the documentation of the `ROOT::Math::MinimizerOptions` for the available minimizers in ROOT and their corresponding algorithms.; /// - `ROOT::Math::MinimizerOptions::SetDefaultTolerance` for setting a different tolerance",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:5087,Deployability,configurat,configuration,5087,"ng the bin histogram errors and excluding bins with zero errors (empty bins);; /// - the full range of the histogram is used;; /// - the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; /// - for linear functions (`polN`, `chenbyshev` or formula expressions combined using operator `++`) a linear minimization is used.; /// - only the status of the fit is returned;; /// - the fit is performed in Multithread whenever is enabled in ROOT;; /// - only the last fitted function is saved in the histogram;; /// - the histogram is drawn after fitting overalyed with the resulting fitting function; ///; /// \anchor HFitMinimizer; /// ### Minimizer Configuration; ///; /// The Fit is perfomed using the default Minimizer, defined in the `ROOT::Math::MinimizerOptions` class.; /// It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling `TH1::Fit`):; /// - `ROOT::Math::MinimizerOptions::SetDefaultMinimizer(minimizerName, minimizerAgorithm)` for changing the minmizer and/or the corresponding algorithm.; /// For example `ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""GSLMultiMin"",""BFGS"");` will set the usage of the BFGS algorithm of the GSL multi-dimensional minimization; /// The current defaults are (""Minuit"",""Migrad"").; /// See the documentation of the `ROOT::Math::MinimizerOptions` for the available minimizers in ROOT and their corresponding algorithms.; /// - `ROOT::Math::MinimizerOptions::SetDefaultTolerance` for setting a different tolerance value for the minimization.; /// - `ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls` for setting the maximum number of function calls.; /// - `ROOT::Math::MinimizerOptions::SetDefaultPrintLevel` for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing; ///; /// Other options are possible depending on the Minimizer used, see the co",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:6142,Integrability,depend,depending,6142," and its configuration parameters by calling these static functions before fitting (before calling `TH1::Fit`):; /// - `ROOT::Math::MinimizerOptions::SetDefaultMinimizer(minimizerName, minimizerAgorithm)` for changing the minmizer and/or the corresponding algorithm.; /// For example `ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""GSLMultiMin"",""BFGS"");` will set the usage of the BFGS algorithm of the GSL multi-dimensional minimization; /// The current defaults are (""Minuit"",""Migrad"").; /// See the documentation of the `ROOT::Math::MinimizerOptions` for the available minimizers in ROOT and their corresponding algorithms.; /// - `ROOT::Math::MinimizerOptions::SetDefaultTolerance` for setting a different tolerance value for the minimization.; /// - `ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls` for setting the maximum number of function calls.; /// - `ROOT::Math::MinimizerOptions::SetDefaultPrintLevel` for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing; ///; /// Other options are possible depending on the Minimizer used, see the corresponding documentation.; /// The default minimizer can be also set in the resource file in etc/system.rootrc. For example; ///; /// ~~~ {.cpp}; /// Root.Fitter: Minuit2; /// ~~~; ///; /// \anchor HFitChi2; /// ### Chi-square Fits; ///; /// By default a chi-square (least-square) fit is performed on the histogram. The so-called modified least-square method; /// is used where the residual for each bin is computed using as error the observed value (the bin error) returned by `TH1::GetBinError`; ///; /// \f[; /// Chi2 = \sum_{i}{ \left(\frac{y(i) - f(x(i) | p )}{e(i)} \right)^2 }; /// \f]; ///; /// where `y(i)` is the bin content for each bin `i`, `x(i)` is the bin center and `e(i)` is the bin error (`sqrt(y(i)` for; /// an un-weighted histogram). Bins with zero errors are excluded from the fit. See also later the note on the treatment; /// of empty bins. When using option ""I"" the r",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:12416,Integrability,depend,depends,12416,"h histogram.; /// When TH1::Fit is invoked, the fitted function is added to the histogram list of functions (fFunctions).; /// If the histogram is made persistent, the list of associated functions is also persistent.; /// Given a histogram h, one can retrieve an associated function with:; ///; /// ~~~ {.cpp}; /// TF1 *myfunc = h->GetFunction(""myfunc"");; /// ~~~; /// or by quering directly the list obtained by calling `TH1::GetListOfFunctions`.; ///; /// \anchor HFitStatus; /// ### Fit status; ///; /// The status of the fit is obtained converting the TFitResultPtr to an integer; /// independently if the fit option ""S"" is used or not:; ///; /// ~~~ {.cpp}; /// TFitResultPtr r = h->Fit(myFunc,opt);; /// Int_t fitStatus = r;; /// ~~~; ///; /// - `status = 0` : the fit has been performed successfully (i.e no error occurred).; /// - `status < 0` : there is an error not connected with the minimization procedure, for example when a wrong function is used.; /// - `status > 0` : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; /// - `status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus`.; /// TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error; /// only in Minos but not in Migrad a fitStatus of 40 will be returned.; /// Minuit2 returns 0 in case of success and different values in migrad,minos or; /// hesse depending on the error. See in this case the documentation of; /// Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the; /// minos return status and Minuit2Minimizer::Hesse for the hesse return status.; /// If other minimizers are used see their specific documentation for the status code returned.; /// For example in the case of Fumili, see TFumili::Minimize.; ///; /// \anchor HFitRange; /// ### Fitting in a range; ///; /// In order to fit ",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:12915,Integrability,depend,depending,12915," /// ### Fit status; ///; /// The status of the fit is obtained converting the TFitResultPtr to an integer; /// independently if the fit option ""S"" is used or not:; ///; /// ~~~ {.cpp}; /// TFitResultPtr r = h->Fit(myFunc,opt);; /// Int_t fitStatus = r;; /// ~~~; ///; /// - `status = 0` : the fit has been performed successfully (i.e no error occurred).; /// - `status < 0` : there is an error not connected with the minimization procedure, for example when a wrong function is used.; /// - `status > 0` : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; /// - `status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus`.; /// TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error; /// only in Minos but not in Migrad a fitStatus of 40 will be returned.; /// Minuit2 returns 0 in case of success and different values in migrad,minos or; /// hesse depending on the error. See in this case the documentation of; /// Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the; /// minos return status and Minuit2Minimizer::Hesse for the hesse return status.; /// If other minimizers are used see their specific documentation for the status code returned.; /// For example in the case of Fumili, see TFumili::Minimize.; ///; /// \anchor HFitRange; /// ### Fitting in a range; ///; /// In order to fit in a sub-range of the histogram you have two options:; /// - pass to this function the lower (`xxmin`) and upper (`xxmax`) values for the fitting range;; /// - define a specific range in the fitted function and use the fitting option ""R"".; /// For example, if your histogram has a defined range between -4 and 4 and you want to fit a gaussian; /// only in the interval 1 to 3, you can do:; ///; /// ~~~ {.cpp}; /// TF1 *f1 = new TF1(""f1"", ""gaus"", 1, 3);; /// histo->Fit(""f1"", """,MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:17328,Integrability,rout,routines,17328,"stats"");; /// st->SetX1NDC(newx1); //new x start position; /// st->SetX2NDC(newx2); //new x end position; ///; /// \anchor HFitExtra; /// ### Additional Notes on Fitting; ///; /// #### Fitting a histogram of dimension N with a function of dimension N-1; ///; /// It is possible to fit a TH2 with a TF1 or a TH3 with a TF2.; /// In this case the chi-square is computed from the squared error distance between the function values and the bin centers weighted by the bin content.; /// For correct error scaling, the obtained parameter error are corrected as in the case when the; /// option ""W"" is used.; ///; /// #### User defined objective functions; ///; /// By default when fitting a chi square function is used for fitting. When option ""L"" is used; /// a Poisson likelihood function is used. Using option ""MULTI"" a multinomial likelihood fit is used.; /// Thes functions are defined in the header Fit/Chi2Func.h or Fit/PoissonLikelihoodFCN and they; /// are implemented using the routines FitUtil::EvaluateChi2 or FitUtil::EvaluatePoissonLogL in; /// the file math/mathcore/src/FitUtil.cxx.; /// It is possible to specify a user defined fitting function, using option ""U"" and; /// calling the following functions:; ///; /// ~~~ {.cpp}; /// TVirtualFitter::Fitter(myhist)->SetFCN(MyFittingFunction);; /// ~~~; ///; /// where MyFittingFunction is of type:; ///; /// ~~~ {.cpp}; /// extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; /// ~~~; ///; /// #### Note on treatment of empty bins; ///; /// Empty bins, which have the content equal to zero AND error equal to zero,; /// are excluded by default from the chi-square fit, but they are considered in the likelihood fit.; /// since they affect the likelihood if the function value in these bins is not negligible.; /// Note that if the histogram is having bins with zero content and non zero-errors they are considered as; /// any other bins in the fit. Instead bins with zero error and non-zero conte",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:3723,Modifiability,variab,variable,3723,"leted and only the last one is kept.; /// ""N"" | Does not store the graphics function, does not draw the histogram with the function after fitting.; /// ""0"" | Does not draw the histogram and the fitted function after fitting, but in contrast to option ""N"", it stores the fitted function in the histogram list of functions.; /// ""R"" | Fit using a fitting range specified in the function range with `TF1::SetRange`.; /// ""B"" | Use this option when you want to fix or set limits on one or more parameters and the fitting function is a predefined one (e.g gaus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits will be used.; /// ""C"" | In case of linear fitting, do no calculate the chisquare (saves CPU time).; /// ""G"" | Uses the gradient implemented in `TF1::GradientPar` for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function.; /// ""WIDTH"" | Scales the histogran bin content by the bin width (useful for variable bins histograms); /// ""SERIAL"" | Runs in serial mode. By defult if ROOT is built with MT support and MT is enables, the fit is perfomed in multi-thread - ""E"" Perform better Errors estimation using Minos technique; /// ""MULTITHREAD"" | Forces usage of multi-thread execution whenever possible; ///; /// The default fitting of an histogram (when no option is given) is perfomed as following:; /// - a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; /// - the full range of the histogram is used;; /// - the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; /// - for linear functions (`polN`, `chenbyshev` or formula expressions combined using operator `++`) a linear minimization is used.; /// - only the status of the fit is returned;; /// - the fit is performed in Multithread whenever is enabled in ROOT;; /// - only the las",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:4357,Modifiability,config,configuration,4357,"et limits on one or more parameters and the fitting function is a predefined one (e.g gaus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits will be used.; /// ""C"" | In case of linear fitting, do no calculate the chisquare (saves CPU time).; /// ""G"" | Uses the gradient implemented in `TF1::GradientPar` for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function.; /// ""WIDTH"" | Scales the histogran bin content by the bin width (useful for variable bins histograms); /// ""SERIAL"" | Runs in serial mode. By defult if ROOT is built with MT support and MT is enables, the fit is perfomed in multi-thread - ""E"" Perform better Errors estimation using Minos technique; /// ""MULTITHREAD"" | Forces usage of multi-thread execution whenever possible; ///; /// The default fitting of an histogram (when no option is given) is perfomed as following:; /// - a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; /// - the full range of the histogram is used;; /// - the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; /// - for linear functions (`polN`, `chenbyshev` or formula expressions combined using operator `++`) a linear minimization is used.; /// - only the status of the fit is returned;; /// - the fit is performed in Multithread whenever is enabled in ROOT;; /// - only the last fitted function is saved in the histogram;; /// - the histogram is drawn after fitting overalyed with the resulting fitting function; ///; /// \anchor HFitMinimizer; /// ### Minimizer Configuration; ///; /// The Fit is perfomed using the default Minimizer, defined in the `ROOT::Math::MinimizerOptions` class.; /// It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling `TH1",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:4400,Modifiability,Config,Configuration,4400,"et limits on one or more parameters and the fitting function is a predefined one (e.g gaus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits will be used.; /// ""C"" | In case of linear fitting, do no calculate the chisquare (saves CPU time).; /// ""G"" | Uses the gradient implemented in `TF1::GradientPar` for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function.; /// ""WIDTH"" | Scales the histogran bin content by the bin width (useful for variable bins histograms); /// ""SERIAL"" | Runs in serial mode. By defult if ROOT is built with MT support and MT is enables, the fit is perfomed in multi-thread - ""E"" Perform better Errors estimation using Minos technique; /// ""MULTITHREAD"" | Forces usage of multi-thread execution whenever possible; ///; /// The default fitting of an histogram (when no option is given) is perfomed as following:; /// - a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; /// - the full range of the histogram is used;; /// - the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; /// - for linear functions (`polN`, `chenbyshev` or formula expressions combined using operator `++`) a linear minimization is used.; /// - only the status of the fit is returned;; /// - the fit is performed in Multithread whenever is enabled in ROOT;; /// - only the last fitted function is saved in the histogram;; /// - the histogram is drawn after fitting overalyed with the resulting fitting function; ///; /// \anchor HFitMinimizer; /// ### Minimizer Configuration; ///; /// The Fit is perfomed using the default Minimizer, defined in the `ROOT::Math::MinimizerOptions` class.; /// It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling `TH1",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:4901,Modifiability,Config,Configuration,4901,"OT is built with MT support and MT is enables, the fit is perfomed in multi-thread - ""E"" Perform better Errors estimation using Minos technique; /// ""MULTITHREAD"" | Forces usage of multi-thread execution whenever possible; ///; /// The default fitting of an histogram (when no option is given) is perfomed as following:; /// - a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; /// - the full range of the histogram is used;; /// - the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; /// - for linear functions (`polN`, `chenbyshev` or formula expressions combined using operator `++`) a linear minimization is used.; /// - only the status of the fit is returned;; /// - the fit is performed in Multithread whenever is enabled in ROOT;; /// - only the last fitted function is saved in the histogram;; /// - the histogram is drawn after fitting overalyed with the resulting fitting function; ///; /// \anchor HFitMinimizer; /// ### Minimizer Configuration; ///; /// The Fit is perfomed using the default Minimizer, defined in the `ROOT::Math::MinimizerOptions` class.; /// It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling `TH1::Fit`):; /// - `ROOT::Math::MinimizerOptions::SetDefaultMinimizer(minimizerName, minimizerAgorithm)` for changing the minmizer and/or the corresponding algorithm.; /// For example `ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""GSLMultiMin"",""BFGS"");` will set the usage of the BFGS algorithm of the GSL multi-dimensional minimization; /// The current defaults are (""Minuit"",""Migrad"").; /// See the documentation of the `ROOT::Math::MinimizerOptions` for the available minimizers in ROOT and their corresponding algorithms.; /// - `ROOT::Math::MinimizerOptions::SetDefaultTolerance` for setting a different tolerance",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:5087,Modifiability,config,configuration,5087,"ng the bin histogram errors and excluding bins with zero errors (empty bins);; /// - the full range of the histogram is used;; /// - the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; /// - for linear functions (`polN`, `chenbyshev` or formula expressions combined using operator `++`) a linear minimization is used.; /// - only the status of the fit is returned;; /// - the fit is performed in Multithread whenever is enabled in ROOT;; /// - only the last fitted function is saved in the histogram;; /// - the histogram is drawn after fitting overalyed with the resulting fitting function; ///; /// \anchor HFitMinimizer; /// ### Minimizer Configuration; ///; /// The Fit is perfomed using the default Minimizer, defined in the `ROOT::Math::MinimizerOptions` class.; /// It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling `TH1::Fit`):; /// - `ROOT::Math::MinimizerOptions::SetDefaultMinimizer(minimizerName, minimizerAgorithm)` for changing the minmizer and/or the corresponding algorithm.; /// For example `ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""GSLMultiMin"",""BFGS"");` will set the usage of the BFGS algorithm of the GSL multi-dimensional minimization; /// The current defaults are (""Minuit"",""Migrad"").; /// See the documentation of the `ROOT::Math::MinimizerOptions` for the available minimizers in ROOT and their corresponding algorithms.; /// - `ROOT::Math::MinimizerOptions::SetDefaultTolerance` for setting a different tolerance value for the minimization.; /// - `ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls` for setting the maximum number of function calls.; /// - `ROOT::Math::MinimizerOptions::SetDefaultPrintLevel` for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing; ///; /// Other options are possible depending on the Minimizer used, see the co",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:2067,Performance,Perform,Performs,2067,"is needed for getting correct parameter uncertainties for weighted fits.; /// ""P"" | Uses Pearson chi-square method. Uses expected errors instead of the observed one (default case). The expected error is instead estimated from the square-root of the bin function value.; /// ""MULTI"" | Uses Loglikelihood method based on multi-nomial distribution. In this case the function must be normalized and one fits only the function shape.; /// ""W"" | Fit using the chi-square method and ignoring the bin uncertainties and skip empty bins.; /// ""WW"" | Fit using the chi-square method and ignoring the bin uncertainties and include the empty bins.; /// ""I"" | Uses the integral of function in the bin instead of the default bin center value.; /// ""F"" | Uses the default minimizer (e.g. Minuit) when fitting a linear function (e.g. polN) instead of the linear fitter.; /// ""U"" | Uses a user specified objective function (e.g. user providedlikelihood function) defined using `TVirtualFitter::SetFCN`; /// ""E"" | Performs a better parameter errors estimation using the Minos technique for all fit parameters.; /// ""M"" | Uses the IMPROVE algorithm (available only in TMinuit). This algorithm attempts improve the found local minimum by searching for a better one.; /// ""S"" | The full result of the fit is returned in the `TFitResultPtr`. This is needed to get the covariance matrix of the fit. See `TFitResult` and the base class `ROOT::Math::FitResult`.; /// ""Q"" | Quiet mode (minimum printing); /// ""V"" | Verbose mode (default is between Q and V); /// ""+"" | Adds this new fitted function to the list of fitted functions. By default, the previous function is deleted and only the last one is kept.; /// ""N"" | Does not store the graphics function, does not draw the histogram with the function after fitting.; /// ""0"" | Does not draw the histogram and the fitted function after fitting, but in contrast to option ""N"", it stores the fitted function in the histogram list of functions.; /// ""R"" | Fit using a fitting rang",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:3871,Performance,multi-thread,multi-thread,3871,"et limits on one or more parameters and the fitting function is a predefined one (e.g gaus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits will be used.; /// ""C"" | In case of linear fitting, do no calculate the chisquare (saves CPU time).; /// ""G"" | Uses the gradient implemented in `TF1::GradientPar` for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function.; /// ""WIDTH"" | Scales the histogran bin content by the bin width (useful for variable bins histograms); /// ""SERIAL"" | Runs in serial mode. By defult if ROOT is built with MT support and MT is enables, the fit is perfomed in multi-thread - ""E"" Perform better Errors estimation using Minos technique; /// ""MULTITHREAD"" | Forces usage of multi-thread execution whenever possible; ///; /// The default fitting of an histogram (when no option is given) is perfomed as following:; /// - a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; /// - the full range of the histogram is used;; /// - the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; /// - for linear functions (`polN`, `chenbyshev` or formula expressions combined using operator `++`) a linear minimization is used.; /// - only the status of the fit is returned;; /// - the fit is performed in Multithread whenever is enabled in ROOT;; /// - only the last fitted function is saved in the histogram;; /// - the histogram is drawn after fitting overalyed with the resulting fitting function; ///; /// \anchor HFitMinimizer; /// ### Minimizer Configuration; ///; /// The Fit is perfomed using the default Minimizer, defined in the `ROOT::Math::MinimizerOptions` class.; /// It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling `TH1",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:3890,Performance,Perform,Perform,3890,"et limits on one or more parameters and the fitting function is a predefined one (e.g gaus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits will be used.; /// ""C"" | In case of linear fitting, do no calculate the chisquare (saves CPU time).; /// ""G"" | Uses the gradient implemented in `TF1::GradientPar` for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function.; /// ""WIDTH"" | Scales the histogran bin content by the bin width (useful for variable bins histograms); /// ""SERIAL"" | Runs in serial mode. By defult if ROOT is built with MT support and MT is enables, the fit is perfomed in multi-thread - ""E"" Perform better Errors estimation using Minos technique; /// ""MULTITHREAD"" | Forces usage of multi-thread execution whenever possible; ///; /// The default fitting of an histogram (when no option is given) is perfomed as following:; /// - a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; /// - the full range of the histogram is used;; /// - the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; /// - for linear functions (`polN`, `chenbyshev` or formula expressions combined using operator `++`) a linear minimization is used.; /// - only the status of the fit is returned;; /// - the fit is performed in Multithread whenever is enabled in ROOT;; /// - only the last fitted function is saved in the histogram;; /// - the histogram is drawn after fitting overalyed with the resulting fitting function; ///; /// \anchor HFitMinimizer; /// ### Minimizer Configuration; ///; /// The Fit is perfomed using the default Minimizer, defined in the `ROOT::Math::MinimizerOptions` class.; /// It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling `TH1",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:3982,Performance,multi-thread,multi-thread,3982,"et limits on one or more parameters and the fitting function is a predefined one (e.g gaus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits will be used.; /// ""C"" | In case of linear fitting, do no calculate the chisquare (saves CPU time).; /// ""G"" | Uses the gradient implemented in `TF1::GradientPar` for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function.; /// ""WIDTH"" | Scales the histogran bin content by the bin width (useful for variable bins histograms); /// ""SERIAL"" | Runs in serial mode. By defult if ROOT is built with MT support and MT is enables, the fit is perfomed in multi-thread - ""E"" Perform better Errors estimation using Minos technique; /// ""MULTITHREAD"" | Forces usage of multi-thread execution whenever possible; ///; /// The default fitting of an histogram (when no option is given) is perfomed as following:; /// - a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; /// - the full range of the histogram is used;; /// - the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; /// - for linear functions (`polN`, `chenbyshev` or formula expressions combined using operator `++`) a linear minimization is used.; /// - only the status of the fit is returned;; /// - the fit is performed in Multithread whenever is enabled in ROOT;; /// - only the last fitted function is saved in the histogram;; /// - the histogram is drawn after fitting overalyed with the resulting fitting function; ///; /// \anchor HFitMinimizer; /// ### Minimizer Configuration; ///; /// The Fit is perfomed using the default Minimizer, defined in the `ROOT::Math::MinimizerOptions` class.; /// It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling `TH1",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:4642,Performance,perform,performed,4642,"OT is built with MT support and MT is enables, the fit is perfomed in multi-thread - ""E"" Perform better Errors estimation using Minos technique; /// ""MULTITHREAD"" | Forces usage of multi-thread execution whenever possible; ///; /// The default fitting of an histogram (when no option is given) is perfomed as following:; /// - a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; /// - the full range of the histogram is used;; /// - the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; /// - for linear functions (`polN`, `chenbyshev` or formula expressions combined using operator `++`) a linear minimization is used.; /// - only the status of the fit is returned;; /// - the fit is performed in Multithread whenever is enabled in ROOT;; /// - only the last fitted function is saved in the histogram;; /// - the histogram is drawn after fitting overalyed with the resulting fitting function; ///; /// \anchor HFitMinimizer; /// ### Minimizer Configuration; ///; /// The Fit is perfomed using the default Minimizer, defined in the `ROOT::Math::MinimizerOptions` class.; /// It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling `TH1::Fit`):; /// - `ROOT::Math::MinimizerOptions::SetDefaultMinimizer(minimizerName, minimizerAgorithm)` for changing the minmizer and/or the corresponding algorithm.; /// For example `ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""GSLMultiMin"",""BFGS"");` will set the usage of the BFGS algorithm of the GSL multi-dimensional minimization; /// The current defaults are (""Minuit"",""Migrad"").; /// See the documentation of the `ROOT::Math::MinimizerOptions` for the available minimizers in ROOT and their corresponding algorithms.; /// - `ROOT::Math::MinimizerOptions::SetDefaultTolerance` for setting a different tolerance",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:6474,Performance,perform,performed,6474,"iMin"",""BFGS"");` will set the usage of the BFGS algorithm of the GSL multi-dimensional minimization; /// The current defaults are (""Minuit"",""Migrad"").; /// See the documentation of the `ROOT::Math::MinimizerOptions` for the available minimizers in ROOT and their corresponding algorithms.; /// - `ROOT::Math::MinimizerOptions::SetDefaultTolerance` for setting a different tolerance value for the minimization.; /// - `ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls` for setting the maximum number of function calls.; /// - `ROOT::Math::MinimizerOptions::SetDefaultPrintLevel` for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing; ///; /// Other options are possible depending on the Minimizer used, see the corresponding documentation.; /// The default minimizer can be also set in the resource file in etc/system.rootrc. For example; ///; /// ~~~ {.cpp}; /// Root.Fitter: Minuit2; /// ~~~; ///; /// \anchor HFitChi2; /// ### Chi-square Fits; ///; /// By default a chi-square (least-square) fit is performed on the histogram. The so-called modified least-square method; /// is used where the residual for each bin is computed using as error the observed value (the bin error) returned by `TH1::GetBinError`; ///; /// \f[; /// Chi2 = \sum_{i}{ \left(\frac{y(i) - f(x(i) | p )}{e(i)} \right)^2 }; /// \f]; ///; /// where `y(i)` is the bin content for each bin `i`, `x(i)` is the bin center and `e(i)` is the bin error (`sqrt(y(i)` for; /// an un-weighted histogram). Bins with zero errors are excluded from the fit. See also later the note on the treatment; /// of empty bins. When using option ""I"" the residual is computed not using the function value at the bin center, `f(x(i)|p)`,; /// but the integral of the function in the bin, Integral{ f(x|p)dx }, divided by the bin volume.; /// When using option `P` (Pearson chi2), the expected error computed as `e(i) = sqrt(f(x(i)|p))` is used.; /// In this case empty bins are considered in the fit.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:9235,Performance,perform,perform,9235,"f the use of chi-square and likelihood functions in fits to histograms,”; /// Nucl. Instrum. Meth. 221 (1984) 437.; ///; /// \f[; /// NLL = \sum_{i}{( f(x(i) | p ) + y(i)\log(y(i)/ f(x(i) | p )) - y(i)) }; /// \f]; /// By using this formulation, `2*NLL` can be interpreted as the chi-square resulting from the fit.; ///; /// This method should be always used when the bin content represents counts (i.e. errors are sqrt(N) ).; /// The likelihood method has the advantage of treating correctly bins with low statistics. In case of high; /// statistics/bin the distribution of the bin content becomes a normal distribution and the likelihood and the chi2 fit; /// give the same result.; ///; /// The likelihood method, although a bit slower, it is therefore the recommended method,; /// when the histogram represent counts (Poisson statistics), where the chi-square methods may; /// give incorrect results, especially in case of low statistics.; /// In case of a weighted histogram, it is possible to perform also a likelihood fit by using the; /// option ""WL"". Note a weighted histogram is a histogram which has been filled with weights and it; /// has the information on the sum of the weight square for each bin ( TH1::Sumw2() has been called).; /// The bin error for a weighted histogram is the square root of the sum of the weight square.; ///; /// \anchor HFitRes; /// ### Fit Result; ///; /// The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; /// By default the TFitResultPtr contains only the status of the fit which is return by an; /// automatic conversion of the TFitResultPtr to an integer. One can write in this case directly:; ///; /// ~~~ {.cpp}; /// Int_t fitStatus = h->Fit(myFunc);; /// ~~~; ///; /// If the option ""S"" is instead used, TFitResultPtr behaves as a smart; /// pointer to the TFitResult object. This is useful for retrieving the full result information from the fit, such as the covariance matrix,; /// as shown in this example code:; ",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:12186,Performance,perform,performed,12186,"c->GetParameter(0); //value of 1st parameter; /// Double_t err0 = myfunc->GetParError(0); //error on first parameter; /// ~~~; ///; /// ##### Associated functions; ///; /// One or more object ( can be added to the list; /// of functions (fFunctions) associated to each histogram.; /// When TH1::Fit is invoked, the fitted function is added to the histogram list of functions (fFunctions).; /// If the histogram is made persistent, the list of associated functions is also persistent.; /// Given a histogram h, one can retrieve an associated function with:; ///; /// ~~~ {.cpp}; /// TF1 *myfunc = h->GetFunction(""myfunc"");; /// ~~~; /// or by quering directly the list obtained by calling `TH1::GetListOfFunctions`.; ///; /// \anchor HFitStatus; /// ### Fit status; ///; /// The status of the fit is obtained converting the TFitResultPtr to an integer; /// independently if the fit option ""S"" is used or not:; ///; /// ~~~ {.cpp}; /// TFitResultPtr r = h->Fit(myFunc,opt);; /// Int_t fitStatus = r;; /// ~~~; ///; /// - `status = 0` : the fit has been performed successfully (i.e no error occurred).; /// - `status < 0` : there is an error not connected with the minimization procedure, for example when a wrong function is used.; /// - `status > 0` : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; /// - `status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus`.; /// TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error; /// only in Minos but not in Migrad a fitStatus of 40 will be returned.; /// Minuit2 returns 0 in case of success and different values in migrad,minos or; /// hesse depending on the error. See in this case the documentation of; /// Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the; /// minos return status and Minuit2Minimizer::Hesse for ",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:10355,Security,access,access,10355,"//; /// \anchor HFitRes; /// ### Fit Result; ///; /// The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; /// By default the TFitResultPtr contains only the status of the fit which is return by an; /// automatic conversion of the TFitResultPtr to an integer. One can write in this case directly:; ///; /// ~~~ {.cpp}; /// Int_t fitStatus = h->Fit(myFunc);; /// ~~~; ///; /// If the option ""S"" is instead used, TFitResultPtr behaves as a smart; /// pointer to the TFitResult object. This is useful for retrieving the full result information from the fit, such as the covariance matrix,; /// as shown in this example code:; ///; /// ~~~ {.cpp}; /// TFitResultPtr r = h->Fit(myFunc,""S"");; /// TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; /// Double_t chi2 = r->Chi2(); // to retrieve the fit chi2; /// Double_t par0 = r->Parameter(0); // retrieve the value for the parameter 0; /// Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; /// r->Print(""V""); // print full information of fit including covariance matrix; /// r->Write(); // store the result in a file; /// ~~~; ///; /// The fit parameters, error and chi-square (but not covariance matrix) can be retrieved also; /// directly from the fitted function that is passed to this call.; /// Given a pointer to an associated fitted function `myfunc`, one can retrieve the function/fit; /// parameters with calls such as:; ///; /// ~~~ {.cpp}; /// Double_t chi2 = myfunc->GetChisquare();; /// Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; /// Double_t err0 = myfunc->GetParError(0); //error on first parameter; /// ~~~; ///; /// ##### Associated functions; ///; /// One or more object ( can be added to the list; /// of functions (fFunctions) associated to each histogram.; /// When TH1::Fit is invoked, the fitted function is added to the histogram list of functions (fFunctions).; /// If the histogram is made persistent, the list of as",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:843,Testability,log,log,843,"////////////////////////////////////////////////////////////////////////////////; /// Fit histogram with the function pointer f1.; ///; /// \param[in] f1 pointer to the function object; /// \param[in] option string defining the fit options (see table below).; /// \param[in] goption specify a list of graphics options. See TH1::Draw for a complete list of these options.; /// \param[in] xxmin lower fitting range; /// \param[in] xxmax upper fitting range; /// \return A smart pointer to the TFitResult class; ///; /// \anchor HFitOpt; /// ### Histogram Fitting Options; ///; /// Here is the full list of fit options that can be given in the parameter `option`.; /// Several options can be used together by concatanating the strings without the need of any delimiters.; ///; /// option | description; /// -------|------------; /// ""L"" | Uses a log likelihood method (default is chi-square method). To be used when the histogram represents counts.; /// ""WL"" | Weighted log likelihood method. To be used when the histogram has been filled with weights different than 1. This is needed for getting correct parameter uncertainties for weighted fits.; /// ""P"" | Uses Pearson chi-square method. Uses expected errors instead of the observed one (default case). The expected error is instead estimated from the square-root of the bin function value.; /// ""MULTI"" | Uses Loglikelihood method based on multi-nomial distribution. In this case the function must be normalized and one fits only the function shape.; /// ""W"" | Fit using the chi-square method and ignoring the bin uncertainties and skip empty bins.; /// ""WW"" | Fit using the chi-square method and ignoring the bin uncertainties and include the empty bins.; /// ""I"" | Uses the integral of function in the bin instead of the default bin center value.; /// ""F"" | Uses the default minimizer (e.g. Minuit) when fitting a linear function (e.g. polN) instead of the linear fitter.; /// ""U"" | Uses a user specified objective function (e.g. user providedlikel",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:967,Testability,log,log,967,"////////////////////////////////////////////////////////////////////////////////; /// Fit histogram with the function pointer f1.; ///; /// \param[in] f1 pointer to the function object; /// \param[in] option string defining the fit options (see table below).; /// \param[in] goption specify a list of graphics options. See TH1::Draw for a complete list of these options.; /// \param[in] xxmin lower fitting range; /// \param[in] xxmax upper fitting range; /// \return A smart pointer to the TFitResult class; ///; /// \anchor HFitOpt; /// ### Histogram Fitting Options; ///; /// Here is the full list of fit options that can be given in the parameter `option`.; /// Several options can be used together by concatanating the strings without the need of any delimiters.; ///; /// option | description; /// -------|------------; /// ""L"" | Uses a log likelihood method (default is chi-square method). To be used when the histogram represents counts.; /// ""WL"" | Weighted log likelihood method. To be used when the histogram has been filled with weights different than 1. This is needed for getting correct parameter uncertainties for weighted fits.; /// ""P"" | Uses Pearson chi-square method. Uses expected errors instead of the observed one (default case). The expected error is instead estimated from the square-root of the bin function value.; /// ""MULTI"" | Uses Loglikelihood method based on multi-nomial distribution. In this case the function must be normalized and one fits only the function shape.; /// ""W"" | Fit using the chi-square method and ignoring the bin uncertainties and skip empty bins.; /// ""WW"" | Fit using the chi-square method and ignoring the bin uncertainties and include the empty bins.; /// ""I"" | Uses the integral of function in the bin instead of the default bin center value.; /// ""F"" | Uses the default minimizer (e.g. Minuit) when fitting a linear function (e.g. polN) instead of the linear fitter.; /// ""U"" | Uses a user specified objective function (e.g. user providedlikel",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1361,Testability,Log,Loglikelihood,1361,"aram[in] xxmin lower fitting range; /// \param[in] xxmax upper fitting range; /// \return A smart pointer to the TFitResult class; ///; /// \anchor HFitOpt; /// ### Histogram Fitting Options; ///; /// Here is the full list of fit options that can be given in the parameter `option`.; /// Several options can be used together by concatanating the strings without the need of any delimiters.; ///; /// option | description; /// -------|------------; /// ""L"" | Uses a log likelihood method (default is chi-square method). To be used when the histogram represents counts.; /// ""WL"" | Weighted log likelihood method. To be used when the histogram has been filled with weights different than 1. This is needed for getting correct parameter uncertainties for weighted fits.; /// ""P"" | Uses Pearson chi-square method. Uses expected errors instead of the observed one (default case). The expected error is instead estimated from the square-root of the bin function value.; /// ""MULTI"" | Uses Loglikelihood method based on multi-nomial distribution. In this case the function must be normalized and one fits only the function shape.; /// ""W"" | Fit using the chi-square method and ignoring the bin uncertainties and skip empty bins.; /// ""WW"" | Fit using the chi-square method and ignoring the bin uncertainties and include the empty bins.; /// ""I"" | Uses the integral of function in the bin instead of the default bin center value.; /// ""F"" | Uses the default minimizer (e.g. Minuit) when fitting a linear function (e.g. polN) instead of the linear fitter.; /// ""U"" | Uses a user specified objective function (e.g. user providedlikelihood function) defined using `TVirtualFitter::SetFCN`; /// ""E"" | Performs a better parameter errors estimation using the Minos technique for all fit parameters.; /// ""M"" | Uses the IMPROVE algorithm (available only in TMinuit). This algorithm attempts improve the found local minimum by searching for a better one.; /// ""S"" | The full result of the fit is returned in the `TFit",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:7855,Testability,log,log-likelihood,7855,"luded from the fit. See also later the note on the treatment; /// of empty bins. When using option ""I"" the residual is computed not using the function value at the bin center, `f(x(i)|p)`,; /// but the integral of the function in the bin, Integral{ f(x|p)dx }, divided by the bin volume.; /// When using option `P` (Pearson chi2), the expected error computed as `e(i) = sqrt(f(x(i)|p))` is used.; /// In this case empty bins are considered in the fit.; /// Both chi-square methods should not be used when the bin content represent counts, especially in case of low bin statistics,; /// because they could return a biased result.; ///; /// \anchor HFitNLL; /// ### Likelihood Fits; ///; /// When using option ""L"" a likelihood fit is used instead of the default chi-square fit.; /// The likelihood is built assuming a Poisson probability density function for each bin.; /// The negative log-likelihood to be minimized is; ///; /// \f[; /// NLL = - \sum_{i}{ \log {\mathrm P} ( y(i) | f(x(i) | p ) ) }; /// \f]; /// where `P(y|f)` is the Poisson distribution of observing a count `y(i)` in the bin when the expected count is `f(x(i)|p)`.; /// The exact likelihood used is the Poisson likelihood described in this paper:; /// S. Baker and R. D. Cousins, “Clarification of the use of chi-square and likelihood functions in fits to histograms,”; /// Nucl. Instrum. Meth. 221 (1984) 437.; ///; /// \f[; /// NLL = \sum_{i}{( f(x(i) | p ) + y(i)\log(y(i)/ f(x(i) | p )) - y(i)) }; /// \f]; /// By using this formulation, `2*NLL` can be interpreted as the chi-square resulting from the fit.; ///; /// This method should be always used when the bin content represents counts (i.e. errors are sqrt(N) ).; /// The likelihood method has the advantage of treating correctly bins with low statistics. In case of high; /// statistics/bin the distribution of the bin content becomes a normal distribution and the likelihood and the chi2 fit; /// give the same result.; ///; /// The likelihood method, although a bit sl",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:7927,Testability,log,log,7927,"luded from the fit. See also later the note on the treatment; /// of empty bins. When using option ""I"" the residual is computed not using the function value at the bin center, `f(x(i)|p)`,; /// but the integral of the function in the bin, Integral{ f(x|p)dx }, divided by the bin volume.; /// When using option `P` (Pearson chi2), the expected error computed as `e(i) = sqrt(f(x(i)|p))` is used.; /// In this case empty bins are considered in the fit.; /// Both chi-square methods should not be used when the bin content represent counts, especially in case of low bin statistics,; /// because they could return a biased result.; ///; /// \anchor HFitNLL; /// ### Likelihood Fits; ///; /// When using option ""L"" a likelihood fit is used instead of the default chi-square fit.; /// The likelihood is built assuming a Poisson probability density function for each bin.; /// The negative log-likelihood to be minimized is; ///; /// \f[; /// NLL = - \sum_{i}{ \log {\mathrm P} ( y(i) | f(x(i) | p ) ) }; /// \f]; /// where `P(y|f)` is the Poisson distribution of observing a count `y(i)` in the bin when the expected count is `f(x(i)|p)`.; /// The exact likelihood used is the Poisson likelihood described in this paper:; /// S. Baker and R. D. Cousins, “Clarification of the use of chi-square and likelihood functions in fits to histograms,”; /// Nucl. Instrum. Meth. 221 (1984) 437.; ///; /// \f[; /// NLL = \sum_{i}{( f(x(i) | p ) + y(i)\log(y(i)/ f(x(i) | p )) - y(i)) }; /// \f]; /// By using this formulation, `2*NLL` can be interpreted as the chi-square resulting from the fit.; ///; /// This method should be always used when the bin content represents counts (i.e. errors are sqrt(N) ).; /// The likelihood method has the advantage of treating correctly bins with low statistics. In case of high; /// statistics/bin the distribution of the bin content becomes a normal distribution and the likelihood and the chi2 fit; /// give the same result.; ///; /// The likelihood method, although a bit sl",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:8407,Testability,log,log,8407," should not be used when the bin content represent counts, especially in case of low bin statistics,; /// because they could return a biased result.; ///; /// \anchor HFitNLL; /// ### Likelihood Fits; ///; /// When using option ""L"" a likelihood fit is used instead of the default chi-square fit.; /// The likelihood is built assuming a Poisson probability density function for each bin.; /// The negative log-likelihood to be minimized is; ///; /// \f[; /// NLL = - \sum_{i}{ \log {\mathrm P} ( y(i) | f(x(i) | p ) ) }; /// \f]; /// where `P(y|f)` is the Poisson distribution of observing a count `y(i)` in the bin when the expected count is `f(x(i)|p)`.; /// The exact likelihood used is the Poisson likelihood described in this paper:; /// S. Baker and R. D. Cousins, “Clarification of the use of chi-square and likelihood functions in fits to histograms,”; /// Nucl. Instrum. Meth. 221 (1984) 437.; ///; /// \f[; /// NLL = \sum_{i}{( f(x(i) | p ) + y(i)\log(y(i)/ f(x(i) | p )) - y(i)) }; /// \f]; /// By using this formulation, `2*NLL` can be interpreted as the chi-square resulting from the fit.; ///; /// This method should be always used when the bin content represents counts (i.e. errors are sqrt(N) ).; /// The likelihood method has the advantage of treating correctly bins with low statistics. In case of high; /// statistics/bin the distribution of the bin content becomes a normal distribution and the likelihood and the chi2 fit; /// give the same result.; ///; /// The likelihood method, although a bit slower, it is therefore the recommended method,; /// when the histogram represent counts (Poisson statistics), where the chi-square methods may; /// give incorrect results, especially in case of low statistics.; /// In case of a weighted histogram, it is possible to perform also a likelihood fit by using the; /// option ""WL"". Note a weighted histogram is a histogram which has been filled with weights and it; /// has the information on the sum of the weight square for each bin (",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:19457,Usability,undo,undo,19457,"ble_t &f, Double_t *u, Int_t flag);; /// ~~~; ///; /// #### Note on treatment of empty bins; ///; /// Empty bins, which have the content equal to zero AND error equal to zero,; /// are excluded by default from the chi-square fit, but they are considered in the likelihood fit.; /// since they affect the likelihood if the function value in these bins is not negligible.; /// Note that if the histogram is having bins with zero content and non zero-errors they are considered as; /// any other bins in the fit. Instead bins with zero error and non-zero content are by default excluded in the chi-squared fit.; /// In general, one should not fit a histogram with non-empty bins and zero errors.; ///; /// If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square; /// fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1.; /// Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors; /// are corrected by the obtained chi2 value using this scaling expression:; /// `errorp *= sqrt(chisquare/(ndf-1))` as it is done when fitting a TGraph with; /// no point errors.; ///; /// #### Excluding points; ///; /// You can use TF1::RejectPoint inside your fitting function to exclude some points; /// within a certain range from the fit. See the tutorial `fit/fitExclude.C`.; ///; ///; /// #### Warning when using the option ""0""; ///; /// When selecting the option ""0"", the fitted function is added to; /// the list of functions of the histogram, but it is not drawn when the histogram is drawn.; /// You can undo this behaviour resetting its corresponding bit in the TF1 object as following:; ///; /// ~~~ {.cpp}; /// h.Fit(""myFunction"", ""0""); // fit, store function but do not draw; /// h.Draw(); // function is not drawn; /// h.GetFunction(""myFunction"")->ResetBit(TF1::kNotDraw);; /// h.Draw(); // function is visible again; /// ~~~; ///",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:7,Modifiability,plugin,plugin,7,"// use plugin manager to create instance of TFitEditor",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:433,Availability,error,error,433,"////////////////////////////////////////////////////////////////////////////////; /// Return a histogram containing the asymmetry of this histogram with h2,; /// where the asymmetry is defined as:; ///; /// ~~~ {.cpp}; /// Asymmetry = (h1 - h2)/(h1 + h2) where h1 = this; /// ~~~; ///; /// works for 1D, 2D, etc. histograms; /// c2 is an optional argument that gives a relative weight between the two; /// histograms, and dc2 is the error on this weight. This is useful, for example,; /// when forming an asymmetry between two histograms from 2 different data sets that; /// need to be normalized to each other in some way. The function calculates; /// the errors assuming Poisson statistics on h1 and h2 (that is, dh = sqrt(h)).; ///; /// example: assuming 'h1' and 'h2' are already filled; ///; /// ~~~ {.cpp}; /// h3 = h1->GetAsymmetry(h2); /// ~~~; ///; /// then 'h3' is created and filled with the asymmetry between 'h1' and 'h2';; /// h1 and h2 are left intact.; ///; /// Note that it is the user's responsibility to manage the created histogram.; /// The name of the returned histogram will be `Asymmetry_nameOfh1-nameOfh2`; ///; /// code proposed by Jason Seely (seely@mit.edu) and adapted by R.Brun; ///; /// clone the histograms so top and bottom will have the; /// correct dimensions:; /// Sumw2 just makes sure the errors will be computed properly; /// when we form sums and ratios below.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:657,Availability,error,errors,657,"////////////////////////////////////////////////////////////////////////////////; /// Return a histogram containing the asymmetry of this histogram with h2,; /// where the asymmetry is defined as:; ///; /// ~~~ {.cpp}; /// Asymmetry = (h1 - h2)/(h1 + h2) where h1 = this; /// ~~~; ///; /// works for 1D, 2D, etc. histograms; /// c2 is an optional argument that gives a relative weight between the two; /// histograms, and dc2 is the error on this weight. This is useful, for example,; /// when forming an asymmetry between two histograms from 2 different data sets that; /// need to be normalized to each other in some way. The function calculates; /// the errors assuming Poisson statistics on h1 and h2 (that is, dh = sqrt(h)).; ///; /// example: assuming 'h1' and 'h2' are already filled; ///; /// ~~~ {.cpp}; /// h3 = h1->GetAsymmetry(h2); /// ~~~; ///; /// then 'h3' is created and filled with the asymmetry between 'h1' and 'h2';; /// h1 and h2 are left intact.; ///; /// Note that it is the user's responsibility to manage the created histogram.; /// The name of the returned histogram will be `Asymmetry_nameOfh1-nameOfh2`; ///; /// code proposed by Jason Seely (seely@mit.edu) and adapted by R.Brun; ///; /// clone the histograms so top and bottom will have the; /// correct dimensions:; /// Sumw2 just makes sure the errors will be computed properly; /// when we form sums and ratios below.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1327,Availability,error,errors,1327,"////////////////////////////////////////////////////////////////////////////////; /// Return a histogram containing the asymmetry of this histogram with h2,; /// where the asymmetry is defined as:; ///; /// ~~~ {.cpp}; /// Asymmetry = (h1 - h2)/(h1 + h2) where h1 = this; /// ~~~; ///; /// works for 1D, 2D, etc. histograms; /// c2 is an optional argument that gives a relative weight between the two; /// histograms, and dc2 is the error on this weight. This is useful, for example,; /// when forming an asymmetry between two histograms from 2 different data sets that; /// need to be normalized to each other in some way. The function calculates; /// the errors assuming Poisson statistics on h1 and h2 (that is, dh = sqrt(h)).; ///; /// example: assuming 'h1' and 'h2' are already filled; ///; /// ~~~ {.cpp}; /// h3 = h1->GetAsymmetry(h2); /// ~~~; ///; /// then 'h3' is created and filled with the asymmetry between 'h1' and 'h2';; /// h1 and h2 are left intact.; ///; /// Note that it is the user's responsibility to manage the created histogram.; /// The name of the returned histogram will be `Asymmetry_nameOfh1-nameOfh2`; ///; /// code proposed by Jason Seely (seely@mit.edu) and adapted by R.Brun; ///; /// clone the histograms so top and bottom will have the; /// correct dimensions:; /// Sumw2 just makes sure the errors will be computed properly; /// when we form sums and ratios below.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1190,Energy Efficiency,adapt,adapted,1190,"////////////////////////////////////////////////////////////////////////////////; /// Return a histogram containing the asymmetry of this histogram with h2,; /// where the asymmetry is defined as:; ///; /// ~~~ {.cpp}; /// Asymmetry = (h1 - h2)/(h1 + h2) where h1 = this; /// ~~~; ///; /// works for 1D, 2D, etc. histograms; /// c2 is an optional argument that gives a relative weight between the two; /// histograms, and dc2 is the error on this weight. This is useful, for example,; /// when forming an asymmetry between two histograms from 2 different data sets that; /// need to be normalized to each other in some way. The function calculates; /// the errors assuming Poisson statistics on h1 and h2 (that is, dh = sqrt(h)).; ///; /// example: assuming 'h1' and 'h2' are already filled; ///; /// ~~~ {.cpp}; /// h3 = h1->GetAsymmetry(h2); /// ~~~; ///; /// then 'h3' is created and filled with the asymmetry between 'h1' and 'h2';; /// h1 and h2 are left intact.; ///; /// Note that it is the user's responsibility to manage the created histogram.; /// The name of the returned histogram will be `Asymmetry_nameOfh1-nameOfh2`; ///; /// code proposed by Jason Seely (seely@mit.edu) and adapted by R.Brun; ///; /// clone the histograms so top and bottom will have the; /// correct dimensions:; /// Sumw2 just makes sure the errors will be computed properly; /// when we form sums and ratios below.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1190,Modifiability,adapt,adapted,1190,"////////////////////////////////////////////////////////////////////////////////; /// Return a histogram containing the asymmetry of this histogram with h2,; /// where the asymmetry is defined as:; ///; /// ~~~ {.cpp}; /// Asymmetry = (h1 - h2)/(h1 + h2) where h1 = this; /// ~~~; ///; /// works for 1D, 2D, etc. histograms; /// c2 is an optional argument that gives a relative weight between the two; /// histograms, and dc2 is the error on this weight. This is useful, for example,; /// when forming an asymmetry between two histograms from 2 different data sets that; /// need to be normalized to each other in some way. The function calculates; /// the errors assuming Poisson statistics on h1 and h2 (that is, dh = sqrt(h)).; ///; /// example: assuming 'h1' and 'h2' are already filled; ///; /// ~~~ {.cpp}; /// h3 = h1->GetAsymmetry(h2); /// ~~~; ///; /// then 'h3' is created and filled with the asymmetry between 'h1' and 'h2';; /// h1 and h2 are left intact.; ///; /// Note that it is the user's responsibility to manage the created histogram.; /// The name of the returned histogram will be `Asymmetry_nameOfh1-nameOfh2`; ///; /// code proposed by Jason Seely (seely@mit.edu) and adapted by R.Brun; ///; /// clone the histograms so top and bottom will have the; /// correct dimensions:; /// Sumw2 just makes sure the errors will be computed properly; /// when we form sums and ratios below.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:47,Availability,error,errors,47,"// now loop over bins to calculate the correct errors; // the reason this error calculation looks complex is because of c2",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:74,Availability,error,error,74,"// now loop over bins to calculate the correct errors; // the reason this error calculation looks complex is because of c2",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:65,Availability,error,error,65,"// here some bin contents are written into variables to make the error; // calculation a little more legible:",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:43,Modifiability,variab,variables,43,"// here some bin contents are written into variables to make the error; // calculation a little more legible:",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:53,Availability,error,errors,53,"// make sure there are some events, if not, then the errors are set = 0; // automatically.; //if(bot < 1){} was changed to the next line from recommendation of Jason Seely (28 Nov 2005)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:18,Availability,error,errors,18,"// computation of errors by Christos Leonidopoulos",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:490,Energy Efficiency,power,power,490,"////////////////////////////////////////////////////////////////////////////////; /// Number of effective entries of the histogram.; ///; /// \f[; /// neff = \frac{(\sum Weights )^2}{(\sum Weight^2 )}; /// \f]; ///; /// In case of an unweighted histogram this number is equivalent to the; /// number of entries of the histogram.; /// For a weighted histogram, this number corresponds to the hypothetical number of unweighted entries; /// a histogram would need to have the same statistical power as this weighted histogram.; /// Note: The underflow/overflow are included if one has set the TH1::StatOverFlows flag; /// and if the statistics has been computed at filling time.; /// If a range is set in the histogram the number is computed from the given range.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:246,Modifiability,variab,variable,246,"////////////////////////////////////////////////////////////////////////////////; /// Compute Quantiles for this histogram; /// Quantile x_p := Q(p) is defined as the value x_p such that the cumulative; /// probability distribution Function F of variable X yields:; ///; /// ~~~ {.cpp}; /// F(x_p) = Pr(X <= x_p) = p with 0 <= p <= 1.; /// x_p = Q(p) = F_inv(p); /// ~~~; ///; /// For instance the median x_0.5 of a distribution is defined as that value; /// of the random variable X for which the distribution function equals 0.5:; ///; /// ~~~ {.cpp}; /// F(x_0.5) = Probability(X < x_0.5) = 0.5; /// x_0.5 = Q(0.5); /// ~~~; ///; /// \author Eddy Offermann; /// code from Eddy Offermann, Renaissance; ///; /// \param[in] n maximum size of array xp and size of array p (if given); /// \param[out] xp array to be filled with nq quantiles evaluated at (p). Memory has to be preallocated by caller.; /// If p is null (default value), then xp is actually set to the (first n) histogram bin edges; /// \param[in] p array of cumulative probabilities where quantiles should be evaluated.; /// - if p is null, the CDF of the histogram will be used instead as array, and will; /// have a size = number of bins + 1 in h. It will correspond to the; /// quantiles calculated at the lowest edge of the histogram (quantile=0) and; /// all the upper edges of the bins. (nbins might be > n).; /// - if p is not null, it is assumed to contain at least n values.; /// \return value nq (<=n) with the number of quantiles computed; ///; /// Note that the Integral of the histogram is automatically recomputed; /// if the number of entries is different of the number of entries when; /// the integral was computed last time. In case you do not use the Fill; /// functions to fill your histogram, but SetBinContent, you must call; /// TH1::ComputeIntegral before calling this function.; ///; /// Getting quantiles xp from two histograms and storing results in a TGraph,; /// a so-called QQ-plot; ///; /// ~~~ {.cpp}; /// ",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:473,Modifiability,variab,variable,473,"////////////////////////////////////////////////////////////////////////////////; /// Compute Quantiles for this histogram; /// Quantile x_p := Q(p) is defined as the value x_p such that the cumulative; /// probability distribution Function F of variable X yields:; ///; /// ~~~ {.cpp}; /// F(x_p) = Pr(X <= x_p) = p with 0 <= p <= 1.; /// x_p = Q(p) = F_inv(p); /// ~~~; ///; /// For instance the median x_0.5 of a distribution is defined as that value; /// of the random variable X for which the distribution function equals 0.5:; ///; /// ~~~ {.cpp}; /// F(x_0.5) = Probability(X < x_0.5) = 0.5; /// x_0.5 = Q(0.5); /// ~~~; ///; /// \author Eddy Offermann; /// code from Eddy Offermann, Renaissance; ///; /// \param[in] n maximum size of array xp and size of array p (if given); /// \param[out] xp array to be filled with nq quantiles evaluated at (p). Memory has to be preallocated by caller.; /// If p is null (default value), then xp is actually set to the (first n) histogram bin edges; /// \param[in] p array of cumulative probabilities where quantiles should be evaluated.; /// - if p is null, the CDF of the histogram will be used instead as array, and will; /// have a size = number of bins + 1 in h. It will correspond to the; /// quantiles calculated at the lowest edge of the histogram (quantile=0) and; /// all the upper edges of the bins. (nbins might be > n).; /// - if p is not null, it is assumed to contain at least n values.; /// \return value nq (<=n) with the number of quantiles computed; ///; /// Note that the Integral of the histogram is automatically recomputed; /// if the number of entries is different of the number of entries when; /// the integral was computed last time. In case you do not use the Fill; /// functions to fill your histogram, but SetBinContent, you must call; /// TH1::ComputeIntegral before calling this function.; ///; /// Getting quantiles xp from two histograms and storing results in a TGraph,; /// a so-called QQ-plot; ///; /// ~~~ {.cpp}; /// ",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:288,Integrability,rout,routine,288,"////////////////////////////////////////////////////////////////////////////////; /// Least squares lpolynomial fitting without weights.; ///; /// \param[in] n number of points to fit; /// \param[in] m number of parameters; /// \param[in] a array of parameters; ///; /// based on CERNLIB routine LSQ: Translated to C++ by Rene Brun; /// (E.Keil. revised by B.Schorr, 23.10.1981.)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:122,Integrability,rout,routine,122,"////////////////////////////////////////////////////////////////////////////////; /// Extracted from CERN Program library routine DSEQN.; ///; /// Translated to C++ by Rene Brun",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1059,Security,access,access,1059,"////////////////////////////////////////////////////////////////////////////////; /// Return Global bin number corresponding to binx,y,z.; ///; /// 2-D and 3-D histograms are represented with a one dimensional; /// structure.; /// This has the advantage that all existing functions, such as; /// GetBinContent, GetBinError, GetBinFunction work for all dimensions.; ///; /// In case of a TH1x, returns binx directly.; /// see TH1::GetBinXYZ for the inverse transformation.; ///; /// Convention for numbering bins; ///; /// For all histogram types: nbins, xlow, xup; ///; /// - bin = 0; underflow bin; /// - bin = 1; first bin with low-edge xlow INCLUDED; /// - bin = nbins; last bin with upper-edge xup EXCLUDED; /// - bin = nbins+1; overflow bin; ///; /// In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; /// For example, assuming a 3-D histogram with binx,biny,binz, the function; ///; /// ~~~ {.cpp}; /// Int_t bin = h->GetBin(binx,biny,binz);; /// ~~~; ///; /// returns a global/linearized bin number. This global bin is useful; /// to access the bin information independently of the dimension.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:743,Security,access,access,743,"////////////////////////////////////////////////////////////////////////////////; /// Return content of bin number bin.; ///; /// Implemented in TH1C,S,F,D; ///; /// Convention for numbering bins; ///; /// For all histogram types: nbins, xlow, xup; ///; /// - bin = 0; underflow bin; /// - bin = 1; first bin with low-edge xlow INCLUDED; /// - bin = nbins; last bin with upper-edge xup EXCLUDED; /// - bin = nbins+1; overflow bin; ///; /// In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; /// For example, assuming a 3-D histogram with binx,biny,binz, the function; ///; /// ~~~ {.cpp}; /// Int_t bin = h->GetBin(binx,biny,binz);; /// ~~~; ///; /// returns a global/linearized bin number. This global bin is useful; /// to access the bin information independently of the dimension.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:86,Energy Efficiency,Reduce,Reduce,86,"////////////////////////////////////////////////////////////////////////////////; /// Reduce the number of bins for the axis passed in the option to the number of bins having a label.; /// The method will remove only the extra bins existing after the last ""labeled"" bin.; /// Note that if there are ""un-labeled"" bins present between ""labeled"" bins they will not be removed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:21,Availability,error,error,21,"// reset content and error; //now loop on all bins and refill",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:428,Availability,down,down,428,"////////////////////////////////////////////////////////////////////////////////; /// Sort bins with labels or set option(s) to draw axis with labels; /// \param[in] option; /// - ""a"" sort by alphabetic order; /// - "">"" sort by decreasing values; /// - ""<"" sort by increasing values; /// - ""h"" draw labels horizontal; /// - ""v"" draw labels vertical; /// - ""u"" draw labels up (end of label right adjusted); /// - ""d"" draw labels down (start of label left adjusted); ///; /// In case not all bins have labels sorting will work only in the case; /// the first `n` consecutive bins have all labels and sorting will be performed on; /// those label bins.; ///; /// \param[in] ax axis",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:614,Performance,perform,performed,614,"////////////////////////////////////////////////////////////////////////////////; /// Sort bins with labels or set option(s) to draw axis with labels; /// \param[in] option; /// - ""a"" sort by alphabetic order; /// - "">"" sort by decreasing values; /// - ""<"" sort by increasing values; /// - ""h"" draw labels horizontal; /// - ""v"" draw labels vertical; /// - ""u"" draw labels up (end of label right adjusted); /// - ""d"" draw labels down (start of label left adjusted); ///; /// In case not all bins have labels sorting will work only in the case; /// the first `n` consecutive bins have all labels and sorting will be performed on; /// those label bins.; ///; /// \param[in] ax axis",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:133,Availability,error,error,133,"// case where label bins are consecutive starting from first bin will work; // calling before a TH1::LabelsDeflate() will avoid this error message",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:139,Integrability,message,message,139,"// case where label bins are consecutive starting from first bin will work; // calling before a TH1::LabelsDeflate() will avoid this error message",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:122,Safety,avoid,avoid,122,"// case where label bins are consecutive starting from first bin will work; // calling before a TH1::LabelsDeflate() will avoid this error message",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:7,Deployability,Update,UpdateBinCOntent,7,"// use UpdateBinCOntent to not screw up histogram entries",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:27,Testability,test,tested,27,"// case of 3D (needs to be tested)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test if two double are almost equal.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test if a double is almost an integer.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test if the binning is equidistant.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:270,Availability,error,errors,270,"////////////////////////////////////////////////////////////////////////////////; /// Add all histograms in the collection to this histogram.; /// This function computes the min/max for the x axis,; /// compute a new number of bins, if necessary,; /// add bin contents, errors and statistics.; /// If all histograms have bin labels, bins with identical labels; /// will be merged, no matter what their order is.; /// If overflows are present and limits are different the function will fail.; /// The function returns the total number of entries in the result histogram; /// if the merge is successful, -1 otherwise.; ///; /// Possible option:; /// -NOL : the merger will ignore the labels and merge the histograms bin by bin using bin center values to match bins; /// -NOCHECK: the histogram will not perform a check for duplicate labels in case of axes with labels. The check; /// (enabled by default) slows down the merging; ///; /// IMPORTANT remark. The axis x may have different number; /// of bins and different limits, BUT the largest bin width must be; /// a multiple of the smallest bin width and the upper limit must also; /// be a multiple of the bin width.; /// Example:; ///; /// ~~~ {.cpp}; /// void atest() {; /// TH1F *h1 = new TH1F(""h1"",""h1"",110,-110,0);; /// TH1F *h2 = new TH1F(""h2"",""h2"",220,0,110);; /// TH1F *h3 = new TH1F(""h3"",""h3"",330,-55,55);; /// TRandom r;; /// for (Int_t i=0;i<10000;i++) {; /// h1->Fill(r.Gaus(-55,10));; /// h2->Fill(r.Gaus(55,10));; /// h3->Fill(r.Gaus(0,10));; /// }; ///; /// TList *list = new TList;; /// list->Add(h1);; /// list->Add(h2);; /// list->Add(h3);; /// TH1F *h = (TH1F*)h1->Clone(""h"");; /// h->Reset();; /// h->Merge(list);; /// h->Draw();; /// }; /// ~~~",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:909,Availability,down,down,909,"////////////////////////////////////////////////////////////////////////////////; /// Add all histograms in the collection to this histogram.; /// This function computes the min/max for the x axis,; /// compute a new number of bins, if necessary,; /// add bin contents, errors and statistics.; /// If all histograms have bin labels, bins with identical labels; /// will be merged, no matter what their order is.; /// If overflows are present and limits are different the function will fail.; /// The function returns the total number of entries in the result histogram; /// if the merge is successful, -1 otherwise.; ///; /// Possible option:; /// -NOL : the merger will ignore the labels and merge the histograms bin by bin using bin center values to match bins; /// -NOCHECK: the histogram will not perform a check for duplicate labels in case of axes with labels. The check; /// (enabled by default) slows down the merging; ///; /// IMPORTANT remark. The axis x may have different number; /// of bins and different limits, BUT the largest bin width must be; /// a multiple of the smallest bin width and the upper limit must also; /// be a multiple of the bin width.; /// Example:; ///; /// ~~~ {.cpp}; /// void atest() {; /// TH1F *h1 = new TH1F(""h1"",""h1"",110,-110,0);; /// TH1F *h2 = new TH1F(""h2"",""h2"",220,0,110);; /// TH1F *h3 = new TH1F(""h3"",""h3"",330,-55,55);; /// TRandom r;; /// for (Int_t i=0;i<10000;i++) {; /// h1->Fill(r.Gaus(-55,10));; /// h2->Fill(r.Gaus(55,10));; /// h3->Fill(r.Gaus(0,10));; /// }; ///; /// TList *list = new TList;; /// list->Add(h1);; /// list->Add(h2);; /// list->Add(h3);; /// TH1F *h = (TH1F*)h1->Clone(""h"");; /// h->Reset();; /// h->Merge(list);; /// h->Draw();; /// }; /// ~~~",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:801,Performance,perform,perform,801,"////////////////////////////////////////////////////////////////////////////////; /// Add all histograms in the collection to this histogram.; /// This function computes the min/max for the x axis,; /// compute a new number of bins, if necessary,; /// add bin contents, errors and statistics.; /// If all histograms have bin labels, bins with identical labels; /// will be merged, no matter what their order is.; /// If overflows are present and limits are different the function will fail.; /// The function returns the total number of entries in the result histogram; /// if the merge is successful, -1 otherwise.; ///; /// Possible option:; /// -NOL : the merger will ignore the labels and merge the histograms bin by bin using bin center values to match bins; /// -NOCHECK: the histogram will not perform a check for duplicate labels in case of axes with labels. The check; /// (enabled by default) slows down the merging; ///; /// IMPORTANT remark. The axis x may have different number; /// of bins and different limits, BUT the largest bin width must be; /// a multiple of the smallest bin width and the upper limit must also; /// be a multiple of the bin width.; /// Example:; ///; /// ~~~ {.cpp}; /// void atest() {; /// TH1F *h1 = new TH1F(""h1"",""h1"",110,-110,0);; /// TH1F *h2 = new TH1F(""h2"",""h2"",220,0,110);; /// TH1F *h3 = new TH1F(""h3"",""h3"",330,-55,55);; /// TRandom r;; /// for (Int_t i=0;i<10000;i++) {; /// h1->Fill(r.Gaus(-55,10));; /// h2->Fill(r.Gaus(55,10));; /// h3->Fill(r.Gaus(0,10));; /// }; ///; /// TList *list = new TList;; /// list->Add(h1);; /// list->Add(h2);; /// list->Add(h3);; /// TH1F *h = (TH1F*)h1->Clone(""h"");; /// h->Reset();; /// h->Merge(list);; /// h->Draw();; /// }; /// ~~~",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:153,Availability,error,errors,153,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation:; ///; /// `this = this*c1*f1`; ///; /// If errors are defined (see TH1::Sumw2), errors are also recalculated.; ///; /// Only bins inside the function range are recomputed.; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Multiply; ///; /// The function return kFALSE if the Multiply operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:190,Availability,error,errors,190,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation:; ///; /// `this = this*c1*f1`; ///; /// If errors are defined (see TH1::Sumw2), errors are also recalculated.; ///; /// Only bins inside the function range are recomputed.; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Multiply; ///; /// The function return kFALSE if the Multiply operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:328,Availability,error,errors,328,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation:; ///; /// `this = this*c1*f1`; ///; /// If errors are defined (see TH1::Sumw2), errors are also recalculated.; ///; /// Only bins inside the function range are recomputed.; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Multiply; ///; /// The function return kFALSE if the Multiply operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation:; ///; /// `this = this*c1*f1`; ///; /// If errors are defined (see TH1::Sumw2), errors are also recalculated.; ///; /// Only bins inside the function range are recomputed.; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Multiply; ///; /// The function return kFALSE if the Multiply operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:157,Availability,error,errors,157,"////////////////////////////////////////////////////////////////////////////////; /// Multiply this histogram by h1.; ///; /// `this = this*h1`; ///; /// If errors of this are available (TH1::Sumw2), errors are recalculated.; /// Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Multiply; ///; /// The function return kFALSE if the Multiply operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:176,Availability,avail,available,176,"////////////////////////////////////////////////////////////////////////////////; /// Multiply this histogram by h1.; ///; /// `this = this*h1`; ///; /// If errors of this are available (TH1::Sumw2), errors are recalculated.; /// Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Multiply; ///; /// The function return kFALSE if the Multiply operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:200,Availability,error,errors,200,"////////////////////////////////////////////////////////////////////////////////; /// Multiply this histogram by h1.; ///; /// `this = this*h1`; ///; /// If errors of this are available (TH1::Sumw2), errors are recalculated.; /// Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Multiply; ///; /// The function return kFALSE if the Multiply operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:376,Availability,error,errors,376,"////////////////////////////////////////////////////////////////////////////////; /// Multiply this histogram by h1.; ///; /// `this = this*h1`; ///; /// If errors of this are available (TH1::Sumw2), errors are recalculated.; /// Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Multiply; ///; /// The function return kFALSE if the Multiply operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:200,Availability,error,errors,200,"////////////////////////////////////////////////////////////////////////////////; /// Replace contents of this histogram by multiplication of h1 by h2.; ///; /// `this = (c1*h1)*(c2*h2)`; ///; /// If errors of this are available (TH1::Sumw2), errors are recalculated.; /// Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Multiply; ///; /// The function return kFALSE if the Multiply operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:219,Availability,avail,available,219,"////////////////////////////////////////////////////////////////////////////////; /// Replace contents of this histogram by multiplication of h1 by h2.; ///; /// `this = (c1*h1)*(c2*h2)`; ///; /// If errors of this are available (TH1::Sumw2), errors are recalculated.; /// Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Multiply; ///; /// The function return kFALSE if the Multiply operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:243,Availability,error,errors,243,"////////////////////////////////////////////////////////////////////////////////; /// Replace contents of this histogram by multiplication of h1 by h2.; ///; /// `this = (c1*h1)*(c2*h2)`; ///; /// If errors of this are available (TH1::Sumw2), errors are recalculated.; /// Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Multiply; ///; /// The function return kFALSE if the Multiply operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:426,Availability,error,errors,426,"////////////////////////////////////////////////////////////////////////////////; /// Replace contents of this histogram by multiplication of h1 by h2.; ///; /// `this = (c1*h1)*(c2*h2)`; ///; /// If errors of this are available (TH1::Sumw2), errors are recalculated.; /// Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; /// if not already set.; ///; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after TH1::Multiply; ///; /// The function return kFALSE if the Multiply operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:195,Deployability,Update,Update,195,"////////////////////////////////////////////////////////////////////////////////; /// Control routine to paint any kind of histograms.; ///; /// This function is automatically called by TCanvas::Update.; /// (see TH1::Draw for the list of options)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:94,Integrability,rout,routine,94,"////////////////////////////////////////////////////////////////////////////////; /// Control routine to paint any kind of histograms.; ///; /// This function is automatically called by TCanvas::Update.; /// (see TH1::Draw for the list of options)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:592,Availability,error,errors,592,"////////////////////////////////////////////////////////////////////////////////; /// Rebin this histogram; ///; /// #### case 1 xbins=0; ///; /// If newname is blank (default), the current histogram is modified and; /// a pointer to it is returned.; ///; /// If newname is not blank, the current histogram is not modified, and a; /// new histogram is returned which is a Clone of the current histogram; /// with its name set to newname.; ///; /// The parameter ngroup indicates how many bins of this have to be merged; /// into one bin of the result.; ///; /// If the original histogram has errors stored (via Sumw2), the resulting; /// histograms has new errors correctly calculated.; ///; /// examples: if h1 is an existing TH1F histogram with 100 bins; ///; /// ~~~ {.cpp}; /// h1->Rebin(); //merges two bins in one in h1: previous contents of h1 are lost; /// h1->Rebin(5); //merges five bins in one in h1; /// TH1F *hnew = dynamic_cast<TH1F*>(h1->Rebin(5,""hnew"")); // creates a new histogram hnew; /// // merging 5 bins of h1 in one bin; /// ~~~; ///; /// NOTE: If ngroup is not an exact divider of the number of bins,; /// the top limit of the rebinned histogram is reduced; /// to the upper edge of the last bin that can make a complete; /// group. The remaining bins are added to the overflow bin.; /// Statistics will be recomputed from the new bin contents.; ///; /// #### case 2 xbins!=0; ///; /// A new histogram is created (you should specify newname).; /// The parameter ngroup is the number of variable size bins in the created histogram.; /// The array xbins must contain ngroup+1 elements that represent the low-edges; /// of the bins.; /// If the original histogram has errors stored (via Sumw2), the resulting; /// histograms has new errors correctly calculated.; ///; /// NOTE: The bin edges specified in xbins should correspond to bin edges; /// in the original histogram. If a bin edge in the new histogram is; /// in the middle of a bin in the original histogram, all entries i",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:657,Availability,error,errors,657,"////////////////////////////////////////////////////////////////////////////////; /// Rebin this histogram; ///; /// #### case 1 xbins=0; ///; /// If newname is blank (default), the current histogram is modified and; /// a pointer to it is returned.; ///; /// If newname is not blank, the current histogram is not modified, and a; /// new histogram is returned which is a Clone of the current histogram; /// with its name set to newname.; ///; /// The parameter ngroup indicates how many bins of this have to be merged; /// into one bin of the result.; ///; /// If the original histogram has errors stored (via Sumw2), the resulting; /// histograms has new errors correctly calculated.; ///; /// examples: if h1 is an existing TH1F histogram with 100 bins; ///; /// ~~~ {.cpp}; /// h1->Rebin(); //merges two bins in one in h1: previous contents of h1 are lost; /// h1->Rebin(5); //merges five bins in one in h1; /// TH1F *hnew = dynamic_cast<TH1F*>(h1->Rebin(5,""hnew"")); // creates a new histogram hnew; /// // merging 5 bins of h1 in one bin; /// ~~~; ///; /// NOTE: If ngroup is not an exact divider of the number of bins,; /// the top limit of the rebinned histogram is reduced; /// to the upper edge of the last bin that can make a complete; /// group. The remaining bins are added to the overflow bin.; /// Statistics will be recomputed from the new bin contents.; ///; /// #### case 2 xbins!=0; ///; /// A new histogram is created (you should specify newname).; /// The parameter ngroup is the number of variable size bins in the created histogram.; /// The array xbins must contain ngroup+1 elements that represent the low-edges; /// of the bins.; /// If the original histogram has errors stored (via Sumw2), the resulting; /// histograms has new errors correctly calculated.; ///; /// NOTE: The bin edges specified in xbins should correspond to bin edges; /// in the original histogram. If a bin edge in the new histogram is; /// in the middle of a bin in the original histogram, all entries i",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1689,Availability,error,errors,1689,"f this have to be merged; /// into one bin of the result.; ///; /// If the original histogram has errors stored (via Sumw2), the resulting; /// histograms has new errors correctly calculated.; ///; /// examples: if h1 is an existing TH1F histogram with 100 bins; ///; /// ~~~ {.cpp}; /// h1->Rebin(); //merges two bins in one in h1: previous contents of h1 are lost; /// h1->Rebin(5); //merges five bins in one in h1; /// TH1F *hnew = dynamic_cast<TH1F*>(h1->Rebin(5,""hnew"")); // creates a new histogram hnew; /// // merging 5 bins of h1 in one bin; /// ~~~; ///; /// NOTE: If ngroup is not an exact divider of the number of bins,; /// the top limit of the rebinned histogram is reduced; /// to the upper edge of the last bin that can make a complete; /// group. The remaining bins are added to the overflow bin.; /// Statistics will be recomputed from the new bin contents.; ///; /// #### case 2 xbins!=0; ///; /// A new histogram is created (you should specify newname).; /// The parameter ngroup is the number of variable size bins in the created histogram.; /// The array xbins must contain ngroup+1 elements that represent the low-edges; /// of the bins.; /// If the original histogram has errors stored (via Sumw2), the resulting; /// histograms has new errors correctly calculated.; ///; /// NOTE: The bin edges specified in xbins should correspond to bin edges; /// in the original histogram. If a bin edge in the new histogram is; /// in the middle of a bin in the original histogram, all entries in; /// the split bin in the original histogram will be transfered to the; /// lower of the two possible bins in the new histogram. This is; /// probably not what you want. A warning message is emitted in this; /// case; ///; /// examples: if h1 is an existing TH1F histogram with 100 bins; ///; /// ~~~ {.cpp}; /// Double_t xbins[25] = {...} array of low-edges (xbins[25] is the upper edge of last bin; /// h1->Rebin(24,""hnew"",xbins); //creates a new variable bin size histogram hnew; /// ~~~",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1754,Availability,error,errors,1754,"f this have to be merged; /// into one bin of the result.; ///; /// If the original histogram has errors stored (via Sumw2), the resulting; /// histograms has new errors correctly calculated.; ///; /// examples: if h1 is an existing TH1F histogram with 100 bins; ///; /// ~~~ {.cpp}; /// h1->Rebin(); //merges two bins in one in h1: previous contents of h1 are lost; /// h1->Rebin(5); //merges five bins in one in h1; /// TH1F *hnew = dynamic_cast<TH1F*>(h1->Rebin(5,""hnew"")); // creates a new histogram hnew; /// // merging 5 bins of h1 in one bin; /// ~~~; ///; /// NOTE: If ngroup is not an exact divider of the number of bins,; /// the top limit of the rebinned histogram is reduced; /// to the upper edge of the last bin that can make a complete; /// group. The remaining bins are added to the overflow bin.; /// Statistics will be recomputed from the new bin contents.; ///; /// #### case 2 xbins!=0; ///; /// A new histogram is created (you should specify newname).; /// The parameter ngroup is the number of variable size bins in the created histogram.; /// The array xbins must contain ngroup+1 elements that represent the low-edges; /// of the bins.; /// If the original histogram has errors stored (via Sumw2), the resulting; /// histograms has new errors correctly calculated.; ///; /// NOTE: The bin edges specified in xbins should correspond to bin edges; /// in the original histogram. If a bin edge in the new histogram is; /// in the middle of a bin in the original histogram, all entries in; /// the split bin in the original histogram will be transfered to the; /// lower of the two possible bins in the new histogram. This is; /// probably not what you want. A warning message is emitted in this; /// case; ///; /// examples: if h1 is an existing TH1F histogram with 100 bins; ///; /// ~~~ {.cpp}; /// Double_t xbins[25] = {...} array of low-edges (xbins[25] is the upper edge of last bin; /// h1->Rebin(24,""hnew"",xbins); //creates a new variable bin size histogram hnew; /// ~~~",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1173,Energy Efficiency,reduce,reduced,1173,"//////////////////////////////////////////////////////////////////; /// Rebin this histogram; ///; /// #### case 1 xbins=0; ///; /// If newname is blank (default), the current histogram is modified and; /// a pointer to it is returned.; ///; /// If newname is not blank, the current histogram is not modified, and a; /// new histogram is returned which is a Clone of the current histogram; /// with its name set to newname.; ///; /// The parameter ngroup indicates how many bins of this have to be merged; /// into one bin of the result.; ///; /// If the original histogram has errors stored (via Sumw2), the resulting; /// histograms has new errors correctly calculated.; ///; /// examples: if h1 is an existing TH1F histogram with 100 bins; ///; /// ~~~ {.cpp}; /// h1->Rebin(); //merges two bins in one in h1: previous contents of h1 are lost; /// h1->Rebin(5); //merges five bins in one in h1; /// TH1F *hnew = dynamic_cast<TH1F*>(h1->Rebin(5,""hnew"")); // creates a new histogram hnew; /// // merging 5 bins of h1 in one bin; /// ~~~; ///; /// NOTE: If ngroup is not an exact divider of the number of bins,; /// the top limit of the rebinned histogram is reduced; /// to the upper edge of the last bin that can make a complete; /// group. The remaining bins are added to the overflow bin.; /// Statistics will be recomputed from the new bin contents.; ///; /// #### case 2 xbins!=0; ///; /// A new histogram is created (you should specify newname).; /// The parameter ngroup is the number of variable size bins in the created histogram.; /// The array xbins must contain ngroup+1 elements that represent the low-edges; /// of the bins.; /// If the original histogram has errors stored (via Sumw2), the resulting; /// histograms has new errors correctly calculated.; ///; /// NOTE: The bin edges specified in xbins should correspond to bin edges; /// in the original histogram. If a bin edge in the new histogram is; /// in the middle of a bin in the original histogram, all entries in; /// the sp",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:2183,Integrability,message,message,2183,"f this have to be merged; /// into one bin of the result.; ///; /// If the original histogram has errors stored (via Sumw2), the resulting; /// histograms has new errors correctly calculated.; ///; /// examples: if h1 is an existing TH1F histogram with 100 bins; ///; /// ~~~ {.cpp}; /// h1->Rebin(); //merges two bins in one in h1: previous contents of h1 are lost; /// h1->Rebin(5); //merges five bins in one in h1; /// TH1F *hnew = dynamic_cast<TH1F*>(h1->Rebin(5,""hnew"")); // creates a new histogram hnew; /// // merging 5 bins of h1 in one bin; /// ~~~; ///; /// NOTE: If ngroup is not an exact divider of the number of bins,; /// the top limit of the rebinned histogram is reduced; /// to the upper edge of the last bin that can make a complete; /// group. The remaining bins are added to the overflow bin.; /// Statistics will be recomputed from the new bin contents.; ///; /// #### case 2 xbins!=0; ///; /// A new histogram is created (you should specify newname).; /// The parameter ngroup is the number of variable size bins in the created histogram.; /// The array xbins must contain ngroup+1 elements that represent the low-edges; /// of the bins.; /// If the original histogram has errors stored (via Sumw2), the resulting; /// histograms has new errors correctly calculated.; ///; /// NOTE: The bin edges specified in xbins should correspond to bin edges; /// in the original histogram. If a bin edge in the new histogram is; /// in the middle of a bin in the original histogram, all entries in; /// the split bin in the original histogram will be transfered to the; /// lower of the two possible bins in the new histogram. This is; /// probably not what you want. A warning message is emitted in this; /// case; ///; /// examples: if h1 is an existing TH1F histogram with 100 bins; ///; /// ~~~ {.cpp}; /// Double_t xbins[25] = {...} array of low-edges (xbins[25] is the upper edge of last bin; /// h1->Rebin(24,""hnew"",xbins); //creates a new variable bin size histogram hnew; /// ~~~",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1510,Modifiability,variab,variable,1510,"f this have to be merged; /// into one bin of the result.; ///; /// If the original histogram has errors stored (via Sumw2), the resulting; /// histograms has new errors correctly calculated.; ///; /// examples: if h1 is an existing TH1F histogram with 100 bins; ///; /// ~~~ {.cpp}; /// h1->Rebin(); //merges two bins in one in h1: previous contents of h1 are lost; /// h1->Rebin(5); //merges five bins in one in h1; /// TH1F *hnew = dynamic_cast<TH1F*>(h1->Rebin(5,""hnew"")); // creates a new histogram hnew; /// // merging 5 bins of h1 in one bin; /// ~~~; ///; /// NOTE: If ngroup is not an exact divider of the number of bins,; /// the top limit of the rebinned histogram is reduced; /// to the upper edge of the last bin that can make a complete; /// group. The remaining bins are added to the overflow bin.; /// Statistics will be recomputed from the new bin contents.; ///; /// #### case 2 xbins!=0; ///; /// A new histogram is created (you should specify newname).; /// The parameter ngroup is the number of variable size bins in the created histogram.; /// The array xbins must contain ngroup+1 elements that represent the low-edges; /// of the bins.; /// If the original histogram has errors stored (via Sumw2), the resulting; /// histograms has new errors correctly calculated.; ///; /// NOTE: The bin edges specified in xbins should correspond to bin edges; /// in the original histogram. If a bin edge in the new histogram is; /// in the middle of a bin in the original histogram, all entries in; /// the split bin in the original histogram will be transfered to the; /// lower of the two possible bins in the new histogram. This is; /// probably not what you want. A warning message is emitted in this; /// case; ///; /// examples: if h1 is an existing TH1F histogram with 100 bins; ///; /// ~~~ {.cpp}; /// Double_t xbins[25] = {...} array of low-edges (xbins[25] is the upper edge of last bin; /// h1->Rebin(24,""hnew"",xbins); //creates a new variable bin size histogram hnew; /// ~~~",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:2452,Modifiability,variab,variable,2452,"f this have to be merged; /// into one bin of the result.; ///; /// If the original histogram has errors stored (via Sumw2), the resulting; /// histograms has new errors correctly calculated.; ///; /// examples: if h1 is an existing TH1F histogram with 100 bins; ///; /// ~~~ {.cpp}; /// h1->Rebin(); //merges two bins in one in h1: previous contents of h1 are lost; /// h1->Rebin(5); //merges five bins in one in h1; /// TH1F *hnew = dynamic_cast<TH1F*>(h1->Rebin(5,""hnew"")); // creates a new histogram hnew; /// // merging 5 bins of h1 in one bin; /// ~~~; ///; /// NOTE: If ngroup is not an exact divider of the number of bins,; /// the top limit of the rebinned histogram is reduced; /// to the upper edge of the last bin that can make a complete; /// group. The remaining bins are added to the overflow bin.; /// Statistics will be recomputed from the new bin contents.; ///; /// #### case 2 xbins!=0; ///; /// A new histogram is created (you should specify newname).; /// The parameter ngroup is the number of variable size bins in the created histogram.; /// The array xbins must contain ngroup+1 elements that represent the low-edges; /// of the bins.; /// If the original histogram has errors stored (via Sumw2), the resulting; /// histograms has new errors correctly calculated.; ///; /// NOTE: The bin edges specified in xbins should correspond to bin edges; /// in the original histogram. If a bin edge in the new histogram is; /// in the middle of a bin in the original histogram, all entries in; /// the split bin in the original histogram will be transfered to the; /// lower of the two possible bins in the new histogram. This is; /// probably not what you want. A warning message is emitted in this; /// case; ///; /// examples: if h1 is an existing TH1F histogram with 100 bins; ///; /// ~~~ {.cpp}; /// Double_t xbins[25] = {...} array of low-edges (xbins[25] is the upper edge of last bin; /// h1->Rebin(24,""hnew"",xbins); //creates a new variable bin size histogram hnew; /// ~~~",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:49,Modifiability,variab,variable,49,"// in the case that xbins is given (rebinning in variable bins), ngroup is; // the new number of bins and number of grouped bins is not constant.; // when looping for setting the contents for the new histogram we; // need to loop on all bins of original histogram. Then set ngroup=nbins",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:12,Modifiability,extend,extend,12,"//reset can extend bit to avoid an axis extension in SetBinContent",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:26,Safety,avoid,avoid,26,"//reset can extend bit to avoid an axis extension in SetBinContent",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:3,Modifiability,variab,variable,3,"// variable bin sizes",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:20,Availability,error,errors,20,"//this also changes errors array (if any)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:279,Modifiability,variab,variables,279,"////////////////////////////////////////////////////////////////////////////////; /// finds new limits for the axis so that *point* is within the range and; /// the limits are compatible with the previous ones (see TH1::Merge).; /// new limits are put into *newMin* and *newMax* variables.; /// axis - axis whose limits are to be recomputed; /// point - point that should fit within the new axis limits; /// newMin - new minimum will be stored here; /// newMax - new maximum will be stored here.; /// false if failed (e.g. if the initial axis limits are wrong; /// or the new range is more than \f$ 2^{64} \f$ times the old one).",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:449,Availability,error,errors,449,"////////////////////////////////////////////////////////////////////////////////; /// Histogram is resized along axis such that x is in the axis range.; /// The new axis limits are recomputed by doubling iteratively; /// the current axis range until the specified value x is within the limits.; /// The algorithm makes a copy of the histogram, then loops on all bins; /// of the old histogram to fill the extended histogram.; /// Takes into account errors (Sumw2) if any.; /// The algorithm works for 1-d, 2-D and 3-D histograms.; /// The axis must be extendable before invoking this function.; /// Ex:; ///; /// ~~~ {.cpp}; /// h->GetXaxis()->SetCanExtend(kTRUE);; /// ~~~",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:405,Modifiability,extend,extended,405,"////////////////////////////////////////////////////////////////////////////////; /// Histogram is resized along axis such that x is in the axis range.; /// The new axis limits are recomputed by doubling iteratively; /// the current axis range until the specified value x is within the limits.; /// The algorithm makes a copy of the histogram, then loops on all bins; /// of the old histogram to fill the extended histogram.; /// Takes into account errors (Sumw2) if any.; /// The algorithm works for 1-d, 2-D and 3-D histograms.; /// The axis must be extendable before invoking this function.; /// Ex:; ///; /// ~~~ {.cpp}; /// h->GetXaxis()->SetCanExtend(kTRUE);; /// ~~~",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:552,Modifiability,extend,extendable,552,"////////////////////////////////////////////////////////////////////////////////; /// Histogram is resized along axis such that x is in the axis range.; /// The new axis limits are recomputed by doubling iteratively; /// the current axis range until the specified value x is within the limits.; /// The algorithm makes a copy of the histogram, then loops on all bins; /// of the old histogram to fill the extended histogram.; /// Takes into account errors (Sumw2) if any.; /// The algorithm works for 1-d, 2-D and 3-D histograms.; /// The axis must be extendable before invoking this function.; /// Ex:; ///; /// ~~~ {.cpp}; /// h->GetXaxis()->SetCanExtend(kTRUE);; /// ~~~",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:36,Availability,Error,Errors,36,"//reset only Integral, contents and Errors",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:193,Availability,error,errors,193,"////////////////////////////////////////////////////////////////////////////////; /// Multiply this histogram by a constant c1.; ///; /// `this = c1*this`; ///; /// Note that both contents and errors (if any) are scaled.; /// This function uses the services of TH1::Add; ///; /// IMPORTANT NOTE: Sumw2() is called automatically when scaling.; /// If you are not interested in the histogram statistics you can call; /// Sumw2(kFALSE) or use the option ""nosw2""; ///; /// One can scale a histogram such that the bins integral is equal to; /// the normalization parameter via TH1::Scale(Double_t norm), where norm; /// is the desired normalization divided by the integral of the histogram.; ///; /// If option contains ""width"" the bin contents and errors are divided; /// by the bin width.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:744,Availability,error,errors,744,"////////////////////////////////////////////////////////////////////////////////; /// Multiply this histogram by a constant c1.; ///; /// `this = c1*this`; ///; /// Note that both contents and errors (if any) are scaled.; /// This function uses the services of TH1::Add; ///; /// IMPORTANT NOTE: Sumw2() is called automatically when scaling.; /// If you are not interested in the histogram statistics you can call; /// Sumw2(kFALSE) or use the option ""nosw2""; ///; /// One can scale a histogram such that the bins integral is equal to; /// the normalization parameter via TH1::Scale(Double_t norm), where norm; /// is the desired normalization divided by the integral of the histogram.; ///; /// If option contains ""width"" the bin contents and errors are divided; /// by the bin width.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:13,Availability,error,errors,13,"// store bin errors when scaling since cannot anymore be computed as sqrt(N)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:10,Availability,error,errors,10,"// update errors; // update global histograms statistics",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:3,Deployability,update,update,3,"// update errors; // update global histograms statistics",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:21,Deployability,update,update,21,"// update errors; // update global histograms statistics",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:115,Modifiability,extend,extendable,115,"////////////////////////////////////////////////////////////////////////////////; /// Returns true if all axes are extendable.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:159,Availability,mask,mask,159,"////////////////////////////////////////////////////////////////////////////////; /// Make the histogram axes extendable / not extendable according to the bit mask; /// returns the previous bit mask specifying which axes are extendable",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:194,Availability,mask,mask,194,"////////////////////////////////////////////////////////////////////////////////; /// Make the histogram axes extendable / not extendable according to the bit mask; /// returns the previous bit mask specifying which axes are extendable",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:110,Modifiability,extend,extendable,110,"////////////////////////////////////////////////////////////////////////////////; /// Make the histogram axes extendable / not extendable according to the bit mask; /// returns the previous bit mask specifying which axes are extendable",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:127,Modifiability,extend,extendable,127,"////////////////////////////////////////////////////////////////////////////////; /// Make the histogram axes extendable / not extendable according to the bit mask; /// returns the previous bit mask specifying which axes are extendable",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:225,Modifiability,extend,extendable,225,"////////////////////////////////////////////////////////////////////////////////; /// Make the histogram axes extendable / not extendable according to the bit mask; /// returns the previous bit mask specifying which axes are extendable",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:178,Modifiability,extend,extended,178,"///////////////////////////////////////////////////////////////////////////////; /// Internal function used in TH1::Fill to see which axis is full alphanumeric,; /// i.e. can be extended and is alphanumeric",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:236,Availability,error,errors,236,"////////////////////////////////////////////////////////////////////////////////; /// When this static function is called with `sumw2=kTRUE`, all new; /// histograms will automatically activate the storage; /// of the sum of squares of errors, ie TH1::Sumw2 is automatically called.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:399,Energy Efficiency,Energy,Energy,399,"////////////////////////////////////////////////////////////////////////////////; /// Smooth array xx, translation of Hbook routine `hsmoof.F`.; /// Based on algorithm 353QH twice presented by J. Friedman; /// in [Proc. of the 1974 CERN School of Computing, Norway, 11-24 August, 1974](https://cds.cern.ch/record/186223).; /// See also Section 4.2 in [J. Friedman, Data Analysis Techniques for High Energy Physics](https://www.slac.stanford.edu/pubs/slacreports/reports16/slac-r-176.pdf).",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:124,Integrability,rout,routine,124,"////////////////////////////////////////////////////////////////////////////////; /// Smooth array xx, translation of Hbook routine `hsmoof.F`.; /// Based on algorithm 353QH twice presented by J. Friedman; /// in [Proc. of the 1974 CERN School of Computing, Norway, 11-24 August, 1974](https://cds.cern.ch/record/186223).; /// See also Section 4.2 in [J. Friedman, Data Analysis Techniques for High Energy Physics](https://www.slac.stanford.edu/pubs/slacreports/reports16/slac-r-176.pdf).",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:316,Availability,Error,Errors,316,"////////////////////////////////////////////////////////////////////////////////; /// Smooth bin contents of this histogram.; /// if option contains ""R"" smoothing is applied only to the bins; /// defined in the X axis range (default is to smooth all bins); /// Bin contents are replaced by their smooth values.; /// Errors (if any) are not modified.; /// the smoothing procedure is repeated ntimes (default=1)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:267,Availability,error,errors,267,"////////////////////////////////////////////////////////////////////////////////; /// Print some global quantities for this histogram.; /// \param[in] option; /// - ""base"" is given, number of bins and ranges are also printed; /// - ""range"" is given, bin contents and errors are also printed; /// for all bins in the current range (default 1-->nbins); /// - ""all"" is given, bin contents and errors are also printed; /// for all bins including under and overflows.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:390,Availability,error,errors,390,"////////////////////////////////////////////////////////////////////////////////; /// Print some global quantities for this histogram.; /// \param[in] option; /// - ""base"" is given, number of bins and ranges are also printed; /// - ""range"" is given, bin contents and errors are also printed; /// for all bins in the current range (default 1-->nbins); /// - ""all"" is given, bin contents and errors are also printed; /// for all bins including under and overflows.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:152,Availability,error,errors,152,"////////////////////////////////////////////////////////////////////////////////; /// Using the current bin info, recompute the arrays for contents and errors",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:118,Availability,error,errors,118,"////////////////////////////////////////////////////////////////////////////////; /// Reset this histogram: contents, errors, etc.; /// \param[in] option; /// - if ""ICE"" is specified, resets only Integral, Contents and Errors.; /// - if ""ICES"" is specified, resets only Integral, Contents, Errors and Statistics; /// This option is used; /// - if ""M"" is specified, resets also Minimum and Maximum",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:219,Availability,Error,Errors,219,"////////////////////////////////////////////////////////////////////////////////; /// Reset this histogram: contents, errors, etc.; /// \param[in] option; /// - if ""ICE"" is specified, resets only Integral, Contents and Errors.; /// - if ""ICES"" is specified, resets only Integral, Contents, Errors and Statistics; /// This option is used; /// - if ""M"" is specified, resets also Minimum and Maximum",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:290,Availability,Error,Errors,290,"////////////////////////////////////////////////////////////////////////////////; /// Reset this histogram: contents, errors, etc.; /// \param[in] option; /// - if ""ICE"" is specified, resets only Integral, Contents and Errors.; /// - if ""ICES"" is specified, resets only Integral, Contents, Errors and Statistics; /// This option is used; /// - if ""M"" is specified, resets also Minimum and Maximum",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:33,Modifiability,extend,extending,33,"// The option ""ICE"" is used when extending the histogram (in ExtendAxis, LabelInflate, etc..); // The option ""ICES is used in combination with the buffer (see BufferEmpty and BufferFill)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:61,Modifiability,Extend,ExtendAxis,61,"// The option ""ICE"" is used when extending the histogram (in ExtendAxis, LabelInflate, etc..); // The option ""ICES is used in combination with the buffer (see BufferEmpty and BufferFill)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:171,Deployability,update,update,171,"// Setting fBuffer[0] = 0 is like resetting the buffer but not deleting it; // But what is the sense of calling BufferEmpty() ? For making the axes ?; // BufferEmpty will update contents that later will be; // reset in calling TH1D::Reset. For this we need to reset the stats afterwards; // It may be needed for computing the axis limits....",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:10,Testability,log,logic,10,"//special logic to support the case where the same object is; //added multiple times in fFunctions.; //This case happens when the same object is added with different; //drawing modes",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:501,Availability,error,error,501,"////////////////////////////////////////////////////////////////////////////////; /// Save the histogram as .csv, .tsv or .txt. In case of any other extension, fall; /// back to TObject::SaveAs, which saves as a .C macro (but with the file name; /// extension specified by the user); ///; /// The Under/Overflow bins are also exported (as first and last lines); /// The fist 2 columns are the lower and upper edges of the bins; /// Column 3 contains the bin contents; /// The last column contains the error in y. If errors are not present, the column; /// is left empty; ///; /// The result can be immediately imported into Excel, gnuplot, Python or whatever,; /// without the needing to install pyroot, etc.; ///; /// \param filename the name of the file where to store the histogram; /// \param option some tuning options; ///; /// The file extension defines the delimiter used:; /// - `.csv` : comma; /// - `.tsv` : tab; /// - `.txt` : space; ///; /// If option = ""title"" a title line is generated. If the y-axis has a title,; /// this title is displayed as column 3 name, otherwise, it shows ""BinContent""",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:516,Availability,error,errors,516,"////////////////////////////////////////////////////////////////////////////////; /// Save the histogram as .csv, .tsv or .txt. In case of any other extension, fall; /// back to TObject::SaveAs, which saves as a .C macro (but with the file name; /// extension specified by the user); ///; /// The Under/Overflow bins are also exported (as first and last lines); /// The fist 2 columns are the lower and upper edges of the bins; /// Column 3 contains the bin contents; /// The last column contains the error in y. If errors are not present, the column; /// is left empty; ///; /// The result can be immediately imported into Excel, gnuplot, Python or whatever,; /// without the needing to install pyroot, etc.; ///; /// \param filename the name of the file where to store the histogram; /// \param option some tuning options; ///; /// The file extension defines the delimiter used:; /// - `.csv` : comma; /// - `.tsv` : tab; /// - `.txt` : space; ///; /// If option = ""title"" a title line is generated. If the y-axis has a title,; /// this title is displayed as column 3 name, otherwise, it shows ""BinContent""",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:688,Deployability,install,install,688,"////////////////////////////////////////////////////////////////////////////////; /// Save the histogram as .csv, .tsv or .txt. In case of any other extension, fall; /// back to TObject::SaveAs, which saves as a .C macro (but with the file name; /// extension specified by the user); ///; /// The Under/Overflow bins are also exported (as first and last lines); /// The fist 2 columns are the lower and upper edges of the bins; /// Column 3 contains the bin contents; /// The last column contains the error in y. If errors are not present, the column; /// is left empty; ///; /// The result can be immediately imported into Excel, gnuplot, Python or whatever,; /// without the needing to install pyroot, etc.; ///; /// \param filename the name of the file where to store the histogram; /// \param option some tuning options; ///; /// The file extension defines the delimiter used:; /// - `.csv` : comma; /// - `.tsv` : tab; /// - `.txt` : space; ///; /// If option = ""title"" a title line is generated. If the y-axis has a title,; /// this title is displayed as column 3 name, otherwise, it shows ""BinContent""",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:12,Availability,error,errors,12,"// save bin errors",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:225,Availability,error,error,225,"////////////////////////////////////////////////////////////////////////////////; /// For axis = 1,2 or 3 returns the mean value of the histogram along; /// X,Y or Z axis.; ///; /// For axis = 11, 12, 13 returns the standard error of the mean value; /// of the histogram along X, Y or Z axis; ///; /// Note that the mean value/StdDev is computed using the bins in the currently; /// defined range (see TAxis::SetRange). By default the range includes; /// all bins from 1 to nbins included, excluding underflows and overflows.; /// To force the underflows and overflows in the computation, one must; /// call the static function TH1::StatOverflows(kTRUE) before filling; /// the histogram.; ///; /// IMPORTANT NOTE: The returned value depends on how the histogram statistics; /// are calculated. By default, if no range has been set, the returned mean is; /// the (unbinned) one calculated at fill time. If a range has been set, however,; /// the mean is calculated using the bins in range, as described above; THIS; /// IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS--use TAxis::SetRange(0, 0) to unset; /// the range. To ensure that the returned mean (and all other statistics) is; /// always that of the binned data stored in the histogram, call TH1::ResetStats.; /// See TH1::GetStats.; ///; /// Return mean value of this histogram along the X axis.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:734,Integrability,depend,depends,734,"////////////////////////////////////////////////////////////////////////////////; /// For axis = 1,2 or 3 returns the mean value of the histogram along; /// X,Y or Z axis.; ///; /// For axis = 11, 12, 13 returns the standard error of the mean value; /// of the histogram along X, Y or Z axis; ///; /// Note that the mean value/StdDev is computed using the bins in the currently; /// defined range (see TAxis::SetRange). By default the range includes; /// all bins from 1 to nbins included, excluding underflows and overflows.; /// To force the underflows and overflows in the computation, one must; /// call the static function TH1::StatOverflows(kTRUE) before filling; /// the histogram.; ///; /// IMPORTANT NOTE: The returned value depends on how the histogram statistics; /// are calculated. By default, if no range has been set, the returned mean is; /// the (unbinned) one calculated at fill time. If a range has been set, however,; /// the mean is calculated using the bins in range, as described above; THIS; /// IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS--use TAxis::SetRange(0, 0) to unset; /// the range. To ensure that the returned mean (and all other statistics) is; /// always that of the binned data stored in the histogram, call TH1::ResetStats.; /// See TH1::GetStats.; ///; /// Return mean value of this histogram along the X axis.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:8,Availability,error,error,8,"// mean error = StdDev / sqrt( Neff )",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:102,Availability,error,error,102,"////////////////////////////////////////////////////////////////////////////////; /// Return standard error of mean of this histogram along the X axis.; ///; /// Note that the mean value/StdDev is computed using the bins in the currently; /// defined range (see TAxis::SetRange). By default the range includes; /// all bins from 1 to nbins included, excluding underflows and overflows.; /// To force the underflows and overflows in the computation, one must; /// call the static function TH1::StatOverflows(kTRUE) before filling; /// the histogram.; ///; /// Also note, that although the definition of standard error doesn't include the; /// assumption of normality, many uses of this feature implicitly assume it.; ///; /// IMPORTANT NOTE: The returned value depends on how the histogram statistics; /// are calculated. By default, if no range has been set, the returned value is; /// the (unbinned) one calculated at fill time. If a range has been set, however,; /// the value is calculated using the bins in range, as described above; THIS; /// IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS--use TAxis::SetRange(0, 0) to unset; /// the range. To ensure that the returned value (and all other statistics) is; /// always that of the binned data stored in the histogram, call TH1::ResetStats.; /// See TH1::GetStats.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:611,Availability,error,error,611,"////////////////////////////////////////////////////////////////////////////////; /// Return standard error of mean of this histogram along the X axis.; ///; /// Note that the mean value/StdDev is computed using the bins in the currently; /// defined range (see TAxis::SetRange). By default the range includes; /// all bins from 1 to nbins included, excluding underflows and overflows.; /// To force the underflows and overflows in the computation, one must; /// call the static function TH1::StatOverflows(kTRUE) before filling; /// the histogram.; ///; /// Also note, that although the definition of standard error doesn't include the; /// assumption of normality, many uses of this feature implicitly assume it.; ///; /// IMPORTANT NOTE: The returned value depends on how the histogram statistics; /// are calculated. By default, if no range has been set, the returned value is; /// the (unbinned) one calculated at fill time. If a range has been set, however,; /// the value is calculated using the bins in range, as described above; THIS; /// IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS--use TAxis::SetRange(0, 0) to unset; /// the range. To ensure that the returned value (and all other statistics) is; /// always that of the binned data stored in the histogram, call TH1::ResetStats.; /// See TH1::GetStats.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:760,Integrability,depend,depends,760,"////////////////////////////////////////////////////////////////////////////////; /// Return standard error of mean of this histogram along the X axis.; ///; /// Note that the mean value/StdDev is computed using the bins in the currently; /// defined range (see TAxis::SetRange). By default the range includes; /// all bins from 1 to nbins included, excluding underflows and overflows.; /// To force the underflows and overflows in the computation, one must; /// call the static function TH1::StatOverflows(kTRUE) before filling; /// the histogram.; ///; /// Also note, that although the definition of standard error doesn't include the; /// assumption of normality, many uses of this feature implicitly assume it.; ///; /// IMPORTANT NOTE: The returned value depends on how the histogram statistics; /// are calculated. By default, if no range has been set, the returned value is; /// the (unbinned) one calculated at fill time. If a range has been set, however,; /// the value is calculated using the bins in range, as described above; THIS; /// IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS--use TAxis::SetRange(0, 0) to unset; /// the range. To ensure that the returned value (and all other statistics) is; /// always that of the binned data stored in the histogram, call TH1::ResetStats.; /// See TH1::GetStats.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:362,Availability,error,error,362,"////////////////////////////////////////////////////////////////////////////////; /// Returns the Standard Deviation (Sigma).; /// The Sigma estimate is computed as; /// \f[; /// \sqrt{\frac{1}{N}(\sum(x_i-x_{mean})^2)}; /// \f]; /// For axis = 1,2 or 3 returns the Sigma value of the histogram along; /// X, Y or Z axis; /// For axis = 11, 12 or 13 returns the error of StdDev estimation along; /// X, Y or Z axis for Normal distribution; ///; /// Note that the mean value/sigma is computed using the bins in the currently; /// defined range (see TAxis::SetRange). By default the range includes; /// all bins from 1 to nbins included, excluding underflows and overflows.; /// To force the underflows and overflows in the computation, one must; /// call the static function TH1::StatOverflows(kTRUE) before filling; /// the histogram.; ///; /// IMPORTANT NOTE: The returned value depends on how the histogram statistics; /// are calculated. By default, if no range has been set, the returned standard; /// deviation is the (unbinned) one calculated at fill time. If a range has been; /// set, however, the standard deviation is calculated using the bins in range,; /// as described above; THIS IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS--use; /// TAxis::SetRange(0, 0) to unset the range. To ensure that the returned standard; /// deviation (and all other statistics) is always that of the binned data stored; /// in the histogram, call TH1::ResetStats. See TH1::GetStats.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:880,Integrability,depend,depends,880,"////////////////////////////////////////////////////////////////////////////////; /// Returns the Standard Deviation (Sigma).; /// The Sigma estimate is computed as; /// \f[; /// \sqrt{\frac{1}{N}(\sum(x_i-x_{mean})^2)}; /// \f]; /// For axis = 1,2 or 3 returns the Sigma value of the histogram along; /// X, Y or Z axis; /// For axis = 11, 12 or 13 returns the error of StdDev estimation along; /// X, Y or Z axis for Normal distribution; ///; /// Note that the mean value/sigma is computed using the bins in the currently; /// defined range (see TAxis::SetRange). By default the range includes; /// all bins from 1 to nbins included, excluding underflows and overflows.; /// To force the underflows and overflows in the computation, one must; /// call the static function TH1::StatOverflows(kTRUE) before filling; /// the histogram.; ///; /// IMPORTANT NOTE: The returned value depends on how the histogram statistics; /// are calculated. By default, if no range has been set, the returned standard; /// deviation is the (unbinned) one calculated at fill time. If a range has been; /// set, however, the standard deviation is calculated using the bins in range,; /// as described above; THIS IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS--use; /// TAxis::SetRange(0, 0) to unset the range. To ensure that the returned standard; /// deviation (and all other statistics) is always that of the binned data stored; /// in the histogram, call TH1::ResetStats. See TH1::GetStats.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:32,Availability,error,error,32,"// The right formula for StdDev error depends on 4th momentum (see Kendall-Stuart Vol 1 pag 243); // formula valid for only gaussian distribution ( 4-th momentum = 3 * sigma^4 )",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:38,Integrability,depend,depends,38,"// The right formula for StdDev error depends on 4th momentum (see Kendall-Stuart Vol 1 pag 243); // formula valid for only gaussian distribution ( 4-th momentum = 3 * sigma^4 )",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:93,Availability,error,error,93,"////////////////////////////////////////////////////////////////////////////////; /// Return error of standard deviation estimation for Normal distribution; ///; /// Note that the mean value/StdDev is computed using the bins in the currently; /// defined range (see TAxis::SetRange). By default the range includes; /// all bins from 1 to nbins included, excluding underflows and overflows.; /// To force the underflows and overflows in the computation, one must; /// call the static function TH1::StatOverflows(kTRUE) before filling; /// the histogram.; ///; /// Value returned is standard deviation of sample standard deviation.; /// Note that it is an approximated value which is valid only in the case that the; /// original data distribution is Normal. The correct one would require; /// the 4-th momentum value, which cannot be accurately estimated from a histogram since; /// the x-information for all entries is not kept.; ///; /// IMPORTANT NOTE: The returned value depends on how the histogram statistics; /// are calculated. By default, if no range has been set, the returned value is; /// the (unbinned) one calculated at fill time. If a range has been set, however,; /// the value is calculated using the bins in range, as described above; THIS; /// IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS--use TAxis::SetRange(0, 0) to unset; /// the range. To ensure that the returned value (and all other statistics) is; /// always that of the binned data stored in the histogram, call TH1::ResetStats.; /// See TH1::GetStats.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:974,Integrability,depend,depends,974,"////////////////////////////////////////////////////////////////////////////////; /// Return error of standard deviation estimation for Normal distribution; ///; /// Note that the mean value/StdDev is computed using the bins in the currently; /// defined range (see TAxis::SetRange). By default the range includes; /// all bins from 1 to nbins included, excluding underflows and overflows.; /// To force the underflows and overflows in the computation, one must; /// call the static function TH1::StatOverflows(kTRUE) before filling; /// the histogram.; ///; /// Value returned is standard deviation of sample standard deviation.; /// Note that it is an approximated value which is valid only in the case that the; /// original data distribution is Normal. The correct one would require; /// the 4-th momentum value, which cannot be accurately estimated from a histogram since; /// the x-information for all entries is not kept.; ///; /// IMPORTANT NOTE: The returned value depends on how the histogram statistics; /// are calculated. By default, if no range has been set, the returned value is; /// the (unbinned) one calculated at fill time. If a range has been set, however,; /// the value is calculated using the bins in range, as described above; THIS; /// IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS--use TAxis::SetRange(0, 0) to unset; /// the range. To ensure that the returned value (and all other statistics) is; /// always that of the binned data stored in the histogram, call TH1::ResetStats.; /// See TH1::GetStats.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:229,Availability,error,error,229,"////////////////////////////////////////////////////////////////////////////////; /// - For axis = 1, 2 or 3 returns skewness of the histogram along x, y or z axis.; /// - For axis = 11, 12 or 13 returns the approximate standard error of skewness; /// of the histogram along x, y or z axis; ///; ///Note, that since third and fourth moment are not calculated; ///at the fill time, skewness and its standard error are computed bin by bin; ///; /// IMPORTANT NOTE: The returned value depends on how the histogram statistics; /// are calculated. See TH1::GetMean and TH1::GetStdDev.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:407,Availability,error,error,407,"////////////////////////////////////////////////////////////////////////////////; /// - For axis = 1, 2 or 3 returns skewness of the histogram along x, y or z axis.; /// - For axis = 11, 12 or 13 returns the approximate standard error of skewness; /// of the histogram along x, y or z axis; ///; ///Note, that since third and fourth moment are not calculated; ///at the fill time, skewness and its standard error are computed bin by bin; ///; /// IMPORTANT NOTE: The returned value depends on how the histogram statistics; /// are calculated. See TH1::GetMean and TH1::GetStdDev.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:482,Integrability,depend,depends,482,"////////////////////////////////////////////////////////////////////////////////; /// - For axis = 1, 2 or 3 returns skewness of the histogram along x, y or z axis.; /// - For axis = 11, 12 or 13 returns the approximate standard error of skewness; /// of the histogram along x, y or z axis; ///; ///Note, that since third and fourth moment are not calculated; ///at the fill time, skewness and its standard error are computed bin by bin; ///; /// IMPORTANT NOTE: The returned value depends on how the histogram statistics; /// are calculated. See TH1::GetMean and TH1::GetStdDev.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:19,Availability,error,error,19,"//compute standard error of skewness; // assume parent normal distribution use formula from Kendall-Stuart, Vol 1 pag 243, second edition",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:262,Availability,error,error,262,"////////////////////////////////////////////////////////////////////////////////; /// - For axis =1, 2 or 3 returns kurtosis of the histogram along x, y or z axis.; /// Kurtosis(gaussian(0, 1)) = 0.; /// - For axis =11, 12 or 13 returns the approximate standard error of kurtosis; /// of the histogram along x, y or z axis; ////; /// Note, that since third and fourth moment are not calculated; /// at the fill time, kurtosis and its standard error are computed bin by bin; ///; /// IMPORTANT NOTE: The returned value depends on how the histogram statistics; /// are calculated. See TH1::GetMean and TH1::GetStdDev.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:443,Availability,error,error,443,"////////////////////////////////////////////////////////////////////////////////; /// - For axis =1, 2 or 3 returns kurtosis of the histogram along x, y or z axis.; /// Kurtosis(gaussian(0, 1)) = 0.; /// - For axis =11, 12 or 13 returns the approximate standard error of kurtosis; /// of the histogram along x, y or z axis; ////; /// Note, that since third and fourth moment are not calculated; /// at the fill time, kurtosis and its standard error are computed bin by bin; ///; /// IMPORTANT NOTE: The returned value depends on how the histogram statistics; /// are calculated. See TH1::GetMean and TH1::GetStdDev.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:518,Integrability,depend,depends,518,"////////////////////////////////////////////////////////////////////////////////; /// - For axis =1, 2 or 3 returns kurtosis of the histogram along x, y or z axis.; /// Kurtosis(gaussian(0, 1)) = 0.; /// - For axis =11, 12 or 13 returns the approximate standard error of kurtosis; /// of the histogram along x, y or z axis; ////; /// Note, that since third and fourth moment are not calculated; /// at the fill time, kurtosis and its standard error are computed bin by bin; ///; /// IMPORTANT NOTE: The returned value depends on how the histogram statistics; /// are calculated. See TH1::GetMean and TH1::GetStdDev.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:19,Availability,error,error,19,"//compute standard error of skewness; // assume parent normal distribution use formula from Kendall-Stuart, Vol 1 pag 243, second edition",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:702,Integrability,depend,dependent,702,"////////////////////////////////////////////////////////////////////////////////; /// fill the array stats from the contents of this histogram; /// The array stats must be correctly dimensioned in the calling program.; ///; /// ~~~ {.cpp}; /// stats[0] = sumw; /// stats[1] = sumw2; /// stats[2] = sumwx; /// stats[3] = sumwx2; /// ~~~; ///; /// If no axis-subrange is specified (via TAxis::SetRange), the array stats; /// is simply a copy of the statistics quantities computed at filling time.; /// If a sub-range is specified, the function recomputes these quantities; /// from the bin contents in the current axis range.; ///; /// IMPORTANT NOTE: This means that the returned statistics are context-dependent.; /// If TAxis::kAxisRange, the returned statistics are dependent on the binning;; /// otherwise, they are a copy of the histogram statistics computed at fill time,; /// which are unbinned by default (calling TH1::ResetStats forces them to use; /// binned statistics). You can reset TAxis::kAxisRange using TAxis::SetRange(0, 0).; ///; /// Note that the mean value/StdDev is computed using the bins in the currently; /// defined range (see TAxis::SetRange). By default the range includes; /// all bins from 1 to nbins included, excluding underflows and overflows.; /// To force the underflows and overflows in the computation, one must; /// call the static function TH1::StatOverflows(kTRUE) before filling; /// the histogram.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:768,Integrability,depend,dependent,768,"////////////////////////////////////////////////////////////////////////////////; /// fill the array stats from the contents of this histogram; /// The array stats must be correctly dimensioned in the calling program.; ///; /// ~~~ {.cpp}; /// stats[0] = sumw; /// stats[1] = sumw2; /// stats[2] = sumwx; /// stats[3] = sumwx2; /// ~~~; ///; /// If no axis-subrange is specified (via TAxis::SetRange), the array stats; /// is simply a copy of the statistics quantities computed at filling time.; /// If a sub-range is specified, the function recomputes these quantities; /// from the bin contents in the current axis range.; ///; /// IMPORTANT NOTE: This means that the returned statistics are context-dependent.; /// If TAxis::kAxisRange, the returned statistics are dependent on the binning;; /// otherwise, they are a copy of the histogram statistics computed at fill time,; /// which are unbinned by default (calling TH1::ResetStats forces them to use; /// binned statistics). You can reset TAxis::kAxisRange using TAxis::SetRange(0, 0).; ///; /// Note that the mean value/StdDev is computed using the bins in the currently; /// defined range (see TAxis::SetRange). By default the range includes; /// all bins from 1 to nbins included, excluding underflows and overflows.; /// To force the underflows and overflows in the computation, one must; /// call the static function TH1::StatOverflows(kTRUE) before filling; /// the histogram.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:426,Usability,simpl,simply,426,"////////////////////////////////////////////////////////////////////////////////; /// fill the array stats from the contents of this histogram; /// The array stats must be correctly dimensioned in the calling program.; ///; /// ~~~ {.cpp}; /// stats[0] = sumw; /// stats[1] = sumw2; /// stats[2] = sumwx; /// stats[3] = sumwx2; /// ~~~; ///; /// If no axis-subrange is specified (via TAxis::SetRange), the array stats; /// is simply a copy of the statistics quantities computed at filling time.; /// If a sub-range is specified, the function recomputes these quantities; /// from the bin contents in the current axis range.; ///; /// IMPORTANT NOTE: This means that the returned statistics are context-dependent.; /// If TAxis::kAxisRange, the returned statistics are dependent on the binning;; /// otherwise, they are a copy of the histogram statistics computed at fill time,; /// which are unbinned by default (calling TH1::ResetStats forces them to use; /// binned statistics). You can reset TAxis::kAxisRange using TAxis::SetRange(0, 0).; ///; /// Note that the mean value/StdDev is computed using the bins in the currently; /// defined range (see TAxis::SetRange). By default the range includes; /// all bins from 1 to nbins included, excluding underflows and overflows.; /// To force the underflows and overflows in the computation, one must; /// call the static function TH1::StatOverflows(kTRUE) before filling; /// the histogram.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:149,Availability,error,error,149,"////////////////////////////////////////////////////////////////////////////////; /// Return integral of bin contents in range [binx1,binx2] and its error.; ///; /// By default the integral is computed as the sum of bin contents in the range.; /// if option ""width"" is specified, the integral is the sum of; /// the bin contents multiplied by the bin width in x.; /// the error is computed using error propagation from the bin errors assuming that; /// all the bins are uncorrelated",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:372,Availability,error,error,372,"////////////////////////////////////////////////////////////////////////////////; /// Return integral of bin contents in range [binx1,binx2] and its error.; ///; /// By default the integral is computed as the sum of bin contents in the range.; /// if option ""width"" is specified, the integral is the sum of; /// the bin contents multiplied by the bin width in x.; /// the error is computed using error propagation from the bin errors assuming that; /// all the bins are uncorrelated",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:396,Availability,error,error,396,"////////////////////////////////////////////////////////////////////////////////; /// Return integral of bin contents in range [binx1,binx2] and its error.; ///; /// By default the integral is computed as the sum of bin contents in the range.; /// if option ""width"" is specified, the integral is the sum of; /// the bin contents multiplied by the bin width in x.; /// the error is computed using error propagation from the bin errors assuming that; /// all the bins are uncorrelated",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:427,Availability,error,errors,427,"////////////////////////////////////////////////////////////////////////////////; /// Return integral of bin contents in range [binx1,binx2] and its error.; ///; /// By default the integral is computed as the sum of bin contents in the range.; /// if option ""width"" is specified, the integral is the sum of; /// the bin contents multiplied by the bin width in x.; /// the error is computed using error propagation from the bin errors assuming that; /// all the bins are uncorrelated",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:140,Availability,error,error,140,"////////////////////////////////////////////////////////////////////////////////; /// Internal function compute integral and optionally the error between the limits; /// specified by the bin number values working for all histograms (1D, 2D and 3D)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:98,Testability,test,test,98,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// this histogram and h2, using the Anderson-Darling 2 sample test.; ///; /// The AD 2 sample test formula are derived from the paper; /// F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; ///; /// The test is implemented in root in the ROOT::Math::GoFTest class; /// It is the same formula ( (6) in the paper), and also shown in; /// [this preprint](http://arxiv.org/pdf/0804.0380v1.pdf); ///; /// Binned data are considered as un-binned data; /// with identical observation happening in the bin center.; ///; /// \param[in] h2 Pointer to 1D histogram; /// \param[in] option is a character string to specify options; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""T"" Return the normalized A-D test statistic; ///; /// - Note1: Underflow and overflow are not considered in the test; /// - Note2: The test works only for un-weighted histogram (i.e. representing counts); /// - Note3: The histograms are not required to have the same X axis; /// - Note4: The test works only for 1-dimensional histograms",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:201,Testability,test,test,201,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// this histogram and h2, using the Anderson-Darling 2 sample test.; ///; /// The AD 2 sample test formula are derived from the paper; /// F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; ///; /// The test is implemented in root in the ROOT::Math::GoFTest class; /// It is the same formula ( (6) in the paper), and also shown in; /// [this preprint](http://arxiv.org/pdf/0804.0380v1.pdf); ///; /// Binned data are considered as un-binned data; /// with identical observation happening in the bin center.; ///; /// \param[in] h2 Pointer to 1D histogram; /// \param[in] option is a character string to specify options; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""T"" Return the normalized A-D test statistic; ///; /// - Note1: Underflow and overflow are not considered in the test; /// - Note2: The test works only for un-weighted histogram (i.e. representing counts); /// - Note3: The histograms are not required to have the same X axis; /// - Note4: The test works only for 1-dimensional histograms",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:233,Testability,test,test,233,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// this histogram and h2, using the Anderson-Darling 2 sample test.; ///; /// The AD 2 sample test formula are derived from the paper; /// F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; ///; /// The test is implemented in root in the ROOT::Math::GoFTest class; /// It is the same formula ( (6) in the paper), and also shown in; /// [this preprint](http://arxiv.org/pdf/0804.0380v1.pdf); ///; /// Binned data are considered as un-binned data; /// with identical observation happening in the bin center.; ///; /// \param[in] h2 Pointer to 1D histogram; /// \param[in] option is a character string to specify options; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""T"" Return the normalized A-D test statistic; ///; /// - Note1: Underflow and overflow are not considered in the test; /// - Note2: The test works only for un-weighted histogram (i.e. representing counts); /// - Note3: The histograms are not required to have the same X axis; /// - Note4: The test works only for 1-dimensional histograms",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:331,Testability,Test,Test,331,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// this histogram and h2, using the Anderson-Darling 2 sample test.; ///; /// The AD 2 sample test formula are derived from the paper; /// F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; ///; /// The test is implemented in root in the ROOT::Math::GoFTest class; /// It is the same formula ( (6) in the paper), and also shown in; /// [this preprint](http://arxiv.org/pdf/0804.0380v1.pdf); ///; /// Binned data are considered as un-binned data; /// with identical observation happening in the bin center.; ///; /// \param[in] h2 Pointer to 1D histogram; /// \param[in] option is a character string to specify options; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""T"" Return the normalized A-D test statistic; ///; /// - Note1: Underflow and overflow are not considered in the test; /// - Note2: The test works only for un-weighted histogram (i.e. representing counts); /// - Note3: The histograms are not required to have the same X axis; /// - Note4: The test works only for 1-dimensional histograms",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:352,Testability,test,test,352,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// this histogram and h2, using the Anderson-Darling 2 sample test.; ///; /// The AD 2 sample test formula are derived from the paper; /// F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; ///; /// The test is implemented in root in the ROOT::Math::GoFTest class; /// It is the same formula ( (6) in the paper), and also shown in; /// [this preprint](http://arxiv.org/pdf/0804.0380v1.pdf); ///; /// Binned data are considered as un-binned data; /// with identical observation happening in the bin center.; ///; /// \param[in] h2 Pointer to 1D histogram; /// \param[in] option is a character string to specify options; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""T"" Return the normalized A-D test statistic; ///; /// - Note1: Underflow and overflow are not considered in the test; /// - Note2: The test works only for un-weighted histogram (i.e. representing counts); /// - Note3: The histograms are not required to have the same X axis; /// - Note4: The test works only for 1-dimensional histograms",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:850,Testability,test,test,850,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// this histogram and h2, using the Anderson-Darling 2 sample test.; ///; /// The AD 2 sample test formula are derived from the paper; /// F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; ///; /// The test is implemented in root in the ROOT::Math::GoFTest class; /// It is the same formula ( (6) in the paper), and also shown in; /// [this preprint](http://arxiv.org/pdf/0804.0380v1.pdf); ///; /// Binned data are considered as un-binned data; /// with identical observation happening in the bin center.; ///; /// \param[in] h2 Pointer to 1D histogram; /// \param[in] option is a character string to specify options; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""T"" Return the normalized A-D test statistic; ///; /// - Note1: Underflow and overflow are not considered in the test; /// - Note2: The test works only for un-weighted histogram (i.e. representing counts); /// - Note3: The histograms are not required to have the same X axis; /// - Note4: The test works only for 1-dimensional histograms",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:933,Testability,test,test,933,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// this histogram and h2, using the Anderson-Darling 2 sample test.; ///; /// The AD 2 sample test formula are derived from the paper; /// F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; ///; /// The test is implemented in root in the ROOT::Math::GoFTest class; /// It is the same formula ( (6) in the paper), and also shown in; /// [this preprint](http://arxiv.org/pdf/0804.0380v1.pdf); ///; /// Binned data are considered as un-binned data; /// with identical observation happening in the bin center.; ///; /// \param[in] h2 Pointer to 1D histogram; /// \param[in] option is a character string to specify options; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""T"" Return the normalized A-D test statistic; ///; /// - Note1: Underflow and overflow are not considered in the test; /// - Note2: The test works only for un-weighted histogram (i.e. representing counts); /// - Note3: The histograms are not required to have the same X axis; /// - Note4: The test works only for 1-dimensional histograms",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:956,Testability,test,test,956,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// this histogram and h2, using the Anderson-Darling 2 sample test.; ///; /// The AD 2 sample test formula are derived from the paper; /// F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; ///; /// The test is implemented in root in the ROOT::Math::GoFTest class; /// It is the same formula ( (6) in the paper), and also shown in; /// [this preprint](http://arxiv.org/pdf/0804.0380v1.pdf); ///; /// Binned data are considered as un-binned data; /// with identical observation happening in the bin center.; ///; /// \param[in] h2 Pointer to 1D histogram; /// \param[in] option is a character string to specify options; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""T"" Return the normalized A-D test statistic; ///; /// - Note1: Underflow and overflow are not considered in the test; /// - Note2: The test works only for un-weighted histogram (i.e. representing counts); /// - Note3: The histograms are not required to have the same X axis; /// - Note4: The test works only for 1-dimensional histograms",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1113,Testability,test,test,1113,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// this histogram and h2, using the Anderson-Darling 2 sample test.; ///; /// The AD 2 sample test formula are derived from the paper; /// F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; ///; /// The test is implemented in root in the ROOT::Math::GoFTest class; /// It is the same formula ( (6) in the paper), and also shown in; /// [this preprint](http://arxiv.org/pdf/0804.0380v1.pdf); ///; /// Binned data are considered as un-binned data; /// with identical observation happening in the bin center.; ///; /// \param[in] h2 Pointer to 1D histogram; /// \param[in] option is a character string to specify options; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""T"" Return the normalized A-D test statistic; ///; /// - Note1: Underflow and overflow are not considered in the test; /// - Note2: The test works only for un-weighted histogram (i.e. representing counts); /// - Note3: The histograms are not required to have the same X axis; /// - Note4: The test works only for 1-dimensional histograms",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:132,Testability,test,test,132,"////////////////////////////////////////////////////////////////////////////////; /// Same function as above but returning also the test statistic value",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:58,Testability,test,test,58,"// empty the buffer. Probably we could add as an unbinned test",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1660,Energy Efficiency,adapt,adapted,1660,"so valid for 2-dim); /// - ""N"" include comparison of normalizations; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""M"" Return the Maximum Kolmogorov distance instead of prob; /// - ""X"" Run the pseudo experiments post-processor with the following procedure:; /// make pseudoexperiments based on random values from the parent distribution,; /// compare the KS distance of the pseudoexperiment to the parent; /// distribution, and count all the KS values above the value; /// obtained from the original data to Monte Carlo distribution.; /// The number of pseudo-experiments nEXPT is by default 1000, and; /// it can be changed by specifying the option as ""X=number"",; /// for example ""X=10000"" for 10000 toys.; /// The function returns the probability.; /// (thanks to Ben Kilminster to submit this procedure). Note that; /// this option ""X"" is much slower.; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// Code adapted by Rene Brun from original HBOOK routine HDIFF; ///; /// NOTE1; /// A good description of the Kolmogorov test can be seen at:; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; ///; /// NOTE2; /// see also alternative function TH1::Chi2Test; /// The Kolmogorov test is assumed to give better results than Chi2Test; /// in case of histograms with low statistics.; ///; /// NOTE3 (Jan Conrad, Fred James); /// ""The returned value PROB is calculated such that it will be; /// uniformly distributed between zero and one for compatible histograms,; /// provided the data are not binned (or the number of bins is very large; /// compared with the number of events). Users who have access to unbinned; /// data and wish exact confidence levels should therefore not put their data; /// into histograms, but should call directly TMath::KolmogorovTest. On; /// the other hand, since TH1 is a convenient way of collecting data and; /// saving space, this function has been provided. However, the",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1701,Integrability,rout,routine,1701,"so valid for 2-dim); /// - ""N"" include comparison of normalizations; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""M"" Return the Maximum Kolmogorov distance instead of prob; /// - ""X"" Run the pseudo experiments post-processor with the following procedure:; /// make pseudoexperiments based on random values from the parent distribution,; /// compare the KS distance of the pseudoexperiment to the parent; /// distribution, and count all the KS values above the value; /// obtained from the original data to Monte Carlo distribution.; /// The number of pseudo-experiments nEXPT is by default 1000, and; /// it can be changed by specifying the option as ""X=number"",; /// for example ""X=10000"" for 10000 toys.; /// The function returns the probability.; /// (thanks to Ben Kilminster to submit this procedure). Note that; /// this option ""X"" is much slower.; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// Code adapted by Rene Brun from original HBOOK routine HDIFF; ///; /// NOTE1; /// A good description of the Kolmogorov test can be seen at:; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; ///; /// NOTE2; /// see also alternative function TH1::Chi2Test; /// The Kolmogorov test is assumed to give better results than Chi2Test; /// in case of histograms with low statistics.; ///; /// NOTE3 (Jan Conrad, Fred James); /// ""The returned value PROB is calculated such that it will be; /// uniformly distributed between zero and one for compatible histograms,; /// provided the data are not binned (or the number of bins is very large; /// compared with the number of events). Users who have access to unbinned; /// data and wish exact confidence levels should therefore not put their data; /// into histograms, but should call directly TMath::KolmogorovTest. On; /// the other hand, since TH1 is a convenient way of collecting data and; /// saving space, this function has been provided. However, the",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:2760,Integrability,depend,depending,2760,"1; /// A good description of the Kolmogorov test can be seen at:; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; ///; /// NOTE2; /// see also alternative function TH1::Chi2Test; /// The Kolmogorov test is assumed to give better results than Chi2Test; /// in case of histograms with low statistics.; ///; /// NOTE3 (Jan Conrad, Fred James); /// ""The returned value PROB is calculated such that it will be; /// uniformly distributed between zero and one for compatible histograms,; /// provided the data are not binned (or the number of bins is very large; /// compared with the number of events). Users who have access to unbinned; /// data and wish exact confidence levels should therefore not put their data; /// into histograms, but should call directly TMath::KolmogorovTest. On; /// the other hand, since TH1 is a convenient way of collecting data and; /// saving space, this function has been provided. However, the values of; /// PROB for binned data will be shifted slightly higher than expected,; /// depending on the effects of the binning. For example, when comparing two; /// uniform distributions of 500 events in 100 bins, the values of PROB,; /// instead of being exactly uniformly distributed between zero and one, have; /// a mean value of about 0.56. We can apply a useful; /// rule: As long as the bin width is small compared with any significant; /// physical effect (for example the experimental resolution) then the binning; /// cannot have an important effect. Therefore, we believe that for all; /// practical purposes, the probability value PROB is calculated correctly; /// provided the user is aware that:; ///; /// 1. The value of PROB should not be expected to have exactly the correct; /// distribution for binned data.; /// 2. The user is responsible for seeing to it that the bin widths are; /// small compared with any physical phenomena of interest.; /// 3. The effect of binning (if any) is always to make the value of PROB; /// slightly too bi",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1660,Modifiability,adapt,adapted,1660,"so valid for 2-dim); /// - ""N"" include comparison of normalizations; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""M"" Return the Maximum Kolmogorov distance instead of prob; /// - ""X"" Run the pseudo experiments post-processor with the following procedure:; /// make pseudoexperiments based on random values from the parent distribution,; /// compare the KS distance of the pseudoexperiment to the parent; /// distribution, and count all the KS values above the value; /// obtained from the original data to Monte Carlo distribution.; /// The number of pseudo-experiments nEXPT is by default 1000, and; /// it can be changed by specifying the option as ""X=number"",; /// for example ""X=10000"" for 10000 toys.; /// The function returns the probability.; /// (thanks to Ben Kilminster to submit this procedure). Note that; /// this option ""X"" is much slower.; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// Code adapted by Rene Brun from original HBOOK routine HDIFF; ///; /// NOTE1; /// A good description of the Kolmogorov test can be seen at:; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; ///; /// NOTE2; /// see also alternative function TH1::Chi2Test; /// The Kolmogorov test is assumed to give better results than Chi2Test; /// in case of histograms with low statistics.; ///; /// NOTE3 (Jan Conrad, Fred James); /// ""The returned value PROB is calculated such that it will be; /// uniformly distributed between zero and one for compatible histograms,; /// provided the data are not binned (or the number of bins is very large; /// compared with the number of events). Users who have access to unbinned; /// data and wish exact confidence levels should therefore not put their data; /// into histograms, but should call directly TMath::KolmogorovTest. On; /// the other hand, since TH1 is a convenient way of collecting data and; /// saving space, this function has been provided. However, the",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:2362,Security,access,access,2362,"nks to Ben Kilminster to submit this procedure). Note that; /// this option ""X"" is much slower.; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// Code adapted by Rene Brun from original HBOOK routine HDIFF; ///; /// NOTE1; /// A good description of the Kolmogorov test can be seen at:; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; ///; /// NOTE2; /// see also alternative function TH1::Chi2Test; /// The Kolmogorov test is assumed to give better results than Chi2Test; /// in case of histograms with low statistics.; ///; /// NOTE3 (Jan Conrad, Fred James); /// ""The returned value PROB is calculated such that it will be; /// uniformly distributed between zero and one for compatible histograms,; /// provided the data are not binned (or the number of bins is very large; /// compared with the number of events). Users who have access to unbinned; /// data and wish exact confidence levels should therefore not put their data; /// into histograms, but should call directly TMath::KolmogorovTest. On; /// the other hand, since TH1 is a convenient way of collecting data and; /// saving space, this function has been provided. However, the values of; /// PROB for binned data will be shifted slightly higher than expected,; /// depending on the effects of the binning. For example, when comparing two; /// uniform distributions of 500 events in 100 bins, the values of PROB,; /// instead of being exactly uniformly distributed between zero and one, have; /// a mean value of about 0.56. We can apply a useful; /// rule: As long as the bin width is small compared with any significant; /// physical effect (for example the experimental resolution) then the binning; /// cannot have an important effect. Therefore, we believe that for all; /// practical purposes, the probability value PROB is calculated correctly; /// provided the user is aware that:; ///; /// 1. The value of PROB should not be expected t",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:98,Testability,test,test,98,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// this histogram and h2, using Kolmogorov test.; /// Note that the KolmogorovTest (KS) test should in theory be used only for unbinned data; /// and not for binned data as in the case of the histogram (see NOTE 3 below).; /// So, before using this method blindly, read the NOTE 3.; ///; /// Default: Ignore under- and overflow bins in comparison; ///; /// \param[in] h2 histogram; /// \param[in] option is a character string to specify options; /// - ""U"" include Underflows in test (also for 2-dim); /// - ""O"" include Overflows (also valid for 2-dim); /// - ""N"" include comparison of normalizations; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""M"" Return the Maximum Kolmogorov distance instead of prob; /// - ""X"" Run the pseudo experiments post-processor with the following procedure:; /// make pseudoexperiments based on random values from the parent distribution,; /// compare the KS distance of the pseudoexperiment to the parent; /// distribution, and count all the KS values above the value; /// obtained from the original data to Monte Carlo distribution.; /// The number of pseudo-experiments nEXPT is by default 1000, and; /// it can be changed by specifying the option as ""X=number"",; /// for example ""X=10000"" for 10000 toys.; /// The function returns the probability.; /// (thanks to Ben Kilminster to submit this procedure). Note that; /// this option ""X"" is much slower.; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// Code adapted by Rene Brun from original HBOOK routine HDIFF; ///; /// NOTE1; /// A good description of the Kolmogorov test can be seen at:; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; ///; /// NOTE2; /// see also alternative function TH1::Chi2Test; /// The Kolmogorov test is assumed to give better results than Chi2Test;",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:182,Testability,test,test,182,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// this histogram and h2, using Kolmogorov test.; /// Note that the KolmogorovTest (KS) test should in theory be used only for unbinned data; /// and not for binned data as in the case of the histogram (see NOTE 3 below).; /// So, before using this method blindly, read the NOTE 3.; ///; /// Default: Ignore under- and overflow bins in comparison; ///; /// \param[in] h2 histogram; /// \param[in] option is a character string to specify options; /// - ""U"" include Underflows in test (also for 2-dim); /// - ""O"" include Overflows (also valid for 2-dim); /// - ""N"" include comparison of normalizations; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""M"" Return the Maximum Kolmogorov distance instead of prob; /// - ""X"" Run the pseudo experiments post-processor with the following procedure:; /// make pseudoexperiments based on random values from the parent distribution,; /// compare the KS distance of the pseudoexperiment to the parent; /// distribution, and count all the KS values above the value; /// obtained from the original data to Monte Carlo distribution.; /// The number of pseudo-experiments nEXPT is by default 1000, and; /// it can be changed by specifying the option as ""X=number"",; /// for example ""X=10000"" for 10000 toys.; /// The function returns the probability.; /// (thanks to Ben Kilminster to submit this procedure). Note that; /// this option ""X"" is much slower.; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// Code adapted by Rene Brun from original HBOOK routine HDIFF; ///; /// NOTE1; /// A good description of the Kolmogorov test can be seen at:; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; ///; /// NOTE2; /// see also alternative function TH1::Chi2Test; /// The Kolmogorov test is assumed to give better results than Chi2Test;",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:227,Testability,test,test,227,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// this histogram and h2, using Kolmogorov test.; /// Note that the KolmogorovTest (KS) test should in theory be used only for unbinned data; /// and not for binned data as in the case of the histogram (see NOTE 3 below).; /// So, before using this method blindly, read the NOTE 3.; ///; /// Default: Ignore under- and overflow bins in comparison; ///; /// \param[in] h2 histogram; /// \param[in] option is a character string to specify options; /// - ""U"" include Underflows in test (also for 2-dim); /// - ""O"" include Overflows (also valid for 2-dim); /// - ""N"" include comparison of normalizations; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""M"" Return the Maximum Kolmogorov distance instead of prob; /// - ""X"" Run the pseudo experiments post-processor with the following procedure:; /// make pseudoexperiments based on random values from the parent distribution,; /// compare the KS distance of the pseudoexperiment to the parent; /// distribution, and count all the KS values above the value; /// obtained from the original data to Monte Carlo distribution.; /// The number of pseudo-experiments nEXPT is by default 1000, and; /// it can be changed by specifying the option as ""X=number"",; /// for example ""X=10000"" for 10000 toys.; /// The function returns the probability.; /// (thanks to Ben Kilminster to submit this procedure). Note that; /// this option ""X"" is much slower.; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// Code adapted by Rene Brun from original HBOOK routine HDIFF; ///; /// NOTE1; /// A good description of the Kolmogorov test can be seen at:; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; ///; /// NOTE2; /// see also alternative function TH1::Chi2Test; /// The Kolmogorov test is assumed to give better results than Chi2Test;",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:617,Testability,test,test,617,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// this histogram and h2, using Kolmogorov test.; /// Note that the KolmogorovTest (KS) test should in theory be used only for unbinned data; /// and not for binned data as in the case of the histogram (see NOTE 3 below).; /// So, before using this method blindly, read the NOTE 3.; ///; /// Default: Ignore under- and overflow bins in comparison; ///; /// \param[in] h2 histogram; /// \param[in] option is a character string to specify options; /// - ""U"" include Underflows in test (also for 2-dim); /// - ""O"" include Overflows (also valid for 2-dim); /// - ""N"" include comparison of normalizations; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""M"" Return the Maximum Kolmogorov distance instead of prob; /// - ""X"" Run the pseudo experiments post-processor with the following procedure:; /// make pseudoexperiments based on random values from the parent distribution,; /// compare the KS distance of the pseudoexperiment to the parent; /// distribution, and count all the KS values above the value; /// obtained from the original data to Monte Carlo distribution.; /// The number of pseudo-experiments nEXPT is by default 1000, and; /// it can be changed by specifying the option as ""X=number"",; /// for example ""X=10000"" for 10000 toys.; /// The function returns the probability.; /// (thanks to Ben Kilminster to submit this procedure). Note that; /// this option ""X"" is much slower.; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// Code adapted by Rene Brun from original HBOOK routine HDIFF; ///; /// NOTE1; /// A good description of the Kolmogorov test can be seen at:; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; ///; /// NOTE2; /// see also alternative function TH1::Chi2Test; /// The Kolmogorov test is assumed to give better results than Chi2Test;",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1593,Testability,test,test,1593,"so valid for 2-dim); /// - ""N"" include comparison of normalizations; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""M"" Return the Maximum Kolmogorov distance instead of prob; /// - ""X"" Run the pseudo experiments post-processor with the following procedure:; /// make pseudoexperiments based on random values from the parent distribution,; /// compare the KS distance of the pseudoexperiment to the parent; /// distribution, and count all the KS values above the value; /// obtained from the original data to Monte Carlo distribution.; /// The number of pseudo-experiments nEXPT is by default 1000, and; /// it can be changed by specifying the option as ""X=number"",; /// for example ""X=10000"" for 10000 toys.; /// The function returns the probability.; /// (thanks to Ben Kilminster to submit this procedure). Note that; /// this option ""X"" is much slower.; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// Code adapted by Rene Brun from original HBOOK routine HDIFF; ///; /// NOTE1; /// A good description of the Kolmogorov test can be seen at:; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; ///; /// NOTE2; /// see also alternative function TH1::Chi2Test; /// The Kolmogorov test is assumed to give better results than Chi2Test; /// in case of histograms with low statistics.; ///; /// NOTE3 (Jan Conrad, Fred James); /// ""The returned value PROB is calculated such that it will be; /// uniformly distributed between zero and one for compatible histograms,; /// provided the data are not binned (or the number of bins is very large; /// compared with the number of events). Users who have access to unbinned; /// data and wish exact confidence levels should therefore not put their data; /// into histograms, but should call directly TMath::KolmogorovTest. On; /// the other hand, since TH1 is a convenient way of collecting data and; /// saving space, this function has been provided. However, the",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1773,Testability,test,test,1773,"so valid for 2-dim); /// - ""N"" include comparison of normalizations; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""M"" Return the Maximum Kolmogorov distance instead of prob; /// - ""X"" Run the pseudo experiments post-processor with the following procedure:; /// make pseudoexperiments based on random values from the parent distribution,; /// compare the KS distance of the pseudoexperiment to the parent; /// distribution, and count all the KS values above the value; /// obtained from the original data to Monte Carlo distribution.; /// The number of pseudo-experiments nEXPT is by default 1000, and; /// it can be changed by specifying the option as ""X=number"",; /// for example ""X=10000"" for 10000 toys.; /// The function returns the probability.; /// (thanks to Ben Kilminster to submit this procedure). Note that; /// this option ""X"" is much slower.; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// Code adapted by Rene Brun from original HBOOK routine HDIFF; ///; /// NOTE1; /// A good description of the Kolmogorov test can be seen at:; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; ///; /// NOTE2; /// see also alternative function TH1::Chi2Test; /// The Kolmogorov test is assumed to give better results than Chi2Test; /// in case of histograms with low statistics.; ///; /// NOTE3 (Jan Conrad, Fred James); /// ""The returned value PROB is calculated such that it will be; /// uniformly distributed between zero and one for compatible histograms,; /// provided the data are not binned (or the number of bins is very large; /// compared with the number of events). Users who have access to unbinned; /// data and wish exact confidence levels should therefore not put their data; /// into histograms, but should call directly TMath::KolmogorovTest. On; /// the other hand, since TH1 is a convenient way of collecting data and; /// saving space, this function has been provided. However, the",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1948,Testability,test,test,1948,"eriments based on random values from the parent distribution,; /// compare the KS distance of the pseudoexperiment to the parent; /// distribution, and count all the KS values above the value; /// obtained from the original data to Monte Carlo distribution.; /// The number of pseudo-experiments nEXPT is by default 1000, and; /// it can be changed by specifying the option as ""X=number"",; /// for example ""X=10000"" for 10000 toys.; /// The function returns the probability.; /// (thanks to Ben Kilminster to submit this procedure). Note that; /// this option ""X"" is much slower.; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// Code adapted by Rene Brun from original HBOOK routine HDIFF; ///; /// NOTE1; /// A good description of the Kolmogorov test can be seen at:; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; ///; /// NOTE2; /// see also alternative function TH1::Chi2Test; /// The Kolmogorov test is assumed to give better results than Chi2Test; /// in case of histograms with low statistics.; ///; /// NOTE3 (Jan Conrad, Fred James); /// ""The returned value PROB is calculated such that it will be; /// uniformly distributed between zero and one for compatible histograms,; /// provided the data are not binned (or the number of bins is very large; /// compared with the number of events). Users who have access to unbinned; /// data and wish exact confidence levels should therefore not put their data; /// into histograms, but should call directly TMath::KolmogorovTest. On; /// the other hand, since TH1 is a convenient way of collecting data and; /// saving space, this function has been provided. However, the values of; /// PROB for binned data will be shifted slightly higher than expected,; /// depending on the effects of the binning. For example, when comparing two; /// uniform distributions of 500 events in 100 bins, the values of PROB,; /// instead of being exactly uniformly distrib",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:3931,Testability,test,test,3931," is calculated such that it will be; /// uniformly distributed between zero and one for compatible histograms,; /// provided the data are not binned (or the number of bins is very large; /// compared with the number of events). Users who have access to unbinned; /// data and wish exact confidence levels should therefore not put their data; /// into histograms, but should call directly TMath::KolmogorovTest. On; /// the other hand, since TH1 is a convenient way of collecting data and; /// saving space, this function has been provided. However, the values of; /// PROB for binned data will be shifted slightly higher than expected,; /// depending on the effects of the binning. For example, when comparing two; /// uniform distributions of 500 events in 100 bins, the values of PROB,; /// instead of being exactly uniformly distributed between zero and one, have; /// a mean value of about 0.56. We can apply a useful; /// rule: As long as the bin width is small compared with any significant; /// physical effect (for example the experimental resolution) then the binning; /// cannot have an important effect. Therefore, we believe that for all; /// practical purposes, the probability value PROB is calculated correctly; /// provided the user is aware that:; ///; /// 1. The value of PROB should not be expected to have exactly the correct; /// distribution for binned data.; /// 2. The user is responsible for seeing to it that the bin widths are; /// small compared with any physical phenomena of interest.; /// 3. The effect of binning (if any) is always to make the value of PROB; /// slightly too big. That is, setting an acceptance criterion of (PROB>0.05; /// will assure that at most 5% of truly compatible histograms are rejected,; /// and usually somewhat less.""; ///; /// Note also that for GoF test of unbinned data ROOT provides also the class; /// ROOT::Math::GoFTest. The class has also method for doing one sample tests; /// (i.e. comparing the data with a given distribution).",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:4055,Testability,test,tests,4055," is calculated such that it will be; /// uniformly distributed between zero and one for compatible histograms,; /// provided the data are not binned (or the number of bins is very large; /// compared with the number of events). Users who have access to unbinned; /// data and wish exact confidence levels should therefore not put their data; /// into histograms, but should call directly TMath::KolmogorovTest. On; /// the other hand, since TH1 is a convenient way of collecting data and; /// saving space, this function has been provided. However, the values of; /// PROB for binned data will be shifted slightly higher than expected,; /// depending on the effects of the binning. For example, when comparing two; /// uniform distributions of 500 events in 100 bins, the values of PROB,; /// instead of being exactly uniformly distributed between zero and one, have; /// a mean value of about 0.56. We can apply a useful; /// rule: As long as the bin width is small compared with any significant; /// physical effect (for example the experimental resolution) then the binning; /// cannot have an important effect. Therefore, we believe that for all; /// practical purposes, the probability value PROB is calculated correctly; /// provided the user is aware that:; ///; /// 1. The value of PROB should not be expected to have exactly the correct; /// distribution for binned data.; /// 2. The user is responsible for seeing to it that the bin widths are; /// small compared with any physical phenomena of interest.; /// 3. The effect of binning (if any) is always to make the value of PROB; /// slightly too big. That is, setting an acceptance criterion of (PROB>0.05; /// will assure that at most 5% of truly compatible histograms are rejected,; /// and usually somewhat less.""; ///; /// Note also that for GoF test of unbinned data ROOT provides also the class; /// ROOT::Math::GoFTest. The class has also method for doing one sample tests; /// (i.e. comparing the data with a given distribution).",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:58,Testability,test,test,58,"// empty the buffer. Probably we could add as an unbinned test",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:54,Availability,error,errors,54,"// calculate the effective entries.; // the case when errors are zero (w1 == 0 or w2 ==0) are equivalent to; // compare to a function. In that case the rescaling is done only on sqrt(esum2) or sqrt(esum1)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:42,Testability,Test,Test,42,"// Find largest difference for Kolmogorov Test",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:30,Availability,error,errors,30,"// case h1 is exact (has zero errors)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:20,Availability,error,errors,20,"// case h2 has zero errors",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:354,Availability,error,errors,354,"// X option. Run Pseudo-experiments to determine NULL distribution of the; // KS distance. We can find the probability from the number of pseudo-experiment that have a; // KS distance larger than the one opbserved in the data.; // We use the histogram with the largest statistics as a parent distribution for the NULL.; // Note if one histogram has zero errors is considered as a function. In that case we use it; // as parent distribution for the toys.; //",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:18,Availability,error,error,18,"// This numerical error condition should never occur:",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:175,Testability,log,log,175,"////////////////////////////////////////////////////////////////////////////////; /// Return the value of contour number ""level"" in Pad coordinates.; /// ie: if the Pad is in log scale along Z it returns le log of the contour level; /// value. See GetContour to return the array of all contour levels",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:207,Testability,log,log,207,"////////////////////////////////////////////////////////////////////////////////; /// Return the value of contour number ""level"" in Pad coordinates.; /// ie: if the Pad is in log scale along Z it returns le log of the contour level; /// value. See GetContour to return the array of all contour levels",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:47,Testability,log,log,47,"// In case of user defined contours and Pad in log scale along Z,; // fContour.fArray doesn't contain the log of the contour whereas it does; // in case of equidistant contours.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:106,Testability,log,log,106,"// In case of user defined contours and Pad in log scale along Z,; // fContour.fArray doesn't contain the log of the contour whereas it does; // in case of equidistant contours.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:568,Energy Efficiency,efficient,efficient,568,"///////////////////////////////////////////////////////////////////////////////; /// Retrieve the minimum and maximum values in the histogram; ///; /// This will not return a cached value and will always search the; /// histogram for the min and max values. The user can condition whether; /// or not to call this with the GetMinimumStored() and GetMaximumStored(); /// methods. If the cache is empty, then the value will be -1111. Users; /// can then use the SetMinimum() or SetMaximum() methods to cache the results.; /// For example, the following recipe will make efficient use of this method; /// and the cached minimum and maximum values.; //; /// \code{.cpp}; /// Double_t currentMin = pHist->GetMinimumStored();; /// Double_t currentMax = pHist->GetMaximumStored();; /// if ((currentMin == -1111) || (currentMax == -1111)) {; /// pHist->GetMinimumAndMaximum(currentMin, currentMax);; /// pHist->SetMinimum(currentMin);; /// pHist->SetMaximum(currentMax);; /// }; /// \endcode; ///; /// \param min reference to variable that will hold found minimum value; /// \param max reference to variable that will hold found maximum value",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1018,Modifiability,variab,variable,1018,"///////////////////////////////////////////////////////////////////////////////; /// Retrieve the minimum and maximum values in the histogram; ///; /// This will not return a cached value and will always search the; /// histogram for the min and max values. The user can condition whether; /// or not to call this with the GetMinimumStored() and GetMaximumStored(); /// methods. If the cache is empty, then the value will be -1111. Users; /// can then use the SetMinimum() or SetMaximum() methods to cache the results.; /// For example, the following recipe will make efficient use of this method; /// and the cached minimum and maximum values.; //; /// \code{.cpp}; /// Double_t currentMin = pHist->GetMinimumStored();; /// Double_t currentMax = pHist->GetMaximumStored();; /// if ((currentMin == -1111) || (currentMax == -1111)) {; /// pHist->GetMinimumAndMaximum(currentMin, currentMax);; /// pHist->SetMinimum(currentMin);; /// pHist->SetMaximum(currentMax);; /// }; /// \endcode; ///; /// \param min reference to variable that will hold found minimum value; /// \param max reference to variable that will hold found maximum value",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1091,Modifiability,variab,variable,1091,"///////////////////////////////////////////////////////////////////////////////; /// Retrieve the minimum and maximum values in the histogram; ///; /// This will not return a cached value and will always search the; /// histogram for the min and max values. The user can condition whether; /// or not to call this with the GetMinimumStored() and GetMaximumStored(); /// methods. If the cache is empty, then the value will be -1111. Users; /// can then use the SetMinimum() or SetMaximum() methods to cache the results.; /// For example, the following recipe will make efficient use of this method; /// and the cached minimum and maximum values.; //; /// \code{.cpp}; /// Double_t currentMin = pHist->GetMinimumStored();; /// Double_t currentMax = pHist->GetMaximumStored();; /// if ((currentMin == -1111) || (currentMax == -1111)) {; /// pHist->GetMinimumAndMaximum(currentMin, currentMax);; /// pHist->SetMinimum(currentMin);; /// pHist->SetMaximum(currentMax);; /// }; /// \endcode; ///; /// \param min reference to variable that will hold found minimum value; /// \param max reference to variable that will hold found maximum value",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:175,Performance,cache,cached,175,"///////////////////////////////////////////////////////////////////////////////; /// Retrieve the minimum and maximum values in the histogram; ///; /// This will not return a cached value and will always search the; /// histogram for the min and max values. The user can condition whether; /// or not to call this with the GetMinimumStored() and GetMaximumStored(); /// methods. If the cache is empty, then the value will be -1111. Users; /// can then use the SetMinimum() or SetMaximum() methods to cache the results.; /// For example, the following recipe will make efficient use of this method; /// and the cached minimum and maximum values.; //; /// \code{.cpp}; /// Double_t currentMin = pHist->GetMinimumStored();; /// Double_t currentMax = pHist->GetMaximumStored();; /// if ((currentMin == -1111) || (currentMax == -1111)) {; /// pHist->GetMinimumAndMaximum(currentMin, currentMax);; /// pHist->SetMinimum(currentMin);; /// pHist->SetMaximum(currentMax);; /// }; /// \endcode; ///; /// \param min reference to variable that will hold found minimum value; /// \param max reference to variable that will hold found maximum value",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:386,Performance,cache,cache,386,"///////////////////////////////////////////////////////////////////////////////; /// Retrieve the minimum and maximum values in the histogram; ///; /// This will not return a cached value and will always search the; /// histogram for the min and max values. The user can condition whether; /// or not to call this with the GetMinimumStored() and GetMaximumStored(); /// methods. If the cache is empty, then the value will be -1111. Users; /// can then use the SetMinimum() or SetMaximum() methods to cache the results.; /// For example, the following recipe will make efficient use of this method; /// and the cached minimum and maximum values.; //; /// \code{.cpp}; /// Double_t currentMin = pHist->GetMinimumStored();; /// Double_t currentMax = pHist->GetMaximumStored();; /// if ((currentMin == -1111) || (currentMax == -1111)) {; /// pHist->GetMinimumAndMaximum(currentMin, currentMax);; /// pHist->SetMinimum(currentMin);; /// pHist->SetMaximum(currentMax);; /// }; /// \endcode; ///; /// \param min reference to variable that will hold found minimum value; /// \param max reference to variable that will hold found maximum value",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:500,Performance,cache,cache,500,"///////////////////////////////////////////////////////////////////////////////; /// Retrieve the minimum and maximum values in the histogram; ///; /// This will not return a cached value and will always search the; /// histogram for the min and max values. The user can condition whether; /// or not to call this with the GetMinimumStored() and GetMaximumStored(); /// methods. If the cache is empty, then the value will be -1111. Users; /// can then use the SetMinimum() or SetMaximum() methods to cache the results.; /// For example, the following recipe will make efficient use of this method; /// and the cached minimum and maximum values.; //; /// \code{.cpp}; /// Double_t currentMin = pHist->GetMinimumStored();; /// Double_t currentMax = pHist->GetMaximumStored();; /// if ((currentMin == -1111) || (currentMax == -1111)) {; /// pHist->GetMinimumAndMaximum(currentMin, currentMax);; /// pHist->SetMinimum(currentMin);; /// pHist->SetMaximum(currentMax);; /// }; /// \endcode; ///; /// \param min reference to variable that will hold found minimum value; /// \param max reference to variable that will hold found maximum value",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:610,Performance,cache,cached,610,"///////////////////////////////////////////////////////////////////////////////; /// Retrieve the minimum and maximum values in the histogram; ///; /// This will not return a cached value and will always search the; /// histogram for the min and max values. The user can condition whether; /// or not to call this with the GetMinimumStored() and GetMaximumStored(); /// methods. If the cache is empty, then the value will be -1111. Users; /// can then use the SetMinimum() or SetMaximum() methods to cache the results.; /// For example, the following recipe will make efficient use of this method; /// and the cached minimum and maximum values.; //; /// \code{.cpp}; /// Double_t currentMin = pHist->GetMinimumStored();; /// Double_t currentMax = pHist->GetMaximumStored();; /// if ((currentMin == -1111) || (currentMax == -1111)) {; /// pHist->GetMinimumAndMaximum(currentMin, currentMax);; /// pHist->SetMinimum(currentMin);; /// pHist->SetMaximum(currentMax);; /// }; /// \endcode; ///; /// \param min reference to variable that will hold found minimum value; /// \param max reference to variable that will hold found maximum value",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:207,Availability,error,errors,207,"////////////////////////////////////////////////////////////////////////////////; /// Redefine x axis parameters.; ///; /// The X axis parameters are modified.; /// The bins content array is resized; /// if errors (Sumw2) the errors array is resized; /// The previous bin contents are lost; /// To change only the axis limits, see TAxis::SetRange",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:226,Availability,error,errors,226,"////////////////////////////////////////////////////////////////////////////////; /// Redefine x axis parameters.; ///; /// The X axis parameters are modified.; /// The bins content array is resized; /// if errors (Sumw2) the errors array is resized; /// The previous bin contents are lost; /// To change only the axis limits, see TAxis::SetRange",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:231,Availability,error,errors,231,"////////////////////////////////////////////////////////////////////////////////; /// Redefine x axis parameters with variable bin sizes.; ///; /// The X axis parameters are modified.; /// The bins content array is resized; /// if errors (Sumw2) the errors array is resized; /// The previous bin contents are lost; /// To change only the axis limits, see TAxis::SetRange; /// xBins is supposed to be of length nx+1",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:250,Availability,error,errors,250,"////////////////////////////////////////////////////////////////////////////////; /// Redefine x axis parameters with variable bin sizes.; ///; /// The X axis parameters are modified.; /// The bins content array is resized; /// if errors (Sumw2) the errors array is resized; /// The previous bin contents are lost; /// To change only the axis limits, see TAxis::SetRange; /// xBins is supposed to be of length nx+1",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:118,Modifiability,variab,variable,118,"////////////////////////////////////////////////////////////////////////////////; /// Redefine x axis parameters with variable bin sizes.; ///; /// The X axis parameters are modified.; /// The bins content array is resized; /// if errors (Sumw2) the errors array is resized; /// The previous bin contents are lost; /// To change only the axis limits, see TAxis::SetRange; /// xBins is supposed to be of length nx+1",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:219,Availability,error,errors,219,"////////////////////////////////////////////////////////////////////////////////; /// Redefine x and y axis parameters.; ///; /// The X and Y axis parameters are modified.; /// The bins content array is resized; /// if errors (Sumw2) the errors array is resized; /// The previous bin contents are lost; /// To change only the axis limits, see TAxis::SetRange",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:238,Availability,error,errors,238,"////////////////////////////////////////////////////////////////////////////////; /// Redefine x and y axis parameters.; ///; /// The X and Y axis parameters are modified.; /// The bins content array is resized; /// if errors (Sumw2) the errors array is resized; /// The previous bin contents are lost; /// To change only the axis limits, see TAxis::SetRange",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:243,Availability,error,errors,243,"////////////////////////////////////////////////////////////////////////////////; /// Redefine x and y axis parameters with variable bin sizes.; ///; /// The X and Y axis parameters are modified.; /// The bins content array is resized; /// if errors (Sumw2) the errors array is resized; /// The previous bin contents are lost; /// To change only the axis limits, see TAxis::SetRange; /// xBins is supposed to be of length nx+1, yBins is supposed to be of length ny+1",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:262,Availability,error,errors,262,"////////////////////////////////////////////////////////////////////////////////; /// Redefine x and y axis parameters with variable bin sizes.; ///; /// The X and Y axis parameters are modified.; /// The bins content array is resized; /// if errors (Sumw2) the errors array is resized; /// The previous bin contents are lost; /// To change only the axis limits, see TAxis::SetRange; /// xBins is supposed to be of length nx+1, yBins is supposed to be of length ny+1",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:124,Modifiability,variab,variable,124,"////////////////////////////////////////////////////////////////////////////////; /// Redefine x and y axis parameters with variable bin sizes.; ///; /// The X and Y axis parameters are modified.; /// The bins content array is resized; /// if errors (Sumw2) the errors array is resized; /// The previous bin contents are lost; /// To change only the axis limits, see TAxis::SetRange; /// xBins is supposed to be of length nx+1, yBins is supposed to be of length ny+1",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:225,Availability,error,errors,225,"////////////////////////////////////////////////////////////////////////////////; /// Redefine x, y and z axis parameters.; ///; /// The X, Y and Z axis parameters are modified.; /// The bins content array is resized; /// if errors (Sumw2) the errors array is resized; /// The previous bin contents are lost; /// To change only the axis limits, see TAxis::SetRange",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:244,Availability,error,errors,244,"////////////////////////////////////////////////////////////////////////////////; /// Redefine x, y and z axis parameters.; ///; /// The X, Y and Z axis parameters are modified.; /// The bins content array is resized; /// if errors (Sumw2) the errors array is resized; /// The previous bin contents are lost; /// To change only the axis limits, see TAxis::SetRange",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:249,Availability,error,errors,249,"////////////////////////////////////////////////////////////////////////////////; /// Redefine x, y and z axis parameters with variable bin sizes.; ///; /// The X, Y and Z axis parameters are modified.; /// The bins content array is resized; /// if errors (Sumw2) the errors array is resized; /// The previous bin contents are lost; /// To change only the axis limits, see TAxis::SetRange; /// xBins is supposed to be of length nx+1, yBins is supposed to be of length ny+1,; /// zBins is supposed to be of length nz+1",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:268,Availability,error,errors,268,"////////////////////////////////////////////////////////////////////////////////; /// Redefine x, y and z axis parameters with variable bin sizes.; ///; /// The X, Y and Z axis parameters are modified.; /// The bins content array is resized; /// if errors (Sumw2) the errors array is resized; /// The previous bin contents are lost; /// To change only the axis limits, see TAxis::SetRange; /// xBins is supposed to be of length nx+1, yBins is supposed to be of length ny+1,; /// zBins is supposed to be of length nz+1",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:127,Modifiability,variab,variable,127,"////////////////////////////////////////////////////////////////////////////////; /// Redefine x, y and z axis parameters with variable bin sizes.; ///; /// The X, Y and Z axis parameters are modified.; /// The bins content array is resized; /// if errors (Sumw2) the errors array is resized; /// The previous bin contents are lost; /// To change only the axis limits, see TAxis::SetRange; /// xBins is supposed to be of length nx+1, yBins is supposed to be of length ny+1,; /// zBins is supposed to be of length nz+1",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:98,Availability,error,errors,98,"////////////////////////////////////////////////////////////////////////////////; /// Replace bin errors by values in array error.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:124,Availability,error,error,124,"////////////////////////////////////////////////////////////////////////////////; /// Replace bin errors by values in array error.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:60,Deployability,update,update,60,"// Histograms are named objects in a THashList.; // We must update the hashlist if we change the name; // We protect this operation",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:71,Security,hash,hashlist,71,"// Histograms are named objects in a THashList.; // We must update the hashlist if we change the name; // We protect this operation",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:60,Deployability,update,update,60,"// Histograms are named objects in a THashList.; // We must update the hashlist if we change the name",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:71,Security,hash,hashlist,71,"// Histograms are named objects in a THashList.; // We must update the hashlist if we change the name",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:271,Availability,error,error,271,"////////////////////////////////////////////////////////////////////////////////; /// Create structure to store sum of squares of weights.; ///; /// if histogram is already filled, the sum of squares of weights; /// is filled with the existing bin contents; ///; /// The error per bin will be computed as sqrt(sum of squares of weight); /// for each bin.; ///; /// This function is automatically called when the histogram is created; /// if the static function TH1::SetDefaultSumw2 has been called before.; /// If flag = false the structure containing the sum of the square of weights; /// is rest and it will be empty, but it is not deleted (i.e. GetSumw2()->fN = 0)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:3,Usability,clear,clear,3,"// clear the array if existing - do nothing otherwise",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:102,Availability,error,error,102,"////////////////////////////////////////////////////////////////////////////////; /// Return value of error associated to bin number bin.; ///; /// if the sum of squares of weights has been defined (via Sumw2),; /// this function returns the sqrt(sum of w2).; /// otherwise it returns the sqrt(contents) for this bin.",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:99,Availability,error,error,99,"////////////////////////////////////////////////////////////////////////////////; /// Return lower error associated to bin number bin.; ///; /// The error will depend on the statistic option used will return; /// the binContent - lower interval value",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:149,Availability,error,error,149,"////////////////////////////////////////////////////////////////////////////////; /// Return lower error associated to bin number bin.; ///; /// The error will depend on the statistic option used will return; /// the binContent - lower interval value",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:160,Integrability,depend,depend,160,"////////////////////////////////////////////////////////////////////////////////; /// Return lower error associated to bin number bin.; ///; /// The error will depend on the statistic option used will return; /// the binContent - lower interval value",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:99,Availability,error,error,99,"////////////////////////////////////////////////////////////////////////////////; /// Return upper error associated to bin number bin.; ///; /// The error will depend on the statistic option used will return; /// the binContent - upper interval value",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:149,Availability,error,error,149,"////////////////////////////////////////////////////////////////////////////////; /// Return upper error associated to bin number bin.; ///; /// The error will depend on the statistic option used will return; /// the binContent - upper interval value",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:160,Integrability,depend,depend,160,"////////////////////////////////////////////////////////////////////////////////; /// Return upper error associated to bin number bin.; ///; /// The error will depend on the statistic option used will return; /// the binContent - upper interval value",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:98,Availability,Error,Error,98,"////////////////////////////////////////////////////////////////////////////////; /// Set the bin Error; /// Note that this resets the bin eror option to be of Normal Type and for the; /// non-empty bin the bin error is set by default to the square root of their content.; /// Note that in case the user sets after calling SetBinError explicitly a new bin content (e.g. using SetBinContent); /// he needs then to provide also the corresponding bin error (using SetBinError) since the bin error; /// will not be recalculated after setting the content and a default error = 0 will be used for those bins.; ///; /// See convention for numbering bins in TH1::GetBin",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:211,Availability,error,error,211,"////////////////////////////////////////////////////////////////////////////////; /// Set the bin Error; /// Note that this resets the bin eror option to be of Normal Type and for the; /// non-empty bin the bin error is set by default to the square root of their content.; /// Note that in case the user sets after calling SetBinError explicitly a new bin content (e.g. using SetBinContent); /// he needs then to provide also the corresponding bin error (using SetBinError) since the bin error; /// will not be recalculated after setting the content and a default error = 0 will be used for those bins.; ///; /// See convention for numbering bins in TH1::GetBin",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:448,Availability,error,error,448,"////////////////////////////////////////////////////////////////////////////////; /// Set the bin Error; /// Note that this resets the bin eror option to be of Normal Type and for the; /// non-empty bin the bin error is set by default to the square root of their content.; /// Note that in case the user sets after calling SetBinError explicitly a new bin content (e.g. using SetBinContent); /// he needs then to provide also the corresponding bin error (using SetBinError) since the bin error; /// will not be recalculated after setting the content and a default error = 0 will be used for those bins.; ///; /// See convention for numbering bins in TH1::GetBin",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:488,Availability,error,error,488,"////////////////////////////////////////////////////////////////////////////////; /// Set the bin Error; /// Note that this resets the bin eror option to be of Normal Type and for the; /// non-empty bin the bin error is set by default to the square root of their content.; /// Note that in case the user sets after calling SetBinError explicitly a new bin content (e.g. using SetBinContent); /// he needs then to provide also the corresponding bin error (using SetBinError) since the bin error; /// will not be recalculated after setting the content and a default error = 0 will be used for those bins.; ///; /// See convention for numbering bins in TH1::GetBin",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:564,Availability,error,error,564,"////////////////////////////////////////////////////////////////////////////////; /// Set the bin Error; /// Note that this resets the bin eror option to be of Normal Type and for the; /// non-empty bin the bin error is set by default to the square root of their content.; /// Note that in case the user sets after calling SetBinError explicitly a new bin content (e.g. using SetBinContent); /// he needs then to provide also the corresponding bin error (using SetBinError) since the bin error; /// will not be recalculated after setting the content and a default error = 0 will be used for those bins.; ///; /// See convention for numbering bins in TH1::GetBin",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:17,Availability,error,error,17,"// reset the bin error option",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface to TSpectrum::Search.; /// The function finds peaks in this histogram where the width is > sigma; /// and the peak maximum greater than threshold*maximum bin content of this.; /// For more details see TSpectrum::Search.; /// Note the difference in the default value for option compared to TSpectrum::Search; /// option="""" by default (instead of ""goff"").",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:383,Availability,Avail,Available,383,"////////////////////////////////////////////////////////////////////////////////; /// For a given transform (first parameter), fills the histogram (second parameter); /// with the transform output data, specified in the third parameter; /// If the 2nd parameter h_output is empty, a new histogram (TH1D or TH2D) is created; /// and the user is responsible for deleting it.; ///; /// Available options:; /// - ""RE"" - real part of the output; /// - ""IM"" - imaginary part of the output; /// - ""MAG"" - magnitude of the output; /// - ""PH"" - phase of the output",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:90,Deployability,update,update,90,"////////////////////////////////////////////////////////////////////////////////; /// Raw update of bin content on internal data structure; /// see convention for numbering bins in TH1::GetBin",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:116,Modifiability,variab,variable,116,"////////////////////////////////////////////////////////////////////////////////; /// Create a 1-Dim histogram with variable bins of type char (one byte per channel); /// (see TH1::TH1 for explanation of parameters)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:116,Modifiability,variab,variable,116,"////////////////////////////////////////////////////////////////////////////////; /// Create a 1-Dim histogram with variable bins of type char (one byte per channel); /// (see TH1::TH1 for explanation of parameters)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:116,Modifiability,variab,variable,116,"////////////////////////////////////////////////////////////////////////////////; /// Create a 1-Dim histogram with variable bins of type short; /// (see TH1::TH1 for explanation of parameters)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:116,Modifiability,variab,variable,116,"////////////////////////////////////////////////////////////////////////////////; /// Create a 1-Dim histogram with variable bins of type short; /// (see TH1::TH1 for explanation of parameters)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:116,Modifiability,variab,variable,116,"////////////////////////////////////////////////////////////////////////////////; /// Create a 1-Dim histogram with variable bins of type integer; /// (see TH1::TH1 for explanation of parameters)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:116,Modifiability,variab,variable,116,"////////////////////////////////////////////////////////////////////////////////; /// Create a 1-Dim histogram with variable bins of type integer; /// (see TH1::TH1 for explanation of parameters)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:116,Modifiability,variab,variable,116,"////////////////////////////////////////////////////////////////////////////////; /// Create a 1-Dim histogram with variable bins of type long64; /// (see TH1::TH1 for explanation of parameters)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:116,Modifiability,variab,variable,116,"////////////////////////////////////////////////////////////////////////////////; /// Create a 1-Dim histogram with variable bins of type long64; /// (see TH1::TH1 for explanation of parameters)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:116,Modifiability,variab,variable,116,"////////////////////////////////////////////////////////////////////////////////; /// Create a 1-Dim histogram with variable bins of type float; /// (see TH1::TH1 for explanation of parameters)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:116,Modifiability,variab,variable,116,"////////////////////////////////////////////////////////////////////////////////; /// Create a 1-Dim histogram with variable bins of type float; /// (see TH1::TH1 for explanation of parameters)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:116,Modifiability,variab,variable,116,"////////////////////////////////////////////////////////////////////////////////; /// Create a 1-Dim histogram with variable bins of type double; /// (see TH1::TH1 for explanation of parameters)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:116,Modifiability,variab,variable,116,"////////////////////////////////////////////////////////////////////////////////; /// Create a 1-Dim histogram with variable bins of type double; /// (see TH1::TH1 for explanation of parameters)",MatchSource.CODE_COMMENT,hist/hist/src/TH1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1K.cxx:115,Availability,error,error,115,"////////////////////////////////////////////////////////////////////////////////; /// Return content of global bin error.",MatchSource.CODE_COMMENT,hist/hist/src/TH1K.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1K.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1K.cxx:211,Modifiability,variab,variable,211,"////////////////////////////////////////////////////////////////////////////////; /// Save primitive as a C++ statement(s) on output stream out; /// Note the following restrictions in the code generated:; /// - variable bin size not implemented; /// - Objects in list of functions not saved (fits); /// - Contours not saved",MatchSource.CODE_COMMENT,hist/hist/src/TH1K.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1K.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx:13,Performance,perform,performing,13,"/// Function performing the actual merge",MatchSource.CODE_COMMENT,hist/hist/src/TH1Merger.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx:167,Energy Efficiency,power,power-of-,167,"/////////////////////////////////////////////////////////////////////////////////////////; /// Determine final boundaries and number of bins for histograms created in power-of-2; /// autobin mode.; ///; /// Return kTRUE if compatible, updating fNewXaxis accordingly; return kFALSE if something; /// wrong.; ///; /// The histograms are not merge-compatible if; ///; /// 1. have different variable-size bins; /// 2. larger bin size is not an integer multiple of the smaller one; /// 3. the final estimated range is smalle then the bin size; ///",MatchSource.CODE_COMMENT,hist/hist/src/TH1Merger.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx:387,Modifiability,variab,variable-size,387,"/////////////////////////////////////////////////////////////////////////////////////////; /// Determine final boundaries and number of bins for histograms created in power-of-2; /// autobin mode.; ///; /// Return kTRUE if compatible, updating fNewXaxis accordingly; return kFALSE if something; /// wrong.; ///; /// The histograms are not merge-compatible if; ///; /// 1. have different variable-size bins; /// 2. larger bin size is not an integer multiple of the smaller one; /// 3. the final estimated range is smalle then the bin size; ///",MatchSource.CODE_COMMENT,hist/hist/src/TH1Merger.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx:27,Energy Efficiency,power,power-of-,27,"// They must be created in power-of-2 autobin mode",MatchSource.CODE_COMMENT,hist/hist/src/TH1Merger.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx:20,Integrability,message,message,20,"// do here to print message only one time",MatchSource.CODE_COMMENT,hist/hist/src/TH1Merger.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx:70,Modifiability,extend,extended,70,"// Check compatibility of axis that have labels with axis that can be extended",MatchSource.CODE_COMMENT,hist/hist/src/TH1Merger.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx:64,Modifiability,extend,extended,64,"// it is sufficient to have a consistent label axis that can be extended",MatchSource.CODE_COMMENT,hist/hist/src/TH1Merger.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx:62,Modifiability,extend,extended,62,"// If histograms have labels but corresponding axes cannot be extended use bin center mode",MatchSource.CODE_COMMENT,hist/hist/src/TH1Merger.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx:72,Modifiability,extend,extended,72,"// special case for this histogram when is empty; // and axis cannot be extended (because it is the default)",MatchSource.CODE_COMMENT,hist/hist/src/TH1Merger.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx:141,Modifiability,extend,extendable,141,"// we don't need to check anymore for the case of non empty histograms containing labels.; // If we have some labels set and the axis is not extendable the LabelsMerge function handles; // that case correctly and falls back to a numeric merge",MatchSource.CODE_COMMENT,hist/hist/src/TH1Merger.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx:35,Safety,avoid,avoid,35,"// Reset fH0, if already added, to avoid double counting",MatchSource.CODE_COMMENT,hist/hist/src/TH1Merger.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx:10,Modifiability,extend,extend,10,"// we can extend eventually the axis if histogram is capable of doing it; // by using FindBin",MatchSource.CODE_COMMENT,hist/hist/src/TH1Merger.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx:118,Safety,detect,detected,118,"// do we need to support case when there are bins with labels and bins without them ??; // this case should have been detected before when examining the histograms",MatchSource.CODE_COMMENT,hist/hist/src/TH1Merger.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx:36,Modifiability,extend,extended,36,"// use find bin in case axis can be extended",MatchSource.CODE_COMMENT,hist/hist/src/TH1Merger.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.h:7,Energy Efficiency,power,power-of-,7,"// P2 (power-of-2) algorithm: all histogram have limits",MatchSource.CODE_COMMENT,hist/hist/src/TH1Merger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.h:57,Safety,avoid,avoid,57,"// The list contains fHClone, so let's clear it first to avoid; // accessing deleted memory later [we 'could' have just removed; // fHClone from the list]",MatchSource.CODE_COMMENT,hist/hist/src/TH1Merger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.h:67,Security,access,accessing,67,"// The list contains fHClone, so let's clear it first to avoid; // accessing deleted memory later [we 'could' have just removed; // fHClone from the list]",MatchSource.CODE_COMMENT,hist/hist/src/TH1Merger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.h:39,Usability,clear,clear,39,"// The list contains fHClone, so let's clear it first to avoid; // accessing deleted memory later [we 'could' have just removed; // fHClone from the list]",MatchSource.CODE_COMMENT,hist/hist/src/TH1Merger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:1404,Modifiability,variab,variable,1404,"entation); \class TH2I; \brief 2-D histogram with an int per channel (see TH1 documentation); \class TH2L; \brief 2-D histogram with a long64 per channel (see TH1 documentation); \class TH2F; \brief 2-D histogram with a float per channel (see TH1 documentation); \class TH2D; \brief 2-D histogram with a double per channel (see TH1 documentation); @}; */; /** \class TH2; Service class for 2-D histogram classes. - TH2C a 2-D histogram with one byte per cell (char). Maximum bin content = 127; - TH2S a 2-D histogram with two bytes per cell (short integer). Maximum bin content = 32767; - TH2I a 2-D histogram with four bytes per cell (32 bit integer). Maximum bin content = INT_MAX (\ref intmax2 ""*""); - TH2L a 2-D histogram with eight bytes per cell (64 bit integer). Maximum bin content = LLONG_MAX (\ref llongmax2 ""**""); - TH2F a 2-D histogram with four bytes per cell (float). Maximum precision 7 digits, maximum integer bin content = +/-16777216 (\ref floatmax2 ""***""); - TH2D a 2-D histogram with eight bytes per cell (double). Maximum precision 14 digits, maximum integer bin content = +/-9007199254740992 (\ref doublemax2 ""****""). <sup>; \anchor intmax2 (*) INT_MAX = 2147483647 is the [maximum value for a variable of type int.](https://docs.microsoft.com/en-us/cpp/c-language/cpp-integer-limits)<br>; \anchor llongmax2 (**) LLONG_MAX = 9223372036854775807 is the [maximum value for a variable of type long64.](https://docs.microsoft.com/en-us/cpp/c-language/cpp-integer-limits)<br>; \anchor floatmax2 (***) 2^24 = 16777216 is the [maximum integer that can be properly represented by a float32 with 23-bit mantissa.](https://stackoverflow.com/a/3793950/7471760)<br>; \anchor doublemax2 (****) 2^53 = 9007199254740992 is the [maximum integer that can be properly represented by a double64 with 52-bit mantissa.](https://stackoverflow.com/a/3793950/7471760); </sup>. */; ////////////////////////////////////////////////////////////////////////////////; /// 2-D histogram default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:1583,Modifiability,variab,variable,1583,"entation); \class TH2I; \brief 2-D histogram with an int per channel (see TH1 documentation); \class TH2L; \brief 2-D histogram with a long64 per channel (see TH1 documentation); \class TH2F; \brief 2-D histogram with a float per channel (see TH1 documentation); \class TH2D; \brief 2-D histogram with a double per channel (see TH1 documentation); @}; */; /** \class TH2; Service class for 2-D histogram classes. - TH2C a 2-D histogram with one byte per cell (char). Maximum bin content = 127; - TH2S a 2-D histogram with two bytes per cell (short integer). Maximum bin content = 32767; - TH2I a 2-D histogram with four bytes per cell (32 bit integer). Maximum bin content = INT_MAX (\ref intmax2 ""*""); - TH2L a 2-D histogram with eight bytes per cell (64 bit integer). Maximum bin content = LLONG_MAX (\ref llongmax2 ""**""); - TH2F a 2-D histogram with four bytes per cell (float). Maximum precision 7 digits, maximum integer bin content = +/-16777216 (\ref floatmax2 ""***""); - TH2D a 2-D histogram with eight bytes per cell (double). Maximum precision 14 digits, maximum integer bin content = +/-9007199254740992 (\ref doublemax2 ""****""). <sup>; \anchor intmax2 (*) INT_MAX = 2147483647 is the [maximum value for a variable of type int.](https://docs.microsoft.com/en-us/cpp/c-language/cpp-integer-limits)<br>; \anchor llongmax2 (**) LLONG_MAX = 9223372036854775807 is the [maximum value for a variable of type long64.](https://docs.microsoft.com/en-us/cpp/c-language/cpp-integer-limits)<br>; \anchor floatmax2 (***) 2^24 = 16777216 is the [maximum integer that can be properly represented by a float32 with 23-bit mantissa.](https://stackoverflow.com/a/3793950/7471760)<br>; \anchor doublemax2 (****) 2^53 = 9007199254740992 is the [maximum integer that can be properly represented by a double64 with 52-bit mantissa.](https://stackoverflow.com/a/3793950/7471760); </sup>. */; ////////////////////////////////////////////////////////////////////////////////; /// 2-D histogram default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:219,Safety,avoid,avoid,219,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for fix bin size 2-D histograms.; /// Creates the main histogram structure.; ///; /// \param[in] name name of histogram (avoid blanks); /// \param[in] title histogram title.; /// If title is of the form `stringt;stringx;stringy;stringz`,; /// the histogram title is set to `stringt`,; /// the x axis title to `stringx`, the y axis title to `stringy`, etc.; /// \param[in] nbinsx number of bins along the X axis; /// \param[in] xlow low edge of the X axis first bin; /// \param[in] xup upper edge of the X axis last bin (not included in last bin); /// \param[in] nbinsy number of bins along the Y axis; /// \param[in] ylow low edge of the Y axis first bin; /// \param[in] yup upper edge of the Y axis last bin (not included in last bin)",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:102,Modifiability,variab,variable,102,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for variable bin size (along X axis) 2-D histograms using an input array; /// of type double.; ///; /// \param[in] name name of histogram (avoid blanks); /// \param[in] title histogram title.; /// If title is of the form `stringt;stringx;stringy;stringz`; /// the histogram title is set to `stringt`,; /// the x axis title to `stringx`, the y axis title to `stringy`, etc.; /// \param[in] nbinsx number of bins; /// \param[in] xbins array of low-edges for each bin.; /// This is an array of type double and size nbinsx+1; /// \param[in] nbinsy number of bins along the Y axis; /// \param[in] ylow low edge of the Y axis first bin; /// \param[in] yup upper edge of the Y axis last bin (not included in last bin)",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:237,Safety,avoid,avoid,237,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for variable bin size (along X axis) 2-D histograms using an input array; /// of type double.; ///; /// \param[in] name name of histogram (avoid blanks); /// \param[in] title histogram title.; /// If title is of the form `stringt;stringx;stringy;stringz`; /// the histogram title is set to `stringt`,; /// the x axis title to `stringx`, the y axis title to `stringy`, etc.; /// \param[in] nbinsx number of bins; /// \param[in] xbins array of low-edges for each bin.; /// This is an array of type double and size nbinsx+1; /// \param[in] nbinsy number of bins along the Y axis; /// \param[in] ylow low edge of the Y axis first bin; /// \param[in] yup upper edge of the Y axis last bin (not included in last bin)",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:111,Modifiability,variab,variable,111,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for Double_t variable bin size (along Y axis) 2-D histograms.; ///; /// \param[in] name name of histogram (avoid blanks); /// \param[in] title histogram title.; /// If title is of the form `stringt;stringx;stringy;stringz`; /// the histogram title is set to `stringt`,; /// the x axis title to `stringx`, the y axis title to `stringy`, etc.; /// \param[in] nbinsx number of bins along the X axis; /// \param[in] xlow low edge of the X axis first bin; /// \param[in] xup upper edge of the X axis last bin (not included in last bin); /// \param[in] nbinsy number of bins; /// \param[in] ybins array of low-edges for each bin.; /// This is an array of type double and size nbinsy+1",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:205,Safety,avoid,avoid,205,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for Double_t variable bin size (along Y axis) 2-D histograms.; ///; /// \param[in] name name of histogram (avoid blanks); /// \param[in] title histogram title.; /// If title is of the form `stringt;stringx;stringy;stringz`; /// the histogram title is set to `stringt`,; /// the x axis title to `stringx`, the y axis title to `stringy`, etc.; /// \param[in] nbinsx number of bins along the X axis; /// \param[in] xlow low edge of the X axis first bin; /// \param[in] xup upper edge of the X axis last bin (not included in last bin); /// \param[in] nbinsy number of bins; /// \param[in] ybins array of low-edges for each bin.; /// This is an array of type double and size nbinsy+1",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:111,Modifiability,variab,variable,111,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for Double_t variable bin size 2-D histograms.; ///; /// \param[in] name name of histogram (avoid blanks); /// \param[in] title histogram title.; /// If title is of the form `stringt;stringx;stringy;stringz`; /// the histogram title is set to `stringt`,; /// the x axis title to `stringx`, the y axis title to `stringy`, etc.; /// \param[in] nbinsx number of bins; /// \param[in] xbins array of low-edges for each bin.; /// This is an array of type double and size nbinsx+1; /// \param[in] nbinsy number of bins; /// \param[in] ybins array of low-edges for each bin.; /// This is an array of type double and size nbinsy+1",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:190,Safety,avoid,avoid,190,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for Double_t variable bin size 2-D histograms.; ///; /// \param[in] name name of histogram (avoid blanks); /// \param[in] title histogram title.; /// If title is of the form `stringt;stringx;stringy;stringz`; /// the histogram title is set to `stringt`,; /// the x axis title to `stringx`, the y axis title to `stringy`, etc.; /// \param[in] nbinsx number of bins; /// \param[in] xbins array of low-edges for each bin.; /// This is an array of type double and size nbinsx+1; /// \param[in] nbinsy number of bins; /// \param[in] ybins array of low-edges for each bin.; /// This is an array of type double and size nbinsy+1",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:102,Modifiability,variab,variable,102,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for variable bin size (along X and Y axis) 2-D histograms using input; /// arrays of type float.; ///; /// \param[in] name name of histogram (avoid blanks); /// \param[in] title histogram title.; /// If title is of the form `stringt;stringx;stringy;stringz`; /// the histogram title is set to `stringt`,; /// the x axis title to `stringx`, the y axis title to `stringy`, etc.; /// \param[in] nbinsx number of bins; /// \param[in] xbins array of low-edges for each bin.; /// This is an array of type float and size nbinsx+1; /// \param[in] nbinsy number of bins; /// \param[in] ybins array of low-edges for each bin.; /// This is an array of type float and size nbinsy+1",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:240,Safety,avoid,avoid,240,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for variable bin size (along X and Y axis) 2-D histograms using input; /// arrays of type float.; ///; /// \param[in] name name of histogram (avoid blanks); /// \param[in] title histogram title.; /// If title is of the form `stringt;stringx;stringy;stringz`; /// the histogram title is set to `stringt`,; /// the x axis title to `stringx`, the y axis title to `stringy`, etc.; /// \param[in] nbinsx number of bins; /// \param[in] xbins array of low-edges for each bin.; /// This is an array of type float and size nbinsx+1; /// \param[in] nbinsy number of bins; /// \param[in] ybins array of low-edges for each bin.; /// This is an array of type float and size nbinsy+1",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:74,Modifiability,extend,extended,74,"// skip computation of the statistics along axis that have labels (can be extended and are alphanumeric)",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:70,Availability,mask,mask,70,"// skip statistics along x axis, for only one axis no need to use bit mask from GetAxisLabelStatus",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:410,Deployability,integrat,integrated,410,"////////////////////////////////////////////////////////////////////////////////; /// Fill histogram following distribution in function fname.; ///; /// @param fname : Function name used for filling the histogram; /// @param ntimes : number of times the histogram is filled; /// @param rng : (optional) Random number generator used to sample; ///; /// The distribution contained in the function fname (TF2) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Fill histogram channel; /// ntimes random numbers are generated; ///; /// One can also call TF2::GetRandom2 to get a random variate from a function.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:410,Integrability,integrat,integrated,410,"////////////////////////////////////////////////////////////////////////////////; /// Fill histogram following distribution in function fname.; ///; /// @param fname : Function name used for filling the histogram; /// @param ntimes : number of times the histogram is filled; /// @param rng : (optional) Random number generator used to sample; ///; /// The distribution contained in the function fname (TF2) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Fill histogram channel; /// ntimes random numbers are generated; ///; /// One can also call TF2::GetRandom2 to get a random variate from a function.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate temporary space to store the integral and compute integral",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:408,Deployability,integrat,integrated,408,"////////////////////////////////////////////////////////////////////////////////; /// Fill histogram following distribution in histogram h.; ///; /// @param h : Histogram pointer used for sampling random number; /// @param ntimes : number of times the histogram is filled; /// @param rng : (optional) Random number generator used for sampling; ///; /// The distribution contained in the histogram h (TH2) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Fill histogram channel; /// ntimes random numbers are generated",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:408,Integrability,integrat,integrated,408,"////////////////////////////////////////////////////////////////////////////////; /// Fill histogram following distribution in histogram h.; ///; /// @param h : Histogram pointer used for sampling random number; /// @param ntimes : number of times the histogram is filled; /// @param rng : (optional) Random number generator used for sampling; ///; /// The distribution contained in the histogram h (TH2) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Fill histogram channel; /// ntimes random numbers are generated",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:2567,Security,access,access,2567,"result of the fit; /// - ""R"" means fit the function in the specified function range; /// - ""G2"" merge 2 consecutive bins along X; /// - ""G3"" merge 3 consecutive bins along X; /// - ""G4"" merge 4 consecutive bins along X; /// - ""G5"" merge 5 consecutive bins along X; /// - ""S"" sliding merge: merge n consecutive bins along X accordingly to what Gn is given.; /// It makes sense when used together with a Gn option; ///; /// The generated histograms are returned by adding them to arr, if arr is not NULL.; /// arr's SetOwner() is called, to signal that it is the user's responsibility to; /// delete the histograms, possibly by deleting the array.; /// ~~~ {.cpp}; /// TObjArray aSlices;; /// h2->FitSlicesX(func, 0, -1, 0, ""QNR"", &aSlices);; /// ~~~; /// will already delete the histograms once aSlice goes out of scope. aSlices will; /// contain the histogram for the i-th parameter of the fit function at aSlices[i];; /// aSlices[n] (n being the number of parameters) contains the chi2 distribution of; /// the fits.; ///; /// If arr is NULL, the generated histograms are added to the list of objects; /// in the current directory. It is the user's responsibility to delete; /// these histograms.; ///; /// Example: Assume a 2-d histogram h2; /// ~~~ {.cpp}; /// Root > h2->FitSlicesX(); produces 4 TH1D histograms; /// with h2_0 containing parameter 0(Constant) for a Gaus fit; /// of each bin in Y projected along X; /// with h2_1 containing parameter 1(Mean) for a gaus fit; /// with h2_2 containing parameter 2(StdDev) for a gaus fit; /// with h2_chi2 containing the chisquare/number of degrees of freedom for a gaus fit; ///; /// Root > h2->FitSlicesX(0,15,22,10);; /// same as above, but only for bins 15 to 22 along Y; /// and only for bins in Y for which the corresponding projection; /// along X has more than cut bins filled.; /// ~~~; /// NOTE: To access the generated histograms in the current directory, do eg:; /// ~~~ {.cpp}; /// TH1D *h2_1 = (TH1D*)gDirectory->Get(""h2_1"");; /// ~~~",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:2572,Security,access,access,2572,"// - ""G2"" merge 2 consecutive bins along Y; /// - ""G3"" merge 3 consecutive bins along Y; /// - ""G4"" merge 4 consecutive bins along Y; /// - ""G5"" merge 5 consecutive bins along Y; /// - ""S"" sliding merge: merge n consecutive bins along Y accordingly to what Gn is given.; /// It makes sense when used together with a Gn option; ///; /// The generated histograms are returned by adding them to arr, if arr is not NULL.; /// arr's SetOwner() is called, to signal that it is the user's responsibility to; /// delete the histograms, possibly by deleting the array.; /// ~~~ {.cpp}; /// TObjArray aSlices;; /// h2->FitSlicesY(func, 0, -1, 0, ""QNR"", &aSlices);; /// ~~~; /// will already delete the histograms once aSlice goes out of scope. aSlices will; /// contain the histogram for the i-th parameter of the fit function at aSlices[i];; /// aSlices[n] (n being the number of parameters) contains the chi2 distribution of; /// the fits.; ///; /// If arr is NULL, the generated histograms are added to the list of objects; /// in the current directory. It is the user's responsibility to delete; /// these histograms.; ///; /// Example: Assume a 2-d histogram h2; /// ~~~ {.cpp}; /// Root > h2->FitSlicesY(); produces 4 TH1D histograms; /// with h2_0 containing parameter 0(Constant) for a Gaus fit; /// of each bin in X projected along Y; /// with h2_1 containing parameter 1(Mean) for a gaus fit; /// with h2_2 containing parameter 2(StdDev) for a gaus fit; /// with h2_chi2 containing the chisquare/number of degrees of freedom for a gaus fit; ///; /// Root > h2->FitSlicesY(0,15,22,10);; /// same as above, but only for bins 15 to 22 along X; /// and only for bins in X for which the corresponding projection; /// along Y has more than cut bins filled.; /// ~~~; ///; /// NOTE: To access the generated histograms in the current directory, do eg:; /// ~~~ {.cpp}; /// TH1D *h2_1 = (TH1D*)gDirectory->Get(""h2_1"");; /// ~~~; ///; /// A complete example of this function is given in tutorial:fitslicesy.C.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:491,Usability,simpl,simply,491,"////////////////////////////////////////////////////////////////////////////////; /// Fill the array stats from the contents of this histogram; /// The array stats must be correctly dimensioned in the calling program.; /// ~~~ {.cpp}; /// stats[0] = sumw; /// stats[1] = sumw2; /// stats[2] = sumwx; /// stats[3] = sumwx2; /// stats[4] = sumwy; /// stats[5] = sumwy2; /// stats[6] = sumwxy; /// ~~~; ///; /// If no axis-subranges are specified (via TAxis::SetRange), the array stats; /// is simply a copy of the statistics quantities computed at filling time.; /// If sub-ranges are specified, the function recomputes these quantities; /// from the bin contents in the current axis ranges.; ///; /// Note that the mean value/StdDev is computed using the bins in the currently; /// defined ranges (see TAxis::SetRange). By default the ranges include; /// all bins from 1 to nbins included, excluding underflows and overflows.; /// To force the underflows and overflows in the computation, one must; /// call the static function TH1::StatOverflows(kTRUE) before filling; /// the histogram.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:3,Safety,avoid,avoid,3,"// avoid some extra multiplications at the expense of some clarity",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:224,Availability,error,error,224,"////////////////////////////////////////////////////////////////////////////////; /// Return integral of bin contents in range [firstxbin,lastxbin],[firstybin,lastybin]; /// for a 2-D histogram. Calculates also the integral error using error propagation; /// from the bin errors assuming that all the bins are uncorrelated.; /// By default the integral is computed as the sum of bin contents in the range.; /// if option ""width"" is specified, the integral is the sum of; /// the bin contents multiplied by the bin width in x and in y.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:236,Availability,error,error,236,"////////////////////////////////////////////////////////////////////////////////; /// Return integral of bin contents in range [firstxbin,lastxbin],[firstybin,lastybin]; /// for a 2-D histogram. Calculates also the integral error using error propagation; /// from the bin errors assuming that all the bins are uncorrelated.; /// By default the integral is computed as the sum of bin contents in the range.; /// if option ""width"" is specified, the integral is the sum of; /// the bin contents multiplied by the bin width in x and in y.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:272,Availability,error,errors,272,"////////////////////////////////////////////////////////////////////////////////; /// Return integral of bin contents in range [firstxbin,lastxbin],[firstybin,lastybin]; /// for a 2-D histogram. Calculates also the integral error using error propagation; /// from the bin errors assuming that all the bins are uncorrelated.; /// By default the integral is computed as the sum of bin contents in the range.; /// if option ""width"" is specified, the integral is the sum of; /// the bin contents multiplied by the bin width in x and in y.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:1008,Energy Efficiency,adapt,adapted,1008,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// THIS histogram and h2, using Kolmogorov test.; /// Default: Ignore under- and overflow bins in comparison; ///; /// option is a character string to specify options; /// - ""U"" include Underflows in test; /// - ""O"" include Overflows; /// - ""N"" include comparison of normalizations; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// The KS test uses the distance between the pseudo-CDF's obtained; /// from the histogram. Since in 2D the order for generating the pseudo-CDF is; /// arbitrary, two pairs of pseudo-CDF are used, one starting from the x axis the; /// other from the y axis and the maximum distance is the average of the two maximum; /// distances obtained.; ///; /// Code adapted by Rene Brun from original HBOOK routine HDIFF",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:1049,Integrability,rout,routine,1049,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// THIS histogram and h2, using Kolmogorov test.; /// Default: Ignore under- and overflow bins in comparison; ///; /// option is a character string to specify options; /// - ""U"" include Underflows in test; /// - ""O"" include Overflows; /// - ""N"" include comparison of normalizations; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// The KS test uses the distance between the pseudo-CDF's obtained; /// from the histogram. Since in 2D the order for generating the pseudo-CDF is; /// arbitrary, two pairs of pseudo-CDF are used, one starting from the x axis the; /// other from the y axis and the maximum distance is the average of the two maximum; /// distances obtained.; ///; /// Code adapted by Rene Brun from original HBOOK routine HDIFF",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:1008,Modifiability,adapt,adapted,1008,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// THIS histogram and h2, using Kolmogorov test.; /// Default: Ignore under- and overflow bins in comparison; ///; /// option is a character string to specify options; /// - ""U"" include Underflows in test; /// - ""O"" include Overflows; /// - ""N"" include comparison of normalizations; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// The KS test uses the distance between the pseudo-CDF's obtained; /// from the histogram. Since in 2D the order for generating the pseudo-CDF is; /// arbitrary, two pairs of pseudo-CDF are used, one starting from the x axis the; /// other from the y axis and the maximum distance is the average of the two maximum; /// distances obtained.; ///; /// Code adapted by Rene Brun from original HBOOK routine HDIFF",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:98,Testability,test,test,98,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// THIS histogram and h2, using Kolmogorov test.; /// Default: Ignore under- and overflow bins in comparison; ///; /// option is a character string to specify options; /// - ""U"" include Underflows in test; /// - ""O"" include Overflows; /// - ""N"" include comparison of normalizations; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// The KS test uses the distance between the pseudo-CDF's obtained; /// from the histogram. Since in 2D the order for generating the pseudo-CDF is; /// arbitrary, two pairs of pseudo-CDF are used, one starting from the x axis the; /// other from the y axis and the maximum distance is the average of the two maximum; /// distances obtained.; ///; /// Code adapted by Rene Brun from original HBOOK routine HDIFF",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:182,Testability,test,test,182,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// THIS histogram and h2, using Kolmogorov test.; /// Default: Ignore under- and overflow bins in comparison; ///; /// option is a character string to specify options; /// - ""U"" include Underflows in test; /// - ""O"" include Overflows; /// - ""N"" include comparison of normalizations; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// The KS test uses the distance between the pseudo-CDF's obtained; /// from the histogram. Since in 2D the order for generating the pseudo-CDF is; /// arbitrary, two pairs of pseudo-CDF are used, one starting from the x axis the; /// other from the y axis and the maximum distance is the average of the two maximum; /// distances obtained.; ///; /// Code adapted by Rene Brun from original HBOOK routine HDIFF",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:339,Testability,test,test,339,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// THIS histogram and h2, using Kolmogorov test.; /// Default: Ignore under- and overflow bins in comparison; ///; /// option is a character string to specify options; /// - ""U"" include Underflows in test; /// - ""O"" include Overflows; /// - ""N"" include comparison of normalizations; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// The KS test uses the distance between the pseudo-CDF's obtained; /// from the histogram. Since in 2D the order for generating the pseudo-CDF is; /// arbitrary, two pairs of pseudo-CDF are used, one starting from the x axis the; /// other from the y axis and the maximum distance is the average of the two maximum; /// distances obtained.; ///; /// Code adapted by Rene Brun from original HBOOK routine HDIFF",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:593,Testability,test,test,593,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// THIS histogram and h2, using Kolmogorov test.; /// Default: Ignore under- and overflow bins in comparison; ///; /// option is a character string to specify options; /// - ""U"" include Underflows in test; /// - ""O"" include Overflows; /// - ""N"" include comparison of normalizations; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// The KS test uses the distance between the pseudo-CDF's obtained; /// from the histogram. Since in 2D the order for generating the pseudo-CDF is; /// arbitrary, two pairs of pseudo-CDF are used, one starting from the x axis the; /// other from the y axis and the maximum distance is the average of the two maximum; /// distances obtained.; ///; /// Code adapted by Rene Brun from original HBOOK routine HDIFF",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:662,Testability,test,test,662,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// THIS histogram and h2, using Kolmogorov test.; /// Default: Ignore under- and overflow bins in comparison; ///; /// option is a character string to specify options; /// - ""U"" include Underflows in test; /// - ""O"" include Overflows; /// - ""N"" include comparison of normalizations; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// The KS test uses the distance between the pseudo-CDF's obtained; /// from the histogram. Since in 2D the order for generating the pseudo-CDF is; /// arbitrary, two pairs of pseudo-CDF are used, one starting from the x axis the; /// other from the y axis and the maximum distance is the average of the two maximum; /// distances obtained.; ///; /// Code adapted by Rene Brun from original HBOOK routine HDIFF",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:54,Availability,error,errors,54,"// calculate the effective entries.; // the case when errors are zero (w1 == 0 or w2 ==0) are equivalent to; // compare to a function. In that case the rescaling is done only on sqrt(esum2) or sqrt(esum1)",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:18,Availability,error,error,18,"// This numerical error condition should never occur:",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:221,Availability,error,error,221,"////////////////////////////////////////////////////////////////////////////////; /// Override TH1::Rebin as TH2::RebinX; /// Rebinning in variable binning as for TH1 is not allowed; /// If a non-null pointer is given an error is flagged; /// see RebinX and Rebin2D",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:139,Modifiability,variab,variable,139,"////////////////////////////////////////////////////////////////////////////////; /// Override TH1::Rebin as TH2::RebinX; /// Rebinning in variable binning as for TH1 is not allowed; /// If a non-null pointer is given an error is flagged; /// see RebinX and Rebin2D",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:467,Availability,error,errors,467,"////////////////////////////////////////////////////////////////////////////////; /// Rebin this histogram grouping nxgroup/nygroup bins along the xaxis/yaxis together.; ///; /// if newname is not blank a new temporary histogram hnew is created.; /// else the current histogram is modified (default); /// The parameter nxgroup/nygroup indicate how many bins along the xaxis/yaxis of this; /// have to me merged into one bin of hnew; /// If the original histogram has errors stored (via Sumw2), the resulting; /// histograms has new errors correctly calculated.; ///; /// examples: if hpxpy is an existing TH2 histogram with 40 x 40 bins; /// ~~~ {.cpp}; /// hpxpy->Rebin2D(); // merges two bins along the xaxis and yaxis in one in hpxpy; /// // Carefull: previous contents of hpxpy are lost; /// hpxpy->RebinX(5); //merges five bins along the xaxis in one in hpxpy; /// TH2 *hnew = hpxpy->RebinY(5,""hnew""); // creates a new histogram hnew; /// // merging 5 bins of h1 along the yaxis in one bin; /// ~~~; ///; /// NOTE : If nxgroup/nygroup is not an exact divider of the number of bins,; /// along the xaxis/yaxis the top limit(s) of the rebinned histogram; /// is changed to the upper edge of the xbin=newxbins*nxgroup resp.; /// ybin=newybins*nygroup and the corresponding bins are added to; /// the overflow bin.; /// Statistics will be recomputed from the new bin contents.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:532,Availability,error,errors,532,"////////////////////////////////////////////////////////////////////////////////; /// Rebin this histogram grouping nxgroup/nygroup bins along the xaxis/yaxis together.; ///; /// if newname is not blank a new temporary histogram hnew is created.; /// else the current histogram is modified (default); /// The parameter nxgroup/nygroup indicate how many bins along the xaxis/yaxis of this; /// have to me merged into one bin of hnew; /// If the original histogram has errors stored (via Sumw2), the resulting; /// histograms has new errors correctly calculated.; ///; /// examples: if hpxpy is an existing TH2 histogram with 40 x 40 bins; /// ~~~ {.cpp}; /// hpxpy->Rebin2D(); // merges two bins along the xaxis and yaxis in one in hpxpy; /// // Carefull: previous contents of hpxpy are lost; /// hpxpy->RebinX(5); //merges five bins along the xaxis in one in hpxpy; /// TH2 *hnew = hpxpy->RebinY(5,""hnew""); // creates a new histogram hnew; /// // merging 5 bins of h1 along the yaxis in one bin; /// ~~~; ///; /// NOTE : If nxgroup/nygroup is not an exact divider of the number of bins,; /// along the xaxis/yaxis the top limit(s) of the rebinned histogram; /// is changed to the upper edge of the xbin=newxbins*nxgroup resp.; /// ybin=newybins*nygroup and the corresponding bins are added to; /// the overflow bin.; /// Statistics will be recomputed from the new bin contents.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:3,Modifiability,variab,variable,3,"// variable bin sizes in x or y, don't treat both cases separately",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:16,Availability,error,errors,16,"// changes also errors array (if any)",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:15,Availability,error,errors,15,"//changes also errors array",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:85,Safety,avoid,avoid,85,"// reset the existing histogram and set always the new binning for the axis; // This avoid problems when the histogram already exists and the histograms is rebinned or its range has changed; // (see https://savannah.cern.ch/bugs/?94101 or https://savannah.cern.ch/bugs/?95808 )",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:8,Modifiability,variab,variable,8,"// case variable bins",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:8,Modifiability,variab,variable,8,"// case variable bins",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:52,Availability,avail,available,52,"// Fill the profile histogram; // no entries/bin is available so can fill only using bin content as weight; // implement filling of projected histogram; // outbin is bin number of outAxis (the projected axis). Loop is done on all bin of TH2 histograms; // inbin is the axis being integrated. Loop is done only on the selected bins",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:280,Deployability,integrat,integrated,280,"// Fill the profile histogram; // no entries/bin is available so can fill only using bin content as weight; // implement filling of projected histogram; // outbin is bin number of outAxis (the projected axis). Loop is done on all bin of TH2 histograms; // inbin is the axis being integrated. Loop is done only on the selected bins",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:280,Integrability,integrat,integrated,280,"// Fill the profile histogram; // no entries/bin is available so can fill only using bin content as weight; // implement filling of projected histogram; // outbin is bin number of outAxis (the projected axis). Loop is done on all bin of TH2 histograms; // inbin is the axis being integrated. Loop is done only on the selected bins",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:22,Deployability,update,update,22,"// the following fill update wrongly the fBinSumw2- need to save it before",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:807,Availability,error,error,807,"////////////////////////////////////////////////////////////////////////////////; /// Project a 2-D histogram into a profile histogram along X.; ///; /// The projection is made from the channels along the Y axis; /// ranging from firstybin to lastybin included.; /// By default, bins 1 to ny are included; /// When all bins are included, the number of entries in the projection; /// is set to the number of entries of the 2-D histogram, otherwise; /// the number of entries is incremented by 1 for all non empty cells.; ///; /// if option ""d"" is specified, the profile is drawn in the current pad.; ///; /// if option ""o"" original axis range of the target axes will be; /// kept, but only bins inside the selected range will be filled.; ///; /// The option can also be used to specify the projected profile error type.; /// Values which can be used are 's', 'i', or 'g'. See TProfile::BuildOptions for details; ///; /// Using a TCutG object, it is possible to select a sub-range of a 2-D histogram.; /// One must create a graphical cut (mouse or C++) and specify the name; /// of the cut between [] in the option.; /// For example, with a TCutG named ""cutg"", one can call:; /// myhist->ProfileX("" "",firstybin,lastybin,""[cutg]"");; /// To invert the cut, it is enough to put a ""-"" in front of its name:; /// myhist->ProfileX("" "",firstybin,lastybin,""[-cutg]"");; /// It is possible to apply several cuts ("","" means logical AND):; /// myhist->ProfileX("" "",firstybin,lastybin,""[cutg1,cutg2]"");; ///; /// NOTE that if a TProfile named ""name"" exists in the current directory or pad with; /// a compatible axis the profile is reset and filled again with the projected contents of the TH2.; /// In the case of axis incompatibility an error is reported and a NULL pointer is returned.; ///; /// NOTE that the X axis attributes of the TH2 are copied to the X axis of the profile.; ///; /// NOTE that the default under- / overflow behavior differs from what ProjectionX; /// does! Profiles take the bin center into",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:1724,Availability,error,error,1724,"D histogram, otherwise; /// the number of entries is incremented by 1 for all non empty cells.; ///; /// if option ""d"" is specified, the profile is drawn in the current pad.; ///; /// if option ""o"" original axis range of the target axes will be; /// kept, but only bins inside the selected range will be filled.; ///; /// The option can also be used to specify the projected profile error type.; /// Values which can be used are 's', 'i', or 'g'. See TProfile::BuildOptions for details; ///; /// Using a TCutG object, it is possible to select a sub-range of a 2-D histogram.; /// One must create a graphical cut (mouse or C++) and specify the name; /// of the cut between [] in the option.; /// For example, with a TCutG named ""cutg"", one can call:; /// myhist->ProfileX("" "",firstybin,lastybin,""[cutg]"");; /// To invert the cut, it is enough to put a ""-"" in front of its name:; /// myhist->ProfileX("" "",firstybin,lastybin,""[-cutg]"");; /// It is possible to apply several cuts ("","" means logical AND):; /// myhist->ProfileX("" "",firstybin,lastybin,""[cutg1,cutg2]"");; ///; /// NOTE that if a TProfile named ""name"" exists in the current directory or pad with; /// a compatible axis the profile is reset and filled again with the projected contents of the TH2.; /// In the case of axis incompatibility an error is reported and a NULL pointer is returned.; ///; /// NOTE that the X axis attributes of the TH2 are copied to the X axis of the profile.; ///; /// NOTE that the default under- / overflow behavior differs from what ProjectionX; /// does! Profiles take the bin center into account, so here the under- and overflow; /// bins are ignored by default.; ///; /// NOTE that the return profile histogram is computed using the Y bin center values instead of; /// the real Y values which are used to fill the 2d histogram. Therefore the obtained profile is just an approximation of the; /// correct profile histogram that would be obtained when filling it directly with the original data (see ROOT-7770)",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:1411,Testability,log,logical,1411," number of entries of the 2-D histogram, otherwise; /// the number of entries is incremented by 1 for all non empty cells.; ///; /// if option ""d"" is specified, the profile is drawn in the current pad.; ///; /// if option ""o"" original axis range of the target axes will be; /// kept, but only bins inside the selected range will be filled.; ///; /// The option can also be used to specify the projected profile error type.; /// Values which can be used are 's', 'i', or 'g'. See TProfile::BuildOptions for details; ///; /// Using a TCutG object, it is possible to select a sub-range of a 2-D histogram.; /// One must create a graphical cut (mouse or C++) and specify the name; /// of the cut between [] in the option.; /// For example, with a TCutG named ""cutg"", one can call:; /// myhist->ProfileX("" "",firstybin,lastybin,""[cutg]"");; /// To invert the cut, it is enough to put a ""-"" in front of its name:; /// myhist->ProfileX("" "",firstybin,lastybin,""[-cutg]"");; /// It is possible to apply several cuts ("","" means logical AND):; /// myhist->ProfileX("" "",firstybin,lastybin,""[cutg1,cutg2]"");; ///; /// NOTE that if a TProfile named ""name"" exists in the current directory or pad with; /// a compatible axis the profile is reset and filled again with the projected contents of the TH2.; /// In the case of axis incompatibility an error is reported and a NULL pointer is returned.; ///; /// NOTE that the X axis attributes of the TH2 are copied to the X axis of the profile.; ///; /// NOTE that the default under- / overflow behavior differs from what ProjectionX; /// does! Profiles take the bin center into account, so here the under- and overflow; /// bins are ignored by default.; ///; /// NOTE that the return profile histogram is computed using the Y bin center values instead of; /// the real Y values which are used to fill the 2d histogram. Therefore the obtained profile is just an approximation of the; /// correct profile histogram that would be obtained when filling it directly with the or",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:813,Availability,error,error,813,"////////////////////////////////////////////////////////////////////////////////; /// Project a 2-D histogram into a profile histogram along Y.; ///; /// The projection is made from the channels along the X axis; /// ranging from firstxbin to lastxbin included.; /// By default, bins 1 to nx are included; /// When all bins are included, the number of entries in the projection; /// is set to the number of entries of the 2-D histogram, otherwise; /// the number of entries is incremented by 1 for all non empty cells.; ///; /// if option ""d"" is specified, the profile is drawn in the current pad.; ///; /// if option ""o"" , the original axis range of the target axis will be; /// kept, but only bins inside the selected range will be filled.; ///; /// The option can also be used to specify the projected profile error type.; /// Values which can be used are 's', 'i', or 'g'. See TProfile::BuildOptions for details; /// Using a TCutG object, it is possible to select a sub-range of a 2-D histogram.; ///; /// One must create a graphical cut (mouse or C++) and specify the name; /// of the cut between [] in the option.; /// For example, with a TCutG named ""cutg"", one can call:; /// myhist->ProfileY("" "",firstybin,lastybin,""[cutg]"");; /// To invert the cut, it is enough to put a ""-"" in front of its name:; /// myhist->ProfileY("" "",firstybin,lastybin,""[-cutg]"");; /// It is possible to apply several cuts:; /// myhist->ProfileY("" "",firstybin,lastybin,""[cutg1,cutg2]"");; ///; /// NOTE that if a TProfile named ""name"" exists in the current directory or pad with; /// a compatible axis the profile is reset and filled again with the projected contents of the TH2.; /// In the case of axis incompatibility an error is reported and a NULL pointer is returned.; ///; /// NOTE that the Y axis attributes of the TH2 are copied to the X axis of the profile.; ///; /// NOTE that the default under- / overflow behavior differs from what ProjectionX; /// does! Profiles take the bin center into account, so here ",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:1706,Availability,error,error,1706," entries of the 2-D histogram, otherwise; /// the number of entries is incremented by 1 for all non empty cells.; ///; /// if option ""d"" is specified, the profile is drawn in the current pad.; ///; /// if option ""o"" , the original axis range of the target axis will be; /// kept, but only bins inside the selected range will be filled.; ///; /// The option can also be used to specify the projected profile error type.; /// Values which can be used are 's', 'i', or 'g'. See TProfile::BuildOptions for details; /// Using a TCutG object, it is possible to select a sub-range of a 2-D histogram.; ///; /// One must create a graphical cut (mouse or C++) and specify the name; /// of the cut between [] in the option.; /// For example, with a TCutG named ""cutg"", one can call:; /// myhist->ProfileY("" "",firstybin,lastybin,""[cutg]"");; /// To invert the cut, it is enough to put a ""-"" in front of its name:; /// myhist->ProfileY("" "",firstybin,lastybin,""[-cutg]"");; /// It is possible to apply several cuts:; /// myhist->ProfileY("" "",firstybin,lastybin,""[cutg1,cutg2]"");; ///; /// NOTE that if a TProfile named ""name"" exists in the current directory or pad with; /// a compatible axis the profile is reset and filled again with the projected contents of the TH2.; /// In the case of axis incompatibility an error is reported and a NULL pointer is returned.; ///; /// NOTE that the Y axis attributes of the TH2 are copied to the X axis of the profile.; ///; /// NOTE that the default under- / overflow behavior differs from what ProjectionX; /// does! Profiles take the bin center into account, so here the under- and overflow; /// bins are ignored by default.; ///; /// NOTE that the return profile histogram is computed using the X bin center values instead of; /// the real X values which are used to fill the 2d histogram. Therefore the obtained profile is just an approximation of the; /// correct profile histogram that would be obtained when filling it directly with the original data (see ROOT-7770)",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:118,Performance,perform,performing,118,"////////////////////////////////////////////////////////////////////////////////; /// Internal (protected) method for performing projection on the X or Y axis; /// called by ProjectionX or ProjectionY",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:85,Safety,avoid,avoid,85,"// reset the existing histogram and set always the new binning for the axis; // This avoid problems when the histogram already exists and the histograms is rebinned or its range has changed; // (see https://savannah.cern.ch/bugs/?94101 or https://savannah.cern.ch/bugs/?95808 )",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:8,Modifiability,variab,variable,8,"// case variable bins",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:8,Modifiability,variab,variable,8,"// case variable bins",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:172,Deployability,integrat,integrated,172,"// implement filling of projected histogram; // outbin is bin number of outAxis (the projected axis). Loop is done on all bin of TH2 histograms; // inbin is the axis being integrated. Loop is done only on the selected bins; // if the out axis has labels and is extendable, temporary make it non-extendable to avoid adding extra bins",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:172,Integrability,integrat,integrated,172,"// implement filling of projected histogram; // outbin is bin number of outAxis (the projected axis). Loop is done on all bin of TH2 histograms; // inbin is the axis being integrated. Loop is done only on the selected bins; // if the out axis has labels and is extendable, temporary make it non-extendable to avoid adding extra bins",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:261,Modifiability,extend,extendable,261,"// implement filling of projected histogram; // outbin is bin number of outAxis (the projected axis). Loop is done on all bin of TH2 histograms; // inbin is the axis being integrated. Loop is done only on the selected bins; // if the out axis has labels and is extendable, temporary make it non-extendable to avoid adding extra bins",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:295,Modifiability,extend,extendable,295,"// implement filling of projected histogram; // outbin is bin number of outAxis (the projected axis). Loop is done on all bin of TH2 histograms; // inbin is the axis being integrated. Loop is done only on the selected bins; // if the out axis has labels and is extendable, temporary make it non-extendable to avoid adding extra bins",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:309,Safety,avoid,avoid,309,"// implement filling of projected histogram; // outbin is bin number of outAxis (the projected axis). Loop is done on all bin of TH2 histograms; // inbin is the axis being integrated. Loop is done only on the selected bins; // if the out axis has labels and is extendable, temporary make it non-extendable to avoid adding extra bins",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:23,Availability,error,error,23,"// sum bin content and error if needed",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:41,Availability,error,error,41,"// re-compute the entries; // in case of error calculation (i.e. when Sumw2() is set); // use the effective entries for the entries; // since this is the only way to estimate them",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:6,Safety,avoid,avoid,6,"// to avoid numerical rounding",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:684,Availability,error,errors,684,"////////////////////////////////////////////////////////////////////////////////; /// Project a 2-D histogram into a 1-D histogram along X.; ///; /// The projection is always of the type TH1D.; /// The projection is made from the channels along the Y axis; /// ranging from firstybin to lastybin included.; /// By default, all bins including under- and overflow are included.; /// The number of entries in the projection is estimated from the; /// number of effective entries for all the cells included in the projection.; ///; /// To exclude the underflow bins in Y, use firstybin=1.; /// To exclude the overflow bins in Y, use lastybin=nx.; ///; /// if option ""e"" is specified, the errors are computed.; /// if option ""d"" is specified, the projection is drawn in the current pad.; /// if option ""o"" original axis range of the target axes will be; /// kept, but only bins inside the selected range will be filled.; ///; /// Using a TCutG object, it is possible to select a sub-range of a 2-D histogram.; /// One must create a graphical cut (mouse or C++) and specify the name; /// of the cut between [] in the option.; /// For example, with a TCutG named ""cutg"", one can call:; /// myhist->ProjectionX("" "",firstybin,lastybin,""[cutg]"");; /// To invert the cut, it is enough to put a ""-"" in front of its name:; /// myhist->ProjectionX("" "",firstybin,lastybin,""[-cutg]"");; /// It is possible to apply several cuts:; /// myhist->ProjectionX("" "",firstybin,lastybin,""[cutg1,cutg2]"");; ///; /// NOTE that if a TH1D named ""name"" exists in the current directory or pad; /// the histogram is reset and filled again with the projected contents of the TH2.; ///; /// NOTE that the X axis attributes of the TH2 are copied to the X axis of the projection.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:683,Availability,error,errors,683,"////////////////////////////////////////////////////////////////////////////////; /// Project a 2-D histogram into a 1-D histogram along Y.; ///; /// The projection is always of the type TH1D.; /// The projection is made from the channels along the X axis; /// ranging from firstxbin to lastxbin included.; /// By default, all bins including under- and overflow are included.; /// The number of entries in the projection is estimated from the; /// number of effective entries for all the cells included in the projection; ///; /// To exclude the underflow bins in X, use firstxbin=1.; /// To exclude the overflow bins in X, use lastxbin=nx.; ///; /// if option ""e"" is specified, the errors are computed.; /// if option ""d"" is specified, the projection is drawn in the current pad.; /// if option ""o"" original axis range of the target axes will be; /// kept, but only bins inside the selected range will be filled.; ///; /// Using a TCutG object, it is possible to select a sub-range of a 2-D histogram.; /// One must create a graphical cut (mouse or C++) and specify the name; /// of the cut between [] in the option.; /// For example, with a TCutG named ""cutg"", one can call:; /// myhist->ProjectionY("" "",firstxbin,lastxbin,""[cutg]"");; /// To invert the cut, it is enough to put a ""-"" in front of its name:; /// myhist->ProjectionY("" "",firstxbin,lastxbin,""[-cutg]"");; /// It is possible to apply several cuts:; /// myhist->ProjectionY("" "",firstxbin,lastxbin,""[cutg1,cutg2]"");; ///; /// NOTE that if a TH1D named ""name"" exists in the current directory or pad and having; /// a compatible axis, the histogram is reset and filled again with the projected contents of the TH2.; /// In the case of axis incompatibility, an error is reported and a NULL pointer is returned.; ///; /// NOTE that the Y axis attributes of the TH2 are copied to the X axis of the projection.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:1719,Availability,error,error,1719,"////////////////////////////////////////////////////////////////////////////////; /// Project a 2-D histogram into a 1-D histogram along Y.; ///; /// The projection is always of the type TH1D.; /// The projection is made from the channels along the X axis; /// ranging from firstxbin to lastxbin included.; /// By default, all bins including under- and overflow are included.; /// The number of entries in the projection is estimated from the; /// number of effective entries for all the cells included in the projection; ///; /// To exclude the underflow bins in X, use firstxbin=1.; /// To exclude the overflow bins in X, use lastxbin=nx.; ///; /// if option ""e"" is specified, the errors are computed.; /// if option ""d"" is specified, the projection is drawn in the current pad.; /// if option ""o"" original axis range of the target axes will be; /// kept, but only bins inside the selected range will be filled.; ///; /// Using a TCutG object, it is possible to select a sub-range of a 2-D histogram.; /// One must create a graphical cut (mouse or C++) and specify the name; /// of the cut between [] in the option.; /// For example, with a TCutG named ""cutg"", one can call:; /// myhist->ProjectionY("" "",firstxbin,lastxbin,""[cutg]"");; /// To invert the cut, it is enough to put a ""-"" in front of its name:; /// myhist->ProjectionY("" "",firstxbin,lastxbin,""[-cutg]"");; /// It is possible to apply several cuts:; /// myhist->ProjectionY("" "",firstxbin,lastxbin,""[cutg1,cutg2]"");; ///; /// NOTE that if a TH1D named ""name"" exists in the current directory or pad and having; /// a compatible axis, the histogram is reset and filled again with the projected contents of the TH2.; /// In the case of axis incompatibility, an error is reported and a NULL pointer is returned.; ///; /// NOTE that the Y axis attributes of the TH2 are copied to the X axis of the projection.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:308,Availability,error,error,308,"////////////////////////////////////////////////////////////////////////////////; /// Compute the X distribution of quantiles in the other variable Y; /// name is the name of the returned histogram; /// prob is the probability content for the quantile (0.5 is the default for the median); /// An approximate error for the quantile is computed assuming that the distribution in; /// the other variable is normal. According to this approximate formula the error on the quantile is; /// estimated as sqrt( p (1-p) / ( n * f(q)^2) ), where p is the probability content of the quantile and; /// n is the number of events used to compute the quantile and f(q) is the probability distribution for the; /// other variable evaluated at the obtained quantile. In the error estimation the probability is then assumed to be; /// a normal distribution.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:454,Availability,error,error,454,"////////////////////////////////////////////////////////////////////////////////; /// Compute the X distribution of quantiles in the other variable Y; /// name is the name of the returned histogram; /// prob is the probability content for the quantile (0.5 is the default for the median); /// An approximate error for the quantile is computed assuming that the distribution in; /// the other variable is normal. According to this approximate formula the error on the quantile is; /// estimated as sqrt( p (1-p) / ( n * f(q)^2) ), where p is the probability content of the quantile and; /// n is the number of events used to compute the quantile and f(q) is the probability distribution for the; /// other variable evaluated at the obtained quantile. In the error estimation the probability is then assumed to be; /// a normal distribution.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:757,Availability,error,error,757,"////////////////////////////////////////////////////////////////////////////////; /// Compute the X distribution of quantiles in the other variable Y; /// name is the name of the returned histogram; /// prob is the probability content for the quantile (0.5 is the default for the median); /// An approximate error for the quantile is computed assuming that the distribution in; /// the other variable is normal. According to this approximate formula the error on the quantile is; /// estimated as sqrt( p (1-p) / ( n * f(q)^2) ), where p is the probability content of the quantile and; /// n is the number of events used to compute the quantile and f(q) is the probability distribution for the; /// other variable evaluated at the obtained quantile. In the error estimation the probability is then assumed to be; /// a normal distribution.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:139,Modifiability,variab,variable,139,"////////////////////////////////////////////////////////////////////////////////; /// Compute the X distribution of quantiles in the other variable Y; /// name is the name of the returned histogram; /// prob is the probability content for the quantile (0.5 is the default for the median); /// An approximate error for the quantile is computed assuming that the distribution in; /// the other variable is normal. According to this approximate formula the error on the quantile is; /// estimated as sqrt( p (1-p) / ( n * f(q)^2) ), where p is the probability content of the quantile and; /// n is the number of events used to compute the quantile and f(q) is the probability distribution for the; /// other variable evaluated at the obtained quantile. In the error estimation the probability is then assumed to be; /// a normal distribution.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:392,Modifiability,variab,variable,392,"////////////////////////////////////////////////////////////////////////////////; /// Compute the X distribution of quantiles in the other variable Y; /// name is the name of the returned histogram; /// prob is the probability content for the quantile (0.5 is the default for the median); /// An approximate error for the quantile is computed assuming that the distribution in; /// the other variable is normal. According to this approximate formula the error on the quantile is; /// estimated as sqrt( p (1-p) / ( n * f(q)^2) ), where p is the probability content of the quantile and; /// n is the number of events used to compute the quantile and f(q) is the probability distribution for the; /// other variable evaluated at the obtained quantile. In the error estimation the probability is then assumed to be; /// a normal distribution.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:705,Modifiability,variab,variable,705,"////////////////////////////////////////////////////////////////////////////////; /// Compute the X distribution of quantiles in the other variable Y; /// name is the name of the returned histogram; /// prob is the probability content for the quantile (0.5 is the default for the median); /// An approximate error for the quantile is computed assuming that the distribution in; /// the other variable is normal. According to this approximate formula the error on the quantile is; /// estimated as sqrt( p (1-p) / ( n * f(q)^2) ), where p is the probability content of the quantile and; /// n is the number of events used to compute the quantile and f(q) is the probability distribution for the; /// other variable evaluated at the obtained quantile. In the error estimation the probability is then assumed to be; /// a normal distribution.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:308,Availability,error,error,308,"////////////////////////////////////////////////////////////////////////////////; /// Compute the Y distribution of quantiles in the other variable X; /// name is the name of the returned histogram; /// prob is the probability content for the quantile (0.5 is the default for the median); /// An approximate error for the quantile is computed assuming that the distribution in; /// the other variable is normal.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:139,Modifiability,variab,variable,139,"////////////////////////////////////////////////////////////////////////////////; /// Compute the Y distribution of quantiles in the other variable X; /// name is the name of the returned histogram; /// prob is the probability content for the quantile (0.5 is the default for the median); /// An approximate error for the quantile is computed assuming that the distribution in; /// the other variable is normal.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:392,Modifiability,variab,variable,392,"////////////////////////////////////////////////////////////////////////////////; /// Compute the Y distribution of quantiles in the other variable X; /// name is the name of the returned histogram; /// prob is the probability content for the quantile (0.5 is the default for the median); /// An approximate error for the quantile is computed assuming that the distribution in; /// the other variable is normal.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:11,Availability,error,error,11,"// compute error using normal approximation; // quantile error ~ sqrt (q*(1-q)/ *( n * f(xq)^2 ) from Kendall; // where f(xq) is the p.d.f value at the quantile xq",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:57,Availability,error,error,57,"// compute error using normal approximation; // quantile error ~ sqrt (q*(1-q)/ *( n * f(xq)^2 ) from Kendall; // where f(xq) is the p.d.f value at the quantile xq",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:11,Availability,error,errors,11,"// set the errors to zero in case of small statistics",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:118,Availability,error,errors,118,"////////////////////////////////////////////////////////////////////////////////; /// Reset this histogram: contents, errors, etc.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:85,Integrability,Interface,Interface,85,"////////////////////////////////////////////////////////////////////////////////; ///Interface to TSpectrum2::Search; ///the function finds peaks in this histogram where the width is > sigma; ///and the peak maximum greater than threshold*maximum bin content of this.; ///for more details see TSpectrum::Search.; ///note the difference in the default value for option compared to TSpectrum2::Search; ///option="""" by default (instead of ""goff"")",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:522,Availability,Error,Errors,522,"////////////////////////////////////////////////////////////////////////////////; /// Smooth bin contents of this 2-d histogram using kernel algorithms; /// similar to the ones used in the raster graphics community.; /// Bin contents in the active range are replaced by their smooth values.; /// The algorithm retains the input dimension by using Kernel Crop at the input boundaries.; /// Kernel Crop sets any pixel in the kernel that extends past the input to zero and adjusts the; /// normalization accordingly.; /// If Errors are defined via Sumw2, they are also scaled and computed.; /// However, note the resulting errors will be correlated between different-bins, so; /// the errors should not be used blindly to perform any calculation involving several bins,; /// like fitting the histogram. One would need to compute also the bin by bin correlation matrix.; ///; /// 3 kernels are proposed k5a, k5b and k3a.; /// k5a and k5b act on 5x5 cells (i-2,i-1,i,i+1,i+2, and same for j); /// k5b is a bit more stronger in smoothing; /// k3a acts only on 3x3 cells (i-1,i,i+1, and same for j).; /// By default the kernel ""k5a"" is used. You can select the kernels ""k5b"" or ""k3a""; /// via the option argument.; /// If TAxis::SetRange has been called on the x or/and y axis, only the bins; /// in the specified range are smoothed.; /// In the current implementation if the first argument is not used (default value=1).; ///; /// implementation by David McKee (dmckee@bama.ua.edu). Extended by Rene Brun",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:620,Availability,error,errors,620,"////////////////////////////////////////////////////////////////////////////////; /// Smooth bin contents of this 2-d histogram using kernel algorithms; /// similar to the ones used in the raster graphics community.; /// Bin contents in the active range are replaced by their smooth values.; /// The algorithm retains the input dimension by using Kernel Crop at the input boundaries.; /// Kernel Crop sets any pixel in the kernel that extends past the input to zero and adjusts the; /// normalization accordingly.; /// If Errors are defined via Sumw2, they are also scaled and computed.; /// However, note the resulting errors will be correlated between different-bins, so; /// the errors should not be used blindly to perform any calculation involving several bins,; /// like fitting the histogram. One would need to compute also the bin by bin correlation matrix.; ///; /// 3 kernels are proposed k5a, k5b and k3a.; /// k5a and k5b act on 5x5 cells (i-2,i-1,i,i+1,i+2, and same for j); /// k5b is a bit more stronger in smoothing; /// k3a acts only on 3x3 cells (i-1,i,i+1, and same for j).; /// By default the kernel ""k5a"" is used. You can select the kernels ""k5b"" or ""k3a""; /// via the option argument.; /// If TAxis::SetRange has been called on the x or/and y axis, only the bins; /// in the specified range are smoothed.; /// In the current implementation if the first argument is not used (default value=1).; ///; /// implementation by David McKee (dmckee@bama.ua.edu). Extended by Rene Brun",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:682,Availability,error,errors,682,"////////////////////////////////////////////////////////////////////////////////; /// Smooth bin contents of this 2-d histogram using kernel algorithms; /// similar to the ones used in the raster graphics community.; /// Bin contents in the active range are replaced by their smooth values.; /// The algorithm retains the input dimension by using Kernel Crop at the input boundaries.; /// Kernel Crop sets any pixel in the kernel that extends past the input to zero and adjusts the; /// normalization accordingly.; /// If Errors are defined via Sumw2, they are also scaled and computed.; /// However, note the resulting errors will be correlated between different-bins, so; /// the errors should not be used blindly to perform any calculation involving several bins,; /// like fitting the histogram. One would need to compute also the bin by bin correlation matrix.; ///; /// 3 kernels are proposed k5a, k5b and k3a.; /// k5a and k5b act on 5x5 cells (i-2,i-1,i,i+1,i+2, and same for j); /// k5b is a bit more stronger in smoothing; /// k3a acts only on 3x3 cells (i-1,i,i+1, and same for j).; /// By default the kernel ""k5a"" is used. You can select the kernels ""k5b"" or ""k3a""; /// via the option argument.; /// If TAxis::SetRange has been called on the x or/and y axis, only the bins; /// in the specified range are smoothed.; /// In the current implementation if the first argument is not used (default value=1).; ///; /// implementation by David McKee (dmckee@bama.ua.edu). Extended by Rene Brun",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:435,Modifiability,extend,extends,435,"////////////////////////////////////////////////////////////////////////////////; /// Smooth bin contents of this 2-d histogram using kernel algorithms; /// similar to the ones used in the raster graphics community.; /// Bin contents in the active range are replaced by their smooth values.; /// The algorithm retains the input dimension by using Kernel Crop at the input boundaries.; /// Kernel Crop sets any pixel in the kernel that extends past the input to zero and adjusts the; /// normalization accordingly.; /// If Errors are defined via Sumw2, they are also scaled and computed.; /// However, note the resulting errors will be correlated between different-bins, so; /// the errors should not be used blindly to perform any calculation involving several bins,; /// like fitting the histogram. One would need to compute also the bin by bin correlation matrix.; ///; /// 3 kernels are proposed k5a, k5b and k3a.; /// k5a and k5b act on 5x5 cells (i-2,i-1,i,i+1,i+2, and same for j); /// k5b is a bit more stronger in smoothing; /// k3a acts only on 3x3 cells (i-1,i,i+1, and same for j).; /// By default the kernel ""k5a"" is used. You can select the kernels ""k5b"" or ""k3a""; /// via the option argument.; /// If TAxis::SetRange has been called on the x or/and y axis, only the bins; /// in the specified range are smoothed.; /// In the current implementation if the first argument is not used (default value=1).; ///; /// implementation by David McKee (dmckee@bama.ua.edu). Extended by Rene Brun",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:1477,Modifiability,Extend,Extended,1477,"////////////////////////////////////////////////////////////////////////////////; /// Smooth bin contents of this 2-d histogram using kernel algorithms; /// similar to the ones used in the raster graphics community.; /// Bin contents in the active range are replaced by their smooth values.; /// The algorithm retains the input dimension by using Kernel Crop at the input boundaries.; /// Kernel Crop sets any pixel in the kernel that extends past the input to zero and adjusts the; /// normalization accordingly.; /// If Errors are defined via Sumw2, they are also scaled and computed.; /// However, note the resulting errors will be correlated between different-bins, so; /// the errors should not be used blindly to perform any calculation involving several bins,; /// like fitting the histogram. One would need to compute also the bin by bin correlation matrix.; ///; /// 3 kernels are proposed k5a, k5b and k3a.; /// k5a and k5b act on 5x5 cells (i-2,i-1,i,i+1,i+2, and same for j); /// k5b is a bit more stronger in smoothing; /// k3a acts only on 3x3 cells (i-1,i,i+1, and same for j).; /// By default the kernel ""k5a"" is used. You can select the kernels ""k5b"" or ""k3a""; /// via the option argument.; /// If TAxis::SetRange has been called on the x or/and y axis, only the bins; /// in the specified range are smoothed.; /// In the current implementation if the first argument is not used (default value=1).; ///; /// implementation by David McKee (dmckee@bama.ua.edu). Extended by Rene Brun",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:719,Performance,perform,perform,719,"////////////////////////////////////////////////////////////////////////////////; /// Smooth bin contents of this 2-d histogram using kernel algorithms; /// similar to the ones used in the raster graphics community.; /// Bin contents in the active range are replaced by their smooth values.; /// The algorithm retains the input dimension by using Kernel Crop at the input boundaries.; /// Kernel Crop sets any pixel in the kernel that extends past the input to zero and adjusts the; /// normalization accordingly.; /// If Errors are defined via Sumw2, they are also scaled and computed.; /// However, note the resulting errors will be correlated between different-bins, so; /// the errors should not be used blindly to perform any calculation involving several bins,; /// like fitting the histogram. One would need to compute also the bin by bin correlation matrix.; ///; /// 3 kernels are proposed k5a, k5b and k3a.; /// k5a and k5b act on 5x5 cells (i-2,i-1,i,i+1,i+2, and same for j); /// k5b is a bit more stronger in smoothing; /// k3a acts only on 3x3 cells (i-1,i,i+1, and same for j).; /// By default the kernel ""k5a"" is used. You can select the kernels ""k5b"" or ""k3a""; /// via the option argument.; /// If TAxis::SetRange has been called on the x or/and y axis, only the bins; /// in the specified range are smoothed.; /// In the current implementation if the first argument is not used (default value=1).; ///; /// implementation by David McKee (dmckee@bama.ua.edu). Extended by Rene Brun",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:118,Availability,error,errors,118,"////////////////////////////////////////////////////////////////////////////////; /// Reset this histogram: contents, errors, etc.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:118,Availability,error,errors,118,"////////////////////////////////////////////////////////////////////////////////; /// Reset this histogram: contents, errors, etc.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:118,Availability,error,errors,118,"////////////////////////////////////////////////////////////////////////////////; /// Reset this histogram: contents, errors, etc.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:118,Availability,error,errors,118,"////////////////////////////////////////////////////////////////////////////////; /// Reset this histogram: contents, errors, etc.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:118,Availability,error,errors,118,"////////////////////////////////////////////////////////////////////////////////; /// Reset this histogram: contents, errors, etc.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:118,Availability,error,errors,118,"////////////////////////////////////////////////////////////////////////////////; /// Reset this histogram: contents, errors, etc.",MatchSource.CODE_COMMENT,hist/hist/src/TH2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:4613,Availability,down,down,4613,"ll the bin is; very slow. The alternative is to divide the histogram into virtual rectangular regions; called ""cells"". Each cell stores the pointers of the bins intersecting it.; When a coordinate is to be filled, the method finds which cell the coordinate; falls into. Since the cells are rectangular, this can be done very quickly.; It then only loops over the bins associated with that cell and calls `IsInside()`; only on that bins. This reduces considerably the number of bins on which `IsInside()`; is called and therefore speed up by a huge factor the filling compare to the brute force; approach where `IsInside()` is called for all bins. The addition of bins to the appropriate cells is done when the bin is added; to the histogram. To do this, `AddBin()` calls the; `AddBinToPartition()` method.; This method adds the input bin to the partitioning matrix. The number of partition cells per axis can be specified in the constructor.; If it is not specified, the default value of 25 along each axis will be; assigned. This value was chosen because it is small enough to avoid slowing; down AddBin(), while being large enough to enhance Fill() by a considerable; amount. Regardless of how it is initialized at construction time, it can be; changed later with the `ChangePartition()` method.; `ChangePartition()` deletes the; old partition matrix and generates a new one with the specified number of cells; on each axis. The optimum number of partition cells per axis changes with the number of; times `Fill()` will be called. Although partitioning greatly speeds up; filling, it also adds a constant time delay into the code. When `Fill()`; is to be called many times, it is more efficient to divide the histogram into; a large number cells. However, if the histogram is to be filled only a few; times, it is better to divide into a small number of cells.; */; ////////////////////////////////////////////////////////////////////////////////; /// Default Constructor. No boundaries specified.",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:2031,Deployability,update,updated,2031,"d location, is; not reconsidered when that location is binned later. If there are two overlapping bins, the first one in the list will be incremented; by `Fill()`. The histogram may automatically extends its limits if a bin outside the; histogram limits is added. This is done when the default constructor (with no; arguments) is used. It generates a histogram with no limits along the X and Y; axis. Adding bins to it will extend it up to a proper size. `TH2Poly` implements a partitioning algorithm to speed up bins' filling; (see the ""Partitioning Algorithm"" section for details).; The partitioning algorithm divides the histogram into regions called cells.; The bins that each cell intersects are recorded in an array of `TList`s.; When a coordinate in the histogram is to be filled; the method (quickly) finds; which cell the coordinate belongs. It then only loops over the bins; intersecting that cell to find the bin the input coordinate corresponds to.; The partitioning of the histogram is updated continuously as each bin is added.; The default number of cells on each axis is 25. This number could be set to; another value in the constructor or adjusted later by calling the; `ChangePartition(Int_t, Int_t)` method. The partitioning algorithm is; considerably faster than the brute force algorithm (i.e. checking if each bin; contains the input coordinates), especially if the histogram is to be filled; many times. The following very simple macro shows how to build and fill a `TH2Poly`:; ~~~ {.cpp}; {; auto h2p = new TH2Poly();. Double_t x1[] = {0, 5, 6};; Double_t y1[] = {0, 0, 5};; Double_t x2[] = {0, -1, -1, 0};; Double_t y2[] = {0, 0, -1, 3};; Double_t x3[] = {4, 3, 0, 1, 2.4};; Double_t y3[] = {4, 3.7, 1, 3.7, 2.5};. h2p->AddBin(3, x1, y1);; h2p->AddBin(4, x2, y2);; h2p->AddBin(5, x3, y3);. h2p->Fill(0.1, 0.01, 3);; h2p->Fill(-0.5, -0.5, 7);; h2p->Fill(-0.7, -0.5, 1);; h2p->Fill(1, 3, 1.5);; }; ~~~. More examples can be found in th2polyBoxes.C, th2polyEurope.C, th2polyHoney",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:2039,Deployability,continuous,continuously,2039,"d location, is; not reconsidered when that location is binned later. If there are two overlapping bins, the first one in the list will be incremented; by `Fill()`. The histogram may automatically extends its limits if a bin outside the; histogram limits is added. This is done when the default constructor (with no; arguments) is used. It generates a histogram with no limits along the X and Y; axis. Adding bins to it will extend it up to a proper size. `TH2Poly` implements a partitioning algorithm to speed up bins' filling; (see the ""Partitioning Algorithm"" section for details).; The partitioning algorithm divides the histogram into regions called cells.; The bins that each cell intersects are recorded in an array of `TList`s.; When a coordinate in the histogram is to be filled; the method (quickly) finds; which cell the coordinate belongs. It then only loops over the bins; intersecting that cell to find the bin the input coordinate corresponds to.; The partitioning of the histogram is updated continuously as each bin is added.; The default number of cells on each axis is 25. This number could be set to; another value in the constructor or adjusted later by calling the; `ChangePartition(Int_t, Int_t)` method. The partitioning algorithm is; considerably faster than the brute force algorithm (i.e. checking if each bin; contains the input coordinates), especially if the histogram is to be filled; many times. The following very simple macro shows how to build and fill a `TH2Poly`:; ~~~ {.cpp}; {; auto h2p = new TH2Poly();. Double_t x1[] = {0, 5, 6};; Double_t y1[] = {0, 0, 5};; Double_t x2[] = {0, -1, -1, 0};; Double_t y2[] = {0, 0, -1, 3};; Double_t x3[] = {4, 3, 0, 1, 2.4};; Double_t y3[] = {4, 3.7, 1, 3.7, 2.5};. h2p->AddBin(3, x1, y1);; h2p->AddBin(4, x2, y2);; h2p->AddBin(5, x3, y3);. h2p->Fill(0.1, 0.01, 3);; h2p->Fill(-0.5, -0.5, 7);; h2p->Fill(-0.7, -0.5, 1);; h2p->Fill(1, 3, 1.5);; }; ~~~. More examples can be found in th2polyBoxes.C, th2polyEurope.C, th2polyHoney",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:3962,Energy Efficiency,reduce,reduces,3962," Partitioning Algorithm; The partitioning algorithm forms an essential part of the `TH2Poly`; class. It is implemented to speed up the filling of bins. With the brute force approach, the filling is done in the following way: An; iterator loops over all bins in the `TH2Poly` and invokes the; method `IsInside()` for each of them.; This method checks if the input location is in that bin. If the filling; coordinate is inside, the bin is filled. Looping over all the bin is; very slow. The alternative is to divide the histogram into virtual rectangular regions; called ""cells"". Each cell stores the pointers of the bins intersecting it.; When a coordinate is to be filled, the method finds which cell the coordinate; falls into. Since the cells are rectangular, this can be done very quickly.; It then only loops over the bins associated with that cell and calls `IsInside()`; only on that bins. This reduces considerably the number of bins on which `IsInside()`; is called and therefore speed up by a huge factor the filling compare to the brute force; approach where `IsInside()` is called for all bins. The addition of bins to the appropriate cells is done when the bin is added; to the histogram. To do this, `AddBin()` calls the; `AddBinToPartition()` method.; This method adds the input bin to the partitioning matrix. The number of partition cells per axis can be specified in the constructor.; If it is not specified, the default value of 25 along each axis will be; assigned. This value was chosen because it is small enough to avoid slowing; down AddBin(), while being large enough to enhance Fill() by a considerable; amount. Regardless of how it is initialized at construction time, it can be; changed later with the `ChangePartition()` method.; `ChangePartition()` deletes the; old partition matrix and generates a new one with the specified number of cells; on each axis. The optimum number of partition cells per axis changes with the number of; times `Fill()` will be called. Although",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:5207,Energy Efficiency,efficient,efficient,5207,"ll the bin is; very slow. The alternative is to divide the histogram into virtual rectangular regions; called ""cells"". Each cell stores the pointers of the bins intersecting it.; When a coordinate is to be filled, the method finds which cell the coordinate; falls into. Since the cells are rectangular, this can be done very quickly.; It then only loops over the bins associated with that cell and calls `IsInside()`; only on that bins. This reduces considerably the number of bins on which `IsInside()`; is called and therefore speed up by a huge factor the filling compare to the brute force; approach where `IsInside()` is called for all bins. The addition of bins to the appropriate cells is done when the bin is added; to the histogram. To do this, `AddBin()` calls the; `AddBinToPartition()` method.; This method adds the input bin to the partitioning matrix. The number of partition cells per axis can be specified in the constructor.; If it is not specified, the default value of 25 along each axis will be; assigned. This value was chosen because it is small enough to avoid slowing; down AddBin(), while being large enough to enhance Fill() by a considerable; amount. Regardless of how it is initialized at construction time, it can be; changed later with the `ChangePartition()` method.; `ChangePartition()` deletes the; old partition matrix and generates a new one with the specified number of cells; on each axis. The optimum number of partition cells per axis changes with the number of; times `Fill()` will be called. Although partitioning greatly speeds up; filling, it also adds a constant time delay into the code. When `Fill()`; is to be called many times, it is more efficient to divide the histogram into; a large number cells. However, if the histogram is to be filled only a few; times, it is better to divide into a small number of cells.; */; ////////////////////////////////////////////////////////////////////////////////; /// Default Constructor. No boundaries specified.",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:1228,Modifiability,extend,extends,1228," `TH2PolyBin` is a very simple class containing the vertices (stored; as `TGraph`s or `TMultiGraph`s ) and contents of the polygonal; bin as well as several related functions. Essentially, a `TH2Poly` is a TList of `TH2PolyBin` objects; with methods to manipulate them. Bins are defined using one of the `AddBin()` methods. The bin definition; should be done before filling. The histogram can be filled with `Fill(Double_t x, Double_t y, Double_t w); `. `w` is the weight.; If no weight is specified, it is assumed to be 1. Not all histogram's area need to be binned. Filling an area without bins,; will falls into the overflows. Adding a bin is not retroactive; it doesn't; affect previous fillings. A `Fill()` call, that; was previously ignored due to the lack of a bin at the specified location, is; not reconsidered when that location is binned later. If there are two overlapping bins, the first one in the list will be incremented; by `Fill()`. The histogram may automatically extends its limits if a bin outside the; histogram limits is added. This is done when the default constructor (with no; arguments) is used. It generates a histogram with no limits along the X and Y; axis. Adding bins to it will extend it up to a proper size. `TH2Poly` implements a partitioning algorithm to speed up bins' filling; (see the ""Partitioning Algorithm"" section for details).; The partitioning algorithm divides the histogram into regions called cells.; The bins that each cell intersects are recorded in an array of `TList`s.; When a coordinate in the histogram is to be filled; the method (quickly) finds; which cell the coordinate belongs. It then only loops over the bins; intersecting that cell to find the bin the input coordinate corresponds to.; The partitioning of the histogram is updated continuously as each bin is added.; The default number of cells on each axis is 25. This number could be set to; another value in the constructor or adjusted later by calling the; `ChangePartition(Int_t, In",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:1456,Modifiability,extend,extend,1456," `TH2PolyBin` objects; with methods to manipulate them. Bins are defined using one of the `AddBin()` methods. The bin definition; should be done before filling. The histogram can be filled with `Fill(Double_t x, Double_t y, Double_t w); `. `w` is the weight.; If no weight is specified, it is assumed to be 1. Not all histogram's area need to be binned. Filling an area without bins,; will falls into the overflows. Adding a bin is not retroactive; it doesn't; affect previous fillings. A `Fill()` call, that; was previously ignored due to the lack of a bin at the specified location, is; not reconsidered when that location is binned later. If there are two overlapping bins, the first one in the list will be incremented; by `Fill()`. The histogram may automatically extends its limits if a bin outside the; histogram limits is added. This is done when the default constructor (with no; arguments) is used. It generates a histogram with no limits along the X and Y; axis. Adding bins to it will extend it up to a proper size. `TH2Poly` implements a partitioning algorithm to speed up bins' filling; (see the ""Partitioning Algorithm"" section for details).; The partitioning algorithm divides the histogram into regions called cells.; The bins that each cell intersects are recorded in an array of `TList`s.; When a coordinate in the histogram is to be filled; the method (quickly) finds; which cell the coordinate belongs. It then only loops over the bins; intersecting that cell to find the bin the input coordinate corresponds to.; The partitioning of the histogram is updated continuously as each bin is added.; The default number of cells on each axis is 25. This number could be set to; another value in the constructor or adjusted later by calling the; `ChangePartition(Int_t, Int_t)` method. The partitioning algorithm is; considerably faster than the brute force algorithm (i.e. checking if each bin; contains the input coordinates), especially if the histogram is to be filled; many times. ",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:4656,Modifiability,enhance,enhance,4656,"ll the bin is; very slow. The alternative is to divide the histogram into virtual rectangular regions; called ""cells"". Each cell stores the pointers of the bins intersecting it.; When a coordinate is to be filled, the method finds which cell the coordinate; falls into. Since the cells are rectangular, this can be done very quickly.; It then only loops over the bins associated with that cell and calls `IsInside()`; only on that bins. This reduces considerably the number of bins on which `IsInside()`; is called and therefore speed up by a huge factor the filling compare to the brute force; approach where `IsInside()` is called for all bins. The addition of bins to the appropriate cells is done when the bin is added; to the histogram. To do this, `AddBin()` calls the; `AddBinToPartition()` method.; This method adds the input bin to the partitioning matrix. The number of partition cells per axis can be specified in the constructor.; If it is not specified, the default value of 25 along each axis will be; assigned. This value was chosen because it is small enough to avoid slowing; down AddBin(), while being large enough to enhance Fill() by a considerable; amount. Regardless of how it is initialized at construction time, it can be; changed later with the `ChangePartition()` method.; `ChangePartition()` deletes the; old partition matrix and generates a new one with the specified number of cells; on each axis. The optimum number of partition cells per axis changes with the number of; times `Fill()` will be called. Although partitioning greatly speeds up; filling, it also adds a constant time delay into the code. When `Fill()`; is to be called many times, it is more efficient to divide the histogram into; a large number cells. However, if the histogram is to be filled only a few; times, it is better to divide into a small number of cells.; */; ////////////////////////////////////////////////////////////////////////////////; /// Default Constructor. No boundaries specified.",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:4598,Safety,avoid,avoid,4598,"ll the bin is; very slow. The alternative is to divide the histogram into virtual rectangular regions; called ""cells"". Each cell stores the pointers of the bins intersecting it.; When a coordinate is to be filled, the method finds which cell the coordinate; falls into. Since the cells are rectangular, this can be done very quickly.; It then only loops over the bins associated with that cell and calls `IsInside()`; only on that bins. This reduces considerably the number of bins on which `IsInside()`; is called and therefore speed up by a huge factor the filling compare to the brute force; approach where `IsInside()` is called for all bins. The addition of bins to the appropriate cells is done when the bin is added; to the histogram. To do this, `AddBin()` calls the; `AddBinToPartition()` method.; This method adds the input bin to the partitioning matrix. The number of partition cells per axis can be specified in the constructor.; If it is not specified, the default value of 25 along each axis will be; assigned. This value was chosen because it is small enough to avoid slowing; down AddBin(), while being large enough to enhance Fill() by a considerable; amount. Regardless of how it is initialized at construction time, it can be; changed later with the `ChangePartition()` method.; `ChangePartition()` deletes the; old partition matrix and generates a new one with the specified number of cells; on each axis. The optimum number of partition cells per axis changes with the number of; times `Fill()` will be called. Although partitioning greatly speeds up; filling, it also adds a constant time delay into the code. When `Fill()`; is to be called many times, it is more efficient to divide the histogram into; a large number cells. However, if the histogram is to be filled only a few; times, it is better to divide into a small number of cells.; */; ////////////////////////////////////////////////////////////////////////////////; /// Default Constructor. No boundaries specified.",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:269,Usability,simpl,simple,269,"/** \class TH2Poly; \ingroup Histograms; 2D Histogram with Polygonal Bins. ## Overview; `TH2Poly` is a 2D Histogram class (TH2) allowing to define polygonal; bins of arbitrary shape. Each bin in the `TH2Poly` histogram is a `TH2PolyBin` object.; `TH2PolyBin` is a very simple class containing the vertices (stored; as `TGraph`s or `TMultiGraph`s ) and contents of the polygonal; bin as well as several related functions. Essentially, a `TH2Poly` is a TList of `TH2PolyBin` objects; with methods to manipulate them. Bins are defined using one of the `AddBin()` methods. The bin definition; should be done before filling. The histogram can be filled with `Fill(Double_t x, Double_t y, Double_t w); `. `w` is the weight.; If no weight is specified, it is assumed to be 1. Not all histogram's area need to be binned. Filling an area without bins,; will falls into the overflows. Adding a bin is not retroactive; it doesn't; affect previous fillings. A `Fill()` call, that; was previously ignored due to the lack of a bin at the specified location, is; not reconsidered when that location is binned later. If there are two overlapping bins, the first one in the list will be incremented; by `Fill()`. The histogram may automatically extends its limits if a bin outside the; histogram limits is added. This is done when the default constructor (with no; arguments) is used. It generates a histogram with no limits along the X and Y; axis. Adding bins to it will extend it up to a proper size. `TH2Poly` implements a partitioning algorithm to speed up bins' filling; (see the ""Partitioning Algorithm"" section for details).; The partitioning algorithm divides the histogram into regions called cells.; The bins that each cell intersects are recorded in an array of `TList`s.; When a coordinate in the histogram is to be filled; the method (quickly) finds; which cell the coordinate belongs. It then only loops over the bins; intersecting that cell to find the bin the input coordinate corresponds to.; The par",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:2478,Usability,simpl,simple,2478,"mplements a partitioning algorithm to speed up bins' filling; (see the ""Partitioning Algorithm"" section for details).; The partitioning algorithm divides the histogram into regions called cells.; The bins that each cell intersects are recorded in an array of `TList`s.; When a coordinate in the histogram is to be filled; the method (quickly) finds; which cell the coordinate belongs. It then only loops over the bins; intersecting that cell to find the bin the input coordinate corresponds to.; The partitioning of the histogram is updated continuously as each bin is added.; The default number of cells on each axis is 25. This number could be set to; another value in the constructor or adjusted later by calling the; `ChangePartition(Int_t, Int_t)` method. The partitioning algorithm is; considerably faster than the brute force algorithm (i.e. checking if each bin; contains the input coordinates), especially if the histogram is to be filled; many times. The following very simple macro shows how to build and fill a `TH2Poly`:; ~~~ {.cpp}; {; auto h2p = new TH2Poly();. Double_t x1[] = {0, 5, 6};; Double_t y1[] = {0, 0, 5};; Double_t x2[] = {0, -1, -1, 0};; Double_t y2[] = {0, 0, -1, 3};; Double_t x3[] = {4, 3, 0, 1, 2.4};; Double_t y3[] = {4, 3.7, 1, 3.7, 2.5};. h2p->AddBin(3, x1, y1);; h2p->AddBin(4, x2, y2);; h2p->AddBin(5, x3, y3);. h2p->Fill(0.1, 0.01, 3);; h2p->Fill(-0.5, -0.5, 7);; h2p->Fill(-0.7, -0.5, 1);; h2p->Fill(1, 3, 1.5);; }; ~~~. More examples can be found in th2polyBoxes.C, th2polyEurope.C, th2polyHoneycomb.C; and th2polyUSA.C. ## Partitioning Algorithm; The partitioning algorithm forms an essential part of the `TH2Poly`; class. It is implemented to speed up the filling of bins. With the brute force approach, the filling is done in the following way: An; iterator loops over all bins in the `TH2Poly` and invokes the; method `IsInside()` for each of them.; This method checks if the input location is in that bin. If the filling; coordinate is inside, the bin is f",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:3,Energy Efficiency,allocate,allocate,3,"// allocate arrays",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:166,Performance,optimiz,optimize,166,"// add bins in the fCells partition. We need to add the TH2PolyBin objects; // of the new copied histograms. For this we call AddBinToPartition; // we could probably optimize this by implementing a copy of the partition",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:34,Modifiability,extend,extend,34,"// if structure fsumw2 is created extend it",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:54,Modifiability,extend,extends,54,"// If the bin lies outside histogram boundaries, then extends the boundaries.; // Also changes the partition information accordingly",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: this = this + c1*h1.",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:128,Safety,risk,risks,128,"// statistics can be preserved only in case of positive coefficients; // otherwise with negative c1 (histogram subtraction) one risks to get negative variances",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:84,Integrability,depend,depending,84,"// need to initialize to zero s1 and s2 since; // GetStats fills only used elements depending on dimension and type",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:48,Deployability,Update,UpdateBinContent,48,"// get number of entries now because afterwards UpdateBinContent will change it",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:3,Performance,Perform,Perform,3,"// Perform the Add.",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:3,Deployability,update,update,3,"// update statistics (do here to avoid changes by SetBinContent)",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:33,Safety,avoid,avoid,33,"// update statistics (do here to avoid changes by SetBinContent)",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:170,Safety,safe,safe,170,"// TH1::Clone relies on ::Copy to implemented by the derived class.; // Until this is implemented, revert to the much slower default version; // (and possibly non-thread safe).",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:86,Usability,Clear,Clears,86,"////////////////////////////////////////////////////////////////////////////////; /// Clears the contents of all bins in the histogram.",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:3,Usability,Clear,Clears,3,"// Clears the bin contents",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:3,Usability,Clear,Clears,3,"// Clears the statistics",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:118,Availability,error,errors,118,"////////////////////////////////////////////////////////////////////////////////; /// Reset this histogram: contents, errors, etc.",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:3,Usability,Clear,Clears,3,"// Clears the bin contents",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:106,Deployability,update,updated,106,"// need to recompute integral in case SetBinContent was called.; // fTsumw cannot be used since it is not updated in that case",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:107,Availability,error,error,107,"////////////////////////////////////////////////////////////////////////////////; /// Returns the value of error associated to bin number bin.; /// If the sum of squares of weights has been defined (via Sumw2),; /// this function returns the sqrt(sum of w2).; /// otherwise it returns the sqrt(contents) for this bin.; /// Bins are in range [1:nbins] and for bin < 0 in range [-9:-1] it returns errors for overflow bins.; /// See also TH2Poly::GetBinContent",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:395,Availability,error,errors,395,"////////////////////////////////////////////////////////////////////////////////; /// Returns the value of error associated to bin number bin.; /// If the sum of squares of weights has been defined (via Sumw2),; /// this function returns the sqrt(sum of w2).; /// otherwise it returns the sqrt(contents) for this bin.; /// Bins are in range [1:nbins] and for bin < 0 in range [-9:-1] it returns errors for overflow bins.; /// See also TH2Poly::GetBinContent",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:98,Availability,Error,Error,98,"////////////////////////////////////////////////////////////////////////////////; /// Set the bin Error.; /// Re-implementation for TH2Poly given the different bin indexing in the; /// stored squared error array.; /// See also notes in TH1::SetBinError; ///; /// Bins are in range [1:nbins] and for bin < 0 in the range [-9:-1] the errors is set for the overflow bins",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:200,Availability,error,error,200,"////////////////////////////////////////////////////////////////////////////////; /// Set the bin Error.; /// Re-implementation for TH2Poly given the different bin indexing in the; /// stored squared error array.; /// See also notes in TH1::SetBinError; ///; /// Bins are in range [1:nbins] and for bin < 0 in the range [-9:-1] the errors is set for the overflow bins",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:332,Availability,error,errors,332,"////////////////////////////////////////////////////////////////////////////////; /// Set the bin Error.; /// Re-implementation for TH2Poly given the different bin indexing in the; /// stored squared error array.; /// See also notes in TH1::SetBinError; ///; /// Bins are in range [1:nbins] and for bin < 0 in the range [-9:-1] the errors is set for the overflow bins",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:109,Safety,safe,safer,109,"//histogram pointer has by default the histogram name.; //however, in case histogram has no directory, it is safer to add a; //incremental suffix",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:12,Availability,error,errors,12,"// save bin errors",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:117,Safety,avoid,avoid,117,"////////////////////////////////////////////////////////////////////////////////; // RE-implement dummy functions to avoid users calling the; // corresponding implementations in TH1 or TH2; ////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// NOT IMPLEMENTED for TH2Poly",MatchSource.CODE_COMMENT,hist/hist/src/TH2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:1632,Modifiability,variab,variable,1632,"ith a float per channel (see TH1 documentation); \class TH3D; \brief 3-D histogram with a double per channel (see TH1 documentation); @}; */; /** \class TH3; \ingroup Histograms; The 3-D histogram classes derived from the 1-D histogram classes.; All operations are supported (fill, fit).; Drawing is currently restricted to one single option.; A cloud of points is drawn. The number of points is proportional to; cell content. - TH3C a 3-D histogram with one byte per cell (char). Maximum bin content = 127; - TH3S a 3-D histogram with two bytes per cell (short integer). Maximum bin content = 32767; - TH3I a 3-D histogram with four bytes per cell (32 bit integer). Maximum bin content = INT_MAX (\ref intmax3 ""*""); - TH3L a 3-D histogram with eight bytes per cell (64 bit integer). Maximum bin content = LLONG_MAX (\ref llongmax3 ""**""); - TH3F a 3-D histogram with four bytes per cell (float). Maximum precision 7 digits, maximum integer bin content = +/-16777216 (\ref floatmax3 ""***""); - TH3D a 3-D histogram with eight bytes per cell (double). Maximum precision 14 digits, maximum integer bin content = +/-9007199254740992 (\ref doublemax3 ""****""). <sup>; \anchor intmax3 (*) INT_MAX = 2147483647 is the [maximum value for a variable of type int.](https://docs.microsoft.com/en-us/cpp/c-language/cpp-integer-limits)<br>; \anchor llongmax3 (**) LLONG_MAX = 9223372036854775807 is the [maximum value for a variable of type long64.](https://docs.microsoft.com/en-us/cpp/c-language/cpp-integer-limits)<br>; \anchor floatmax3 (***) 2^24 = 16777216 is the [maximum integer that can be properly represented by a float32 with 23-bit mantissa.](https://stackoverflow.com/a/3793950/7471760)<br>; \anchor doublemax3 (****) 2^53 = 9007199254740992 is the [maximum integer that can be properly represented by a double64 with 52-bit mantissa.](https://stackoverflow.com/a/3793950/7471760); </sup>; */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:1811,Modifiability,variab,variable,1811,"ith a float per channel (see TH1 documentation); \class TH3D; \brief 3-D histogram with a double per channel (see TH1 documentation); @}; */; /** \class TH3; \ingroup Histograms; The 3-D histogram classes derived from the 1-D histogram classes.; All operations are supported (fill, fit).; Drawing is currently restricted to one single option.; A cloud of points is drawn. The number of points is proportional to; cell content. - TH3C a 3-D histogram with one byte per cell (char). Maximum bin content = 127; - TH3S a 3-D histogram with two bytes per cell (short integer). Maximum bin content = 32767; - TH3I a 3-D histogram with four bytes per cell (32 bit integer). Maximum bin content = INT_MAX (\ref intmax3 ""*""); - TH3L a 3-D histogram with eight bytes per cell (64 bit integer). Maximum bin content = LLONG_MAX (\ref llongmax3 ""**""); - TH3F a 3-D histogram with four bytes per cell (float). Maximum precision 7 digits, maximum integer bin content = +/-16777216 (\ref floatmax3 ""***""); - TH3D a 3-D histogram with eight bytes per cell (double). Maximum precision 14 digits, maximum integer bin content = +/-9007199254740992 (\ref doublemax3 ""****""). <sup>; \anchor intmax3 (*) INT_MAX = 2147483647 is the [maximum value for a variable of type int.](https://docs.microsoft.com/en-us/cpp/c-language/cpp-integer-limits)<br>; \anchor llongmax3 (**) LLONG_MAX = 9223372036854775807 is the [maximum value for a variable of type long64.](https://docs.microsoft.com/en-us/cpp/c-language/cpp-integer-limits)<br>; \anchor floatmax3 (***) 2^24 = 16777216 is the [maximum integer that can be properly represented by a float32 with 23-bit mantissa.](https://stackoverflow.com/a/3793950/7471760)<br>; \anchor doublemax3 (****) 2^53 = 9007199254740992 is the [maximum integer that can be properly represented by a double64 with 52-bit mantissa.](https://stackoverflow.com/a/3793950/7471760); </sup>; */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:219,Safety,avoid,avoid,219,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for fix bin size 3-D histograms.; /// Creates the main histogram structure.; ///; /// \param[in] name name of histogram (avoid blanks); /// \param[in] title histogram title.; /// If title is of the form `stringt;stringx;stringy;stringz`,; /// the histogram title is set to `stringt`,; /// the x axis title to `stringx`, the y axis title to `stringy`, etc.; /// \param[in] nbinsx number of bins along the X axis; /// \param[in] xlow low edge of the X axis first bin; /// \param[in] xup upper edge of the X axis last bin (not included in last bin); /// \param[in] nbinsy number of bins along the Y axis; /// \param[in] ylow low edge of the Y axis first bin; /// \param[in] yup upper edge of the Y axis last bin (not included in last bin); /// \param[in] nbinsz number of bins along the Z axis; /// \param[in] zlow low edge of the Z axis first bin; /// \param[in] zup upper edge of the Z axis last bin (not included in last bin)",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:102,Modifiability,variab,variable,102,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for variable bin size (along X, Y and Z axis) 3-D histograms using input; /// arrays of type float.; ///; /// \param[in] name name of histogram (avoid blanks); /// \param[in] title histogram title.; /// If title is of the form `stringt;stringx;stringy;stringz`; /// the histogram title is set to `stringt`,; /// the x axis title to `stringx`, the y axis title to `stringy`, etc.; /// \param[in] nbinsx number of bins; /// \param[in] xbins array of low-edges for each bin.; /// This is an array of type float and size nbinsx+1; /// \param[in] nbinsy number of bins; /// \param[in] ybins array of low-edges for each bin.; /// This is an array of type float and size nbinsy+1; /// \param[in] nbinsz number of bins; /// \param[in] zbins array of low-edges for each bin.; /// This is an array of type float and size nbinsz+1",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:243,Safety,avoid,avoid,243,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for variable bin size (along X, Y and Z axis) 3-D histograms using input; /// arrays of type float.; ///; /// \param[in] name name of histogram (avoid blanks); /// \param[in] title histogram title.; /// If title is of the form `stringt;stringx;stringy;stringz`; /// the histogram title is set to `stringt`,; /// the x axis title to `stringx`, the y axis title to `stringy`, etc.; /// \param[in] nbinsx number of bins; /// \param[in] xbins array of low-edges for each bin.; /// This is an array of type float and size nbinsx+1; /// \param[in] nbinsy number of bins; /// \param[in] ybins array of low-edges for each bin.; /// This is an array of type float and size nbinsy+1; /// \param[in] nbinsz number of bins; /// \param[in] zbins array of low-edges for each bin.; /// This is an array of type float and size nbinsz+1",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:102,Modifiability,variab,variable,102,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for variable bin size (along X, Y and Z axis) 3-D histograms using input; /// arrays of type double.; ///; /// \param[in] name name of histogram (avoid blanks); /// \param[in] title histogram title.; /// If title is of the form `stringt;stringx;stringy;stringz`; /// the histogram title is set to `stringt`,; /// the x axis title to `stringx`, the y axis title to `stringy`, etc.; /// \param[in] nbinsx number of bins; /// \param[in] xbins array of low-edges for each bin.; /// This is an array of type double and size nbinsx+1; /// \param[in] nbinsy number of bins; /// \param[in] ybins array of low-edges for each bin.; /// This is an array of type double and size nbinsy+1; /// \param[in] nbinsz number of bins; /// \param[in] zbins array of low-edges for each bin.; /// This is an array of type double and size nbinsz+1",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:244,Safety,avoid,avoid,244,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for variable bin size (along X, Y and Z axis) 3-D histograms using input; /// arrays of type double.; ///; /// \param[in] name name of histogram (avoid blanks); /// \param[in] title histogram title.; /// If title is of the form `stringt;stringx;stringy;stringz`; /// the histogram title is set to `stringt`,; /// the x axis title to `stringx`, the y axis title to `stringy`, etc.; /// \param[in] nbinsx number of bins; /// \param[in] xbins array of low-edges for each bin.; /// This is an array of type double and size nbinsx+1; /// \param[in] nbinsy number of bins; /// \param[in] ybins array of low-edges for each bin.; /// This is an array of type double and size nbinsy+1; /// \param[in] nbinsz number of bins; /// \param[in] zbins array of low-edges for each bin.; /// This is an array of type double and size nbinsz+1",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:74,Modifiability,extend,extended,74,"// skip computation of the statistics along axis that have labels (can be extended and are aphanumeric)",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:74,Modifiability,extend,extended,74,"// skip computation of the statistics along axis that have labels (can be extended and are aphanumeric)",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:74,Modifiability,extend,extended,74,"// skip computation of the statistics along axis that have labels (can be extended and are aphanumeric)",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:74,Modifiability,extend,extended,74,"// skip computation of the statistics along axis that have labels (can be extended and are aphanumeric)",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:70,Availability,mask,mask,70,"// skip computation for x axis : for only one axis no need to use bit mask",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:70,Availability,mask,mask,70,"// skip computation for y axis : for only one axis no need to use bit mask",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:70,Availability,mask,mask,70,"// skip computation for z axis : for only one axis no need to use bit mask",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:409,Deployability,integrat,integrated,409,"////////////////////////////////////////////////////////////////////////////////; /// Fill histogram following distribution in function fname.; ///; /// @param fname : Function name used for filling the historam; /// @param ntimes : number of times the histogram is filled; /// @param rng : (optional) Random number generator used to sample; ///; /// The distribution contained in the function fname (TF1) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Fill histogram channel; /// ntimes random numbers are generated; ///; /// N.B. By dfault this methods approximates the integral of the function in each bin with the; /// function value at the center of the bin, mutiplied by the bin width; ///; /// One can also call TF1::GetRandom to get a random variate from a function.",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:409,Integrability,integrat,integrated,409,"////////////////////////////////////////////////////////////////////////////////; /// Fill histogram following distribution in function fname.; ///; /// @param fname : Function name used for filling the historam; /// @param ntimes : number of times the histogram is filled; /// @param rng : (optional) Random number generator used to sample; ///; /// The distribution contained in the function fname (TF1) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Fill histogram channel; /// ntimes random numbers are generated; ///; /// N.B. By dfault this methods approximates the integral of the function in each bin with the; /// function value at the center of the bin, mutiplied by the bin width; ///; /// One can also call TF1::GetRandom to get a random variate from a function.",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate temporary space to store the integral and compute integral",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:407,Deployability,integrat,integrated,407,"////////////////////////////////////////////////////////////////////////////////; /// Fill histogram following distribution in histogram h.; ///; /// @param h : Histogram pointer used for smpling random number; /// @param ntimes : number of times the histogram is filled; /// @param rng : (optional) Random number generator used for sampling; ///; /// The distribution contained in the histogram h (TH3) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Fill histogram channel; /// ntimes random numbers are generated",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:407,Integrability,integrat,integrated,407,"////////////////////////////////////////////////////////////////////////////////; /// Fill histogram following distribution in histogram h.; ///; /// @param h : Histogram pointer used for smpling random number; /// @param ntimes : number of times the histogram is filled; /// @param rng : (optional) Random number generator used for sampling; ///; /// The distribution contained in the histogram h (TH3) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Fill histogram channel; /// ntimes random numbers are generated",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:1503,Security,access,access,1503,"////////////////////////////////////////////////////////////////////////////////; /// Project slices along Z in case of a 3-D histogram, then fit each slice; /// with function f1 and make a 2-d histogram for each fit parameter; /// Only cells in the bin range [binminx,binmaxx] and [binminy,binmaxy] are considered.; /// if f1=0, a gaussian is assumed; /// Before invoking this function, one can set a subrange to be fitted along Z; /// via f1->SetRange(zmin,zmax); /// The argument option (default=""QNR"") can be used to change the fit options.; /// ""Q"" means Quiet mode; /// ""N"" means do not show the result of the fit; /// ""R"" means fit the function in the specified function range; ///; /// Note that the generated histograms are added to the list of objects; /// in the current directory. It is the user's responsibility to delete; /// these histograms.; ///; /// Example: Assume a 3-d histogram h3; /// Root > h3->FitSlicesZ(); produces 4 TH2D histograms; /// with h3_0 containing parameter 0(Constant) for a Gaus fit; /// of each cell in X,Y projected along Z; /// with h3_1 containing parameter 1(Mean) for a gaus fit; /// with h3_2 containing parameter 2(StdDev) for a gaus fit; /// with h3_chi2 containing the chisquare/number of degrees of freedom for a gaus fit; ///; /// Root > h3->Fit(0,15,22,0,0,10);; /// same as above, but only for bins 15 to 22 along X; /// and only for cells in X,Y for which the corresponding projection; /// along Z has more than cut bins filled.; ///; /// NOTE: To access the generated histograms in the current directory, do eg:; /// TH2D *h3_1 = (TH2D*)gDirectory->Get(""h3_1"");",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:44,Modifiability,variab,variable,44,"// return first bin that is used in case of variable bin size axis",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:53,Modifiability,inherit,inherit,53,"// code duplication unavoidable because TH3 does not inherit from TH2",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:224,Availability,error,error,224,"////////////////////////////////////////////////////////////////////////////////; /// Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2]; /// for a 3-D histogram. Calculates also the integral error using error propagation; /// from the bin errors assuming that all the bins are uncorrelated.; /// By default the integral is computed as the sum of bin contents in the range.; /// if option ""width"" is specified, the integral is the sum of; /// the bin contents multiplied by the bin width in x, y and in z.",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:236,Availability,error,error,236,"////////////////////////////////////////////////////////////////////////////////; /// Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2]; /// for a 3-D histogram. Calculates also the integral error using error propagation; /// from the bin errors assuming that all the bins are uncorrelated.; /// By default the integral is computed as the sum of bin contents in the range.; /// if option ""width"" is specified, the integral is the sum of; /// the bin contents multiplied by the bin width in x, y and in z.",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:272,Availability,error,errors,272,"////////////////////////////////////////////////////////////////////////////////; /// Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2]; /// for a 3-D histogram. Calculates also the integral error using error propagation; /// from the bin errors assuming that all the bins are uncorrelated.; /// By default the integral is computed as the sum of bin contents in the range.; /// if option ""width"" is specified, the integral is the sum of; /// the bin contents multiplied by the bin width in x, y and in z.",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:98,Testability,test,test,98,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// THIS histogram and h2, using Kolmogorov test.; /// Default: Ignore under- and overflow bins in comparison; ///; /// option is a character string to specify options; /// ""U"" include Underflows in test; /// ""O"" include Overflows; /// ""N"" include comparison of normalizations; /// ""D"" Put out a line of ""Debug"" printout; /// ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// The KS test uses the distance between the pseudo-CDF's obtained; /// from the histogram. Since in more than 1D the order for generating the pseudo-CDF is; /// arbitrary, we use the pseudo-CDF's obtained from all the possible 6 combinations of the 3 axis.; /// The average of all the maximum distances obtained is used in the tests.",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:182,Testability,test,test,182,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// THIS histogram and h2, using Kolmogorov test.; /// Default: Ignore under- and overflow bins in comparison; ///; /// option is a character string to specify options; /// ""U"" include Underflows in test; /// ""O"" include Overflows; /// ""N"" include comparison of normalizations; /// ""D"" Put out a line of ""Debug"" printout; /// ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// The KS test uses the distance between the pseudo-CDF's obtained; /// from the histogram. Since in more than 1D the order for generating the pseudo-CDF is; /// arbitrary, we use the pseudo-CDF's obtained from all the possible 6 combinations of the 3 axis.; /// The average of all the maximum distances obtained is used in the tests.",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:337,Testability,test,test,337,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// THIS histogram and h2, using Kolmogorov test.; /// Default: Ignore under- and overflow bins in comparison; ///; /// option is a character string to specify options; /// ""U"" include Underflows in test; /// ""O"" include Overflows; /// ""N"" include comparison of normalizations; /// ""D"" Put out a line of ""Debug"" printout; /// ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// The KS test uses the distance between the pseudo-CDF's obtained; /// from the histogram. Since in more than 1D the order for generating the pseudo-CDF is; /// arbitrary, we use the pseudo-CDF's obtained from all the possible 6 combinations of the 3 axis.; /// The average of all the maximum distances obtained is used in the tests.",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:583,Testability,test,test,583,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// THIS histogram and h2, using Kolmogorov test.; /// Default: Ignore under- and overflow bins in comparison; ///; /// option is a character string to specify options; /// ""U"" include Underflows in test; /// ""O"" include Overflows; /// ""N"" include comparison of normalizations; /// ""D"" Put out a line of ""Debug"" printout; /// ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// The KS test uses the distance between the pseudo-CDF's obtained; /// from the histogram. Since in more than 1D the order for generating the pseudo-CDF is; /// arbitrary, we use the pseudo-CDF's obtained from all the possible 6 combinations of the 3 axis.; /// The average of all the maximum distances obtained is used in the tests.",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:652,Testability,test,test,652,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// THIS histogram and h2, using Kolmogorov test.; /// Default: Ignore under- and overflow bins in comparison; ///; /// option is a character string to specify options; /// ""U"" include Underflows in test; /// ""O"" include Overflows; /// ""N"" include comparison of normalizations; /// ""D"" Put out a line of ""Debug"" printout; /// ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// The KS test uses the distance between the pseudo-CDF's obtained; /// from the histogram. Since in more than 1D the order for generating the pseudo-CDF is; /// arbitrary, we use the pseudo-CDF's obtained from all the possible 6 combinations of the 3 axis.; /// The average of all the maximum distances obtained is used in the tests.",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:970,Testability,test,tests,970,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// THIS histogram and h2, using Kolmogorov test.; /// Default: Ignore under- and overflow bins in comparison; ///; /// option is a character string to specify options; /// ""U"" include Underflows in test; /// ""O"" include Overflows; /// ""N"" include comparison of normalizations; /// ""D"" Put out a line of ""Debug"" printout; /// ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// The KS test uses the distance between the pseudo-CDF's obtained; /// from the histogram. Since in more than 1D the order for generating the pseudo-CDF is; /// arbitrary, we use the pseudo-CDF's obtained from all the possible 6 combinations of the 3 axis.; /// The average of all the maximum distances obtained is used in the tests.",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:54,Availability,error,errors,54,"// calculate the effective entries.; // the case when errors are zero (w1 == 0 or w2 ==0) are equivalent to; // compare to a function. In that case the rescaling is done only on sqrt(esum2) or sqrt(esum1)",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:18,Availability,error,error,18,"// This numerical error condition should never occur:",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:623,Availability,error,errors,623,"////////////////////////////////////////////////////////////////////////////////; /// Project a 3-D histogram into a 1-D histogram along X.; ///; /// The projection is always of the type TH1D.; /// The projection is made from the cells along the X axis; /// ranging from iymin to iymax and izmin to izmax included.; /// By default, underflow and overflows are included in both the Y and Z axis.; /// By Setting iymin=1 and iymax=NbinsY the underflow and/or overflow in Y will be excluded; /// By setting izmin=1 and izmax=NbinsZ the underflow and/or overflow in Z will be excluded; ///; /// if option ""e"" is specified, the errors are computed.; /// if option ""d"" is specified, the projection is drawn in the current pad.; /// if option ""o"" original axis range of the target axes will be; /// kept, but only bins inside the selected range will be filled.; ///; /// NOTE that if a TH1D named ""name"" exists in the current directory or pad; /// the histogram is reset and filled again with the projected contents of the TH3.; ///; /// implemented using Project3D",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:622,Availability,error,errors,622,"////////////////////////////////////////////////////////////////////////////////; /// Project a 3-D histogram into a 1-D histogram along Y.; ///; /// The projection is always of the type TH1D.; /// The projection is made from the cells along the Y axis; /// ranging from ixmin to ixmax and izmin to izmax included.; /// By default, underflow and overflow are included in both the X and Z axis.; /// By setting ixmin=1 and ixmax=NbinsX the underflow and/or overflow in X will be excluded; /// By setting izmin=1 and izmax=NbinsZ the underflow and/or overflow in Z will be excluded; ///; /// if option ""e"" is specified, the errors are computed.; /// if option ""d"" is specified, the projection is drawn in the current pad.; /// if option ""o"" original axis range of the target axes will be; /// kept, but only bins inside the selected range will be filled.; ///; /// NOTE that if a TH1D named ""name"" exists in the current directory or pad,; /// the histogram is reset and filled again with the projected contents of the TH3.; ///; /// implemented using Project3D",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:680,Availability,error,errors,680,"////////////////////////////////////////////////////////////////////////////////; /// Project a 3-D histogram into a 1-D histogram along Z.; ///; /// The projection is always of the type TH1D.; /// The projection is made from the cells along the Z axis; /// ranging from ixmin to ixmax and iymin to iymax included.; /// By default, bins 1 to nx and 1 to ny are included; /// By default, underflow and overflow are included in both the X and Y axis.; /// By Setting ixmin=1 and ixmax=NbinsX the underflow and/or overflow in X will be excluded; /// By setting iymin=1 and/or iymax=NbinsY the underflow and/or overflow in Y will be excluded; ///; /// if option ""e"" is specified, the errors are computed.; /// if option ""d"" is specified, the projection is drawn in the current pad.; /// if option ""o"" original axis range of the target axes will be; /// kept, but only bins inside the selected range will be filled.; ///; /// NOTE that if a TH1D named ""name"" exists in the current directory or pad,; /// the histogram is reset and filled again with the projected contents of the TH3.; ///; /// implemented using Project3D",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:102,Performance,perform,performing,102,"////////////////////////////////////////////////////////////////////////////////; /// internal method performing the projection to 1D histogram; /// called from TH3::Project3D",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:225,Testability,Test,TestBit,225,"// save previous axis range and bits; // Int_t iminOld1 = axis1->GetFirst();; // Int_t imaxOld1 = axis1->GetLast();; // Int_t iminOld2 = axis2->GetFirst();; // Int_t imaxOld2 = axis2->GetLast();; // Bool_t hadRange1 = axis1->TestBit(TAxis::kAxisRange);; // Bool_t hadRange2 = axis2->TestBit(TAxis::kAxisRange);; // need to cast-away constness to set range",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:283,Testability,Test,TestBit,283,"// save previous axis range and bits; // Int_t iminOld1 = axis1->GetFirst();; // Int_t imaxOld1 = axis1->GetLast();; // Int_t iminOld2 = axis2->GetFirst();; // Int_t imaxOld2 = axis2->GetLast();; // Bool_t hadRange1 = axis1->TestBit(TAxis::kAxisRange);; // Bool_t hadRange2 = axis2->TestBit(TAxis::kAxisRange);; // need to cast-away constness to set range",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:44,Testability,Test,TestBit,44,"// // restore original range; // if (axis1->TestBit(TAxis::kAxisRange)) {; // if (hadRange1) const_cast<TAxis*>(axis1)->SetRange(iminOld1,imaxOld1);; // if (axis2->TestBit(TAxis::kAxisRange)) const_cast<TAxis*>(axis2)->SetRange(iminOld2,imaxOld2);; // // we need also to restore the original bits; // draw in current pad",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:164,Testability,Test,TestBit,164,"// // restore original range; // if (axis1->TestBit(TAxis::kAxisRange)) {; // if (hadRange1) const_cast<TAxis*>(axis1)->SetRange(iminOld1,imaxOld1);; // if (axis2->TestBit(TAxis::kAxisRange)) const_cast<TAxis*>(axis2)->SetRange(iminOld2,imaxOld2);; // // we need also to restore the original bits; // draw in current pad",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:103,Performance,perform,performing,103,"////////////////////////////////////////////////////////////////////////////////; /// internal methdod performing the projection to 1D histogram; /// called from other TH3::DoProject1D",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:12,Availability,error,errors,12,"// Activate errors",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:37,Modifiability,extend,extendable,37,"// if the out axis has labels and is extendable, temporary make it non-extendable to avoid adding extra bins",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:71,Modifiability,extend,extendable,71,"// if the out axis has labels and is extendable, temporary make it non-extendable to avoid adding extra bins",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:85,Safety,avoid,avoid,85,"// if the out axis has labels and is extendable, temporary make it non-extendable to avoid adding extra bins",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:26,Deployability,integrat,integrated,26,"// loop on the bins to be integrated (outbin should be called inbin)",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:26,Integrability,integrat,integrated,26,"// loop on the bins to be integrated (outbin should be called inbin)",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:28,Availability,error,errors,28,"// sum the bin contents and errors if needed",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:14,Availability,error,error,14,"// in case of error calculation (i.e. when Sumw2() is set); // use the effective entries for the entries; // since this is the only way to estimate them",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:6,Safety,avoid,avoid,6,"// to avoid numerical rounding",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:102,Performance,perform,performing,102,"////////////////////////////////////////////////////////////////////////////////; /// internal method performing the projection to a 2D histogram; /// called from TH3::Project3D",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:70,Modifiability,variab,variable,70,"// set bins for mixed axis do not exists - need to set afterwards the variable bins",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:12,Availability,error,errors,12,"// Activate errors",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:26,Deployability,integrat,integrated,26,"// loop on the bins to be integrated (outbin should be called inbin)",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:26,Integrability,integrat,integrated,26,"// loop on the bins to be integrated (outbin should be called inbin)",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:28,Availability,error,errors,28,"// sum the bin contents and errors if needed",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:6,Safety,avoid,avoid,6,"// to avoid numerical rounding",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:1143,Availability,error,errors,1143,"ion parameter, which may contain a combination of the characters x,y,z,e; /// - option = ""x"" return the x projection into a TH1D histogram; /// - option = ""y"" return the y projection into a TH1D histogram; /// - option = ""z"" return the z projection into a TH1D histogram; /// - option = ""xy"" return the x versus y projection into a TH2D histogram; /// - option = ""yx"" return the y versus x projection into a TH2D histogram; /// - option = ""xz"" return the x versus z projection into a TH2D histogram; /// - option = ""zx"" return the z versus x projection into a TH2D histogram; /// - option = ""yz"" return the y versus z projection into a TH2D histogram; /// - option = ""zy"" return the z versus y projection into a TH2D histogram; ///; /// NB: the notation ""a vs b"" means ""a"" vertical and ""b"" horizontal; ///; /// option = ""o"" original axis range of the target axes will be; /// kept, but only bins inside the selected range will be filled.; ///; /// If option contains the string ""e"", errors are computed; ///; /// The projection is made for the selected bins only.; /// To select a bin range along an axis, use TAxis::SetRange, eg; /// h3.GetYaxis()->SetRange(23,56);; ///; /// NOTE 1: The generated histogram is named th3name + option; /// eg if the TH3* h histogram is named ""myhist"", then; /// h->Project3D(""xy""); produces a TH2D histogram named ""myhist_xy""; /// if a histogram of the same type already exists, it is overwritten.; /// The following sequence; /// h->Project3D(""xy"");; /// h->Project3D(""xy2"");; /// will generate two TH2D histograms named ""myhist_xy"" and ""myhist_xy2""; /// A different name can be generated by attaching a string to the option; /// For example h->Project3D(""name_xy"") will generate an histogram with the name: h3dname_name_xy.; ///; /// NOTE 2: If an histogram of the same type and with the same name already exists in current Directory,; /// the histogram is reset and filled again with the projected contents of the TH3.; ///; /// NOTE 3: The number of entries in t",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:135,Integrability,depend,depending,135,"////////////////////////////////////////////////////////////////////////////////; /// Project a 3-d histogram into 1 or 2-d histograms depending on the; /// option parameter, which may contain a combination of the characters x,y,z,e; /// - option = ""x"" return the x projection into a TH1D histogram; /// - option = ""y"" return the y projection into a TH1D histogram; /// - option = ""z"" return the z projection into a TH1D histogram; /// - option = ""xy"" return the x versus y projection into a TH2D histogram; /// - option = ""yx"" return the y versus x projection into a TH2D histogram; /// - option = ""xz"" return the x versus z projection into a TH2D histogram; /// - option = ""zx"" return the z versus x projection into a TH2D histogram; /// - option = ""yz"" return the y versus z projection into a TH2D histogram; /// - option = ""zy"" return the z versus y projection into a TH2D histogram; ///; /// NB: the notation ""a vs b"" means ""a"" vertical and ""b"" horizontal; ///; /// option = ""o"" original axis range of the target axes will be; /// kept, but only bins inside the selected range will be filled.; ///; /// If option contains the string ""e"", errors are computed; ///; /// The projection is made for the selected bins only.; /// To select a bin range along an axis, use TAxis::SetRange, eg; /// h3.GetYaxis()->SetRange(23,56);; ///; /// NOTE 1: The generated histogram is named th3name + option; /// eg if the TH3* h histogram is named ""myhist"", then; /// h->Project3D(""xy""); produces a TH2D histogram named ""myhist_xy""; /// if a histogram of the same type already exists, it is overwritten.; /// The following sequence; /// h->Project3D(""xy"");; /// h->Project3D(""xy2"");; /// will generate two TH2D histograms named ""myhist_xy"" and ""myhist_xy2""; /// A different name can be generated by attaching a string to the option; /// For example h->Project3D(""name_xy"") will generate an histogram with the name: h3dname_name_xy.; ///; /// NOTE 2: If an histogram of the same type and with the same name already",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:2926,Safety,avoid,avoid,2926,"""b"" horizontal; ///; /// option = ""o"" original axis range of the target axes will be; /// kept, but only bins inside the selected range will be filled.; ///; /// If option contains the string ""e"", errors are computed; ///; /// The projection is made for the selected bins only.; /// To select a bin range along an axis, use TAxis::SetRange, eg; /// h3.GetYaxis()->SetRange(23,56);; ///; /// NOTE 1: The generated histogram is named th3name + option; /// eg if the TH3* h histogram is named ""myhist"", then; /// h->Project3D(""xy""); produces a TH2D histogram named ""myhist_xy""; /// if a histogram of the same type already exists, it is overwritten.; /// The following sequence; /// h->Project3D(""xy"");; /// h->Project3D(""xy2"");; /// will generate two TH2D histograms named ""myhist_xy"" and ""myhist_xy2""; /// A different name can be generated by attaching a string to the option; /// For example h->Project3D(""name_xy"") will generate an histogram with the name: h3dname_name_xy.; ///; /// NOTE 2: If an histogram of the same type and with the same name already exists in current Directory,; /// the histogram is reset and filled again with the projected contents of the TH3.; ///; /// NOTE 3: The number of entries in the projected histogram is estimated from the number of; /// effective entries for all the cells included in the projection.; ///; /// NOTE 4: underflow/overflow are included by default in the projection; /// To exclude underflow and/or overflow (for both axis in case of a projection to a 1D histogram) use option ""NUF"" and/or ""NOF""; /// With SetRange() you can have all bins except underflow/overflow only if you set the axis bit range as; /// following after having called SetRange: axis->SetRange(1, axis->GetNbins());; ///; /// NOTE 5: If TH1::AddDirectory is set to false, a new histogram is always created and the ownership of the; /// returned pointer is delegated to the user. Be sure in this case to call `delete` on it after it's no longer needed,; /// to avoid memory leaks.",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:82,Deployability,update,update,82,"// to use Fill for setting the bin contents of the Profile; // the following fill update wrongly the fBinSumw2- need to save it before",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:70,Modifiability,variab,variable,70,"// set bins for mixed axis do not exists - need to set afterwards the variable bins",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:26,Deployability,integrat,integrated,26,"// loop on the bins to be integrated (outbin should be called inbin)",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:26,Integrability,integrat,integrated,26,"// loop on the bins to be integrated (outbin should be called inbin)",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:22,Deployability,update,update,22,"// the following fill update wrongly the fBinSumw2- need to save it before",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:6,Safety,avoid,avoid,6,"// to avoid numerical rounding",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:1775,Availability,error,error,1775,"// option = ""xy"" return the x versus y projection into a TProfile2D histogram; /// option = ""yx"" return the y versus x projection into a TProfile2D histogram; /// option = ""xz"" return the x versus z projection into a TProfile2D histogram; /// option = ""zx"" return the z versus x projection into a TProfile2D histogram; /// option = ""yz"" return the y versus z projection into a TProfile2D histogram; /// option = ""zy"" return the z versus y projection into a TProfile2D histogram; /// NB: the notation ""a vs b"" means ""a"" vertical and ""b"" horizontal; ///; /// option = ""o"" original axis range of the target axes will be; /// kept, but only bins inside the selected range will be filled.; ///; /// The projection is made for the selected bins only.; /// To select a bin range along an axis, use TAxis::SetRange, eg; /// h3.GetYaxis()->SetRange(23,56);; ///; /// NOTE 1: The generated histogram is named th3name + ""_p"" + option; /// eg if the TH3* h histogram is named ""myhist"", then; /// h->Project3D(""xy""); produces a TProfile2D histogram named ""myhist_pxy"".; /// The following sequence; /// h->Project3DProfile(""xy"");; /// h->Project3DProfile(""xy2"");; /// will generate two TProfile2D histograms named ""myhist_pxy"" and ""myhist_pxy2""; /// So, passing additional characters in the option string one can customize the name.; ///; /// NOTE 2: If a profile of the same type already exists with compatible axes,; /// the profile is reset and filled again with the projected contents of the TH3.; /// In the case of axes incompatibility, an error is reported and a NULL pointer is returned.; ///; /// NOTE 3: The number of entries in the projected profile is estimated from the number of; /// effective entries for all the cells included in the projection.; ///; /// NOTE 4: underflow/overflow are by default excluded from the projection; /// (Note that this is a different default behavior compared to the projection to an histogram); /// To include the underflow and/or overflow use option ""UF"" and/or ""OF""",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:140,Integrability,depend,depending,140,"////////////////////////////////////////////////////////////////////////////////; /// Project a 3-d histogram into a 2-d profile histograms depending; /// on the option parameter; /// option may contain a combination of the characters x,y,z; /// option = ""xy"" return the x versus y projection into a TProfile2D histogram; /// option = ""yx"" return the y versus x projection into a TProfile2D histogram; /// option = ""xz"" return the x versus z projection into a TProfile2D histogram; /// option = ""zx"" return the z versus x projection into a TProfile2D histogram; /// option = ""yz"" return the y versus z projection into a TProfile2D histogram; /// option = ""zy"" return the z versus y projection into a TProfile2D histogram; /// NB: the notation ""a vs b"" means ""a"" vertical and ""b"" horizontal; ///; /// option = ""o"" original axis range of the target axes will be; /// kept, but only bins inside the selected range will be filled.; ///; /// The projection is made for the selected bins only.; /// To select a bin range along an axis, use TAxis::SetRange, eg; /// h3.GetYaxis()->SetRange(23,56);; ///; /// NOTE 1: The generated histogram is named th3name + ""_p"" + option; /// eg if the TH3* h histogram is named ""myhist"", then; /// h->Project3D(""xy""); produces a TProfile2D histogram named ""myhist_pxy"".; /// The following sequence; /// h->Project3DProfile(""xy"");; /// h->Project3DProfile(""xy2"");; /// will generate two TProfile2D histograms named ""myhist_pxy"" and ""myhist_pxy2""; /// So, passing additional characters in the option string one can customize the name.; ///; /// NOTE 2: If a profile of the same type already exists with compatible axes,; /// the profile is reset and filled again with the projected contents of the TH3.; /// In the case of axes incompatibility, an error is reported and a NULL pointer is returned.; ///; /// NOTE 3: The number of entries in the projected profile is estimated from the number of; /// effective entries for all the cells included in the projection.; ///; /// ",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:481,Availability,error,errors,481,"////////////////////////////////////////////////////////////////////////////////; /// Rebin this histogram grouping nxgroup/nygroup/nzgroup bins along the xaxis/yaxis/zaxis together.; ///; /// if newname is not blank a new temporary histogram hnew is created.; /// else the current histogram is modified (default); /// The parameter nxgroup/nygroup indicate how many bins along the xaxis/yaxis of this; /// have to me merged into one bin of hnew; /// If the original histogram has errors stored (via Sumw2), the resulting; /// histograms has new errors correctly calculated.; ///; /// examples: if hpxpy is an existing TH3 histogram with 40 x 40 x 40 bins; /// hpxpypz->Rebin3D(); // merges two bins along the xaxis and yaxis in one in hpxpypz; /// // Carefull: previous contents of hpxpy are lost; /// hpxpypz->RebinX(5); //merges five bins along the xaxis in one in hpxpypz; /// TH3 *hnew = hpxpypz->RebinY(5,""hnew""); // creates a new histogram hnew; /// // merging 5 bins of h1 along the yaxis in one bin; ///; /// NOTE : If nxgroup/nygroup is not an exact divider of the number of bins,; /// along the xaxis/yaxis the top limit(s) of the rebinned histogram; /// is changed to the upper edge of the xbin=newxbins*nxgroup resp.; /// ybin=newybins*nygroup and the corresponding bins are added to; /// the overflow bin.; /// Statistics will be recomputed from the new bin contents.",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:546,Availability,error,errors,546,"////////////////////////////////////////////////////////////////////////////////; /// Rebin this histogram grouping nxgroup/nygroup/nzgroup bins along the xaxis/yaxis/zaxis together.; ///; /// if newname is not blank a new temporary histogram hnew is created.; /// else the current histogram is modified (default); /// The parameter nxgroup/nygroup indicate how many bins along the xaxis/yaxis of this; /// have to me merged into one bin of hnew; /// If the original histogram has errors stored (via Sumw2), the resulting; /// histograms has new errors correctly calculated.; ///; /// examples: if hpxpy is an existing TH3 histogram with 40 x 40 x 40 bins; /// hpxpypz->Rebin3D(); // merges two bins along the xaxis and yaxis in one in hpxpypz; /// // Carefull: previous contents of hpxpy are lost; /// hpxpypz->RebinX(5); //merges five bins along the xaxis in one in hpxpypz; /// TH3 *hnew = hpxpypz->RebinY(5,""hnew""); // creates a new histogram hnew; /// // merging 5 bins of h1 along the yaxis in one bin; ///; /// NOTE : If nxgroup/nygroup is not an exact divider of the number of bins,; /// along the xaxis/yaxis the top limit(s) of the rebinned histogram; /// is changed to the upper edge of the xbin=newxbins*nxgroup resp.; /// ybin=newybins*nygroup and the corresponding bins are added to; /// the overflow bin.; /// Statistics will be recomputed from the new bin contents.",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:3,Modifiability,variab,variable,3,"// variable bin sizes in x or y, don't treat both cases separately",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:15,Availability,error,errors,15,"//changes also errors array (if any)",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:15,Availability,error,errors,15,"//changes also errors array",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:118,Availability,error,errors,118,"////////////////////////////////////////////////////////////////////////////////; /// Reset this histogram: contents, errors, etc.",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:101,Performance,perform,performing,101,"////////////////////////////////////////////////////////////////////////////////; /// static methdod performing the projection to 1D histogram",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:101,Performance,perform,performing,101,"////////////////////////////////////////////////////////////////////////////////; /// static methdod performing the projection to 2D histogram",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:102,Modifiability,variab,variable,102,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for variable bin size 3-D histograms.; /// (see TH3::TH3 for explanation of parameters)",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:102,Modifiability,variab,variable,102,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for variable bin size 3-D histograms.; /// (see TH3::TH3 for explanation of parameters)",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:118,Availability,error,errors,118,"////////////////////////////////////////////////////////////////////////////////; /// Reset this histogram: contents, errors, etc.",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:102,Modifiability,variab,variable,102,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for variable bin size 3-D histograms.; /// (see TH3::TH3 for explanation of parameters)",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:102,Modifiability,variab,variable,102,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for variable bin size 3-D histograms.; /// (see TH3::TH3 for explanation of parameters)",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:118,Availability,error,errors,118,"////////////////////////////////////////////////////////////////////////////////; /// Reset this histogram: contents, errors, etc.",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:102,Modifiability,variab,variable,102,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for variable bin size 3-D histograms; /// (see TH3::TH3 for explanation of parameters)",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:102,Modifiability,variab,variable,102,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for variable bin size 3-D histograms; /// (see TH3::TH3 for explanation of parameters)",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:118,Availability,error,errors,118,"////////////////////////////////////////////////////////////////////////////////; /// Reset this histogram: contents, errors, etc.",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:102,Modifiability,variab,variable,102,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for variable bin size 3-D histograms; /// (see TH3::TH3 for explanation of parameters)",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:102,Modifiability,variab,variable,102,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for variable bin size 3-D histograms; /// (see TH3::TH3 for explanation of parameters)",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:118,Availability,error,errors,118,"////////////////////////////////////////////////////////////////////////////////; /// Reset this histogram: contents, errors, etc.",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:102,Modifiability,variab,variable,102,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for variable bin size 3-D histograms; /// (see TH3::TH3 for explanation of parameters)",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:102,Modifiability,variab,variable,102,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for variable bin size 3-D histograms; /// (see TH3::TH3 for explanation of parameters)",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:118,Availability,error,errors,118,"////////////////////////////////////////////////////////////////////////////////; /// Reset this histogram: contents, errors, etc.",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:102,Modifiability,variab,variable,102,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for variable bin size 3-D histograms; /// (see TH3::TH3 for explanation of parameters)",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:102,Modifiability,variab,variable,102,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for variable bin size 3-D histograms; /// (see TH3::TH3 for explanation of parameters)",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:118,Availability,error,errors,118,"////////////////////////////////////////////////////////////////////////////////; /// Reset this histogram: contents, errors, etc.",MatchSource.CODE_COMMENT,hist/hist/src/TH3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THLimitsFinder.cxx:217,Performance,optimiz,optimize,217,"/** \class THLimitsFinder; \ingroup Histograms; Class to compute nice axis limits. This class is called by default by the histogramming system; and also by TTree::Draw, TTreePlayer::DrawSelect. TGaxis use it also to; optimize axis labels. A different finder may be specified via THLimitsFinder::SetFinder.; */; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,hist/hist/src/THLimitsFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THLimitsFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THLimitsFinder.cxx:259,Performance,optimiz,optimized,259,"////////////////////////////////////////////////////////////////////////////////; /// Compute the best axis limits for the X axis.; ///; /// If the bit kIsInteger is set, the number of channels is also recomputed.; /// The axis parameters are replaced by the optimized parameters.; ///; /// Example:; /// With the input parameters xmin=-1.467 and xmax=2.344, the function; /// will compute better limits -1.8 and 2.7 and store them in the axis.",MatchSource.CODE_COMMENT,hist/hist/src/THLimitsFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THLimitsFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THLimitsFinder.cxx:265,Performance,optimiz,optimized,265,"////////////////////////////////////////////////////////////////////////////////; /// Compute the best axis limits for the X and Y axis.; ///; /// If the bit kIsInteger is set, the number of channels is also recomputed.; /// The axis parameters are replaced by the optimized parameters",MatchSource.CODE_COMMENT,hist/hist/src/THLimitsFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THLimitsFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THLimitsFinder.cxx:268,Performance,optimiz,optimized,268,"////////////////////////////////////////////////////////////////////////////////; /// Compute the best axis limits for the X, Y and Z axis.; ///; /// If the bit kIsInteger is set, the number of channels is also recomputed.; /// The axis parameters are replaced by the optimized parameters",MatchSource.CODE_COMMENT,hist/hist/src/THLimitsFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THLimitsFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THLimitsFinder.cxx:247,Performance,Optimiz,Optimized,247,"////////////////////////////////////////////////////////////////////////////////; /// Static function to compute reasonable axis limits; ///; /// Input parameters:; ///; /// \param[in] A1,A2 : Original axis limits; /// \param[in] BinLow,BinHigh : Optimized axis limits. They should be initialized by the; /// calling method for instance to 0.; /// \param[out] nold : Original number of divisions.; /// \param[out] nbins : Optimized number of divisions.; /// \param[out] BinWidth : Optimized bin width. It should be initialized by the; /// calling method for instance to 0.; /// \param[in] option : ""T"" means Time axis.",MatchSource.CODE_COMMENT,hist/hist/src/THLimitsFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THLimitsFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THLimitsFinder.cxx:422,Performance,Optimiz,Optimized,422,"////////////////////////////////////////////////////////////////////////////////; /// Static function to compute reasonable axis limits; ///; /// Input parameters:; ///; /// \param[in] A1,A2 : Original axis limits; /// \param[in] BinLow,BinHigh : Optimized axis limits. They should be initialized by the; /// calling method for instance to 0.; /// \param[out] nold : Original number of divisions.; /// \param[out] nbins : Optimized number of divisions.; /// \param[out] BinWidth : Optimized bin width. It should be initialized by the; /// calling method for instance to 0.; /// \param[in] option : ""T"" means Time axis.",MatchSource.CODE_COMMENT,hist/hist/src/THLimitsFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THLimitsFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THLimitsFinder.cxx:481,Performance,Optimiz,Optimized,481,"////////////////////////////////////////////////////////////////////////////////; /// Static function to compute reasonable axis limits; ///; /// Input parameters:; ///; /// \param[in] A1,A2 : Original axis limits; /// \param[in] BinLow,BinHigh : Optimized axis limits. They should be initialized by the; /// calling method for instance to 0.; /// \param[out] nold : Original number of divisions.; /// \param[out] nbins : Optimized number of divisions.; /// \param[out] BinWidth : Optimized bin width. It should be initialized by the; /// calling method for instance to 0.; /// \param[in] option : ""T"" means Time axis.",MatchSource.CODE_COMMENT,hist/hist/src/THLimitsFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THLimitsFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THLimitsFinder.cxx:60,Integrability,rout,routine,60,"// if nold == -1 , program uses binwidth input from calling routine",MatchSource.CODE_COMMENT,hist/hist/src/THLimitsFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THLimitsFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THLimitsFinder.cxx:66,Safety,avoid,avoid,66,"//in the above statement, it is important to subtract 1e-10; //to avoid precision problems if the tests below; // Round mantissa",MatchSource.CODE_COMMENT,hist/hist/src/THLimitsFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THLimitsFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THLimitsFinder.cxx:98,Testability,test,tests,98,"//in the above statement, it is important to subtract 1e-10; //to avoid precision problems if the tests below; // Round mantissa",MatchSource.CODE_COMMENT,hist/hist/src/THLimitsFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THLimitsFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THLimitsFinder.cxx:86,Performance,Optimiz,Optimize,86,"////////////////////////////////////////////////////////////////////////////////; /// Optimize axis limits.; ///; /// When isInter=kTRUE, the function makes an integer binwidth; /// and recompute the number of bins accordingly.",MatchSource.CODE_COMMENT,hist/hist/src/THLimitsFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THLimitsFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THn.cxx:3,Integrability,Wrap,Wrap,3,"// Wrap around if needed",MatchSource.CODE_COMMENT,hist/hist/src/THn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THn.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THn.cxx:1429,Availability,error,errors,1429,"three dimensions,; and if a large fraction of all bins are filled.; Better alternatives are; - THnSparse if a fraction of all bins are filled; - TTree. The major problem of THn is the memory use caused by n-dimensional; histogramming: a THnD with 8 dimensions and 100 bins per dimension needs; more than 2.5GB of RAM!. To construct a THn object you must use one of its templated, derived; classes:. THnD (typedef for THnT<Double_t>): bin content held by a Double_t,; THnF (typedef for THnT<Float_t>): bin content held by a Float_t,; THnL (typedef for THnT<Long64_t>): bin content held by a Long64_t,; THnI (typedef for THnT<Int_t>): bin content held by an Int_t,; THnS (typedef for THnT<Short_t>): bin content held by a Short_t,; THnC (typedef for THnT<Char_t>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension; the number of bins, the minimal, and the maximal value on the dimension's; axis. A TH2F h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to. Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnF hn(""hn"", ""hn"", 2, bins, xmin, xmax);. ## Filling; A THn is filled just like a regular histogram, using; THn::Fill(x, weight), where x is a n-dimensional Double_t value.; To take errors into account, Sumw2() must be called before filling the; histogram.; Storage is allocated when the first bin content is stored. ## Projections; The dimensionality of a THn can be reduced by projecting it to; 1, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or; a THn. See the Projection() members. To only project parts of the; histogram, call. hn->GetAxis(12)->SetRange(from_bin, to_bin);. ## Conversion from other histogram classes; The static factory function THn::CreateHn() can be used to create a THn; from a TH1, TH2, TH3, THnSparse and (for copying) even from a THn. The; created THn will have compatble storage type, i.e. calling CreateHn() on; a TH2F will create a THnF.; */",MatchSource.CODE_COMMENT,hist/hist/src/THn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THn.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THn.cxx:1516,Energy Efficiency,allocate,allocated,1516,"three dimensions,; and if a large fraction of all bins are filled.; Better alternatives are; - THnSparse if a fraction of all bins are filled; - TTree. The major problem of THn is the memory use caused by n-dimensional; histogramming: a THnD with 8 dimensions and 100 bins per dimension needs; more than 2.5GB of RAM!. To construct a THn object you must use one of its templated, derived; classes:. THnD (typedef for THnT<Double_t>): bin content held by a Double_t,; THnF (typedef for THnT<Float_t>): bin content held by a Float_t,; THnL (typedef for THnT<Long64_t>): bin content held by a Long64_t,; THnI (typedef for THnT<Int_t>): bin content held by an Int_t,; THnS (typedef for THnT<Short_t>): bin content held by a Short_t,; THnC (typedef for THnT<Char_t>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension; the number of bins, the minimal, and the maximal value on the dimension's; axis. A TH2F h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to. Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnF hn(""hn"", ""hn"", 2, bins, xmin, xmax);. ## Filling; A THn is filled just like a regular histogram, using; THn::Fill(x, weight), where x is a n-dimensional Double_t value.; To take errors into account, Sumw2() must be called before filling the; histogram.; Storage is allocated when the first bin content is stored. ## Projections; The dimensionality of a THn can be reduced by projecting it to; 1, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or; a THn. See the Projection() members. To only project parts of the; histogram, call. hn->GetAxis(12)->SetRange(from_bin, to_bin);. ## Conversion from other histogram classes; The static factory function THn::CreateHn() can be used to create a THn; from a TH1, TH2, TH3, THnSparse and (for copying) even from a THn. The; created THn will have compatble storage type, i.e. calling CreateHn() on; a TH2F will create a THnF.; */",MatchSource.CODE_COMMENT,hist/hist/src/THn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THn.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THn.cxx:1615,Energy Efficiency,reduce,reduced,1615,"three dimensions,; and if a large fraction of all bins are filled.; Better alternatives are; - THnSparse if a fraction of all bins are filled; - TTree. The major problem of THn is the memory use caused by n-dimensional; histogramming: a THnD with 8 dimensions and 100 bins per dimension needs; more than 2.5GB of RAM!. To construct a THn object you must use one of its templated, derived; classes:. THnD (typedef for THnT<Double_t>): bin content held by a Double_t,; THnF (typedef for THnT<Float_t>): bin content held by a Float_t,; THnL (typedef for THnT<Long64_t>): bin content held by a Long64_t,; THnI (typedef for THnT<Int_t>): bin content held by an Int_t,; THnS (typedef for THnT<Short_t>): bin content held by a Short_t,; THnC (typedef for THnT<Char_t>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension; the number of bins, the minimal, and the maximal value on the dimension's; axis. A TH2F h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to. Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnF hn(""hn"", ""hn"", 2, bins, xmin, xmax);. ## Filling; A THn is filled just like a regular histogram, using; THn::Fill(x, weight), where x is a n-dimensional Double_t value.; To take errors into account, Sumw2() must be called before filling the; histogram.; Storage is allocated when the first bin content is stored. ## Projections; The dimensionality of a THn can be reduced by projecting it to; 1, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or; a THn. See the Projection() members. To only project parts of the; histogram, call. hn->GetAxis(12)->SetRange(from_bin, to_bin);. ## Conversion from other histogram classes; The static factory function THn::CreateHn() can be used to create a THn; from a TH1, TH2, TH3, THnSparse and (for copying) even from a THn. The; created THn will have compatble storage type, i.e. calling CreateHn() on; a TH2F will create a THnF.; */",MatchSource.CODE_COMMENT,hist/hist/src/THn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THn.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THn.cxx:127,Integrability,interface,interface,127,"////////////////////////////////////////////////////////////////////////////////; /// Create an iterator over all bins. Public interface is THnIter.",MatchSource.CODE_COMMENT,hist/hist/src/THn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THn.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THn.cxx:108,Availability,error,errors,108,"////////////////////////////////////////////////////////////////////////////////; /// Enable calculation of errors",MatchSource.CODE_COMMENT,hist/hist/src/THn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THn.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:102,Integrability,interface,interfaces,102,"/** \class THnBase; \ingroup Hist; Multidimensional histogram base.; Defines common functionality and interfaces for THn, THnSparse.; */",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:188,Integrability,depend,depending,188,"////////////////////////////////////////////////////////////////////////////////; /// Create an empty histogram with name and title with a given; /// set of axes. Create a TH1D/TH2D/TH3D, depending on the number; /// of elements in axes.",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:15,Modifiability,extend,extend,15,"// axis cannot extend to underflow/overflows (fix ROOT-8781)",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:39,Integrability,depend,depending,39,"// Create the corresponding THnSparse, depending on the storage; // type of the TH1. The class name will be ""TH??\0"" where the first; // ? is 1,2 or 3 and the second ? indicates the storage as C, S,; // I, L, F or D.",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:151,Availability,error,error,151,"////////////////////////////////////////////////////////////////////////////////; /// Fill the THnBase with the bins of hist that have content; /// or error != 0.",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:713,Availability,Error,Errors,713,"////////////////////////////////////////////////////////////////////////////////; /// Fit a THnSparse with function f; ///; /// since the data is sparse by default a likelihood fit is performed; /// merging all the regions with empty bins for better performance efficiency; ///; /// Since the THnSparse is not drawn no graphics options are passed; /// Here is the list of possible options; ///; /// = ""I"" Use integral of function in bin instead of value at bin center; /// = ""X"" Use chi2 method (default is log-likelihood method); /// = ""U"" Use a User specified fitting algorithm (via SetFCN); /// = ""Q"" Quiet mode (minimum printing); /// = ""V"" Verbose mode (default is between Q and V); /// = ""E"" Perform better Errors estimation using Minos technique; /// = ""B"" Use this option when you want to fix one or more parameters; /// and the fitting function is like ""gaus"", ""expo"", ""poln"", ""landau"".; /// = ""M"" More. Improve fit results; /// = ""R"" Use the Range specified in the function range",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:184,Performance,perform,performed,184,"////////////////////////////////////////////////////////////////////////////////; /// Fit a THnSparse with function f; ///; /// since the data is sparse by default a likelihood fit is performed; /// merging all the regions with empty bins for better performance efficiency; ///; /// Since the THnSparse is not drawn no graphics options are passed; /// Here is the list of possible options; ///; /// = ""I"" Use integral of function in bin instead of value at bin center; /// = ""X"" Use chi2 method (default is log-likelihood method); /// = ""U"" Use a User specified fitting algorithm (via SetFCN); /// = ""Q"" Quiet mode (minimum printing); /// = ""V"" Verbose mode (default is between Q and V); /// = ""E"" Perform better Errors estimation using Minos technique; /// = ""B"" Use this option when you want to fix one or more parameters; /// and the fitting function is like ""gaus"", ""expo"", ""poln"", ""landau"".; /// = ""M"" More. Improve fit results; /// = ""R"" Use the Range specified in the function range",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:250,Performance,perform,performance,250,"////////////////////////////////////////////////////////////////////////////////; /// Fit a THnSparse with function f; ///; /// since the data is sparse by default a likelihood fit is performed; /// merging all the regions with empty bins for better performance efficiency; ///; /// Since the THnSparse is not drawn no graphics options are passed; /// Here is the list of possible options; ///; /// = ""I"" Use integral of function in bin instead of value at bin center; /// = ""X"" Use chi2 method (default is log-likelihood method); /// = ""U"" Use a User specified fitting algorithm (via SetFCN); /// = ""Q"" Quiet mode (minimum printing); /// = ""V"" Verbose mode (default is between Q and V); /// = ""E"" Perform better Errors estimation using Minos technique; /// = ""B"" Use this option when you want to fix one or more parameters; /// and the fitting function is like ""gaus"", ""expo"", ""poln"", ""landau"".; /// = ""M"" More. Improve fit results; /// = ""R"" Use the Range specified in the function range",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:698,Performance,Perform,Perform,698,"////////////////////////////////////////////////////////////////////////////////; /// Fit a THnSparse with function f; ///; /// since the data is sparse by default a likelihood fit is performed; /// merging all the regions with empty bins for better performance efficiency; ///; /// Since the THnSparse is not drawn no graphics options are passed; /// Here is the list of possible options; ///; /// = ""I"" Use integral of function in bin instead of value at bin center; /// = ""X"" Use chi2 method (default is log-likelihood method); /// = ""U"" Use a User specified fitting algorithm (via SetFCN); /// = ""Q"" Quiet mode (minimum printing); /// = ""V"" Verbose mode (default is between Q and V); /// = ""E"" Perform better Errors estimation using Minos technique; /// = ""B"" Use this option when you want to fix one or more parameters; /// and the fitting function is like ""gaus"", ""expo"", ""poln"", ""landau"".; /// = ""M"" More. Improve fit results; /// = ""R"" Use the Range specified in the function range",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:507,Testability,log,log-likelihood,507,"////////////////////////////////////////////////////////////////////////////////; /// Fit a THnSparse with function f; ///; /// since the data is sparse by default a likelihood fit is performed; /// merging all the regions with empty bins for better performance efficiency; ///; /// Since the THnSparse is not drawn no graphics options are passed; /// Here is the list of possible options; ///; /// = ""I"" Use integral of function in bin instead of value at bin center; /// = ""X"" Use chi2 method (default is log-likelihood method); /// = ""U"" Use a User specified fitting algorithm (via SetFCN); /// = ""Q"" Quiet mode (minimum printing); /// = ""V"" Verbose mode (default is between Q and V); /// = ""E"" Perform better Errors estimation using Minos technique; /// = ""B"" Use this option when you want to fix one or more parameters; /// and the fitting function is like ""gaus"", ""expo"", ""poln"", ""landau"".; /// = ""M"" More. Improve fit results; /// = ""R"" Use the Range specified in the function range",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:243,Availability,error,error,243,"////////////////////////////////////////////////////////////////////////////////; /// \brief THnBase::GetBinCenter; /// \param idx an array of bin index in each dimension.; /// \return vector of bin centers in each dimension; empty in case of error.; /// \note Throws error if size is different from nDimensions.; /// \sa GetAxis(dim)::GetBinCenter(idx) as an alternative",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:268,Availability,error,error,268,"////////////////////////////////////////////////////////////////////////////////; /// \brief THnBase::GetBinCenter; /// \param idx an array of bin index in each dimension.; /// \return vector of bin centers in each dimension; empty in case of error.; /// \note Throws error if size is different from nDimensions.; /// \sa GetAxis(dim)::GetBinCenter(idx) as an alternative",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:318,Availability,error,errors,318,"////////////////////////////////////////////////////////////////////////////////; /// Project all bins into a ndim-dimensional THn / THnSparse (whatever; /// *this is) or if (ndim < 4 and !wantNDim) a TH1/2/3 histogram,; /// keeping only axes in dim (specifying ndim dimensions).; /// If ""option"" contains:; /// - ""E"" errors will be calculated.; /// - ""A"" ranges of the target axes will be ignored.; /// - ""O"" original axis range of the target axes will be; /// kept, but only bins inside the selected range; /// will be filled.",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:2,Energy Efficiency,allocate,allocate,2,/*allocate*/,MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:16,Availability,error,error,16,"// only _after_ error calculation, or sqrt(v) is taken into account!",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:41,Availability,error,error,41,"// re-compute the entries; // in case of error calculation (i.e. when Sumw2() is set); // use the effective entries for the entries; // since this is the only way to estimate them",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:6,Safety,avoid,avoid,6,"// to avoid numerical rounding",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:105,Availability,error,errors,105,"////////////////////////////////////////////////////////////////////////////////; /// Scale contents and errors of this histogram by c:; /// this = this * c; /// It does not modify the histogram's number of entries.",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:24,Availability,error,errors,24,"// Scale the contents & errors",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:11,Availability,error,error,11,"// Trigger error calculation if h has it",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:34,Energy Efficiency,reduce,reduce,34,"// Expand the exmap if needed, to reduce collisions",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:3,Energy Efficiency,allocate,allocate,3,/* allocate*/,MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:2,Energy Efficiency,allocate,allocate,2,/*allocate*/,MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:16,Availability,error,error,16,"// only _after_ error calculation, or sqrt(v) is taken into account!",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:11,Availability,error,error,11,"// Trigger error calculation if h has it",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:135,Availability,error,errors,135,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: this = this*c*f1; /// if errors are defined, errors are also recalculated.; ///; /// Only bins inside the function range are recomputed.; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after; /// calling Multiply()",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:155,Availability,error,errors,155,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: this = this*c*f1; /// if errors are defined, errors are also recalculated.; ///; /// Only bins inside the function range are recomputed.; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after; /// calling Multiply()",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:293,Availability,error,errors,293,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: this = this*c*f1; /// if errors are defined, errors are also recalculated.; ///; /// Only bins inside the function range are recomputed.; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after; /// calling Multiply()",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: this = this*c*f1; /// if errors are defined, errors are also recalculated.; ///; /// Only bins inside the function range are recomputed.; /// IMPORTANT NOTE: If you intend to use the errors of this histogram later; /// you should call Sumw2 before making this operation.; /// This is particularly important if you fit the histogram after; /// calling Multiply()",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:252,Availability,error,errors,252,"////////////////////////////////////////////////////////////////////////////////; /// Divide this histogram by h; /// this = this/(h); /// Note that if h has Sumw2 set, Sumw2 is automatically called for; /// this if not already set.; /// The resulting errors are calculated assuming uncorrelated content.",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:11,Availability,error,error,11,"// Trigger error calculation if h has it",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:305,Availability,error,errors,305,"////////////////////////////////////////////////////////////////////////////////; /// Replace contents of this histogram by multiplication of h1 by h2; /// this = (c1*h1)/(c2*h2); /// Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for; /// this if not already set.; /// The resulting errors are calculated assuming uncorrelated content.; /// However, if option =""B"" is specified, Binomial errors are computed.; /// In this case c1 and c2 do not make real sense and they are ignored.",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:410,Availability,error,errors,410,"////////////////////////////////////////////////////////////////////////////////; /// Replace contents of this histogram by multiplication of h1 by h2; /// this = (c1*h1)/(c2*h2); /// Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for; /// this if not already set.; /// The resulting errors are calculated assuming uncorrelated content.; /// However, if option =""B"" is specified, Binomial errors are computed.; /// In this case c1 and c2 do not make real sense and they are ignored.",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:11,Availability,error,error,11,"// Trigger error calculation if h1 or h2 have it",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:3,Modifiability,variab,variable,3,"// variable bins",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:2,Energy Efficiency,allocate,allocate,2,/*allocate*/,MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:16,Availability,error,error,16,"// only _after_ error calculation, or sqrt(v) is taken into account!",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear the histogram",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:3,Energy Efficiency,allocate,allocate,3,"// allocate integral array",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:275,Availability,error,error,275,"////////////////////////////////////////////////////////////////////////////////; /// Print one bin. If ""idx"" is != -1 use that to determine the bin,; /// otherwise (if ""idx"" == -1) use the coordinate in ""bin"".; /// If ""options"" contains:; /// - '0': only print bins with an error or content != 0; /// Return whether the bin was printed (depends on options)",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:338,Integrability,depend,depends,338,"////////////////////////////////////////////////////////////////////////////////; /// Print one bin. If ""idx"" is != -1 use that to determine the bin,; /// otherwise (if ""idx"" == -1) use the coordinate in ""bin"".; /// If ""options"" contains:; /// - '0': only print bins with an error or content != 0; /// Return whether the bin was printed (depends on options)",MatchSource.CODE_COMMENT,hist/hist/src/THnBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnChain.cxx:3,Performance,Perform,Perform,3,"// Perform projection.",MatchSource.CODE_COMMENT,hist/hist/src/THnChain.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnChain.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnChain.cxx:103,Deployability,update,updated,103,"/// Copy the properties of all axes to a histogram.; ///; /// \param hs histogram whose axes should be updated",MatchSource.CODE_COMMENT,hist/hist/src/THnChain.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnChain.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnChain.cxx:97,Modifiability,inherit,inherit,97,"// We would prefer to directly use `TH1::CheckEqualAxes` here;; // however it is protected so we inherit the parts we care about.; // FIXME(bbannier): It appears that functionality like `TH1::CheckEqualAxes` could; // just as well live in `TAxis` so that anyone using axes could make use of it.",MatchSource.CODE_COMMENT,hist/hist/src/THnChain.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnChain.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:674,Integrability,depend,depend,674,"/** \class THnSparseCoordCompression; THnSparseCoordCompression is a class used by THnSparse internally. It; represents a compacted n-dimensional array of bin coordinates (indices).; As the total number of bins in each dimension is known by THnSparse, bin; indices can be compacted to only use the amount of bins needed by the total; number of bins in each dimension. E.g. for a THnSparse with; {15, 100, 2, 20, 10, 100} bins per dimension, a bin index will only occupy; 28 bits (4+7+1+5+4+7), i.e. less than a 32bit integer. The tricky part is; the fast compression and decompression, the platform-independent storage; (think of endianness: the bits of the number 0x123456 depend on the; platform), and the hashing needed by THnSparseArrayChunk.; */",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:708,Security,hash,hashing,708,"/** \class THnSparseCoordCompression; THnSparseCoordCompression is a class used by THnSparse internally. It; represents a compacted n-dimensional array of bin coordinates (indices).; As the total number of bins in each dimension is known by THnSparse, bin; indices can be compacted to only use the amount of bins needed by the total; number of bins in each dimension. E.g. for a THnSparse with; {15, 100, 2, 20, 10, 100} bins per dimension, a bin index will only occupy; 28 bits (4+7+1+5+4+7), i.e. less than a 32bit integer. The tricky part is; the fast compression and decompression, the platform-independent storage; (think of endianness: the bits of the number 0x123456 depend on the; platform), and the hashing needed by THnSparseArrayChunk.; */",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:29,Energy Efficiency,allocate,allocated,29,"// return the number of bits allocated by the number ""n""",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:213,Security,hash,hash,213,"////////////////////////////////////////////////////////////////////////////////; /// Given the cbin coordinates coord_in, calculate (""compact""); /// the bin coordinates and return them in buf_in.; /// Return the hash value.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:254,Integrability,depend,depending,254,"/*; ////////////////////////////////////////////////////////////////////////////////; /// Calculate hash from bin indexes. ULong64_t THnSparseCoordCompression::GetHashFromCoords(const Int_t* coord) const; {; // Bins are addressed in two different modes, depending; // on whether the compact bin index fits into a Long64_t or not.; // If it does, we can use it as a ""perfect hash"" for the TExMap.; // If not we build a hash from the compact bin index, and use that; // as the TExMap's hash. if (fCoordBufferSize <= 8) {; // fits into a Long64_t; ULong64_t hash1 = 0;; for (Int_t i = 0; i < fNdimensions; ++i) {; hash1 += coord[i] << fBitOffsets[i];; }; return hash1;; }. // else: doesn't fit into a Long64_t:; memset(coord, 0, fCoordBufferSize);; for (Int_t i = 0; i < fNdimensions; ++i) {; const Int_t offset = fBitOffsets[i] / 8;; const Int_t shift = fBitOffsets[i] % 8;; ULong64_t val = coord[i];. Char_t* pbuf = fCoordBuffer + offset;; *pbuf += 0xff & (val << shift);; val = val >> (8 - shift);; while (val) {; ++pbuf;; *pbuf += 0xff & val;; val = val >> 8;; }; }. ULong64_t hash = 5381;; Char_t* str = fCoordBuffer;; while (str - fCoordBuffer < fCoordBufferSize) {; hash *= 5;; hash += *(str++);; }; return hash;; }; */; ////////////////////////////////////////////////////////////////////////////////; /// Calculate hash from compact bin index.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:100,Security,hash,hash,100,"/*; ////////////////////////////////////////////////////////////////////////////////; /// Calculate hash from bin indexes. ULong64_t THnSparseCoordCompression::GetHashFromCoords(const Int_t* coord) const; {; // Bins are addressed in two different modes, depending; // on whether the compact bin index fits into a Long64_t or not.; // If it does, we can use it as a ""perfect hash"" for the TExMap.; // If not we build a hash from the compact bin index, and use that; // as the TExMap's hash. if (fCoordBufferSize <= 8) {; // fits into a Long64_t; ULong64_t hash1 = 0;; for (Int_t i = 0; i < fNdimensions; ++i) {; hash1 += coord[i] << fBitOffsets[i];; }; return hash1;; }. // else: doesn't fit into a Long64_t:; memset(coord, 0, fCoordBufferSize);; for (Int_t i = 0; i < fNdimensions; ++i) {; const Int_t offset = fBitOffsets[i] / 8;; const Int_t shift = fBitOffsets[i] % 8;; ULong64_t val = coord[i];. Char_t* pbuf = fCoordBuffer + offset;; *pbuf += 0xff & (val << shift);; val = val >> (8 - shift);; while (val) {; ++pbuf;; *pbuf += 0xff & val;; val = val >> 8;; }; }. ULong64_t hash = 5381;; Char_t* str = fCoordBuffer;; while (str - fCoordBuffer < fCoordBufferSize) {; hash *= 5;; hash += *(str++);; }; return hash;; }; */; ////////////////////////////////////////////////////////////////////////////////; /// Calculate hash from compact bin index.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:374,Security,hash,hash,374,"/*; ////////////////////////////////////////////////////////////////////////////////; /// Calculate hash from bin indexes. ULong64_t THnSparseCoordCompression::GetHashFromCoords(const Int_t* coord) const; {; // Bins are addressed in two different modes, depending; // on whether the compact bin index fits into a Long64_t or not.; // If it does, we can use it as a ""perfect hash"" for the TExMap.; // If not we build a hash from the compact bin index, and use that; // as the TExMap's hash. if (fCoordBufferSize <= 8) {; // fits into a Long64_t; ULong64_t hash1 = 0;; for (Int_t i = 0; i < fNdimensions; ++i) {; hash1 += coord[i] << fBitOffsets[i];; }; return hash1;; }. // else: doesn't fit into a Long64_t:; memset(coord, 0, fCoordBufferSize);; for (Int_t i = 0; i < fNdimensions; ++i) {; const Int_t offset = fBitOffsets[i] / 8;; const Int_t shift = fBitOffsets[i] % 8;; ULong64_t val = coord[i];. Char_t* pbuf = fCoordBuffer + offset;; *pbuf += 0xff & (val << shift);; val = val >> (8 - shift);; while (val) {; ++pbuf;; *pbuf += 0xff & val;; val = val >> 8;; }; }. ULong64_t hash = 5381;; Char_t* str = fCoordBuffer;; while (str - fCoordBuffer < fCoordBufferSize) {; hash *= 5;; hash += *(str++);; }; return hash;; }; */; ////////////////////////////////////////////////////////////////////////////////; /// Calculate hash from compact bin index.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:418,Security,hash,hash,418,"/*; ////////////////////////////////////////////////////////////////////////////////; /// Calculate hash from bin indexes. ULong64_t THnSparseCoordCompression::GetHashFromCoords(const Int_t* coord) const; {; // Bins are addressed in two different modes, depending; // on whether the compact bin index fits into a Long64_t or not.; // If it does, we can use it as a ""perfect hash"" for the TExMap.; // If not we build a hash from the compact bin index, and use that; // as the TExMap's hash. if (fCoordBufferSize <= 8) {; // fits into a Long64_t; ULong64_t hash1 = 0;; for (Int_t i = 0; i < fNdimensions; ++i) {; hash1 += coord[i] << fBitOffsets[i];; }; return hash1;; }. // else: doesn't fit into a Long64_t:; memset(coord, 0, fCoordBufferSize);; for (Int_t i = 0; i < fNdimensions; ++i) {; const Int_t offset = fBitOffsets[i] / 8;; const Int_t shift = fBitOffsets[i] % 8;; ULong64_t val = coord[i];. Char_t* pbuf = fCoordBuffer + offset;; *pbuf += 0xff & (val << shift);; val = val >> (8 - shift);; while (val) {; ++pbuf;; *pbuf += 0xff & val;; val = val >> 8;; }; }. ULong64_t hash = 5381;; Char_t* str = fCoordBuffer;; while (str - fCoordBuffer < fCoordBufferSize) {; hash *= 5;; hash += *(str++);; }; return hash;; }; */; ////////////////////////////////////////////////////////////////////////////////; /// Calculate hash from compact bin index.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:484,Security,hash,hash,484,"/*; ////////////////////////////////////////////////////////////////////////////////; /// Calculate hash from bin indexes. ULong64_t THnSparseCoordCompression::GetHashFromCoords(const Int_t* coord) const; {; // Bins are addressed in two different modes, depending; // on whether the compact bin index fits into a Long64_t or not.; // If it does, we can use it as a ""perfect hash"" for the TExMap.; // If not we build a hash from the compact bin index, and use that; // as the TExMap's hash. if (fCoordBufferSize <= 8) {; // fits into a Long64_t; ULong64_t hash1 = 0;; for (Int_t i = 0; i < fNdimensions; ++i) {; hash1 += coord[i] << fBitOffsets[i];; }; return hash1;; }. // else: doesn't fit into a Long64_t:; memset(coord, 0, fCoordBufferSize);; for (Int_t i = 0; i < fNdimensions; ++i) {; const Int_t offset = fBitOffsets[i] / 8;; const Int_t shift = fBitOffsets[i] % 8;; ULong64_t val = coord[i];. Char_t* pbuf = fCoordBuffer + offset;; *pbuf += 0xff & (val << shift);; val = val >> (8 - shift);; while (val) {; ++pbuf;; *pbuf += 0xff & val;; val = val >> 8;; }; }. ULong64_t hash = 5381;; Char_t* str = fCoordBuffer;; while (str - fCoordBuffer < fCoordBufferSize) {; hash *= 5;; hash += *(str++);; }; return hash;; }; */; ////////////////////////////////////////////////////////////////////////////////; /// Calculate hash from compact bin index.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:1078,Security,hash,hash,1078,"/*; ////////////////////////////////////////////////////////////////////////////////; /// Calculate hash from bin indexes. ULong64_t THnSparseCoordCompression::GetHashFromCoords(const Int_t* coord) const; {; // Bins are addressed in two different modes, depending; // on whether the compact bin index fits into a Long64_t or not.; // If it does, we can use it as a ""perfect hash"" for the TExMap.; // If not we build a hash from the compact bin index, and use that; // as the TExMap's hash. if (fCoordBufferSize <= 8) {; // fits into a Long64_t; ULong64_t hash1 = 0;; for (Int_t i = 0; i < fNdimensions; ++i) {; hash1 += coord[i] << fBitOffsets[i];; }; return hash1;; }. // else: doesn't fit into a Long64_t:; memset(coord, 0, fCoordBufferSize);; for (Int_t i = 0; i < fNdimensions; ++i) {; const Int_t offset = fBitOffsets[i] / 8;; const Int_t shift = fBitOffsets[i] % 8;; ULong64_t val = coord[i];. Char_t* pbuf = fCoordBuffer + offset;; *pbuf += 0xff & (val << shift);; val = val >> (8 - shift);; while (val) {; ++pbuf;; *pbuf += 0xff & val;; val = val >> 8;; }; }. ULong64_t hash = 5381;; Char_t* str = fCoordBuffer;; while (str - fCoordBuffer < fCoordBufferSize) {; hash *= 5;; hash += *(str++);; }; return hash;; }; */; ////////////////////////////////////////////////////////////////////////////////; /// Calculate hash from compact bin index.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:1170,Security,hash,hash,1170,"/*; ////////////////////////////////////////////////////////////////////////////////; /// Calculate hash from bin indexes. ULong64_t THnSparseCoordCompression::GetHashFromCoords(const Int_t* coord) const; {; // Bins are addressed in two different modes, depending; // on whether the compact bin index fits into a Long64_t or not.; // If it does, we can use it as a ""perfect hash"" for the TExMap.; // If not we build a hash from the compact bin index, and use that; // as the TExMap's hash. if (fCoordBufferSize <= 8) {; // fits into a Long64_t; ULong64_t hash1 = 0;; for (Int_t i = 0; i < fNdimensions; ++i) {; hash1 += coord[i] << fBitOffsets[i];; }; return hash1;; }. // else: doesn't fit into a Long64_t:; memset(coord, 0, fCoordBufferSize);; for (Int_t i = 0; i < fNdimensions; ++i) {; const Int_t offset = fBitOffsets[i] / 8;; const Int_t shift = fBitOffsets[i] % 8;; ULong64_t val = coord[i];. Char_t* pbuf = fCoordBuffer + offset;; *pbuf += 0xff & (val << shift);; val = val >> (8 - shift);; while (val) {; ++pbuf;; *pbuf += 0xff & val;; val = val >> 8;; }; }. ULong64_t hash = 5381;; Char_t* str = fCoordBuffer;; while (str - fCoordBuffer < fCoordBufferSize) {; hash *= 5;; hash += *(str++);; }; return hash;; }; */; ////////////////////////////////////////////////////////////////////////////////; /// Calculate hash from compact bin index.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:1182,Security,hash,hash,1182,"/*; ////////////////////////////////////////////////////////////////////////////////; /// Calculate hash from bin indexes. ULong64_t THnSparseCoordCompression::GetHashFromCoords(const Int_t* coord) const; {; // Bins are addressed in two different modes, depending; // on whether the compact bin index fits into a Long64_t or not.; // If it does, we can use it as a ""perfect hash"" for the TExMap.; // If not we build a hash from the compact bin index, and use that; // as the TExMap's hash. if (fCoordBufferSize <= 8) {; // fits into a Long64_t; ULong64_t hash1 = 0;; for (Int_t i = 0; i < fNdimensions; ++i) {; hash1 += coord[i] << fBitOffsets[i];; }; return hash1;; }. // else: doesn't fit into a Long64_t:; memset(coord, 0, fCoordBufferSize);; for (Int_t i = 0; i < fNdimensions; ++i) {; const Int_t offset = fBitOffsets[i] / 8;; const Int_t shift = fBitOffsets[i] % 8;; ULong64_t val = coord[i];. Char_t* pbuf = fCoordBuffer + offset;; *pbuf += 0xff & (val << shift);; val = val >> (8 - shift);; while (val) {; ++pbuf;; *pbuf += 0xff & val;; val = val >> 8;; }; }. ULong64_t hash = 5381;; Char_t* str = fCoordBuffer;; while (str - fCoordBuffer < fCoordBufferSize) {; hash *= 5;; hash += *(str++);; }; return hash;; }; */; ////////////////////////////////////////////////////////////////////////////////; /// Calculate hash from compact bin index.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:1211,Security,hash,hash,1211,"/*; ////////////////////////////////////////////////////////////////////////////////; /// Calculate hash from bin indexes. ULong64_t THnSparseCoordCompression::GetHashFromCoords(const Int_t* coord) const; {; // Bins are addressed in two different modes, depending; // on whether the compact bin index fits into a Long64_t or not.; // If it does, we can use it as a ""perfect hash"" for the TExMap.; // If not we build a hash from the compact bin index, and use that; // as the TExMap's hash. if (fCoordBufferSize <= 8) {; // fits into a Long64_t; ULong64_t hash1 = 0;; for (Int_t i = 0; i < fNdimensions; ++i) {; hash1 += coord[i] << fBitOffsets[i];; }; return hash1;; }. // else: doesn't fit into a Long64_t:; memset(coord, 0, fCoordBufferSize);; for (Int_t i = 0; i < fNdimensions; ++i) {; const Int_t offset = fBitOffsets[i] / 8;; const Int_t shift = fBitOffsets[i] % 8;; ULong64_t val = coord[i];. Char_t* pbuf = fCoordBuffer + offset;; *pbuf += 0xff & (val << shift);; val = val >> (8 - shift);; while (val) {; ++pbuf;; *pbuf += 0xff & val;; val = val >> 8;; }; }. ULong64_t hash = 5381;; Char_t* str = fCoordBuffer;; while (str - fCoordBuffer < fCoordBufferSize) {; hash *= 5;; hash += *(str++);; }; return hash;; }; */; ////////////////////////////////////////////////////////////////////////////////; /// Calculate hash from compact bin index.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:1321,Security,hash,hash,1321,"/*; ////////////////////////////////////////////////////////////////////////////////; /// Calculate hash from bin indexes. ULong64_t THnSparseCoordCompression::GetHashFromCoords(const Int_t* coord) const; {; // Bins are addressed in two different modes, depending; // on whether the compact bin index fits into a Long64_t or not.; // If it does, we can use it as a ""perfect hash"" for the TExMap.; // If not we build a hash from the compact bin index, and use that; // as the TExMap's hash. if (fCoordBufferSize <= 8) {; // fits into a Long64_t; ULong64_t hash1 = 0;; for (Int_t i = 0; i < fNdimensions; ++i) {; hash1 += coord[i] << fBitOffsets[i];; }; return hash1;; }. // else: doesn't fit into a Long64_t:; memset(coord, 0, fCoordBufferSize);; for (Int_t i = 0; i < fNdimensions; ++i) {; const Int_t offset = fBitOffsets[i] / 8;; const Int_t shift = fBitOffsets[i] % 8;; ULong64_t val = coord[i];. Char_t* pbuf = fCoordBuffer + offset;; *pbuf += 0xff & (val << shift);; val = val >> (8 - shift);; while (val) {; ++pbuf;; *pbuf += 0xff & val;; val = val >> 8;; }; }. ULong64_t hash = 5381;; Char_t* str = fCoordBuffer;; while (str - fCoordBuffer < fCoordBufferSize) {; hash *= 5;; hash += *(str++);; }; return hash;; }; */; ////////////////////////////////////////////////////////////////////////////////; /// Calculate hash from compact bin index.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:46,Integrability,depend,depending,46,"// Bins are addressed in two different modes, depending; // on whether the compact bin index fits into a Long64_t or not.; // If it does, we can use it as a ""perfect hash"" for the TExMap.; // If not we build a hash from the compact bin index, and use that; // as the TExMap's hash.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:166,Security,hash,hash,166,"// Bins are addressed in two different modes, depending; // on whether the compact bin index fits into a Long64_t or not.; // If it does, we can use it as a ""perfect hash"" for the TExMap.; // If not we build a hash from the compact bin index, and use that; // as the TExMap's hash.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:210,Security,hash,hash,210,"// Bins are addressed in two different modes, depending; // on whether the compact bin index fits into a Long64_t or not.; // If it does, we can use it as a ""perfect hash"" for the TExMap.; // If not we build a hash from the compact bin index, and use that; // as the TExMap's hash.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:276,Security,hash,hash,276,"// Bins are addressed in two different modes, depending; // on whether the compact bin index fits into a Long64_t or not.; // If it does, we can use it as a ""perfect hash"" for the TExMap.; // If not we build a hash from the compact bin index, and use that; // as the TExMap's hash.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:3,Security,hash,hash,3,"// hash for current coordinates; 0 if not calculated",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:181,Availability,error,errors,181,"/** \class THnSparseArrayChunk; THnSparseArrayChunk is used internally by THnSparse.; THnSparse stores its (dynamic size) array of bin coordinates and their; contents (and possibly errors) in a TObjArray of THnSparseArrayChunk. Each; of the chunks holds an array of THnSparseCompactBinCoord and the content; (a TArray*), which is created outside (by the templated derived classes of; THnSparse) and passed in at construction time.; */",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:205,Availability,error,errors,205,"////////////////////////////////////////////////////////////////////////////////; /// (Default) initialize a chunk. Takes ownership of cont (~THnSparseArrayChunk deletes it),; /// and create an ArrayF for errors if ""errors"" is true.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:216,Availability,error,errors,216,"////////////////////////////////////////////////////////////////////////////////; /// (Default) initialize a chunk. Takes ownership of cont (~THnSparseArrayChunk deletes it),; /// and create an ArrayF for errors if ""errors"" is true.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:129,Energy Efficiency,allocate,allocated,129,"// When streaming out only the filled chunk is saved.; // When reading back only the memory needed for that filled part gets; // allocated. We need to check whether the allowed chunk size is; // bigger than the allocated size. If fCoordinateAllocationSize is; // set to -1 this chunk has been allocated by the streamer and the; // buffer allocation size is defined by [fCoordinatesSize]. In that; // case we need to compare fCoordinatesSize to; // fSingleCoordinateSize * fContent->GetSize(); // to determine whether we need to expand the buffer.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:211,Energy Efficiency,allocate,allocated,211,"// When streaming out only the filled chunk is saved.; // When reading back only the memory needed for that filled part gets; // allocated. We need to check whether the allowed chunk size is; // bigger than the allocated size. If fCoordinateAllocationSize is; // set to -1 this chunk has been allocated by the streamer and the; // buffer allocation size is defined by [fCoordinatesSize]. In that; // case we need to compare fCoordinatesSize to; // fSingleCoordinateSize * fContent->GetSize(); // to determine whether we need to expand the buffer.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:293,Energy Efficiency,allocate,allocated,293,"// When streaming out only the filled chunk is saved.; // When reading back only the memory needed for that filled part gets; // allocated. We need to check whether the allowed chunk size is; // bigger than the allocated size. If fCoordinateAllocationSize is; // set to -1 this chunk has been allocated by the streamer and the; // buffer allocation size is defined by [fCoordinatesSize]. In that; // case we need to compare fCoordinatesSize to; // fSingleCoordinateSize * fContent->GetSize(); // to determine whether we need to expand the buffer.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:14,Energy Efficiency,allocate,allocate,14,"// need to re-allocate:",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:105,Availability,error,errors,105,"////////////////////////////////////////////////////////////////////////////////; /// Turn on support of errors",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:1541,Availability,error,errors,1541,"def for THnSparseT<ArrayD>): bin content held by a Double_t,; - THnSparseF (typedef for THnSparseT<ArrayF>): bin content held by a Float_t,; - THnSparseL (typedef for THnSparseT<ArrayL64>): bin content held by a Long64_t,; - THnSparseI (typedef for THnSparseT<ArrayI>): bin content held by an Int_t,; - THnSparseS (typedef for THnSparseT<ArrayS>): bin content held by a Short_t,; - THnSparseC (typedef for THnSparseT<ArrayC>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension; the number of bins, the minimal, and the maximal value on the dimension's; axis. A TH2 h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to. Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnSparseD hs(""hs"", ""hs"", 2, bins, xmin, xmax);. ## Filling; A THnSparse is filled just like a regular histogram, using; THnSparse::Fill(x, weight), where x is a n-dimensional Double_t value.; To take errors into account, Sumw2() must be called before filling the; histogram. Bins are allocated as needed; the status of the allocation can be observed; by GetSparseFractionBins(), GetSparseFractionMem(). ## Fast Bin Content Access; When iterating over a THnSparse one should only look at filled bins to save; processing time. The number of filled bins is returned by; THnSparse::GetNbins(); the bin content for each (linear) bin number can; be retrieved by THnSparse::GetBinContent(linidx, (Int_t*)coord).; After the call, coord will contain the bin coordinate of each axis for the bin; with linear index linidx. A possible call would be. std::cout << hs.GetBinContent(0, coord);; std::cout <<"" is the content of bin [x = "" << coord[0] ""; << "" | y = "" << coord[1] << ""]"" << std::endl;. ## Efficiency; TH1 and TH2 are generally faster than THnSparse for one and two dimensional; distributions. THnSparse becomes competitive for a sparsely filled TH3; with large numbers of bins per dimension. The tutorial sparsehist.C; shows the turn",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:37,Energy Efficiency,Efficient,Efficient,37,"/** \class THnSparse; \ingroup Hist. Efficient multidimensional histogram. Use a THnSparse instead of TH1 / TH2 / TH3 / array for histogramming when; only a small fraction of bins is filled. A 10-dimensional histogram with 10; bins per dimension has 10^10 bins; in a naive implementation this will not; fit in memory. THnSparse only allocates memory for the bins that have; non-zero bin content instead, drastically reducing both the memory usage; and the access time. To construct a THnSparse object you must use one of its templated, derived; classes:; - THnSparseD (typedef for THnSparseT<ArrayD>): bin content held by a Double_t,; - THnSparseF (typedef for THnSparseT<ArrayF>): bin content held by a Float_t,; - THnSparseL (typedef for THnSparseT<ArrayL64>): bin content held by a Long64_t,; - THnSparseI (typedef for THnSparseT<ArrayI>): bin content held by an Int_t,; - THnSparseS (typedef for THnSparseT<ArrayS>): bin content held by a Short_t,; - THnSparseC (typedef for THnSparseT<ArrayC>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension; the number of bins, the minimal, and the maximal value on the dimension's; axis. A TH2 h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to. Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnSparseD hs(""hs"", ""hs"", 2, bins, xmin, xmax);. ## Filling; A THnSparse is filled just like a regular histogram, using; THnSparse::Fill(x, weight), where x is a n-dimensional Double_t value.; To take errors into account, Sumw2() must be called before filling the; histogram. Bins are allocated as needed; the status of the allocation can be observed; by GetSparseFractionBins(), GetSparseFractionMem(). ## Fast Bin Content Access; When iterating over a THnSparse one should only look at filled bins to save; processing time. The number of filled bins is returned by; THnSparse::GetNbins(); the bin content for each (linear) bin number can; be retrieved by THnS",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:333,Energy Efficiency,allocate,allocates,333,"/** \class THnSparse; \ingroup Hist. Efficient multidimensional histogram. Use a THnSparse instead of TH1 / TH2 / TH3 / array for histogramming when; only a small fraction of bins is filled. A 10-dimensional histogram with 10; bins per dimension has 10^10 bins; in a naive implementation this will not; fit in memory. THnSparse only allocates memory for the bins that have; non-zero bin content instead, drastically reducing both the memory usage; and the access time. To construct a THnSparse object you must use one of its templated, derived; classes:; - THnSparseD (typedef for THnSparseT<ArrayD>): bin content held by a Double_t,; - THnSparseF (typedef for THnSparseT<ArrayF>): bin content held by a Float_t,; - THnSparseL (typedef for THnSparseT<ArrayL64>): bin content held by a Long64_t,; - THnSparseI (typedef for THnSparseT<ArrayI>): bin content held by an Int_t,; - THnSparseS (typedef for THnSparseT<ArrayS>): bin content held by a Short_t,; - THnSparseC (typedef for THnSparseT<ArrayC>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension; the number of bins, the minimal, and the maximal value on the dimension's; axis. A TH2 h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to. Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnSparseD hs(""hs"", ""hs"", 2, bins, xmin, xmax);. ## Filling; A THnSparse is filled just like a regular histogram, using; THnSparse::Fill(x, weight), where x is a n-dimensional Double_t value.; To take errors into account, Sumw2() must be called before filling the; histogram. Bins are allocated as needed; the status of the allocation can be observed; by GetSparseFractionBins(), GetSparseFractionMem(). ## Fast Bin Content Access; When iterating over a THnSparse one should only look at filled bins to save; processing time. The number of filled bins is returned by; THnSparse::GetNbins(); the bin content for each (linear) bin number can; be retrieved by THnS",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:1625,Energy Efficiency,allocate,allocated,1625,"): bin content held by a Float_t,; - THnSparseL (typedef for THnSparseT<ArrayL64>): bin content held by a Long64_t,; - THnSparseI (typedef for THnSparseT<ArrayI>): bin content held by an Int_t,; - THnSparseS (typedef for THnSparseT<ArrayS>): bin content held by a Short_t,; - THnSparseC (typedef for THnSparseT<ArrayC>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension; the number of bins, the minimal, and the maximal value on the dimension's; axis. A TH2 h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to. Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnSparseD hs(""hs"", ""hs"", 2, bins, xmin, xmax);. ## Filling; A THnSparse is filled just like a regular histogram, using; THnSparse::Fill(x, weight), where x is a n-dimensional Double_t value.; To take errors into account, Sumw2() must be called before filling the; histogram. Bins are allocated as needed; the status of the allocation can be observed; by GetSparseFractionBins(), GetSparseFractionMem(). ## Fast Bin Content Access; When iterating over a THnSparse one should only look at filled bins to save; processing time. The number of filled bins is returned by; THnSparse::GetNbins(); the bin content for each (linear) bin number can; be retrieved by THnSparse::GetBinContent(linidx, (Int_t*)coord).; After the call, coord will contain the bin coordinate of each axis for the bin; with linear index linidx. A possible call would be. std::cout << hs.GetBinContent(0, coord);; std::cout <<"" is the content of bin [x = "" << coord[0] ""; << "" | y = "" << coord[1] << ""]"" << std::endl;. ## Efficiency; TH1 and TH2 are generally faster than THnSparse for one and two dimensional; distributions. THnSparse becomes competitive for a sparsely filled TH3; with large numbers of bins per dimension. The tutorial sparsehist.C; shows the turning point. On a AMD64 with 8GB memory, THnSparse ""wins""; starting with a TH3 with 30 bins per dimension. U",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:2838,Energy Efficiency,reduce,reduced,2838,"he number of filled bins is returned by; THnSparse::GetNbins(); the bin content for each (linear) bin number can; be retrieved by THnSparse::GetBinContent(linidx, (Int_t*)coord).; After the call, coord will contain the bin coordinate of each axis for the bin; with linear index linidx. A possible call would be. std::cout << hs.GetBinContent(0, coord);; std::cout <<"" is the content of bin [x = "" << coord[0] ""; << "" | y = "" << coord[1] << ""]"" << std::endl;. ## Efficiency; TH1 and TH2 are generally faster than THnSparse for one and two dimensional; distributions. THnSparse becomes competitive for a sparsely filled TH3; with large numbers of bins per dimension. The tutorial sparsehist.C; shows the turning point. On a AMD64 with 8GB memory, THnSparse ""wins""; starting with a TH3 with 30 bins per dimension. Using a THnSparse for a; one-dimensional histogram is only reasonable if it has a huge number of bins. ## Projections; The dimensionality of a THnSparse can be reduced by projecting it to; 1, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or; a THnSparse. See the Projection() members. To only project parts of the; histogram, call. THnSparse::GetAxis(12)->SetRange(from_bin, to_bin);. ## Internal Representation; An entry for a filled bin consists of its n-dimensional coordinates and; its bin content. The coordinates are compacted to use as few bits as; possible; e.g. a histogram with 10 bins in x and 20 bins in y will only; use 4 bits for the x representation and 5 bits for the y representation.; This is handled by the internal class THnSparseCompactBinCoord.; Bin data (content and coordinates) are allocated in chunks of size; fChunkSize; this parameter can be set when constructing a THnSparse. Each; chunk is represented by an object of class THnSparseArrayChunk. Translation from an n-dimensional bin coordinate to the linear index within; the chunks is done by GetBin(). It creates a hash from the compacted bin; coordinates (the hash of a bin coordinate",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:3507,Energy Efficiency,allocate,allocated,3507," The tutorial sparsehist.C; shows the turning point. On a AMD64 with 8GB memory, THnSparse ""wins""; starting with a TH3 with 30 bins per dimension. Using a THnSparse for a; one-dimensional histogram is only reasonable if it has a huge number of bins. ## Projections; The dimensionality of a THnSparse can be reduced by projecting it to; 1, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or; a THnSparse. See the Projection() members. To only project parts of the; histogram, call. THnSparse::GetAxis(12)->SetRange(from_bin, to_bin);. ## Internal Representation; An entry for a filled bin consists of its n-dimensional coordinates and; its bin content. The coordinates are compacted to use as few bits as; possible; e.g. a histogram with 10 bins in x and 20 bins in y will only; use 4 bits for the x representation and 5 bits for the y representation.; This is handled by the internal class THnSparseCompactBinCoord.; Bin data (content and coordinates) are allocated in chunks of size; fChunkSize; this parameter can be set when constructing a THnSparse. Each; chunk is represented by an object of class THnSparseArrayChunk. Translation from an n-dimensional bin coordinate to the linear index within; the chunks is done by GetBin(). It creates a hash from the compacted bin; coordinates (the hash of a bin coordinate is the compacted coordinate itself; if it takes less than 8 bytes, the size of a Long64_t.; This hash is used to lookup the linear index in the TExMap member fBins;; the coordinates of the entry fBins points to is compared to the coordinates; passed to GetBin(). If they do not match, these two coordinates have the same; hash - which is extremely unlikely but (for the case where the compact bin; coordinates are larger than 4 bytes) possible. In this case, fBinsContinued; contains a chain of linear indexes with the same hash. Iterating through this; chain and comparing each bin coordinates with the one passed to GetBin() will; retrieve the matching bin.; */",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:456,Security,access,access,456,"/** \class THnSparse; \ingroup Hist. Efficient multidimensional histogram. Use a THnSparse instead of TH1 / TH2 / TH3 / array for histogramming when; only a small fraction of bins is filled. A 10-dimensional histogram with 10; bins per dimension has 10^10 bins; in a naive implementation this will not; fit in memory. THnSparse only allocates memory for the bins that have; non-zero bin content instead, drastically reducing both the memory usage; and the access time. To construct a THnSparse object you must use one of its templated, derived; classes:; - THnSparseD (typedef for THnSparseT<ArrayD>): bin content held by a Double_t,; - THnSparseF (typedef for THnSparseT<ArrayF>): bin content held by a Float_t,; - THnSparseL (typedef for THnSparseT<ArrayL64>): bin content held by a Long64_t,; - THnSparseI (typedef for THnSparseT<ArrayI>): bin content held by an Int_t,; - THnSparseS (typedef for THnSparseT<ArrayS>): bin content held by a Short_t,; - THnSparseC (typedef for THnSparseT<ArrayC>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension; the number of bins, the minimal, and the maximal value on the dimension's; axis. A TH2 h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to. Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnSparseD hs(""hs"", ""hs"", 2, bins, xmin, xmax);. ## Filling; A THnSparse is filled just like a regular histogram, using; THnSparse::Fill(x, weight), where x is a n-dimensional Double_t value.; To take errors into account, Sumw2() must be called before filling the; histogram. Bins are allocated as needed; the status of the allocation can be observed; by GetSparseFractionBins(), GetSparseFractionMem(). ## Fast Bin Content Access; When iterating over a THnSparse one should only look at filled bins to save; processing time. The number of filled bins is returned by; THnSparse::GetNbins(); the bin content for each (linear) bin number can; be retrieved by THnS",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:1764,Security,Access,Access,1764,"rseI (typedef for THnSparseT<ArrayI>): bin content held by an Int_t,; - THnSparseS (typedef for THnSparseT<ArrayS>): bin content held by a Short_t,; - THnSparseC (typedef for THnSparseT<ArrayC>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension; the number of bins, the minimal, and the maximal value on the dimension's; axis. A TH2 h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to. Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnSparseD hs(""hs"", ""hs"", 2, bins, xmin, xmax);. ## Filling; A THnSparse is filled just like a regular histogram, using; THnSparse::Fill(x, weight), where x is a n-dimensional Double_t value.; To take errors into account, Sumw2() must be called before filling the; histogram. Bins are allocated as needed; the status of the allocation can be observed; by GetSparseFractionBins(), GetSparseFractionMem(). ## Fast Bin Content Access; When iterating over a THnSparse one should only look at filled bins to save; processing time. The number of filled bins is returned by; THnSparse::GetNbins(); the bin content for each (linear) bin number can; be retrieved by THnSparse::GetBinContent(linidx, (Int_t*)coord).; After the call, coord will contain the bin coordinate of each axis for the bin; with linear index linidx. A possible call would be. std::cout << hs.GetBinContent(0, coord);; std::cout <<"" is the content of bin [x = "" << coord[0] ""; << "" | y = "" << coord[1] << ""]"" << std::endl;. ## Efficiency; TH1 and TH2 are generally faster than THnSparse for one and two dimensional; distributions. THnSparse becomes competitive for a sparsely filled TH3; with large numbers of bins per dimension. The tutorial sparsehist.C; shows the turning point. On a AMD64 with 8GB memory, THnSparse ""wins""; starting with a TH3 with 30 bins per dimension. Using a THnSparse for a; one-dimensional histogram is only reasonable if it has a huge number of bins. ## Projections; The dim",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:3797,Security,hash,hash,3797," The tutorial sparsehist.C; shows the turning point. On a AMD64 with 8GB memory, THnSparse ""wins""; starting with a TH3 with 30 bins per dimension. Using a THnSparse for a; one-dimensional histogram is only reasonable if it has a huge number of bins. ## Projections; The dimensionality of a THnSparse can be reduced by projecting it to; 1, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or; a THnSparse. See the Projection() members. To only project parts of the; histogram, call. THnSparse::GetAxis(12)->SetRange(from_bin, to_bin);. ## Internal Representation; An entry for a filled bin consists of its n-dimensional coordinates and; its bin content. The coordinates are compacted to use as few bits as; possible; e.g. a histogram with 10 bins in x and 20 bins in y will only; use 4 bits for the x representation and 5 bits for the y representation.; This is handled by the internal class THnSparseCompactBinCoord.; Bin data (content and coordinates) are allocated in chunks of size; fChunkSize; this parameter can be set when constructing a THnSparse. Each; chunk is represented by an object of class THnSparseArrayChunk. Translation from an n-dimensional bin coordinate to the linear index within; the chunks is done by GetBin(). It creates a hash from the compacted bin; coordinates (the hash of a bin coordinate is the compacted coordinate itself; if it takes less than 8 bytes, the size of a Long64_t.; This hash is used to lookup the linear index in the TExMap member fBins;; the coordinates of the entry fBins points to is compared to the coordinates; passed to GetBin(). If they do not match, these two coordinates have the same; hash - which is extremely unlikely but (for the case where the compact bin; coordinates are larger than 4 bytes) possible. In this case, fBinsContinued; contains a chain of linear indexes with the same hash. Iterating through this; chain and comparing each bin coordinates with the one passed to GetBin() will; retrieve the matching bin.; */",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:3843,Security,hash,hash,3843," The tutorial sparsehist.C; shows the turning point. On a AMD64 with 8GB memory, THnSparse ""wins""; starting with a TH3 with 30 bins per dimension. Using a THnSparse for a; one-dimensional histogram is only reasonable if it has a huge number of bins. ## Projections; The dimensionality of a THnSparse can be reduced by projecting it to; 1, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or; a THnSparse. See the Projection() members. To only project parts of the; histogram, call. THnSparse::GetAxis(12)->SetRange(from_bin, to_bin);. ## Internal Representation; An entry for a filled bin consists of its n-dimensional coordinates and; its bin content. The coordinates are compacted to use as few bits as; possible; e.g. a histogram with 10 bins in x and 20 bins in y will only; use 4 bits for the x representation and 5 bits for the y representation.; This is handled by the internal class THnSparseCompactBinCoord.; Bin data (content and coordinates) are allocated in chunks of size; fChunkSize; this parameter can be set when constructing a THnSparse. Each; chunk is represented by an object of class THnSparseArrayChunk. Translation from an n-dimensional bin coordinate to the linear index within; the chunks is done by GetBin(). It creates a hash from the compacted bin; coordinates (the hash of a bin coordinate is the compacted coordinate itself; if it takes less than 8 bytes, the size of a Long64_t.; This hash is used to lookup the linear index in the TExMap member fBins;; the coordinates of the entry fBins points to is compared to the coordinates; passed to GetBin(). If they do not match, these two coordinates have the same; hash - which is extremely unlikely but (for the case where the compact bin; coordinates are larger than 4 bytes) possible. In this case, fBinsContinued; contains a chain of linear indexes with the same hash. Iterating through this; chain and comparing each bin coordinates with the one passed to GetBin() will; retrieve the matching bin.; */",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:3965,Security,hash,hash,3965," The tutorial sparsehist.C; shows the turning point. On a AMD64 with 8GB memory, THnSparse ""wins""; starting with a TH3 with 30 bins per dimension. Using a THnSparse for a; one-dimensional histogram is only reasonable if it has a huge number of bins. ## Projections; The dimensionality of a THnSparse can be reduced by projecting it to; 1, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or; a THnSparse. See the Projection() members. To only project parts of the; histogram, call. THnSparse::GetAxis(12)->SetRange(from_bin, to_bin);. ## Internal Representation; An entry for a filled bin consists of its n-dimensional coordinates and; its bin content. The coordinates are compacted to use as few bits as; possible; e.g. a histogram with 10 bins in x and 20 bins in y will only; use 4 bits for the x representation and 5 bits for the y representation.; This is handled by the internal class THnSparseCompactBinCoord.; Bin data (content and coordinates) are allocated in chunks of size; fChunkSize; this parameter can be set when constructing a THnSparse. Each; chunk is represented by an object of class THnSparseArrayChunk. Translation from an n-dimensional bin coordinate to the linear index within; the chunks is done by GetBin(). It creates a hash from the compacted bin; coordinates (the hash of a bin coordinate is the compacted coordinate itself; if it takes less than 8 bytes, the size of a Long64_t.; This hash is used to lookup the linear index in the TExMap member fBins;; the coordinates of the entry fBins points to is compared to the coordinates; passed to GetBin(). If they do not match, these two coordinates have the same; hash - which is extremely unlikely but (for the case where the compact bin; coordinates are larger than 4 bytes) possible. In this case, fBinsContinued; contains a chain of linear indexes with the same hash. Iterating through this; chain and comparing each bin coordinates with the one passed to GetBin() will; retrieve the matching bin.; */",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:4190,Security,hash,hash,4190," The tutorial sparsehist.C; shows the turning point. On a AMD64 with 8GB memory, THnSparse ""wins""; starting with a TH3 with 30 bins per dimension. Using a THnSparse for a; one-dimensional histogram is only reasonable if it has a huge number of bins. ## Projections; The dimensionality of a THnSparse can be reduced by projecting it to; 1, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or; a THnSparse. See the Projection() members. To only project parts of the; histogram, call. THnSparse::GetAxis(12)->SetRange(from_bin, to_bin);. ## Internal Representation; An entry for a filled bin consists of its n-dimensional coordinates and; its bin content. The coordinates are compacted to use as few bits as; possible; e.g. a histogram with 10 bins in x and 20 bins in y will only; use 4 bits for the x representation and 5 bits for the y representation.; This is handled by the internal class THnSparseCompactBinCoord.; Bin data (content and coordinates) are allocated in chunks of size; fChunkSize; this parameter can be set when constructing a THnSparse. Each; chunk is represented by an object of class THnSparseArrayChunk. Translation from an n-dimensional bin coordinate to the linear index within; the chunks is done by GetBin(). It creates a hash from the compacted bin; coordinates (the hash of a bin coordinate is the compacted coordinate itself; if it takes less than 8 bytes, the size of a Long64_t.; This hash is used to lookup the linear index in the TExMap member fBins;; the coordinates of the entry fBins points to is compared to the coordinates; passed to GetBin(). If they do not match, these two coordinates have the same; hash - which is extremely unlikely but (for the case where the compact bin; coordinates are larger than 4 bytes) possible. In this case, fBinsContinued; contains a chain of linear indexes with the same hash. Iterating through this; chain and comparing each bin coordinates with the one passed to GetBin() will; retrieve the matching bin.; */",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:4392,Security,hash,hash,4392," The tutorial sparsehist.C; shows the turning point. On a AMD64 with 8GB memory, THnSparse ""wins""; starting with a TH3 with 30 bins per dimension. Using a THnSparse for a; one-dimensional histogram is only reasonable if it has a huge number of bins. ## Projections; The dimensionality of a THnSparse can be reduced by projecting it to; 1, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or; a THnSparse. See the Projection() members. To only project parts of the; histogram, call. THnSparse::GetAxis(12)->SetRange(from_bin, to_bin);. ## Internal Representation; An entry for a filled bin consists of its n-dimensional coordinates and; its bin content. The coordinates are compacted to use as few bits as; possible; e.g. a histogram with 10 bins in x and 20 bins in y will only; use 4 bits for the x representation and 5 bits for the y representation.; This is handled by the internal class THnSparseCompactBinCoord.; Bin data (content and coordinates) are allocated in chunks of size; fChunkSize; this parameter can be set when constructing a THnSparse. Each; chunk is represented by an object of class THnSparseArrayChunk. Translation from an n-dimensional bin coordinate to the linear index within; the chunks is done by GetBin(). It creates a hash from the compacted bin; coordinates (the hash of a bin coordinate is the compacted coordinate itself; if it takes less than 8 bytes, the size of a Long64_t.; This hash is used to lookup the linear index in the TExMap member fBins;; the coordinates of the entry fBins points to is compared to the coordinates; passed to GetBin(). If they do not match, these two coordinates have the same; hash - which is extremely unlikely but (for the case where the compact bin; coordinates are larger than 4 bytes) possible. In this case, fBinsContinued; contains a chain of linear indexes with the same hash. Iterating through this; chain and comparing each bin coordinates with the one passed to GetBin() will; retrieve the matching bin.; */",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:140,Energy Efficiency,allocate,allocate,140,"////////////////////////////////////////////////////////////////////////////////; /// Get the bin index for the n dimensional tuple x,; /// allocate one if it doesn't exist yet and ""allocate"" is true.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:182,Energy Efficiency,allocate,allocate,182,"////////////////////////////////////////////////////////////////////////////////; /// Get the bin index for the n dimensional tuple x,; /// allocate one if it doesn't exist yet and ""allocate"" is true.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:158,Energy Efficiency,allocate,allocate,158,"////////////////////////////////////////////////////////////////////////////////; /// Get the bin index for the n dimensional tuple addressed by ""name"",; /// allocate one if it doesn't exist yet and ""allocate"" is true.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:200,Energy Efficiency,allocate,allocate,200,"////////////////////////////////////////////////////////////////////////////////; /// Get the bin index for the n dimensional tuple addressed by ""name"",; /// allocate one if it doesn't exist yet and ""allocate"" is true.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:150,Energy Efficiency,allocate,allocate,150,"////////////////////////////////////////////////////////////////////////////////; /// Get the bin index for the n dimensional coordinates coord,; /// allocate one if it doesn't exist yet and ""allocate"" is true.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:192,Energy Efficiency,allocate,allocate,192,"////////////////////////////////////////////////////////////////////////////////; /// Get the bin index for the n dimensional coordinates coord,; /// allocate one if it doesn't exist yet and ""allocate"" is true.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:104,Availability,error,error,104,"////////////////////////////////////////////////////////////////////////////////; /// Get square of the error of bin addressed by linidx as; /// \f$\sum weight^{2}\f$; /// If errors are not enabled (via Sumw2() or CalculateErrors()); /// return contents.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:175,Availability,error,errors,175,"////////////////////////////////////////////////////////////////////////////////; /// Get square of the error of bin addressed by linidx as; /// \f$\sum weight^{2}\f$; /// If errors are not enabled (via Sumw2() or CalculateErrors()); /// return contents.",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:169,Energy Efficiency,allocate,allocate,169,"////////////////////////////////////////////////////////////////////////////////; /// Return the index for fCurrentBinIndex.; /// If it doesn't exist then return -1, or allocate a new bin if allocate is set",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:191,Energy Efficiency,allocate,allocate,191,"////////////////////////////////////////////////////////////////////////////////; /// Return the index for fCurrentBinIndex.; /// If it doesn't exist then return -1, or allocate a new bin if allocate is set",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:3,Energy Efficiency,allocate,allocate,3,"// allocate bin in chunk",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:29,Security,hash,hash,29,"// store translation between hash and bin",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:90,Availability,error,error,90,"////////////////////////////////////////////////////////////////////////////////; /// Set error of bin with index ""bin"" to ""e"", enable errors if needed",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:135,Availability,error,errors,135,"////////////////////////////////////////////////////////////////////////////////; /// Set error of bin with index ""bin"" to ""e"", enable errors if needed",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:10,Availability,error,error,10,"// enable error calculation",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:97,Availability,error,error,97,"////////////////////////////////////////////////////////////////////////////////; /// Add ""e"" to error of bin with index ""bin"", enable errors if needed",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:135,Availability,error,errors,135,"////////////////////////////////////////////////////////////////////////////////; /// Add ""e"" to error of bin with index ""bin"", enable errors if needed",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:10,Availability,error,error,10,"// enable error calculation",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:108,Availability,error,errors,108,"////////////////////////////////////////////////////////////////////////////////; /// Enable calculation of errors",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear the histogram",MatchSource.CODE_COMMENT,hist/hist/src/THnSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx:3134,Availability,avail,available,3134,"round of the histograms is erased before drawing the; histograms. The option ""noclear"" avoids this behavior. This is useful when drawing a; THStack on top of another plot. If the patterns used to draw the histograms in the; stack are transparent, then the plot behind will be visible. See the THistPainter class for the list of valid histograms' painting options. Example;. Begin_Macro(source); {; auto hs = new THStack(""hs"","""");; auto h1 = new TH1F(""h1"",""test hstack"",10,-4,4);; h1->FillRandom(""gaus"",20000);; h1->SetFillColor(kRed);; hs->Add(h1);; auto h2 = new TH1F(""h2"",""test hstack"",10,-4,4);; h2->FillRandom(""gaus"",15000);; h2->SetFillColor(kBlue);; hs->Add(h2);; auto h3 = new TH1F(""h3"",""test hstack"",10,-4,4);; h3->FillRandom(""gaus"",10000);; h3->SetFillColor(kGreen);; hs->Add(h3);; auto cs = new TCanvas(""cs"",""cs"",10,10,700,900);; TText T; T.SetTextFont(42); T.SetTextAlign(21);; cs->Divide(2,2);; cs->cd(1); hs->Draw(); T.DrawTextNDC(.5,.95,""Default drawing option"");; cs->cd(2); hs->Draw(""nostack""); T.DrawTextNDC(.5,.95,""Option \""nostack\"""");; cs->cd(3); hs->Draw(""nostackb""); T.DrawTextNDC(.5,.95,""Option \""nostackb\"""");; cs->cd(4); hs->Draw(""lego1""); T.DrawTextNDC(.5,.95,""Option \""lego1\"""");; }; End_Macro. A more complex example:. Begin_Macro(source); ../../../tutorials/hist/hstack.C; End_Macro. Note that picking is supported for all drawing modes. \since **ROOT version 6.07/07:**; Stacks of 2D histograms can also be painted as candle plots:; \since **ROOT version 6.09/02:**; Stacks of 2D histograms can also be painted as violin plots, combinations of candle and; violin plots are possible as well:. Begin_Macro(source); ../../../tutorials/hist/candleplotstack.C; End_Macro. Automatic coloring according to the current palette is available as shown in the; following example:. Begin_Macro(source); ../../../tutorials/hist/thstackpalettecolor.C; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// constructor with name and title",MatchSource.CODE_COMMENT,hist/hist/src/THStack.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx:1469,Safety,avoid,avoids,1469,"### Stack painting. By default, histograms are shown stacked:; - the first histogram is painted; - then the sum of the first and second histograms is painted, and so on. The axis ranges are computed automatically along the X and Y axes to display the complete; histogram collection. Warning: Histogram bins with negative content may produce wrong plots. ### Stack's drawing options. The specific stack's drawing options are:. - **NOSTACK** If option ""nostack"" is specified, histograms are all painted in the same pad; as if the option ""same"" had been specified. - **NOSTACKB** If the option ""nostackb"" is specified histograms are all painted on the same pad; next to each other as bar plots. - **PADS** if option ""pads"" is specified, the current pad/canvas is subdivided into; a number of pads equal to the number of histograms and each histogram; is painted into a separate pad. - **NOCLEAR** By default the background of the histograms is erased before drawing the; histograms. The option ""noclear"" avoids this behavior. This is useful when drawing a; THStack on top of another plot. If the patterns used to draw the histograms in the; stack are transparent, then the plot behind will be visible. See the THistPainter class for the list of valid histograms' painting options. Example;. Begin_Macro(source); {; auto hs = new THStack(""hs"","""");; auto h1 = new TH1F(""h1"",""test hstack"",10,-4,4);; h1->FillRandom(""gaus"",20000);; h1->SetFillColor(kRed);; hs->Add(h1);; auto h2 = new TH1F(""h2"",""test hstack"",10,-4,4);; h2->FillRandom(""gaus"",15000);; h2->SetFillColor(kBlue);; hs->Add(h2);; auto h3 = new TH1F(""h3"",""test hstack"",10,-4,4);; h3->FillRandom(""gaus"",10000);; h3->SetFillColor(kGreen);; hs->Add(h3);; auto cs = new TCanvas(""cs"",""cs"",10,10,700,900);; TText T; T.SetTextFont(42); T.SetTextAlign(21);; cs->Divide(2,2);; cs->cd(1); hs->Draw(); T.DrawTextNDC(.5,.95,""Default drawing option"");; cs->cd(2); hs->Draw(""nostack""); T.DrawTextNDC(.5,.95,""Option \""nostack\"""");; cs->cd(3); hs->Draw(""nostackb"")",MatchSource.CODE_COMMENT,hist/hist/src/THStack.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx:1838,Testability,test,test,1838,"e option ""same"" had been specified. - **NOSTACKB** If the option ""nostackb"" is specified histograms are all painted on the same pad; next to each other as bar plots. - **PADS** if option ""pads"" is specified, the current pad/canvas is subdivided into; a number of pads equal to the number of histograms and each histogram; is painted into a separate pad. - **NOCLEAR** By default the background of the histograms is erased before drawing the; histograms. The option ""noclear"" avoids this behavior. This is useful when drawing a; THStack on top of another plot. If the patterns used to draw the histograms in the; stack are transparent, then the plot behind will be visible. See the THistPainter class for the list of valid histograms' painting options. Example;. Begin_Macro(source); {; auto hs = new THStack(""hs"","""");; auto h1 = new TH1F(""h1"",""test hstack"",10,-4,4);; h1->FillRandom(""gaus"",20000);; h1->SetFillColor(kRed);; hs->Add(h1);; auto h2 = new TH1F(""h2"",""test hstack"",10,-4,4);; h2->FillRandom(""gaus"",15000);; h2->SetFillColor(kBlue);; hs->Add(h2);; auto h3 = new TH1F(""h3"",""test hstack"",10,-4,4);; h3->FillRandom(""gaus"",10000);; h3->SetFillColor(kGreen);; hs->Add(h3);; auto cs = new TCanvas(""cs"",""cs"",10,10,700,900);; TText T; T.SetTextFont(42); T.SetTextAlign(21);; cs->Divide(2,2);; cs->cd(1); hs->Draw(); T.DrawTextNDC(.5,.95,""Default drawing option"");; cs->cd(2); hs->Draw(""nostack""); T.DrawTextNDC(.5,.95,""Option \""nostack\"""");; cs->cd(3); hs->Draw(""nostackb""); T.DrawTextNDC(.5,.95,""Option \""nostackb\"""");; cs->cd(4); hs->Draw(""lego1""); T.DrawTextNDC(.5,.95,""Option \""lego1\"""");; }; End_Macro. A more complex example:. Begin_Macro(source); ../../../tutorials/hist/hstack.C; End_Macro. Note that picking is supported for all drawing modes. \since **ROOT version 6.07/07:**; Stacks of 2D histograms can also be painted as candle plots:; \since **ROOT version 6.09/02:**; Stacks of 2D histograms can also be painted as violin plots, combinations of candle and; violin plots are possible ",MatchSource.CODE_COMMENT,hist/hist/src/THStack.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx:1957,Testability,test,test,1957,"e option ""same"" had been specified. - **NOSTACKB** If the option ""nostackb"" is specified histograms are all painted on the same pad; next to each other as bar plots. - **PADS** if option ""pads"" is specified, the current pad/canvas is subdivided into; a number of pads equal to the number of histograms and each histogram; is painted into a separate pad. - **NOCLEAR** By default the background of the histograms is erased before drawing the; histograms. The option ""noclear"" avoids this behavior. This is useful when drawing a; THStack on top of another plot. If the patterns used to draw the histograms in the; stack are transparent, then the plot behind will be visible. See the THistPainter class for the list of valid histograms' painting options. Example;. Begin_Macro(source); {; auto hs = new THStack(""hs"","""");; auto h1 = new TH1F(""h1"",""test hstack"",10,-4,4);; h1->FillRandom(""gaus"",20000);; h1->SetFillColor(kRed);; hs->Add(h1);; auto h2 = new TH1F(""h2"",""test hstack"",10,-4,4);; h2->FillRandom(""gaus"",15000);; h2->SetFillColor(kBlue);; hs->Add(h2);; auto h3 = new TH1F(""h3"",""test hstack"",10,-4,4);; h3->FillRandom(""gaus"",10000);; h3->SetFillColor(kGreen);; hs->Add(h3);; auto cs = new TCanvas(""cs"",""cs"",10,10,700,900);; TText T; T.SetTextFont(42); T.SetTextAlign(21);; cs->Divide(2,2);; cs->cd(1); hs->Draw(); T.DrawTextNDC(.5,.95,""Default drawing option"");; cs->cd(2); hs->Draw(""nostack""); T.DrawTextNDC(.5,.95,""Option \""nostack\"""");; cs->cd(3); hs->Draw(""nostackb""); T.DrawTextNDC(.5,.95,""Option \""nostackb\"""");; cs->cd(4); hs->Draw(""lego1""); T.DrawTextNDC(.5,.95,""Option \""lego1\"""");; }; End_Macro. A more complex example:. Begin_Macro(source); ../../../tutorials/hist/hstack.C; End_Macro. Note that picking is supported for all drawing modes. \since **ROOT version 6.07/07:**; Stacks of 2D histograms can also be painted as candle plots:; \since **ROOT version 6.09/02:**; Stacks of 2D histograms can also be painted as violin plots, combinations of candle and; violin plots are possible ",MatchSource.CODE_COMMENT,hist/hist/src/THStack.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx:2077,Testability,test,test,2077,"e option ""same"" had been specified. - **NOSTACKB** If the option ""nostackb"" is specified histograms are all painted on the same pad; next to each other as bar plots. - **PADS** if option ""pads"" is specified, the current pad/canvas is subdivided into; a number of pads equal to the number of histograms and each histogram; is painted into a separate pad. - **NOCLEAR** By default the background of the histograms is erased before drawing the; histograms. The option ""noclear"" avoids this behavior. This is useful when drawing a; THStack on top of another plot. If the patterns used to draw the histograms in the; stack are transparent, then the plot behind will be visible. See the THistPainter class for the list of valid histograms' painting options. Example;. Begin_Macro(source); {; auto hs = new THStack(""hs"","""");; auto h1 = new TH1F(""h1"",""test hstack"",10,-4,4);; h1->FillRandom(""gaus"",20000);; h1->SetFillColor(kRed);; hs->Add(h1);; auto h2 = new TH1F(""h2"",""test hstack"",10,-4,4);; h2->FillRandom(""gaus"",15000);; h2->SetFillColor(kBlue);; hs->Add(h2);; auto h3 = new TH1F(""h3"",""test hstack"",10,-4,4);; h3->FillRandom(""gaus"",10000);; h3->SetFillColor(kGreen);; hs->Add(h3);; auto cs = new TCanvas(""cs"",""cs"",10,10,700,900);; TText T; T.SetTextFont(42); T.SetTextAlign(21);; cs->Divide(2,2);; cs->cd(1); hs->Draw(); T.DrawTextNDC(.5,.95,""Default drawing option"");; cs->cd(2); hs->Draw(""nostack""); T.DrawTextNDC(.5,.95,""Option \""nostack\"""");; cs->cd(3); hs->Draw(""nostackb""); T.DrawTextNDC(.5,.95,""Option \""nostackb\"""");; cs->cd(4); hs->Draw(""lego1""); T.DrawTextNDC(.5,.95,""Option \""lego1\"""");; }; End_Macro. A more complex example:. Begin_Macro(source); ../../../tutorials/hist/hstack.C; End_Macro. Note that picking is supported for all drawing modes. \since **ROOT version 6.07/07:**; Stacks of 2D histograms can also be painted as candle plots:; \since **ROOT version 6.09/02:**; Stacks of 2D histograms can also be painted as violin plots, combinations of candle and; violin plots are possible ",MatchSource.CODE_COMMENT,hist/hist/src/THStack.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx:448,Integrability,depend,depends,448,"////////////////////////////////////////////////////////////////////////////////; /// Returns a pointer to the histogram used to draw the axis.; /// Takes into account the two following cases:; /// 1- option 'A' was specified in THStack::Draw. Return fHistogram; /// 2- user had called TPad::DrawFrame. return pointer to hframe histogram; ///; /// IMPORTANT NOTES; /// - You must call Draw before calling this function. The returned histogram; /// depends on the selected Draw options.; /// - This function returns a pointer to an intermediate fixed bin size; /// histogram used to set the range and for picking.; /// You cannot use this histogram to return the bin information.; /// You must get a pointer to one of the histograms in the stack,; /// the first one, for example.",MatchSource.CODE_COMMENT,hist/hist/src/THStack.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx:249,Integrability,depend,depends,249,"////////////////////////////////////////////////////////////////////////////////; /// Get the x-axis of the histogram used to draw the stack.; ///; /// IMPORTANT NOTE; /// You must call Draw before calling this function. The returned histogram; /// depends on the selected Draw options.",MatchSource.CODE_COMMENT,hist/hist/src/THStack.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx:249,Integrability,depend,depends,249,"////////////////////////////////////////////////////////////////////////////////; /// Get the y-axis of the histogram used to draw the stack.; ///; /// IMPORTANT NOTE; /// You must call Draw before calling this function. The returned histogram; /// depends on the selected Draw options.",MatchSource.CODE_COMMENT,hist/hist/src/THStack.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx:249,Integrability,depend,depends,249,"////////////////////////////////////////////////////////////////////////////////; /// Get the z-axis of the histogram used to draw the stack.; ///; /// IMPORTANT NOTE; /// You must call Draw before calling this function. The returned histogram; /// depends on the selected Draw options.",MatchSource.CODE_COMMENT,hist/hist/src/THStack.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx:212,Availability,error,error,212,"////////////////////////////////////////////////////////////////////////////////; /// Merge the THStack in the TList into this stack.; /// Returns the total number of histograms in the result or -1 in case of an error.",MatchSource.CODE_COMMENT,hist/hist/src/THStack.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:884,Energy Efficiency,Energy,Energy,884,"// // @(#)root/hist:$Id$; // Authors: Bartolomeu Rabacal 07/2010; /**********************************************************************; * *; * Copyright (c) 2006 , ROOT MathLib Team *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; * *; **********************************************************************/; /** \class TKDE; \ingroup Hist; Kernel Density Estimation class.; The three main references are:; 1. ""Scott DW, Multivariate Density Estimation. Theory, Practice and Visualization. New York: Wiley"",; 2. ""Jann Ben - ETH Zurich, Switzerland -, Univariate kernel density estimation document for KDENS:; Stata module for univariate kernel density estimation.""; 3. ""Hardle W, Muller M, Sperlich S, Werwatz A, Nonparametric and Semiparametric Models. Springer.""; 4. ""Cranmer KS, Kernel Estimation in High-Energy; Physics. Computer Physics Communications 136:198-207,2001"" - e-Print Archive: hep ex/0011057. The algorithm is briefly described in (4). A binned version is also implemented to address the; performance issue due to its data size dependance.; */",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:1121,Integrability,depend,dependance,1121,"// // @(#)root/hist:$Id$; // Authors: Bartolomeu Rabacal 07/2010; /**********************************************************************; * *; * Copyright (c) 2006 , ROOT MathLib Team *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; * *; **********************************************************************/; /** \class TKDE; \ingroup Hist; Kernel Density Estimation class.; The three main references are:; 1. ""Scott DW, Multivariate Density Estimation. Theory, Practice and Visualization. New York: Wiley"",; 2. ""Jann Ben - ETH Zurich, Switzerland -, Univariate kernel density estimation document for KDENS:; Stata module for univariate kernel density estimation.""; 3. ""Hardle W, Muller M, Sperlich S, Werwatz A, Nonparametric and Semiparametric Models. Springer.""; 4. ""Cranmer KS, Kernel Estimation in High-Energy; Physics. Computer Physics Communications 136:198-207,2001"" - e-Print Archive: hep ex/0011057. The algorithm is briefly described in (4). A binned version is also implemented to address the; performance issue due to its data size dependance.; */",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:1082,Performance,perform,performance,1082,"// // @(#)root/hist:$Id$; // Authors: Bartolomeu Rabacal 07/2010; /**********************************************************************; * *; * Copyright (c) 2006 , ROOT MathLib Team *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; * *; **********************************************************************/; /** \class TKDE; \ingroup Hist; Kernel Density Estimation class.; The three main references are:; 1. ""Scott DW, Multivariate Density Estimation. Theory, Practice and Visualization. New York: Wiley"",; 2. ""Jann Ben - ETH Zurich, Switzerland -, Univariate kernel density estimation document for KDENS:; Stata module for univariate kernel density estimation.""; 3. ""Hardle W, Muller M, Sperlich S, Werwatz A, Nonparametric and Semiparametric Models. Springer.""; 4. ""Cranmer KS, Kernel Estimation in High-Energy; Physics. Computer Physics Communications 136:198-207,2001"" - e-Print Archive: hep ex/0011057. The algorithm is briefly described in (4). A binned version is also implemented to address the; performance issue due to its data size dependance.; */",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:33,Energy Efficiency,adapt,adaptive,33,"// Sets User option for fixed or adaptive iteration",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:33,Modifiability,adapt,adaptive,33,"// Sets User option for fixed or adaptive iteration",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:109,Energy Efficiency,adapt,adaptive,109,"// Factor which can be used to tune the smoothing.; // It is used as multiplicative factor for the fixed and adaptive bandwidth.; // A value < 1 will reproduce better the tails but oversmooth the peak; // while a factor > 1 will overestimate the tail",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:109,Modifiability,adapt,adaptive,109,"// Factor which can be used to tune the smoothing.; // It is used as multiplicative factor for the fixed and adaptive bandwidth.; // A value < 1 will reproduce better the tails but oversmooth the peak; // while a factor > 1 will overestimate the tail",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:31,Performance,tune,tune,31,"// Factor which can be used to tune the smoothing.; // It is used as multiplicative factor for the fixed and adaptive bandwidth.; // A value < 1 will reproduce better the tails but oversmooth the peak; // while a factor > 1 will overestimate the tail",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:103,Energy Efficiency,adapt,adaptive,103,"// when of reading from a file fKernelFunction is a nullptr; // we need to recreate Kernel class (with adaptive weights if needed) and; // recreate kernel function pointer",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:103,Modifiability,adapt,adaptive,103,"// when of reading from a file fKernelFunction is a nullptr; // we need to recreate Kernel class (with adaptive weights if needed) and; // recreate kernel function pointer",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:11,Availability,robust,robust,11,"// Sigma's robust estimator",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:83,Safety,avoid,avoid,83,"// kernel function pointer must be set to null before calling SetKernelFunction to avoid memory leaks",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:55,Availability,Error,Error,55,"// Returns the Root Asymptotic Mean Integrated Squared Error according to Silverman's rule of thumb with assumed Gaussian density",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:36,Deployability,Integrat,Integrated,36,"// Returns the Root Asymptotic Mean Integrated Squared Error according to Silverman's rule of thumb with assumed Gaussian density",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:36,Integrability,Integrat,Integrated,36,"// Returns the Root Asymptotic Mean Integrated Squared Error according to Silverman's rule of thumb with assumed Gaussian density",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:12,Energy Efficiency,adapt,adaptive,12,"// Gets the adaptive weights (bandwidths) for TKernel internal computation",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:12,Modifiability,adapt,adaptive,12,"// Gets the adaptive weights (bandwidths) for TKernel internal computation",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:26,Energy Efficiency,adapt,adaptive,26,"// we will store computed adaptive weights in weights",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:26,Modifiability,adapt,adaptive,26,"// we will store computed adaptive weights in weights",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:14,Energy Efficiency,Power,Power,14,"// 1 / TMath::Power(2 * TMath::Pi(), .5) * TMath::Exp(-.5). Approximated geometric mean over pointwise data (the KDE function is substituted by the ""real Gaussian"" pdf) and proportional to sigma. Used directly when the mirroring is enabled, otherwise computed from the data; // not sure for this special case for mirror. This results in a much smaller bandwidth for mirror case",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:7,Energy Efficiency,adapt,adaptive,7,"// set adaptive weights in fWeights matrix",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:7,Modifiability,adapt,adaptive,7,"// set adaptive weights in fWeights matrix",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:10,Energy Efficiency,adapt,adaptive,10,"//printf(""adaptive bandwidth factor % f weight 0 %f , %f \n"",fKDE->fAdaptiveBandwidthFactor, weights[0],fWeights[0] );",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:10,Modifiability,adapt,adaptive,10,"//printf(""adaptive bandwidth factor % f weight 0 %f , %f \n"",fKDE->fAdaptiveBandwidthFactor, weights[0],fWeights[0] );",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:124,Availability,error,errors,124,"////////////////////////////////////////////////////////////////////////////////; /// Draws either the KDE functions or its errors; // @param opt : Drawing options:; // - """" (default) - draw just the kde; // - ""same"" draw on top of existing pad; // - ""Errors"" draw a TGraphErrors with the point and errors; // -""confidenceinterval"" draw KDE + conf interval functions (default is 95%); // -""confidenceinterval@0.90"" draw KDE + conf interval functions at 90%; // - Extra options can be passed in opt for the drawing of the corresponding TF1 or TGraph; //; // NOTE: The functions GetDrawnFunction(), GetDrawnUpperFunction(), GetDrawnLowerFunction(); // and GetGraphWithErrors() return the corresponding drawn objects (which are managed by the TKDE); // They can be used to changes style, color, etc..; ////",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:252,Availability,Error,Errors,252,"////////////////////////////////////////////////////////////////////////////////; /// Draws either the KDE functions or its errors; // @param opt : Drawing options:; // - """" (default) - draw just the kde; // - ""same"" draw on top of existing pad; // - ""Errors"" draw a TGraphErrors with the point and errors; // -""confidenceinterval"" draw KDE + conf interval functions (default is 95%); // -""confidenceinterval@0.90"" draw KDE + conf interval functions at 90%; // - Extra options can be passed in opt for the drawing of the corresponding TF1 or TGraph; //; // NOTE: The functions GetDrawnFunction(), GetDrawnUpperFunction(), GetDrawnLowerFunction(); // and GetGraphWithErrors() return the corresponding drawn objects (which are managed by the TKDE); // They can be used to changes style, color, etc..; ////",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:299,Availability,error,errors,299,"////////////////////////////////////////////////////////////////////////////////; /// Draws either the KDE functions or its errors; // @param opt : Drawing options:; // - """" (default) - draw just the kde; // - ""same"" draw on top of existing pad; // - ""Errors"" draw a TGraphErrors with the point and errors; // -""confidenceinterval"" draw KDE + conf interval functions (default is 95%); // -""confidenceinterval@0.90"" draw KDE + conf interval functions at 90%; // - Extra options can be passed in opt for the drawing of the corresponding TF1 or TGraph; //; // NOTE: The functions GetDrawnFunction(), GetDrawnUpperFunction(), GetDrawnLowerFunction(); // and GetGraphWithErrors() return the corresponding drawn objects (which are managed by the TKDE); // They can be used to changes style, color, etc..; ////",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:118,Availability,error,errors,118,"///////////////////////////////////////////////////////////////////////; /// Draws a TGraphErrors with KDE values and errors",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:123,Availability,error,errors,123,"///////////////////////////////////////////////////////////////////////; /// return a TGraphErrors with the KDE values and errors; /// The return object is managed by the user",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:37,Energy Efficiency,adapt,adaptive,37,"// Returns the bandwidth for the non adaptive KDE",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:37,Modifiability,adapt,adaptive,37,"// Returns the bandwidth for the non adaptive KDE",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:34,Energy Efficiency,adapt,adaptive,34,"// Returns the bandwidths for the adaptive KDE",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:34,Modifiability,adapt,adaptive,34,"// Returns the bandwidths for the adaptive KDE",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:37,Energy Efficiency,adapt,adaptive,37,"// Returns the bandwidth for the non adaptive KDE",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:37,Modifiability,adapt,adaptive,37,"// Returns the bandwidth for the non adaptive KDE",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:33,Energy Efficiency,adapt,adaptive,33,"// Returns the bandwidth for the adaptive KDE",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:33,Modifiability,adapt,adaptive,33,"// Returns the bandwidth for the adaptive KDE",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:111,Energy Efficiency,adapt,adaptive,111,"//(useBins) ? fKDE->fSumOfCounts : fKDE->fNEvents;; //if (!useCount) nSum = fKDE->fNEvents;; // in case of non-adaptive fWeights is a vector of size 1",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:111,Modifiability,adapt,adaptive,111,"//(useBins) ? fKDE->fSumOfCounts : fKDE->fNEvents;; //if (!useCount) nSum = fKDE->fNEvents;; // in case of non-adaptive fWeights is a vector of size 1",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:37,Availability,down,down,37,"// uncommenting following line slows down so keep computation for; // zero bincounts; //if (binCount <= 0) continue;",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:11,Availability,robust,robust,11,"// compute robust sigma using midspread",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:11,Availability,robust,robust,11,"// Sigma's robust estimator; //printf(""weight case - stat: m = %f, s= %f, sr = %f \n"",fMean, fSigma, midspread);",MatchSource.CODE_COMMENT,hist/hist/src/TKDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx:686,Availability,avail,available,686,"// @(#)root/hist:$Id$; // Author: Christophe.Delaere@cern.ch 21/08/2002; ///////////////////////////////////////////////////////////////////////////; //; // TLimit; //; // Class to compute 95% CL limits; //; // adapted from the mclimit code from Tom Junk (CLs method); // see http://root.cern/root/doc/TomJunk.pdf; // see http://cern.ch/thomasj/searchlimits/ecl.html; // see: Tom Junk,NIM A434, p. 435-443, 1999; //; // see also the following interesting references:; // Alex Read, ""Presentation of search results: the CLs technique""; // Journal of Physics G: Nucl. Part. Phys. 28 2693-2704 (2002).; // http://www.iop.org/EJ/abstract/0954-3899/28/10/313/; //; // A nice article is also available in the CERN yellow report with the proceeding; // of the 2000 CERN workshop on confidence intervals.; //; // Alex Read, ""Modified Frequentist Analysis of Search Results (The CLs Method)""; // CERN 2000-005 (30 May 2000); //; ///////////////////////////////////////////////////////////////////////////; /** \class TLimit; \legacy{TLimit, Consider switching to RooStats.}; \ingroup Hist; Algorithm to compute 95% CL limits using the Likelihood ratio semi-bayesian method. Implemented by C. Delaere from the mclimit code written by Tom Junk [HEP-EX/9902006].; See [http://cern.ch/thomasj/searchlimits/ecl.html](http://cern.ch/thomasj/searchlimits/ecl.html) for more details. It takes signal, background and data histograms wrapped in a; TLimitDataSource as input and runs a set of Monte Carlo experiments in; order to compute the limits. If needed, inputs are fluctuated according; to systematics. The output is a TConfidenceLevel. The class TLimitDataSource takes the signal, background and data histograms as well as different; systematics sources to form the TLimit input. The class TConfidenceLevel represents the final result of the TLimit algorithm. It is created just after the; time-consuming part and can be stored in a TFile for further processing.; It contains light methods to return CLs, CLb and ",MatchSource.CODE_COMMENT,hist/hist/src/TLimit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx:211,Energy Efficiency,adapt,adapted,211,"// @(#)root/hist:$Id$; // Author: Christophe.Delaere@cern.ch 21/08/2002; ///////////////////////////////////////////////////////////////////////////; //; // TLimit; //; // Class to compute 95% CL limits; //; // adapted from the mclimit code from Tom Junk (CLs method); // see http://root.cern/root/doc/TomJunk.pdf; // see http://cern.ch/thomasj/searchlimits/ecl.html; // see: Tom Junk,NIM A434, p. 435-443, 1999; //; // see also the following interesting references:; // Alex Read, ""Presentation of search results: the CLs technique""; // Journal of Physics G: Nucl. Part. Phys. 28 2693-2704 (2002).; // http://www.iop.org/EJ/abstract/0954-3899/28/10/313/; //; // A nice article is also available in the CERN yellow report with the proceeding; // of the 2000 CERN workshop on confidence intervals.; //; // Alex Read, ""Modified Frequentist Analysis of Search Results (The CLs Method)""; // CERN 2000-005 (30 May 2000); //; ///////////////////////////////////////////////////////////////////////////; /** \class TLimit; \legacy{TLimit, Consider switching to RooStats.}; \ingroup Hist; Algorithm to compute 95% CL limits using the Likelihood ratio semi-bayesian method. Implemented by C. Delaere from the mclimit code written by Tom Junk [HEP-EX/9902006].; See [http://cern.ch/thomasj/searchlimits/ecl.html](http://cern.ch/thomasj/searchlimits/ecl.html) for more details. It takes signal, background and data histograms wrapped in a; TLimitDataSource as input and runs a set of Monte Carlo experiments in; order to compute the limits. If needed, inputs are fluctuated according; to systematics. The output is a TConfidenceLevel. The class TLimitDataSource takes the signal, background and data histograms as well as different; systematics sources to form the TLimit input. The class TConfidenceLevel represents the final result of the TLimit algorithm. It is created just after the; time-consuming part and can be stored in a TFile for further processing.; It contains light methods to return CLs, CLb and ",MatchSource.CODE_COMMENT,hist/hist/src/TLimit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx:1415,Integrability,wrap,wrapped,1415,"resting references:; // Alex Read, ""Presentation of search results: the CLs technique""; // Journal of Physics G: Nucl. Part. Phys. 28 2693-2704 (2002).; // http://www.iop.org/EJ/abstract/0954-3899/28/10/313/; //; // A nice article is also available in the CERN yellow report with the proceeding; // of the 2000 CERN workshop on confidence intervals.; //; // Alex Read, ""Modified Frequentist Analysis of Search Results (The CLs Method)""; // CERN 2000-005 (30 May 2000); //; ///////////////////////////////////////////////////////////////////////////; /** \class TLimit; \legacy{TLimit, Consider switching to RooStats.}; \ingroup Hist; Algorithm to compute 95% CL limits using the Likelihood ratio semi-bayesian method. Implemented by C. Delaere from the mclimit code written by Tom Junk [HEP-EX/9902006].; See [http://cern.ch/thomasj/searchlimits/ecl.html](http://cern.ch/thomasj/searchlimits/ecl.html) for more details. It takes signal, background and data histograms wrapped in a; TLimitDataSource as input and runs a set of Monte Carlo experiments in; order to compute the limits. If needed, inputs are fluctuated according; to systematics. The output is a TConfidenceLevel. The class TLimitDataSource takes the signal, background and data histograms as well as different; systematics sources to form the TLimit input. The class TConfidenceLevel represents the final result of the TLimit algorithm. It is created just after the; time-consuming part and can be stored in a TFile for further processing.; It contains light methods to return CLs, CLb and other interesting; quantities. The actual algorithm... From an input (TLimitDataSource) it produces an output TConfidenceLevel.; For this, nmc Monte Carlo experiments are performed.; As usual, the larger this number, the longer the compute time,; but the better the result. Supposing that there is a plotfile.root file containing 3 histograms; (signal, background and data), you can imagine doing things like:. ~~~{.cpp}; TFile* infile=new TFile(""",MatchSource.CODE_COMMENT,hist/hist/src/TLimit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx:211,Modifiability,adapt,adapted,211,"// @(#)root/hist:$Id$; // Author: Christophe.Delaere@cern.ch 21/08/2002; ///////////////////////////////////////////////////////////////////////////; //; // TLimit; //; // Class to compute 95% CL limits; //; // adapted from the mclimit code from Tom Junk (CLs method); // see http://root.cern/root/doc/TomJunk.pdf; // see http://cern.ch/thomasj/searchlimits/ecl.html; // see: Tom Junk,NIM A434, p. 435-443, 1999; //; // see also the following interesting references:; // Alex Read, ""Presentation of search results: the CLs technique""; // Journal of Physics G: Nucl. Part. Phys. 28 2693-2704 (2002).; // http://www.iop.org/EJ/abstract/0954-3899/28/10/313/; //; // A nice article is also available in the CERN yellow report with the proceeding; // of the 2000 CERN workshop on confidence intervals.; //; // Alex Read, ""Modified Frequentist Analysis of Search Results (The CLs Method)""; // CERN 2000-005 (30 May 2000); //; ///////////////////////////////////////////////////////////////////////////; /** \class TLimit; \legacy{TLimit, Consider switching to RooStats.}; \ingroup Hist; Algorithm to compute 95% CL limits using the Likelihood ratio semi-bayesian method. Implemented by C. Delaere from the mclimit code written by Tom Junk [HEP-EX/9902006].; See [http://cern.ch/thomasj/searchlimits/ecl.html](http://cern.ch/thomasj/searchlimits/ecl.html) for more details. It takes signal, background and data histograms wrapped in a; TLimitDataSource as input and runs a set of Monte Carlo experiments in; order to compute the limits. If needed, inputs are fluctuated according; to systematics. The output is a TConfidenceLevel. The class TLimitDataSource takes the signal, background and data histograms as well as different; systematics sources to form the TLimit input. The class TConfidenceLevel represents the final result of the TLimit algorithm. It is created just after the; time-consuming part and can be stored in a TFile for further processing.; It contains light methods to return CLs, CLb and ",MatchSource.CODE_COMMENT,hist/hist/src/TLimit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx:2172,Performance,perform,performed,2172,"n method. Implemented by C. Delaere from the mclimit code written by Tom Junk [HEP-EX/9902006].; See [http://cern.ch/thomasj/searchlimits/ecl.html](http://cern.ch/thomasj/searchlimits/ecl.html) for more details. It takes signal, background and data histograms wrapped in a; TLimitDataSource as input and runs a set of Monte Carlo experiments in; order to compute the limits. If needed, inputs are fluctuated according; to systematics. The output is a TConfidenceLevel. The class TLimitDataSource takes the signal, background and data histograms as well as different; systematics sources to form the TLimit input. The class TConfidenceLevel represents the final result of the TLimit algorithm. It is created just after the; time-consuming part and can be stored in a TFile for further processing.; It contains light methods to return CLs, CLb and other interesting; quantities. The actual algorithm... From an input (TLimitDataSource) it produces an output TConfidenceLevel.; For this, nmc Monte Carlo experiments are performed.; As usual, the larger this number, the longer the compute time,; but the better the result. Supposing that there is a plotfile.root file containing 3 histograms; (signal, background and data), you can imagine doing things like:. ~~~{.cpp}; TFile* infile=new TFile(""plotfile.root"",""READ"");; infile->cd();; TH1* sh=(TH1*)infile->Get(""signal"");; TH1* bh=(TH1*)infile->Get(""background"");; TH1* dh=(TH1*)infile->Get(""data"");; TLimitDataSource* mydatasource = new TLimitDataSource(sh,bh,dh);; TConfidenceLevel *myconfidence = TLimit::ComputeLimit(mydatasource,50000);; std::cout << "" CLs : "" << myconfidence->CLs() << std::endl;; std::cout << "" CLsb : "" << myconfidence->CLsb() << std::endl;; std::cout << "" CLb : "" << myconfidence->CLb() << std::endl;; std::cout << ""< CLs > : "" << myconfidence->GetExpectedCLs_b() << std::endl;; std::cout << ""< CLsb > : "" << myconfidence->GetExpectedCLsb_b() << std::endl;; std::cout << ""< CLb > : "" << myconfidence->GetExpectedCLb_b() << std",MatchSource.CODE_COMMENT,hist/hist/src/TLimit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx:18,Testability,log,log,18,"// precompute the log(1+s/b)'s in an array to speed up computation; // background-free bins are set to have a maximum t.s. value; // for protection (corresponding to s/b of about 5E8)",MatchSource.CODE_COMMENT,hist/hist/src/TLimit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx:109,Availability,error,errors,109,"// accumulate MC experiments. Hold the test statistic function fixed, but; // fluctuate s and b within syst. errors for computing probabilities of; // having that outcome. (Alex Read's prescription -- errors are on the ensemble,; // not on the observed test statistic. This technique does not split outcomes.); // keep the tstats as sum log(1+s/b). convert to -2lnQ when preparing the results; // (reason -- like to keep the < signs right)",MatchSource.CODE_COMMENT,hist/hist/src/TLimit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx:201,Availability,error,errors,201,"// accumulate MC experiments. Hold the test statistic function fixed, but; // fluctuate s and b within syst. errors for computing probabilities of; // having that outcome. (Alex Read's prescription -- errors are on the ensemble,; // not on the observed test statistic. This technique does not split outcomes.); // keep the tstats as sum log(1+s/b). convert to -2lnQ when preparing the results; // (reason -- like to keep the < signs right)",MatchSource.CODE_COMMENT,hist/hist/src/TLimit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx:39,Testability,test,test,39,"// accumulate MC experiments. Hold the test statistic function fixed, but; // fluctuate s and b within syst. errors for computing probabilities of; // having that outcome. (Alex Read's prescription -- errors are on the ensemble,; // not on the observed test statistic. This technique does not split outcomes.); // keep the tstats as sum log(1+s/b). convert to -2lnQ when preparing the results; // (reason -- like to keep the < signs right)",MatchSource.CODE_COMMENT,hist/hist/src/TLimit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx:253,Testability,test,test,253,"// accumulate MC experiments. Hold the test statistic function fixed, but; // fluctuate s and b within syst. errors for computing probabilities of; // having that outcome. (Alex Read's prescription -- errors are on the ensemble,; // not on the observed test statistic. This technique does not split outcomes.); // keep the tstats as sum log(1+s/b). convert to -2lnQ when preparing the results; // (reason -- like to keep the < signs right)",MatchSource.CODE_COMMENT,hist/hist/src/TLimit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx:337,Testability,log,log,337,"// accumulate MC experiments. Hold the test statistic function fixed, but; // fluctuate s and b within syst. errors for computing probabilities of; // having that outcome. (Alex Read's prescription -- errors are on the ensemble,; // not on the observed test statistic. This technique does not split outcomes.); // keep the tstats as sum log(1+s/b). convert to -2lnQ when preparing the results; // (reason -- like to keep the < signs right)",MatchSource.CODE_COMMENT,hist/hist/src/TLimit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx:102,Availability,error,errors,102,"// lrs and lrb are the LR's (no logs) = prob(s+b)/prob(b) for; // that choice of s and b within syst. errors in the ensemble. These are; // the MC experiment weights for relating the s+b and b PDF's of the unsmeared; // test statistic (in which cas one can use another test statistic if one likes).; // Now produce the output object.; // The final quantities are computed on-demand form the arrays tss, tsb, lrs and lrb.",MatchSource.CODE_COMMENT,hist/hist/src/TLimit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx:32,Testability,log,logs,32,"// lrs and lrb are the LR's (no logs) = prob(s+b)/prob(b) for; // that choice of s and b within syst. errors in the ensemble. These are; // the MC experiment weights for relating the s+b and b PDF's of the unsmeared; // test statistic (in which cas one can use another test statistic if one likes).; // Now produce the output object.; // The final quantities are computed on-demand form the arrays tss, tsb, lrs and lrb.",MatchSource.CODE_COMMENT,hist/hist/src/TLimit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx:220,Testability,test,test,220,"// lrs and lrb are the LR's (no logs) = prob(s+b)/prob(b) for; // that choice of s and b within syst. errors in the ensemble. These are; // the MC experiment weights for relating the s+b and b PDF's of the unsmeared; // test statistic (in which cas one can use another test statistic if one likes).; // Now produce the output object.; // The final quantities are computed on-demand form the arrays tss, tsb, lrs and lrb.",MatchSource.CODE_COMMENT,hist/hist/src/TLimit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx:269,Testability,test,test,269,"// lrs and lrb are the LR's (no logs) = prob(s+b)/prob(b) for; // that choice of s and b within syst. errors in the ensemble. These are; // the MC experiment weights for relating the s+b and b PDF's of the unsmeared; // test statistic (in which cas one can use another test statistic if one likes).; // Now produce the output object.; // The final quantities are computed on-demand form the arrays tss, tsb, lrs and lrb.",MatchSource.CODE_COMMENT,hist/hist/src/TLimit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx:11,Testability,Log,LogLikelihood,11,"// Compute LogLikelihood (static function)",MatchSource.CODE_COMMENT,hist/hist/src/TLimit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimitDataSource.cxx:168,Availability,error,error,168,"////////////////////////////////////////////////////////////////////////////////; /// Adds a channel with signal, background and data given as input.; /// In addition, error sources are defined.; /// TH1 are here used for convenience: each bin has to be seen as; /// an error source (relative).; /// names is an array of strings containing the names of the sources.; /// Sources with the same name are correlated.",MatchSource.CODE_COMMENT,hist/hist/src/TLimitDataSource.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimitDataSource.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimitDataSource.cxx:270,Availability,error,error,270,"////////////////////////////////////////////////////////////////////////////////; /// Adds a channel with signal, background and data given as input.; /// In addition, error sources are defined.; /// TH1 are here used for convenience: each bin has to be seen as; /// an error source (relative).; /// names is an array of strings containing the names of the sources.; /// Sources with the same name are correlated.",MatchSource.CODE_COMMENT,hist/hist/src/TLimitDataSource.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimitDataSource.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:900,Availability,reliab,reliably,900,"// @(#)root/hist:$Id$; // Author: Christian Holm Christensen 07/11/2000; /** \class TMultiDimFit; \ingroup Hist. Multidimensional Fits in ROOT.; ## Overview; A common problem encountered in different fields of applied science is; to find an expression for one physical quantity in terms of several; others, which are directly measurable. An example in high energy physics is the evaluation of the momentum of; a charged particle from the observation of its trajectory in a magnetic; field. The problem is to relate the momentum of the particle to the; observations, which may consists of positional measurements at; intervals along the particle trajectory. The exact functional relationship between the measured quantities; (e.g., the space-points) and the dependent quantity (e.g., the; momentum) is in general not known, but one possible way of solving the; problem, is to find an expression which reliably approximates the; dependence of the momentum on the observations. This explicit function of the observations can be obtained by a; <I>least squares</I> fitting procedure applied to a representative; sample of the data, for which the dependent quantity (e.g., momentum); and the independent observations are known. The function can then be; used to compute the quantity of interest for new observations of the; independent variables. This class <TT>TMultiDimFit</TT> implements such a procedure in; ROOT. It is largely based on the CERNLIB MUDIFI package [2].; Though the basic concepts are still sound, and; therefore kept, a few implementation details have changed, and this; class can take advantage of MINUIT [4] to improve the errors; of the fitting, thanks to the class TMinuit. In [5] and [6] H. Wind demonstrates the utility; of this procedure in the context of tracking, magnetic field; parameterisation, and so on. The outline of the method used in this; class is based on Winds discussion, and I refer these two excellents; text for more information. And example of usage is given i",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:1640,Availability,error,errors,1640,"sists of positional measurements at; intervals along the particle trajectory. The exact functional relationship between the measured quantities; (e.g., the space-points) and the dependent quantity (e.g., the; momentum) is in general not known, but one possible way of solving the; problem, is to find an expression which reliably approximates the; dependence of the momentum on the observations. This explicit function of the observations can be obtained by a; <I>least squares</I> fitting procedure applied to a representative; sample of the data, for which the dependent quantity (e.g., momentum); and the independent observations are known. The function can then be; used to compute the quantity of interest for new observations of the; independent variables. This class <TT>TMultiDimFit</TT> implements such a procedure in; ROOT. It is largely based on the CERNLIB MUDIFI package [2].; Though the basic concepts are still sound, and; therefore kept, a few implementation details have changed, and this; class can take advantage of MINUIT [4] to improve the errors; of the fitting, thanks to the class TMinuit. In [5] and [6] H. Wind demonstrates the utility; of this procedure in the context of tracking, magnetic field; parameterisation, and so on. The outline of the method used in this; class is based on Winds discussion, and I refer these two excellents; text for more information. And example of usage is given in multidimfit.C. ## The Method; Let \f$ D \f$ by the dependent quantity of interest, which depends smoothly; on the observable quantities \f$ x_1, \ldots, x_N \f$ which we'll denote by; \f$\mathbf{x}\f$. Given a training sample of \f$ M\f$ tuples of the form, (TMultiDimFit::AddRow). \f[; \left(\mathbf{x}_j, D_j, E_j\right)\quad,; \f]; where \f$\mathbf{x}_j = (x_{1,j},\ldots,x_{N,j})\f$ are \f$ N\f$ independent; variables, \f$ D_j\f$ is the known, quantity dependent at \f$\mathbf{x}_j\f$ and \f$ E_j\f$ is; the square error in \f$ D_j\f$, the class will try to find the param",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:2523,Availability,error,error,2523,"ound, and; therefore kept, a few implementation details have changed, and this; class can take advantage of MINUIT [4] to improve the errors; of the fitting, thanks to the class TMinuit. In [5] and [6] H. Wind demonstrates the utility; of this procedure in the context of tracking, magnetic field; parameterisation, and so on. The outline of the method used in this; class is based on Winds discussion, and I refer these two excellents; text for more information. And example of usage is given in multidimfit.C. ## The Method; Let \f$ D \f$ by the dependent quantity of interest, which depends smoothly; on the observable quantities \f$ x_1, \ldots, x_N \f$ which we'll denote by; \f$\mathbf{x}\f$. Given a training sample of \f$ M\f$ tuples of the form, (TMultiDimFit::AddRow). \f[; \left(\mathbf{x}_j, D_j, E_j\right)\quad,; \f]; where \f$\mathbf{x}_j = (x_{1,j},\ldots,x_{N,j})\f$ are \f$ N\f$ independent; variables, \f$ D_j\f$ is the known, quantity dependent at \f$\mathbf{x}_j\f$ and \f$ E_j\f$ is; the square error in \f$ D_j\f$, the class will try to find the parameterization; \f[; D_p(\mathbf{x}) = \sum_{l=1}^{L} c_l \prod_{i=1}^{N} p_{li}\left(x_i\right); = \sum_{l=1}^{L} c_l F_l(\mathbf{x}); \f]; such that. \f[; S \equiv \sum_{j=1}^{M} \left(D_j - D_p\left(\mathbf{x}_j\right)\right)^2; \f]; is minimal. Here \f$p_{li}(x_i)\f$ are monomials, or Chebyshev or Legendre; polynomials, labelled \f$l = 1, \ldots, L\f$, in each variable \f$ x_i\f$,\f$ i=1, \ldots, N\f$. So what TMultiDimFit does, is to determine the number of terms \f$ L\f$, and then \f$ L\f$ terms; (or functions) \f$ F_l\f$, and the \f$ L\f$ coefficients \f$ c_l\f$, so that \f$ S\f$ is minimal; (TMultiDimFit::FindParameterization). Of course it's more than a little unlikely that \f$ S\f$ will ever become; exact zero as a result of the procedure outlined below. Therefore, the; user is asked to provide a minimum relative error \f$ \epsilon\f$ (TMultiDimFit::SetMinRelativeError),; and \f$ S\f$ will be considered mi",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:3412,Availability,error,error,3412,"f$ is the known, quantity dependent at \f$\mathbf{x}_j\f$ and \f$ E_j\f$ is; the square error in \f$ D_j\f$, the class will try to find the parameterization; \f[; D_p(\mathbf{x}) = \sum_{l=1}^{L} c_l \prod_{i=1}^{N} p_{li}\left(x_i\right); = \sum_{l=1}^{L} c_l F_l(\mathbf{x}); \f]; such that. \f[; S \equiv \sum_{j=1}^{M} \left(D_j - D_p\left(\mathbf{x}_j\right)\right)^2; \f]; is minimal. Here \f$p_{li}(x_i)\f$ are monomials, or Chebyshev or Legendre; polynomials, labelled \f$l = 1, \ldots, L\f$, in each variable \f$ x_i\f$,\f$ i=1, \ldots, N\f$. So what TMultiDimFit does, is to determine the number of terms \f$ L\f$, and then \f$ L\f$ terms; (or functions) \f$ F_l\f$, and the \f$ L\f$ coefficients \f$ c_l\f$, so that \f$ S\f$ is minimal; (TMultiDimFit::FindParameterization). Of course it's more than a little unlikely that \f$ S\f$ will ever become; exact zero as a result of the procedure outlined below. Therefore, the; user is asked to provide a minimum relative error \f$ \epsilon\f$ (TMultiDimFit::SetMinRelativeError),; and \f$ S\f$ will be considered minimized when. \f[; R = \frac{S}{\sum_{j=1}^M D_j^2} < \epsilon; \f]; Optionally, the user may impose a functional expression by specifying; the powers of each variable in \f$ L\f$ specified functions \f$ F_1, \ldots,F_L\f$ (TMultiDimFit::SetPowers).; In that case, only the coefficients \f$ c_l\f$ is calculated by the class. ## Limiting the Number of Terms; As always when dealing with fits, there's a real chance of *over fitting*. As is well-known, it's; always possible to fit an \f$ N-1\f$ polynomial in \f$ x\f$ to \f$ N\f$ points \f$ (x,y)\f$ with; \f$\chi^2 = 0\f$, but the polynomial is not likely to fit new data at all [1].; Therefore, the user is asked to provide an upper limit, \f$ L_{max}\f$ to the number of terms in; \f$ D_p\f$ (TMultiDimFit::SetMaxTerms). However, since there's an infinite number of \f$ F_l\f$ to choose from, the; user is asked to give the maximum power. \f$ P_{max,i}\f$, of each variable; \",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:12076,Availability,Error,Errors,12076,"\f$ are chosen first; (TMultiDimFit::TestFunction). In case \f$ \phi \f$ isn't defined, an alternative method of; performing this second test is used: The \f$L^{\mbox{th}}\f$; function \f$\textbf{f}_L\f$ is accepted if (refer also to equation (13)); \f[; \Delta S_L > \frac{S_{L-1}}{L_{max}-L}; \f]; where \f$ S_{L-1}\f$ is the sum of the \f$ L-1\f$ first residuals from the; \f$ L-1\f$ functions previously accepted; and \f$ L_{max}\f$ is the total number; of functions allowed in the final expression of the fit (defined by; user). From this we see, that by restricting \f$ L_{max}\f$ -- the number of; terms in the final model -- the fit is more difficult to perform,; since the above selection criteria is more limiting. The more coefficients we evaluate, the more the sum of squares of; residuals \f$ S\f$ will be reduced. We can evaluate \f$ S\f$ before inverting; \f$\mathsf{B}\f$ as shown below. ## Coefficients and Coefficient Errors; Having found a parameterization, that is the \f$ F_l\f$'s and \f$ L\f$, that; minimizes \f$ S\f$, we still need to determine the coefficients; \f$ c_l\f$. However, it's a feature of how we choose the significant; functions, that the evaluation of the \f$ c_l\f$'s becomes trivial [5]. To derive; \f$\mathbf{c}\f$, we first note that; equation (4) can be written as; \f[; \mathsf{F} = \mathsf{W}\mathsf{B}; \f]; where; \f{eqnarray*}{; b_{ij} = \frac{\mathbf{f}_j \bullet \mathbf{w}_i}{\mathbf{w}_i^2}; & \mbox{if} & i < j\\; 1 & \mbox{if} & i = j\\; 0 & \mbox{if} & i > j; \f}; Consequently, \f$\mathsf{B}\f$ is an upper triangle matrix, which can be; readily inverted. So we now evaluate; \f[; \mathsf{F}\mathsf{B}^{-1} = \mathsf{W}; \f]; The model \f$\mathsf{W}\mathbf{a}\f$ can therefore be written as; \f$(\mathsf{F}\mathsf{B}^{-1})\mathbf{a} = \mathsf{F}(\mathsf{B}^{-1}\mathbf{a})\,.\f$. The original model \f$\mathsf{F}\mathbf{c}\f$ is therefore identical with; this if; \f[; \mathbf{c} = \left(\mathsf{B}^{-1}\mathbf{a}\right) =; \left[\mathbf{a}^T\l",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:13434,Availability,error,errors,13434,"*}{; b_{ij} = \frac{\mathbf{f}_j \bullet \mathbf{w}_i}{\mathbf{w}_i^2}; & \mbox{if} & i < j\\; 1 & \mbox{if} & i = j\\; 0 & \mbox{if} & i > j; \f}; Consequently, \f$\mathsf{B}\f$ is an upper triangle matrix, which can be; readily inverted. So we now evaluate; \f[; \mathsf{F}\mathsf{B}^{-1} = \mathsf{W}; \f]; The model \f$\mathsf{W}\mathbf{a}\f$ can therefore be written as; \f$(\mathsf{F}\mathsf{B}^{-1})\mathbf{a} = \mathsf{F}(\mathsf{B}^{-1}\mathbf{a})\,.\f$. The original model \f$\mathsf{F}\mathbf{c}\f$ is therefore identical with; this if; \f[; \mathbf{c} = \left(\mathsf{B}^{-1}\mathbf{a}\right) =; \left[\mathbf{a}^T\left(\mathsf{B}^{-1}\right)^T\right]^T\,.; \f]; The reason we use \f$\left(\mathsf{B}^{-1}\right)^T\f$ rather then; \f$\mathsf{B}^{-1}\f$ is to save storage, since \f$\left(\mathsf{B}^{-1}\right)^T\f$; can be stored in the same matrix as \f$\mathsf{B}\f$ (TMultiDimFit::MakeCoefficients).; The errors in the coefficients is calculated by inverting the curvature matrix; of the non-orthogonal functions \f$ f_{lj}\f$ [1] (TMultiDimFit::MakeCoefficientErrors). ## Considerations; It's important to realize that the training sample should be; representative of the problem at hand, in particular along the borders; of the region of interest. This is because the algorithm presented; here, is a *interpolation*, rather then a *extrapolation* [5]. Also, the independent variables \f$ x_{i}\f$ need to be linear; independent, since the procedure will perform poorly if they are not; [5]. One can find an linear transformation from ones; original variables \f$ \xi_{i}\f$ to a set of linear independent variables; \f$ x_{i}\f$, using a *Principal Components Analysis* (see TPrincipal), and; then use the transformed variable as input to this class [5] [6]. H. Wind also outlines a method for parameterising a multidimensional; dependence over a multidimensional set of variables. An example; of the method from [5], is a follows (please refer to; [5] for a full discussion):. 1. D",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:16647,Availability,error,error,16647,"{Q}^\prime\f$; 7. For each component \f$Q^\prime_i\f$ make a multidimensional fit,; using \f$\mathbf{x}^\prime\f$ as the variables, thus determining a set of; coefficients \f$\mathbf{c}_i\f$. To process data, using this parameterisation, do; 1. Test wether the observation \f$\mathbf{x}\f$ within the domain of; the parameterization, using the result from the Principal Component; Analysis.; 2. Determine \f$\mathbf{P}^\prime\f$ as before.; 3. Determine \f$\mathbf{x}^\prime\f$ as before.; 4. Use the result of the fit to determine \f$\mathbf{Q}^\prime\f$.; 5. Transform back to \f$\mathbf{P}\f$ from \f$\mathbf{Q}^\prime\f$, using; the result from the Principal Component Analysis. ## Testing the parameterization; The class also provides functionality for testing the, over the; training sample, found parameterization (TMultiDimFit::Fit). This is done by passing; the class a test sample of \f$ M_t\f$ tuples of the form; \f$(\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\f$, where \f$\mathbf{x}_{t,j}\f$ are the independent; variables, \f$ D_{t,j}\f$ the known, dependent quantity, and \f$ E_{t,j}\f$ is; the square error in \f$ D_{t,j}\f$ (TMultiDimFit::AddTestRow). The parameterization is then evaluated at every \f$\mathbf{x}_t\f$ in the; test sample, and; \f[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \f]; is evaluated. The relative error over the test sample; \f[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \f]; should not be to low or high compared to \f$ R\f$ from the training; sample. Also, multiple correlation coefficient from both samples should; be fairly close, otherwise one of the samples is not representative of; the problem. A large difference in the reduced \f$ \chi^2\f$ over the two; samples indicate an over fit, and the maximum number of terms in the; parameterisation should be reduced. It's possible to use [4] to further improve the fit, using the test sample. Christian Holm. ## Bibliography; - <a name=""bevington""></a> Philip ",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:16917,Availability,error,error,16917,"e \f$\mathbf{x}^\prime\f$ as before.; 4. Use the result of the fit to determine \f$\mathbf{Q}^\prime\f$.; 5. Transform back to \f$\mathbf{P}\f$ from \f$\mathbf{Q}^\prime\f$, using; the result from the Principal Component Analysis. ## Testing the parameterization; The class also provides functionality for testing the, over the; training sample, found parameterization (TMultiDimFit::Fit). This is done by passing; the class a test sample of \f$ M_t\f$ tuples of the form; \f$(\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\f$, where \f$\mathbf{x}_{t,j}\f$ are the independent; variables, \f$ D_{t,j}\f$ the known, dependent quantity, and \f$ E_{t,j}\f$ is; the square error in \f$ D_{t,j}\f$ (TMultiDimFit::AddTestRow). The parameterization is then evaluated at every \f$\mathbf{x}_t\f$ in the; test sample, and; \f[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \f]; is evaluated. The relative error over the test sample; \f[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \f]; should not be to low or high compared to \f$ R\f$ from the training; sample. Also, multiple correlation coefficient from both samples should; be fairly close, otherwise one of the samples is not representative of; the problem. A large difference in the reduced \f$ \chi^2\f$ over the two; samples indicate an over fit, and the maximum number of terms in the; parameterisation should be reduced. It's possible to use [4] to further improve the fit, using the test sample. Christian Holm. ## Bibliography; - <a name=""bevington""></a> Philip R. Bevington and D. Keith Robinson. *Data Reduction and Error Analysis for; the Physical Sciences*. McGraw-Hill, 2 edition, 1992.; - <a name=""mudifi""></a> R. Brun et al. *Long writeup DD/75-23*, CERN, 1980.; - Gene H. Golub and Charles F. van Loan. *Matrix Computations*.; John Hopkins University Press, Baltimore, 3 edition, 1996.; - <a name=""minuit""></a>F. James. *Minuit*. Long writeup D506, CERN, 1998.; - <a name=""wind72""></a>H. Wind. *Function p",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:17595,Availability,Error,Error,17595,"$ are the independent; variables, \f$ D_{t,j}\f$ the known, dependent quantity, and \f$ E_{t,j}\f$ is; the square error in \f$ D_{t,j}\f$ (TMultiDimFit::AddTestRow). The parameterization is then evaluated at every \f$\mathbf{x}_t\f$ in the; test sample, and; \f[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \f]; is evaluated. The relative error over the test sample; \f[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \f]; should not be to low or high compared to \f$ R\f$ from the training; sample. Also, multiple correlation coefficient from both samples should; be fairly close, otherwise one of the samples is not representative of; the problem. A large difference in the reduced \f$ \chi^2\f$ over the two; samples indicate an over fit, and the maximum number of terms in the; parameterisation should be reduced. It's possible to use [4] to further improve the fit, using the test sample. Christian Holm. ## Bibliography; - <a name=""bevington""></a> Philip R. Bevington and D. Keith Robinson. *Data Reduction and Error Analysis for; the Physical Sciences*. McGraw-Hill, 2 edition, 1992.; - <a name=""mudifi""></a> R. Brun et al. *Long writeup DD/75-23*, CERN, 1980.; - Gene H. Golub and Charles F. van Loan. *Matrix Computations*.; John Hopkins University Press, Baltimore, 3 edition, 1996.; - <a name=""minuit""></a>F. James. *Minuit*. Long writeup D506, CERN, 1998.; - <a name=""wind72""></a>H. Wind. *Function parameterization*. Proceedings of the 1972 CERN Computing and Data Processing; School, volume 72-21 of Yellow report. CERN, 1972.; - <a name=""wind81""></a>H. Wind. 1. principal component analysis, 2. pattern recognition for track; finding, 3. interpolation and functional representation. Yellow report EP/81-12, CERN, 1981. [1]: classTMultiDimFit.html#bevington; [2]: classTMultiDimFit.html#mudifi; [4]: classTMultiDimFit.html#minuit; [5]: classTMultiDimFit.html#wind72; [6]: classTMultiDimFit.html#wind81; [9]: classTMultiDimFit.html#eq:dS2; */",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:357,Energy Efficiency,energy,energy,357,"// @(#)root/hist:$Id$; // Author: Christian Holm Christensen 07/11/2000; /** \class TMultiDimFit; \ingroup Hist. Multidimensional Fits in ROOT.; ## Overview; A common problem encountered in different fields of applied science is; to find an expression for one physical quantity in terms of several; others, which are directly measurable. An example in high energy physics is the evaluation of the momentum of; a charged particle from the observation of its trajectory in a magnetic; field. The problem is to relate the momentum of the particle to the; observations, which may consists of positional measurements at; intervals along the particle trajectory. The exact functional relationship between the measured quantities; (e.g., the space-points) and the dependent quantity (e.g., the; momentum) is in general not known, but one possible way of solving the; problem, is to find an expression which reliably approximates the; dependence of the momentum on the observations. This explicit function of the observations can be obtained by a; <I>least squares</I> fitting procedure applied to a representative; sample of the data, for which the dependent quantity (e.g., momentum); and the independent observations are known. The function can then be; used to compute the quantity of interest for new observations of the; independent variables. This class <TT>TMultiDimFit</TT> implements such a procedure in; ROOT. It is largely based on the CERNLIB MUDIFI package [2].; Though the basic concepts are still sound, and; therefore kept, a few implementation details have changed, and this; class can take advantage of MINUIT [4] to improve the errors; of the fitting, thanks to the class TMinuit. In [5] and [6] H. Wind demonstrates the utility; of this procedure in the context of tracking, magnetic field; parameterisation, and so on. The outline of the method used in this; class is based on Winds discussion, and I refer these two excellents; text for more information. And example of usage is given i",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:412,Energy Efficiency,charge,charged,412,"// @(#)root/hist:$Id$; // Author: Christian Holm Christensen 07/11/2000; /** \class TMultiDimFit; \ingroup Hist. Multidimensional Fits in ROOT.; ## Overview; A common problem encountered in different fields of applied science is; to find an expression for one physical quantity in terms of several; others, which are directly measurable. An example in high energy physics is the evaluation of the momentum of; a charged particle from the observation of its trajectory in a magnetic; field. The problem is to relate the momentum of the particle to the; observations, which may consists of positional measurements at; intervals along the particle trajectory. The exact functional relationship between the measured quantities; (e.g., the space-points) and the dependent quantity (e.g., the; momentum) is in general not known, but one possible way of solving the; problem, is to find an expression which reliably approximates the; dependence of the momentum on the observations. This explicit function of the observations can be obtained by a; <I>least squares</I> fitting procedure applied to a representative; sample of the data, for which the dependent quantity (e.g., momentum); and the independent observations are known. The function can then be; used to compute the quantity of interest for new observations of the; independent variables. This class <TT>TMultiDimFit</TT> implements such a procedure in; ROOT. It is largely based on the CERNLIB MUDIFI package [2].; Though the basic concepts are still sound, and; therefore kept, a few implementation details have changed, and this; class can take advantage of MINUIT [4] to improve the errors; of the fitting, thanks to the class TMinuit. In [5] and [6] H. Wind demonstrates the utility; of this procedure in the context of tracking, magnetic field; parameterisation, and so on. The outline of the method used in this; class is based on Winds discussion, and I refer these two excellents; text for more information. And example of usage is given i",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:3650,Energy Efficiency,power,powers,3650,"rod_{i=1}^{N} p_{li}\left(x_i\right); = \sum_{l=1}^{L} c_l F_l(\mathbf{x}); \f]; such that. \f[; S \equiv \sum_{j=1}^{M} \left(D_j - D_p\left(\mathbf{x}_j\right)\right)^2; \f]; is minimal. Here \f$p_{li}(x_i)\f$ are monomials, or Chebyshev or Legendre; polynomials, labelled \f$l = 1, \ldots, L\f$, in each variable \f$ x_i\f$,\f$ i=1, \ldots, N\f$. So what TMultiDimFit does, is to determine the number of terms \f$ L\f$, and then \f$ L\f$ terms; (or functions) \f$ F_l\f$, and the \f$ L\f$ coefficients \f$ c_l\f$, so that \f$ S\f$ is minimal; (TMultiDimFit::FindParameterization). Of course it's more than a little unlikely that \f$ S\f$ will ever become; exact zero as a result of the procedure outlined below. Therefore, the; user is asked to provide a minimum relative error \f$ \epsilon\f$ (TMultiDimFit::SetMinRelativeError),; and \f$ S\f$ will be considered minimized when. \f[; R = \frac{S}{\sum_{j=1}^M D_j^2} < \epsilon; \f]; Optionally, the user may impose a functional expression by specifying; the powers of each variable in \f$ L\f$ specified functions \f$ F_1, \ldots,F_L\f$ (TMultiDimFit::SetPowers).; In that case, only the coefficients \f$ c_l\f$ is calculated by the class. ## Limiting the Number of Terms; As always when dealing with fits, there's a real chance of *over fitting*. As is well-known, it's; always possible to fit an \f$ N-1\f$ polynomial in \f$ x\f$ to \f$ N\f$ points \f$ (x,y)\f$ with; \f$\chi^2 = 0\f$, but the polynomial is not likely to fit new data at all [1].; Therefore, the user is asked to provide an upper limit, \f$ L_{max}\f$ to the number of terms in; \f$ D_p\f$ (TMultiDimFit::SetMaxTerms). However, since there's an infinite number of \f$ F_l\f$ to choose from, the; user is asked to give the maximum power. \f$ P_{max,i}\f$, of each variable; \f$ x_i\f$ to be considered in the minimization of \f$ S\f$ (TMultiDimFit::SetMaxPowers). One way of obtaining values for the maximum power in variable \f$ i\f$, is; to perform a regular fit to the depen",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:4391,Energy Efficiency,power,power,4391,"tlined below. Therefore, the; user is asked to provide a minimum relative error \f$ \epsilon\f$ (TMultiDimFit::SetMinRelativeError),; and \f$ S\f$ will be considered minimized when. \f[; R = \frac{S}{\sum_{j=1}^M D_j^2} < \epsilon; \f]; Optionally, the user may impose a functional expression by specifying; the powers of each variable in \f$ L\f$ specified functions \f$ F_1, \ldots,F_L\f$ (TMultiDimFit::SetPowers).; In that case, only the coefficients \f$ c_l\f$ is calculated by the class. ## Limiting the Number of Terms; As always when dealing with fits, there's a real chance of *over fitting*. As is well-known, it's; always possible to fit an \f$ N-1\f$ polynomial in \f$ x\f$ to \f$ N\f$ points \f$ (x,y)\f$ with; \f$\chi^2 = 0\f$, but the polynomial is not likely to fit new data at all [1].; Therefore, the user is asked to provide an upper limit, \f$ L_{max}\f$ to the number of terms in; \f$ D_p\f$ (TMultiDimFit::SetMaxTerms). However, since there's an infinite number of \f$ F_l\f$ to choose from, the; user is asked to give the maximum power. \f$ P_{max,i}\f$, of each variable; \f$ x_i\f$ to be considered in the minimization of \f$ S\f$ (TMultiDimFit::SetMaxPowers). One way of obtaining values for the maximum power in variable \f$ i\f$, is; to perform a regular fit to the dependent quantity \f$ D\f$, using a; polynomial only in \f$ x_i\f$. The maximum power is \f$ P_{max,i}\f$ is then the; power that does not significantly improve the one-dimensional; least-square fit over \f$ x_i\f$ to \f$ D\f$ [5]. There are still a huge amount of possible choices for \f$ F_l\f$; in fact; there are \f$\prod_{i=1}^{N} (P_{max,i} + 1)\f$ possible; choices. Obviously we need to limit this. To this end, the user is; asked to set a *power control limit*, \f$ Q\f$ (TMultiDimFit::SetPowerLimit), and a function; \f$ F_l\f$ is only accepted if; \f[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \f]; where \f$ P_{li}\f$ is the leading power of variable \f$ x_i\f$ in function \f$ F_l\f",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:4568,Energy Efficiency,power,power,4568,"nctional expression by specifying; the powers of each variable in \f$ L\f$ specified functions \f$ F_1, \ldots,F_L\f$ (TMultiDimFit::SetPowers).; In that case, only the coefficients \f$ c_l\f$ is calculated by the class. ## Limiting the Number of Terms; As always when dealing with fits, there's a real chance of *over fitting*. As is well-known, it's; always possible to fit an \f$ N-1\f$ polynomial in \f$ x\f$ to \f$ N\f$ points \f$ (x,y)\f$ with; \f$\chi^2 = 0\f$, but the polynomial is not likely to fit new data at all [1].; Therefore, the user is asked to provide an upper limit, \f$ L_{max}\f$ to the number of terms in; \f$ D_p\f$ (TMultiDimFit::SetMaxTerms). However, since there's an infinite number of \f$ F_l\f$ to choose from, the; user is asked to give the maximum power. \f$ P_{max,i}\f$, of each variable; \f$ x_i\f$ to be considered in the minimization of \f$ S\f$ (TMultiDimFit::SetMaxPowers). One way of obtaining values for the maximum power in variable \f$ i\f$, is; to perform a regular fit to the dependent quantity \f$ D\f$, using a; polynomial only in \f$ x_i\f$. The maximum power is \f$ P_{max,i}\f$ is then the; power that does not significantly improve the one-dimensional; least-square fit over \f$ x_i\f$ to \f$ D\f$ [5]. There are still a huge amount of possible choices for \f$ F_l\f$; in fact; there are \f$\prod_{i=1}^{N} (P_{max,i} + 1)\f$ possible; choices. Obviously we need to limit this. To this end, the user is; asked to set a *power control limit*, \f$ Q\f$ (TMultiDimFit::SetPowerLimit), and a function; \f$ F_l\f$ is only accepted if; \f[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \f]; where \f$ P_{li}\f$ is the leading power of variable \f$ x_i\f$ in function \f$ F_l\f$ (TMultiDimFit::MakeCandidates).; So the number of functions increase with \f$ Q\f$ (1, 2 is fine, 5 is way out). ## Gram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression,; only those functions that significantly reduce \f$ S\f$ ",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:4713,Energy Efficiency,power,power,4713,"efficients \f$ c_l\f$ is calculated by the class. ## Limiting the Number of Terms; As always when dealing with fits, there's a real chance of *over fitting*. As is well-known, it's; always possible to fit an \f$ N-1\f$ polynomial in \f$ x\f$ to \f$ N\f$ points \f$ (x,y)\f$ with; \f$\chi^2 = 0\f$, but the polynomial is not likely to fit new data at all [1].; Therefore, the user is asked to provide an upper limit, \f$ L_{max}\f$ to the number of terms in; \f$ D_p\f$ (TMultiDimFit::SetMaxTerms). However, since there's an infinite number of \f$ F_l\f$ to choose from, the; user is asked to give the maximum power. \f$ P_{max,i}\f$, of each variable; \f$ x_i\f$ to be considered in the minimization of \f$ S\f$ (TMultiDimFit::SetMaxPowers). One way of obtaining values for the maximum power in variable \f$ i\f$, is; to perform a regular fit to the dependent quantity \f$ D\f$, using a; polynomial only in \f$ x_i\f$. The maximum power is \f$ P_{max,i}\f$ is then the; power that does not significantly improve the one-dimensional; least-square fit over \f$ x_i\f$ to \f$ D\f$ [5]. There are still a huge amount of possible choices for \f$ F_l\f$; in fact; there are \f$\prod_{i=1}^{N} (P_{max,i} + 1)\f$ possible; choices. Obviously we need to limit this. To this end, the user is; asked to set a *power control limit*, \f$ Q\f$ (TMultiDimFit::SetPowerLimit), and a function; \f$ F_l\f$ is only accepted if; \f[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \f]; where \f$ P_{li}\f$ is the leading power of variable \f$ x_i\f$ in function \f$ F_l\f$ (TMultiDimFit::MakeCandidates).; So the number of functions increase with \f$ Q\f$ (1, 2 is fine, 5 is way out). ## Gram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression,; only those functions that significantly reduce \f$ S\f$ is chosen. What; `significant' means, is chosen by the user, and will be; discussed below (see [2.3](TMultiFimFit.html#sec:selectiondetail)). The functions \f$ F_l\f$ are",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:4752,Energy Efficiency,power,power,4752,"efficients \f$ c_l\f$ is calculated by the class. ## Limiting the Number of Terms; As always when dealing with fits, there's a real chance of *over fitting*. As is well-known, it's; always possible to fit an \f$ N-1\f$ polynomial in \f$ x\f$ to \f$ N\f$ points \f$ (x,y)\f$ with; \f$\chi^2 = 0\f$, but the polynomial is not likely to fit new data at all [1].; Therefore, the user is asked to provide an upper limit, \f$ L_{max}\f$ to the number of terms in; \f$ D_p\f$ (TMultiDimFit::SetMaxTerms). However, since there's an infinite number of \f$ F_l\f$ to choose from, the; user is asked to give the maximum power. \f$ P_{max,i}\f$, of each variable; \f$ x_i\f$ to be considered in the minimization of \f$ S\f$ (TMultiDimFit::SetMaxPowers). One way of obtaining values for the maximum power in variable \f$ i\f$, is; to perform a regular fit to the dependent quantity \f$ D\f$, using a; polynomial only in \f$ x_i\f$. The maximum power is \f$ P_{max,i}\f$ is then the; power that does not significantly improve the one-dimensional; least-square fit over \f$ x_i\f$ to \f$ D\f$ [5]. There are still a huge amount of possible choices for \f$ F_l\f$; in fact; there are \f$\prod_{i=1}^{N} (P_{max,i} + 1)\f$ possible; choices. Obviously we need to limit this. To this end, the user is; asked to set a *power control limit*, \f$ Q\f$ (TMultiDimFit::SetPowerLimit), and a function; \f$ F_l\f$ is only accepted if; \f[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \f]; where \f$ P_{li}\f$ is the leading power of variable \f$ x_i\f$ in function \f$ F_l\f$ (TMultiDimFit::MakeCandidates).; So the number of functions increase with \f$ Q\f$ (1, 2 is fine, 5 is way out). ## Gram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression,; only those functions that significantly reduce \f$ S\f$ is chosen. What; `significant' means, is chosen by the user, and will be; discussed below (see [2.3](TMultiFimFit.html#sec:selectiondetail)). The functions \f$ F_l\f$ are",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:5082,Energy Efficiency,power,power,5082,"max}\f$ to the number of terms in; \f$ D_p\f$ (TMultiDimFit::SetMaxTerms). However, since there's an infinite number of \f$ F_l\f$ to choose from, the; user is asked to give the maximum power. \f$ P_{max,i}\f$, of each variable; \f$ x_i\f$ to be considered in the minimization of \f$ S\f$ (TMultiDimFit::SetMaxPowers). One way of obtaining values for the maximum power in variable \f$ i\f$, is; to perform a regular fit to the dependent quantity \f$ D\f$, using a; polynomial only in \f$ x_i\f$. The maximum power is \f$ P_{max,i}\f$ is then the; power that does not significantly improve the one-dimensional; least-square fit over \f$ x_i\f$ to \f$ D\f$ [5]. There are still a huge amount of possible choices for \f$ F_l\f$; in fact; there are \f$\prod_{i=1}^{N} (P_{max,i} + 1)\f$ possible; choices. Obviously we need to limit this. To this end, the user is; asked to set a *power control limit*, \f$ Q\f$ (TMultiDimFit::SetPowerLimit), and a function; \f$ F_l\f$ is only accepted if; \f[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \f]; where \f$ P_{li}\f$ is the leading power of variable \f$ x_i\f$ in function \f$ F_l\f$ (TMultiDimFit::MakeCandidates).; So the number of functions increase with \f$ Q\f$ (1, 2 is fine, 5 is way out). ## Gram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression,; only those functions that significantly reduce \f$ S\f$ is chosen. What; `significant' means, is chosen by the user, and will be; discussed below (see [2.3](TMultiFimFit.html#sec:selectiondetail)). The functions \f$ F_l\f$ are generally not orthogonal, which means one will; have to evaluate all possible \f$ F_l\f$'s over all data-points before; finding the most significant [1]. We can, however, do; better then that. By applying the *modified Gram-Schmidt; orthogonalisation* algorithm [5] [3] to the; functions \f$ F_l\f$, we can evaluate the contribution to the reduction of; \f$ S\f$ from each function in turn, and we may delay the actual inv",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:5288,Energy Efficiency,power,power,5288,"max}\f$ to the number of terms in; \f$ D_p\f$ (TMultiDimFit::SetMaxTerms). However, since there's an infinite number of \f$ F_l\f$ to choose from, the; user is asked to give the maximum power. \f$ P_{max,i}\f$, of each variable; \f$ x_i\f$ to be considered in the minimization of \f$ S\f$ (TMultiDimFit::SetMaxPowers). One way of obtaining values for the maximum power in variable \f$ i\f$, is; to perform a regular fit to the dependent quantity \f$ D\f$, using a; polynomial only in \f$ x_i\f$. The maximum power is \f$ P_{max,i}\f$ is then the; power that does not significantly improve the one-dimensional; least-square fit over \f$ x_i\f$ to \f$ D\f$ [5]. There are still a huge amount of possible choices for \f$ F_l\f$; in fact; there are \f$\prod_{i=1}^{N} (P_{max,i} + 1)\f$ possible; choices. Obviously we need to limit this. To this end, the user is; asked to set a *power control limit*, \f$ Q\f$ (TMultiDimFit::SetPowerLimit), and a function; \f$ F_l\f$ is only accepted if; \f[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \f]; where \f$ P_{li}\f$ is the leading power of variable \f$ x_i\f$ in function \f$ F_l\f$ (TMultiDimFit::MakeCandidates).; So the number of functions increase with \f$ Q\f$ (1, 2 is fine, 5 is way out). ## Gram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression,; only those functions that significantly reduce \f$ S\f$ is chosen. What; `significant' means, is chosen by the user, and will be; discussed below (see [2.3](TMultiFimFit.html#sec:selectiondetail)). The functions \f$ F_l\f$ are generally not orthogonal, which means one will; have to evaluate all possible \f$ F_l\f$'s over all data-points before; finding the most significant [1]. We can, however, do; better then that. By applying the *modified Gram-Schmidt; orthogonalisation* algorithm [5] [3] to the; functions \f$ F_l\f$, we can evaluate the contribution to the reduction of; \f$ S\f$ from each function in turn, and we may delay the actual inv",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:5499,Energy Efficiency,reduce,reduce,5499,"taining values for the maximum power in variable \f$ i\f$, is; to perform a regular fit to the dependent quantity \f$ D\f$, using a; polynomial only in \f$ x_i\f$. The maximum power is \f$ P_{max,i}\f$ is then the; power that does not significantly improve the one-dimensional; least-square fit over \f$ x_i\f$ to \f$ D\f$ [5]. There are still a huge amount of possible choices for \f$ F_l\f$; in fact; there are \f$\prod_{i=1}^{N} (P_{max,i} + 1)\f$ possible; choices. Obviously we need to limit this. To this end, the user is; asked to set a *power control limit*, \f$ Q\f$ (TMultiDimFit::SetPowerLimit), and a function; \f$ F_l\f$ is only accepted if; \f[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \f]; where \f$ P_{li}\f$ is the leading power of variable \f$ x_i\f$ in function \f$ F_l\f$ (TMultiDimFit::MakeCandidates).; So the number of functions increase with \f$ Q\f$ (1, 2 is fine, 5 is way out). ## Gram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression,; only those functions that significantly reduce \f$ S\f$ is chosen. What; `significant' means, is chosen by the user, and will be; discussed below (see [2.3](TMultiFimFit.html#sec:selectiondetail)). The functions \f$ F_l\f$ are generally not orthogonal, which means one will; have to evaluate all possible \f$ F_l\f$'s over all data-points before; finding the most significant [1]. We can, however, do; better then that. By applying the *modified Gram-Schmidt; orthogonalisation* algorithm [5] [3] to the; functions \f$ F_l\f$, we can evaluate the contribution to the reduction of; \f$ S\f$ from each function in turn, and we may delay the actual inversion; of the curvature-matrix (TMultiDimFit::MakeGramSchmidt). So we are let to consider an \f$ M\times L\f$ matrix \f$\mathsf{F}\f$, an; element of which is given by; \f[; f_{jl} = F_j\left(x_{1j} , x_{2j}, \ldots, x_{Nj}\right); = F_l(\mathbf{x}_j)\, \quad\mbox{with}~j=1,2,\ldots,M,; \f]; where \f$ j\f$ labels the \f$ M\f$ row",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:5596,Energy Efficiency,reduce,reduce,5596,"taining values for the maximum power in variable \f$ i\f$, is; to perform a regular fit to the dependent quantity \f$ D\f$, using a; polynomial only in \f$ x_i\f$. The maximum power is \f$ P_{max,i}\f$ is then the; power that does not significantly improve the one-dimensional; least-square fit over \f$ x_i\f$ to \f$ D\f$ [5]. There are still a huge amount of possible choices for \f$ F_l\f$; in fact; there are \f$\prod_{i=1}^{N} (P_{max,i} + 1)\f$ possible; choices. Obviously we need to limit this. To this end, the user is; asked to set a *power control limit*, \f$ Q\f$ (TMultiDimFit::SetPowerLimit), and a function; \f$ F_l\f$ is only accepted if; \f[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \f]; where \f$ P_{li}\f$ is the leading power of variable \f$ x_i\f$ in function \f$ F_l\f$ (TMultiDimFit::MakeCandidates).; So the number of functions increase with \f$ Q\f$ (1, 2 is fine, 5 is way out). ## Gram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression,; only those functions that significantly reduce \f$ S\f$ is chosen. What; `significant' means, is chosen by the user, and will be; discussed below (see [2.3](TMultiFimFit.html#sec:selectiondetail)). The functions \f$ F_l\f$ are generally not orthogonal, which means one will; have to evaluate all possible \f$ F_l\f$'s over all data-points before; finding the most significant [1]. We can, however, do; better then that. By applying the *modified Gram-Schmidt; orthogonalisation* algorithm [5] [3] to the; functions \f$ F_l\f$, we can evaluate the contribution to the reduction of; \f$ S\f$ from each function in turn, and we may delay the actual inversion; of the curvature-matrix (TMultiDimFit::MakeGramSchmidt). So we are let to consider an \f$ M\times L\f$ matrix \f$\mathsf{F}\f$, an; element of which is given by; \f[; f_{jl} = F_j\left(x_{1j} , x_{2j}, \ldots, x_{Nj}\right); = F_l(\mathbf{x}_j)\, \quad\mbox{with}~j=1,2,\ldots,M,; \f]; where \f$ j\f$ labels the \f$ M\f$ row",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:11959,Energy Efficiency,reduce,reduced,11959," readjusts the value of this angle; while fitting is in progress, in order to make the selection criteria; less and less difficult to be fulfilled. The result is that the; functions contributing most to the reduction of \f$ S\f$ are chosen first; (TMultiDimFit::TestFunction). In case \f$ \phi \f$ isn't defined, an alternative method of; performing this second test is used: The \f$L^{\mbox{th}}\f$; function \f$\textbf{f}_L\f$ is accepted if (refer also to equation (13)); \f[; \Delta S_L > \frac{S_{L-1}}{L_{max}-L}; \f]; where \f$ S_{L-1}\f$ is the sum of the \f$ L-1\f$ first residuals from the; \f$ L-1\f$ functions previously accepted; and \f$ L_{max}\f$ is the total number; of functions allowed in the final expression of the fit (defined by; user). From this we see, that by restricting \f$ L_{max}\f$ -- the number of; terms in the final model -- the fit is more difficult to perform,; since the above selection criteria is more limiting. The more coefficients we evaluate, the more the sum of squares of; residuals \f$ S\f$ will be reduced. We can evaluate \f$ S\f$ before inverting; \f$\mathsf{B}\f$ as shown below. ## Coefficients and Coefficient Errors; Having found a parameterization, that is the \f$ F_l\f$'s and \f$ L\f$, that; minimizes \f$ S\f$, we still need to determine the coefficients; \f$ c_l\f$. However, it's a feature of how we choose the significant; functions, that the evaluation of the \f$ c_l\f$'s becomes trivial [5]. To derive; \f$\mathbf{c}\f$, we first note that; equation (4) can be written as; \f[; \mathsf{F} = \mathsf{W}\mathsf{B}; \f]; where; \f{eqnarray*}{; b_{ij} = \frac{\mathbf{f}_j \bullet \mathbf{w}_i}{\mathbf{w}_i^2}; & \mbox{if} & i < j\\; 1 & \mbox{if} & i = j\\; 0 & \mbox{if} & i > j; \f}; Consequently, \f$\mathsf{B}\f$ is an upper triangle matrix, which can be; readily inverted. So we now evaluate; \f[; \mathsf{F}\mathsf{B}^{-1} = \mathsf{W}; \f]; The model \f$\mathsf{W}\mathbf{a}\f$ can therefore be written as; \f$(\mathsf{F}\mathsf{B}^{-",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:17254,Energy Efficiency,reduce,reduced,17254,"er the; training sample, found parameterization (TMultiDimFit::Fit). This is done by passing; the class a test sample of \f$ M_t\f$ tuples of the form; \f$(\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\f$, where \f$\mathbf{x}_{t,j}\f$ are the independent; variables, \f$ D_{t,j}\f$ the known, dependent quantity, and \f$ E_{t,j}\f$ is; the square error in \f$ D_{t,j}\f$ (TMultiDimFit::AddTestRow). The parameterization is then evaluated at every \f$\mathbf{x}_t\f$ in the; test sample, and; \f[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \f]; is evaluated. The relative error over the test sample; \f[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \f]; should not be to low or high compared to \f$ R\f$ from the training; sample. Also, multiple correlation coefficient from both samples should; be fairly close, otherwise one of the samples is not representative of; the problem. A large difference in the reduced \f$ \chi^2\f$ over the two; samples indicate an over fit, and the maximum number of terms in the; parameterisation should be reduced. It's possible to use [4] to further improve the fit, using the test sample. Christian Holm. ## Bibliography; - <a name=""bevington""></a> Philip R. Bevington and D. Keith Robinson. *Data Reduction and Error Analysis for; the Physical Sciences*. McGraw-Hill, 2 edition, 1992.; - <a name=""mudifi""></a> R. Brun et al. *Long writeup DD/75-23*, CERN, 1980.; - Gene H. Golub and Charles F. van Loan. *Matrix Computations*.; John Hopkins University Press, Baltimore, 3 edition, 1996.; - <a name=""minuit""></a>F. James. *Minuit*. Long writeup D506, CERN, 1998.; - <a name=""wind72""></a>H. Wind. *Function parameterization*. Proceedings of the 1972 CERN Computing and Data Processing; School, volume 72-21 of Yellow report. CERN, 1972.; - <a name=""wind81""></a>H. Wind. 1. principal component analysis, 2. pattern recognition for track; finding, 3. interpolation and functional representation. Yellow report EP/81-12, CERN, 1981.",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:17387,Energy Efficiency,reduce,reduced,17387,"er the; training sample, found parameterization (TMultiDimFit::Fit). This is done by passing; the class a test sample of \f$ M_t\f$ tuples of the form; \f$(\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\f$, where \f$\mathbf{x}_{t,j}\f$ are the independent; variables, \f$ D_{t,j}\f$ the known, dependent quantity, and \f$ E_{t,j}\f$ is; the square error in \f$ D_{t,j}\f$ (TMultiDimFit::AddTestRow). The parameterization is then evaluated at every \f$\mathbf{x}_t\f$ in the; test sample, and; \f[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \f]; is evaluated. The relative error over the test sample; \f[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \f]; should not be to low or high compared to \f$ R\f$ from the training; sample. Also, multiple correlation coefficient from both samples should; be fairly close, otherwise one of the samples is not representative of; the problem. A large difference in the reduced \f$ \chi^2\f$ over the two; samples indicate an over fit, and the maximum number of terms in the; parameterisation should be reduced. It's possible to use [4] to further improve the fit, using the test sample. Christian Holm. ## Bibliography; - <a name=""bevington""></a> Philip R. Bevington and D. Keith Robinson. *Data Reduction and Error Analysis for; the Physical Sciences*. McGraw-Hill, 2 edition, 1992.; - <a name=""mudifi""></a> R. Brun et al. *Long writeup DD/75-23*, CERN, 1980.; - Gene H. Golub and Charles F. van Loan. *Matrix Computations*.; John Hopkins University Press, Baltimore, 3 edition, 1996.; - <a name=""minuit""></a>F. James. *Minuit*. Long writeup D506, CERN, 1998.; - <a name=""wind72""></a>H. Wind. *Function parameterization*. Proceedings of the 1972 CERN Computing and Data Processing; School, volume 72-21 of Yellow report. CERN, 1972.; - <a name=""wind81""></a>H. Wind. 1. principal component analysis, 2. pattern recognition for track; finding, 3. interpolation and functional representation. Yellow report EP/81-12, CERN, 1981.",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:757,Integrability,depend,dependent,757,"// @(#)root/hist:$Id$; // Author: Christian Holm Christensen 07/11/2000; /** \class TMultiDimFit; \ingroup Hist. Multidimensional Fits in ROOT.; ## Overview; A common problem encountered in different fields of applied science is; to find an expression for one physical quantity in terms of several; others, which are directly measurable. An example in high energy physics is the evaluation of the momentum of; a charged particle from the observation of its trajectory in a magnetic; field. The problem is to relate the momentum of the particle to the; observations, which may consists of positional measurements at; intervals along the particle trajectory. The exact functional relationship between the measured quantities; (e.g., the space-points) and the dependent quantity (e.g., the; momentum) is in general not known, but one possible way of solving the; problem, is to find an expression which reliably approximates the; dependence of the momentum on the observations. This explicit function of the observations can be obtained by a; <I>least squares</I> fitting procedure applied to a representative; sample of the data, for which the dependent quantity (e.g., momentum); and the independent observations are known. The function can then be; used to compute the quantity of interest for new observations of the; independent variables. This class <TT>TMultiDimFit</TT> implements such a procedure in; ROOT. It is largely based on the CERNLIB MUDIFI package [2].; Though the basic concepts are still sound, and; therefore kept, a few implementation details have changed, and this; class can take advantage of MINUIT [4] to improve the errors; of the fitting, thanks to the class TMinuit. In [5] and [6] H. Wind demonstrates the utility; of this procedure in the context of tracking, magnetic field; parameterisation, and so on. The outline of the method used in this; class is based on Winds discussion, and I refer these two excellents; text for more information. And example of usage is given i",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:927,Integrability,depend,dependence,927,"// @(#)root/hist:$Id$; // Author: Christian Holm Christensen 07/11/2000; /** \class TMultiDimFit; \ingroup Hist. Multidimensional Fits in ROOT.; ## Overview; A common problem encountered in different fields of applied science is; to find an expression for one physical quantity in terms of several; others, which are directly measurable. An example in high energy physics is the evaluation of the momentum of; a charged particle from the observation of its trajectory in a magnetic; field. The problem is to relate the momentum of the particle to the; observations, which may consists of positional measurements at; intervals along the particle trajectory. The exact functional relationship between the measured quantities; (e.g., the space-points) and the dependent quantity (e.g., the; momentum) is in general not known, but one possible way of solving the; problem, is to find an expression which reliably approximates the; dependence of the momentum on the observations. This explicit function of the observations can be obtained by a; <I>least squares</I> fitting procedure applied to a representative; sample of the data, for which the dependent quantity (e.g., momentum); and the independent observations are known. The function can then be; used to compute the quantity of interest for new observations of the; independent variables. This class <TT>TMultiDimFit</TT> implements such a procedure in; ROOT. It is largely based on the CERNLIB MUDIFI package [2].; Though the basic concepts are still sound, and; therefore kept, a few implementation details have changed, and this; class can take advantage of MINUIT [4] to improve the errors; of the fitting, thanks to the class TMinuit. In [5] and [6] H. Wind demonstrates the utility; of this procedure in the context of tracking, magnetic field; parameterisation, and so on. The outline of the method used in this; class is based on Winds discussion, and I refer these two excellents; text for more information. And example of usage is given i",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:1142,Integrability,depend,dependent,1142,"00; /** \class TMultiDimFit; \ingroup Hist. Multidimensional Fits in ROOT.; ## Overview; A common problem encountered in different fields of applied science is; to find an expression for one physical quantity in terms of several; others, which are directly measurable. An example in high energy physics is the evaluation of the momentum of; a charged particle from the observation of its trajectory in a magnetic; field. The problem is to relate the momentum of the particle to the; observations, which may consists of positional measurements at; intervals along the particle trajectory. The exact functional relationship between the measured quantities; (e.g., the space-points) and the dependent quantity (e.g., the; momentum) is in general not known, but one possible way of solving the; problem, is to find an expression which reliably approximates the; dependence of the momentum on the observations. This explicit function of the observations can be obtained by a; <I>least squares</I> fitting procedure applied to a representative; sample of the data, for which the dependent quantity (e.g., momentum); and the independent observations are known. The function can then be; used to compute the quantity of interest for new observations of the; independent variables. This class <TT>TMultiDimFit</TT> implements such a procedure in; ROOT. It is largely based on the CERNLIB MUDIFI package [2].; Though the basic concepts are still sound, and; therefore kept, a few implementation details have changed, and this; class can take advantage of MINUIT [4] to improve the errors; of the fitting, thanks to the class TMinuit. In [5] and [6] H. Wind demonstrates the utility; of this procedure in the context of tracking, magnetic field; parameterisation, and so on. The outline of the method used in this; class is based on Winds discussion, and I refer these two excellents; text for more information. And example of usage is given in multidimfit.C. ## The Method; Let \f$ D \f$ by the dependent quant",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:2054,Integrability,depend,dependent,2054,"mple of the data, for which the dependent quantity (e.g., momentum); and the independent observations are known. The function can then be; used to compute the quantity of interest for new observations of the; independent variables. This class <TT>TMultiDimFit</TT> implements such a procedure in; ROOT. It is largely based on the CERNLIB MUDIFI package [2].; Though the basic concepts are still sound, and; therefore kept, a few implementation details have changed, and this; class can take advantage of MINUIT [4] to improve the errors; of the fitting, thanks to the class TMinuit. In [5] and [6] H. Wind demonstrates the utility; of this procedure in the context of tracking, magnetic field; parameterisation, and so on. The outline of the method used in this; class is based on Winds discussion, and I refer these two excellents; text for more information. And example of usage is given in multidimfit.C. ## The Method; Let \f$ D \f$ by the dependent quantity of interest, which depends smoothly; on the observable quantities \f$ x_1, \ldots, x_N \f$ which we'll denote by; \f$\mathbf{x}\f$. Given a training sample of \f$ M\f$ tuples of the form, (TMultiDimFit::AddRow). \f[; \left(\mathbf{x}_j, D_j, E_j\right)\quad,; \f]; where \f$\mathbf{x}_j = (x_{1,j},\ldots,x_{N,j})\f$ are \f$ N\f$ independent; variables, \f$ D_j\f$ is the known, quantity dependent at \f$\mathbf{x}_j\f$ and \f$ E_j\f$ is; the square error in \f$ D_j\f$, the class will try to find the parameterization; \f[; D_p(\mathbf{x}) = \sum_{l=1}^{L} c_l \prod_{i=1}^{N} p_{li}\left(x_i\right); = \sum_{l=1}^{L} c_l F_l(\mathbf{x}); \f]; such that. \f[; S \equiv \sum_{j=1}^{M} \left(D_j - D_p\left(\mathbf{x}_j\right)\right)^2; \f]; is minimal. Here \f$p_{li}(x_i)\f$ are monomials, or Chebyshev or Legendre; polynomials, labelled \f$l = 1, \ldots, L\f$, in each variable \f$ x_i\f$,\f$ i=1, \ldots, N\f$. So what TMultiDimFit does, is to determine the number of terms \f$ L\f$, and then \f$ L\f$ terms; (or functions) \f$ F_l\f$,",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:2092,Integrability,depend,depends,2092,"mple of the data, for which the dependent quantity (e.g., momentum); and the independent observations are known. The function can then be; used to compute the quantity of interest for new observations of the; independent variables. This class <TT>TMultiDimFit</TT> implements such a procedure in; ROOT. It is largely based on the CERNLIB MUDIFI package [2].; Though the basic concepts are still sound, and; therefore kept, a few implementation details have changed, and this; class can take advantage of MINUIT [4] to improve the errors; of the fitting, thanks to the class TMinuit. In [5] and [6] H. Wind demonstrates the utility; of this procedure in the context of tracking, magnetic field; parameterisation, and so on. The outline of the method used in this; class is based on Winds discussion, and I refer these two excellents; text for more information. And example of usage is given in multidimfit.C. ## The Method; Let \f$ D \f$ by the dependent quantity of interest, which depends smoothly; on the observable quantities \f$ x_1, \ldots, x_N \f$ which we'll denote by; \f$\mathbf{x}\f$. Given a training sample of \f$ M\f$ tuples of the form, (TMultiDimFit::AddRow). \f[; \left(\mathbf{x}_j, D_j, E_j\right)\quad,; \f]; where \f$\mathbf{x}_j = (x_{1,j},\ldots,x_{N,j})\f$ are \f$ N\f$ independent; variables, \f$ D_j\f$ is the known, quantity dependent at \f$\mathbf{x}_j\f$ and \f$ E_j\f$ is; the square error in \f$ D_j\f$, the class will try to find the parameterization; \f[; D_p(\mathbf{x}) = \sum_{l=1}^{L} c_l \prod_{i=1}^{N} p_{li}\left(x_i\right); = \sum_{l=1}^{L} c_l F_l(\mathbf{x}); \f]; such that. \f[; S \equiv \sum_{j=1}^{M} \left(D_j - D_p\left(\mathbf{x}_j\right)\right)^2; \f]; is minimal. Here \f$p_{li}(x_i)\f$ are monomials, or Chebyshev or Legendre; polynomials, labelled \f$l = 1, \ldots, L\f$, in each variable \f$ x_i\f$,\f$ i=1, \ldots, N\f$. So what TMultiDimFit does, is to determine the number of terms \f$ L\f$, and then \f$ L\f$ terms; (or functions) \f$ F_l\f$,",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:2461,Integrability,depend,dependent,2461,"ound, and; therefore kept, a few implementation details have changed, and this; class can take advantage of MINUIT [4] to improve the errors; of the fitting, thanks to the class TMinuit. In [5] and [6] H. Wind demonstrates the utility; of this procedure in the context of tracking, magnetic field; parameterisation, and so on. The outline of the method used in this; class is based on Winds discussion, and I refer these two excellents; text for more information. And example of usage is given in multidimfit.C. ## The Method; Let \f$ D \f$ by the dependent quantity of interest, which depends smoothly; on the observable quantities \f$ x_1, \ldots, x_N \f$ which we'll denote by; \f$\mathbf{x}\f$. Given a training sample of \f$ M\f$ tuples of the form, (TMultiDimFit::AddRow). \f[; \left(\mathbf{x}_j, D_j, E_j\right)\quad,; \f]; where \f$\mathbf{x}_j = (x_{1,j},\ldots,x_{N,j})\f$ are \f$ N\f$ independent; variables, \f$ D_j\f$ is the known, quantity dependent at \f$\mathbf{x}_j\f$ and \f$ E_j\f$ is; the square error in \f$ D_j\f$, the class will try to find the parameterization; \f[; D_p(\mathbf{x}) = \sum_{l=1}^{L} c_l \prod_{i=1}^{N} p_{li}\left(x_i\right); = \sum_{l=1}^{L} c_l F_l(\mathbf{x}); \f]; such that. \f[; S \equiv \sum_{j=1}^{M} \left(D_j - D_p\left(\mathbf{x}_j\right)\right)^2; \f]; is minimal. Here \f$p_{li}(x_i)\f$ are monomials, or Chebyshev or Legendre; polynomials, labelled \f$l = 1, \ldots, L\f$, in each variable \f$ x_i\f$,\f$ i=1, \ldots, N\f$. So what TMultiDimFit does, is to determine the number of terms \f$ L\f$, and then \f$ L\f$ terms; (or functions) \f$ F_l\f$, and the \f$ L\f$ coefficients \f$ c_l\f$, so that \f$ S\f$ is minimal; (TMultiDimFit::FindParameterization). Of course it's more than a little unlikely that \f$ S\f$ will ever become; exact zero as a result of the procedure outlined below. Therefore, the; user is asked to provide a minimum relative error \f$ \epsilon\f$ (TMultiDimFit::SetMinRelativeError),; and \f$ S\f$ will be considered mi",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:4632,Integrability,depend,dependent,4632,"nctional expression by specifying; the powers of each variable in \f$ L\f$ specified functions \f$ F_1, \ldots,F_L\f$ (TMultiDimFit::SetPowers).; In that case, only the coefficients \f$ c_l\f$ is calculated by the class. ## Limiting the Number of Terms; As always when dealing with fits, there's a real chance of *over fitting*. As is well-known, it's; always possible to fit an \f$ N-1\f$ polynomial in \f$ x\f$ to \f$ N\f$ points \f$ (x,y)\f$ with; \f$\chi^2 = 0\f$, but the polynomial is not likely to fit new data at all [1].; Therefore, the user is asked to provide an upper limit, \f$ L_{max}\f$ to the number of terms in; \f$ D_p\f$ (TMultiDimFit::SetMaxTerms). However, since there's an infinite number of \f$ F_l\f$ to choose from, the; user is asked to give the maximum power. \f$ P_{max,i}\f$, of each variable; \f$ x_i\f$ to be considered in the minimization of \f$ S\f$ (TMultiDimFit::SetMaxPowers). One way of obtaining values for the maximum power in variable \f$ i\f$, is; to perform a regular fit to the dependent quantity \f$ D\f$, using a; polynomial only in \f$ x_i\f$. The maximum power is \f$ P_{max,i}\f$ is then the; power that does not significantly improve the one-dimensional; least-square fit over \f$ x_i\f$ to \f$ D\f$ [5]. There are still a huge amount of possible choices for \f$ F_l\f$; in fact; there are \f$\prod_{i=1}^{N} (P_{max,i} + 1)\f$ possible; choices. Obviously we need to limit this. To this end, the user is; asked to set a *power control limit*, \f$ Q\f$ (TMultiDimFit::SetPowerLimit), and a function; \f$ F_l\f$ is only accepted if; \f[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \f]; where \f$ P_{li}\f$ is the leading power of variable \f$ x_i\f$ in function \f$ F_l\f$ (TMultiDimFit::MakeCandidates).; So the number of functions increase with \f$ Q\f$ (1, 2 is fine, 5 is way out). ## Gram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression,; only those functions that significantly reduce \f$ S\f$ ",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:7627,Integrability,depend,dependent,7627,"ample and \f$ l\f$ labels; \f$ L\f$ functions of \f$ N\f$ variables, and \f$ L \leq M\f$. That is, \f$ f_{jl}\f$ is; the term (or function) numbered \f$ l\f$ evaluated at the data point; \f$ j\f$. We have to normalise \f$\mathbf{x}_j\f$ to \f$ [-1,1]\f$ for this to; succeed [5] (TMultiDimFit::MakeNormalized). We then define a; matrix \f$\mathsf{W}\f$ of which the columns \f$\mathbf{w}_j\f$ are given by; \f{eqnarray*}{; \mathbf{w}_1 &=& \mathbf{f}_1 = F_1\left(\mathbf x_1\right)\\; \mathbf{w}_l &=& \mathbf{f}_l - \sum^{l-1}_{k=1} \frac{\mathbf{f}_l \bullet; \mathbf{w}_k}{\mathbf{w}_k^2}\mathbf{w}_k\,.; \f}; and \f$\mathbf{w}_{l}\f$ is the component of \f$\mathbf{f}_{l} \f$ orthogonal; to \f$\mathbf{w}_{1}, \ldots, \mathbf{w}_{l-1}\f$. Hence we obtain [3],; \f[; \mathbf{w}_k\bullet\mathbf{w}_l = 0\quad\mbox{if}~k \neq l\quad.; \f]; We now take as a new model \f$\mathsf{W}\mathbf{a}\f$. We thus want to; minimize; \f[; S\equiv \left(\mathbf{D} - \mathsf{W}\mathbf{a}\right)^2\quad,; \f]; where \f$\mathbf{D} = \left(D_1,\ldots,D_M\right)\f$ is a vector of the; dependent quantity in the sample. Differentiation with respect to; \f$ a_j\f$ gives, using [6], <a name=""eq:dS2""></a>; \f[; \mathbf{D}\bullet\mathbf{w}_l - a_l\mathbf{w}_l^2 = 0; \f]; or; \f[; a_l = \frac{\mathbf{D}_l\bullet\mathbf{w}_l}{\mathbf{w}_l^2}; \f]; Let \f$ S_j\f$ be the sum of squares of residuals when taking \f$ j\f$ functions; into account. Then; \f[; S_l = \left[\mathbf{D} - \sum^l_{k=1} a_k\mathbf{w}_k\right]^2; = \mathbf{D}^2 - 2\mathbf{D} \sum^l_{k=1} a_k\mathbf{w}_k; + \sum^l_{k=1} a_k^2\mathbf{w}_k^2; \f]; Using [9], we see that; \f{eqnarray*}{; S_l &=& \mathbf{D}^2 - 2 \sum^l_{k=1} a_k^2\mathbf{w}_k^2 +; \sum^j_{k=1} a_k^2\mathbf{w}_k^2\nonumber\\; &=& \mathbf{D}^2 - \sum^l_{k=1} a_k^2\mathbf{w}_k^2\nonumber\\; &=& \mathbf{D}^2 - \sum^l_{k=1} \frac{\left(\mathbf D\bullet \mathbf; w_k\right)}{\mathbf w_k^2}; \f}; So for each new function \f$ F_l\f$ included in the model, we get a; reduction of the",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:14360,Integrability,depend,dependence,14360,"red in the same matrix as \f$\mathsf{B}\f$ (TMultiDimFit::MakeCoefficients).; The errors in the coefficients is calculated by inverting the curvature matrix; of the non-orthogonal functions \f$ f_{lj}\f$ [1] (TMultiDimFit::MakeCoefficientErrors). ## Considerations; It's important to realize that the training sample should be; representative of the problem at hand, in particular along the borders; of the region of interest. This is because the algorithm presented; here, is a *interpolation*, rather then a *extrapolation* [5]. Also, the independent variables \f$ x_{i}\f$ need to be linear; independent, since the procedure will perform poorly if they are not; [5]. One can find an linear transformation from ones; original variables \f$ \xi_{i}\f$ to a set of linear independent variables; \f$ x_{i}\f$, using a *Principal Components Analysis* (see TPrincipal), and; then use the transformed variable as input to this class [5] [6]. H. Wind also outlines a method for parameterising a multidimensional; dependence over a multidimensional set of variables. An example; of the method from [5], is a follows (please refer to; [5] for a full discussion):. 1. Define \f$\mathbf{P} = (P_1, \ldots, P_5)\f$ are the 5 dependent; quantities that define a track.; 2. Compute, for \f$ M\f$ different values of \f$\mathbf{P}\f$, the tracks; through the magnetic field, and determine the corresponding; \f$\mathbf{x} = (x_1, \ldots, x_N)\f$.; 3. Use the simulated observations to determine, with a simple; approximation, the values of \f$\mathbf{P}_j\f$. We call these values; \f$\mathbf{P}^\prime_j, j = 1, \ldots, M\f$.; 4. Determine from \f$\mathbf{x}\f$ a set of at least five relevant; coordinates \f$\mathbf{x}^\prime\f$, using contrains, *or; alternative:*; 5. Perform a Principal Component Analysis (using TPrincipal), and use; to get a linear transformation \f$\mathbf{x} \rightarrow \mathbf{x}^\prime\f$, so that; \f$\mathbf{x}^\prime\f$ are constrained and linear independent.; 6. Perform a Princi",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:14567,Integrability,depend,dependent,14567,"(TMultiDimFit::MakeCoefficientErrors). ## Considerations; It's important to realize that the training sample should be; representative of the problem at hand, in particular along the borders; of the region of interest. This is because the algorithm presented; here, is a *interpolation*, rather then a *extrapolation* [5]. Also, the independent variables \f$ x_{i}\f$ need to be linear; independent, since the procedure will perform poorly if they are not; [5]. One can find an linear transformation from ones; original variables \f$ \xi_{i}\f$ to a set of linear independent variables; \f$ x_{i}\f$, using a *Principal Components Analysis* (see TPrincipal), and; then use the transformed variable as input to this class [5] [6]. H. Wind also outlines a method for parameterising a multidimensional; dependence over a multidimensional set of variables. An example; of the method from [5], is a follows (please refer to; [5] for a full discussion):. 1. Define \f$\mathbf{P} = (P_1, \ldots, P_5)\f$ are the 5 dependent; quantities that define a track.; 2. Compute, for \f$ M\f$ different values of \f$\mathbf{P}\f$, the tracks; through the magnetic field, and determine the corresponding; \f$\mathbf{x} = (x_1, \ldots, x_N)\f$.; 3. Use the simulated observations to determine, with a simple; approximation, the values of \f$\mathbf{P}_j\f$. We call these values; \f$\mathbf{P}^\prime_j, j = 1, \ldots, M\f$.; 4. Determine from \f$\mathbf{x}\f$ a set of at least five relevant; coordinates \f$\mathbf{x}^\prime\f$, using contrains, *or; alternative:*; 5. Perform a Principal Component Analysis (using TPrincipal), and use; to get a linear transformation \f$\mathbf{x} \rightarrow \mathbf{x}^\prime\f$, so that; \f$\mathbf{x}^\prime\f$ are constrained and linear independent.; 6. Perform a Principal Component Analysis on; \f$Q_i = P_i / P^\prime_i\, i = 1, \ldots, 5\f$, to get linear; indenpendent (among themselves, but not independent of \f$\mathbf{x}\f$) quantities; \f$\mathbf{Q}^\prime\f$; 7. For ",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:16593,Integrability,depend,dependent,16593,"{Q}^\prime\f$; 7. For each component \f$Q^\prime_i\f$ make a multidimensional fit,; using \f$\mathbf{x}^\prime\f$ as the variables, thus determining a set of; coefficients \f$\mathbf{c}_i\f$. To process data, using this parameterisation, do; 1. Test wether the observation \f$\mathbf{x}\f$ within the domain of; the parameterization, using the result from the Principal Component; Analysis.; 2. Determine \f$\mathbf{P}^\prime\f$ as before.; 3. Determine \f$\mathbf{x}^\prime\f$ as before.; 4. Use the result of the fit to determine \f$\mathbf{Q}^\prime\f$.; 5. Transform back to \f$\mathbf{P}\f$ from \f$\mathbf{Q}^\prime\f$, using; the result from the Principal Component Analysis. ## Testing the parameterization; The class also provides functionality for testing the, over the; training sample, found parameterization (TMultiDimFit::Fit). This is done by passing; the class a test sample of \f$ M_t\f$ tuples of the form; \f$(\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\f$, where \f$\mathbf{x}_{t,j}\f$ are the independent; variables, \f$ D_{t,j}\f$ the known, dependent quantity, and \f$ E_{t,j}\f$ is; the square error in \f$ D_{t,j}\f$ (TMultiDimFit::AddTestRow). The parameterization is then evaluated at every \f$\mathbf{x}_t\f$ in the; test sample, and; \f[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \f]; is evaluated. The relative error over the test sample; \f[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \f]; should not be to low or high compared to \f$ R\f$ from the training; sample. Also, multiple correlation coefficient from both samples should; be fairly close, otherwise one of the samples is not representative of; the problem. A large difference in the reduced \f$ \chi^2\f$ over the two; samples indicate an over fit, and the maximum number of terms in the; parameterisation should be reduced. It's possible to use [4] to further improve the fit, using the test sample. Christian Holm. ## Bibliography; - <a name=""bevington""></a> Philip ",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:1331,Modifiability,variab,variables,1331,"terms of several; others, which are directly measurable. An example in high energy physics is the evaluation of the momentum of; a charged particle from the observation of its trajectory in a magnetic; field. The problem is to relate the momentum of the particle to the; observations, which may consists of positional measurements at; intervals along the particle trajectory. The exact functional relationship between the measured quantities; (e.g., the space-points) and the dependent quantity (e.g., the; momentum) is in general not known, but one possible way of solving the; problem, is to find an expression which reliably approximates the; dependence of the momentum on the observations. This explicit function of the observations can be obtained by a; <I>least squares</I> fitting procedure applied to a representative; sample of the data, for which the dependent quantity (e.g., momentum); and the independent observations are known. The function can then be; used to compute the quantity of interest for new observations of the; independent variables. This class <TT>TMultiDimFit</TT> implements such a procedure in; ROOT. It is largely based on the CERNLIB MUDIFI package [2].; Though the basic concepts are still sound, and; therefore kept, a few implementation details have changed, and this; class can take advantage of MINUIT [4] to improve the errors; of the fitting, thanks to the class TMinuit. In [5] and [6] H. Wind demonstrates the utility; of this procedure in the context of tracking, magnetic field; parameterisation, and so on. The outline of the method used in this; class is based on Winds discussion, and I refer these two excellents; text for more information. And example of usage is given in multidimfit.C. ## The Method; Let \f$ D \f$ by the dependent quantity of interest, which depends smoothly; on the observable quantities \f$ x_1, \ldots, x_N \f$ which we'll denote by; \f$\mathbf{x}\f$. Given a training sample of \f$ M\f$ tuples of the form, (TMultiDimFit::AddRow",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:2416,Modifiability,variab,variables,2416,"ound, and; therefore kept, a few implementation details have changed, and this; class can take advantage of MINUIT [4] to improve the errors; of the fitting, thanks to the class TMinuit. In [5] and [6] H. Wind demonstrates the utility; of this procedure in the context of tracking, magnetic field; parameterisation, and so on. The outline of the method used in this; class is based on Winds discussion, and I refer these two excellents; text for more information. And example of usage is given in multidimfit.C. ## The Method; Let \f$ D \f$ by the dependent quantity of interest, which depends smoothly; on the observable quantities \f$ x_1, \ldots, x_N \f$ which we'll denote by; \f$\mathbf{x}\f$. Given a training sample of \f$ M\f$ tuples of the form, (TMultiDimFit::AddRow). \f[; \left(\mathbf{x}_j, D_j, E_j\right)\quad,; \f]; where \f$\mathbf{x}_j = (x_{1,j},\ldots,x_{N,j})\f$ are \f$ N\f$ independent; variables, \f$ D_j\f$ is the known, quantity dependent at \f$\mathbf{x}_j\f$ and \f$ E_j\f$ is; the square error in \f$ D_j\f$, the class will try to find the parameterization; \f[; D_p(\mathbf{x}) = \sum_{l=1}^{L} c_l \prod_{i=1}^{N} p_{li}\left(x_i\right); = \sum_{l=1}^{L} c_l F_l(\mathbf{x}); \f]; such that. \f[; S \equiv \sum_{j=1}^{M} \left(D_j - D_p\left(\mathbf{x}_j\right)\right)^2; \f]; is minimal. Here \f$p_{li}(x_i)\f$ are monomials, or Chebyshev or Legendre; polynomials, labelled \f$l = 1, \ldots, L\f$, in each variable \f$ x_i\f$,\f$ i=1, \ldots, N\f$. So what TMultiDimFit does, is to determine the number of terms \f$ L\f$, and then \f$ L\f$ terms; (or functions) \f$ F_l\f$, and the \f$ L\f$ coefficients \f$ c_l\f$, so that \f$ S\f$ is minimal; (TMultiDimFit::FindParameterization). Of course it's more than a little unlikely that \f$ S\f$ will ever become; exact zero as a result of the procedure outlined below. Therefore, the; user is asked to provide a minimum relative error \f$ \epsilon\f$ (TMultiDimFit::SetMinRelativeError),; and \f$ S\f$ will be considered mi",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:2575,Modifiability,parameteriz,parameterization,2575,"ound, and; therefore kept, a few implementation details have changed, and this; class can take advantage of MINUIT [4] to improve the errors; of the fitting, thanks to the class TMinuit. In [5] and [6] H. Wind demonstrates the utility; of this procedure in the context of tracking, magnetic field; parameterisation, and so on. The outline of the method used in this; class is based on Winds discussion, and I refer these two excellents; text for more information. And example of usage is given in multidimfit.C. ## The Method; Let \f$ D \f$ by the dependent quantity of interest, which depends smoothly; on the observable quantities \f$ x_1, \ldots, x_N \f$ which we'll denote by; \f$\mathbf{x}\f$. Given a training sample of \f$ M\f$ tuples of the form, (TMultiDimFit::AddRow). \f[; \left(\mathbf{x}_j, D_j, E_j\right)\quad,; \f]; where \f$\mathbf{x}_j = (x_{1,j},\ldots,x_{N,j})\f$ are \f$ N\f$ independent; variables, \f$ D_j\f$ is the known, quantity dependent at \f$\mathbf{x}_j\f$ and \f$ E_j\f$ is; the square error in \f$ D_j\f$, the class will try to find the parameterization; \f[; D_p(\mathbf{x}) = \sum_{l=1}^{L} c_l \prod_{i=1}^{N} p_{li}\left(x_i\right); = \sum_{l=1}^{L} c_l F_l(\mathbf{x}); \f]; such that. \f[; S \equiv \sum_{j=1}^{M} \left(D_j - D_p\left(\mathbf{x}_j\right)\right)^2; \f]; is minimal. Here \f$p_{li}(x_i)\f$ are monomials, or Chebyshev or Legendre; polynomials, labelled \f$l = 1, \ldots, L\f$, in each variable \f$ x_i\f$,\f$ i=1, \ldots, N\f$. So what TMultiDimFit does, is to determine the number of terms \f$ L\f$, and then \f$ L\f$ terms; (or functions) \f$ F_l\f$, and the \f$ L\f$ coefficients \f$ c_l\f$, so that \f$ S\f$ is minimal; (TMultiDimFit::FindParameterization). Of course it's more than a little unlikely that \f$ S\f$ will ever become; exact zero as a result of the procedure outlined below. Therefore, the; user is asked to provide a minimum relative error \f$ \epsilon\f$ (TMultiDimFit::SetMinRelativeError),; and \f$ S\f$ will be considered mi",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:2944,Modifiability,variab,variable,2944,"on, and I refer these two excellents; text for more information. And example of usage is given in multidimfit.C. ## The Method; Let \f$ D \f$ by the dependent quantity of interest, which depends smoothly; on the observable quantities \f$ x_1, \ldots, x_N \f$ which we'll denote by; \f$\mathbf{x}\f$. Given a training sample of \f$ M\f$ tuples of the form, (TMultiDimFit::AddRow). \f[; \left(\mathbf{x}_j, D_j, E_j\right)\quad,; \f]; where \f$\mathbf{x}_j = (x_{1,j},\ldots,x_{N,j})\f$ are \f$ N\f$ independent; variables, \f$ D_j\f$ is the known, quantity dependent at \f$\mathbf{x}_j\f$ and \f$ E_j\f$ is; the square error in \f$ D_j\f$, the class will try to find the parameterization; \f[; D_p(\mathbf{x}) = \sum_{l=1}^{L} c_l \prod_{i=1}^{N} p_{li}\left(x_i\right); = \sum_{l=1}^{L} c_l F_l(\mathbf{x}); \f]; such that. \f[; S \equiv \sum_{j=1}^{M} \left(D_j - D_p\left(\mathbf{x}_j\right)\right)^2; \f]; is minimal. Here \f$p_{li}(x_i)\f$ are monomials, or Chebyshev or Legendre; polynomials, labelled \f$l = 1, \ldots, L\f$, in each variable \f$ x_i\f$,\f$ i=1, \ldots, N\f$. So what TMultiDimFit does, is to determine the number of terms \f$ L\f$, and then \f$ L\f$ terms; (or functions) \f$ F_l\f$, and the \f$ L\f$ coefficients \f$ c_l\f$, so that \f$ S\f$ is minimal; (TMultiDimFit::FindParameterization). Of course it's more than a little unlikely that \f$ S\f$ will ever become; exact zero as a result of the procedure outlined below. Therefore, the; user is asked to provide a minimum relative error \f$ \epsilon\f$ (TMultiDimFit::SetMinRelativeError),; and \f$ S\f$ will be considered minimized when. \f[; R = \frac{S}{\sum_{j=1}^M D_j^2} < \epsilon; \f]; Optionally, the user may impose a functional expression by specifying; the powers of each variable in \f$ L\f$ specified functions \f$ F_1, \ldots,F_L\f$ (TMultiDimFit::SetPowers).; In that case, only the coefficients \f$ c_l\f$ is calculated by the class. ## Limiting the Number of Terms; As always when dealing with fits, there's",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:3665,Modifiability,variab,variable,3665,"rod_{i=1}^{N} p_{li}\left(x_i\right); = \sum_{l=1}^{L} c_l F_l(\mathbf{x}); \f]; such that. \f[; S \equiv \sum_{j=1}^{M} \left(D_j - D_p\left(\mathbf{x}_j\right)\right)^2; \f]; is minimal. Here \f$p_{li}(x_i)\f$ are monomials, or Chebyshev or Legendre; polynomials, labelled \f$l = 1, \ldots, L\f$, in each variable \f$ x_i\f$,\f$ i=1, \ldots, N\f$. So what TMultiDimFit does, is to determine the number of terms \f$ L\f$, and then \f$ L\f$ terms; (or functions) \f$ F_l\f$, and the \f$ L\f$ coefficients \f$ c_l\f$, so that \f$ S\f$ is minimal; (TMultiDimFit::FindParameterization). Of course it's more than a little unlikely that \f$ S\f$ will ever become; exact zero as a result of the procedure outlined below. Therefore, the; user is asked to provide a minimum relative error \f$ \epsilon\f$ (TMultiDimFit::SetMinRelativeError),; and \f$ S\f$ will be considered minimized when. \f[; R = \frac{S}{\sum_{j=1}^M D_j^2} < \epsilon; \f]; Optionally, the user may impose a functional expression by specifying; the powers of each variable in \f$ L\f$ specified functions \f$ F_1, \ldots,F_L\f$ (TMultiDimFit::SetPowers).; In that case, only the coefficients \f$ c_l\f$ is calculated by the class. ## Limiting the Number of Terms; As always when dealing with fits, there's a real chance of *over fitting*. As is well-known, it's; always possible to fit an \f$ N-1\f$ polynomial in \f$ x\f$ to \f$ N\f$ points \f$ (x,y)\f$ with; \f$\chi^2 = 0\f$, but the polynomial is not likely to fit new data at all [1].; Therefore, the user is asked to provide an upper limit, \f$ L_{max}\f$ to the number of terms in; \f$ D_p\f$ (TMultiDimFit::SetMaxTerms). However, since there's an infinite number of \f$ F_l\f$ to choose from, the; user is asked to give the maximum power. \f$ P_{max,i}\f$, of each variable; \f$ x_i\f$ to be considered in the minimization of \f$ S\f$ (TMultiDimFit::SetMaxPowers). One way of obtaining values for the maximum power in variable \f$ i\f$, is; to perform a regular fit to the depen",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:4424,Modifiability,variab,variable,4424,"iveError),; and \f$ S\f$ will be considered minimized when. \f[; R = \frac{S}{\sum_{j=1}^M D_j^2} < \epsilon; \f]; Optionally, the user may impose a functional expression by specifying; the powers of each variable in \f$ L\f$ specified functions \f$ F_1, \ldots,F_L\f$ (TMultiDimFit::SetPowers).; In that case, only the coefficients \f$ c_l\f$ is calculated by the class. ## Limiting the Number of Terms; As always when dealing with fits, there's a real chance of *over fitting*. As is well-known, it's; always possible to fit an \f$ N-1\f$ polynomial in \f$ x\f$ to \f$ N\f$ points \f$ (x,y)\f$ with; \f$\chi^2 = 0\f$, but the polynomial is not likely to fit new data at all [1].; Therefore, the user is asked to provide an upper limit, \f$ L_{max}\f$ to the number of terms in; \f$ D_p\f$ (TMultiDimFit::SetMaxTerms). However, since there's an infinite number of \f$ F_l\f$ to choose from, the; user is asked to give the maximum power. \f$ P_{max,i}\f$, of each variable; \f$ x_i\f$ to be considered in the minimization of \f$ S\f$ (TMultiDimFit::SetMaxPowers). One way of obtaining values for the maximum power in variable \f$ i\f$, is; to perform a regular fit to the dependent quantity \f$ D\f$, using a; polynomial only in \f$ x_i\f$. The maximum power is \f$ P_{max,i}\f$ is then the; power that does not significantly improve the one-dimensional; least-square fit over \f$ x_i\f$ to \f$ D\f$ [5]. There are still a huge amount of possible choices for \f$ F_l\f$; in fact; there are \f$\prod_{i=1}^{N} (P_{max,i} + 1)\f$ possible; choices. Obviously we need to limit this. To this end, the user is; asked to set a *power control limit*, \f$ Q\f$ (TMultiDimFit::SetPowerLimit), and a function; \f$ F_l\f$ is only accepted if; \f[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \f]; where \f$ P_{li}\f$ is the leading power of variable \f$ x_i\f$ in function \f$ F_l\f$ (TMultiDimFit::MakeCandidates).; So the number of functions increase with \f$ Q\f$ (1, 2 is fine, 5 is way out). ## Gram",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:4577,Modifiability,variab,variable,4577,"nctional expression by specifying; the powers of each variable in \f$ L\f$ specified functions \f$ F_1, \ldots,F_L\f$ (TMultiDimFit::SetPowers).; In that case, only the coefficients \f$ c_l\f$ is calculated by the class. ## Limiting the Number of Terms; As always when dealing with fits, there's a real chance of *over fitting*. As is well-known, it's; always possible to fit an \f$ N-1\f$ polynomial in \f$ x\f$ to \f$ N\f$ points \f$ (x,y)\f$ with; \f$\chi^2 = 0\f$, but the polynomial is not likely to fit new data at all [1].; Therefore, the user is asked to provide an upper limit, \f$ L_{max}\f$ to the number of terms in; \f$ D_p\f$ (TMultiDimFit::SetMaxTerms). However, since there's an infinite number of \f$ F_l\f$ to choose from, the; user is asked to give the maximum power. \f$ P_{max,i}\f$, of each variable; \f$ x_i\f$ to be considered in the minimization of \f$ S\f$ (TMultiDimFit::SetMaxPowers). One way of obtaining values for the maximum power in variable \f$ i\f$, is; to perform a regular fit to the dependent quantity \f$ D\f$, using a; polynomial only in \f$ x_i\f$. The maximum power is \f$ P_{max,i}\f$ is then the; power that does not significantly improve the one-dimensional; least-square fit over \f$ x_i\f$ to \f$ D\f$ [5]. There are still a huge amount of possible choices for \f$ F_l\f$; in fact; there are \f$\prod_{i=1}^{N} (P_{max,i} + 1)\f$ possible; choices. Obviously we need to limit this. To this end, the user is; asked to set a *power control limit*, \f$ Q\f$ (TMultiDimFit::SetPowerLimit), and a function; \f$ F_l\f$ is only accepted if; \f[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \f]; where \f$ P_{li}\f$ is the leading power of variable \f$ x_i\f$ in function \f$ F_l\f$ (TMultiDimFit::MakeCandidates).; So the number of functions increase with \f$ Q\f$ (1, 2 is fine, 5 is way out). ## Gram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression,; only those functions that significantly reduce \f$ S\f$ ",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:5297,Modifiability,variab,variable,5297,"max}\f$ to the number of terms in; \f$ D_p\f$ (TMultiDimFit::SetMaxTerms). However, since there's an infinite number of \f$ F_l\f$ to choose from, the; user is asked to give the maximum power. \f$ P_{max,i}\f$, of each variable; \f$ x_i\f$ to be considered in the minimization of \f$ S\f$ (TMultiDimFit::SetMaxPowers). One way of obtaining values for the maximum power in variable \f$ i\f$, is; to perform a regular fit to the dependent quantity \f$ D\f$, using a; polynomial only in \f$ x_i\f$. The maximum power is \f$ P_{max,i}\f$ is then the; power that does not significantly improve the one-dimensional; least-square fit over \f$ x_i\f$ to \f$ D\f$ [5]. There are still a huge amount of possible choices for \f$ F_l\f$; in fact; there are \f$\prod_{i=1}^{N} (P_{max,i} + 1)\f$ possible; choices. Obviously we need to limit this. To this end, the user is; asked to set a *power control limit*, \f$ Q\f$ (TMultiDimFit::SetPowerLimit), and a function; \f$ F_l\f$ is only accepted if; \f[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \f]; where \f$ P_{li}\f$ is the leading power of variable \f$ x_i\f$ in function \f$ F_l\f$ (TMultiDimFit::MakeCandidates).; So the number of functions increase with \f$ Q\f$ (1, 2 is fine, 5 is way out). ## Gram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression,; only those functions that significantly reduce \f$ S\f$ is chosen. What; `significant' means, is chosen by the user, and will be; discussed below (see [2.3](TMultiFimFit.html#sec:selectiondetail)). The functions \f$ F_l\f$ are generally not orthogonal, which means one will; have to evaluate all possible \f$ F_l\f$'s over all data-points before; finding the most significant [1]. We can, however, do; better then that. By applying the *modified Gram-Schmidt; orthogonalisation* algorithm [5] [3] to the; functions \f$ F_l\f$, we can evaluate the contribution to the reduction of; \f$ S\f$ from each function in turn, and we may delay the actual inv",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:6614,Modifiability,variab,variables,6614,"ram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression,; only those functions that significantly reduce \f$ S\f$ is chosen. What; `significant' means, is chosen by the user, and will be; discussed below (see [2.3](TMultiFimFit.html#sec:selectiondetail)). The functions \f$ F_l\f$ are generally not orthogonal, which means one will; have to evaluate all possible \f$ F_l\f$'s over all data-points before; finding the most significant [1]. We can, however, do; better then that. By applying the *modified Gram-Schmidt; orthogonalisation* algorithm [5] [3] to the; functions \f$ F_l\f$, we can evaluate the contribution to the reduction of; \f$ S\f$ from each function in turn, and we may delay the actual inversion; of the curvature-matrix (TMultiDimFit::MakeGramSchmidt). So we are let to consider an \f$ M\times L\f$ matrix \f$\mathsf{F}\f$, an; element of which is given by; \f[; f_{jl} = F_j\left(x_{1j} , x_{2j}, \ldots, x_{Nj}\right); = F_l(\mathbf{x}_j)\, \quad\mbox{with}~j=1,2,\ldots,M,; \f]; where \f$ j\f$ labels the \f$ M\f$ rows in the training sample and \f$ l\f$ labels; \f$ L\f$ functions of \f$ N\f$ variables, and \f$ L \leq M\f$. That is, \f$ f_{jl}\f$ is; the term (or function) numbered \f$ l\f$ evaluated at the data point; \f$ j\f$. We have to normalise \f$\mathbf{x}_j\f$ to \f$ [-1,1]\f$ for this to; succeed [5] (TMultiDimFit::MakeNormalized). We then define a; matrix \f$\mathsf{W}\f$ of which the columns \f$\mathbf{w}_j\f$ are given by; \f{eqnarray*}{; \mathbf{w}_1 &=& \mathbf{f}_1 = F_1\left(\mathbf x_1\right)\\; \mathbf{w}_l &=& \mathbf{f}_l - \sum^{l-1}_{k=1} \frac{\mathbf{f}_l \bullet; \mathbf{w}_k}{\mathbf{w}_k^2}\mathbf{w}_k\,.; \f}; and \f$\mathbf{w}_{l}\f$ is the component of \f$\mathbf{f}_{l} \f$ orthogonal; to \f$\mathbf{w}_{1}, \ldots, \mathbf{w}_{l-1}\f$. Hence we obtain [3],; \f[; \mathbf{w}_k\bullet\mathbf{w}_l = 0\quad\mbox{if}~k \neq l\quad.; \f]; We now take as a new model \f$\mathsf{W}\mathbf{a}\f$. We t",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:12099,Modifiability,parameteriz,parameterization,12099,"\f$ are chosen first; (TMultiDimFit::TestFunction). In case \f$ \phi \f$ isn't defined, an alternative method of; performing this second test is used: The \f$L^{\mbox{th}}\f$; function \f$\textbf{f}_L\f$ is accepted if (refer also to equation (13)); \f[; \Delta S_L > \frac{S_{L-1}}{L_{max}-L}; \f]; where \f$ S_{L-1}\f$ is the sum of the \f$ L-1\f$ first residuals from the; \f$ L-1\f$ functions previously accepted; and \f$ L_{max}\f$ is the total number; of functions allowed in the final expression of the fit (defined by; user). From this we see, that by restricting \f$ L_{max}\f$ -- the number of; terms in the final model -- the fit is more difficult to perform,; since the above selection criteria is more limiting. The more coefficients we evaluate, the more the sum of squares of; residuals \f$ S\f$ will be reduced. We can evaluate \f$ S\f$ before inverting; \f$\mathsf{B}\f$ as shown below. ## Coefficients and Coefficient Errors; Having found a parameterization, that is the \f$ F_l\f$'s and \f$ L\f$, that; minimizes \f$ S\f$, we still need to determine the coefficients; \f$ c_l\f$. However, it's a feature of how we choose the significant; functions, that the evaluation of the \f$ c_l\f$'s becomes trivial [5]. To derive; \f$\mathbf{c}\f$, we first note that; equation (4) can be written as; \f[; \mathsf{F} = \mathsf{W}\mathsf{B}; \f]; where; \f{eqnarray*}{; b_{ij} = \frac{\mathbf{f}_j \bullet \mathbf{w}_i}{\mathbf{w}_i^2}; & \mbox{if} & i < j\\; 1 & \mbox{if} & i = j\\; 0 & \mbox{if} & i > j; \f}; Consequently, \f$\mathsf{B}\f$ is an upper triangle matrix, which can be; readily inverted. So we now evaluate; \f[; \mathsf{F}\mathsf{B}^{-1} = \mathsf{W}; \f]; The model \f$\mathsf{W}\mathbf{a}\f$ can therefore be written as; \f$(\mathsf{F}\mathsf{B}^{-1})\mathbf{a} = \mathsf{F}(\mathsf{B}^{-1}\mathbf{a})\,.\f$. The original model \f$\mathsf{F}\mathbf{c}\f$ is therefore identical with; this if; \f[; \mathbf{c} = \left(\mathsf{B}^{-1}\mathbf{a}\right) =; \left[\mathbf{a}^T\l",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:13905,Modifiability,variab,variables,13905,"B}^{-1}\mathbf{a})\,.\f$. The original model \f$\mathsf{F}\mathbf{c}\f$ is therefore identical with; this if; \f[; \mathbf{c} = \left(\mathsf{B}^{-1}\mathbf{a}\right) =; \left[\mathbf{a}^T\left(\mathsf{B}^{-1}\right)^T\right]^T\,.; \f]; The reason we use \f$\left(\mathsf{B}^{-1}\right)^T\f$ rather then; \f$\mathsf{B}^{-1}\f$ is to save storage, since \f$\left(\mathsf{B}^{-1}\right)^T\f$; can be stored in the same matrix as \f$\mathsf{B}\f$ (TMultiDimFit::MakeCoefficients).; The errors in the coefficients is calculated by inverting the curvature matrix; of the non-orthogonal functions \f$ f_{lj}\f$ [1] (TMultiDimFit::MakeCoefficientErrors). ## Considerations; It's important to realize that the training sample should be; representative of the problem at hand, in particular along the borders; of the region of interest. This is because the algorithm presented; here, is a *interpolation*, rather then a *extrapolation* [5]. Also, the independent variables \f$ x_{i}\f$ need to be linear; independent, since the procedure will perform poorly if they are not; [5]. One can find an linear transformation from ones; original variables \f$ \xi_{i}\f$ to a set of linear independent variables; \f$ x_{i}\f$, using a *Principal Components Analysis* (see TPrincipal), and; then use the transformed variable as input to this class [5] [6]. H. Wind also outlines a method for parameterising a multidimensional; dependence over a multidimensional set of variables. An example; of the method from [5], is a follows (please refer to; [5] for a full discussion):. 1. Define \f$\mathbf{P} = (P_1, \ldots, P_5)\f$ are the 5 dependent; quantities that define a track.; 2. Compute, for \f$ M\f$ different values of \f$\mathbf{P}\f$, the tracks; through the magnetic field, and determine the corresponding; \f$\mathbf{x} = (x_1, \ldots, x_N)\f$.; 3. Use the simulated observations to determine, with a simple; approximation, the values of \f$\mathbf{P}_j\f$. We call these values; \f$\mathbf{P}^\prime_j, j = 1, ",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:14080,Modifiability,variab,variables,14080,"^{-1}\right)^T\right]^T\,.; \f]; The reason we use \f$\left(\mathsf{B}^{-1}\right)^T\f$ rather then; \f$\mathsf{B}^{-1}\f$ is to save storage, since \f$\left(\mathsf{B}^{-1}\right)^T\f$; can be stored in the same matrix as \f$\mathsf{B}\f$ (TMultiDimFit::MakeCoefficients).; The errors in the coefficients is calculated by inverting the curvature matrix; of the non-orthogonal functions \f$ f_{lj}\f$ [1] (TMultiDimFit::MakeCoefficientErrors). ## Considerations; It's important to realize that the training sample should be; representative of the problem at hand, in particular along the borders; of the region of interest. This is because the algorithm presented; here, is a *interpolation*, rather then a *extrapolation* [5]. Also, the independent variables \f$ x_{i}\f$ need to be linear; independent, since the procedure will perform poorly if they are not; [5]. One can find an linear transformation from ones; original variables \f$ \xi_{i}\f$ to a set of linear independent variables; \f$ x_{i}\f$, using a *Principal Components Analysis* (see TPrincipal), and; then use the transformed variable as input to this class [5] [6]. H. Wind also outlines a method for parameterising a multidimensional; dependence over a multidimensional set of variables. An example; of the method from [5], is a follows (please refer to; [5] for a full discussion):. 1. Define \f$\mathbf{P} = (P_1, \ldots, P_5)\f$ are the 5 dependent; quantities that define a track.; 2. Compute, for \f$ M\f$ different values of \f$\mathbf{P}\f$, the tracks; through the magnetic field, and determine the corresponding; \f$\mathbf{x} = (x_1, \ldots, x_N)\f$.; 3. Use the simulated observations to determine, with a simple; approximation, the values of \f$\mathbf{P}_j\f$. We call these values; \f$\mathbf{P}^\prime_j, j = 1, \ldots, M\f$.; 4. Determine from \f$\mathbf{x}\f$ a set of at least five relevant; coordinates \f$\mathbf{x}^\prime\f$, using contrains, *or; alternative:*; 5. Perform a Principal Component Analysis (usi",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:14136,Modifiability,variab,variables,14136,"^{-1}\right)^T\right]^T\,.; \f]; The reason we use \f$\left(\mathsf{B}^{-1}\right)^T\f$ rather then; \f$\mathsf{B}^{-1}\f$ is to save storage, since \f$\left(\mathsf{B}^{-1}\right)^T\f$; can be stored in the same matrix as \f$\mathsf{B}\f$ (TMultiDimFit::MakeCoefficients).; The errors in the coefficients is calculated by inverting the curvature matrix; of the non-orthogonal functions \f$ f_{lj}\f$ [1] (TMultiDimFit::MakeCoefficientErrors). ## Considerations; It's important to realize that the training sample should be; representative of the problem at hand, in particular along the borders; of the region of interest. This is because the algorithm presented; here, is a *interpolation*, rather then a *extrapolation* [5]. Also, the independent variables \f$ x_{i}\f$ need to be linear; independent, since the procedure will perform poorly if they are not; [5]. One can find an linear transformation from ones; original variables \f$ \xi_{i}\f$ to a set of linear independent variables; \f$ x_{i}\f$, using a *Principal Components Analysis* (see TPrincipal), and; then use the transformed variable as input to this class [5] [6]. H. Wind also outlines a method for parameterising a multidimensional; dependence over a multidimensional set of variables. An example; of the method from [5], is a follows (please refer to; [5] for a full discussion):. 1. Define \f$\mathbf{P} = (P_1, \ldots, P_5)\f$ are the 5 dependent; quantities that define a track.; 2. Compute, for \f$ M\f$ different values of \f$\mathbf{P}\f$, the tracks; through the magnetic field, and determine the corresponding; \f$\mathbf{x} = (x_1, \ldots, x_N)\f$.; 3. Use the simulated observations to determine, with a simple; approximation, the values of \f$\mathbf{P}_j\f$. We call these values; \f$\mathbf{P}^\prime_j, j = 1, \ldots, M\f$.; 4. Determine from \f$\mathbf{x}\f$ a set of at least five relevant; coordinates \f$\mathbf{x}^\prime\f$, using contrains, *or; alternative:*; 5. Perform a Principal Component Analysis (usi",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:14249,Modifiability,variab,variable,14249,"^{-1}\right)^T\right]^T\,.; \f]; The reason we use \f$\left(\mathsf{B}^{-1}\right)^T\f$ rather then; \f$\mathsf{B}^{-1}\f$ is to save storage, since \f$\left(\mathsf{B}^{-1}\right)^T\f$; can be stored in the same matrix as \f$\mathsf{B}\f$ (TMultiDimFit::MakeCoefficients).; The errors in the coefficients is calculated by inverting the curvature matrix; of the non-orthogonal functions \f$ f_{lj}\f$ [1] (TMultiDimFit::MakeCoefficientErrors). ## Considerations; It's important to realize that the training sample should be; representative of the problem at hand, in particular along the borders; of the region of interest. This is because the algorithm presented; here, is a *interpolation*, rather then a *extrapolation* [5]. Also, the independent variables \f$ x_{i}\f$ need to be linear; independent, since the procedure will perform poorly if they are not; [5]. One can find an linear transformation from ones; original variables \f$ \xi_{i}\f$ to a set of linear independent variables; \f$ x_{i}\f$, using a *Principal Components Analysis* (see TPrincipal), and; then use the transformed variable as input to this class [5] [6]. H. Wind also outlines a method for parameterising a multidimensional; dependence over a multidimensional set of variables. An example; of the method from [5], is a follows (please refer to; [5] for a full discussion):. 1. Define \f$\mathbf{P} = (P_1, \ldots, P_5)\f$ are the 5 dependent; quantities that define a track.; 2. Compute, for \f$ M\f$ different values of \f$\mathbf{P}\f$, the tracks; through the magnetic field, and determine the corresponding; \f$\mathbf{x} = (x_1, \ldots, x_N)\f$.; 3. Use the simulated observations to determine, with a simple; approximation, the values of \f$\mathbf{P}_j\f$. We call these values; \f$\mathbf{P}^\prime_j, j = 1, \ldots, M\f$.; 4. Determine from \f$\mathbf{x}\f$ a set of at least five relevant; coordinates \f$\mathbf{x}^\prime\f$, using contrains, *or; alternative:*; 5. Perform a Principal Component Analysis (usi",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:14402,Modifiability,variab,variables,14402,"red in the same matrix as \f$\mathsf{B}\f$ (TMultiDimFit::MakeCoefficients).; The errors in the coefficients is calculated by inverting the curvature matrix; of the non-orthogonal functions \f$ f_{lj}\f$ [1] (TMultiDimFit::MakeCoefficientErrors). ## Considerations; It's important to realize that the training sample should be; representative of the problem at hand, in particular along the borders; of the region of interest. This is because the algorithm presented; here, is a *interpolation*, rather then a *extrapolation* [5]. Also, the independent variables \f$ x_{i}\f$ need to be linear; independent, since the procedure will perform poorly if they are not; [5]. One can find an linear transformation from ones; original variables \f$ \xi_{i}\f$ to a set of linear independent variables; \f$ x_{i}\f$, using a *Principal Components Analysis* (see TPrincipal), and; then use the transformed variable as input to this class [5] [6]. H. Wind also outlines a method for parameterising a multidimensional; dependence over a multidimensional set of variables. An example; of the method from [5], is a follows (please refer to; [5] for a full discussion):. 1. Define \f$\mathbf{P} = (P_1, \ldots, P_5)\f$ are the 5 dependent; quantities that define a track.; 2. Compute, for \f$ M\f$ different values of \f$\mathbf{P}\f$, the tracks; through the magnetic field, and determine the corresponding; \f$\mathbf{x} = (x_1, \ldots, x_N)\f$.; 3. Use the simulated observations to determine, with a simple; approximation, the values of \f$\mathbf{P}_j\f$. We call these values; \f$\mathbf{P}^\prime_j, j = 1, \ldots, M\f$.; 4. Determine from \f$\mathbf{x}\f$ a set of at least five relevant; coordinates \f$\mathbf{x}^\prime\f$, using contrains, *or; alternative:*; 5. Perform a Principal Component Analysis (using TPrincipal), and use; to get a linear transformation \f$\mathbf{x} \rightarrow \mathbf{x}^\prime\f$, so that; \f$\mathbf{x}^\prime\f$ are constrained and linear independent.; 6. Perform a Princi",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:15659,Modifiability,variab,variables,15659,"ent values of \f$\mathbf{P}\f$, the tracks; through the magnetic field, and determine the corresponding; \f$\mathbf{x} = (x_1, \ldots, x_N)\f$.; 3. Use the simulated observations to determine, with a simple; approximation, the values of \f$\mathbf{P}_j\f$. We call these values; \f$\mathbf{P}^\prime_j, j = 1, \ldots, M\f$.; 4. Determine from \f$\mathbf{x}\f$ a set of at least five relevant; coordinates \f$\mathbf{x}^\prime\f$, using contrains, *or; alternative:*; 5. Perform a Principal Component Analysis (using TPrincipal), and use; to get a linear transformation \f$\mathbf{x} \rightarrow \mathbf{x}^\prime\f$, so that; \f$\mathbf{x}^\prime\f$ are constrained and linear independent.; 6. Perform a Principal Component Analysis on; \f$Q_i = P_i / P^\prime_i\, i = 1, \ldots, 5\f$, to get linear; indenpendent (among themselves, but not independent of \f$\mathbf{x}\f$) quantities; \f$\mathbf{Q}^\prime\f$; 7. For each component \f$Q^\prime_i\f$ make a multidimensional fit,; using \f$\mathbf{x}^\prime\f$ as the variables, thus determining a set of; coefficients \f$\mathbf{c}_i\f$. To process data, using this parameterisation, do; 1. Test wether the observation \f$\mathbf{x}\f$ within the domain of; the parameterization, using the result from the Principal Component; Analysis.; 2. Determine \f$\mathbf{P}^\prime\f$ as before.; 3. Determine \f$\mathbf{x}^\prime\f$ as before.; 4. Use the result of the fit to determine \f$\mathbf{Q}^\prime\f$.; 5. Transform back to \f$\mathbf{P}\f$ from \f$\mathbf{Q}^\prime\f$, using; the result from the Principal Component Analysis. ## Testing the parameterization; The class also provides functionality for testing the, over the; training sample, found parameterization (TMultiDimFit::Fit). This is done by passing; the class a test sample of \f$ M_t\f$ tuples of the form; \f$(\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\f$, where \f$\mathbf{x}_{t,j}\f$ are the independent; variables, \f$ D_{t,j}\f$ the known, dependent quantity, and \f$ E_{t,j}\f$ is; the sq",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:15854,Modifiability,parameteriz,parameterization,15854,"ximation, the values of \f$\mathbf{P}_j\f$. We call these values; \f$\mathbf{P}^\prime_j, j = 1, \ldots, M\f$.; 4. Determine from \f$\mathbf{x}\f$ a set of at least five relevant; coordinates \f$\mathbf{x}^\prime\f$, using contrains, *or; alternative:*; 5. Perform a Principal Component Analysis (using TPrincipal), and use; to get a linear transformation \f$\mathbf{x} \rightarrow \mathbf{x}^\prime\f$, so that; \f$\mathbf{x}^\prime\f$ are constrained and linear independent.; 6. Perform a Principal Component Analysis on; \f$Q_i = P_i / P^\prime_i\, i = 1, \ldots, 5\f$, to get linear; indenpendent (among themselves, but not independent of \f$\mathbf{x}\f$) quantities; \f$\mathbf{Q}^\prime\f$; 7. For each component \f$Q^\prime_i\f$ make a multidimensional fit,; using \f$\mathbf{x}^\prime\f$ as the variables, thus determining a set of; coefficients \f$\mathbf{c}_i\f$. To process data, using this parameterisation, do; 1. Test wether the observation \f$\mathbf{x}\f$ within the domain of; the parameterization, using the result from the Principal Component; Analysis.; 2. Determine \f$\mathbf{P}^\prime\f$ as before.; 3. Determine \f$\mathbf{x}^\prime\f$ as before.; 4. Use the result of the fit to determine \f$\mathbf{Q}^\prime\f$.; 5. Transform back to \f$\mathbf{P}\f$ from \f$\mathbf{Q}^\prime\f$, using; the result from the Principal Component Analysis. ## Testing the parameterization; The class also provides functionality for testing the, over the; training sample, found parameterization (TMultiDimFit::Fit). This is done by passing; the class a test sample of \f$ M_t\f$ tuples of the form; \f$(\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\f$, where \f$\mathbf{x}_{t,j}\f$ are the independent; variables, \f$ D_{t,j}\f$ the known, dependent quantity, and \f$ E_{t,j}\f$ is; the square error in \f$ D_{t,j}\f$ (TMultiDimFit::AddTestRow). The parameterization is then evaluated at every \f$\mathbf{x}_t\f$ in the; test sample, and; \f[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mat",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:16236,Modifiability,parameteriz,parameterization,16236,"strained and linear independent.; 6. Perform a Principal Component Analysis on; \f$Q_i = P_i / P^\prime_i\, i = 1, \ldots, 5\f$, to get linear; indenpendent (among themselves, but not independent of \f$\mathbf{x}\f$) quantities; \f$\mathbf{Q}^\prime\f$; 7. For each component \f$Q^\prime_i\f$ make a multidimensional fit,; using \f$\mathbf{x}^\prime\f$ as the variables, thus determining a set of; coefficients \f$\mathbf{c}_i\f$. To process data, using this parameterisation, do; 1. Test wether the observation \f$\mathbf{x}\f$ within the domain of; the parameterization, using the result from the Principal Component; Analysis.; 2. Determine \f$\mathbf{P}^\prime\f$ as before.; 3. Determine \f$\mathbf{x}^\prime\f$ as before.; 4. Use the result of the fit to determine \f$\mathbf{Q}^\prime\f$.; 5. Transform back to \f$\mathbf{P}\f$ from \f$\mathbf{Q}^\prime\f$, using; the result from the Principal Component Analysis. ## Testing the parameterization; The class also provides functionality for testing the, over the; training sample, found parameterization (TMultiDimFit::Fit). This is done by passing; the class a test sample of \f$ M_t\f$ tuples of the form; \f$(\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\f$, where \f$\mathbf{x}_{t,j}\f$ are the independent; variables, \f$ D_{t,j}\f$ the known, dependent quantity, and \f$ E_{t,j}\f$ is; the square error in \f$ D_{t,j}\f$ (TMultiDimFit::AddTestRow). The parameterization is then evaluated at every \f$\mathbf{x}_t\f$ in the; test sample, and; \f[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \f]; is evaluated. The relative error over the test sample; \f[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \f]; should not be to low or high compared to \f$ R\f$ from the training; sample. Also, multiple correlation coefficient from both samples should; be fairly close, otherwise one of the samples is not representative of; the problem. A large difference in the reduced \f$ \chi^2\f$ over the two; samples in",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:16342,Modifiability,parameteriz,parameterization,16342,"strained and linear independent.; 6. Perform a Principal Component Analysis on; \f$Q_i = P_i / P^\prime_i\, i = 1, \ldots, 5\f$, to get linear; indenpendent (among themselves, but not independent of \f$\mathbf{x}\f$) quantities; \f$\mathbf{Q}^\prime\f$; 7. For each component \f$Q^\prime_i\f$ make a multidimensional fit,; using \f$\mathbf{x}^\prime\f$ as the variables, thus determining a set of; coefficients \f$\mathbf{c}_i\f$. To process data, using this parameterisation, do; 1. Test wether the observation \f$\mathbf{x}\f$ within the domain of; the parameterization, using the result from the Principal Component; Analysis.; 2. Determine \f$\mathbf{P}^\prime\f$ as before.; 3. Determine \f$\mathbf{x}^\prime\f$ as before.; 4. Use the result of the fit to determine \f$\mathbf{Q}^\prime\f$.; 5. Transform back to \f$\mathbf{P}\f$ from \f$\mathbf{Q}^\prime\f$, using; the result from the Principal Component Analysis. ## Testing the parameterization; The class also provides functionality for testing the, over the; training sample, found parameterization (TMultiDimFit::Fit). This is done by passing; the class a test sample of \f$ M_t\f$ tuples of the form; \f$(\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\f$, where \f$\mathbf{x}_{t,j}\f$ are the independent; variables, \f$ D_{t,j}\f$ the known, dependent quantity, and \f$ E_{t,j}\f$ is; the square error in \f$ D_{t,j}\f$ (TMultiDimFit::AddTestRow). The parameterization is then evaluated at every \f$\mathbf{x}_t\f$ in the; test sample, and; \f[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \f]; is evaluated. The relative error over the test sample; \f[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \f]; should not be to low or high compared to \f$ R\f$ from the training; sample. Also, multiple correlation coefficient from both samples should; be fairly close, otherwise one of the samples is not representative of; the problem. A large difference in the reduced \f$ \chi^2\f$ over the two; samples in",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:16556,Modifiability,variab,variables,16556,"{Q}^\prime\f$; 7. For each component \f$Q^\prime_i\f$ make a multidimensional fit,; using \f$\mathbf{x}^\prime\f$ as the variables, thus determining a set of; coefficients \f$\mathbf{c}_i\f$. To process data, using this parameterisation, do; 1. Test wether the observation \f$\mathbf{x}\f$ within the domain of; the parameterization, using the result from the Principal Component; Analysis.; 2. Determine \f$\mathbf{P}^\prime\f$ as before.; 3. Determine \f$\mathbf{x}^\prime\f$ as before.; 4. Use the result of the fit to determine \f$\mathbf{Q}^\prime\f$.; 5. Transform back to \f$\mathbf{P}\f$ from \f$\mathbf{Q}^\prime\f$, using; the result from the Principal Component Analysis. ## Testing the parameterization; The class also provides functionality for testing the, over the; training sample, found parameterization (TMultiDimFit::Fit). This is done by passing; the class a test sample of \f$ M_t\f$ tuples of the form; \f$(\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\f$, where \f$\mathbf{x}_{t,j}\f$ are the independent; variables, \f$ D_{t,j}\f$ the known, dependent quantity, and \f$ E_{t,j}\f$ is; the square error in \f$ D_{t,j}\f$ (TMultiDimFit::AddTestRow). The parameterization is then evaluated at every \f$\mathbf{x}_t\f$ in the; test sample, and; \f[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \f]; is evaluated. The relative error over the test sample; \f[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \f]; should not be to low or high compared to \f$ R\f$ from the training; sample. Also, multiple correlation coefficient from both samples should; be fairly close, otherwise one of the samples is not representative of; the problem. A large difference in the reduced \f$ \chi^2\f$ over the two; samples indicate an over fit, and the maximum number of terms in the; parameterisation should be reduced. It's possible to use [4] to further improve the fit, using the test sample. Christian Holm. ## Bibliography; - <a name=""bevington""></a> Philip ",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:16703,Modifiability,parameteriz,parameterization,16703,"bservation \f$\mathbf{x}\f$ within the domain of; the parameterization, using the result from the Principal Component; Analysis.; 2. Determine \f$\mathbf{P}^\prime\f$ as before.; 3. Determine \f$\mathbf{x}^\prime\f$ as before.; 4. Use the result of the fit to determine \f$\mathbf{Q}^\prime\f$.; 5. Transform back to \f$\mathbf{P}\f$ from \f$\mathbf{Q}^\prime\f$, using; the result from the Principal Component Analysis. ## Testing the parameterization; The class also provides functionality for testing the, over the; training sample, found parameterization (TMultiDimFit::Fit). This is done by passing; the class a test sample of \f$ M_t\f$ tuples of the form; \f$(\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\f$, where \f$\mathbf{x}_{t,j}\f$ are the independent; variables, \f$ D_{t,j}\f$ the known, dependent quantity, and \f$ E_{t,j}\f$ is; the square error in \f$ D_{t,j}\f$ (TMultiDimFit::AddTestRow). The parameterization is then evaluated at every \f$\mathbf{x}_t\f$ in the; test sample, and; \f[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \f]; is evaluated. The relative error over the test sample; \f[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \f]; should not be to low or high compared to \f$ R\f$ from the training; sample. Also, multiple correlation coefficient from both samples should; be fairly close, otherwise one of the samples is not representative of; the problem. A large difference in the reduced \f$ \chi^2\f$ over the two; samples indicate an over fit, and the maximum number of terms in the; parameterisation should be reduced. It's possible to use [4] to further improve the fit, using the test sample. Christian Holm. ## Bibliography; - <a name=""bevington""></a> Philip R. Bevington and D. Keith Robinson. *Data Reduction and Error Analysis for; the Physical Sciences*. McGraw-Hill, 2 edition, 1992.; - <a name=""mudifi""></a> R. Brun et al. *Long writeup DD/75-23*, CERN, 1980.; - Gene H. Golub and Charles F. van Loan. *Matrix Compu",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:17989,Modifiability,parameteriz,parameterization,17989,"$ are the independent; variables, \f$ D_{t,j}\f$ the known, dependent quantity, and \f$ E_{t,j}\f$ is; the square error in \f$ D_{t,j}\f$ (TMultiDimFit::AddTestRow). The parameterization is then evaluated at every \f$\mathbf{x}_t\f$ in the; test sample, and; \f[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \f]; is evaluated. The relative error over the test sample; \f[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \f]; should not be to low or high compared to \f$ R\f$ from the training; sample. Also, multiple correlation coefficient from both samples should; be fairly close, otherwise one of the samples is not representative of; the problem. A large difference in the reduced \f$ \chi^2\f$ over the two; samples indicate an over fit, and the maximum number of terms in the; parameterisation should be reduced. It's possible to use [4] to further improve the fit, using the test sample. Christian Holm. ## Bibliography; - <a name=""bevington""></a> Philip R. Bevington and D. Keith Robinson. *Data Reduction and Error Analysis for; the Physical Sciences*. McGraw-Hill, 2 edition, 1992.; - <a name=""mudifi""></a> R. Brun et al. *Long writeup DD/75-23*, CERN, 1980.; - Gene H. Golub and Charles F. van Loan. *Matrix Computations*.; John Hopkins University Press, Baltimore, 3 edition, 1996.; - <a name=""minuit""></a>F. James. *Minuit*. Long writeup D506, CERN, 1998.; - <a name=""wind72""></a>H. Wind. *Function parameterization*. Proceedings of the 1972 CERN Computing and Data Processing; School, volume 72-21 of Yellow report. CERN, 1972.; - <a name=""wind81""></a>H. Wind. 1. principal component analysis, 2. pattern recognition for track; finding, 3. interpolation and functional representation. Yellow report EP/81-12, CERN, 1981. [1]: classTMultiDimFit.html#bevington; [2]: classTMultiDimFit.html#mudifi; [4]: classTMultiDimFit.html#minuit; [5]: classTMultiDimFit.html#wind72; [6]: classTMultiDimFit.html#wind81; [9]: classTMultiDimFit.html#eq:dS2; */",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:4603,Performance,perform,perform,4603,"nctional expression by specifying; the powers of each variable in \f$ L\f$ specified functions \f$ F_1, \ldots,F_L\f$ (TMultiDimFit::SetPowers).; In that case, only the coefficients \f$ c_l\f$ is calculated by the class. ## Limiting the Number of Terms; As always when dealing with fits, there's a real chance of *over fitting*. As is well-known, it's; always possible to fit an \f$ N-1\f$ polynomial in \f$ x\f$ to \f$ N\f$ points \f$ (x,y)\f$ with; \f$\chi^2 = 0\f$, but the polynomial is not likely to fit new data at all [1].; Therefore, the user is asked to provide an upper limit, \f$ L_{max}\f$ to the number of terms in; \f$ D_p\f$ (TMultiDimFit::SetMaxTerms). However, since there's an infinite number of \f$ F_l\f$ to choose from, the; user is asked to give the maximum power. \f$ P_{max,i}\f$, of each variable; \f$ x_i\f$ to be considered in the minimization of \f$ S\f$ (TMultiDimFit::SetMaxPowers). One way of obtaining values for the maximum power in variable \f$ i\f$, is; to perform a regular fit to the dependent quantity \f$ D\f$, using a; polynomial only in \f$ x_i\f$. The maximum power is \f$ P_{max,i}\f$ is then the; power that does not significantly improve the one-dimensional; least-square fit over \f$ x_i\f$ to \f$ D\f$ [5]. There are still a huge amount of possible choices for \f$ F_l\f$; in fact; there are \f$\prod_{i=1}^{N} (P_{max,i} + 1)\f$ possible; choices. Obviously we need to limit this. To this end, the user is; asked to set a *power control limit*, \f$ Q\f$ (TMultiDimFit::SetPowerLimit), and a function; \f$ F_l\f$ is only accepted if; \f[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \f]; where \f$ P_{li}\f$ is the leading power of variable \f$ x_i\f$ in function \f$ F_l\f$ (TMultiDimFit::MakeCandidates).; So the number of functions increase with \f$ Q\f$ (1, 2 is fine, 5 is way out). ## Gram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression,; only those functions that significantly reduce \f$ S\f$ ",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:8932,Performance,perform,performed,8932,"ares of residuals when taking \f$ j\f$ functions; into account. Then; \f[; S_l = \left[\mathbf{D} - \sum^l_{k=1} a_k\mathbf{w}_k\right]^2; = \mathbf{D}^2 - 2\mathbf{D} \sum^l_{k=1} a_k\mathbf{w}_k; + \sum^l_{k=1} a_k^2\mathbf{w}_k^2; \f]; Using [9], we see that; \f{eqnarray*}{; S_l &=& \mathbf{D}^2 - 2 \sum^l_{k=1} a_k^2\mathbf{w}_k^2 +; \sum^j_{k=1} a_k^2\mathbf{w}_k^2\nonumber\\; &=& \mathbf{D}^2 - \sum^l_{k=1} a_k^2\mathbf{w}_k^2\nonumber\\; &=& \mathbf{D}^2 - \sum^l_{k=1} \frac{\left(\mathbf D\bullet \mathbf; w_k\right)}{\mathbf w_k^2}; \f}; So for each new function \f$ F_l\f$ included in the model, we get a; reduction of the sum of squares of residuals of \f$a_l^2\mathbf{w}_l^2\f$,; where \f$\mathbf{w}_l\f$ is given by [4] and \f$ a_l\f$ by [9]. Thus, using; the Gram-Schmidt orthogonalisation, we; can decide if we want to include this function in the final model,; *before* the matrix inversion. ## Function Selection Based on Residual; Supposing that \f$ L-1\f$ steps of the procedure have been performed, the; problem now is to consider the \f$L^{\mbox{th}}\f$ function. The sum of squares of residuals can be written as; \f[; S_L = \textbf{D}^T\bullet\textbf{D} -; \sum^L_{l=1}a^2_l\left(\textbf{w}_l^T\bullet\textbf{w}_l\right); \f]; where the relation [9] have been taken into account. The; contribution of the \f$L^{\mbox{th}}\f$ function to the reduction of S, is; given by; \f[; \Delta S_L = a^2_L\left(\textbf{w}_L^T\bullet\textbf{w}_L\right); \f]; Two test are now applied to decide whether this \f$L^{\mbox{th}}\f$; function is to be included in the final expression, or not. ## Test 1; Denoting by \f$ H_{L-1}\f$ the subspace spanned by \f$\textbf{w}_1,\ldots,\textbf{w}_{L-1}\f$; the function \f$\textbf{w}_L\f$ is by construction (see 4) the projection of the function; \f$ F_L\f$ onto the direction perpendicular to \f$ H_{L-1}\f$. Now, if the; length of \f$\textbf{w}_L\f$ (given by \f$\textbf{w}_L\bullet\textbf{w}_L\f$); is very small compared to the length of \f$\t",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:11254,Performance,perform,performing,11254,"$ \\phi \\f$ between \\f$\\textbf{w}_L\\f$ and \\f$\\textbf{D}\\f$"". ## Test 2; Let \f$\textbf{D}\f$ be the data vector to be fitted. As illustrated in; figure 1, the \f$L^{\mbox{th}}\f$ function \f$\textbf{w}_L\f$; will contribute significantly to the reduction of \f$ S\f$, if the angle; \f$\phi^\prime\f$ between \f$\textbf{w}_L\f$ and \f$\textbf{D}\f$ is smaller than; an upper limit \f$ \phi \f$, defined by the user (MultiDimFit::SetMaxAngle). However, the method automatically readjusts the value of this angle; while fitting is in progress, in order to make the selection criteria; less and less difficult to be fulfilled. The result is that the; functions contributing most to the reduction of \f$ S\f$ are chosen first; (TMultiDimFit::TestFunction). In case \f$ \phi \f$ isn't defined, an alternative method of; performing this second test is used: The \f$L^{\mbox{th}}\f$; function \f$\textbf{f}_L\f$ is accepted if (refer also to equation (13)); \f[; \Delta S_L > \frac{S_{L-1}}{L_{max}-L}; \f]; where \f$ S_{L-1}\f$ is the sum of the \f$ L-1\f$ first residuals from the; \f$ L-1\f$ functions previously accepted; and \f$ L_{max}\f$ is the total number; of functions allowed in the final expression of the fit (defined by; user). From this we see, that by restricting \f$ L_{max}\f$ -- the number of; terms in the final model -- the fit is more difficult to perform,; since the above selection criteria is more limiting. The more coefficients we evaluate, the more the sum of squares of; residuals \f$ S\f$ will be reduced. We can evaluate \f$ S\f$ before inverting; \f$\mathsf{B}\f$ as shown below. ## Coefficients and Coefficient Errors; Having found a parameterization, that is the \f$ F_l\f$'s and \f$ L\f$, that; minimizes \f$ S\f$, we still need to determine the coefficients; \f$ c_l\f$. However, it's a feature of how we choose the significant; functions, that the evaluation of the \f$ c_l\f$'s becomes trivial [5]. To derive; \f$\mathbf{c}\f$, we first note that; equation (4) c",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:11802,Performance,perform,perform,11802,"nd \f$\textbf{D}\f$ is smaller than; an upper limit \f$ \phi \f$, defined by the user (MultiDimFit::SetMaxAngle). However, the method automatically readjusts the value of this angle; while fitting is in progress, in order to make the selection criteria; less and less difficult to be fulfilled. The result is that the; functions contributing most to the reduction of \f$ S\f$ are chosen first; (TMultiDimFit::TestFunction). In case \f$ \phi \f$ isn't defined, an alternative method of; performing this second test is used: The \f$L^{\mbox{th}}\f$; function \f$\textbf{f}_L\f$ is accepted if (refer also to equation (13)); \f[; \Delta S_L > \frac{S_{L-1}}{L_{max}-L}; \f]; where \f$ S_{L-1}\f$ is the sum of the \f$ L-1\f$ first residuals from the; \f$ L-1\f$ functions previously accepted; and \f$ L_{max}\f$ is the total number; of functions allowed in the final expression of the fit (defined by; user). From this we see, that by restricting \f$ L_{max}\f$ -- the number of; terms in the final model -- the fit is more difficult to perform,; since the above selection criteria is more limiting. The more coefficients we evaluate, the more the sum of squares of; residuals \f$ S\f$ will be reduced. We can evaluate \f$ S\f$ before inverting; \f$\mathsf{B}\f$ as shown below. ## Coefficients and Coefficient Errors; Having found a parameterization, that is the \f$ F_l\f$'s and \f$ L\f$, that; minimizes \f$ S\f$, we still need to determine the coefficients; \f$ c_l\f$. However, it's a feature of how we choose the significant; functions, that the evaluation of the \f$ c_l\f$'s becomes trivial [5]. To derive; \f$\mathbf{c}\f$, we first note that; equation (4) can be written as; \f[; \mathsf{F} = \mathsf{W}\mathsf{B}; \f]; where; \f{eqnarray*}{; b_{ij} = \frac{\mathbf{f}_j \bullet \mathbf{w}_i}{\mathbf{w}_i^2}; & \mbox{if} & i < j\\; 1 & \mbox{if} & i = j\\; 0 & \mbox{if} & i > j; \f}; Consequently, \f$\mathsf{B}\f$ is an upper triangle matrix, which can be; readily inverted. So we now evalua",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:13985,Performance,perform,perform,13985,"B}^{-1}\mathbf{a})\,.\f$. The original model \f$\mathsf{F}\mathbf{c}\f$ is therefore identical with; this if; \f[; \mathbf{c} = \left(\mathsf{B}^{-1}\mathbf{a}\right) =; \left[\mathbf{a}^T\left(\mathsf{B}^{-1}\right)^T\right]^T\,.; \f]; The reason we use \f$\left(\mathsf{B}^{-1}\right)^T\f$ rather then; \f$\mathsf{B}^{-1}\f$ is to save storage, since \f$\left(\mathsf{B}^{-1}\right)^T\f$; can be stored in the same matrix as \f$\mathsf{B}\f$ (TMultiDimFit::MakeCoefficients).; The errors in the coefficients is calculated by inverting the curvature matrix; of the non-orthogonal functions \f$ f_{lj}\f$ [1] (TMultiDimFit::MakeCoefficientErrors). ## Considerations; It's important to realize that the training sample should be; representative of the problem at hand, in particular along the borders; of the region of interest. This is because the algorithm presented; here, is a *interpolation*, rather then a *extrapolation* [5]. Also, the independent variables \f$ x_{i}\f$ need to be linear; independent, since the procedure will perform poorly if they are not; [5]. One can find an linear transformation from ones; original variables \f$ \xi_{i}\f$ to a set of linear independent variables; \f$ x_{i}\f$, using a *Principal Components Analysis* (see TPrincipal), and; then use the transformed variable as input to this class [5] [6]. H. Wind also outlines a method for parameterising a multidimensional; dependence over a multidimensional set of variables. An example; of the method from [5], is a follows (please refer to; [5] for a full discussion):. 1. Define \f$\mathbf{P} = (P_1, \ldots, P_5)\f$ are the 5 dependent; quantities that define a track.; 2. Compute, for \f$ M\f$ different values of \f$\mathbf{P}\f$, the tracks; through the magnetic field, and determine the corresponding; \f$\mathbf{x} = (x_1, \ldots, x_N)\f$.; 3. Use the simulated observations to determine, with a simple; approximation, the values of \f$\mathbf{P}_j\f$. We call these values; \f$\mathbf{P}^\prime_j, j = 1, ",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:15112,Performance,Perform,Perform,15112,"d; then use the transformed variable as input to this class [5] [6]. H. Wind also outlines a method for parameterising a multidimensional; dependence over a multidimensional set of variables. An example; of the method from [5], is a follows (please refer to; [5] for a full discussion):. 1. Define \f$\mathbf{P} = (P_1, \ldots, P_5)\f$ are the 5 dependent; quantities that define a track.; 2. Compute, for \f$ M\f$ different values of \f$\mathbf{P}\f$, the tracks; through the magnetic field, and determine the corresponding; \f$\mathbf{x} = (x_1, \ldots, x_N)\f$.; 3. Use the simulated observations to determine, with a simple; approximation, the values of \f$\mathbf{P}_j\f$. We call these values; \f$\mathbf{P}^\prime_j, j = 1, \ldots, M\f$.; 4. Determine from \f$\mathbf{x}\f$ a set of at least five relevant; coordinates \f$\mathbf{x}^\prime\f$, using contrains, *or; alternative:*; 5. Perform a Principal Component Analysis (using TPrincipal), and use; to get a linear transformation \f$\mathbf{x} \rightarrow \mathbf{x}^\prime\f$, so that; \f$\mathbf{x}^\prime\f$ are constrained and linear independent.; 6. Perform a Principal Component Analysis on; \f$Q_i = P_i / P^\prime_i\, i = 1, \ldots, 5\f$, to get linear; indenpendent (among themselves, but not independent of \f$\mathbf{x}\f$) quantities; \f$\mathbf{Q}^\prime\f$; 7. For each component \f$Q^\prime_i\f$ make a multidimensional fit,; using \f$\mathbf{x}^\prime\f$ as the variables, thus determining a set of; coefficients \f$\mathbf{c}_i\f$. To process data, using this parameterisation, do; 1. Test wether the observation \f$\mathbf{x}\f$ within the domain of; the parameterization, using the result from the Principal Component; Analysis.; 2. Determine \f$\mathbf{P}^\prime\f$ as before.; 3. Determine \f$\mathbf{x}^\prime\f$ as before.; 4. Use the result of the fit to determine \f$\mathbf{Q}^\prime\f$.; 5. Transform back to \f$\mathbf{P}\f$ from \f$\mathbf{Q}^\prime\f$, using; the result from the Principal Component Analysis. ",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:15336,Performance,Perform,Perform,15336,"5], is a follows (please refer to; [5] for a full discussion):. 1. Define \f$\mathbf{P} = (P_1, \ldots, P_5)\f$ are the 5 dependent; quantities that define a track.; 2. Compute, for \f$ M\f$ different values of \f$\mathbf{P}\f$, the tracks; through the magnetic field, and determine the corresponding; \f$\mathbf{x} = (x_1, \ldots, x_N)\f$.; 3. Use the simulated observations to determine, with a simple; approximation, the values of \f$\mathbf{P}_j\f$. We call these values; \f$\mathbf{P}^\prime_j, j = 1, \ldots, M\f$.; 4. Determine from \f$\mathbf{x}\f$ a set of at least five relevant; coordinates \f$\mathbf{x}^\prime\f$, using contrains, *or; alternative:*; 5. Perform a Principal Component Analysis (using TPrincipal), and use; to get a linear transformation \f$\mathbf{x} \rightarrow \mathbf{x}^\prime\f$, so that; \f$\mathbf{x}^\prime\f$ are constrained and linear independent.; 6. Perform a Principal Component Analysis on; \f$Q_i = P_i / P^\prime_i\, i = 1, \ldots, 5\f$, to get linear; indenpendent (among themselves, but not independent of \f$\mathbf{x}\f$) quantities; \f$\mathbf{Q}^\prime\f$; 7. For each component \f$Q^\prime_i\f$ make a multidimensional fit,; using \f$\mathbf{x}^\prime\f$ as the variables, thus determining a set of; coefficients \f$\mathbf{c}_i\f$. To process data, using this parameterisation, do; 1. Test wether the observation \f$\mathbf{x}\f$ within the domain of; the parameterization, using the result from the Principal Component; Analysis.; 2. Determine \f$\mathbf{P}^\prime\f$ as before.; 3. Determine \f$\mathbf{x}^\prime\f$ as before.; 4. Use the result of the fit to determine \f$\mathbf{Q}^\prime\f$.; 5. Transform back to \f$\mathbf{P}\f$ from \f$\mathbf{Q}^\prime\f$, using; the result from the Principal Component Analysis. ## Testing the parameterization; The class also provides functionality for testing the, over the; training sample, found parameterization (TMultiDimFit::Fit). This is done by passing; the class a test sample of \f$ M_t\f$ tu",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:9398,Testability,test,test,9398,"athbf{D}^2 - \sum^l_{k=1} \frac{\left(\mathbf D\bullet \mathbf; w_k\right)}{\mathbf w_k^2}; \f}; So for each new function \f$ F_l\f$ included in the model, we get a; reduction of the sum of squares of residuals of \f$a_l^2\mathbf{w}_l^2\f$,; where \f$\mathbf{w}_l\f$ is given by [4] and \f$ a_l\f$ by [9]. Thus, using; the Gram-Schmidt orthogonalisation, we; can decide if we want to include this function in the final model,; *before* the matrix inversion. ## Function Selection Based on Residual; Supposing that \f$ L-1\f$ steps of the procedure have been performed, the; problem now is to consider the \f$L^{\mbox{th}}\f$ function. The sum of squares of residuals can be written as; \f[; S_L = \textbf{D}^T\bullet\textbf{D} -; \sum^L_{l=1}a^2_l\left(\textbf{w}_l^T\bullet\textbf{w}_l\right); \f]; where the relation [9] have been taken into account. The; contribution of the \f$L^{\mbox{th}}\f$ function to the reduction of S, is; given by; \f[; \Delta S_L = a^2_L\left(\textbf{w}_L^T\bullet\textbf{w}_L\right); \f]; Two test are now applied to decide whether this \f$L^{\mbox{th}}\f$; function is to be included in the final expression, or not. ## Test 1; Denoting by \f$ H_{L-1}\f$ the subspace spanned by \f$\textbf{w}_1,\ldots,\textbf{w}_{L-1}\f$; the function \f$\textbf{w}_L\f$ is by construction (see 4) the projection of the function; \f$ F_L\f$ onto the direction perpendicular to \f$ H_{L-1}\f$. Now, if the; length of \f$\textbf{w}_L\f$ (given by \f$\textbf{w}_L\bullet\textbf{w}_L\f$); is very small compared to the length of \f$\textbf{f}_L\f$ this new; function can not contribute much to the reduction of the sum of; squares of residuals. The test consists then in calculating the angle; \f$ \theta \f$ between the two vectors \f$\textbf{w}_L\f$ \f$ \textbf {f}_L\f$; (see also figure 1) and requiring that it's; *greater* then a threshold value which the user must set (TMultiDimFit::SetMinAngle). \image html multidimfit_img86.gif ""Figure 1: (a) angle \\f$\\theta\\f$ between \\f$",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:9526,Testability,Test,Test,9526," [4] and \f$ a_l\f$ by [9]. Thus, using; the Gram-Schmidt orthogonalisation, we; can decide if we want to include this function in the final model,; *before* the matrix inversion. ## Function Selection Based on Residual; Supposing that \f$ L-1\f$ steps of the procedure have been performed, the; problem now is to consider the \f$L^{\mbox{th}}\f$ function. The sum of squares of residuals can be written as; \f[; S_L = \textbf{D}^T\bullet\textbf{D} -; \sum^L_{l=1}a^2_l\left(\textbf{w}_l^T\bullet\textbf{w}_l\right); \f]; where the relation [9] have been taken into account. The; contribution of the \f$L^{\mbox{th}}\f$ function to the reduction of S, is; given by; \f[; \Delta S_L = a^2_L\left(\textbf{w}_L^T\bullet\textbf{w}_L\right); \f]; Two test are now applied to decide whether this \f$L^{\mbox{th}}\f$; function is to be included in the final expression, or not. ## Test 1; Denoting by \f$ H_{L-1}\f$ the subspace spanned by \f$\textbf{w}_1,\ldots,\textbf{w}_{L-1}\f$; the function \f$\textbf{w}_L\f$ is by construction (see 4) the projection of the function; \f$ F_L\f$ onto the direction perpendicular to \f$ H_{L-1}\f$. Now, if the; length of \f$\textbf{w}_L\f$ (given by \f$\textbf{w}_L\bullet\textbf{w}_L\f$); is very small compared to the length of \f$\textbf{f}_L\f$ this new; function can not contribute much to the reduction of the sum of; squares of residuals. The test consists then in calculating the angle; \f$ \theta \f$ between the two vectors \f$\textbf{w}_L\f$ \f$ \textbf {f}_L\f$; (see also figure 1) and requiring that it's; *greater* then a threshold value which the user must set (TMultiDimFit::SetMinAngle). \image html multidimfit_img86.gif ""Figure 1: (a) angle \\f$\\theta\\f$ between \\f$\\textbf{w}_l\\f$ and \\f$\\textbf{f}_L\\f$, (b) angle \\f$ \\phi \\f$ between \\f$\\textbf{w}_L\\f$ and \\f$\\textbf{D}\\f$"". ## Test 2; Let \f$\textbf{D}\f$ be the data vector to be fitted. As illustrated in; figure 1, the \f$L^{\mbox{th}}\f$ function \f$\textbf{w}_L\f$; will",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:10035,Testability,test,test,10035,"\right); \f]; where the relation [9] have been taken into account. The; contribution of the \f$L^{\mbox{th}}\f$ function to the reduction of S, is; given by; \f[; \Delta S_L = a^2_L\left(\textbf{w}_L^T\bullet\textbf{w}_L\right); \f]; Two test are now applied to decide whether this \f$L^{\mbox{th}}\f$; function is to be included in the final expression, or not. ## Test 1; Denoting by \f$ H_{L-1}\f$ the subspace spanned by \f$\textbf{w}_1,\ldots,\textbf{w}_{L-1}\f$; the function \f$\textbf{w}_L\f$ is by construction (see 4) the projection of the function; \f$ F_L\f$ onto the direction perpendicular to \f$ H_{L-1}\f$. Now, if the; length of \f$\textbf{w}_L\f$ (given by \f$\textbf{w}_L\bullet\textbf{w}_L\f$); is very small compared to the length of \f$\textbf{f}_L\f$ this new; function can not contribute much to the reduction of the sum of; squares of residuals. The test consists then in calculating the angle; \f$ \theta \f$ between the two vectors \f$\textbf{w}_L\f$ \f$ \textbf {f}_L\f$; (see also figure 1) and requiring that it's; *greater* then a threshold value which the user must set (TMultiDimFit::SetMinAngle). \image html multidimfit_img86.gif ""Figure 1: (a) angle \\f$\\theta\\f$ between \\f$\\textbf{w}_l\\f$ and \\f$\\textbf{f}_L\\f$, (b) angle \\f$ \\phi \\f$ between \\f$\\textbf{w}_L\\f$ and \\f$\\textbf{D}\\f$"". ## Test 2; Let \f$\textbf{D}\f$ be the data vector to be fitted. As illustrated in; figure 1, the \f$L^{\mbox{th}}\f$ function \f$\textbf{w}_L\f$; will contribute significantly to the reduction of \f$ S\f$, if the angle; \f$\phi^\prime\f$ between \f$\textbf{w}_L\f$ and \f$\textbf{D}\f$ is smaller than; an upper limit \f$ \phi \f$, defined by the user (MultiDimFit::SetMaxAngle). However, the method automatically readjusts the value of this angle; while fitting is in progress, in order to make the selection criteria; less and less difficult to be fulfilled. The result is that the; functions contributing most to the reduction of \f$ S\f$ are chosen first",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:10504,Testability,Test,Test,10504,"; Denoting by \f$ H_{L-1}\f$ the subspace spanned by \f$\textbf{w}_1,\ldots,\textbf{w}_{L-1}\f$; the function \f$\textbf{w}_L\f$ is by construction (see 4) the projection of the function; \f$ F_L\f$ onto the direction perpendicular to \f$ H_{L-1}\f$. Now, if the; length of \f$\textbf{w}_L\f$ (given by \f$\textbf{w}_L\bullet\textbf{w}_L\f$); is very small compared to the length of \f$\textbf{f}_L\f$ this new; function can not contribute much to the reduction of the sum of; squares of residuals. The test consists then in calculating the angle; \f$ \theta \f$ between the two vectors \f$\textbf{w}_L\f$ \f$ \textbf {f}_L\f$; (see also figure 1) and requiring that it's; *greater* then a threshold value which the user must set (TMultiDimFit::SetMinAngle). \image html multidimfit_img86.gif ""Figure 1: (a) angle \\f$\\theta\\f$ between \\f$\\textbf{w}_l\\f$ and \\f$\\textbf{f}_L\\f$, (b) angle \\f$ \\phi \\f$ between \\f$\\textbf{w}_L\\f$ and \\f$\\textbf{D}\\f$"". ## Test 2; Let \f$\textbf{D}\f$ be the data vector to be fitted. As illustrated in; figure 1, the \f$L^{\mbox{th}}\f$ function \f$\textbf{w}_L\f$; will contribute significantly to the reduction of \f$ S\f$, if the angle; \f$\phi^\prime\f$ between \f$\textbf{w}_L\f$ and \f$\textbf{D}\f$ is smaller than; an upper limit \f$ \phi \f$, defined by the user (MultiDimFit::SetMaxAngle). However, the method automatically readjusts the value of this angle; while fitting is in progress, in order to make the selection criteria; less and less difficult to be fulfilled. The result is that the; functions contributing most to the reduction of \f$ S\f$ are chosen first; (TMultiDimFit::TestFunction). In case \f$ \phi \f$ isn't defined, an alternative method of; performing this second test is used: The \f$L^{\mbox{th}}\f$; function \f$\textbf{f}_L\f$ is accepted if (refer also to equation (13)); \f[; \Delta S_L > \frac{S_{L-1}}{L_{max}-L}; \f]; where \f$ S_{L-1}\f$ is the sum of the \f$ L-1\f$ first residuals from the; \f$ L-1\f$ functi",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:11177,Testability,Test,TestFunction,11177,"tbf{w}_L\f$ \f$ \textbf {f}_L\f$; (see also figure 1) and requiring that it's; *greater* then a threshold value which the user must set (TMultiDimFit::SetMinAngle). \image html multidimfit_img86.gif ""Figure 1: (a) angle \\f$\\theta\\f$ between \\f$\\textbf{w}_l\\f$ and \\f$\\textbf{f}_L\\f$, (b) angle \\f$ \\phi \\f$ between \\f$\\textbf{w}_L\\f$ and \\f$\\textbf{D}\\f$"". ## Test 2; Let \f$\textbf{D}\f$ be the data vector to be fitted. As illustrated in; figure 1, the \f$L^{\mbox{th}}\f$ function \f$\textbf{w}_L\f$; will contribute significantly to the reduction of \f$ S\f$, if the angle; \f$\phi^\prime\f$ between \f$\textbf{w}_L\f$ and \f$\textbf{D}\f$ is smaller than; an upper limit \f$ \phi \f$, defined by the user (MultiDimFit::SetMaxAngle). However, the method automatically readjusts the value of this angle; while fitting is in progress, in order to make the selection criteria; less and less difficult to be fulfilled. The result is that the; functions contributing most to the reduction of \f$ S\f$ are chosen first; (TMultiDimFit::TestFunction). In case \f$ \phi \f$ isn't defined, an alternative method of; performing this second test is used: The \f$L^{\mbox{th}}\f$; function \f$\textbf{f}_L\f$ is accepted if (refer also to equation (13)); \f[; \Delta S_L > \frac{S_{L-1}}{L_{max}-L}; \f]; where \f$ S_{L-1}\f$ is the sum of the \f$ L-1\f$ first residuals from the; \f$ L-1\f$ functions previously accepted; and \f$ L_{max}\f$ is the total number; of functions allowed in the final expression of the fit (defined by; user). From this we see, that by restricting \f$ L_{max}\f$ -- the number of; terms in the final model -- the fit is more difficult to perform,; since the above selection criteria is more limiting. The more coefficients we evaluate, the more the sum of squares of; residuals \f$ S\f$ will be reduced. We can evaluate \f$ S\f$ before inverting; \f$\mathsf{B}\f$ as shown below. ## Coefficients and Coefficient Errors; Having found a parameterization, that is th",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:11277,Testability,test,test,11277,"$ \\phi \\f$ between \\f$\\textbf{w}_L\\f$ and \\f$\\textbf{D}\\f$"". ## Test 2; Let \f$\textbf{D}\f$ be the data vector to be fitted. As illustrated in; figure 1, the \f$L^{\mbox{th}}\f$ function \f$\textbf{w}_L\f$; will contribute significantly to the reduction of \f$ S\f$, if the angle; \f$\phi^\prime\f$ between \f$\textbf{w}_L\f$ and \f$\textbf{D}\f$ is smaller than; an upper limit \f$ \phi \f$, defined by the user (MultiDimFit::SetMaxAngle). However, the method automatically readjusts the value of this angle; while fitting is in progress, in order to make the selection criteria; less and less difficult to be fulfilled. The result is that the; functions contributing most to the reduction of \f$ S\f$ are chosen first; (TMultiDimFit::TestFunction). In case \f$ \phi \f$ isn't defined, an alternative method of; performing this second test is used: The \f$L^{\mbox{th}}\f$; function \f$\textbf{f}_L\f$ is accepted if (refer also to equation (13)); \f[; \Delta S_L > \frac{S_{L-1}}{L_{max}-L}; \f]; where \f$ S_{L-1}\f$ is the sum of the \f$ L-1\f$ first residuals from the; \f$ L-1\f$ functions previously accepted; and \f$ L_{max}\f$ is the total number; of functions allowed in the final expression of the fit (defined by; user). From this we see, that by restricting \f$ L_{max}\f$ -- the number of; terms in the final model -- the fit is more difficult to perform,; since the above selection criteria is more limiting. The more coefficients we evaluate, the more the sum of squares of; residuals \f$ S\f$ will be reduced. We can evaluate \f$ S\f$ before inverting; \f$\mathsf{B}\f$ as shown below. ## Coefficients and Coefficient Errors; Having found a parameterization, that is the \f$ F_l\f$'s and \f$ L\f$, that; minimizes \f$ S\f$, we still need to determine the coefficients; \f$ c_l\f$. However, it's a feature of how we choose the significant; functions, that the evaluation of the \f$ c_l\f$'s becomes trivial [5]. To derive; \f$\mathbf{c}\f$, we first note that; equation (4) c",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:15783,Testability,Test,Test,15783,"ximation, the values of \f$\mathbf{P}_j\f$. We call these values; \f$\mathbf{P}^\prime_j, j = 1, \ldots, M\f$.; 4. Determine from \f$\mathbf{x}\f$ a set of at least five relevant; coordinates \f$\mathbf{x}^\prime\f$, using contrains, *or; alternative:*; 5. Perform a Principal Component Analysis (using TPrincipal), and use; to get a linear transformation \f$\mathbf{x} \rightarrow \mathbf{x}^\prime\f$, so that; \f$\mathbf{x}^\prime\f$ are constrained and linear independent.; 6. Perform a Principal Component Analysis on; \f$Q_i = P_i / P^\prime_i\, i = 1, \ldots, 5\f$, to get linear; indenpendent (among themselves, but not independent of \f$\mathbf{x}\f$) quantities; \f$\mathbf{Q}^\prime\f$; 7. For each component \f$Q^\prime_i\f$ make a multidimensional fit,; using \f$\mathbf{x}^\prime\f$ as the variables, thus determining a set of; coefficients \f$\mathbf{c}_i\f$. To process data, using this parameterisation, do; 1. Test wether the observation \f$\mathbf{x}\f$ within the domain of; the parameterization, using the result from the Principal Component; Analysis.; 2. Determine \f$\mathbf{P}^\prime\f$ as before.; 3. Determine \f$\mathbf{x}^\prime\f$ as before.; 4. Use the result of the fit to determine \f$\mathbf{Q}^\prime\f$.; 5. Transform back to \f$\mathbf{P}\f$ from \f$\mathbf{Q}^\prime\f$, using; the result from the Principal Component Analysis. ## Testing the parameterization; The class also provides functionality for testing the, over the; training sample, found parameterization (TMultiDimFit::Fit). This is done by passing; the class a test sample of \f$ M_t\f$ tuples of the form; \f$(\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\f$, where \f$\mathbf{x}_{t,j}\f$ are the independent; variables, \f$ D_{t,j}\f$ the known, dependent quantity, and \f$ E_{t,j}\f$ is; the square error in \f$ D_{t,j}\f$ (TMultiDimFit::AddTestRow). The parameterization is then evaluated at every \f$\mathbf{x}_t\f$ in the; test sample, and; \f[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mat",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:16224,Testability,Test,Testing,16224,"strained and linear independent.; 6. Perform a Principal Component Analysis on; \f$Q_i = P_i / P^\prime_i\, i = 1, \ldots, 5\f$, to get linear; indenpendent (among themselves, but not independent of \f$\mathbf{x}\f$) quantities; \f$\mathbf{Q}^\prime\f$; 7. For each component \f$Q^\prime_i\f$ make a multidimensional fit,; using \f$\mathbf{x}^\prime\f$ as the variables, thus determining a set of; coefficients \f$\mathbf{c}_i\f$. To process data, using this parameterisation, do; 1. Test wether the observation \f$\mathbf{x}\f$ within the domain of; the parameterization, using the result from the Principal Component; Analysis.; 2. Determine \f$\mathbf{P}^\prime\f$ as before.; 3. Determine \f$\mathbf{x}^\prime\f$ as before.; 4. Use the result of the fit to determine \f$\mathbf{Q}^\prime\f$.; 5. Transform back to \f$\mathbf{P}\f$ from \f$\mathbf{Q}^\prime\f$, using; the result from the Principal Component Analysis. ## Testing the parameterization; The class also provides functionality for testing the, over the; training sample, found parameterization (TMultiDimFit::Fit). This is done by passing; the class a test sample of \f$ M_t\f$ tuples of the form; \f$(\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\f$, where \f$\mathbf{x}_{t,j}\f$ are the independent; variables, \f$ D_{t,j}\f$ the known, dependent quantity, and \f$ E_{t,j}\f$ is; the square error in \f$ D_{t,j}\f$ (TMultiDimFit::AddTestRow). The parameterization is then evaluated at every \f$\mathbf{x}_t\f$ in the; test sample, and; \f[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \f]; is evaluated. The relative error over the test sample; \f[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \f]; should not be to low or high compared to \f$ R\f$ from the training; sample. Also, multiple correlation coefficient from both samples should; be fairly close, otherwise one of the samples is not representative of; the problem. A large difference in the reduced \f$ \chi^2\f$ over the two; samples in",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:16296,Testability,test,testing,16296,"strained and linear independent.; 6. Perform a Principal Component Analysis on; \f$Q_i = P_i / P^\prime_i\, i = 1, \ldots, 5\f$, to get linear; indenpendent (among themselves, but not independent of \f$\mathbf{x}\f$) quantities; \f$\mathbf{Q}^\prime\f$; 7. For each component \f$Q^\prime_i\f$ make a multidimensional fit,; using \f$\mathbf{x}^\prime\f$ as the variables, thus determining a set of; coefficients \f$\mathbf{c}_i\f$. To process data, using this parameterisation, do; 1. Test wether the observation \f$\mathbf{x}\f$ within the domain of; the parameterization, using the result from the Principal Component; Analysis.; 2. Determine \f$\mathbf{P}^\prime\f$ as before.; 3. Determine \f$\mathbf{x}^\prime\f$ as before.; 4. Use the result of the fit to determine \f$\mathbf{Q}^\prime\f$.; 5. Transform back to \f$\mathbf{P}\f$ from \f$\mathbf{Q}^\prime\f$, using; the result from the Principal Component Analysis. ## Testing the parameterization; The class also provides functionality for testing the, over the; training sample, found parameterization (TMultiDimFit::Fit). This is done by passing; the class a test sample of \f$ M_t\f$ tuples of the form; \f$(\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\f$, where \f$\mathbf{x}_{t,j}\f$ are the independent; variables, \f$ D_{t,j}\f$ the known, dependent quantity, and \f$ E_{t,j}\f$ is; the square error in \f$ D_{t,j}\f$ (TMultiDimFit::AddTestRow). The parameterization is then evaluated at every \f$\mathbf{x}_t\f$ in the; test sample, and; \f[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \f]; is evaluated. The relative error over the test sample; \f[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \f]; should not be to low or high compared to \f$ R\f$ from the training; sample. Also, multiple correlation coefficient from both samples should; be fairly close, otherwise one of the samples is not representative of; the problem. A large difference in the reduced \f$ \chi^2\f$ over the two; samples in",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:16417,Testability,test,test,16417,"{Q}^\prime\f$; 7. For each component \f$Q^\prime_i\f$ make a multidimensional fit,; using \f$\mathbf{x}^\prime\f$ as the variables, thus determining a set of; coefficients \f$\mathbf{c}_i\f$. To process data, using this parameterisation, do; 1. Test wether the observation \f$\mathbf{x}\f$ within the domain of; the parameterization, using the result from the Principal Component; Analysis.; 2. Determine \f$\mathbf{P}^\prime\f$ as before.; 3. Determine \f$\mathbf{x}^\prime\f$ as before.; 4. Use the result of the fit to determine \f$\mathbf{Q}^\prime\f$.; 5. Transform back to \f$\mathbf{P}\f$ from \f$\mathbf{Q}^\prime\f$, using; the result from the Principal Component Analysis. ## Testing the parameterization; The class also provides functionality for testing the, over the; training sample, found parameterization (TMultiDimFit::Fit). This is done by passing; the class a test sample of \f$ M_t\f$ tuples of the form; \f$(\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\f$, where \f$\mathbf{x}_{t,j}\f$ are the independent; variables, \f$ D_{t,j}\f$ the known, dependent quantity, and \f$ E_{t,j}\f$ is; the square error in \f$ D_{t,j}\f$ (TMultiDimFit::AddTestRow). The parameterization is then evaluated at every \f$\mathbf{x}_t\f$ in the; test sample, and; \f[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \f]; is evaluated. The relative error over the test sample; \f[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \f]; should not be to low or high compared to \f$ R\f$ from the training; sample. Also, multiple correlation coefficient from both samples should; be fairly close, otherwise one of the samples is not representative of; the problem. A large difference in the reduced \f$ \chi^2\f$ over the two; samples indicate an over fit, and the maximum number of terms in the; parameterisation should be reduced. It's possible to use [4] to further improve the fit, using the test sample. Christian Holm. ## Bibliography; - <a name=""bevington""></a> Philip ",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:16774,Testability,test,test,16774,"bservation \f$\mathbf{x}\f$ within the domain of; the parameterization, using the result from the Principal Component; Analysis.; 2. Determine \f$\mathbf{P}^\prime\f$ as before.; 3. Determine \f$\mathbf{x}^\prime\f$ as before.; 4. Use the result of the fit to determine \f$\mathbf{Q}^\prime\f$.; 5. Transform back to \f$\mathbf{P}\f$ from \f$\mathbf{Q}^\prime\f$, using; the result from the Principal Component Analysis. ## Testing the parameterization; The class also provides functionality for testing the, over the; training sample, found parameterization (TMultiDimFit::Fit). This is done by passing; the class a test sample of \f$ M_t\f$ tuples of the form; \f$(\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\f$, where \f$\mathbf{x}_{t,j}\f$ are the independent; variables, \f$ D_{t,j}\f$ the known, dependent quantity, and \f$ E_{t,j}\f$ is; the square error in \f$ D_{t,j}\f$ (TMultiDimFit::AddTestRow). The parameterization is then evaluated at every \f$\mathbf{x}_t\f$ in the; test sample, and; \f[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \f]; is evaluated. The relative error over the test sample; \f[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \f]; should not be to low or high compared to \f$ R\f$ from the training; sample. Also, multiple correlation coefficient from both samples should; be fairly close, otherwise one of the samples is not representative of; the problem. A large difference in the reduced \f$ \chi^2\f$ over the two; samples indicate an over fit, and the maximum number of terms in the; parameterisation should be reduced. It's possible to use [4] to further improve the fit, using the test sample. Christian Holm. ## Bibliography; - <a name=""bevington""></a> Philip R. Bevington and D. Keith Robinson. *Data Reduction and Error Analysis for; the Physical Sciences*. McGraw-Hill, 2 edition, 1992.; - <a name=""mudifi""></a> R. Brun et al. *Long writeup DD/75-23*, CERN, 1980.; - Gene H. Golub and Charles F. van Loan. *Matrix Compu",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:16932,Testability,test,test,16932,"e \f$\mathbf{x}^\prime\f$ as before.; 4. Use the result of the fit to determine \f$\mathbf{Q}^\prime\f$.; 5. Transform back to \f$\mathbf{P}\f$ from \f$\mathbf{Q}^\prime\f$, using; the result from the Principal Component Analysis. ## Testing the parameterization; The class also provides functionality for testing the, over the; training sample, found parameterization (TMultiDimFit::Fit). This is done by passing; the class a test sample of \f$ M_t\f$ tuples of the form; \f$(\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\f$, where \f$\mathbf{x}_{t,j}\f$ are the independent; variables, \f$ D_{t,j}\f$ the known, dependent quantity, and \f$ E_{t,j}\f$ is; the square error in \f$ D_{t,j}\f$ (TMultiDimFit::AddTestRow). The parameterization is then evaluated at every \f$\mathbf{x}_t\f$ in the; test sample, and; \f[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \f]; is evaluated. The relative error over the test sample; \f[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \f]; should not be to low or high compared to \f$ R\f$ from the training; sample. Also, multiple correlation coefficient from both samples should; be fairly close, otherwise one of the samples is not representative of; the problem. A large difference in the reduced \f$ \chi^2\f$ over the two; samples indicate an over fit, and the maximum number of terms in the; parameterisation should be reduced. It's possible to use [4] to further improve the fit, using the test sample. Christian Holm. ## Bibliography; - <a name=""bevington""></a> Philip R. Bevington and D. Keith Robinson. *Data Reduction and Error Analysis for; the Physical Sciences*. McGraw-Hill, 2 edition, 1992.; - <a name=""mudifi""></a> R. Brun et al. *Long writeup DD/75-23*, CERN, 1980.; - Gene H. Golub and Charles F. van Loan. *Matrix Computations*.; John Hopkins University Press, Baltimore, 3 edition, 1996.; - <a name=""minuit""></a>F. James. *Minuit*. Long writeup D506, CERN, 1998.; - <a name=""wind72""></a>H. Wind. *Function p",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:17459,Testability,test,test,17459,"f$ M_t\f$ tuples of the form; \f$(\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\f$, where \f$\mathbf{x}_{t,j}\f$ are the independent; variables, \f$ D_{t,j}\f$ the known, dependent quantity, and \f$ E_{t,j}\f$ is; the square error in \f$ D_{t,j}\f$ (TMultiDimFit::AddTestRow). The parameterization is then evaluated at every \f$\mathbf{x}_t\f$ in the; test sample, and; \f[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \f]; is evaluated. The relative error over the test sample; \f[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \f]; should not be to low or high compared to \f$ R\f$ from the training; sample. Also, multiple correlation coefficient from both samples should; be fairly close, otherwise one of the samples is not representative of; the problem. A large difference in the reduced \f$ \chi^2\f$ over the two; samples indicate an over fit, and the maximum number of terms in the; parameterisation should be reduced. It's possible to use [4] to further improve the fit, using the test sample. Christian Holm. ## Bibliography; - <a name=""bevington""></a> Philip R. Bevington and D. Keith Robinson. *Data Reduction and Error Analysis for; the Physical Sciences*. McGraw-Hill, 2 edition, 1992.; - <a name=""mudifi""></a> R. Brun et al. *Long writeup DD/75-23*, CERN, 1980.; - Gene H. Golub and Charles F. van Loan. *Matrix Computations*.; John Hopkins University Press, Baltimore, 3 edition, 1996.; - <a name=""minuit""></a>F. James. *Minuit*. Long writeup D506, CERN, 1998.; - <a name=""wind72""></a>H. Wind. *Function parameterization*. Proceedings of the 1972 CERN Computing and Data Processing; School, volume 72-21 of Yellow report. CERN, 1972.; - <a name=""wind81""></a>H. Wind. 1. principal component analysis, 2. pattern recognition for track; finding, 3. interpolation and functional representation. Yellow report EP/81-12, CERN, 1981. [1]: classTMultiDimFit.html#bevington; [2]: classTMultiDimFit.html#mudifi; [4]: classTMultiDimFit.html#minuit; [5]: class",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:14842,Usability,simpl,simple,14842,"on*, rather then a *extrapolation* [5]. Also, the independent variables \f$ x_{i}\f$ need to be linear; independent, since the procedure will perform poorly if they are not; [5]. One can find an linear transformation from ones; original variables \f$ \xi_{i}\f$ to a set of linear independent variables; \f$ x_{i}\f$, using a *Principal Components Analysis* (see TPrincipal), and; then use the transformed variable as input to this class [5] [6]. H. Wind also outlines a method for parameterising a multidimensional; dependence over a multidimensional set of variables. An example; of the method from [5], is a follows (please refer to; [5] for a full discussion):. 1. Define \f$\mathbf{P} = (P_1, \ldots, P_5)\f$ are the 5 dependent; quantities that define a track.; 2. Compute, for \f$ M\f$ different values of \f$\mathbf{P}\f$, the tracks; through the magnetic field, and determine the corresponding; \f$\mathbf{x} = (x_1, \ldots, x_N)\f$.; 3. Use the simulated observations to determine, with a simple; approximation, the values of \f$\mathbf{P}_j\f$. We call these values; \f$\mathbf{P}^\prime_j, j = 1, \ldots, M\f$.; 4. Determine from \f$\mathbf{x}\f$ a set of at least five relevant; coordinates \f$\mathbf{x}^\prime\f$, using contrains, *or; alternative:*; 5. Perform a Principal Component Analysis (using TPrincipal), and use; to get a linear transformation \f$\mathbf{x} \rightarrow \mathbf{x}^\prime\f$, so that; \f$\mathbf{x}^\prime\f$ are constrained and linear independent.; 6. Perform a Principal Component Analysis on; \f$Q_i = P_i / P^\prime_i\, i = 1, \ldots, 5\f$, to get linear; indenpendent (among themselves, but not independent of \f$\mathbf{x}\f$) quantities; \f$\mathbf{Q}^\prime\f$; 7. For each component \f$Q^\prime_i\f$ make a multidimensional fit,; using \f$\mathbf{x}^\prime\f$ as the variables, thus determining a set of; coefficients \f$\mathbf{c}_i\f$. To process data, using this parameterisation, do; 1. Test wether the observation \f$\mathbf{x}\f$ within the domai",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:208,Availability,error,error,208,"////////////////////////////////////////////////////////////////////////////////; /// Add a row consisting of fNVariables independent variables, the; /// known, dependent quantity, and optionally, the square error in; /// the dependent quantity, to the training sample to be used for the; /// parameterization.; /// The mean of the variables and quantity is calculated on the fly,; /// as outlined in TPrincipal::AddRow.; /// This sample should be representative of the problem at hand.; /// Please note, that if no error is given Poisson statistics is; /// assumed and the square error is set to the value of dependent; /// quantity. See also the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:516,Availability,error,error,516,"////////////////////////////////////////////////////////////////////////////////; /// Add a row consisting of fNVariables independent variables, the; /// known, dependent quantity, and optionally, the square error in; /// the dependent quantity, to the training sample to be used for the; /// parameterization.; /// The mean of the variables and quantity is calculated on the fly,; /// as outlined in TPrincipal::AddRow.; /// This sample should be representative of the problem at hand.; /// Please note, that if no error is given Poisson statistics is; /// assumed and the square error is set to the value of dependent; /// quantity. See also the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:581,Availability,error,error,581,"////////////////////////////////////////////////////////////////////////////////; /// Add a row consisting of fNVariables independent variables, the; /// known, dependent quantity, and optionally, the square error in; /// the dependent quantity, to the training sample to be used for the; /// parameterization.; /// The mean of the variables and quantity is calculated on the fly,; /// as outlined in TPrincipal::AddRow.; /// This sample should be representative of the problem at hand.; /// Please note, that if no error is given Poisson statistics is; /// assumed and the square error is set to the value of dependent; /// quantity. See also the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:161,Integrability,depend,dependent,161,"////////////////////////////////////////////////////////////////////////////////; /// Add a row consisting of fNVariables independent variables, the; /// known, dependent quantity, and optionally, the square error in; /// the dependent quantity, to the training sample to be used for the; /// parameterization.; /// The mean of the variables and quantity is calculated on the fly,; /// as outlined in TPrincipal::AddRow.; /// This sample should be representative of the problem at hand.; /// Please note, that if no error is given Poisson statistics is; /// assumed and the square error is set to the value of dependent; /// quantity. See also the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:226,Integrability,depend,dependent,226,"////////////////////////////////////////////////////////////////////////////////; /// Add a row consisting of fNVariables independent variables, the; /// known, dependent quantity, and optionally, the square error in; /// the dependent quantity, to the training sample to be used for the; /// parameterization.; /// The mean of the variables and quantity is calculated on the fly,; /// as outlined in TPrincipal::AddRow.; /// This sample should be representative of the problem at hand.; /// Please note, that if no error is given Poisson statistics is; /// assumed and the square error is set to the value of dependent; /// quantity. See also the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:610,Integrability,depend,dependent,610,"////////////////////////////////////////////////////////////////////////////////; /// Add a row consisting of fNVariables independent variables, the; /// known, dependent quantity, and optionally, the square error in; /// the dependent quantity, to the training sample to be used for the; /// parameterization.; /// The mean of the variables and quantity is calculated on the fly,; /// as outlined in TPrincipal::AddRow.; /// This sample should be representative of the problem at hand.; /// Please note, that if no error is given Poisson statistics is; /// assumed and the square error is set to the value of dependent; /// quantity. See also the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:134,Modifiability,variab,variables,134,"////////////////////////////////////////////////////////////////////////////////; /// Add a row consisting of fNVariables independent variables, the; /// known, dependent quantity, and optionally, the square error in; /// the dependent quantity, to the training sample to be used for the; /// parameterization.; /// The mean of the variables and quantity is calculated on the fly,; /// as outlined in TPrincipal::AddRow.; /// This sample should be representative of the problem at hand.; /// Please note, that if no error is given Poisson statistics is; /// assumed and the square error is set to the value of dependent; /// quantity. See also the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:293,Modifiability,parameteriz,parameterization,293,"////////////////////////////////////////////////////////////////////////////////; /// Add a row consisting of fNVariables independent variables, the; /// known, dependent quantity, and optionally, the square error in; /// the dependent quantity, to the training sample to be used for the; /// parameterization.; /// The mean of the variables and quantity is calculated on the fly,; /// as outlined in TPrincipal::AddRow.; /// This sample should be representative of the problem at hand.; /// Please note, that if no error is given Poisson statistics is; /// assumed and the square error is set to the value of dependent; /// quantity. See also the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:332,Modifiability,variab,variables,332,"////////////////////////////////////////////////////////////////////////////////; /// Add a row consisting of fNVariables independent variables, the; /// known, dependent quantity, and optionally, the square error in; /// the dependent quantity, to the training sample to be used for the; /// parameterization.; /// The mean of the variables and quantity is calculated on the fly,; /// as outlined in TPrincipal::AddRow.; /// This sample should be representative of the problem at hand.; /// Please note, that if no error is given Poisson statistics is; /// assumed and the square error is set to the value of dependent; /// quantity. See also the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:3,Deployability,Update,Update,3,"// Update the maximum value for this component",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:3,Deployability,Update,Update,3,"// Update the minimum value for this component",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:208,Availability,error,error,208,"////////////////////////////////////////////////////////////////////////////////; /// Add a row consisting of fNVariables independent variables, the; /// known, dependent quantity, and optionally, the square error in; /// the dependent quantity, to the test sample to be used for the; /// test of the parameterization.; /// This sample needn't be representative of the problem at hand.; /// Please note, that if no error is given Poisson statistics is; /// assumed and the square error is set to the value of dependent; /// quantity. See also the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:415,Availability,error,error,415,"////////////////////////////////////////////////////////////////////////////////; /// Add a row consisting of fNVariables independent variables, the; /// known, dependent quantity, and optionally, the square error in; /// the dependent quantity, to the test sample to be used for the; /// test of the parameterization.; /// This sample needn't be representative of the problem at hand.; /// Please note, that if no error is given Poisson statistics is; /// assumed and the square error is set to the value of dependent; /// quantity. See also the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:480,Availability,error,error,480,"////////////////////////////////////////////////////////////////////////////////; /// Add a row consisting of fNVariables independent variables, the; /// known, dependent quantity, and optionally, the square error in; /// the dependent quantity, to the test sample to be used for the; /// test of the parameterization.; /// This sample needn't be representative of the problem at hand.; /// Please note, that if no error is given Poisson statistics is; /// assumed and the square error is set to the value of dependent; /// quantity. See also the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:161,Integrability,depend,dependent,161,"////////////////////////////////////////////////////////////////////////////////; /// Add a row consisting of fNVariables independent variables, the; /// known, dependent quantity, and optionally, the square error in; /// the dependent quantity, to the test sample to be used for the; /// test of the parameterization.; /// This sample needn't be representative of the problem at hand.; /// Please note, that if no error is given Poisson statistics is; /// assumed and the square error is set to the value of dependent; /// quantity. See also the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:226,Integrability,depend,dependent,226,"////////////////////////////////////////////////////////////////////////////////; /// Add a row consisting of fNVariables independent variables, the; /// known, dependent quantity, and optionally, the square error in; /// the dependent quantity, to the test sample to be used for the; /// test of the parameterization.; /// This sample needn't be representative of the problem at hand.; /// Please note, that if no error is given Poisson statistics is; /// assumed and the square error is set to the value of dependent; /// quantity. See also the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:509,Integrability,depend,dependent,509,"////////////////////////////////////////////////////////////////////////////////; /// Add a row consisting of fNVariables independent variables, the; /// known, dependent quantity, and optionally, the square error in; /// the dependent quantity, to the test sample to be used for the; /// test of the parameterization.; /// This sample needn't be representative of the problem at hand.; /// Please note, that if no error is given Poisson statistics is; /// assumed and the square error is set to the value of dependent; /// quantity. See also the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:134,Modifiability,variab,variables,134,"////////////////////////////////////////////////////////////////////////////////; /// Add a row consisting of fNVariables independent variables, the; /// known, dependent quantity, and optionally, the square error in; /// the dependent quantity, to the test sample to be used for the; /// test of the parameterization.; /// This sample needn't be representative of the problem at hand.; /// Please note, that if no error is given Poisson statistics is; /// assumed and the square error is set to the value of dependent; /// quantity. See also the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:301,Modifiability,parameteriz,parameterization,301,"////////////////////////////////////////////////////////////////////////////////; /// Add a row consisting of fNVariables independent variables, the; /// known, dependent quantity, and optionally, the square error in; /// the dependent quantity, to the test sample to be used for the; /// test of the parameterization.; /// This sample needn't be representative of the problem at hand.; /// Please note, that if no error is given Poisson statistics is; /// assumed and the square error is set to the value of dependent; /// quantity. See also the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:253,Testability,test,test,253,"////////////////////////////////////////////////////////////////////////////////; /// Add a row consisting of fNVariables independent variables, the; /// known, dependent quantity, and optionally, the square error in; /// the dependent quantity, to the test sample to be used for the; /// test of the parameterization.; /// This sample needn't be representative of the problem at hand.; /// Please note, that if no error is given Poisson statistics is; /// assumed and the square error is set to the value of dependent; /// quantity. See also the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:289,Testability,test,test,289,"////////////////////////////////////////////////////////////////////////////////; /// Add a row consisting of fNVariables independent variables, the; /// known, dependent quantity, and optionally, the square error in; /// the dependent quantity, to the test sample to be used for the; /// test of the parameterization.; /// This sample needn't be representative of the problem at hand.; /// Please note, that if no error is given Poisson statistics is; /// assumed and the square error is set to the value of dependent; /// quantity. See also the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:116,Modifiability,variab,variables,116,"////////////////////////////////////////////////////////////////////////////////; /// Clear internal structures and variables",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear internal structures and variables",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:20,Integrability,depend,dependent,20,"// Training sample, dependent quantity",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:32,Modifiability,variab,variables,32,"// Training sample, independent variables",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:3,Testability,Test,Test,3,"// Test sample",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:3,Energy Efficiency,Power,Powers,3,"// Powers",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:95,Modifiability,parameteriz,parameterization,95,"////////////////////////////////////////////////////////////////////////////////; /// Evaluate parameterization at point x. Optional argument coeff is; /// a vector of coefficients for the parameterisation, fNCoefficients; /// elements long.",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:48,Modifiability,variab,variable,48,"// Evaluate the factor (polynomial) in the j-th variable.",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:112,Availability,error,error,112,"////////////////////////////////////////////////////////////////////////////////; /// Evaluate parameterization error at point x. Optional argument coeff is; /// a vector of coefficients for the parameterisation, fNCoefficients; /// elements long.",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:95,Modifiability,parameteriz,parameterization,95,"////////////////////////////////////////////////////////////////////////////////; /// Evaluate parameterization error at point x. Optional argument coeff is; /// a vector of coefficients for the parameterisation, fNCoefficients; /// elements long.",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:17,Availability,Error,Error,17,"// std::cout << ""Error coef "" << i << "" -> "" << fCoefficientsRMS(i) << std::endl;",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:48,Modifiability,variab,variable,48,"// Evaluate the factor (polynomial) in the j-th variable.",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:155,Energy Efficiency,power,powers,155,"////////////////////////////////////////////////////////////////////////////////; /// PRIVATE METHOD:; /// Calculate the control parameter from the passed powers",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:130,Energy Efficiency,power,power,130,"////////////////////////////////////////////////////////////////////////////////; /// PRIVATE METHOD:; /// Evaluate function with power p at variable value x",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:141,Modifiability,variab,variable,141,"////////////////////////////////////////////////////////////////////////////////; /// PRIVATE METHOD:; /// Evaluate function with power p at variable value x",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:95,Modifiability,parameteriz,parameterization,95,"////////////////////////////////////////////////////////////////////////////////; /// Find the parameterization; ///; /// Options:; /// None so far; ///; /// For detailed description of what this entails, please refer to the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:131,Testability,test,test,131,"////////////////////////////////////////////////////////////////////////////////; /// Try to fit the found parameterisation to the test sample.; ///; /// Options; /// M use Minuit to improve coefficients; ///; /// Also, refer to; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:36,Testability,test,test,36,"// Calculate the residuals over the test sample",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:39,Modifiability,variab,variable,39,"// use big enough string buffer to get variable name which is not used",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:36,Energy Efficiency,power,powers,36,"// The temporary array to store the powers in. We don't need to; // initialize this array however.",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:21,Modifiability,variab,variables,21,"// store of `control variables'",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:31,Modifiability,variab,variables,31,"// We've better initialize the variables",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:13,Performance,load,loadable,13,"// Call over-loadable method Select, as to allow the user to; // interfere with the selection of functions.",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:52,Energy Efficiency,power,powers,52,"// Store the control value, so we can sort array of powers; // later on",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:13,Energy Efficiency,power,powers,13,"// Store the powers in powers array.",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:23,Energy Efficiency,power,powers,23,"// Store the powers in powers array.",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:47,Energy Efficiency,power,power,47,"// If all variables have reached their maximum power, then we; // break out of the loop",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:10,Modifiability,variab,variables,10,"// If all variables have reached their maximum power, then we; // break out of the loop",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:8,Energy Efficiency,power,power,8,"// Next power in variable i",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:17,Modifiability,variab,variable,17,"// Next power in variable i",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:12,Energy Efficiency,power,powers,12,"// Copy the powers to working arrays",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:27,Energy Efficiency,power,powers,27,"// Now we need to sort the powers according to least `control; // variable'",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:66,Modifiability,variab,variable,66,"// Now we need to sort the powers according to least `control; // variable'",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:123,Testability,test,test,123,"////////////////////////////////////////////////////////////////////////////////; /// Calculate Chi square over either the test sample. The optional; /// argument coeff is a vector of coefficients to use in the; /// evaluation of the parameterisation. If coeff == 0, then the found; /// coefficients is used.; /// Used my MINUIT for fit (see TMultDimFit::Fit)",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:394,Modifiability,variab,variables,394,"////////////////////////////////////////////////////////////////////////////////; /// Generate the file `<filename>` with .C appended if argument doesn't; /// end in .cxx or .C. The contains the implementation of the; /// function:; ///; /// `Double_t <funcname>(Double_t *x)`; ///; /// which does the same as TMultiDimFit::Eval. Please refer to this; /// method.; ///; /// Further, the static variables:; ///; /// Int_t gNVariables; /// Int_t gNCoefficients; /// Double_t gDMean; /// Double_t gXMean[]; /// Double_t gXMin[]; /// Double_t gXMax[]; /// Double_t gCoefficient[]; /// Int_t gPower[]; ///; /// are initialized. The only ROOT header file needed is Rtypes.h; ///; /// See TMultiDimFit::MakeRealCode for a list of options",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:119,Availability,error,errors,119,"////////////////////////////////////////////////////////////////////////////////; /// PRIVATE METHOD:; /// Compute the errors on the coefficients. For this to be done, the; /// curvature matrix of the non-orthogonal functions, is computed.",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:16,Modifiability,variab,variable,16,"// G.Q. added m variable",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:24,Modifiability,variab,variable,24,"// Index of sample j of variable i",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:24,Modifiability,variab,variable,24,"// Index of sample j of variable i; // l = j * fNVariables + k; // G.Q.",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:9,Testability,test,test,9,"// First test, but only if didn't user specify",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:138,Integrability,message,message,138,"////////////////////////////////////////////////////////////////////////////////; /// Make histograms of the result of the analysis. This message; /// should be sent after having read all data points, but before; /// finding the parameterization; ///; /// Options:; /// A All the below; /// X Original independent variables; /// D Original dependent variables; /// N Normalised independent variables; /// S Shifted dependent variables; /// R1 Residuals versus normalised independent variables; /// R2 Residuals versus dependent variable; /// R3 Residuals computed on training sample; /// R4 Residuals computed on test sample; ///; /// For a description of these quantities, refer to; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:340,Integrability,depend,dependent,340,"////////////////////////////////////////////////////////////////////////////////; /// Make histograms of the result of the analysis. This message; /// should be sent after having read all data points, but before; /// finding the parameterization; ///; /// Options:; /// A All the below; /// X Original independent variables; /// D Original dependent variables; /// N Normalised independent variables; /// S Shifted dependent variables; /// R1 Residuals versus normalised independent variables; /// R2 Residuals versus dependent variable; /// R3 Residuals computed on training sample; /// R4 Residuals computed on test sample; ///; /// For a description of these quantities, refer to; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:415,Integrability,depend,dependent,415,"////////////////////////////////////////////////////////////////////////////////; /// Make histograms of the result of the analysis. This message; /// should be sent after having read all data points, but before; /// finding the parameterization; ///; /// Options:; /// A All the below; /// X Original independent variables; /// D Original dependent variables; /// N Normalised independent variables; /// S Shifted dependent variables; /// R1 Residuals versus normalised independent variables; /// R2 Residuals versus dependent variable; /// R3 Residuals computed on training sample; /// R4 Residuals computed on test sample; ///; /// For a description of these quantities, refer to; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:518,Integrability,depend,dependent,518,"////////////////////////////////////////////////////////////////////////////////; /// Make histograms of the result of the analysis. This message; /// should be sent after having read all data points, but before; /// finding the parameterization; ///; /// Options:; /// A All the below; /// X Original independent variables; /// D Original dependent variables; /// N Normalised independent variables; /// S Shifted dependent variables; /// R1 Residuals versus normalised independent variables; /// R2 Residuals versus dependent variable; /// R3 Residuals computed on training sample; /// R4 Residuals computed on test sample; ///; /// For a description of these quantities, refer to; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:229,Modifiability,parameteriz,parameterization,229,"////////////////////////////////////////////////////////////////////////////////; /// Make histograms of the result of the analysis. This message; /// should be sent after having read all data points, but before; /// finding the parameterization; ///; /// Options:; /// A All the below; /// X Original independent variables; /// D Original dependent variables; /// N Normalised independent variables; /// S Shifted dependent variables; /// R1 Residuals versus normalised independent variables; /// R2 Residuals versus dependent variable; /// R3 Residuals computed on training sample; /// R4 Residuals computed on test sample; ///; /// For a description of these quantities, refer to; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:314,Modifiability,variab,variables,314,"////////////////////////////////////////////////////////////////////////////////; /// Make histograms of the result of the analysis. This message; /// should be sent after having read all data points, but before; /// finding the parameterization; ///; /// Options:; /// A All the below; /// X Original independent variables; /// D Original dependent variables; /// N Normalised independent variables; /// S Shifted dependent variables; /// R1 Residuals versus normalised independent variables; /// R2 Residuals versus dependent variable; /// R3 Residuals computed on training sample; /// R4 Residuals computed on test sample; ///; /// For a description of these quantities, refer to; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:350,Modifiability,variab,variables,350,"////////////////////////////////////////////////////////////////////////////////; /// Make histograms of the result of the analysis. This message; /// should be sent after having read all data points, but before; /// finding the parameterization; ///; /// Options:; /// A All the below; /// X Original independent variables; /// D Original dependent variables; /// N Normalised independent variables; /// S Shifted dependent variables; /// R1 Residuals versus normalised independent variables; /// R2 Residuals versus dependent variable; /// R3 Residuals computed on training sample; /// R4 Residuals computed on test sample; ///; /// For a description of these quantities, refer to; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:390,Modifiability,variab,variables,390,"////////////////////////////////////////////////////////////////////////////////; /// Make histograms of the result of the analysis. This message; /// should be sent after having read all data points, but before; /// finding the parameterization; ///; /// Options:; /// A All the below; /// X Original independent variables; /// D Original dependent variables; /// N Normalised independent variables; /// S Shifted dependent variables; /// R1 Residuals versus normalised independent variables; /// R2 Residuals versus dependent variable; /// R3 Residuals computed on training sample; /// R4 Residuals computed on test sample; ///; /// For a description of these quantities, refer to; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:425,Modifiability,variab,variables,425,"////////////////////////////////////////////////////////////////////////////////; /// Make histograms of the result of the analysis. This message; /// should be sent after having read all data points, but before; /// finding the parameterization; ///; /// Options:; /// A All the below; /// X Original independent variables; /// D Original dependent variables; /// N Normalised independent variables; /// S Shifted dependent variables; /// R1 Residuals versus normalised independent variables; /// R2 Residuals versus dependent variable; /// R3 Residuals computed on training sample; /// R4 Residuals computed on test sample; ///; /// For a description of these quantities, refer to; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:483,Modifiability,variab,variables,483,"////////////////////////////////////////////////////////////////////////////////; /// Make histograms of the result of the analysis. This message; /// should be sent after having read all data points, but before; /// finding the parameterization; ///; /// Options:; /// A All the below; /// X Original independent variables; /// D Original dependent variables; /// N Normalised independent variables; /// S Shifted dependent variables; /// R1 Residuals versus normalised independent variables; /// R2 Residuals versus dependent variable; /// R3 Residuals computed on training sample; /// R4 Residuals computed on test sample; ///; /// For a description of these quantities, refer to; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:528,Modifiability,variab,variable,528,"////////////////////////////////////////////////////////////////////////////////; /// Make histograms of the result of the analysis. This message; /// should be sent after having read all data points, but before; /// finding the parameterization; ///; /// Options:; /// A All the below; /// X Original independent variables; /// D Original dependent variables; /// N Normalised independent variables; /// S Shifted dependent variables; /// R1 Residuals versus normalised independent variables; /// R2 Residuals versus dependent variable; /// R3 Residuals computed on training sample; /// R4 Residuals computed on test sample; ///; /// For a description of these quantities, refer to; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:613,Testability,test,test,613,"////////////////////////////////////////////////////////////////////////////////; /// Make histograms of the result of the analysis. This message; /// should be sent after having read all data points, but before; /// finding the parameterization; ///; /// Options:; /// A All the below; /// X Original independent variables; /// D Original dependent variables; /// N Normalised independent variables; /// S Shifted dependent variables; /// R1 Residuals versus normalised independent variables; /// R2 Residuals versus dependent variable; /// R3 Residuals computed on training sample; /// R4 Residuals computed on test sample; ///; /// For a description of these quantities, refer to; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:11,Modifiability,variab,variable,11,"// Counter variable",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:25,Modifiability,variab,variables,25,"// Histogram of original variables",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:25,Integrability,depend,dependent,25,"// Histogram of original dependent variable",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:35,Modifiability,variab,variable,35,"// Histogram of original dependent variable",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:28,Modifiability,variab,variables,28,"// Histograms of normalized variables",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:24,Integrability,depend,dependent,24,"// Histogram of shifted dependent variable",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:34,Modifiability,variab,variable,34,"// Histogram of shifted dependent variable",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:52,Modifiability,variab,variables,52,"// Residual from training sample versus independent variables",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:41,Integrability,depend,dependent,41,"// Residual from training sample versus. dependent variable",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:51,Modifiability,variab,variable,51,"// Residual from training sample versus. dependent variable",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:1606,Energy Efficiency,power,powers,1606,"////////////////////////////////////////////////////////////////////////////////; /// Generate the file `<classname>MDF.cxx` which contains the; /// implementation of the method:; ///; /// `Double_t <classname>::%MDF(Double_t *x)`; ///; /// which does the same as TMultiDimFit::Eval. Please refer to this; /// method.; ///; /// Further, the public static members:; /// \code{.cpp}; /// Int_t <classname>::fgNVariables; /// Int_t <classname>::fgNCoefficients; /// Double_t <classname>::fgDMean; /// Double_t <classname>::fgXMean[] //[fgNVariables]; /// Double_t <classname>::fgXMin[] //[fgNVariables]; /// Double_t <classname>::fgXMax[] //[fgNVariables]; /// Double_t <classname>::fgCoefficient[] //[fgNCoeffficents]; /// Int_t <classname>::fgPower[] //[fgNCoeffficents*fgNVariables]; /// \endcode; ///; /// are initialized, and assumed to exist. The class declaration is; /// assumed to be in `<classname>.h` and assumed to be provided by the; /// user.; ///; /// \see TMultiDimFit::MakeRealCode for a list of options; ///; /// The minimal class definition is:; /// \code{.cpp}; /// class <classname> {; /// public:; /// Int_t <classname>::fgNVariables; // Number of variables; /// Int_t <classname>::fgNCoefficients; // Number of terms; /// Double_t <classname>::fgDMean; // Mean from training sample; /// Double_t <classname>::fgXMean[]; // Mean from training sample; /// Double_t <classname>::fgXMin[]; // Min from training sample; /// Double_t <classname>::fgXMax[]; // Max from training sample; /// Double_t <classname>::fgCoefficient[]; // Coefficients; /// Int_t <classname>::fgPower[]; // Function powers; ///; /// Double_t Eval(Double_t *x);; /// };; /// \endcode; ///; /// Whether the method `<classname>::%Eval` should be static or not, is; /// up to the user.",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:1167,Modifiability,variab,variables,1167,"////////////////////////////////////////////////////////////////////////////////; /// Generate the file `<classname>MDF.cxx` which contains the; /// implementation of the method:; ///; /// `Double_t <classname>::%MDF(Double_t *x)`; ///; /// which does the same as TMultiDimFit::Eval. Please refer to this; /// method.; ///; /// Further, the public static members:; /// \code{.cpp}; /// Int_t <classname>::fgNVariables; /// Int_t <classname>::fgNCoefficients; /// Double_t <classname>::fgDMean; /// Double_t <classname>::fgXMean[] //[fgNVariables]; /// Double_t <classname>::fgXMin[] //[fgNVariables]; /// Double_t <classname>::fgXMax[] //[fgNVariables]; /// Double_t <classname>::fgCoefficient[] //[fgNCoeffficents]; /// Int_t <classname>::fgPower[] //[fgNCoeffficents*fgNVariables]; /// \endcode; ///; /// are initialized, and assumed to exist. The class declaration is; /// assumed to be in `<classname>.h` and assumed to be provided by the; /// user.; ///; /// \see TMultiDimFit::MakeRealCode for a list of options; ///; /// The minimal class definition is:; /// \code{.cpp}; /// class <classname> {; /// public:; /// Int_t <classname>::fgNVariables; // Number of variables; /// Int_t <classname>::fgNCoefficients; // Number of terms; /// Double_t <classname>::fgDMean; // Mean from training sample; /// Double_t <classname>::fgXMean[]; // Mean from training sample; /// Double_t <classname>::fgXMin[]; // Min from training sample; /// Double_t <classname>::fgXMax[]; // Max from training sample; /// Double_t <classname>::fgCoefficient[]; // Coefficients; /// Int_t <classname>::fgPower[]; // Function powers; ///; /// Double_t Eval(Double_t *x);; /// };; /// \endcode; ///; /// Whether the method `<classname>::%Eval` should be static or not, is; /// up to the user.",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:43,Modifiability,variab,variables,43,"// Fill histograms of original independent variables",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:25,Modifiability,variab,variables,25,"// Normalise independent variables",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:45,Modifiability,variab,variables,45,"// Fill histograms of normalised independent variables",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:24,Integrability,depend,dependent,24,"// Shift min and max of dependent variable",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:34,Modifiability,variab,variable,34,"// Shift min and max of dependent variable",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:29,Modifiability,variab,variables,29,"// Shift mean of independent variables",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:116,Modifiability,parameteriz,parameterization,116,"////////////////////////////////////////////////////////////////////////////////; /// PRIVATE METHOD:; /// Find the parameterization over the training sample. A full account; /// of the algorithm is given in the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:17,Integrability,message,message,17,"// Print a happy message",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:39,Testability,test,test,39,"// This function is no good!; // First test is in MakeGramSchmidt",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:3,Testability,Test,Test,3,"// Test if this function contributes to the fit",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:187,Modifiability,parameteriz,parameterization,187,"////////////////////////////////////////////////////////////////////////////////; /// PRIVATE METHOD:; /// This is the method that actually generates the code for the; /// evaluation the parameterization on some point.; /// It's called by TMultiDimFit::MakeCode and TMultiDimFit::MakeMethod.; ///; /// The options are: NONE so far",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:17,Availability,error,error,17,"// Assignment to error coefficients vector.",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:17,Energy Efficiency,power,powers,17,"// Assignment to powers vector.",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:328,Energy Efficiency,power,powers,328,"////////////////////////////////////////////////////////////////////////////////; /// Selection method. User can override this method for specialized; /// selection of acceptable functions in fit. Default is to select; /// all. This message is sent during the build-up of the function; /// candidates table once for each set of powers in; /// variables. Notice, that the argument array contains the powers; /// PLUS ONE. For example, to De select the function; /// f = x1^2 * x2^4 * x3^5,; /// this method should return kFALSE if given the argument; /// { 3, 4, 6 }",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:399,Energy Efficiency,power,powers,399,"////////////////////////////////////////////////////////////////////////////////; /// Selection method. User can override this method for specialized; /// selection of acceptable functions in fit. Default is to select; /// all. This message is sent during the build-up of the function; /// candidates table once for each set of powers in; /// variables. Notice, that the argument array contains the powers; /// PLUS ONE. For example, to De select the function; /// f = x1^2 * x2^4 * x3^5,; /// this method should return kFALSE if given the argument; /// { 3, 4, 6 }",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:233,Integrability,message,message,233,"////////////////////////////////////////////////////////////////////////////////; /// Selection method. User can override this method for specialized; /// selection of acceptable functions in fit. Default is to select; /// all. This message is sent during the build-up of the function; /// candidates table once for each set of powers in; /// variables. Notice, that the argument array contains the powers; /// PLUS ONE. For example, to De select the function; /// f = x1^2 * x2^4 * x3^5,; /// this method should return kFALSE if given the argument; /// { 3, 4, 6 }",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:343,Modifiability,variab,variables,343,"////////////////////////////////////////////////////////////////////////////////; /// Selection method. User can override this method for specialized; /// selection of acceptable functions in fit. Default is to select; /// all. This message is sent during the build-up of the function; /// candidates table once for each set of powers in; /// variables. Notice, that the argument array contains the powers; /// PLUS ONE. For example, to De select the function; /// f = x1^2 * x2^4 * x3^5,; /// this method should return kFALSE if given the argument; /// { 3, 4, 6 }",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:343,Modifiability,variab,variable,343,"////////////////////////////////////////////////////////////////////////////////; /// Define a user function. The input array must be of the form; /// (p11, ..., p1N, ... ,pL1, ..., pLN); /// Where N is the dimension of the data sample, L is the number of; /// terms (given in terms) and the first number, labels the term, the; /// second the variable. More information is given in the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:213,Modifiability,variab,variable,213,"////////////////////////////////////////////////////////////////////////////////; /// Set the user parameter for the function selection. The bigger the; /// limit, the more functions are used. The meaning of this variable; /// is defined in the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:102,Energy Efficiency,power,power,102,"////////////////////////////////////////////////////////////////////////////////; /// Set the maximum power to be considered in the fit for each; /// variable. See also; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:150,Modifiability,variab,variable,150,"////////////////////////////////////////////////////////////////////////////////; /// Set the maximum power to be considered in the fit for each; /// variable. See also; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:114,Availability,error,error,114,"////////////////////////////////////////////////////////////////////////////////; /// Set the acceptable relative error for when sum of square; /// residuals is considered minimized. For a full account, refer to; /// the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:107,Testability,Test,Test,107,"////////////////////////////////////////////////////////////////////////////////; /// PRIVATE METHOD:; /// Test whether the currently considered function contributes to the; /// fit. See also; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:22,Testability,test,test,22,"// Now for the second test:",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:50,Testability,test,test,50,"// If the user hasn't supplied a max angle do the test as,",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:41,Testability,test,test,41,"// If the user has provided a max angle, test if the calculated; // angle is less then the max angle.",MatchSource.CODE_COMMENT,hist/hist/src/TMultiDimFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx:4480,Availability,avail,available,4480,"y1[size];; double py2[size];; double py3[size];. for ( int i = 0; i < size ; ++i ) {; px[i] = i;; py1[i] = size - i;; py2[i] = size - 0.5 * i;; py3[i] = size - 0.6 * i;; }. auto gr1 = new TGraph( size, px, py1 );; gr1->SetName(""gr1"");; gr1->SetTitle(""graph 1"");; gr1->SetMarkerStyle(21);; gr1->SetDrawOption(""AP"");; gr1->SetLineColor(2);; gr1->SetLineWidth(4);; gr1->SetFillStyle(0);. auto gr2 = new TGraph( size, px, py2 );; gr2->SetName(""gr2"");; gr2->SetTitle(""graph 2"");; gr2->SetMarkerStyle(22);; gr2->SetMarkerColor(2);; gr2->SetDrawOption(""P"");; gr2->SetLineColor(3);; gr2->SetLineWidth(4);; gr2->SetFillStyle(0);. auto gr3 = new TGraph( size, px, py3 );; gr3->SetName(""gr3"");; gr3->SetTitle(""graph 3"");; gr3->SetMarkerStyle(23);; gr3->SetLineColor(4);; gr3->SetLineWidth(4);; gr3->SetFillStyle(0);. mg->Add( gr1 );; mg->Add( gr2 );. gr3->Draw(""ALP"");; mg->Draw(""LP"");; c3->BuildLegend();; }; End_Macro. \anchor MG01e; #### Automatic coloring. Automatic coloring according to the current palette is available as shown in the; following example:. Begin_Macro(source); ../../../tutorials/graphs/multigraphpalettecolor.C; End_Macro. \anchor MG01f; #### Reverse axis. \since **ROOT version 6.19/02**. When a TMultiGraph is drawn, the X-axis is drawn with increasing values from left to; right and the Y-axis from bottom to top. The two options RX and RY allow to change; this order. The option RX allows to draw the X-axis with increasing values from; right to left and the RY option allows to draw the Y-axis with increasing values; from top to bottom. The following example illustrate how to use these options. Begin_Macro(source); {; auto *c = new TCanvas();; c->Divide(2,1);. auto *g1 = new TGraphErrors();; g1->SetPoint(0,-4,-3);; g1->SetPoint(1,1,1);; g1->SetPoint(2,2,1);; g1->SetPoint(3,3,4);; g1->SetPoint(4,5,5);; g1->SetPointError(0,1.,2.);; g1->SetPointError(1,2,1);; g1->SetPointError(2,2,3);; g1->SetPointError(3,3,2);; g1->SetPointError(4,4,5);; g1->SetMarkerStyle(21);. auto *g2 = n",MatchSource.CODE_COMMENT,hist/hist/src/TMultiGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx:3136,Deployability,Update,Update,3136," example:. Begin_Macro(source); {; auto c0 = new TCanvas(""c1"",""multigraph L3"",200,10,700,500);. auto mg = new TMultiGraph();. auto gr1 = new TGraph(); gr1->SetLineColor(kBlue);; auto gr2 = new TGraph(); gr2->SetLineColor(kRed);; auto gr3 = new TGraph(); gr3->SetLineColor(kGreen);; auto gr4 = new TGraph(); gr4->SetLineColor(kOrange);. Double_t dx = 6.28/1000;; Double_t x = -3.14;. for (int i=0; i<=1000; i++) {; x = x+dx;; gr1->SetPoint(i,x,2.*TMath::Sin(x));; gr2->SetPoint(i,x,TMath::Cos(x));; gr3->SetPoint(i,x,TMath::Cos(x*x));; gr4->SetPoint(i,x,TMath::Cos(x*x*x));; }. mg->Add(gr4); gr4->SetTitle(""Cos(x*x*x)""); gr4->SetLineWidth(3);; mg->Add(gr3); gr3->SetTitle(""Cos(x*x)"") ; gr3->SetLineWidth(3);; mg->Add(gr2); gr2->SetTitle(""Cos(x)"") ; gr2->SetLineWidth(3);; mg->Add(gr1); gr1->SetTitle(""2*Sin(x)"") ; gr1->SetLineWidth(3);. mg->SetTitle(""Multi-graph Title; X-axis Title; Y-axis Title"");. mg->Draw(""a fb l3d"");. mg->GetHistogram()->GetXaxis()->SetRangeUser(0.,2.5);; gPad->Modified();; gPad->Update();; }; End_Macro. \anchor MG01d; #### Legend drawing. The method TPad::BuildLegend is able to extract the graphs inside a; multigraph. The following example demonstrate this. Begin_Macro(source); {; auto c3 = new TCanvas(""c3"",""c3"",600, 400);. auto mg = new TMultiGraph(""mg"",""mg"");. const Int_t size = 10;. double px[size];; double py1[size];; double py2[size];; double py3[size];. for ( int i = 0; i < size ; ++i ) {; px[i] = i;; py1[i] = size - i;; py2[i] = size - 0.5 * i;; py3[i] = size - 0.6 * i;; }. auto gr1 = new TGraph( size, px, py1 );; gr1->SetName(""gr1"");; gr1->SetTitle(""graph 1"");; gr1->SetMarkerStyle(21);; gr1->SetDrawOption(""AP"");; gr1->SetLineColor(2);; gr1->SetLineWidth(4);; gr1->SetFillStyle(0);. auto gr2 = new TGraph( size, px, py2 );; gr2->SetName(""gr2"");; gr2->SetTitle(""graph 2"");; gr2->SetMarkerStyle(22);; gr2->SetMarkerColor(2);; gr2->SetDrawOption(""P"");; gr2->SetLineColor(3);; gr2->SetLineWidth(4);; gr2->SetFillStyle(0);. auto gr3 = new TGraph( size, px, py3 ",MatchSource.CODE_COMMENT,hist/hist/src/TMultiGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx:1144,Performance,perform,performed,1144,"collection of TGraph (or derived) objects. - [Introduction](\ref MG00); - [MultiGraphs' drawing](\ref MG01); - [Setting drawing options](\ref MG01a); - [Titles setting](\ref MG01b); - [The option \""3D\""](\ref MG01c); - [Legend drawing](\ref MG01d); - [Automatic coloring](\ref MG01e); - [Reverse axis](\ref MG01f); - [MultiGraphs' fitting](\ref MG02); - [Fit box position](\ref MG02a); - [Axis' limits setting](\ref MG03). \anchor MG00; ### Introduction. A TMultiGraph allows to manipulate a set of graphs as a single entity. In particular,; when drawn, the X and Y axis ranges are automatically computed such as all the graphs; will be visible. `TMultiGraph::Add` should be used to add a new graph to the list. The TMultiGraph owns the objects in the list. The number of graphs in a multigraph can be retrieve with:; ~~~ {.cpp}; mg->GetListOfGraphs()->GetEntries();; ~~~. \anchor MG01; ### MultiGraphs' Drawing. The drawing options are the same as for TGraph.; Like for TGraph, the painting is performed thanks to the TGraphPainter; class. All details about the various painting options are given in this class. Example:; ~~~ {.cpp}; TGraph *gr1 = new TGraph(...; TGraphErrors *gr2 = new TGraphErrors(...; TMultiGraph *mg = new TMultiGraph();; mg->Add(gr1,""lp"");; mg->Add(gr2,""cp"");; mg->Draw(""a"");; ~~~. \anchor MG01a; #### Setting drawing options. The drawing option for each TGraph may be specified as an optional; second argument of the `Add` function. If a draw option is specified, it will be used to draw the graph,; otherwise the graph will be drawn with the option specified in; `TMultiGraph::Draw`. \anchor MG01b; #### Titles setting. The global title and the axis titles can be modified the following way:. ~~~ {.cpp}; [...]; auto mg = new TMultiGraph;; mg->SetTitle(""title;xaxis title; yaxis title"");; mg->Add(g1);; mg->Add(g2);; mg->Draw(""apl"");; ~~~. \anchor MG01c; #### The option ""3D"". A special option `3D` allows to draw the graphs in a 3D space. See the; following example:. Begin",MatchSource.CODE_COMMENT,hist/hist/src/TMultiGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx:10,Testability,log,logic,10,"//special logic to support the case where the same object is; //added multiple times in fFunctions.; //This case happens when the same object is added with different; //drawing modes",MatchSource.CODE_COMMENT,hist/hist/src/TMultiGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx:142,Integrability,interface,interface,142,"////////////////////////////////////////////////////////////////////////////////; /// Fit this graph with function with name fname.; ///; /// interface to TF1::Fit(TF1 *f1...",MatchSource.CODE_COMMENT,hist/hist/src/TMultiGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx:507,Availability,error,errors,507,"////////////////////////////////////////////////////////////////////////////////; /// Fit this multigraph with function f1.; ///; /// In this function all graphs of the multigraph are fitted simultaneously; ///; /// f1 is an already predefined function created by TF1.; /// Predefined functions such as gaus, expo and poln are automatically; /// created by ROOT.; ///; /// The list of fit options is given in parameter `option`which may takes the; /// following values:; ///; /// - ""W"" Ignore all the point errors; /// - ""U"" Use a User specified fitting algorithm (via SetFCN); /// - ""Q"" Quiet mode (minimum printing); /// - ""V"" Verbose mode (default is between Q and V); /// - ""B"" Use this option when you want to fix one or more parameters; /// and the fitting function is like ""gaus"",""expo"",""poln"",""landau"".; /// - ""R"" Use the Range specified in the function range; /// - ""N"" Do not store the graphics function, do not draw; /// - ""0"" Do not plot the result of the fit. By default the fitted function; /// is drawn unless the option""N"" above is specified.; /// - ""+"" Add this new fitted function to the list of fitted functions; /// (by default, any previous function is deleted); /// - ""C"" In case of linear fitting, not calculate the chisquare (saves time); /// - ""F"" If fitting a polN, switch to minuit fitter; /// - ""ROB"" In case of linear fitting, compute the LTS regression; /// coefficients (robust(resistant) regression), using; /// the default fraction of good points; /// - ""ROB=0.x"" - compute the LTS regression coefficients, using; /// 0.x as a fraction of good points; ///; /// When the fit is drawn (by default), the parameter goption may be used; /// to specify a list of graphics options. See TGraph::Paint for a complete; /// list of these options.; ///; /// In order to use the Range option, one must first create a function; /// with the expression to be fitted. For example, if your graph; /// has a defined range between -4 and 4 and you want to fit a gaussian; /// only in the",MatchSource.CODE_COMMENT,hist/hist/src/TMultiGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx:1402,Availability,robust,robust,1402,"edefined functions such as gaus, expo and poln are automatically; /// created by ROOT.; ///; /// The list of fit options is given in parameter `option`which may takes the; /// following values:; ///; /// - ""W"" Ignore all the point errors; /// - ""U"" Use a User specified fitting algorithm (via SetFCN); /// - ""Q"" Quiet mode (minimum printing); /// - ""V"" Verbose mode (default is between Q and V); /// - ""B"" Use this option when you want to fix one or more parameters; /// and the fitting function is like ""gaus"",""expo"",""poln"",""landau"".; /// - ""R"" Use the Range specified in the function range; /// - ""N"" Do not store the graphics function, do not draw; /// - ""0"" Do not plot the result of the fit. By default the fitted function; /// is drawn unless the option""N"" above is specified.; /// - ""+"" Add this new fitted function to the list of fitted functions; /// (by default, any previous function is deleted); /// - ""C"" In case of linear fitting, not calculate the chisquare (saves time); /// - ""F"" If fitting a polN, switch to minuit fitter; /// - ""ROB"" In case of linear fitting, compute the LTS regression; /// coefficients (robust(resistant) regression), using; /// the default fraction of good points; /// - ""ROB=0.x"" - compute the LTS regression coefficients, using; /// 0.x as a fraction of good points; ///; /// When the fit is drawn (by default), the parameter goption may be used; /// to specify a list of graphics options. See TGraph::Paint for a complete; /// list of these options.; ///; /// In order to use the Range option, one must first create a function; /// with the expression to be fitted. For example, if your graph; /// has a defined range between -4 and 4 and you want to fit a gaussian; /// only in the interval 1 to 3, you can do:; /// ~~~ {.cpp}; /// TF1 *f1 = new TF1(""f1"",""gaus"",1,3);; /// graph->Fit(""f1"",""R"");; /// ~~~; ///; /// ### Who is calling this function ?; ///; /// Note that this function is called when calling TGraphErrors::Fit; /// or TGraphAsymmErrors::Fit o",MatchSource.CODE_COMMENT,hist/hist/src/TMultiGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx:2337,Availability,error,errors,2337,"se of linear fitting, not calculate the chisquare (saves time); /// - ""F"" If fitting a polN, switch to minuit fitter; /// - ""ROB"" In case of linear fitting, compute the LTS regression; /// coefficients (robust(resistant) regression), using; /// the default fraction of good points; /// - ""ROB=0.x"" - compute the LTS regression coefficients, using; /// 0.x as a fraction of good points; ///; /// When the fit is drawn (by default), the parameter goption may be used; /// to specify a list of graphics options. See TGraph::Paint for a complete; /// list of these options.; ///; /// In order to use the Range option, one must first create a function; /// with the expression to be fitted. For example, if your graph; /// has a defined range between -4 and 4 and you want to fit a gaussian; /// only in the interval 1 to 3, you can do:; /// ~~~ {.cpp}; /// TF1 *f1 = new TF1(""f1"",""gaus"",1,3);; /// graph->Fit(""f1"",""R"");; /// ~~~; ///; /// ### Who is calling this function ?; ///; /// Note that this function is called when calling TGraphErrors::Fit; /// or TGraphAsymmErrors::Fit ot TGraphBentErrors::Fit; /// see the discussion below on the errors calculation.; ///; /// ### Setting initial conditions; ///; /// Parameters must be initialized before invoking the Fit function.; /// The setting of the parameter initial values is automatic for the; /// predefined functions : poln, expo, gaus, landau. One can however disable; /// this automatic computation by specifying the option ""B"".; /// You can specify boundary limits for some or all parameters via; /// ~~~ {.cpp}; /// f1->SetParLimits(p_number, parmin, parmax);; /// ~~~; /// if `parmin>=parmax`, the parameter is fixed; /// Note that you are not forced to fix the limits for all parameters.; /// For example, if you fit a function with 6 parameters, you can do:; /// ~~~ {.cpp}; /// func->SetParameters(0,3.1,1.e-6,0.1,-8,100);; /// func->SetParLimits(4,-10,-4);; /// func->SetParLimits(5, 1,1);; /// ~~~; /// With this setup, parameters 0->3 c",MatchSource.CODE_COMMENT,hist/hist/src/TMultiGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx:4943,Availability,error,error,4943," specify option ""U"" and; /// call the following function:; /// ~~~ {.cpp}; /// TVirtualFitter::Fitter(mygraph)->SetFCN(MyFittingFunction); /// ~~~; /// where MyFittingFunction is of type:; /// ~~~ {.cpp}; /// extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; /// ~~~; ///; /// ### Access to the fit result; ///; /// The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; /// By default the TFitResultPtr contains only the status of the fit and it converts; /// automatically to an integer. If the option ""S"" is instead used, TFitResultPtr contains; /// the TFitResult and behaves as a smart pointer to it. For example one can do:; /// ~~~ {.cpp}; /// TFitResultPtr r = graph->Fit(""myFunc"",""S"");; /// TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; /// Double_t par0 = r->Parameter(0); // retrieve the value for the parameter 0; /// Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; /// r->Print(""V""); // print full information of fit including covariance matrix; /// r->Write(); // store the result in a file; /// ~~~; ///; /// The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; /// from the fitted function.; ///; /// ### Associated functions; ///; /// One or more object (typically a TF1*) can be added to the list; /// of functions (fFunctions) associated to each graph.; /// When TGraph::Fit is invoked, the fitted function is added to this list.; /// Given a graph gr, one can retrieve an associated function; /// with:; /// ~~~ {.cpp}; /// TF1 *myfunc = gr->GetFunction(""myfunc"");; /// ~~~; ///; /// If the graph is made persistent, the list of; /// associated functions is also persistent. Given a pointer (see above); /// to an associated function myfunc, one can retrieve the function/fit; /// parameters with calls such as:; /// ~~~ {.cpp}; /// Double_t chi2 = myfunc->GetChisquare();; /// Double_t par0 = myfunc->GetPa",MatchSource.CODE_COMMENT,hist/hist/src/TMultiGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx:5136,Availability,error,error,5136," specify option ""U"" and; /// call the following function:; /// ~~~ {.cpp}; /// TVirtualFitter::Fitter(mygraph)->SetFCN(MyFittingFunction); /// ~~~; /// where MyFittingFunction is of type:; /// ~~~ {.cpp}; /// extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; /// ~~~; ///; /// ### Access to the fit result; ///; /// The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; /// By default the TFitResultPtr contains only the status of the fit and it converts; /// automatically to an integer. If the option ""S"" is instead used, TFitResultPtr contains; /// the TFitResult and behaves as a smart pointer to it. For example one can do:; /// ~~~ {.cpp}; /// TFitResultPtr r = graph->Fit(""myFunc"",""S"");; /// TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; /// Double_t par0 = r->Parameter(0); // retrieve the value for the parameter 0; /// Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; /// r->Print(""V""); // print full information of fit including covariance matrix; /// r->Write(); // store the result in a file; /// ~~~; ///; /// The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; /// from the fitted function.; ///; /// ### Associated functions; ///; /// One or more object (typically a TF1*) can be added to the list; /// of functions (fFunctions) associated to each graph.; /// When TGraph::Fit is invoked, the fitted function is added to this list.; /// Given a graph gr, one can retrieve an associated function; /// with:; /// ~~~ {.cpp}; /// TF1 *myfunc = gr->GetFunction(""myfunc"");; /// ~~~; ///; /// If the graph is made persistent, the list of; /// associated functions is also persistent. Given a pointer (see above); /// to an associated function myfunc, one can retrieve the function/fit; /// parameters with calls such as:; /// ~~~ {.cpp}; /// Double_t chi2 = myfunc->GetChisquare();; /// Double_t par0 = myfunc->GetPa",MatchSource.CODE_COMMENT,hist/hist/src/TMultiGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx:6036,Availability,error,error,6036,"trieve the error for the parameter 0; /// r->Print(""V""); // print full information of fit including covariance matrix; /// r->Write(); // store the result in a file; /// ~~~; ///; /// The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; /// from the fitted function.; ///; /// ### Associated functions; ///; /// One or more object (typically a TF1*) can be added to the list; /// of functions (fFunctions) associated to each graph.; /// When TGraph::Fit is invoked, the fitted function is added to this list.; /// Given a graph gr, one can retrieve an associated function; /// with:; /// ~~~ {.cpp}; /// TF1 *myfunc = gr->GetFunction(""myfunc"");; /// ~~~; ///; /// If the graph is made persistent, the list of; /// associated functions is also persistent. Given a pointer (see above); /// to an associated function myfunc, one can retrieve the function/fit; /// parameters with calls such as:; /// ~~~ {.cpp}; /// Double_t chi2 = myfunc->GetChisquare();; /// Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; /// Double_t err0 = myfunc->GetParError(0); //error on first parameter; /// ~~~; ///; /// ### Fit Statistics; ///; /// You can change the statistics box to display the fit parameters with; /// the TStyle::SetOptFit(mode) method. This mode has four digits.; /// mode = pcev (default = 0111); ///; /// - v = 1; print name/values of parameters; /// - e = 1; print errors (if e=1, v must be 1); /// - c = 1; print Chisquare/Number of degrees of freedom; /// - p = 1; print Probability; ///; /// For example: `gStyle->SetOptFit(1011);`; /// prints the fit probability, parameter names/values, and errors.; /// You can change the position of the statistics box with these lines; /// (where g is a pointer to the TGraph):; ///; /// ~~~ {.cpp}; /// Root > TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats""); /// Root > st->SetX1NDC(newx1); //new x start position; /// Root > st->SetX2NDC(newx2); //new x end position; /// ~~~",MatchSource.CODE_COMMENT,hist/hist/src/TMultiGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx:6351,Availability,error,errors,6351,"trieve the error for the parameter 0; /// r->Print(""V""); // print full information of fit including covariance matrix; /// r->Write(); // store the result in a file; /// ~~~; ///; /// The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; /// from the fitted function.; ///; /// ### Associated functions; ///; /// One or more object (typically a TF1*) can be added to the list; /// of functions (fFunctions) associated to each graph.; /// When TGraph::Fit is invoked, the fitted function is added to this list.; /// Given a graph gr, one can retrieve an associated function; /// with:; /// ~~~ {.cpp}; /// TF1 *myfunc = gr->GetFunction(""myfunc"");; /// ~~~; ///; /// If the graph is made persistent, the list of; /// associated functions is also persistent. Given a pointer (see above); /// to an associated function myfunc, one can retrieve the function/fit; /// parameters with calls such as:; /// ~~~ {.cpp}; /// Double_t chi2 = myfunc->GetChisquare();; /// Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; /// Double_t err0 = myfunc->GetParError(0); //error on first parameter; /// ~~~; ///; /// ### Fit Statistics; ///; /// You can change the statistics box to display the fit parameters with; /// the TStyle::SetOptFit(mode) method. This mode has four digits.; /// mode = pcev (default = 0111); ///; /// - v = 1; print name/values of parameters; /// - e = 1; print errors (if e=1, v must be 1); /// - c = 1; print Chisquare/Number of degrees of freedom; /// - p = 1; print Probability; ///; /// For example: `gStyle->SetOptFit(1011);`; /// prints the fit probability, parameter names/values, and errors.; /// You can change the position of the statistics box with these lines; /// (where g is a pointer to the TGraph):; ///; /// ~~~ {.cpp}; /// Root > TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats""); /// Root > st->SetX1NDC(newx1); //new x start position; /// Root > st->SetX2NDC(newx2); //new x end position; /// ~~~",MatchSource.CODE_COMMENT,hist/hist/src/TMultiGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx:6582,Availability,error,errors,6582,"trieve the error for the parameter 0; /// r->Print(""V""); // print full information of fit including covariance matrix; /// r->Write(); // store the result in a file; /// ~~~; ///; /// The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; /// from the fitted function.; ///; /// ### Associated functions; ///; /// One or more object (typically a TF1*) can be added to the list; /// of functions (fFunctions) associated to each graph.; /// When TGraph::Fit is invoked, the fitted function is added to this list.; /// Given a graph gr, one can retrieve an associated function; /// with:; /// ~~~ {.cpp}; /// TF1 *myfunc = gr->GetFunction(""myfunc"");; /// ~~~; ///; /// If the graph is made persistent, the list of; /// associated functions is also persistent. Given a pointer (see above); /// to an associated function myfunc, one can retrieve the function/fit; /// parameters with calls such as:; /// ~~~ {.cpp}; /// Double_t chi2 = myfunc->GetChisquare();; /// Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; /// Double_t err0 = myfunc->GetParError(0); //error on first parameter; /// ~~~; ///; /// ### Fit Statistics; ///; /// You can change the statistics box to display the fit parameters with; /// the TStyle::SetOptFit(mode) method. This mode has four digits.; /// mode = pcev (default = 0111); ///; /// - v = 1; print name/values of parameters; /// - e = 1; print errors (if e=1, v must be 1); /// - c = 1; print Chisquare/Number of degrees of freedom; /// - p = 1; print Probability; ///; /// For example: `gStyle->SetOptFit(1011);`; /// prints the fit probability, parameter names/values, and errors.; /// You can change the position of the statistics box with these lines; /// (where g is a pointer to the TGraph):; ///; /// ~~~ {.cpp}; /// Root > TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats""); /// Root > st->SetX1NDC(newx1); //new x start position; /// Root > st->SetX2NDC(newx2); //new x end position; /// ~~~",MatchSource.CODE_COMMENT,hist/hist/src/TMultiGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx:4280,Security,Access,Access,4280,"8; /// Parameter 5 is fixed to 100.; ///; /// ### Fit range; ///; /// The fit range can be specified in two ways:; ///; /// - specify rxmax > rxmin (default is rxmin=rxmax=0); /// - specify the option ""R"". In this case, the function will be taken; /// instead of the full graph range.; ///; /// ### Changing the fitting function; ///; /// By default a chi2 fitting function is used for fitting the TGraphs's.; /// The function is implemented in `FitUtil::EvaluateChi2`.; /// In case of TGraphErrors an effective chi2 is used; /// (see TGraphErrors fit in TGraph::Fit) and is implemented in; /// `FitUtil::EvaluateChi2Effective`; /// To specify a User defined fitting function, specify option ""U"" and; /// call the following function:; /// ~~~ {.cpp}; /// TVirtualFitter::Fitter(mygraph)->SetFCN(MyFittingFunction); /// ~~~; /// where MyFittingFunction is of type:; /// ~~~ {.cpp}; /// extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; /// ~~~; ///; /// ### Access to the fit result; ///; /// The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; /// By default the TFitResultPtr contains only the status of the fit and it converts; /// automatically to an integer. If the option ""S"" is instead used, TFitResultPtr contains; /// the TFitResult and behaves as a smart pointer to it. For example one can do:; /// ~~~ {.cpp}; /// TFitResultPtr r = graph->Fit(""myFunc"",""S"");; /// TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; /// Double_t par0 = r->Parameter(0); // retrieve the value for the parameter 0; /// Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; /// r->Print(""V""); // print full information of fit including covariance matrix; /// r->Write(); // store the result in a file; /// ~~~; ///; /// The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; /// from the fitted function.; ///; /// ### Associated functions; ///; //",MatchSource.CODE_COMMENT,hist/hist/src/TMultiGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx:4781,Security,access,access,4781," specify option ""U"" and; /// call the following function:; /// ~~~ {.cpp}; /// TVirtualFitter::Fitter(mygraph)->SetFCN(MyFittingFunction); /// ~~~; /// where MyFittingFunction is of type:; /// ~~~ {.cpp}; /// extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; /// ~~~; ///; /// ### Access to the fit result; ///; /// The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; /// By default the TFitResultPtr contains only the status of the fit and it converts; /// automatically to an integer. If the option ""S"" is instead used, TFitResultPtr contains; /// the TFitResult and behaves as a smart pointer to it. For example one can do:; /// ~~~ {.cpp}; /// TFitResultPtr r = graph->Fit(""myFunc"",""S"");; /// TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; /// Double_t par0 = r->Parameter(0); // retrieve the value for the parameter 0; /// Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; /// r->Print(""V""); // print full information of fit including covariance matrix; /// r->Write(); // store the result in a file; /// ~~~; ///; /// The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; /// from the fitted function.; ///; /// ### Associated functions; ///; /// One or more object (typically a TF1*) can be added to the list; /// of functions (fFunctions) associated to each graph.; /// When TGraph::Fit is invoked, the fitted function is added to this list.; /// Given a graph gr, one can retrieve an associated function; /// with:; /// ~~~ {.cpp}; /// TF1 *myfunc = gr->GetFunction(""myfunc"");; /// ~~~; ///; /// If the graph is made persistent, the list of; /// associated functions is also persistent. Given a pointer (see above); /// to an associated function myfunc, one can retrieve the function/fit; /// parameters with calls such as:; /// ~~~ {.cpp}; /// Double_t chi2 = myfunc->GetChisquare();; /// Double_t par0 = myfunc->GetPa",MatchSource.CODE_COMMENT,hist/hist/src/TMultiGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx:7,Modifiability,plugin,plugin,7,"// use plugin manager to create instance of TFitEditor",MatchSource.CODE_COMMENT,hist/hist/src/TMultiGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx:336,Integrability,rout,routine,336,"////////////////////////////////////////////////////////////////////////////////; /// Least squares lpolynomial fitting without weights.; ///; /// - m number of parameters; /// - a array of parameters; /// - first 1st point number to fit (default =0); /// - last last point number to fit (default=fNpoints-1); ///; /// based on CERNLIB routine LSQ: Translated to C++ by Rene Brun",MatchSource.CODE_COMMENT,hist/hist/src/TMultiGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx:303,Deployability,update,updated,303,"////////////////////////////////////////////////////////////////////////////////; /// Returns a pointer to the histogram used to draw the axis.; /// Takes into account following cases.; ///; /// 1. if `fHistogram` exists it is returned; /// 2. if `fHistogram` doesn't exists and `gPad` exists `gPad` is updated. That; /// may trigger the creation of `fHistogram`. If `fHistogram` still does not; /// exit but `hframe` does (if user called `TPad::DrawFrame`) the pointer to; /// `hframe` histogram is returned; /// 3. after the two previous steps, if `fHistogram` still doesn't exist, then; /// it is created.",MatchSource.CODE_COMMENT,hist/hist/src/TMultiGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx:7,Usability,ux,uxmin,7,"//else uxmin = 0;",MatchSource.CODE_COMMENT,hist/hist/src/TMultiGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx:7,Usability,ux,uxmax,7,"//else uxmax = 0;",MatchSource.CODE_COMMENT,hist/hist/src/TMultiGraph.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPolyMarker.cxx:2,Modifiability,extend,extend,2,"//extend this polymarker to hold npoints",MatchSource.CODE_COMMENT,hist/hist/src/TPolyMarker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPolyMarker.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPolyMarker.cxx:184,Modifiability,extend,extended,184,"////////////////////////////////////////////////////////////////////////////////; /// Set point number n.; /// if n is greater than the current size, the arrays are automatically; /// extended",MatchSource.CODE_COMMENT,hist/hist/src/TPolyMarker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPolyMarker.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPolyMarker.cxx:6,Energy Efficiency,allocate,allocate,6,"// re-allocate the object",MatchSource.CODE_COMMENT,hist/hist/src/TPolyMarker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPolyMarker.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:5355,Availability,error,error,5355,"t of; coordinate vectors, which hopefully provide easier feature; identification and dimensionality reduction. Let's define the covariance matrix:; \f[; \mathsf{C} = \left\langle\mathbf{y}\mathbf{y}^T\right\rangle; \quad\mbox{where}\quad; \mathbf{y} = \mathbf{x} - \left\langle\mathbf{x}\right\rangle\,,; \f]; and the brackets indicate mean value over the sample of \f$M\f$; prototypes. This matrix \f$\mathsf{C}\f$ is real, positive definite, symmetric, and will; have all its eigenvalues greater then zero. It will now be show that; among the family of all the complete orthonormal bases of the pattern; space, the base formed by the eigenvectors of the covariance matrix; and belonging to the largest eigenvalues, corresponds to the most; significant features of the description of the original prototypes. let the prototypes be expanded on into a set of \f$N\f$ basis vectors; \f$\mathbf{e}_n, n=0,\ldots,N,N+1, \ldots, P-1\f$; \f[; \mathbf{y}_i = \sum^N_{i=0} a_{i_n} \mathbf{e}_n,; \quad; i = 1, \ldots, M,; \quad; N < P-1; \f]; The `best' feature coordinates \f$\mathbf{e}_n\f$, spanning a *feature; space*, will be obtained by minimizing the error due to this; truncated expansion, i.e.,; \f[; \min\left(E_N\right) =; \min\left[\left\langle\left(\mathbf{y}_i - \sum^N_{i=0} a_{i_n} \mathbf{e}_n\right)^2\right\rangle\right]; \f]; with the conditions:; \f[; \mathbf{e}_k\bullet\mathbf{e}_j = \delta_{jk} =; \left\{\begin{array}{rcl}; 1 & \mbox{for} & k = j\\; 0 & \mbox{for} & k \neq j; \end{array}\right.; \f]; Multiplying (3) by \f$\mathbf{e}^T_n\f$ using (5),; we get; \f[; a_{i_n} = \mathbf{y}_i^T\bullet\mathbf{e}_n\,,; \f]; so the error becomes; \f{eqnarray*}{; E_N &=&; \left\langle\left[\sum_{n=N+1}^{P-1} a_{i_n}\mathbf{e}_n\right]^2\right\rangle\nonumber\\; &=&; \left\langle\left[\sum_{n=N+1}^{P-1} \mathbf{y}_i^T\bullet\mathbf{e}_n\mathbf{e}_n\right]^2\right\rangle\nonumber\\; &=&; \left\langle\sum_{n=N+1}^{P-1} \mathbf{e}_n^T\mathbf{y}_i\mathbf{y}_i^T\mathbf{e}_n\right\rangle\no",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:5849,Availability,error,error,5849,"ors; \f$\mathbf{e}_n, n=0,\ldots,N,N+1, \ldots, P-1\f$; \f[; \mathbf{y}_i = \sum^N_{i=0} a_{i_n} \mathbf{e}_n,; \quad; i = 1, \ldots, M,; \quad; N < P-1; \f]; The `best' feature coordinates \f$\mathbf{e}_n\f$, spanning a *feature; space*, will be obtained by minimizing the error due to this; truncated expansion, i.e.,; \f[; \min\left(E_N\right) =; \min\left[\left\langle\left(\mathbf{y}_i - \sum^N_{i=0} a_{i_n} \mathbf{e}_n\right)^2\right\rangle\right]; \f]; with the conditions:; \f[; \mathbf{e}_k\bullet\mathbf{e}_j = \delta_{jk} =; \left\{\begin{array}{rcl}; 1 & \mbox{for} & k = j\\; 0 & \mbox{for} & k \neq j; \end{array}\right.; \f]; Multiplying (3) by \f$\mathbf{e}^T_n\f$ using (5),; we get; \f[; a_{i_n} = \mathbf{y}_i^T\bullet\mathbf{e}_n\,,; \f]; so the error becomes; \f{eqnarray*}{; E_N &=&; \left\langle\left[\sum_{n=N+1}^{P-1} a_{i_n}\mathbf{e}_n\right]^2\right\rangle\nonumber\\; &=&; \left\langle\left[\sum_{n=N+1}^{P-1} \mathbf{y}_i^T\bullet\mathbf{e}_n\mathbf{e}_n\right]^2\right\rangle\nonumber\\; &=&; \left\langle\sum_{n=N+1}^{P-1} \mathbf{e}_n^T\mathbf{y}_i\mathbf{y}_i^T\mathbf{e}_n\right\rangle\nonumber\\; &=&; \sum_{n=N+1}^{P-1} \mathbf{e}_n^T\mathsf{C}\mathbf{e}_n; \f}; The minimization of the sum in (7) is obtained when each; term \f$\mathbf{e}_n^\mathsf{C}\mathbf{e}_n\f$ is minimum, since \f$\mathsf{C}\f$ is; positive definite. By the method of Lagrange multipliers, and the; condition (5), we get; \f[; E_N = \sum^{P-1}_{n=N+1} \left(\mathbf{e}_n^T\mathsf{C}\mathbf{e}_n -; l_n\mathbf{e}_n^T\bullet\mathbf{e}_n + l_n\right); \f]; The minimum condition \f$\frac{dE_N}{d\mathbf{e}^T_n} = 0\f$ leads to the; equation; \f[; \mathsf{C}\mathbf{e}_n = l_n\mathbf{e}_n\,,; \f]; which shows that \f$\mathbf{e}_n\f$ is an eigenvector of the covariance; matrix \f$\mathsf{C}\f$ with eigenvalue \f$l_n\f$. The estimated minimum error is; then given by; \f[; E_N \sim \sum^{P-1}_{n=N+1} \mathbf{e}_n^T\bullet l_n\mathbf{e}_n; = \sum^{P-1}_{n=N+1} l_n\,,; \f]; where \f$l_n,\,",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:6935,Availability,error,error,6935,"f{e}_n\right]^2\right\rangle\nonumber\\; &=&; \left\langle\sum_{n=N+1}^{P-1} \mathbf{e}_n^T\mathbf{y}_i\mathbf{y}_i^T\mathbf{e}_n\right\rangle\nonumber\\; &=&; \sum_{n=N+1}^{P-1} \mathbf{e}_n^T\mathsf{C}\mathbf{e}_n; \f}; The minimization of the sum in (7) is obtained when each; term \f$\mathbf{e}_n^\mathsf{C}\mathbf{e}_n\f$ is minimum, since \f$\mathsf{C}\f$ is; positive definite. By the method of Lagrange multipliers, and the; condition (5), we get; \f[; E_N = \sum^{P-1}_{n=N+1} \left(\mathbf{e}_n^T\mathsf{C}\mathbf{e}_n -; l_n\mathbf{e}_n^T\bullet\mathbf{e}_n + l_n\right); \f]; The minimum condition \f$\frac{dE_N}{d\mathbf{e}^T_n} = 0\f$ leads to the; equation; \f[; \mathsf{C}\mathbf{e}_n = l_n\mathbf{e}_n\,,; \f]; which shows that \f$\mathbf{e}_n\f$ is an eigenvector of the covariance; matrix \f$\mathsf{C}\f$ with eigenvalue \f$l_n\f$. The estimated minimum error is; then given by; \f[; E_N \sim \sum^{P-1}_{n=N+1} \mathbf{e}_n^T\bullet l_n\mathbf{e}_n; = \sum^{P-1}_{n=N+1} l_n\,,; \f]; where \f$l_n,\,n=N+1,\ldots,P\f$ \f$l_n,\,n=N+1,\ldots,P-1\f$ are the eigenvalues associated with the; omitted eigenvectors in the expansion (3). Thus, by choosing; the \f$N\f$ largest eigenvalues, and their associated eigenvectors, the; error \f$E_N\f$ is minimized. The transformation matrix to go from the pattern space to the feature; space consists of the ordered eigenvectors \f$\mathbf{e}_1,\ldots,\mathbf{e}_P\f$; \f$\mathbf{e}_0,\ldots,\mathbf{e}_{P-1}\f$ for its columns; \f[; \mathsf{T} = \left[; \begin{array}{cccc}; \mathbf{e}_0 &; \mathbf{e}_1 &; \vdots &; \mathbf{e}_{P-1}; \end{array}\right]; = \left[; \begin{array}{cccc}; \mathbf{e}_{0_0} & \mathbf{e}_{1_0} & \cdots & \mathbf{e}_{{P-1}_0}\\; \mathbf{e}_{0_1} & \mathbf{e}_{1_1} & \cdots & \mathbf{e}_{{P-1}_1}\\; \vdots & \vdots & \ddots & \vdots \\; \mathbf{e}_{0_{P-1}} & \mathbf{e}_{1_{P-1}} & \cdots & \mathbf{e}_{{P-1}_{P-1}}\\; \end{array}\right]; \f]; This is an orthogonal transformation, or rotation, of the pattern; s",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:7304,Availability,error,error,7304,"ight\rangle\nonumber\\; &=&; \sum_{n=N+1}^{P-1} \mathbf{e}_n^T\mathsf{C}\mathbf{e}_n; \f}; The minimization of the sum in (7) is obtained when each; term \f$\mathbf{e}_n^\mathsf{C}\mathbf{e}_n\f$ is minimum, since \f$\mathsf{C}\f$ is; positive definite. By the method of Lagrange multipliers, and the; condition (5), we get; \f[; E_N = \sum^{P-1}_{n=N+1} \left(\mathbf{e}_n^T\mathsf{C}\mathbf{e}_n -; l_n\mathbf{e}_n^T\bullet\mathbf{e}_n + l_n\right); \f]; The minimum condition \f$\frac{dE_N}{d\mathbf{e}^T_n} = 0\f$ leads to the; equation; \f[; \mathsf{C}\mathbf{e}_n = l_n\mathbf{e}_n\,,; \f]; which shows that \f$\mathbf{e}_n\f$ is an eigenvector of the covariance; matrix \f$\mathsf{C}\f$ with eigenvalue \f$l_n\f$. The estimated minimum error is; then given by; \f[; E_N \sim \sum^{P-1}_{n=N+1} \mathbf{e}_n^T\bullet l_n\mathbf{e}_n; = \sum^{P-1}_{n=N+1} l_n\,,; \f]; where \f$l_n,\,n=N+1,\ldots,P\f$ \f$l_n,\,n=N+1,\ldots,P-1\f$ are the eigenvalues associated with the; omitted eigenvectors in the expansion (3). Thus, by choosing; the \f$N\f$ largest eigenvalues, and their associated eigenvectors, the; error \f$E_N\f$ is minimized. The transformation matrix to go from the pattern space to the feature; space consists of the ordered eigenvectors \f$\mathbf{e}_1,\ldots,\mathbf{e}_P\f$; \f$\mathbf{e}_0,\ldots,\mathbf{e}_{P-1}\f$ for its columns; \f[; \mathsf{T} = \left[; \begin{array}{cccc}; \mathbf{e}_0 &; \mathbf{e}_1 &; \vdots &; \mathbf{e}_{P-1}; \end{array}\right]; = \left[; \begin{array}{cccc}; \mathbf{e}_{0_0} & \mathbf{e}_{1_0} & \cdots & \mathbf{e}_{{P-1}_0}\\; \mathbf{e}_{0_1} & \mathbf{e}_{1_1} & \cdots & \mathbf{e}_{{P-1}_1}\\; \vdots & \vdots & \ddots & \vdots \\; \mathbf{e}_{0_{P-1}} & \mathbf{e}_{1_{P-1}} & \cdots & \mathbf{e}_{{P-1}_{P-1}}\\; \end{array}\right]; \f]; This is an orthogonal transformation, or rotation, of the pattern; space and feature selection results in ignoring certain coordinates; in the transformed space. Christian Holm August 2000, CERN; */",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:812,Energy Efficiency,power,powerful,812,"// @(#)root/hist:$Id$; // Author: Christian Holm Christensen 1/8/2000; /*************************************************************************; * Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPrincipal; \ingroup Hist; Principal Components Analysis (PCA). The current implementation is based on the LINTRA package from CERNLIB; by R. Brun, H. Hansroul, and J. Kubler.; The class has been implemented by Christian Holm Christensen in August 2000. ## Introduction. In many applications of various fields of research, the treatment of; large amounts of data requires powerful techniques capable of rapid; data reduction and analysis. Usually, the quantities most; conveniently measured by the experimentalist, are not necessarily the; most significant for classification and analysis of the data. It is; then useful to have a way of selecting an optimal set of variables; necessary for the recognition process and reducing the dimensionality; of the problem, resulting in an easier classification procedure. This paper describes the implementation of one such method of; feature selection, namely the principal components analysis. This; multidimensional technique is well known in the field of pattern; recognition and and its use in Particle Physics has been documented; elsewhere (cf. H. Wind, <I>Function Parameterization</I>, CERN; 72-21). ## Overview; Suppose we have prototypes which are trajectories of particles,; passing through a spectrometer. If one measures the passage of the; particle at say 8 fixed planes, the trajectory is described by an; 8-component vector:; \f[; \mathbf{x} = \left(x_0, x_1, \ldots, x_7\right); \f]; in 8-dimensional pattern space. One proceeds by generating a representative tracks sample and; building up the covaria",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:1106,Modifiability,variab,variables,1106," * Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPrincipal; \ingroup Hist; Principal Components Analysis (PCA). The current implementation is based on the LINTRA package from CERNLIB; by R. Brun, H. Hansroul, and J. Kubler.; The class has been implemented by Christian Holm Christensen in August 2000. ## Introduction. In many applications of various fields of research, the treatment of; large amounts of data requires powerful techniques capable of rapid; data reduction and analysis. Usually, the quantities most; conveniently measured by the experimentalist, are not necessarily the; most significant for classification and analysis of the data. It is; then useful to have a way of selecting an optimal set of variables; necessary for the recognition process and reducing the dimensionality; of the problem, resulting in an easier classification procedure. This paper describes the implementation of one such method of; feature selection, namely the principal components analysis. This; multidimensional technique is well known in the field of pattern; recognition and and its use in Particle Physics has been documented; elsewhere (cf. H. Wind, <I>Function Parameterization</I>, CERN; 72-21). ## Overview; Suppose we have prototypes which are trajectories of particles,; passing through a spectrometer. If one measures the passage of the; particle at say 8 fixed planes, the trajectory is described by an; 8-component vector:; \f[; \mathbf{x} = \left(x_0, x_1, \ldots, x_7\right); \f]; in 8-dimensional pattern space. One proceeds by generating a representative tracks sample and; building up the covariance matrix \f$\mathsf{C}\f$. Its eigenvectors and; eigenvalues are computed by standard methods, and thus a new basis is; obtained for the origina",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:1554,Modifiability,Parameteriz,Parameterization,1554,"from CERNLIB; by R. Brun, H. Hansroul, and J. Kubler.; The class has been implemented by Christian Holm Christensen in August 2000. ## Introduction. In many applications of various fields of research, the treatment of; large amounts of data requires powerful techniques capable of rapid; data reduction and analysis. Usually, the quantities most; conveniently measured by the experimentalist, are not necessarily the; most significant for classification and analysis of the data. It is; then useful to have a way of selecting an optimal set of variables; necessary for the recognition process and reducing the dimensionality; of the problem, resulting in an easier classification procedure. This paper describes the implementation of one such method of; feature selection, namely the principal components analysis. This; multidimensional technique is well known in the field of pattern; recognition and and its use in Particle Physics has been documented; elsewhere (cf. H. Wind, <I>Function Parameterization</I>, CERN; 72-21). ## Overview; Suppose we have prototypes which are trajectories of particles,; passing through a spectrometer. If one measures the passage of the; particle at say 8 fixed planes, the trajectory is described by an; 8-component vector:; \f[; \mathbf{x} = \left(x_0, x_1, \ldots, x_7\right); \f]; in 8-dimensional pattern space. One proceeds by generating a representative tracks sample and; building up the covariance matrix \f$\mathsf{C}\f$. Its eigenvectors and; eigenvalues are computed by standard methods, and thus a new basis is; obtained for the original 8-dimensional space the expansion of the; prototypes,; \f[; \mathbf{x}_m = \sum^7_{i=0} a_{m_i} \mathbf{e}_i; \quad; \mbox{where}; \quad; a_{m_i} = \mathbf{x}^T\bullet\mathbf{e}_i; \f]; allows the study of the behavior of the coefficients \f$a_{m_i}\f$ for all; the tracks of the sample. The eigenvectors which are insignificant for; the trajectory description in the expansion will have their; corresponding coef",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:2835,Modifiability,variab,variables,2835,"ional pattern space. One proceeds by generating a representative tracks sample and; building up the covariance matrix \f$\mathsf{C}\f$. Its eigenvectors and; eigenvalues are computed by standard methods, and thus a new basis is; obtained for the original 8-dimensional space the expansion of the; prototypes,; \f[; \mathbf{x}_m = \sum^7_{i=0} a_{m_i} \mathbf{e}_i; \quad; \mbox{where}; \quad; a_{m_i} = \mathbf{x}^T\bullet\mathbf{e}_i; \f]; allows the study of the behavior of the coefficients \f$a_{m_i}\f$ for all; the tracks of the sample. The eigenvectors which are insignificant for; the trajectory description in the expansion will have their; corresponding coefficients \f$a_{m_i}\f$ close to zero for all the; prototypes. On one hand, a reduction of the dimensionality is then obtained by; omitting these least significant vectors in the subsequent analysis. On the other hand, in the analysis of real data, these least; significant variables(?) can be used for the pattern; recognition problem of extracting the valid combinations of; coordinates describing a true trajectory from the set of all possible; wrong combinations. The program described here performs this principal components analysis; on a sample of data provided by the user. It computes the covariance; matrix, its eigenvalues ands corresponding eigenvectors and exhibits; the behavior of the principal components \f$a_{m_i}\f$, thus providing; to the user all the means of understanding their data. ## Principal Components Method; Let's consider a sample of \f$M\f$ prototypes each being characterized by; \f$P\f$ variables \f$x_0, x_1, \ldots, x_{P-1}\f$. Each prototype is a point, or a; column vector, in a \f$P\f$-dimensional *Pattern space*.; \f[; \mathbf{x} = \left[\begin{array}{c}; x_0\\x_1\\\vdots\\x_{P-1}\end{array}\right]\,,; \f]; where each \f$x_n\f$ represents the particular value associated with the; \f$n\f$-dimension. Those \f$P\f$ variables are the quantities accessible to the; experimentalist, but are no",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:3483,Modifiability,variab,variables,3483,"vectors which are insignificant for; the trajectory description in the expansion will have their; corresponding coefficients \f$a_{m_i}\f$ close to zero for all the; prototypes. On one hand, a reduction of the dimensionality is then obtained by; omitting these least significant vectors in the subsequent analysis. On the other hand, in the analysis of real data, these least; significant variables(?) can be used for the pattern; recognition problem of extracting the valid combinations of; coordinates describing a true trajectory from the set of all possible; wrong combinations. The program described here performs this principal components analysis; on a sample of data provided by the user. It computes the covariance; matrix, its eigenvalues ands corresponding eigenvectors and exhibits; the behavior of the principal components \f$a_{m_i}\f$, thus providing; to the user all the means of understanding their data. ## Principal Components Method; Let's consider a sample of \f$M\f$ prototypes each being characterized by; \f$P\f$ variables \f$x_0, x_1, \ldots, x_{P-1}\f$. Each prototype is a point, or a; column vector, in a \f$P\f$-dimensional *Pattern space*.; \f[; \mathbf{x} = \left[\begin{array}{c}; x_0\\x_1\\\vdots\\x_{P-1}\end{array}\right]\,,; \f]; where each \f$x_n\f$ represents the particular value associated with the; \f$n\f$-dimension. Those \f$P\f$ variables are the quantities accessible to the; experimentalist, but are not necessarily the most significant for the; classification purpose. The *Principal Components Method* consists of applying a; *linear* transformation to the original variables. This; transformation is described by an orthogonal matrix and is equivalent; to a rotation of the original pattern space into a new set of; coordinate vectors, which hopefully provide easier feature; identification and dimensionality reduction. Let's define the covariance matrix:; \f[; \mathsf{C} = \left\langle\mathbf{y}\mathbf{y}^T\right\rangle; \quad\mbox{where}\quad; \m",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:3819,Modifiability,variab,variables,3819,"nition problem of extracting the valid combinations of; coordinates describing a true trajectory from the set of all possible; wrong combinations. The program described here performs this principal components analysis; on a sample of data provided by the user. It computes the covariance; matrix, its eigenvalues ands corresponding eigenvectors and exhibits; the behavior of the principal components \f$a_{m_i}\f$, thus providing; to the user all the means of understanding their data. ## Principal Components Method; Let's consider a sample of \f$M\f$ prototypes each being characterized by; \f$P\f$ variables \f$x_0, x_1, \ldots, x_{P-1}\f$. Each prototype is a point, or a; column vector, in a \f$P\f$-dimensional *Pattern space*.; \f[; \mathbf{x} = \left[\begin{array}{c}; x_0\\x_1\\\vdots\\x_{P-1}\end{array}\right]\,,; \f]; where each \f$x_n\f$ represents the particular value associated with the; \f$n\f$-dimension. Those \f$P\f$ variables are the quantities accessible to the; experimentalist, but are not necessarily the most significant for the; classification purpose. The *Principal Components Method* consists of applying a; *linear* transformation to the original variables. This; transformation is described by an orthogonal matrix and is equivalent; to a rotation of the original pattern space into a new set of; coordinate vectors, which hopefully provide easier feature; identification and dimensionality reduction. Let's define the covariance matrix:; \f[; \mathsf{C} = \left\langle\mathbf{y}\mathbf{y}^T\right\rangle; \quad\mbox{where}\quad; \mathbf{y} = \mathbf{x} - \left\langle\mathbf{x}\right\rangle\,,; \f]; and the brackets indicate mean value over the sample of \f$M\f$; prototypes. This matrix \f$\mathsf{C}\f$ is real, positive definite, symmetric, and will; have all its eigenvalues greater then zero. It will now be show that; among the family of all the complete orthonormal bases of the pattern; space, the base formed by the eigenvectors of the covariance matrix; and",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:4060,Modifiability,variab,variables,4060,"combinations. The program described here performs this principal components analysis; on a sample of data provided by the user. It computes the covariance; matrix, its eigenvalues ands corresponding eigenvectors and exhibits; the behavior of the principal components \f$a_{m_i}\f$, thus providing; to the user all the means of understanding their data. ## Principal Components Method; Let's consider a sample of \f$M\f$ prototypes each being characterized by; \f$P\f$ variables \f$x_0, x_1, \ldots, x_{P-1}\f$. Each prototype is a point, or a; column vector, in a \f$P\f$-dimensional *Pattern space*.; \f[; \mathbf{x} = \left[\begin{array}{c}; x_0\\x_1\\\vdots\\x_{P-1}\end{array}\right]\,,; \f]; where each \f$x_n\f$ represents the particular value associated with the; \f$n\f$-dimension. Those \f$P\f$ variables are the quantities accessible to the; experimentalist, but are not necessarily the most significant for the; classification purpose. The *Principal Components Method* consists of applying a; *linear* transformation to the original variables. This; transformation is described by an orthogonal matrix and is equivalent; to a rotation of the original pattern space into a new set of; coordinate vectors, which hopefully provide easier feature; identification and dimensionality reduction. Let's define the covariance matrix:; \f[; \mathsf{C} = \left\langle\mathbf{y}\mathbf{y}^T\right\rangle; \quad\mbox{where}\quad; \mathbf{y} = \mathbf{x} - \left\langle\mathbf{x}\right\rangle\,,; \f]; and the brackets indicate mean value over the sample of \f$M\f$; prototypes. This matrix \f$\mathsf{C}\f$ is real, positive definite, symmetric, and will; have all its eigenvalues greater then zero. It will now be show that; among the family of all the complete orthonormal bases of the pattern; space, the base formed by the eigenvectors of the covariance matrix; and belonging to the largest eigenvalues, corresponds to the most; significant features of the description of the original prototypes. l",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:3056,Performance,perform,performs,3056,"ard methods, and thus a new basis is; obtained for the original 8-dimensional space the expansion of the; prototypes,; \f[; \mathbf{x}_m = \sum^7_{i=0} a_{m_i} \mathbf{e}_i; \quad; \mbox{where}; \quad; a_{m_i} = \mathbf{x}^T\bullet\mathbf{e}_i; \f]; allows the study of the behavior of the coefficients \f$a_{m_i}\f$ for all; the tracks of the sample. The eigenvectors which are insignificant for; the trajectory description in the expansion will have their; corresponding coefficients \f$a_{m_i}\f$ close to zero for all the; prototypes. On one hand, a reduction of the dimensionality is then obtained by; omitting these least significant vectors in the subsequent analysis. On the other hand, in the analysis of real data, these least; significant variables(?) can be used for the pattern; recognition problem of extracting the valid combinations of; coordinates describing a true trajectory from the set of all possible; wrong combinations. The program described here performs this principal components analysis; on a sample of data provided by the user. It computes the covariance; matrix, its eigenvalues ands corresponding eigenvectors and exhibits; the behavior of the principal components \f$a_{m_i}\f$, thus providing; to the user all the means of understanding their data. ## Principal Components Method; Let's consider a sample of \f$M\f$ prototypes each being characterized by; \f$P\f$ variables \f$x_0, x_1, \ldots, x_{P-1}\f$. Each prototype is a point, or a; column vector, in a \f$P\f$-dimensional *Pattern space*.; \f[; \mathbf{x} = \left[\begin{array}{c}; x_0\\x_1\\\vdots\\x_{P-1}\end{array}\right]\,,; \f]; where each \f$x_n\f$ represents the particular value associated with the; \f$n\f$-dimension. Those \f$P\f$ variables are the quantities accessible to the; experimentalist, but are not necessarily the most significant for the; classification purpose. The *Principal Components Method* consists of applying a; *linear* transformation to the original variables. This; transfor",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:3848,Security,access,accessible,3848,"nition problem of extracting the valid combinations of; coordinates describing a true trajectory from the set of all possible; wrong combinations. The program described here performs this principal components analysis; on a sample of data provided by the user. It computes the covariance; matrix, its eigenvalues ands corresponding eigenvectors and exhibits; the behavior of the principal components \f$a_{m_i}\f$, thus providing; to the user all the means of understanding their data. ## Principal Components Method; Let's consider a sample of \f$M\f$ prototypes each being characterized by; \f$P\f$ variables \f$x_0, x_1, \ldots, x_{P-1}\f$. Each prototype is a point, or a; column vector, in a \f$P\f$-dimensional *Pattern space*.; \f[; \mathbf{x} = \left[\begin{array}{c}; x_0\\x_1\\\vdots\\x_{P-1}\end{array}\right]\,,; \f]; where each \f$x_n\f$ represents the particular value associated with the; \f$n\f$-dimension. Those \f$P\f$ variables are the quantities accessible to the; experimentalist, but are not necessarily the most significant for the; classification purpose. The *Principal Components Method* consists of applying a; *linear* transformation to the original variables. This; transformation is described by an orthogonal matrix and is equivalent; to a rotation of the original pattern space into a new set of; coordinate vectors, which hopefully provide easier feature; identification and dimensionality reduction. Let's define the covariance matrix:; \f[; \mathsf{C} = \left\langle\mathbf{y}\mathbf{y}^T\right\rangle; \quad\mbox{where}\quad; \mathbf{y} = \mathbf{x} - \left\langle\mathbf{x}\right\rangle\,,; \f]; and the brackets indicate mean value over the sample of \f$M\f$; prototypes. This matrix \f$\mathsf{C}\f$ is real, positive definite, symmetric, and will; have all its eigenvalues greater then zero. It will now be show that; among the family of all the complete orthonormal bases of the pattern; space, the base formed by the eigenvectors of the covariance matrix; and",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:121,Modifiability,variab,variables,121,"////////////////////////////////////////////////////////////////////////////////; /// Constructor. Argument is number of variables in the sample of data; /// Options are:; /// - N Normalize the covariance matrix (default); /// - D Store input data (default); ///; /// The created object is named ""principal"" by default.",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:866,Availability,error,errors,866,"////////////////////////////////////////////////////////////////////////////////; /// Add a data point and update the covariance matrix. The input; /// array must be <TT>fNumberOfVariables</TT> long.; ///; ///; /// The Covariance matrix and mean values of the input data is calculated; /// on the fly by the following equations:; ///; /// \f[; /// \left<x_i\right>^{(0)} = x_{i0}; /// \f]; ///; ///; /// \f[; /// \left<x_i\right>^{(n)} = \left<x_i\right>^{(n-1)}; /// + \frac1n \left(x_{in} - \left<x_i\right>^{(n-1)}\right); /// \f]; ///; /// \f[; /// C_{ij}^{(0)} = 0; /// \f]; ///; ///; ///; /// \f[; /// C_{ij}^{(n)} = C_{ij}^{(n-1)}; /// + \frac1{n-1}\left[\left(x_{in} - \left<x_i\right>^{(n)}\right); /// \left(x_{jn} - \left<x_j\right>^{(n)}\right)\right]; /// - \frac1n C_{ij}^{(n-1)}; /// \f]; ///; /// since this is a really fast method, with no rounding errors (please; /// refer to CERN 72-21 pp. 54-106).; ///; ///; /// The data is stored internally in a <TT>TVectorD</TT>, in the following; /// way:; ///; /// \f[; /// \mathbf{x} = \left[\left(x_{0_0},\ldots,x_{{P-1}_0}\right),\ldots,; /// \left(x_{0_i},\ldots,x_{{P-1}_i}\right), \ldots\right]; /// \f]; ///; /// With \f$P\f$ as defined in the class description.",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:107,Deployability,update,update,107,"////////////////////////////////////////////////////////////////////////////////; /// Add a data point and update the covariance matrix. The input; /// array must be <TT>fNumberOfVariables</TT> long.; ///; ///; /// The Covariance matrix and mean values of the input data is calculated; /// on the fly by the following equations:; ///; /// \f[; /// \left<x_i\right>^{(0)} = x_{i0}; /// \f]; ///; ///; /// \f[; /// \left<x_i\right>^{(n)} = \left<x_i\right>^{(n-1)}; /// + \frac1n \left(x_{in} - \left<x_i\right>^{(n-1)}\right); /// \f]; ///; /// \f[; /// C_{ij}^{(0)} = 0; /// \f]; ///; ///; ///; /// \f[; /// C_{ij}^{(n)} = C_{ij}^{(n-1)}; /// + \frac1{n-1}\left[\left(x_{in} - \left<x_i\right>^{(n)}\right); /// \left(x_{jn} - \left<x_j\right>^{(n)}\right)\right]; /// - \frac1n C_{ij}^{(n-1)}; /// \f]; ///; /// since this is a really fast method, with no rounding errors (please; /// refer to CERN 72-21 pp. 54-106).; ///; ///; /// The data is stored internally in a <TT>TVectorD</TT>, in the following; /// way:; ///; /// \f[; /// \mathbf{x} = \left[\left(x_{0_0},\ldots,x_{{P-1}_0}\right),\ldots,; /// \left(x_{0_i},\ldots,x_{{P-1}_i}\right), \ldots\right]; /// \f]; ///; /// With \f$P\f$ as defined in the class description.",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:48,Security,access,access,48,"// use directly vector array for faster element access",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear the data in Object. Notice, that's not possible to change; /// the dimension of the original data.",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:516,Modifiability,variab,variables,516,"////////////////////////////////////////////////////////////////////////////////; /// Generates the file `<filename>`, with `.C` appended if it does; /// argument doesn't end in .cxx or .C.; ///; /// The file contains the implementation of two functions; /// ~~~ {.cpp}; /// void X2P(Double_t *x, Double *p); /// void P2X(Double_t *p, Double *x, Int_t nTest); /// ~~~; /// which does the same as `TPrincipal::X2P` and `TPrincipal::P2X`; /// respectively. Please refer to these methods.; ///; /// Further, the static variables:; /// ~~~ {.cpp}; /// Int_t gNVariables; /// Double_t gEigenValues[]; /// Double_t gEigenVectors[]; /// Double_t gMeanValues[]; /// Double_t gSigmaValues[]; /// ~~~; /// are initialized. The only ROOT header file needed is Rtypes.h; ///; /// See TPrincipal::MakeRealCode for a list of options",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:734,Modifiability,variab,variable,734,"////////////////////////////////////////////////////////////////////////////////; /// Make histograms of the result of the analysis.; /// The option string say which histograms to create; /// - X Histogram original data; /// - P Histogram principal components corresponding to; /// original data; /// - D Histogram the difference between the original data; /// and the projection of principal unto a lower; /// dimensional subspace (2D histograms); /// - E Histogram the eigenvalues; /// - S Histogram the square of the residues; /// (see `TPrincipal::SumOfSquareResiduals`); /// The histograms will be named `<name>_<type><number>`, where `<name>`; /// is the first argument, `<type>` is one of X,P,D,E,S, and `<number>`; /// is the variable.",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:3,Deployability,update,update,3,"// update the original data histogram",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:86,Performance,Perform,Perform,86,"////////////////////////////////////////////////////////////////////////////////; /// Perform the principal components analysis.; /// This is done in several stages in the TMatrix::EigenVectors method:; /// - Transform the covariance matrix into a tridiagonal matrix.; /// - Find the eigenvalues and vectors of the tridiagonal matrix.",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:195,Modifiability,variab,variables,195,"//; // Now for the data; //; // We make the Eigenvector matrix, Eigenvalue vector, Sigma vector,; // and Mean value vector static, since all are needed in both; // functions. Also ,the number of variables are stored in a static; // variable.",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:232,Modifiability,variab,variable,232,"//; // Now for the data; //; // We make the Eigenvector matrix, Eigenvalue vector, Sigma vector,; // and Mean value vector static, since all are needed in both; // functions. Also ,the number of variables are stored in a static; // variable.",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:309,Energy Efficiency,allocate,allocated,309,"////////////////////////////////////////////////////////////////////////////////; /// Calculate x as a function of nTest of the most significant; /// principal components p, and return it in x.; /// It's the users responsibility to make sure that both x and p are; /// of the right size (i.e., memory must be allocated for x).",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test the PCA, bye calculating the sum square of residuals; /// (see method SumOfSquareResiduals), and display the histogram",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:299,Energy Efficiency,allocate,allocated,299,"////////////////////////////////////////////////////////////////////////////////; /// Calculate the principal components from the original data vector; /// x, and return it in p.; ///; /// It's the users responsibility to make sure that both x and p are; /// of the right size (i.e., memory must be allocated for p).",MatchSource.CODE_COMMENT,hist/hist/src/TPrincipal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:130,Availability,error,error,130,"/** \class TProfile; \ingroup Histograms; Profile Histogram.; Profile histograms are used to display the mean; value of Y and its error for each bin in X. The displayed error is by default the; standard error on the mean (i.e. the standard deviation divided by the sqrt(n) ).; Profile histograms are in many cases an; elegant replacement of two-dimensional histograms. The inter-relation of two; measured quantities X and Y can always be visualized by a two-dimensional; histogram or scatter plot, but if Y is an unknown (but single-valued); approximate function of X, this function is displayed by a profile histogram with; much better precision than by a scatter plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for bin j.; \f[; \begin{align}; H(j) &= \sum w \cdot Y \\; E(j) &= \sum w \cdot Y^2 \\; W(j) &= \sum w & &\text{if weights different from 1, the number of bin effective entries is used} \\; h(j) &= H(j) / W(j) & &\text{mean of Y,} \\; s(j) &= \sqrt{E(j)/W(j)- h(j)^2} & &\text{standard deviation of Y} \\; e(j) &= s(j)/\sqrt{W(j)} & &\text{standard error on the mean} \\; \end{align}; \f]; The bin content is always the mean of the Y values, but errors change depending on options:; \f[; \begin{align}; \text{GetBinContent}(j) &= h(j) \\; \text{GetBinError}(j) &=; \begin{cases}; e(j) &\text{if option="""" (default). Error of the mean of all y values.} \\; s(j) &\text{if option=""s"". Standard deviation of all y values.} \\; \begin{cases} e(j) &\text{if } h(j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(j)} &\text{if option=""g"". Error of a weighted mean for combining measurements with variances of } w. \\; \end{cases}; \end{align}; \f]; In the special case where s(j) is zero (eg, case of 1 entry only in one bin); the bin error e(j) is computed from the avera",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:169,Availability,error,error,169,"/** \class TProfile; \ingroup Histograms; Profile Histogram.; Profile histograms are used to display the mean; value of Y and its error for each bin in X. The displayed error is by default the; standard error on the mean (i.e. the standard deviation divided by the sqrt(n) ).; Profile histograms are in many cases an; elegant replacement of two-dimensional histograms. The inter-relation of two; measured quantities X and Y can always be visualized by a two-dimensional; histogram or scatter plot, but if Y is an unknown (but single-valued); approximate function of X, this function is displayed by a profile histogram with; much better precision than by a scatter plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for bin j.; \f[; \begin{align}; H(j) &= \sum w \cdot Y \\; E(j) &= \sum w \cdot Y^2 \\; W(j) &= \sum w & &\text{if weights different from 1, the number of bin effective entries is used} \\; h(j) &= H(j) / W(j) & &\text{mean of Y,} \\; s(j) &= \sqrt{E(j)/W(j)- h(j)^2} & &\text{standard deviation of Y} \\; e(j) &= s(j)/\sqrt{W(j)} & &\text{standard error on the mean} \\; \end{align}; \f]; The bin content is always the mean of the Y values, but errors change depending on options:; \f[; \begin{align}; \text{GetBinContent}(j) &= h(j) \\; \text{GetBinError}(j) &=; \begin{cases}; e(j) &\text{if option="""" (default). Error of the mean of all y values.} \\; s(j) &\text{if option=""s"". Standard deviation of all y values.} \\; \begin{cases} e(j) &\text{if } h(j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(j)} &\text{if option=""g"". Error of a weighted mean for combining measurements with variances of } w. \\; \end{cases}; \end{align}; \f]; In the special case where s(j) is zero (eg, case of 1 entry only in one bin); the bin error e(j) is computed from the avera",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:203,Availability,error,error,203,"/** \class TProfile; \ingroup Histograms; Profile Histogram.; Profile histograms are used to display the mean; value of Y and its error for each bin in X. The displayed error is by default the; standard error on the mean (i.e. the standard deviation divided by the sqrt(n) ).; Profile histograms are in many cases an; elegant replacement of two-dimensional histograms. The inter-relation of two; measured quantities X and Y can always be visualized by a two-dimensional; histogram or scatter plot, but if Y is an unknown (but single-valued); approximate function of X, this function is displayed by a profile histogram with; much better precision than by a scatter plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for bin j.; \f[; \begin{align}; H(j) &= \sum w \cdot Y \\; E(j) &= \sum w \cdot Y^2 \\; W(j) &= \sum w & &\text{if weights different from 1, the number of bin effective entries is used} \\; h(j) &= H(j) / W(j) & &\text{mean of Y,} \\; s(j) &= \sqrt{E(j)/W(j)- h(j)^2} & &\text{standard deviation of Y} \\; e(j) &= s(j)/\sqrt{W(j)} & &\text{standard error on the mean} \\; \end{align}; \f]; The bin content is always the mean of the Y values, but errors change depending on options:; \f[; \begin{align}; \text{GetBinContent}(j) &= h(j) \\; \text{GetBinError}(j) &=; \begin{cases}; e(j) &\text{if option="""" (default). Error of the mean of all y values.} \\; s(j) &\text{if option=""s"". Standard deviation of all y values.} \\; \begin{cases} e(j) &\text{if } h(j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(j)} &\text{if option=""g"". Error of a weighted mean for combining measurements with variances of } w. \\; \end{cases}; \end{align}; \f]; In the special case where s(j) is zero (eg, case of 1 entry only in one bin); the bin error e(j) is computed from the avera",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:1184,Availability,error,error,1184,"n in X. The displayed error is by default the; standard error on the mean (i.e. the standard deviation divided by the sqrt(n) ).; Profile histograms are in many cases an; elegant replacement of two-dimensional histograms. The inter-relation of two; measured quantities X and Y can always be visualized by a two-dimensional; histogram or scatter plot, but if Y is an unknown (but single-valued); approximate function of X, this function is displayed by a profile histogram with; much better precision than by a scatter plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for bin j.; \f[; \begin{align}; H(j) &= \sum w \cdot Y \\; E(j) &= \sum w \cdot Y^2 \\; W(j) &= \sum w & &\text{if weights different from 1, the number of bin effective entries is used} \\; h(j) &= H(j) / W(j) & &\text{mean of Y,} \\; s(j) &= \sqrt{E(j)/W(j)- h(j)^2} & &\text{standard deviation of Y} \\; e(j) &= s(j)/\sqrt{W(j)} & &\text{standard error on the mean} \\; \end{align}; \f]; The bin content is always the mean of the Y values, but errors change depending on options:; \f[; \begin{align}; \text{GetBinContent}(j) &= h(j) \\; \text{GetBinError}(j) &=; \begin{cases}; e(j) &\text{if option="""" (default). Error of the mean of all y values.} \\; s(j) &\text{if option=""s"". Standard deviation of all y values.} \\; \begin{cases} e(j) &\text{if } h(j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(j)} &\text{if option=""g"". Error of a weighted mean for combining measurements with variances of } w. \\; \end{cases}; \end{align}; \f]; In the special case where s(j) is zero (eg, case of 1 entry only in one bin); the bin error e(j) is computed from the average of the s(j) for all bins if; the static function TProfile::Approximate() has been called.; This simple/crude approximation was suggested in orde",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:1281,Availability,error,errors,1281,"n in X. The displayed error is by default the; standard error on the mean (i.e. the standard deviation divided by the sqrt(n) ).; Profile histograms are in many cases an; elegant replacement of two-dimensional histograms. The inter-relation of two; measured quantities X and Y can always be visualized by a two-dimensional; histogram or scatter plot, but if Y is an unknown (but single-valued); approximate function of X, this function is displayed by a profile histogram with; much better precision than by a scatter plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for bin j.; \f[; \begin{align}; H(j) &= \sum w \cdot Y \\; E(j) &= \sum w \cdot Y^2 \\; W(j) &= \sum w & &\text{if weights different from 1, the number of bin effective entries is used} \\; h(j) &= H(j) / W(j) & &\text{mean of Y,} \\; s(j) &= \sqrt{E(j)/W(j)- h(j)^2} & &\text{standard deviation of Y} \\; e(j) &= s(j)/\sqrt{W(j)} & &\text{standard error on the mean} \\; \end{align}; \f]; The bin content is always the mean of the Y values, but errors change depending on options:; \f[; \begin{align}; \text{GetBinContent}(j) &= h(j) \\; \text{GetBinError}(j) &=; \begin{cases}; e(j) &\text{if option="""" (default). Error of the mean of all y values.} \\; s(j) &\text{if option=""s"". Standard deviation of all y values.} \\; \begin{cases} e(j) &\text{if } h(j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(j)} &\text{if option=""g"". Error of a weighted mean for combining measurements with variances of } w. \\; \end{cases}; \end{align}; \f]; In the special case where s(j) is zero (eg, case of 1 entry only in one bin); the bin error e(j) is computed from the average of the s(j) for all bins if; the static function TProfile::Approximate() has been called.; This simple/crude approximation was suggested in orde",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:1451,Availability,Error,Error,1451,"al; histogram or scatter plot, but if Y is an unknown (but single-valued); approximate function of X, this function is displayed by a profile histogram with; much better precision than by a scatter plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for bin j.; \f[; \begin{align}; H(j) &= \sum w \cdot Y \\; E(j) &= \sum w \cdot Y^2 \\; W(j) &= \sum w & &\text{if weights different from 1, the number of bin effective entries is used} \\; h(j) &= H(j) / W(j) & &\text{mean of Y,} \\; s(j) &= \sqrt{E(j)/W(j)- h(j)^2} & &\text{standard deviation of Y} \\; e(j) &= s(j)/\sqrt{W(j)} & &\text{standard error on the mean} \\; \end{align}; \f]; The bin content is always the mean of the Y values, but errors change depending on options:; \f[; \begin{align}; \text{GetBinContent}(j) &= h(j) \\; \text{GetBinError}(j) &=; \begin{cases}; e(j) &\text{if option="""" (default). Error of the mean of all y values.} \\; s(j) &\text{if option=""s"". Standard deviation of all y values.} \\; \begin{cases} e(j) &\text{if } h(j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(j)} &\text{if option=""g"". Error of a weighted mean for combining measurements with variances of } w. \\; \end{cases}; \end{align}; \f]; In the special case where s(j) is zero (eg, case of 1 entry only in one bin); the bin error e(j) is computed from the average of the s(j) for all bins if; the static function TProfile::Approximate() has been called.; This simple/crude approximation was suggested in order to keep the bin; during a fit operation. But note that this approximation is not the default behaviour.; See also TProfile::BuildOptions for more on error options. ### Creating and drawing a profile histogram; ~~~{.cpp}; {; auto c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; auto hprof = new TPro",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:1768,Availability,Error,Error,1768,"small letters) of the elements for bin j.; \f[; \begin{align}; H(j) &= \sum w \cdot Y \\; E(j) &= \sum w \cdot Y^2 \\; W(j) &= \sum w & &\text{if weights different from 1, the number of bin effective entries is used} \\; h(j) &= H(j) / W(j) & &\text{mean of Y,} \\; s(j) &= \sqrt{E(j)/W(j)- h(j)^2} & &\text{standard deviation of Y} \\; e(j) &= s(j)/\sqrt{W(j)} & &\text{standard error on the mean} \\; \end{align}; \f]; The bin content is always the mean of the Y values, but errors change depending on options:; \f[; \begin{align}; \text{GetBinContent}(j) &= h(j) \\; \text{GetBinError}(j) &=; \begin{cases}; e(j) &\text{if option="""" (default). Error of the mean of all y values.} \\; s(j) &\text{if option=""s"". Standard deviation of all y values.} \\; \begin{cases} e(j) &\text{if } h(j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(j)} &\text{if option=""g"". Error of a weighted mean for combining measurements with variances of } w. \\; \end{cases}; \end{align}; \f]; In the special case where s(j) is zero (eg, case of 1 entry only in one bin); the bin error e(j) is computed from the average of the s(j) for all bins if; the static function TProfile::Approximate() has been called.; This simple/crude approximation was suggested in order to keep the bin; during a fit operation. But note that this approximation is not the default behaviour.; See also TProfile::BuildOptions for more on error options. ### Creating and drawing a profile histogram; ~~~{.cpp}; {; auto c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; auto hprof = new TProfile(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; Float_t px, py, pz;; for ( Int_t i=0; i<25000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; hprof->Fill(px,pz,1);; }; hprof->Draw();; }; ~~~; */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor for Profile histogra",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:1964,Availability,error,error,1964,"l letters) of the elements for bin j.; \f[; \begin{align}; H(j) &= \sum w \cdot Y \\; E(j) &= \sum w \cdot Y^2 \\; W(j) &= \sum w & &\text{if weights different from 1, the number of bin effective entries is used} \\; h(j) &= H(j) / W(j) & &\text{mean of Y,} \\; s(j) &= \sqrt{E(j)/W(j)- h(j)^2} & &\text{standard deviation of Y} \\; e(j) &= s(j)/\sqrt{W(j)} & &\text{standard error on the mean} \\; \end{align}; \f]; The bin content is always the mean of the Y values, but errors change depending on options:; \f[; \begin{align}; \text{GetBinContent}(j) &= h(j) \\; \text{GetBinError}(j) &=; \begin{cases}; e(j) &\text{if option="""" (default). Error of the mean of all y values.} \\; s(j) &\text{if option=""s"". Standard deviation of all y values.} \\; \begin{cases} e(j) &\text{if } h(j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(j)} &\text{if option=""g"". Error of a weighted mean for combining measurements with variances of } w. \\; \end{cases}; \end{align}; \f]; In the special case where s(j) is zero (eg, case of 1 entry only in one bin); the bin error e(j) is computed from the average of the s(j) for all bins if; the static function TProfile::Approximate() has been called.; This simple/crude approximation was suggested in order to keep the bin; during a fit operation. But note that this approximation is not the default behaviour.; See also TProfile::BuildOptions for more on error options. ### Creating and drawing a profile histogram; ~~~{.cpp}; {; auto c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; auto hprof = new TProfile(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; Float_t px, py, pz;; for ( Int_t i=0; i<25000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; hprof->Fill(px,pz,1);; }; hprof->Draw();; }; ~~~; */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor for Profile histograms",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:2299,Availability,error,error,2299,"l letters) of the elements for bin j.; \f[; \begin{align}; H(j) &= \sum w \cdot Y \\; E(j) &= \sum w \cdot Y^2 \\; W(j) &= \sum w & &\text{if weights different from 1, the number of bin effective entries is used} \\; h(j) &= H(j) / W(j) & &\text{mean of Y,} \\; s(j) &= \sqrt{E(j)/W(j)- h(j)^2} & &\text{standard deviation of Y} \\; e(j) &= s(j)/\sqrt{W(j)} & &\text{standard error on the mean} \\; \end{align}; \f]; The bin content is always the mean of the Y values, but errors change depending on options:; \f[; \begin{align}; \text{GetBinContent}(j) &= h(j) \\; \text{GetBinError}(j) &=; \begin{cases}; e(j) &\text{if option="""" (default). Error of the mean of all y values.} \\; s(j) &\text{if option=""s"". Standard deviation of all y values.} \\; \begin{cases} e(j) &\text{if } h(j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(j)} &\text{if option=""g"". Error of a weighted mean for combining measurements with variances of } w. \\; \end{cases}; \end{align}; \f]; In the special case where s(j) is zero (eg, case of 1 entry only in one bin); the bin error e(j) is computed from the average of the s(j) for all bins if; the static function TProfile::Approximate() has been called.; This simple/crude approximation was suggested in order to keep the bin; during a fit operation. But note that this approximation is not the default behaviour.; See also TProfile::BuildOptions for more on error options. ### Creating and drawing a profile histogram; ~~~{.cpp}; {; auto c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; auto hprof = new TProfile(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; Float_t px, py, pz;; for ( Int_t i=0; i<25000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; hprof->Fill(px,pz,1);; }; hprof->Draw();; }; ~~~; */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor for Profile histograms",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:794,Integrability,rout,routines,794,"/** \class TProfile; \ingroup Histograms; Profile Histogram.; Profile histograms are used to display the mean; value of Y and its error for each bin in X. The displayed error is by default the; standard error on the mean (i.e. the standard deviation divided by the sqrt(n) ).; Profile histograms are in many cases an; elegant replacement of two-dimensional histograms. The inter-relation of two; measured quantities X and Y can always be visualized by a two-dimensional; histogram or scatter plot, but if Y is an unknown (but single-valued); approximate function of X, this function is displayed by a profile histogram with; much better precision than by a scatter plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for bin j.; \f[; \begin{align}; H(j) &= \sum w \cdot Y \\; E(j) &= \sum w \cdot Y^2 \\; W(j) &= \sum w & &\text{if weights different from 1, the number of bin effective entries is used} \\; h(j) &= H(j) / W(j) & &\text{mean of Y,} \\; s(j) &= \sqrt{E(j)/W(j)- h(j)^2} & &\text{standard deviation of Y} \\; e(j) &= s(j)/\sqrt{W(j)} & &\text{standard error on the mean} \\; \end{align}; \f]; The bin content is always the mean of the Y values, but errors change depending on options:; \f[; \begin{align}; \text{GetBinContent}(j) &= h(j) \\; \text{GetBinError}(j) &=; \begin{cases}; e(j) &\text{if option="""" (default). Error of the mean of all y values.} \\; s(j) &\text{if option=""s"". Standard deviation of all y values.} \\; \begin{cases} e(j) &\text{if } h(j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(j)} &\text{if option=""g"". Error of a weighted mean for combining measurements with variances of } w. \\; \end{cases}; \end{align}; \f]; In the special case where s(j) is zero (eg, case of 1 entry only in one bin); the bin error e(j) is computed from the avera",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:1295,Integrability,depend,depending,1295,"n in X. The displayed error is by default the; standard error on the mean (i.e. the standard deviation divided by the sqrt(n) ).; Profile histograms are in many cases an; elegant replacement of two-dimensional histograms. The inter-relation of two; measured quantities X and Y can always be visualized by a two-dimensional; histogram or scatter plot, but if Y is an unknown (but single-valued); approximate function of X, this function is displayed by a profile histogram with; much better precision than by a scatter plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for bin j.; \f[; \begin{align}; H(j) &= \sum w \cdot Y \\; E(j) &= \sum w \cdot Y^2 \\; W(j) &= \sum w & &\text{if weights different from 1, the number of bin effective entries is used} \\; h(j) &= H(j) / W(j) & &\text{mean of Y,} \\; s(j) &= \sqrt{E(j)/W(j)- h(j)^2} & &\text{standard deviation of Y} \\; e(j) &= s(j)/\sqrt{W(j)} & &\text{standard error on the mean} \\; \end{align}; \f]; The bin content is always the mean of the Y values, but errors change depending on options:; \f[; \begin{align}; \text{GetBinContent}(j) &= h(j) \\; \text{GetBinError}(j) &=; \begin{cases}; e(j) &\text{if option="""" (default). Error of the mean of all y values.} \\; s(j) &\text{if option=""s"". Standard deviation of all y values.} \\; \begin{cases} e(j) &\text{if } h(j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(j)} &\text{if option=""g"". Error of a weighted mean for combining measurements with variances of } w. \\; \end{cases}; \end{align}; \f]; In the special case where s(j) is zero (eg, case of 1 entry only in one bin); the bin error e(j) is computed from the average of the s(j) for all bins if; the static function TProfile::Approximate() has been called.; This simple/crude approximation was suggested in orde",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:2100,Usability,simpl,simple,2100,"l letters) of the elements for bin j.; \f[; \begin{align}; H(j) &= \sum w \cdot Y \\; E(j) &= \sum w \cdot Y^2 \\; W(j) &= \sum w & &\text{if weights different from 1, the number of bin effective entries is used} \\; h(j) &= H(j) / W(j) & &\text{mean of Y,} \\; s(j) &= \sqrt{E(j)/W(j)- h(j)^2} & &\text{standard deviation of Y} \\; e(j) &= s(j)/\sqrt{W(j)} & &\text{standard error on the mean} \\; \end{align}; \f]; The bin content is always the mean of the Y values, but errors change depending on options:; \f[; \begin{align}; \text{GetBinContent}(j) &= h(j) \\; \text{GetBinError}(j) &=; \begin{cases}; e(j) &\text{if option="""" (default). Error of the mean of all y values.} \\; s(j) &\text{if option=""s"". Standard deviation of all y values.} \\; \begin{cases} e(j) &\text{if } h(j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(j)} &\text{if option=""g"". Error of a weighted mean for combining measurements with variances of } w. \\; \end{cases}; \end{align}; \f]; In the special case where s(j) is zero (eg, case of 1 entry only in one bin); the bin error e(j) is computed from the average of the s(j) for all bins if; the static function TProfile::Approximate() has been called.; This simple/crude approximation was suggested in order to keep the bin; during a fit operation. But note that this approximation is not the default behaviour.; See also TProfile::BuildOptions for more on error options. ### Creating and drawing a profile histogram; ~~~{.cpp}; {; auto c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; auto hprof = new TProfile(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; Float_t px, py, pz;; for ( Int_t i=0; i<25000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; hprof->Fill(px,pz,1);; }; hprof->Draw();; }; ~~~; */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor for Profile histograms",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:828,Availability,error,errors,828,"////////////////////////////////////////////////////////////////////////////////; /// Normal Constructor for Profile histograms.; ///; /// The first five parameters are similar to TH1D::TH1D.; /// All values of y are accepted at filling time.; /// To fill a profile histogram, one must use TProfile::Fill function.; ///; /// Note that when filling the profile histogram the function Fill; /// checks if the variable y is between fYmin and fYmax.; /// If a minimum or maximum value is set for the Y scale before filling,; /// then all values below ymin or above ymax will be discarded.; /// Setting the minimum or maximum value for the Y scale before filling; /// has the same effect as calling the special TProfile constructor below; /// where ymin and ymax are specified.; ///; /// H(j) is printed as the channel contents. The errors displayed are s(j) if `option`='S'; /// (spread option), or e(j) if `CHOPT`='' (error on mean).; ///; /// See TProfile::BuildOptions() for explanation of parameters; ///; /// see also comments in the TH1 base class constructors",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:915,Availability,error,error,915,"////////////////////////////////////////////////////////////////////////////////; /// Normal Constructor for Profile histograms.; ///; /// The first five parameters are similar to TH1D::TH1D.; /// All values of y are accepted at filling time.; /// To fill a profile histogram, one must use TProfile::Fill function.; ///; /// Note that when filling the profile histogram the function Fill; /// checks if the variable y is between fYmin and fYmax.; /// If a minimum or maximum value is set for the Y scale before filling,; /// then all values below ymin or above ymax will be discarded.; /// Setting the minimum or maximum value for the Y scale before filling; /// has the same effect as calling the special TProfile constructor below; /// where ymin and ymax are specified.; ///; /// H(j) is printed as the channel contents. The errors displayed are s(j) if `option`='S'; /// (spread option), or e(j) if `CHOPT`='' (error on mean).; ///; /// See TProfile::BuildOptions() for explanation of parameters; ///; /// see also comments in the TH1 base class constructors",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:407,Modifiability,variab,variable,407,"////////////////////////////////////////////////////////////////////////////////; /// Normal Constructor for Profile histograms.; ///; /// The first five parameters are similar to TH1D::TH1D.; /// All values of y are accepted at filling time.; /// To fill a profile histogram, one must use TProfile::Fill function.; ///; /// Note that when filling the profile histogram the function Fill; /// checks if the variable y is between fYmin and fYmax.; /// If a minimum or maximum value is set for the Y scale before filling,; /// then all values below ymin or above ymax will be discarded.; /// Setting the minimum or maximum value for the Y scale before filling; /// has the same effect as calling the special TProfile constructor below; /// where ymin and ymax are specified.; ///; /// H(j) is printed as the channel contents. The errors displayed are s(j) if `option`='S'; /// (spread option), or e(j) if `CHOPT`='' (error on mean).; ///; /// See TProfile::BuildOptions() for explanation of parameters; ///; /// see also comments in the TH1 base class constructors",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:209,Availability,error,errors,209,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for Profile histograms with variable bin size.; ///; /// See TProfile::BuildOptions() for more explanations on errors; /// see also comments in the TH1 base class constructors",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:126,Modifiability,variab,variable,126,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for Profile histograms with variable bin size.; ///; /// See TProfile::BuildOptions() for more explanations on errors; /// see also comments in the TH1 base class constructors",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:207,Availability,error,errors,207,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for Profile histograms with variable bin size.; ///; /// See TProfile::BuildOptions for more explanations on errors; /// see also comments in the TH1 base class constructors",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:126,Modifiability,variab,variable,126,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for Profile histograms with variable bin size.; ///; /// See TProfile::BuildOptions for more explanations on errors; /// see also comments in the TH1 base class constructors",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:202,Availability,error,errors,202,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for Profile histograms with variable bin size.; /// See TProfile::BuildOptions for more explanations on errors; ///; /// see also comments in the TH1 base class constructors",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:126,Modifiability,variab,variable,126,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for Profile histograms with variable bin size.; /// See TProfile::BuildOptions for more explanations on errors; ///; /// see also comments in the TH1 base class constructors",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:454,Availability,error,errors,454,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for Profile histograms with range in y.; ///; /// The first five parameters are similar to TH1D::TH1D.; /// Only the values of Y between ylow and yup will be considered at filling time.; /// ylow and yup will also be the maximum and minimum values; /// on the y scale when drawing the profile.; ///; /// See TProfile::BuildOptions for more explanations on errors; ///; /// see also comments in the TH1 base class constructors",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:402,Availability,error,error,402,"////////////////////////////////////////////////////////////////////////////////; /// Set Profile histogram structure and options.; ///; /// \param[in] ymin minimum value allowed for y; /// \param[in] ymax maximum value allowed for y; /// if (ymin = ymax = 0) there are no limits on the allowed y values (ymin = -inf, ymax = +inf); /// \param[in] option this is the option for the computation of the y error of the profile ( TProfile::GetBinError ); /// possible values for the options are:; /// - ' ' (Default) the bin errors are the standard error on the mean of Y = S(Y)/SQRT(N); /// where S(Y) is the standard deviation (RMS) of the Y data in the bin; /// and N is the number of bin entries (from TProfile::GetBinEntries(ibin) ); /// (i.e the errors are the standard error on the bin content of the profile); /// - 's' Errors are the standard deviation of Y, S(Y); /// - 'i' Errors are S(Y)/SQRT(N) (standard error on the mean as in the default); /// The only difference is only when the standard deviation in Y is zero.; /// In this case the error a standard deviation = 1/SQRT(12) is assumed and the error is; /// 1./SQRT(12*N).; /// This approximation assumes that the Y values are integer (e.g. ADC counts); /// and have an implicit uncertainty of y +/- 0.5. With the assumption that the probability that y; /// takes any value between y-0.5 and y+0.5 is uniform, its standard error is 1/SQRT(12); /// - 'g' Errors are 1./SQRT(W) where W is the sum of the weights for the bin j; /// W is obtained as from TProfile::GetBinEntries(ibin); /// This errors corresponds to the standard deviation of weighted mean where each; /// measurement Y is uncorrelated and has an error sigma, which is expressed in the; /// weight used to fill the Profile: w = 1/sigma^2; /// The resulting error in TProfile is then 1./SQRT( Sum(1./sigma^2) ); ///; /// In the case of Profile filled weights and with TProfile::Sumw2() called,; /// STD(Y) is the standard deviation of the weighted sample Y and N is in this cas",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:520,Availability,error,errors,520,"////////////////////////////////////////////////////////////////////////////////; /// Set Profile histogram structure and options.; ///; /// \param[in] ymin minimum value allowed for y; /// \param[in] ymax maximum value allowed for y; /// if (ymin = ymax = 0) there are no limits on the allowed y values (ymin = -inf, ymax = +inf); /// \param[in] option this is the option for the computation of the y error of the profile ( TProfile::GetBinError ); /// possible values for the options are:; /// - ' ' (Default) the bin errors are the standard error on the mean of Y = S(Y)/SQRT(N); /// where S(Y) is the standard deviation (RMS) of the Y data in the bin; /// and N is the number of bin entries (from TProfile::GetBinEntries(ibin) ); /// (i.e the errors are the standard error on the bin content of the profile); /// - 's' Errors are the standard deviation of Y, S(Y); /// - 'i' Errors are S(Y)/SQRT(N) (standard error on the mean as in the default); /// The only difference is only when the standard deviation in Y is zero.; /// In this case the error a standard deviation = 1/SQRT(12) is assumed and the error is; /// 1./SQRT(12*N).; /// This approximation assumes that the Y values are integer (e.g. ADC counts); /// and have an implicit uncertainty of y +/- 0.5. With the assumption that the probability that y; /// takes any value between y-0.5 and y+0.5 is uniform, its standard error is 1/SQRT(12); /// - 'g' Errors are 1./SQRT(W) where W is the sum of the weights for the bin j; /// W is obtained as from TProfile::GetBinEntries(ibin); /// This errors corresponds to the standard deviation of weighted mean where each; /// measurement Y is uncorrelated and has an error sigma, which is expressed in the; /// weight used to fill the Profile: w = 1/sigma^2; /// The resulting error in TProfile is then 1./SQRT( Sum(1./sigma^2) ); ///; /// In the case of Profile filled weights and with TProfile::Sumw2() called,; /// STD(Y) is the standard deviation of the weighted sample Y and N is in this cas",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:544,Availability,error,error,544,"////////////////////////////////////////////////////////////////////////////////; /// Set Profile histogram structure and options.; ///; /// \param[in] ymin minimum value allowed for y; /// \param[in] ymax maximum value allowed for y; /// if (ymin = ymax = 0) there are no limits on the allowed y values (ymin = -inf, ymax = +inf); /// \param[in] option this is the option for the computation of the y error of the profile ( TProfile::GetBinError ); /// possible values for the options are:; /// - ' ' (Default) the bin errors are the standard error on the mean of Y = S(Y)/SQRT(N); /// where S(Y) is the standard deviation (RMS) of the Y data in the bin; /// and N is the number of bin entries (from TProfile::GetBinEntries(ibin) ); /// (i.e the errors are the standard error on the bin content of the profile); /// - 's' Errors are the standard deviation of Y, S(Y); /// - 'i' Errors are S(Y)/SQRT(N) (standard error on the mean as in the default); /// The only difference is only when the standard deviation in Y is zero.; /// In this case the error a standard deviation = 1/SQRT(12) is assumed and the error is; /// 1./SQRT(12*N).; /// This approximation assumes that the Y values are integer (e.g. ADC counts); /// and have an implicit uncertainty of y +/- 0.5. With the assumption that the probability that y; /// takes any value between y-0.5 and y+0.5 is uniform, its standard error is 1/SQRT(12); /// - 'g' Errors are 1./SQRT(W) where W is the sum of the weights for the bin j; /// W is obtained as from TProfile::GetBinEntries(ibin); /// This errors corresponds to the standard deviation of weighted mean where each; /// measurement Y is uncorrelated and has an error sigma, which is expressed in the; /// weight used to fill the Profile: w = 1/sigma^2; /// The resulting error in TProfile is then 1./SQRT( Sum(1./sigma^2) ); ///; /// In the case of Profile filled weights and with TProfile::Sumw2() called,; /// STD(Y) is the standard deviation of the weighted sample Y and N is in this cas",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:747,Availability,error,errors,747,"////////////////////////////////////////////////////////////////////////////////; /// Set Profile histogram structure and options.; ///; /// \param[in] ymin minimum value allowed for y; /// \param[in] ymax maximum value allowed for y; /// if (ymin = ymax = 0) there are no limits on the allowed y values (ymin = -inf, ymax = +inf); /// \param[in] option this is the option for the computation of the y error of the profile ( TProfile::GetBinError ); /// possible values for the options are:; /// - ' ' (Default) the bin errors are the standard error on the mean of Y = S(Y)/SQRT(N); /// where S(Y) is the standard deviation (RMS) of the Y data in the bin; /// and N is the number of bin entries (from TProfile::GetBinEntries(ibin) ); /// (i.e the errors are the standard error on the bin content of the profile); /// - 's' Errors are the standard deviation of Y, S(Y); /// - 'i' Errors are S(Y)/SQRT(N) (standard error on the mean as in the default); /// The only difference is only when the standard deviation in Y is zero.; /// In this case the error a standard deviation = 1/SQRT(12) is assumed and the error is; /// 1./SQRT(12*N).; /// This approximation assumes that the Y values are integer (e.g. ADC counts); /// and have an implicit uncertainty of y +/- 0.5. With the assumption that the probability that y; /// takes any value between y-0.5 and y+0.5 is uniform, its standard error is 1/SQRT(12); /// - 'g' Errors are 1./SQRT(W) where W is the sum of the weights for the bin j; /// W is obtained as from TProfile::GetBinEntries(ibin); /// This errors corresponds to the standard deviation of weighted mean where each; /// measurement Y is uncorrelated and has an error sigma, which is expressed in the; /// weight used to fill the Profile: w = 1/sigma^2; /// The resulting error in TProfile is then 1./SQRT( Sum(1./sigma^2) ); ///; /// In the case of Profile filled weights and with TProfile::Sumw2() called,; /// STD(Y) is the standard deviation of the weighted sample Y and N is in this cas",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:771,Availability,error,error,771,"////////////////////////////////////////////////////////////////////////////////; /// Set Profile histogram structure and options.; ///; /// \param[in] ymin minimum value allowed for y; /// \param[in] ymax maximum value allowed for y; /// if (ymin = ymax = 0) there are no limits on the allowed y values (ymin = -inf, ymax = +inf); /// \param[in] option this is the option for the computation of the y error of the profile ( TProfile::GetBinError ); /// possible values for the options are:; /// - ' ' (Default) the bin errors are the standard error on the mean of Y = S(Y)/SQRT(N); /// where S(Y) is the standard deviation (RMS) of the Y data in the bin; /// and N is the number of bin entries (from TProfile::GetBinEntries(ibin) ); /// (i.e the errors are the standard error on the bin content of the profile); /// - 's' Errors are the standard deviation of Y, S(Y); /// - 'i' Errors are S(Y)/SQRT(N) (standard error on the mean as in the default); /// The only difference is only when the standard deviation in Y is zero.; /// In this case the error a standard deviation = 1/SQRT(12) is assumed and the error is; /// 1./SQRT(12*N).; /// This approximation assumes that the Y values are integer (e.g. ADC counts); /// and have an implicit uncertainty of y +/- 0.5. With the assumption that the probability that y; /// takes any value between y-0.5 and y+0.5 is uniform, its standard error is 1/SQRT(12); /// - 'g' Errors are 1./SQRT(W) where W is the sum of the weights for the bin j; /// W is obtained as from TProfile::GetBinEntries(ibin); /// This errors corresponds to the standard deviation of weighted mean where each; /// measurement Y is uncorrelated and has an error sigma, which is expressed in the; /// weight used to fill the Profile: w = 1/sigma^2; /// The resulting error in TProfile is then 1./SQRT( Sum(1./sigma^2) ); ///; /// In the case of Profile filled weights and with TProfile::Sumw2() called,; /// STD(Y) is the standard deviation of the weighted sample Y and N is in this cas",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:823,Availability,Error,Errors,823,"////////////////////////////////////////////////////////////////////////////////; /// Set Profile histogram structure and options.; ///; /// \param[in] ymin minimum value allowed for y; /// \param[in] ymax maximum value allowed for y; /// if (ymin = ymax = 0) there are no limits on the allowed y values (ymin = -inf, ymax = +inf); /// \param[in] option this is the option for the computation of the y error of the profile ( TProfile::GetBinError ); /// possible values for the options are:; /// - ' ' (Default) the bin errors are the standard error on the mean of Y = S(Y)/SQRT(N); /// where S(Y) is the standard deviation (RMS) of the Y data in the bin; /// and N is the number of bin entries (from TProfile::GetBinEntries(ibin) ); /// (i.e the errors are the standard error on the bin content of the profile); /// - 's' Errors are the standard deviation of Y, S(Y); /// - 'i' Errors are S(Y)/SQRT(N) (standard error on the mean as in the default); /// The only difference is only when the standard deviation in Y is zero.; /// In this case the error a standard deviation = 1/SQRT(12) is assumed and the error is; /// 1./SQRT(12*N).; /// This approximation assumes that the Y values are integer (e.g. ADC counts); /// and have an implicit uncertainty of y +/- 0.5. With the assumption that the probability that y; /// takes any value between y-0.5 and y+0.5 is uniform, its standard error is 1/SQRT(12); /// - 'g' Errors are 1./SQRT(W) where W is the sum of the weights for the bin j; /// W is obtained as from TProfile::GetBinEntries(ibin); /// This errors corresponds to the standard deviation of weighted mean where each; /// measurement Y is uncorrelated and has an error sigma, which is expressed in the; /// weight used to fill the Profile: w = 1/sigma^2; /// The resulting error in TProfile is then 1./SQRT( Sum(1./sigma^2) ); ///; /// In the case of Profile filled weights and with TProfile::Sumw2() called,; /// STD(Y) is the standard deviation of the weighted sample Y and N is in this cas",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:879,Availability,Error,Errors,879,"////////////////////////////////////////////////////////////////////////////////; /// Set Profile histogram structure and options.; ///; /// \param[in] ymin minimum value allowed for y; /// \param[in] ymax maximum value allowed for y; /// if (ymin = ymax = 0) there are no limits on the allowed y values (ymin = -inf, ymax = +inf); /// \param[in] option this is the option for the computation of the y error of the profile ( TProfile::GetBinError ); /// possible values for the options are:; /// - ' ' (Default) the bin errors are the standard error on the mean of Y = S(Y)/SQRT(N); /// where S(Y) is the standard deviation (RMS) of the Y data in the bin; /// and N is the number of bin entries (from TProfile::GetBinEntries(ibin) ); /// (i.e the errors are the standard error on the bin content of the profile); /// - 's' Errors are the standard deviation of Y, S(Y); /// - 'i' Errors are S(Y)/SQRT(N) (standard error on the mean as in the default); /// The only difference is only when the standard deviation in Y is zero.; /// In this case the error a standard deviation = 1/SQRT(12) is assumed and the error is; /// 1./SQRT(12*N).; /// This approximation assumes that the Y values are integer (e.g. ADC counts); /// and have an implicit uncertainty of y +/- 0.5. With the assumption that the probability that y; /// takes any value between y-0.5 and y+0.5 is uniform, its standard error is 1/SQRT(12); /// - 'g' Errors are 1./SQRT(W) where W is the sum of the weights for the bin j; /// W is obtained as from TProfile::GetBinEntries(ibin); /// This errors corresponds to the standard deviation of weighted mean where each; /// measurement Y is uncorrelated and has an error sigma, which is expressed in the; /// weight used to fill the Profile: w = 1/sigma^2; /// The resulting error in TProfile is then 1./SQRT( Sum(1./sigma^2) ); ///; /// In the case of Profile filled weights and with TProfile::Sumw2() called,; /// STD(Y) is the standard deviation of the weighted sample Y and N is in this cas",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:913,Availability,error,error,913,"////////////////////////////////////////////////////////////////////////////////; /// Set Profile histogram structure and options.; ///; /// \param[in] ymin minimum value allowed for y; /// \param[in] ymax maximum value allowed for y; /// if (ymin = ymax = 0) there are no limits on the allowed y values (ymin = -inf, ymax = +inf); /// \param[in] option this is the option for the computation of the y error of the profile ( TProfile::GetBinError ); /// possible values for the options are:; /// - ' ' (Default) the bin errors are the standard error on the mean of Y = S(Y)/SQRT(N); /// where S(Y) is the standard deviation (RMS) of the Y data in the bin; /// and N is the number of bin entries (from TProfile::GetBinEntries(ibin) ); /// (i.e the errors are the standard error on the bin content of the profile); /// - 's' Errors are the standard deviation of Y, S(Y); /// - 'i' Errors are S(Y)/SQRT(N) (standard error on the mean as in the default); /// The only difference is only when the standard deviation in Y is zero.; /// In this case the error a standard deviation = 1/SQRT(12) is assumed and the error is; /// 1./SQRT(12*N).; /// This approximation assumes that the Y values are integer (e.g. ADC counts); /// and have an implicit uncertainty of y +/- 0.5. With the assumption that the probability that y; /// takes any value between y-0.5 and y+0.5 is uniform, its standard error is 1/SQRT(12); /// - 'g' Errors are 1./SQRT(W) where W is the sum of the weights for the bin j; /// W is obtained as from TProfile::GetBinEntries(ibin); /// This errors corresponds to the standard deviation of weighted mean where each; /// measurement Y is uncorrelated and has an error sigma, which is expressed in the; /// weight used to fill the Profile: w = 1/sigma^2; /// The resulting error in TProfile is then 1./SQRT( Sum(1./sigma^2) ); ///; /// In the case of Profile filled weights and with TProfile::Sumw2() called,; /// STD(Y) is the standard deviation of the weighted sample Y and N is in this cas",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:1047,Availability,error,error,1047,"///////; /// Set Profile histogram structure and options.; ///; /// \param[in] ymin minimum value allowed for y; /// \param[in] ymax maximum value allowed for y; /// if (ymin = ymax = 0) there are no limits on the allowed y values (ymin = -inf, ymax = +inf); /// \param[in] option this is the option for the computation of the y error of the profile ( TProfile::GetBinError ); /// possible values for the options are:; /// - ' ' (Default) the bin errors are the standard error on the mean of Y = S(Y)/SQRT(N); /// where S(Y) is the standard deviation (RMS) of the Y data in the bin; /// and N is the number of bin entries (from TProfile::GetBinEntries(ibin) ); /// (i.e the errors are the standard error on the bin content of the profile); /// - 's' Errors are the standard deviation of Y, S(Y); /// - 'i' Errors are S(Y)/SQRT(N) (standard error on the mean as in the default); /// The only difference is only when the standard deviation in Y is zero.; /// In this case the error a standard deviation = 1/SQRT(12) is assumed and the error is; /// 1./SQRT(12*N).; /// This approximation assumes that the Y values are integer (e.g. ADC counts); /// and have an implicit uncertainty of y +/- 0.5. With the assumption that the probability that y; /// takes any value between y-0.5 and y+0.5 is uniform, its standard error is 1/SQRT(12); /// - 'g' Errors are 1./SQRT(W) where W is the sum of the weights for the bin j; /// W is obtained as from TProfile::GetBinEntries(ibin); /// This errors corresponds to the standard deviation of weighted mean where each; /// measurement Y is uncorrelated and has an error sigma, which is expressed in the; /// weight used to fill the Profile: w = 1/sigma^2; /// The resulting error in TProfile is then 1./SQRT( Sum(1./sigma^2) ); ///; /// In the case of Profile filled weights and with TProfile::Sumw2() called,; /// STD(Y) is the standard deviation of the weighted sample Y and N is in this case the; /// number of effective entries (TProfile::GetBinEffectiveEntries",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:1106,Availability,error,error,1106,"///////; /// Set Profile histogram structure and options.; ///; /// \param[in] ymin minimum value allowed for y; /// \param[in] ymax maximum value allowed for y; /// if (ymin = ymax = 0) there are no limits on the allowed y values (ymin = -inf, ymax = +inf); /// \param[in] option this is the option for the computation of the y error of the profile ( TProfile::GetBinError ); /// possible values for the options are:; /// - ' ' (Default) the bin errors are the standard error on the mean of Y = S(Y)/SQRT(N); /// where S(Y) is the standard deviation (RMS) of the Y data in the bin; /// and N is the number of bin entries (from TProfile::GetBinEntries(ibin) ); /// (i.e the errors are the standard error on the bin content of the profile); /// - 's' Errors are the standard deviation of Y, S(Y); /// - 'i' Errors are S(Y)/SQRT(N) (standard error on the mean as in the default); /// The only difference is only when the standard deviation in Y is zero.; /// In this case the error a standard deviation = 1/SQRT(12) is assumed and the error is; /// 1./SQRT(12*N).; /// This approximation assumes that the Y values are integer (e.g. ADC counts); /// and have an implicit uncertainty of y +/- 0.5. With the assumption that the probability that y; /// takes any value between y-0.5 and y+0.5 is uniform, its standard error is 1/SQRT(12); /// - 'g' Errors are 1./SQRT(W) where W is the sum of the weights for the bin j; /// W is obtained as from TProfile::GetBinEntries(ibin); /// This errors corresponds to the standard deviation of weighted mean where each; /// measurement Y is uncorrelated and has an error sigma, which is expressed in the; /// weight used to fill the Profile: w = 1/sigma^2; /// The resulting error in TProfile is then 1./SQRT( Sum(1./sigma^2) ); ///; /// In the case of Profile filled weights and with TProfile::Sumw2() called,; /// STD(Y) is the standard deviation of the weighted sample Y and N is in this case the; /// number of effective entries (TProfile::GetBinEffectiveEntries",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:1385,Availability,error,error,1385,"of the y error of the profile ( TProfile::GetBinError ); /// possible values for the options are:; /// - ' ' (Default) the bin errors are the standard error on the mean of Y = S(Y)/SQRT(N); /// where S(Y) is the standard deviation (RMS) of the Y data in the bin; /// and N is the number of bin entries (from TProfile::GetBinEntries(ibin) ); /// (i.e the errors are the standard error on the bin content of the profile); /// - 's' Errors are the standard deviation of Y, S(Y); /// - 'i' Errors are S(Y)/SQRT(N) (standard error on the mean as in the default); /// The only difference is only when the standard deviation in Y is zero.; /// In this case the error a standard deviation = 1/SQRT(12) is assumed and the error is; /// 1./SQRT(12*N).; /// This approximation assumes that the Y values are integer (e.g. ADC counts); /// and have an implicit uncertainty of y +/- 0.5. With the assumption that the probability that y; /// takes any value between y-0.5 and y+0.5 is uniform, its standard error is 1/SQRT(12); /// - 'g' Errors are 1./SQRT(W) where W is the sum of the weights for the bin j; /// W is obtained as from TProfile::GetBinEntries(ibin); /// This errors corresponds to the standard deviation of weighted mean where each; /// measurement Y is uncorrelated and has an error sigma, which is expressed in the; /// weight used to fill the Profile: w = 1/sigma^2; /// The resulting error in TProfile is then 1./SQRT( Sum(1./sigma^2) ); ///; /// In the case of Profile filled weights and with TProfile::Sumw2() called,; /// STD(Y) is the standard deviation of the weighted sample Y and N is in this case the; /// number of effective entries (TProfile::GetBinEffectiveEntries(ibin) ); ///; /// If a bin has N data points all with the same value Y (especially; /// possible when dealing with integers), the spread in Y for that bin; /// is zero, and the uncertainty assigned is also zero, and the bin is; /// ignored in making subsequent fits.; /// To avoid this problem one can use an approximati",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:1416,Availability,Error,Errors,1416,"of the y error of the profile ( TProfile::GetBinError ); /// possible values for the options are:; /// - ' ' (Default) the bin errors are the standard error on the mean of Y = S(Y)/SQRT(N); /// where S(Y) is the standard deviation (RMS) of the Y data in the bin; /// and N is the number of bin entries (from TProfile::GetBinEntries(ibin) ); /// (i.e the errors are the standard error on the bin content of the profile); /// - 's' Errors are the standard deviation of Y, S(Y); /// - 'i' Errors are S(Y)/SQRT(N) (standard error on the mean as in the default); /// The only difference is only when the standard deviation in Y is zero.; /// In this case the error a standard deviation = 1/SQRT(12) is assumed and the error is; /// 1./SQRT(12*N).; /// This approximation assumes that the Y values are integer (e.g. ADC counts); /// and have an implicit uncertainty of y +/- 0.5. With the assumption that the probability that y; /// takes any value between y-0.5 and y+0.5 is uniform, its standard error is 1/SQRT(12); /// - 'g' Errors are 1./SQRT(W) where W is the sum of the weights for the bin j; /// W is obtained as from TProfile::GetBinEntries(ibin); /// This errors corresponds to the standard deviation of weighted mean where each; /// measurement Y is uncorrelated and has an error sigma, which is expressed in the; /// weight used to fill the Profile: w = 1/sigma^2; /// The resulting error in TProfile is then 1./SQRT( Sum(1./sigma^2) ); ///; /// In the case of Profile filled weights and with TProfile::Sumw2() called,; /// STD(Y) is the standard deviation of the weighted sample Y and N is in this case the; /// number of effective entries (TProfile::GetBinEffectiveEntries(ibin) ); ///; /// If a bin has N data points all with the same value Y (especially; /// possible when dealing with integers), the spread in Y for that bin; /// is zero, and the uncertainty assigned is also zero, and the bin is; /// ignored in making subsequent fits.; /// To avoid this problem one can use an approximati",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:1553,Availability,error,errors,1553,"tion (RMS) of the Y data in the bin; /// and N is the number of bin entries (from TProfile::GetBinEntries(ibin) ); /// (i.e the errors are the standard error on the bin content of the profile); /// - 's' Errors are the standard deviation of Y, S(Y); /// - 'i' Errors are S(Y)/SQRT(N) (standard error on the mean as in the default); /// The only difference is only when the standard deviation in Y is zero.; /// In this case the error a standard deviation = 1/SQRT(12) is assumed and the error is; /// 1./SQRT(12*N).; /// This approximation assumes that the Y values are integer (e.g. ADC counts); /// and have an implicit uncertainty of y +/- 0.5. With the assumption that the probability that y; /// takes any value between y-0.5 and y+0.5 is uniform, its standard error is 1/SQRT(12); /// - 'g' Errors are 1./SQRT(W) where W is the sum of the weights for the bin j; /// W is obtained as from TProfile::GetBinEntries(ibin); /// This errors corresponds to the standard deviation of weighted mean where each; /// measurement Y is uncorrelated and has an error sigma, which is expressed in the; /// weight used to fill the Profile: w = 1/sigma^2; /// The resulting error in TProfile is then 1./SQRT( Sum(1./sigma^2) ); ///; /// In the case of Profile filled weights and with TProfile::Sumw2() called,; /// STD(Y) is the standard deviation of the weighted sample Y and N is in this case the; /// number of effective entries (TProfile::GetBinEffectiveEntries(ibin) ); ///; /// If a bin has N data points all with the same value Y (especially; /// possible when dealing with integers), the spread in Y for that bin; /// is zero, and the uncertainty assigned is also zero, and the bin is; /// ignored in making subsequent fits.; /// To avoid this problem one can use an approximation for the standard deviation S(Y),; /// by using the average of all the S(Y) of the other Profile bins. To use this approximation; /// one must call before TProfile::Approximate; /// This approximation applies only for the de",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:1672,Availability,error,error,1672,"tion (RMS) of the Y data in the bin; /// and N is the number of bin entries (from TProfile::GetBinEntries(ibin) ); /// (i.e the errors are the standard error on the bin content of the profile); /// - 's' Errors are the standard deviation of Y, S(Y); /// - 'i' Errors are S(Y)/SQRT(N) (standard error on the mean as in the default); /// The only difference is only when the standard deviation in Y is zero.; /// In this case the error a standard deviation = 1/SQRT(12) is assumed and the error is; /// 1./SQRT(12*N).; /// This approximation assumes that the Y values are integer (e.g. ADC counts); /// and have an implicit uncertainty of y +/- 0.5. With the assumption that the probability that y; /// takes any value between y-0.5 and y+0.5 is uniform, its standard error is 1/SQRT(12); /// - 'g' Errors are 1./SQRT(W) where W is the sum of the weights for the bin j; /// W is obtained as from TProfile::GetBinEntries(ibin); /// This errors corresponds to the standard deviation of weighted mean where each; /// measurement Y is uncorrelated and has an error sigma, which is expressed in the; /// weight used to fill the Profile: w = 1/sigma^2; /// The resulting error in TProfile is then 1./SQRT( Sum(1./sigma^2) ); ///; /// In the case of Profile filled weights and with TProfile::Sumw2() called,; /// STD(Y) is the standard deviation of the weighted sample Y and N is in this case the; /// number of effective entries (TProfile::GetBinEffectiveEntries(ibin) ); ///; /// If a bin has N data points all with the same value Y (especially; /// possible when dealing with integers), the spread in Y for that bin; /// is zero, and the uncertainty assigned is also zero, and the bin is; /// ignored in making subsequent fits.; /// To avoid this problem one can use an approximation for the standard deviation S(Y),; /// by using the average of all the S(Y) of the other Profile bins. To use this approximation; /// one must call before TProfile::Approximate; /// This approximation applies only for the de",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:1782,Availability,error,error,1782,"tion (RMS) of the Y data in the bin; /// and N is the number of bin entries (from TProfile::GetBinEntries(ibin) ); /// (i.e the errors are the standard error on the bin content of the profile); /// - 's' Errors are the standard deviation of Y, S(Y); /// - 'i' Errors are S(Y)/SQRT(N) (standard error on the mean as in the default); /// The only difference is only when the standard deviation in Y is zero.; /// In this case the error a standard deviation = 1/SQRT(12) is assumed and the error is; /// 1./SQRT(12*N).; /// This approximation assumes that the Y values are integer (e.g. ADC counts); /// and have an implicit uncertainty of y +/- 0.5. With the assumption that the probability that y; /// takes any value between y-0.5 and y+0.5 is uniform, its standard error is 1/SQRT(12); /// - 'g' Errors are 1./SQRT(W) where W is the sum of the weights for the bin j; /// W is obtained as from TProfile::GetBinEntries(ibin); /// This errors corresponds to the standard deviation of weighted mean where each; /// measurement Y is uncorrelated and has an error sigma, which is expressed in the; /// weight used to fill the Profile: w = 1/sigma^2; /// The resulting error in TProfile is then 1./SQRT( Sum(1./sigma^2) ); ///; /// In the case of Profile filled weights and with TProfile::Sumw2() called,; /// STD(Y) is the standard deviation of the weighted sample Y and N is in this case the; /// number of effective entries (TProfile::GetBinEffectiveEntries(ibin) ); ///; /// If a bin has N data points all with the same value Y (especially; /// possible when dealing with integers), the spread in Y for that bin; /// is zero, and the uncertainty assigned is also zero, and the bin is; /// ignored in making subsequent fits.; /// To avoid this problem one can use an approximation for the standard deviation S(Y),; /// by using the average of all the S(Y) of the other Profile bins. To use this approximation; /// one must call before TProfile::Approximate; /// This approximation applies only for the de",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:2349,Safety,avoid,avoid,2349," the bin; /// and N is the number of bin entries (from TProfile::GetBinEntries(ibin) ); /// (i.e the errors are the standard error on the bin content of the profile); /// - 's' Errors are the standard deviation of Y, S(Y); /// - 'i' Errors are S(Y)/SQRT(N) (standard error on the mean as in the default); /// The only difference is only when the standard deviation in Y is zero.; /// In this case the error a standard deviation = 1/SQRT(12) is assumed and the error is; /// 1./SQRT(12*N).; /// This approximation assumes that the Y values are integer (e.g. ADC counts); /// and have an implicit uncertainty of y +/- 0.5. With the assumption that the probability that y; /// takes any value between y-0.5 and y+0.5 is uniform, its standard error is 1/SQRT(12); /// - 'g' Errors are 1./SQRT(W) where W is the sum of the weights for the bin j; /// W is obtained as from TProfile::GetBinEntries(ibin); /// This errors corresponds to the standard deviation of weighted mean where each; /// measurement Y is uncorrelated and has an error sigma, which is expressed in the; /// weight used to fill the Profile: w = 1/sigma^2; /// The resulting error in TProfile is then 1./SQRT( Sum(1./sigma^2) ); ///; /// In the case of Profile filled weights and with TProfile::Sumw2() called,; /// STD(Y) is the standard deviation of the weighted sample Y and N is in this case the; /// number of effective entries (TProfile::GetBinEffectiveEntries(ibin) ); ///; /// If a bin has N data points all with the same value Y (especially; /// possible when dealing with integers), the spread in Y for that bin; /// is zero, and the uncertainty assigned is also zero, and the bin is; /// ignored in making subsequent fits.; /// To avoid this problem one can use an approximation for the standard deviation S(Y),; /// by using the average of all the S(Y) of the other Profile bins. To use this approximation; /// one must call before TProfile::Approximate; /// This approximation applies only for the default and the 's' options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: this = this + c1*f1",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: this = this + c1*h1",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:220,Availability,error,error,220,"////////////////////////////////////////////////////////////////////////////////; /// Static function to set the fgApproximate flag.; ///; ///When the flag is true, the function GetBinError; /// will approximate the bin error with the average profile error on all bins; /// in the following situation only; ///; /// - the number of bins in the profile is less than 1002; /// - the bin number of entries is small ( <5); /// - the estimated bin error is extremely small compared to the bin content; /// (see TProfile::GetBinError)",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:251,Availability,error,error,251,"////////////////////////////////////////////////////////////////////////////////; /// Static function to set the fgApproximate flag.; ///; ///When the flag is true, the function GetBinError; /// will approximate the bin error with the average profile error on all bins; /// in the following situation only; ///; /// - the number of bins in the profile is less than 1002; /// - the bin number of entries is small ( <5); /// - the estimated bin error is extremely small compared to the bin content; /// (see TProfile::GetBinError)",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:443,Availability,error,error,443,"////////////////////////////////////////////////////////////////////////////////; /// Static function to set the fgApproximate flag.; ///; ///When the flag is true, the function GetBinError; /// will approximate the bin error with the average profile error on all bins; /// in the following situation only; ///; /// - the number of bins in the profile is less than 1002; /// - the bin number of entries is small ( <5); /// - the estimated bin error is extremely small compared to the bin content; /// (see TProfile::GetBinError)",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: `this = this/(c1*f1)`.; ///; /// This function is not implemented for the TProfile",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:88,Availability,error,error,88,"// maintaining the correct sum of weights square is not supported when dividing; // bin error resulting from division of profile needs to be checked",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:30,Availability,ERROR,ERRORS,30,"//THE ALGORITHM COMPUTING THE ERRORS IS WRONG. HELP REQUIRED",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:88,Availability,error,error,88,"// maintaining the correct sum of weights square is not supported when dividing; // bin error resulting from division of profile needs to be checked",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:97,Availability,error,error,97,"////////////////////////////////////////////////////////////////////////////////; /// Return bin error of a Profile histogram; ///; /// Computing errors: A moving field; ///; /// The computation of errors for a TProfile has evolved with the versions; /// of ROOT. The difficulty is in computing errors for bins with low statistics.; ///; /// - prior to version 3.00, we had no special treatment of low statistic bins.; /// As a result, these bins had huge errors. The reason is that the; /// expression eprim2 is very close to 0 (rounding problems) or 0.; /// - in version 3.00 (18 Dec 2000), the algorithm is protected for values of; /// eprim2 very small and the bin errors set to the average bin errors, following; /// recommendations from a group of users.; /// - in version 3.01 (19 Apr 2001), it is realized that the algorithm above; /// should be applied only to low statistic bins.; /// - in version 3.02 (26 Sep 2001), the same group of users recommend instead; /// to take two times the average error on all bins for these low; /// statistics bins giving a very small value for eprim2.; /// - in version 3.04 (Nov 2002), the algorithm is modified/protected for the case; /// when a TProfile is projected (ProjectionX). The previous algorithm; /// generated a N^2 problem when projecting a TProfile with a large number of; /// bins (eg 100000).; /// - in version 3.05/06, a new static function TProfile::Approximate; /// is introduced to enable or disable (default) the approximation.; ///; /// Ideas for improvements of this algorithm are welcome. No suggestions; /// received since our call for advice to roottalk in Jul 2002.; /// see for instance: http://root.cern/root/roottalk/roottalk02/2916.html",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:146,Availability,error,errors,146,"////////////////////////////////////////////////////////////////////////////////; /// Return bin error of a Profile histogram; ///; /// Computing errors: A moving field; ///; /// The computation of errors for a TProfile has evolved with the versions; /// of ROOT. The difficulty is in computing errors for bins with low statistics.; ///; /// - prior to version 3.00, we had no special treatment of low statistic bins.; /// As a result, these bins had huge errors. The reason is that the; /// expression eprim2 is very close to 0 (rounding problems) or 0.; /// - in version 3.00 (18 Dec 2000), the algorithm is protected for values of; /// eprim2 very small and the bin errors set to the average bin errors, following; /// recommendations from a group of users.; /// - in version 3.01 (19 Apr 2001), it is realized that the algorithm above; /// should be applied only to low statistic bins.; /// - in version 3.02 (26 Sep 2001), the same group of users recommend instead; /// to take two times the average error on all bins for these low; /// statistics bins giving a very small value for eprim2.; /// - in version 3.04 (Nov 2002), the algorithm is modified/protected for the case; /// when a TProfile is projected (ProjectionX). The previous algorithm; /// generated a N^2 problem when projecting a TProfile with a large number of; /// bins (eg 100000).; /// - in version 3.05/06, a new static function TProfile::Approximate; /// is introduced to enable or disable (default) the approximation.; ///; /// Ideas for improvements of this algorithm are welcome. No suggestions; /// received since our call for advice to roottalk in Jul 2002.; /// see for instance: http://root.cern/root/roottalk/roottalk02/2916.html",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:198,Availability,error,errors,198,"////////////////////////////////////////////////////////////////////////////////; /// Return bin error of a Profile histogram; ///; /// Computing errors: A moving field; ///; /// The computation of errors for a TProfile has evolved with the versions; /// of ROOT. The difficulty is in computing errors for bins with low statistics.; ///; /// - prior to version 3.00, we had no special treatment of low statistic bins.; /// As a result, these bins had huge errors. The reason is that the; /// expression eprim2 is very close to 0 (rounding problems) or 0.; /// - in version 3.00 (18 Dec 2000), the algorithm is protected for values of; /// eprim2 very small and the bin errors set to the average bin errors, following; /// recommendations from a group of users.; /// - in version 3.01 (19 Apr 2001), it is realized that the algorithm above; /// should be applied only to low statistic bins.; /// - in version 3.02 (26 Sep 2001), the same group of users recommend instead; /// to take two times the average error on all bins for these low; /// statistics bins giving a very small value for eprim2.; /// - in version 3.04 (Nov 2002), the algorithm is modified/protected for the case; /// when a TProfile is projected (ProjectionX). The previous algorithm; /// generated a N^2 problem when projecting a TProfile with a large number of; /// bins (eg 100000).; /// - in version 3.05/06, a new static function TProfile::Approximate; /// is introduced to enable or disable (default) the approximation.; ///; /// Ideas for improvements of this algorithm are welcome. No suggestions; /// received since our call for advice to roottalk in Jul 2002.; /// see for instance: http://root.cern/root/roottalk/roottalk02/2916.html",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:295,Availability,error,errors,295,"////////////////////////////////////////////////////////////////////////////////; /// Return bin error of a Profile histogram; ///; /// Computing errors: A moving field; ///; /// The computation of errors for a TProfile has evolved with the versions; /// of ROOT. The difficulty is in computing errors for bins with low statistics.; ///; /// - prior to version 3.00, we had no special treatment of low statistic bins.; /// As a result, these bins had huge errors. The reason is that the; /// expression eprim2 is very close to 0 (rounding problems) or 0.; /// - in version 3.00 (18 Dec 2000), the algorithm is protected for values of; /// eprim2 very small and the bin errors set to the average bin errors, following; /// recommendations from a group of users.; /// - in version 3.01 (19 Apr 2001), it is realized that the algorithm above; /// should be applied only to low statistic bins.; /// - in version 3.02 (26 Sep 2001), the same group of users recommend instead; /// to take two times the average error on all bins for these low; /// statistics bins giving a very small value for eprim2.; /// - in version 3.04 (Nov 2002), the algorithm is modified/protected for the case; /// when a TProfile is projected (ProjectionX). The previous algorithm; /// generated a N^2 problem when projecting a TProfile with a large number of; /// bins (eg 100000).; /// - in version 3.05/06, a new static function TProfile::Approximate; /// is introduced to enable or disable (default) the approximation.; ///; /// Ideas for improvements of this algorithm are welcome. No suggestions; /// received since our call for advice to roottalk in Jul 2002.; /// see for instance: http://root.cern/root/roottalk/roottalk02/2916.html",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:456,Availability,error,errors,456,"////////////////////////////////////////////////////////////////////////////////; /// Return bin error of a Profile histogram; ///; /// Computing errors: A moving field; ///; /// The computation of errors for a TProfile has evolved with the versions; /// of ROOT. The difficulty is in computing errors for bins with low statistics.; ///; /// - prior to version 3.00, we had no special treatment of low statistic bins.; /// As a result, these bins had huge errors. The reason is that the; /// expression eprim2 is very close to 0 (rounding problems) or 0.; /// - in version 3.00 (18 Dec 2000), the algorithm is protected for values of; /// eprim2 very small and the bin errors set to the average bin errors, following; /// recommendations from a group of users.; /// - in version 3.01 (19 Apr 2001), it is realized that the algorithm above; /// should be applied only to low statistic bins.; /// - in version 3.02 (26 Sep 2001), the same group of users recommend instead; /// to take two times the average error on all bins for these low; /// statistics bins giving a very small value for eprim2.; /// - in version 3.04 (Nov 2002), the algorithm is modified/protected for the case; /// when a TProfile is projected (ProjectionX). The previous algorithm; /// generated a N^2 problem when projecting a TProfile with a large number of; /// bins (eg 100000).; /// - in version 3.05/06, a new static function TProfile::Approximate; /// is introduced to enable or disable (default) the approximation.; ///; /// Ideas for improvements of this algorithm are welcome. No suggestions; /// received since our call for advice to roottalk in Jul 2002.; /// see for instance: http://root.cern/root/roottalk/roottalk02/2916.html",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:669,Availability,error,errors,669,"////////////////////////////////////////////////////////////////////////////////; /// Return bin error of a Profile histogram; ///; /// Computing errors: A moving field; ///; /// The computation of errors for a TProfile has evolved with the versions; /// of ROOT. The difficulty is in computing errors for bins with low statistics.; ///; /// - prior to version 3.00, we had no special treatment of low statistic bins.; /// As a result, these bins had huge errors. The reason is that the; /// expression eprim2 is very close to 0 (rounding problems) or 0.; /// - in version 3.00 (18 Dec 2000), the algorithm is protected for values of; /// eprim2 very small and the bin errors set to the average bin errors, following; /// recommendations from a group of users.; /// - in version 3.01 (19 Apr 2001), it is realized that the algorithm above; /// should be applied only to low statistic bins.; /// - in version 3.02 (26 Sep 2001), the same group of users recommend instead; /// to take two times the average error on all bins for these low; /// statistics bins giving a very small value for eprim2.; /// - in version 3.04 (Nov 2002), the algorithm is modified/protected for the case; /// when a TProfile is projected (ProjectionX). The previous algorithm; /// generated a N^2 problem when projecting a TProfile with a large number of; /// bins (eg 100000).; /// - in version 3.05/06, a new static function TProfile::Approximate; /// is introduced to enable or disable (default) the approximation.; ///; /// Ideas for improvements of this algorithm are welcome. No suggestions; /// received since our call for advice to roottalk in Jul 2002.; /// see for instance: http://root.cern/root/roottalk/roottalk02/2916.html",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:699,Availability,error,errors,699,"////////////////////////////////////////////////////////////////////////////////; /// Return bin error of a Profile histogram; ///; /// Computing errors: A moving field; ///; /// The computation of errors for a TProfile has evolved with the versions; /// of ROOT. The difficulty is in computing errors for bins with low statistics.; ///; /// - prior to version 3.00, we had no special treatment of low statistic bins.; /// As a result, these bins had huge errors. The reason is that the; /// expression eprim2 is very close to 0 (rounding problems) or 0.; /// - in version 3.00 (18 Dec 2000), the algorithm is protected for values of; /// eprim2 very small and the bin errors set to the average bin errors, following; /// recommendations from a group of users.; /// - in version 3.01 (19 Apr 2001), it is realized that the algorithm above; /// should be applied only to low statistic bins.; /// - in version 3.02 (26 Sep 2001), the same group of users recommend instead; /// to take two times the average error on all bins for these low; /// statistics bins giving a very small value for eprim2.; /// - in version 3.04 (Nov 2002), the algorithm is modified/protected for the case; /// when a TProfile is projected (ProjectionX). The previous algorithm; /// generated a N^2 problem when projecting a TProfile with a large number of; /// bins (eg 100000).; /// - in version 3.05/06, a new static function TProfile::Approximate; /// is introduced to enable or disable (default) the approximation.; ///; /// Ideas for improvements of this algorithm are welcome. No suggestions; /// received since our call for advice to roottalk in Jul 2002.; /// see for instance: http://root.cern/root/roottalk/roottalk02/2916.html",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:1005,Availability,error,error,1005,"////////////////////////////////////////////////////////////////////////////////; /// Return bin error of a Profile histogram; ///; /// Computing errors: A moving field; ///; /// The computation of errors for a TProfile has evolved with the versions; /// of ROOT. The difficulty is in computing errors for bins with low statistics.; ///; /// - prior to version 3.00, we had no special treatment of low statistic bins.; /// As a result, these bins had huge errors. The reason is that the; /// expression eprim2 is very close to 0 (rounding problems) or 0.; /// - in version 3.00 (18 Dec 2000), the algorithm is protected for values of; /// eprim2 very small and the bin errors set to the average bin errors, following; /// recommendations from a group of users.; /// - in version 3.01 (19 Apr 2001), it is realized that the algorithm above; /// should be applied only to low statistic bins.; /// - in version 3.02 (26 Sep 2001), the same group of users recommend instead; /// to take two times the average error on all bins for these low; /// statistics bins giving a very small value for eprim2.; /// - in version 3.04 (Nov 2002), the algorithm is modified/protected for the case; /// when a TProfile is projected (ProjectionX). The previous algorithm; /// generated a N^2 problem when projecting a TProfile with a large number of; /// bins (eg 100000).; /// - in version 3.05/06, a new static function TProfile::Approximate; /// is introduced to enable or disable (default) the approximation.; ///; /// Ideas for improvements of this algorithm are welcome. No suggestions; /// received since our call for advice to roottalk in Jul 2002.; /// see for instance: http://root.cern/root/roottalk/roottalk02/2916.html",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:224,Modifiability,evolve,evolved,224,"////////////////////////////////////////////////////////////////////////////////; /// Return bin error of a Profile histogram; ///; /// Computing errors: A moving field; ///; /// The computation of errors for a TProfile has evolved with the versions; /// of ROOT. The difficulty is in computing errors for bins with low statistics.; ///; /// - prior to version 3.00, we had no special treatment of low statistic bins.; /// As a result, these bins had huge errors. The reason is that the; /// expression eprim2 is very close to 0 (rounding problems) or 0.; /// - in version 3.00 (18 Dec 2000), the algorithm is protected for values of; /// eprim2 very small and the bin errors set to the average bin errors, following; /// recommendations from a group of users.; /// - in version 3.01 (19 Apr 2001), it is realized that the algorithm above; /// should be applied only to low statistic bins.; /// - in version 3.02 (26 Sep 2001), the same group of users recommend instead; /// to take two times the average error on all bins for these low; /// statistics bins giving a very small value for eprim2.; /// - in version 3.04 (Nov 2002), the algorithm is modified/protected for the case; /// when a TProfile is projected (ProjectionX). The previous algorithm; /// generated a N^2 problem when projecting a TProfile with a large number of; /// bins (eg 100000).; /// - in version 3.05/06, a new static function TProfile::Approximate; /// is introduced to enable or disable (default) the approximation.; ///; /// Ideas for improvements of this algorithm are welcome. No suggestions; /// received since our call for advice to roottalk in Jul 2002.; /// see for instance: http://root.cern/root/roottalk/roottalk02/2916.html",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:119,Availability,error,errors,119,"////////////////////////////////////////////////////////////////////////////////; /// Return option to compute profile errors",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:462,Usability,simpl,simply,462,"////////////////////////////////////////////////////////////////////////////////; /// fill the array stats from the contents of this profile.; ///; /// The array stats must be correctly dimensioned in the calling program.; ///; /// - stats[0] = sumw; /// - stats[1] = sumw2; /// - stats[2] = sumwx; /// - stats[3] = sumwx2; /// - stats[4] = sumwy; /// - stats[5] = sumwy2; ///; /// If no axis-subrange is specified (via TAxis::SetRange), the array stats; /// is simply a copy of the statistics quantities computed at filling time.; /// If a sub-range is specified, the function recomputes these quantities; /// from the bin contents in the current axis range.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:86,Energy Efficiency,Reduce,Reduce,86,"////////////////////////////////////////////////////////////////////////////////; /// Reduce the number of bins for this axis to the number of bins having a label.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:436,Availability,down,down,436,"////////////////////////////////////////////////////////////////////////////////; /// Set option(s) to draw axis with labels.; ///; /// option might have the following values:; ///; /// - ""a"" sort by alphabetic order; /// - "">"" sort by decreasing values; /// - ""<"" sort by increasing values; /// - ""h"" draw labels horizontal; /// - ""v"" draw labels vertical; /// - ""u"" draw labels up (end of label right adjusted); /// - ""d"" draw labels down (start of label left adjusted)",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:276,Availability,error,errors,276,"////////////////////////////////////////////////////////////////////////////////; ///Merge all histograms in the collection in this histogram.; ///; /// This function computes the min/max for the x axis,; /// compute a new number of bins, if necessary,; /// add bin contents, errors and statistics.; /// If overflows are present and limits are different the function will fail.; /// The function returns the total number of entries in the result histogram; /// if the merge is successful, -1 otherwise.; ///; /// IMPORTANT remark. The axis x may have different number; /// of bins and different limits, BUT the largest bin width must be; /// a multiple of the smallest bin width and the upper limit must also; /// be a multiple of the bin width.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: this = this*c1*f1; ///; /// The function return kFALSE if the Multiply operation failed",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:232,Availability,error,errors,232,"////////////////////////////////////////////////////////////////////////////////; /// Project this profile into a 1-D histogram along X; ///; /// The projection is always of the type TH1D.; ///; /// - if option ""E"" is specified the errors of the projected histogram are computed and set; /// to be equal to the errors of the profile.; /// Option ""E"" is defined as the default one in the header file.; /// - if option """" is specified the histogram errors are simply the sqrt of its content; /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// otherwise (default) it will be equal to GetBinContent(bin); /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""W"" is specified the bin content of the projected histogram is set to the; /// product of the bin content of the profile and the entries.; /// With this option the returned histogram will be equivalent to the one obtained by; /// filling directly a TH1D using the 2-nd value as a weight.; /// This makes sense only for profile filled with weights =1. If not, the error of the; /// projected histogram obtained with this option will not be correct.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:311,Availability,error,errors,311,"////////////////////////////////////////////////////////////////////////////////; /// Project this profile into a 1-D histogram along X; ///; /// The projection is always of the type TH1D.; ///; /// - if option ""E"" is specified the errors of the projected histogram are computed and set; /// to be equal to the errors of the profile.; /// Option ""E"" is defined as the default one in the header file.; /// - if option """" is specified the histogram errors are simply the sqrt of its content; /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// otherwise (default) it will be equal to GetBinContent(bin); /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""W"" is specified the bin content of the projected histogram is set to the; /// product of the bin content of the profile and the entries.; /// With this option the returned histogram will be equivalent to the one obtained by; /// filling directly a TH1D using the 2-nd value as a weight.; /// This makes sense only for profile filled with weights =1. If not, the error of the; /// projected histogram obtained with this option will not be correct.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:447,Availability,error,errors,447,"////////////////////////////////////////////////////////////////////////////////; /// Project this profile into a 1-D histogram along X; ///; /// The projection is always of the type TH1D.; ///; /// - if option ""E"" is specified the errors of the projected histogram are computed and set; /// to be equal to the errors of the profile.; /// Option ""E"" is defined as the default one in the header file.; /// - if option """" is specified the histogram errors are simply the sqrt of its content; /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// otherwise (default) it will be equal to GetBinContent(bin); /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""W"" is specified the bin content of the projected histogram is set to the; /// product of the bin content of the profile and the entries.; /// With this option the returned histogram will be equivalent to the one obtained by; /// filling directly a TH1D using the 2-nd value as a weight.; /// This makes sense only for profile filled with weights =1. If not, the error of the; /// projected histogram obtained with this option will not be correct.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:776,Availability,error,errors,776,"////////////////////////////////////////////////////////////////////////////////; /// Project this profile into a 1-D histogram along X; ///; /// The projection is always of the type TH1D.; ///; /// - if option ""E"" is specified the errors of the projected histogram are computed and set; /// to be equal to the errors of the profile.; /// Option ""E"" is defined as the default one in the header file.; /// - if option """" is specified the histogram errors are simply the sqrt of its content; /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// otherwise (default) it will be equal to GetBinContent(bin); /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""W"" is specified the bin content of the projected histogram is set to the; /// product of the bin content of the profile and the entries.; /// With this option the returned histogram will be equivalent to the one obtained by; /// filling directly a TH1D using the 2-nd value as a weight.; /// This makes sense only for profile filled with weights =1. If not, the error of the; /// projected histogram obtained with this option will not be correct.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:1178,Availability,error,error,1178,"////////////////////////////////////////////////////////////////////////////////; /// Project this profile into a 1-D histogram along X; ///; /// The projection is always of the type TH1D.; ///; /// - if option ""E"" is specified the errors of the projected histogram are computed and set; /// to be equal to the errors of the profile.; /// Option ""E"" is defined as the default one in the header file.; /// - if option """" is specified the histogram errors are simply the sqrt of its content; /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// otherwise (default) it will be equal to GetBinContent(bin); /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""W"" is specified the bin content of the projected histogram is set to the; /// product of the bin content of the profile and the entries.; /// With this option the returned histogram will be equivalent to the one obtained by; /// filling directly a TH1D using the 2-nd value as a weight.; /// This makes sense only for profile filled with weights =1. If not, the error of the; /// projected histogram obtained with this option will not be correct.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:458,Usability,simpl,simply,458,"////////////////////////////////////////////////////////////////////////////////; /// Project this profile into a 1-D histogram along X; ///; /// The projection is always of the type TH1D.; ///; /// - if option ""E"" is specified the errors of the projected histogram are computed and set; /// to be equal to the errors of the profile.; /// Option ""E"" is defined as the default one in the header file.; /// - if option """" is specified the histogram errors are simply the sqrt of its content; /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// otherwise (default) it will be equal to GetBinContent(bin); /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""W"" is specified the bin content of the projected histogram is set to the; /// product of the bin content of the profile and the entries.; /// With this option the returned histogram will be equivalent to the one obtained by; /// filling directly a TH1D using the 2-nd value as a weight.; /// This makes sense only for profile filled with weights =1. If not, the error of the; /// projected histogram obtained with this option will not be correct.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:35,Availability,error,errors,35,"// if option E projected histogram errors are same as profile",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:27,Availability,error,error,27,"// in case of option W bin error is deduced from bin sum of z**2 values of profile; // this is correct only if the profile is filled with weights =1",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:79,Availability,error,error,79,"// in case of bin entries and profile is weighted, we need to set also the bin error",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:421,Availability,error,errors,421,"////////////////////////////////////////////////////////////////////////////////; /// Rebin this profile grouping ngroup bins together.; ///; /// ## case 1 xbins=0; /// if newname is not blank a new temporary profile hnew is created.; /// else the current profile is modified (default); /// The parameter ngroup indicates how many bins of this have to me merged; /// into one bin of hnew; /// If the original profile has errors stored (via Sumw2), the resulting; /// profile has new errors correctly calculated.; ///; /// examples: if hp is an existing TProfile histogram with 100 bins; ///; /// ~~~ {.cpp}; /// hp->Rebin(); //merges two bins in one in hp: previous contents of hp are lost; /// hp->Rebin(5); //merges five bins in one in hp; /// TProfile *hnew = hp->Rebin(5,""hnew""); // creates a new profile hnew; /// //merging 5 bins of hp in one bin; /// ~~~; ///; /// NOTE: If ngroup is not an exact divider of the number of bins,; /// the top limit of the rebinned profile is changed; /// to the upper edge of the bin=newbins*ngroup and the corresponding; /// bins are added to the overflow bin.; /// Statistics will be recomputed from the new bin contents.; ///; /// ## case 2 xbins!=0; /// a new profile is created (you should specify newname).; /// The parameter ngroup is the number of variable size bins in the created profile; /// The array xbins must contain ngroup+1 elements that represent the low-edge; /// of the bins.; /// The data of the old bins are added to the new bin which contains the bin center; /// of the old bins. It is possible that information from the old binning are attached; /// to the under-/overflow bins of the new binning.; ///; /// examples: if hp is an existing TProfile with 100 bins; ///; /// ~~~ {.cpp}; /// Double_t xbins[25] = {...} array of low-edges (xbins[25] is the upper edge of last bin; /// hp->Rebin(24,""hpnew"",xbins); //creates a new variable bin size profile hpnew; /// ~~~",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:483,Availability,error,errors,483,"////////////////////////////////////////////////////////////////////////////////; /// Rebin this profile grouping ngroup bins together.; ///; /// ## case 1 xbins=0; /// if newname is not blank a new temporary profile hnew is created.; /// else the current profile is modified (default); /// The parameter ngroup indicates how many bins of this have to me merged; /// into one bin of hnew; /// If the original profile has errors stored (via Sumw2), the resulting; /// profile has new errors correctly calculated.; ///; /// examples: if hp is an existing TProfile histogram with 100 bins; ///; /// ~~~ {.cpp}; /// hp->Rebin(); //merges two bins in one in hp: previous contents of hp are lost; /// hp->Rebin(5); //merges five bins in one in hp; /// TProfile *hnew = hp->Rebin(5,""hnew""); // creates a new profile hnew; /// //merging 5 bins of hp in one bin; /// ~~~; ///; /// NOTE: If ngroup is not an exact divider of the number of bins,; /// the top limit of the rebinned profile is changed; /// to the upper edge of the bin=newbins*ngroup and the corresponding; /// bins are added to the overflow bin.; /// Statistics will be recomputed from the new bin contents.; ///; /// ## case 2 xbins!=0; /// a new profile is created (you should specify newname).; /// The parameter ngroup is the number of variable size bins in the created profile; /// The array xbins must contain ngroup+1 elements that represent the low-edge; /// of the bins.; /// The data of the old bins are added to the new bin which contains the bin center; /// of the old bins. It is possible that information from the old binning are attached; /// to the under-/overflow bins of the new binning.; ///; /// examples: if hp is an existing TProfile with 100 bins; ///; /// ~~~ {.cpp}; /// Double_t xbins[25] = {...} array of low-edges (xbins[25] is the upper edge of last bin; /// hp->Rebin(24,""hpnew"",xbins); //creates a new variable bin size profile hpnew; /// ~~~",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:1295,Modifiability,variab,variable,1295,"////////////////////////////////////////////////////////////////////////////////; /// Rebin this profile grouping ngroup bins together.; ///; /// ## case 1 xbins=0; /// if newname is not blank a new temporary profile hnew is created.; /// else the current profile is modified (default); /// The parameter ngroup indicates how many bins of this have to me merged; /// into one bin of hnew; /// If the original profile has errors stored (via Sumw2), the resulting; /// profile has new errors correctly calculated.; ///; /// examples: if hp is an existing TProfile histogram with 100 bins; ///; /// ~~~ {.cpp}; /// hp->Rebin(); //merges two bins in one in hp: previous contents of hp are lost; /// hp->Rebin(5); //merges five bins in one in hp; /// TProfile *hnew = hp->Rebin(5,""hnew""); // creates a new profile hnew; /// //merging 5 bins of hp in one bin; /// ~~~; ///; /// NOTE: If ngroup is not an exact divider of the number of bins,; /// the top limit of the rebinned profile is changed; /// to the upper edge of the bin=newbins*ngroup and the corresponding; /// bins are added to the overflow bin.; /// Statistics will be recomputed from the new bin contents.; ///; /// ## case 2 xbins!=0; /// a new profile is created (you should specify newname).; /// The parameter ngroup is the number of variable size bins in the created profile; /// The array xbins must contain ngroup+1 elements that represent the low-edge; /// of the bins.; /// The data of the old bins are added to the new bin which contains the bin center; /// of the old bins. It is possible that information from the old binning are attached; /// to the under-/overflow bins of the new binning.; ///; /// examples: if hp is an existing TProfile with 100 bins; ///; /// ~~~ {.cpp}; /// Double_t xbins[25] = {...} array of low-edges (xbins[25] is the upper edge of last bin; /// hp->Rebin(24,""hpnew"",xbins); //creates a new variable bin size profile hpnew; /// ~~~",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:1888,Modifiability,variab,variable,1888,"////////////////////////////////////////////////////////////////////////////////; /// Rebin this profile grouping ngroup bins together.; ///; /// ## case 1 xbins=0; /// if newname is not blank a new temporary profile hnew is created.; /// else the current profile is modified (default); /// The parameter ngroup indicates how many bins of this have to me merged; /// into one bin of hnew; /// If the original profile has errors stored (via Sumw2), the resulting; /// profile has new errors correctly calculated.; ///; /// examples: if hp is an existing TProfile histogram with 100 bins; ///; /// ~~~ {.cpp}; /// hp->Rebin(); //merges two bins in one in hp: previous contents of hp are lost; /// hp->Rebin(5); //merges five bins in one in hp; /// TProfile *hnew = hp->Rebin(5,""hnew""); // creates a new profile hnew; /// //merging 5 bins of hp in one bin; /// ~~~; ///; /// NOTE: If ngroup is not an exact divider of the number of bins,; /// the top limit of the rebinned profile is changed; /// to the upper edge of the bin=newbins*ngroup and the corresponding; /// bins are added to the overflow bin.; /// Statistics will be recomputed from the new bin contents.; ///; /// ## case 2 xbins!=0; /// a new profile is created (you should specify newname).; /// The parameter ngroup is the number of variable size bins in the created profile; /// The array xbins must contain ngroup+1 elements that represent the low-edge; /// of the bins.; /// The data of the old bins are added to the new bin which contains the bin center; /// of the old bins. It is possible that information from the old binning are attached; /// to the under-/overflow bins of the new binning.; ///; /// examples: if hp is an existing TProfile with 100 bins; ///; /// ~~~ {.cpp}; /// Double_t xbins[25] = {...} array of low-edges (xbins[25] is the upper edge of last bin; /// hp->Rebin(24,""hpnew"",xbins); //creates a new variable bin size profile hpnew; /// ~~~",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:44,Modifiability,variab,variable,44,"// in the case of xbins given (rebinning in variable bins) ngroup is the new number of bins.; // and number of grouped bins is not constant.; // when looping for setting the contents for the new histogram we; // need to loop on all bins of original histogram. Set then ngroup=nbins",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:20,Modifiability,variab,variable,20,"// for rebinning of variable bins in a constant group",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:21,Modifiability,variab,variable,21,"// when rebinning in variable bins",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:459,Availability,error,errors,459,"////////////////////////////////////////////////////////////////////////////////; /// Profile histogram is resized along x axis such that x is in the axis range.; /// The new axis limits are recomputed by doubling iteratively; /// the current axis range until the specified value x is within the limits.; /// The algorithm makes a copy of the histogram, then loops on all bins; /// of the old histogram to fill the extended histogram.; /// Takes into account errors (Sumw2) if any.; /// The axis must be extendable before invoking this function.; ///; /// Ex: `h->GetXaxis()->SetCanExtend(kTRUE)`",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:415,Modifiability,extend,extended,415,"////////////////////////////////////////////////////////////////////////////////; /// Profile histogram is resized along x axis such that x is in the axis range.; /// The new axis limits are recomputed by doubling iteratively; /// the current axis range until the specified value x is within the limits.; /// The algorithm makes a copy of the histogram, then loops on all bins; /// of the old histogram to fill the extended histogram.; /// Takes into account errors (Sumw2) if any.; /// The axis must be extendable before invoking this function.; ///; /// Ex: `h->GetXaxis()->SetCanExtend(kTRUE)`",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:504,Modifiability,extend,extendable,504,"////////////////////////////////////////////////////////////////////////////////; /// Profile histogram is resized along x axis such that x is in the axis range.; /// The new axis limits are recomputed by doubling iteratively; /// the current axis range until the specified value x is within the limits.; /// The algorithm makes a copy of the histogram, then loops on all bins; /// of the old histogram to fill the extended histogram.; /// Takes into account errors (Sumw2) if any.; /// The axis must be extendable before invoking this function.; ///; /// Ex: `h->GetXaxis()->SetCanExtend(kTRUE)`",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:63,Modifiability,variab,variable,63,"//Note the following restrictions in the code generated:; // - variable bin size not implemented; // - SetErrorOption not implemented",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:109,Safety,safe,safer,109,"//histogram pointer has by default the histogram name.; //however, in case histogram has no directory, it is safer to add a incremental suffix",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:12,Availability,error,errors,12,"// save bin errors",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:116,Availability,error,errors,116,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile errors.; ///; /// The computation of the bin errors is based on the parameter option:; ///; /// -' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Y),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Y is 0 and the number of bin entries is > 0; /// -'s' The bin errors are the standard deviations of the Y bin values; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Y is 0 and the number of bin entries is > 0; /// -'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in Y is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// -'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements y +/- dy,; /// and the profile is filled with values y and weights w = 1/dy**2; ///; /// See TProfile::BuildOptions for a detailed explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:161,Availability,error,errors,161,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile errors.; ///; /// The computation of the bin errors is based on the parameter option:; ///; /// -' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Y),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Y is 0 and the number of bin entries is > 0; /// -'s' The bin errors are the standard deviations of the Y bin values; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Y is 0 and the number of bin entries is > 0; /// -'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in Y is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// -'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements y +/- dy,; /// and the profile is filled with values y and weights w = 1/dy**2; ///; /// See TProfile::BuildOptions for a detailed explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:235,Availability,error,errors,235,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile errors.; ///; /// The computation of the bin errors is based on the parameter option:; ///; /// -' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Y),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Y is 0 and the number of bin entries is > 0; /// -'s' The bin errors are the standard deviations of the Y bin values; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Y is 0 and the number of bin entries is > 0; /// -'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in Y is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// -'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements y +/- dy,; /// and the profile is filled with values y and weights w = 1/dy**2; ///; /// See TProfile::BuildOptions for a detailed explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:259,Availability,error,error,259,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile errors.; ///; /// The computation of the bin errors is based on the parameter option:; ///; /// -' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Y),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Y is 0 and the number of bin entries is > 0; /// -'s' The bin errors are the standard deviations of the Y bin values; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Y is 0 and the number of bin entries is > 0; /// -'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in Y is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// -'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements y +/- dy,; /// and the profile is filled with values y and weights w = 1/dy**2; ///; /// See TProfile::BuildOptions for a detailed explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:332,Availability,error,error,332,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile errors.; ///; /// The computation of the bin errors is based on the parameter option:; ///; /// -' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Y),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Y is 0 and the number of bin entries is > 0; /// -'s' The bin errors are the standard deviations of the Y bin values; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Y is 0 and the number of bin entries is > 0; /// -'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in Y is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// -'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements y +/- dy,; /// and the profile is filled with values y and weights w = 1/dy**2; ///; /// See TProfile::BuildOptions for a detailed explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:523,Availability,error,errors,523,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile errors.; ///; /// The computation of the bin errors is based on the parameter option:; ///; /// -' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Y),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Y is 0 and the number of bin entries is > 0; /// -'s' The bin errors are the standard deviations of the Y bin values; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Y is 0 and the number of bin entries is > 0; /// -'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in Y is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// -'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements y +/- dy,; /// and the profile is filled with values y and weights w = 1/dy**2; ///; /// See TProfile::BuildOptions for a detailed explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:734,Availability,Error,Errors,734,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile errors.; ///; /// The computation of the bin errors is based on the parameter option:; ///; /// -' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Y),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Y is 0 and the number of bin entries is > 0; /// -'s' The bin errors are the standard deviations of the Y bin values; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Y is 0 and the number of bin entries is > 0; /// -'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in Y is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// -'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements y +/- dy,; /// and the profile is filled with values y and weights w = 1/dy**2; ///; /// See TProfile::BuildOptions for a detailed explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:774,Availability,error,errors,774,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile errors.; ///; /// The computation of the bin errors is based on the parameter option:; ///; /// -' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Y),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Y is 0 and the number of bin entries is > 0; /// -'s' The bin errors are the standard deviations of the Y bin values; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Y is 0 and the number of bin entries is > 0; /// -'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in Y is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// -'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements y +/- dy,; /// and the profile is filled with values y and weights w = 1/dy**2; ///; /// See TProfile::BuildOptions for a detailed explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:905,Availability,error,error,905,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile errors.; ///; /// The computation of the bin errors is based on the parameter option:; ///; /// -' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Y),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Y is 0 and the number of bin entries is > 0; /// -'s' The bin errors are the standard deviations of the Y bin values; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Y is 0 and the number of bin entries is > 0; /// -'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in Y is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// -'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements y +/- dy,; /// and the profile is filled with values y and weights w = 1/dy**2; ///; /// See TProfile::BuildOptions for a detailed explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:939,Availability,Error,Errors,939,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile errors.; ///; /// The computation of the bin errors is based on the parameter option:; ///; /// -' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Y),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Y is 0 and the number of bin entries is > 0; /// -'s' The bin errors are the standard deviations of the Y bin values; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Y is 0 and the number of bin entries is > 0; /// -'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in Y is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// -'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements y +/- dy,; /// and the profile is filled with values y and weights w = 1/dy**2; ///; /// See TProfile::BuildOptions for a detailed explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:114,Availability,error,error,114,"/** \class TProfile2D; \ingroup Histograms; Profile2D histograms are used to display the mean; value of Z and its error for each cell in X,Y.; Profile2D histograms are in many cases an; elegant replacement of three-dimensional histograms : the inter-relation of three; measured quantities X, Y and Z can always be visualized by a three-dimensional; histogram or scatter-plot; its representation on the line-printer is not particularly; satisfactory, except for sparse data. If Z is an unknown (but single-valued); approximate function of X,Y this function is displayed by a profile2D histogram with; much better precision than by a scatter-plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for cell i, j.; \f[; \begin{align}; H(i,j) &= \sum w \cdot Z \\; E(i,j) &= \sum w \cdot Z^2 \\; W(i,j) &= \sum w \\; h(i,j) &= \frac{H(i,j)}{W(i,j)} \\; s(i,j) &= \sqrt{E(i,j)/W(i,j)- h(i,j)^2} \\; e(i,j) &= \frac{s(i,j)}{\sqrt{W(i,j)}}; \end{align}; \f]; The bin content is always the mean of the Z values, but errors change depending on options:; \f[; \begin{align}; \text{GetBinContent}(i,j) &= h(i,j) \\; \text{GetBinError}(i,j) &=; \begin{cases}; e(i,j) &\text{if option="""" (default). Error of the mean of all z values.} \\; s(i,j) &\text{if option=""s"". Standard deviation of z values.} \\; \begin{cases} e(j) &\text{if } h(i,j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(i,j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(i,j)} &\text{if option=""g"". Error of a weighted mean when combining measurements with variances of } w. \\; \end{cases}; \end{align}; \f]. In the special case where s(I,J) is zero (eg, case of 1 entry only in one cell); the bin error e(I,J) is computed from the average of the s(I,J) for all cells; if the static function TProfile2D::Approximate has been called.; This simple/crude approximation was suggeste",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:1122,Availability,error,errors,1122,"ams are used to display the mean; value of Z and its error for each cell in X,Y.; Profile2D histograms are in many cases an; elegant replacement of three-dimensional histograms : the inter-relation of three; measured quantities X, Y and Z can always be visualized by a three-dimensional; histogram or scatter-plot; its representation on the line-printer is not particularly; satisfactory, except for sparse data. If Z is an unknown (but single-valued); approximate function of X,Y this function is displayed by a profile2D histogram with; much better precision than by a scatter-plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for cell i, j.; \f[; \begin{align}; H(i,j) &= \sum w \cdot Z \\; E(i,j) &= \sum w \cdot Z^2 \\; W(i,j) &= \sum w \\; h(i,j) &= \frac{H(i,j)}{W(i,j)} \\; s(i,j) &= \sqrt{E(i,j)/W(i,j)- h(i,j)^2} \\; e(i,j) &= \frac{s(i,j)}{\sqrt{W(i,j)}}; \end{align}; \f]; The bin content is always the mean of the Z values, but errors change depending on options:; \f[; \begin{align}; \text{GetBinContent}(i,j) &= h(i,j) \\; \text{GetBinError}(i,j) &=; \begin{cases}; e(i,j) &\text{if option="""" (default). Error of the mean of all z values.} \\; s(i,j) &\text{if option=""s"". Standard deviation of z values.} \\; \begin{cases} e(j) &\text{if } h(i,j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(i,j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(i,j)} &\text{if option=""g"". Error of a weighted mean when combining measurements with variances of } w. \\; \end{cases}; \end{align}; \f]. In the special case where s(I,J) is zero (eg, case of 1 entry only in one cell); the bin error e(I,J) is computed from the average of the s(I,J) for all cells; if the static function TProfile2D::Approximate has been called.; This simple/crude approximation was suggested in order to keep the cell; during a fit operation. But note",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:1300,Availability,Error,Error,1300,"sualized by a three-dimensional; histogram or scatter-plot; its representation on the line-printer is not particularly; satisfactory, except for sparse data. If Z is an unknown (but single-valued); approximate function of X,Y this function is displayed by a profile2D histogram with; much better precision than by a scatter-plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for cell i, j.; \f[; \begin{align}; H(i,j) &= \sum w \cdot Z \\; E(i,j) &= \sum w \cdot Z^2 \\; W(i,j) &= \sum w \\; h(i,j) &= \frac{H(i,j)}{W(i,j)} \\; s(i,j) &= \sqrt{E(i,j)/W(i,j)- h(i,j)^2} \\; e(i,j) &= \frac{s(i,j)}{\sqrt{W(i,j)}}; \end{align}; \f]; The bin content is always the mean of the Z values, but errors change depending on options:; \f[; \begin{align}; \text{GetBinContent}(i,j) &= h(i,j) \\; \text{GetBinError}(i,j) &=; \begin{cases}; e(i,j) &\text{if option="""" (default). Error of the mean of all z values.} \\; s(i,j) &\text{if option=""s"". Standard deviation of z values.} \\; \begin{cases} e(j) &\text{if } h(i,j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(i,j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(i,j)} &\text{if option=""g"". Error of a weighted mean when combining measurements with variances of } w. \\; \end{cases}; \end{align}; \f]. In the special case where s(I,J) is zero (eg, case of 1 entry only in one cell); the bin error e(I,J) is computed from the average of the s(I,J) for all cells; if the static function TProfile2D::Approximate has been called.; This simple/crude approximation was suggested in order to keep the cell; during a fit operation. But note that this approximation is not the default behaviour. ### Creating and drawing a 2D profile; ~~~~{.cpp}; {; auto c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; auto hprof2d = new TProfile2D(""hprof2d"",""Profile of pz versus px and py"",",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:1621,Availability,Error,Error,1621,"ter-plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for cell i, j.; \f[; \begin{align}; H(i,j) &= \sum w \cdot Z \\; E(i,j) &= \sum w \cdot Z^2 \\; W(i,j) &= \sum w \\; h(i,j) &= \frac{H(i,j)}{W(i,j)} \\; s(i,j) &= \sqrt{E(i,j)/W(i,j)- h(i,j)^2} \\; e(i,j) &= \frac{s(i,j)}{\sqrt{W(i,j)}}; \end{align}; \f]; The bin content is always the mean of the Z values, but errors change depending on options:; \f[; \begin{align}; \text{GetBinContent}(i,j) &= h(i,j) \\; \text{GetBinError}(i,j) &=; \begin{cases}; e(i,j) &\text{if option="""" (default). Error of the mean of all z values.} \\; s(i,j) &\text{if option=""s"". Standard deviation of z values.} \\; \begin{cases} e(j) &\text{if } h(i,j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(i,j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(i,j)} &\text{if option=""g"". Error of a weighted mean when combining measurements with variances of } w. \\; \end{cases}; \end{align}; \f]. In the special case where s(I,J) is zero (eg, case of 1 entry only in one cell); the bin error e(I,J) is computed from the average of the s(I,J) for all cells; if the static function TProfile2D::Approximate has been called.; This simple/crude approximation was suggested in order to keep the cell; during a fit operation. But note that this approximation is not the default behaviour. ### Creating and drawing a 2D profile; ~~~~{.cpp}; {; auto c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; auto hprof2d = new TProfile2D(""hprof2d"",""Profile of pz versus px and py"",40,-4,4,40,-4,4,0,20);; Float_t px, py, pz;; for ( Int_t i=0; i<25000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; hprof2d->Fill(px,py,pz,1);; }; hprof2d->Draw();; }; ~~~~; */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor for Profile2D histograms.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:1821,Availability,error,error,1821,"ter-plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for cell i, j.; \f[; \begin{align}; H(i,j) &= \sum w \cdot Z \\; E(i,j) &= \sum w \cdot Z^2 \\; W(i,j) &= \sum w \\; h(i,j) &= \frac{H(i,j)}{W(i,j)} \\; s(i,j) &= \sqrt{E(i,j)/W(i,j)- h(i,j)^2} \\; e(i,j) &= \frac{s(i,j)}{\sqrt{W(i,j)}}; \end{align}; \f]; The bin content is always the mean of the Z values, but errors change depending on options:; \f[; \begin{align}; \text{GetBinContent}(i,j) &= h(i,j) \\; \text{GetBinError}(i,j) &=; \begin{cases}; e(i,j) &\text{if option="""" (default). Error of the mean of all z values.} \\; s(i,j) &\text{if option=""s"". Standard deviation of z values.} \\; \begin{cases} e(j) &\text{if } h(i,j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(i,j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(i,j)} &\text{if option=""g"". Error of a weighted mean when combining measurements with variances of } w. \\; \end{cases}; \end{align}; \f]. In the special case where s(I,J) is zero (eg, case of 1 entry only in one cell); the bin error e(I,J) is computed from the average of the s(I,J) for all cells; if the static function TProfile2D::Approximate has been called.; This simple/crude approximation was suggested in order to keep the cell; during a fit operation. But note that this approximation is not the default behaviour. ### Creating and drawing a 2D profile; ~~~~{.cpp}; {; auto c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; auto hprof2d = new TProfile2D(""hprof2d"",""Profile of pz versus px and py"",40,-4,4,40,-4,4,0,20);; Float_t px, py, pz;; for ( Int_t i=0; i<25000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; hprof2d->Fill(px,py,pz,1);; }; hprof2d->Draw();; }; ~~~~; */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor for Profile2D histograms.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:769,Integrability,rout,routines,769,"/** \class TProfile2D; \ingroup Histograms; Profile2D histograms are used to display the mean; value of Z and its error for each cell in X,Y.; Profile2D histograms are in many cases an; elegant replacement of three-dimensional histograms : the inter-relation of three; measured quantities X, Y and Z can always be visualized by a three-dimensional; histogram or scatter-plot; its representation on the line-printer is not particularly; satisfactory, except for sparse data. If Z is an unknown (but single-valued); approximate function of X,Y this function is displayed by a profile2D histogram with; much better precision than by a scatter-plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for cell i, j.; \f[; \begin{align}; H(i,j) &= \sum w \cdot Z \\; E(i,j) &= \sum w \cdot Z^2 \\; W(i,j) &= \sum w \\; h(i,j) &= \frac{H(i,j)}{W(i,j)} \\; s(i,j) &= \sqrt{E(i,j)/W(i,j)- h(i,j)^2} \\; e(i,j) &= \frac{s(i,j)}{\sqrt{W(i,j)}}; \end{align}; \f]; The bin content is always the mean of the Z values, but errors change depending on options:; \f[; \begin{align}; \text{GetBinContent}(i,j) &= h(i,j) \\; \text{GetBinError}(i,j) &=; \begin{cases}; e(i,j) &\text{if option="""" (default). Error of the mean of all z values.} \\; s(i,j) &\text{if option=""s"". Standard deviation of z values.} \\; \begin{cases} e(j) &\text{if } h(i,j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(i,j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(i,j)} &\text{if option=""g"". Error of a weighted mean when combining measurements with variances of } w. \\; \end{cases}; \end{align}; \f]. In the special case where s(I,J) is zero (eg, case of 1 entry only in one cell); the bin error e(I,J) is computed from the average of the s(I,J) for all cells; if the static function TProfile2D::Approximate has been called.; This simple/crude approximation was suggeste",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:1136,Integrability,depend,depending,1136,"ams are used to display the mean; value of Z and its error for each cell in X,Y.; Profile2D histograms are in many cases an; elegant replacement of three-dimensional histograms : the inter-relation of three; measured quantities X, Y and Z can always be visualized by a three-dimensional; histogram or scatter-plot; its representation on the line-printer is not particularly; satisfactory, except for sparse data. If Z is an unknown (but single-valued); approximate function of X,Y this function is displayed by a profile2D histogram with; much better precision than by a scatter-plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for cell i, j.; \f[; \begin{align}; H(i,j) &= \sum w \cdot Z \\; E(i,j) &= \sum w \cdot Z^2 \\; W(i,j) &= \sum w \\; h(i,j) &= \frac{H(i,j)}{W(i,j)} \\; s(i,j) &= \sqrt{E(i,j)/W(i,j)- h(i,j)^2} \\; e(i,j) &= \frac{s(i,j)}{\sqrt{W(i,j)}}; \end{align}; \f]; The bin content is always the mean of the Z values, but errors change depending on options:; \f[; \begin{align}; \text{GetBinContent}(i,j) &= h(i,j) \\; \text{GetBinError}(i,j) &=; \begin{cases}; e(i,j) &\text{if option="""" (default). Error of the mean of all z values.} \\; s(i,j) &\text{if option=""s"". Standard deviation of z values.} \\; \begin{cases} e(j) &\text{if } h(i,j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(i,j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(i,j)} &\text{if option=""g"". Error of a weighted mean when combining measurements with variances of } w. \\; \end{cases}; \end{align}; \f]. In the special case where s(I,J) is zero (eg, case of 1 entry only in one cell); the bin error e(I,J) is computed from the average of the s(I,J) for all cells; if the static function TProfile2D::Approximate has been called.; This simple/crude approximation was suggested in order to keep the cell; during a fit operation. But note",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:1962,Usability,simpl,simple,1962,"ter-plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for cell i, j.; \f[; \begin{align}; H(i,j) &= \sum w \cdot Z \\; E(i,j) &= \sum w \cdot Z^2 \\; W(i,j) &= \sum w \\; h(i,j) &= \frac{H(i,j)}{W(i,j)} \\; s(i,j) &= \sqrt{E(i,j)/W(i,j)- h(i,j)^2} \\; e(i,j) &= \frac{s(i,j)}{\sqrt{W(i,j)}}; \end{align}; \f]; The bin content is always the mean of the Z values, but errors change depending on options:; \f[; \begin{align}; \text{GetBinContent}(i,j) &= h(i,j) \\; \text{GetBinError}(i,j) &=; \begin{cases}; e(i,j) &\text{if option="""" (default). Error of the mean of all z values.} \\; s(i,j) &\text{if option=""s"". Standard deviation of z values.} \\; \begin{cases} e(j) &\text{if } h(i,j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(i,j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(i,j)} &\text{if option=""g"". Error of a weighted mean when combining measurements with variances of } w. \\; \end{cases}; \end{align}; \f]. In the special case where s(I,J) is zero (eg, case of 1 entry only in one cell); the bin error e(I,J) is computed from the average of the s(I,J) for all cells; if the static function TProfile2D::Approximate has been called.; This simple/crude approximation was suggested in order to keep the cell; during a fit operation. But note that this approximation is not the default behaviour. ### Creating and drawing a 2D profile; ~~~~{.cpp}; {; auto c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; auto hprof2d = new TProfile2D(""hprof2d"",""Profile of pz versus px and py"",40,-4,4,40,-4,4,0,20);; Float_t px, py, pz;; for ( Int_t i=0; i<25000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; hprof2d->Fill(px,py,pz,1);; }; hprof2d->Draw();; }; ~~~~; */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor for Profile2D histograms.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:834,Availability,error,errors,834,"////////////////////////////////////////////////////////////////////////////////; /// Normal Constructor for Profile histograms.; ///; /// The first eight parameters are similar to TH2D::TH2D.; /// All values of z are accepted at filling time.; /// To fill a profile2D histogram, one must use TProfile2D::Fill function.; ///; /// Note that when filling the profile histogram the function Fill; /// checks if the variable z is between fZmin and fZmax.; /// If a minimum or maximum value is set for the Z scale before filling,; /// then all values below zmin or above zmax will be discarded.; /// Setting the minimum or maximum value for the Z scale before filling; /// has the same effect as calling the special TProfile2D constructor below; /// where zmin and zmax are specified.; ///; /// H(I,J) is printed as the cell contents. The errors computed are s(I,J) if CHOPT='S'; /// (spread option), or e(I,J) if CHOPT=' ' (error on mean).; ///; /// See TProfile2D::BuildOptions for explanation of parameters; ///; /// see other constructors below with all possible combinations of; /// fix and variable bin size like in TH2D.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:920,Availability,error,error,920,"////////////////////////////////////////////////////////////////////////////////; /// Normal Constructor for Profile histograms.; ///; /// The first eight parameters are similar to TH2D::TH2D.; /// All values of z are accepted at filling time.; /// To fill a profile2D histogram, one must use TProfile2D::Fill function.; ///; /// Note that when filling the profile histogram the function Fill; /// checks if the variable z is between fZmin and fZmax.; /// If a minimum or maximum value is set for the Z scale before filling,; /// then all values below zmin or above zmax will be discarded.; /// Setting the minimum or maximum value for the Z scale before filling; /// has the same effect as calling the special TProfile2D constructor below; /// where zmin and zmax are specified.; ///; /// H(I,J) is printed as the cell contents. The errors computed are s(I,J) if CHOPT='S'; /// (spread option), or e(I,J) if CHOPT=' ' (error on mean).; ///; /// See TProfile2D::BuildOptions for explanation of parameters; ///; /// see other constructors below with all possible combinations of; /// fix and variable bin size like in TH2D.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:412,Modifiability,variab,variable,412,"////////////////////////////////////////////////////////////////////////////////; /// Normal Constructor for Profile histograms.; ///; /// The first eight parameters are similar to TH2D::TH2D.; /// All values of z are accepted at filling time.; /// To fill a profile2D histogram, one must use TProfile2D::Fill function.; ///; /// Note that when filling the profile histogram the function Fill; /// checks if the variable z is between fZmin and fZmax.; /// If a minimum or maximum value is set for the Z scale before filling,; /// then all values below zmin or above zmax will be discarded.; /// Setting the minimum or maximum value for the Z scale before filling; /// has the same effect as calling the special TProfile2D constructor below; /// where zmin and zmax are specified.; ///; /// H(I,J) is printed as the cell contents. The errors computed are s(I,J) if CHOPT='S'; /// (spread option), or e(I,J) if CHOPT=' ' (error on mean).; ///; /// See TProfile2D::BuildOptions for explanation of parameters; ///; /// see other constructors below with all possible combinations of; /// fix and variable bin size like in TH2D.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:1091,Modifiability,variab,variable,1091,"////////////////////////////////////////////////////////////////////////////////; /// Normal Constructor for Profile histograms.; ///; /// The first eight parameters are similar to TH2D::TH2D.; /// All values of z are accepted at filling time.; /// To fill a profile2D histogram, one must use TProfile2D::Fill function.; ///; /// Note that when filling the profile histogram the function Fill; /// checks if the variable z is between fZmin and fZmax.; /// If a minimum or maximum value is set for the Z scale before filling,; /// then all values below zmin or above zmax will be discarded.; /// Setting the minimum or maximum value for the Z scale before filling; /// has the same effect as calling the special TProfile2D constructor below; /// where zmin and zmax are specified.; ///; /// H(I,J) is printed as the cell contents. The errors computed are s(I,J) if CHOPT='S'; /// (spread option), or e(I,J) if CHOPT=' ' (error on mean).; ///; /// See TProfile2D::BuildOptions for explanation of parameters; ///; /// see other constructors below with all possible combinations of; /// fix and variable bin size like in TH2D.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:112,Modifiability,variab,variable,112,"////////////////////////////////////////////////////////////////////////////////; /// Create a 2-D Profile with variable bins in X and fix bins in Y.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:130,Modifiability,variab,variable,130,"////////////////////////////////////////////////////////////////////////////////; /// Create a 2-D Profile with fix bins in X and variable bins in Y.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:112,Modifiability,variab,variable,112,"////////////////////////////////////////////////////////////////////////////////; /// Create a 2-D Profile with variable bins in X and variable bins in Y.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:135,Modifiability,variab,variable,135,"////////////////////////////////////////////////////////////////////////////////; /// Create a 2-D Profile with variable bins in X and variable bins in Y.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:463,Availability,error,errors,463,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for Profile2D histograms with range in z.; ///; /// The first eight parameters are similar to TH2D::TH2D.; /// Only the values of Z between ZMIN and ZMAX will be considered at filling time.; /// zmin and zmax will also be the maximum and minimum values; /// on the z scale when drawing the profile2D.; ///; /// See TProfile2D::BuildOptions for more explanations on errors",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:385,Availability,error,error,385,"////////////////////////////////////////////////////////////////////////////////; /// Set Profile2D histogram structure and options.; ///; /// - zmin: minimum value allowed for z; /// - zmax: maximum value allowed for z; /// if (zmin = zmax = 0) there are no limits on the allowed z values (zmin = -inf, zmax = +inf); ///; /// - option: this is the option for the computation of the t error of the profile ( TProfile2D::GetBinError ); /// possible values for the options are documented in TProfile2D::SetErrorOption; ///; /// See TProfile::BuildOptions for a detailed description",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: `this = this + c1*f1` .",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: `this = this + c1*h1` .",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:219,Availability,error,error,219,"////////////////////////////////////////////////////////////////////////////////; /// Static function, set the fgApproximate flag.; ///; /// When the flag is true, the function GetBinError; /// will approximate the bin error with the average profile error on all bins; /// in the following situation only; /// - the number of bins in the profile2D is less than 10404 (eg 100x100); /// - the bin number of entries is small ( <5); /// - the estimated bin error is extremely small compared to the bin content; /// (see TProfile2D::GetBinError)",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:250,Availability,error,error,250,"////////////////////////////////////////////////////////////////////////////////; /// Static function, set the fgApproximate flag.; ///; /// When the flag is true, the function GetBinError; /// will approximate the bin error with the average profile error on all bins; /// in the following situation only; /// - the number of bins in the profile2D is less than 10404 (eg 100x100); /// - the bin number of entries is small ( <5); /// - the estimated bin error is extremely small compared to the bin content; /// (see TProfile2D::GetBinError)",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:453,Availability,error,error,453,"////////////////////////////////////////////////////////////////////////////////; /// Static function, set the fgApproximate flag.; ///; /// When the flag is true, the function GetBinError; /// will approximate the bin error with the average profile error on all bins; /// in the following situation only; /// - the number of bins in the profile2D is less than 10404 (eg 100x100); /// - the bin number of entries is small ( <5); /// - the estimated bin error is extremely small compared to the bin content; /// (see TProfile2D::GetBinError)",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: `this = this/(c1*f1)` .; /// This function is not implemented",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:88,Availability,error,error,88,"// maintaining the correct sum of weights square is not supported when dividing; // bin error resulting from division of profile needs to be checked",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:97,Availability,error,error,97,"////////////////////////////////////////////////////////////////////////////////; /// Return bin error of a Profile2D histogram.; ///; /// ### Computing errors: A moving field; ///; /// The computation of errors for a TProfile2D has evolved with the versions; /// of ROOT. The difficulty is in computing errors for bins with low statistics.; /// - prior to version 3.10, we had no special treatment of low statistic bins.; /// As a result, these bins had huge errors. The reason is that the; /// expression eprim2 is very close to 0 (rounding problems) or 0.; /// - The algorithm is modified/protected for the case; /// when a TProfile2D is projected (ProjectionX). The previous algorithm; /// generated a N^2 problem when projecting a TProfile2D with a large number of; /// bins (eg 100000).; /// - in version 3.10/02, a new static function TProfile::Approximate; /// is introduced to enable or disable (default) the approximation.; /// (see also comments in TProfile::GetBinError)",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:153,Availability,error,errors,153,"////////////////////////////////////////////////////////////////////////////////; /// Return bin error of a Profile2D histogram.; ///; /// ### Computing errors: A moving field; ///; /// The computation of errors for a TProfile2D has evolved with the versions; /// of ROOT. The difficulty is in computing errors for bins with low statistics.; /// - prior to version 3.10, we had no special treatment of low statistic bins.; /// As a result, these bins had huge errors. The reason is that the; /// expression eprim2 is very close to 0 (rounding problems) or 0.; /// - The algorithm is modified/protected for the case; /// when a TProfile2D is projected (ProjectionX). The previous algorithm; /// generated a N^2 problem when projecting a TProfile2D with a large number of; /// bins (eg 100000).; /// - in version 3.10/02, a new static function TProfile::Approximate; /// is introduced to enable or disable (default) the approximation.; /// (see also comments in TProfile::GetBinError)",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:205,Availability,error,errors,205,"////////////////////////////////////////////////////////////////////////////////; /// Return bin error of a Profile2D histogram.; ///; /// ### Computing errors: A moving field; ///; /// The computation of errors for a TProfile2D has evolved with the versions; /// of ROOT. The difficulty is in computing errors for bins with low statistics.; /// - prior to version 3.10, we had no special treatment of low statistic bins.; /// As a result, these bins had huge errors. The reason is that the; /// expression eprim2 is very close to 0 (rounding problems) or 0.; /// - The algorithm is modified/protected for the case; /// when a TProfile2D is projected (ProjectionX). The previous algorithm; /// generated a N^2 problem when projecting a TProfile2D with a large number of; /// bins (eg 100000).; /// - in version 3.10/02, a new static function TProfile::Approximate; /// is introduced to enable or disable (default) the approximation.; /// (see also comments in TProfile::GetBinError)",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:304,Availability,error,errors,304,"////////////////////////////////////////////////////////////////////////////////; /// Return bin error of a Profile2D histogram.; ///; /// ### Computing errors: A moving field; ///; /// The computation of errors for a TProfile2D has evolved with the versions; /// of ROOT. The difficulty is in computing errors for bins with low statistics.; /// - prior to version 3.10, we had no special treatment of low statistic bins.; /// As a result, these bins had huge errors. The reason is that the; /// expression eprim2 is very close to 0 (rounding problems) or 0.; /// - The algorithm is modified/protected for the case; /// when a TProfile2D is projected (ProjectionX). The previous algorithm; /// generated a N^2 problem when projecting a TProfile2D with a large number of; /// bins (eg 100000).; /// - in version 3.10/02, a new static function TProfile::Approximate; /// is introduced to enable or disable (default) the approximation.; /// (see also comments in TProfile::GetBinError)",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:460,Availability,error,errors,460,"////////////////////////////////////////////////////////////////////////////////; /// Return bin error of a Profile2D histogram.; ///; /// ### Computing errors: A moving field; ///; /// The computation of errors for a TProfile2D has evolved with the versions; /// of ROOT. The difficulty is in computing errors for bins with low statistics.; /// - prior to version 3.10, we had no special treatment of low statistic bins.; /// As a result, these bins had huge errors. The reason is that the; /// expression eprim2 is very close to 0 (rounding problems) or 0.; /// - The algorithm is modified/protected for the case; /// when a TProfile2D is projected (ProjectionX). The previous algorithm; /// generated a N^2 problem when projecting a TProfile2D with a large number of; /// bins (eg 100000).; /// - in version 3.10/02, a new static function TProfile::Approximate; /// is introduced to enable or disable (default) the approximation.; /// (see also comments in TProfile::GetBinError)",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:233,Modifiability,evolve,evolved,233,"////////////////////////////////////////////////////////////////////////////////; /// Return bin error of a Profile2D histogram.; ///; /// ### Computing errors: A moving field; ///; /// The computation of errors for a TProfile2D has evolved with the versions; /// of ROOT. The difficulty is in computing errors for bins with low statistics.; /// - prior to version 3.10, we had no special treatment of low statistic bins.; /// As a result, these bins had huge errors. The reason is that the; /// expression eprim2 is very close to 0 (rounding problems) or 0.; /// - The algorithm is modified/protected for the case; /// when a TProfile2D is projected (ProjectionX). The previous algorithm; /// generated a N^2 problem when projecting a TProfile2D with a large number of; /// bins (eg 100000).; /// - in version 3.10/02, a new static function TProfile::Approximate; /// is introduced to enable or disable (default) the approximation.; /// (see also comments in TProfile::GetBinError)",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:121,Availability,error,errors,121,"////////////////////////////////////////////////////////////////////////////////; /// Return option to compute profile2D errors.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:531,Usability,simpl,simply,531,"////////////////////////////////////////////////////////////////////////////////; /// Fill the array stats from the contents of this profile.; /// The array stats must be correctly dimensioned in the calling program.; ///; /// - stats[0] = sumw; /// - stats[1] = sumw2; /// - stats[2] = sumwx; /// - stats[3] = sumwx2; /// - stats[4] = sumwy; /// - stats[5] = sumwy2; /// - stats[6] = sumwxy; /// - stats[7] = sumwz; /// - stats[8] = sumwz2; ///; /// If no axis-subrange is specified (via TAxis::SetRange), the array stats; /// is simply a copy of the statistics quantities computed at filling time.; /// If a sub-range is specified, the function recomputes these quantities; /// from the bin contents in the current axis range.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:86,Energy Efficiency,Reduce,Reduce,86,"////////////////////////////////////////////////////////////////////////////////; /// Reduce the number of bins for this axis to the number of bins having a label.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:436,Availability,down,down,436,"////////////////////////////////////////////////////////////////////////////////; /// Set option(s) to draw axis with labels.; ///; /// option might have the following values:; ///; /// - ""a"" sort by alphabetic order; /// - "">"" sort by decreasing values; /// - ""<"" sort by increasing values; /// - ""h"" draw labels horizontal; /// - ""v"" draw labels vertical; /// - ""u"" draw labels up (end of label right adjusted); /// - ""d"" draw labels down (start of label left adjusted)",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:270,Availability,error,errors,270,"////////////////////////////////////////////////////////////////////////////////; /// Merge all histograms in the collection in this histogram.; /// This function computes the min/max for the axes,; /// compute a new number of bins, if necessary,; /// add bin contents, errors and statistics.; /// If overflows are present and limits are different the function will fail.; /// The function returns the total number of entries in the result histogram; /// if the merge is successful, -1 otherwise.; ///; /// IMPORTANT remark. The 2 axis x and y may have different number; /// of bins and different limits, BUT the largest bin width must be; /// a multiple of the smallest bin width and the upper limit must also; /// be a multiple of the bin width.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: this = this*c1*f1",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:237,Availability,error,errors,237,"////////////////////////////////////////////////////////////////////////////////; /// Project this profile2D into a 2-D histogram along X,Y.; ///; /// The projection is always of the type TH2D.; ///; /// - if option ""E"" is specified the errors of the projected histogram are computed and set; /// to be equal to the errors of the profile.; /// Option ""E"" is defined as the default one in the header file.; /// - if option """" is specified the histogram errors are simply the sqrt of its content; /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""W"" is specified the bin content of the projected histogram is set to the; /// product of the bin content of the profile and the entries.; /// With this option the returned histogram will be equivalent to the one obtained by; /// filling directly a TH2D using the 3-rd value as a weight.; /// This option makes sense only for profile filled with all weights =1.; /// When the profile is weighted (filled with weights different than 1) the; /// bin error of the projected histogram (obtained using this option ""W"") cannot be; /// correctly computed from the information stored in the profile. In that case the; /// obtained histogram contains as bin error square the weighted sum of the square of the; /// profiled observable (TProfile2D::fSumw2[bin] )",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:316,Availability,error,errors,316,"////////////////////////////////////////////////////////////////////////////////; /// Project this profile2D into a 2-D histogram along X,Y.; ///; /// The projection is always of the type TH2D.; ///; /// - if option ""E"" is specified the errors of the projected histogram are computed and set; /// to be equal to the errors of the profile.; /// Option ""E"" is defined as the default one in the header file.; /// - if option """" is specified the histogram errors are simply the sqrt of its content; /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""W"" is specified the bin content of the projected histogram is set to the; /// product of the bin content of the profile and the entries.; /// With this option the returned histogram will be equivalent to the one obtained by; /// filling directly a TH2D using the 3-rd value as a weight.; /// This option makes sense only for profile filled with all weights =1.; /// When the profile is weighted (filled with weights different than 1) the; /// bin error of the projected histogram (obtained using this option ""W"") cannot be; /// correctly computed from the information stored in the profile. In that case the; /// obtained histogram contains as bin error square the weighted sum of the square of the; /// profiled observable (TProfile2D::fSumw2[bin] )",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:452,Availability,error,errors,452,"////////////////////////////////////////////////////////////////////////////////; /// Project this profile2D into a 2-D histogram along X,Y.; ///; /// The projection is always of the type TH2D.; ///; /// - if option ""E"" is specified the errors of the projected histogram are computed and set; /// to be equal to the errors of the profile.; /// Option ""E"" is defined as the default one in the header file.; /// - if option """" is specified the histogram errors are simply the sqrt of its content; /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""W"" is specified the bin content of the projected histogram is set to the; /// product of the bin content of the profile and the entries.; /// With this option the returned histogram will be equivalent to the one obtained by; /// filling directly a TH2D using the 3-rd value as a weight.; /// This option makes sense only for profile filled with all weights =1.; /// When the profile is weighted (filled with weights different than 1) the; /// bin error of the projected histogram (obtained using this option ""W"") cannot be; /// correctly computed from the information stored in the profile. In that case the; /// obtained histogram contains as bin error square the weighted sum of the square of the; /// profiled observable (TProfile2D::fSumw2[bin] )",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:717,Availability,error,errors,717,"////////////////////////////////////////////////////////////////////////////////; /// Project this profile2D into a 2-D histogram along X,Y.; ///; /// The projection is always of the type TH2D.; ///; /// - if option ""E"" is specified the errors of the projected histogram are computed and set; /// to be equal to the errors of the profile.; /// Option ""E"" is defined as the default one in the header file.; /// - if option """" is specified the histogram errors are simply the sqrt of its content; /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""W"" is specified the bin content of the projected histogram is set to the; /// product of the bin content of the profile and the entries.; /// With this option the returned histogram will be equivalent to the one obtained by; /// filling directly a TH2D using the 3-rd value as a weight.; /// This option makes sense only for profile filled with all weights =1.; /// When the profile is weighted (filled with weights different than 1) the; /// bin error of the projected histogram (obtained using this option ""W"") cannot be; /// correctly computed from the information stored in the profile. In that case the; /// obtained histogram contains as bin error square the weighted sum of the square of the; /// profiled observable (TProfile2D::fSumw2[bin] )",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:1204,Availability,error,error,1204,"////////////////////////////////////////////////////////////////////////////////; /// Project this profile2D into a 2-D histogram along X,Y.; ///; /// The projection is always of the type TH2D.; ///; /// - if option ""E"" is specified the errors of the projected histogram are computed and set; /// to be equal to the errors of the profile.; /// Option ""E"" is defined as the default one in the header file.; /// - if option """" is specified the histogram errors are simply the sqrt of its content; /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""W"" is specified the bin content of the projected histogram is set to the; /// product of the bin content of the profile and the entries.; /// With this option the returned histogram will be equivalent to the one obtained by; /// filling directly a TH2D using the 3-rd value as a weight.; /// This option makes sense only for profile filled with all weights =1.; /// When the profile is weighted (filled with weights different than 1) the; /// bin error of the projected histogram (obtained using this option ""W"") cannot be; /// correctly computed from the information stored in the profile. In that case the; /// obtained histogram contains as bin error square the weighted sum of the square of the; /// profiled observable (TProfile2D::fSumw2[bin] )",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:1405,Availability,error,error,1405,"////////////////////////////////////////////////////////////////////////////////; /// Project this profile2D into a 2-D histogram along X,Y.; ///; /// The projection is always of the type TH2D.; ///; /// - if option ""E"" is specified the errors of the projected histogram are computed and set; /// to be equal to the errors of the profile.; /// Option ""E"" is defined as the default one in the header file.; /// - if option """" is specified the histogram errors are simply the sqrt of its content; /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""W"" is specified the bin content of the projected histogram is set to the; /// product of the bin content of the profile and the entries.; /// With this option the returned histogram will be equivalent to the one obtained by; /// filling directly a TH2D using the 3-rd value as a weight.; /// This option makes sense only for profile filled with all weights =1.; /// When the profile is weighted (filled with weights different than 1) the; /// bin error of the projected histogram (obtained using this option ""W"") cannot be; /// correctly computed from the information stored in the profile. In that case the; /// obtained histogram contains as bin error square the weighted sum of the square of the; /// profiled observable (TProfile2D::fSumw2[bin] )",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:463,Usability,simpl,simply,463,"////////////////////////////////////////////////////////////////////////////////; /// Project this profile2D into a 2-D histogram along X,Y.; ///; /// The projection is always of the type TH2D.; ///; /// - if option ""E"" is specified the errors of the projected histogram are computed and set; /// to be equal to the errors of the profile.; /// Option ""E"" is defined as the default one in the header file.; /// - if option """" is specified the histogram errors are simply the sqrt of its content; /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""W"" is specified the bin content of the projected histogram is set to the; /// product of the bin content of the profile and the entries.; /// With this option the returned histogram will be equivalent to the one obtained by; /// filling directly a TH2D using the 3-rd value as a weight.; /// This option makes sense only for profile filled with all weights =1.; /// When the profile is weighted (filled with weights different than 1) the; /// bin error of the projected histogram (obtained using this option ""W"") cannot be; /// correctly computed from the information stored in the profile. In that case the; /// obtained histogram contains as bin error square the weighted sum of the square of the; /// profiled observable (TProfile2D::fSumw2[bin] )",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:35,Availability,error,errors,35,"// if option E projected histogram errors are same as profile",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:27,Availability,error,error,27,"// in case of option W bin error is deduced from bin sum of z**2 values of profile; // this is correct only if the profile is unweighted",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:79,Availability,error,error,79,"// in case of bin entries and profile is weighted, we need to set also the bin error",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:688,Availability,error,error,688,"////////////////////////////////////////////////////////////////////////////////; /// Project a 2-D histogram into a profile histogram along X.; ///; /// The projection is made from the channels along the Y axis; /// ranging from firstybin to lastybin included.; /// The result is a 1D profile which contains the combination of all the considered bins along Y; /// By default, bins 1 to ny are included; /// When all bins are included, the number of entries in the projection; /// is set to the number of entries of the 2-D histogram, otherwise; /// the number of entries is incremented by 1 for all non empty cells.; ///; /// The option can also be used to specify the projected profile error type.; /// Values which can be used are 's', 'i', or 'g'. See TProfile::BuildOptions for details",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:687,Availability,error,error,687,"////////////////////////////////////////////////////////////////////////////////; /// Project a 2-D histogram into a profile histogram along X; ///; /// The projection is made from the channels along the X axis; /// ranging from firstybin to lastybin included.; /// The result is a 1D profile which contains the combination of all the considered bins along X; /// By default, bins 1 to ny are included; /// When all bins are included, the number of entries in the projection; /// is set to the number of entries of the 2-D histogram, otherwise; /// the number of entries is incremented by 1 for all non empty cells.; ///; /// The option can also be used to specify the projected profile error type.; /// Values which can be used are 's', 'i', or 'g'. See TProfile::BuildOptions for details",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:11,Modifiability,variab,variable,11,"// case of variable bins",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:47,Availability,error,errors,47,"// sum of weight squares are stored to compute errors in h1N histogram",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:462,Availability,error,errors,462,"////////////////////////////////////////////////////////////////////////////////; /// Profile histogram is resized along axis such that x is in the axis range.; ///; /// The new axis limits are recomputed by doubling iteratively; /// the current axis range until the specified value x is within the limits.; /// The algorithm makes a copy of the histogram, then loops on all bins; /// of the old histogram to fill the extended histogram.; /// Takes into account errors (Sumw2) if any.; /// The axis must be extendable before invoking this function.; ///; /// Ex: `h->GetXaxis()->SetCanExtend(kTRUE)`",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:418,Modifiability,extend,extended,418,"////////////////////////////////////////////////////////////////////////////////; /// Profile histogram is resized along axis such that x is in the axis range.; ///; /// The new axis limits are recomputed by doubling iteratively; /// the current axis range until the specified value x is within the limits.; /// The algorithm makes a copy of the histogram, then loops on all bins; /// of the old histogram to fill the extended histogram.; /// Takes into account errors (Sumw2) if any.; /// The axis must be extendable before invoking this function.; ///; /// Ex: `h->GetXaxis()->SetCanExtend(kTRUE)`",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:507,Modifiability,extend,extendable,507,"////////////////////////////////////////////////////////////////////////////////; /// Profile histogram is resized along axis such that x is in the axis range.; ///; /// The new axis limits are recomputed by doubling iteratively; /// the current axis range until the specified value x is within the limits.; /// The algorithm makes a copy of the histogram, then loops on all bins; /// of the old histogram to fill the extended histogram.; /// Takes into account errors (Sumw2) if any.; /// The axis must be extendable before invoking this function.; ///; /// Ex: `h->GetXaxis()->SetCanExtend(kTRUE)`",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:453,Availability,error,errors,453,"////////////////////////////////////////////////////////////////////////////////; /// Rebin this histogram grouping nxgroup/nygroup bins along the xaxis/yaxis together.; ///; /// if newname is not blank a new profile hnew is created.; /// else the current histogram is modified (default); /// The parameter nxgroup/nygroup indicate how many bins along the xaxis/yaxis of this; /// have to be merged into one bin of hnew; /// If the original profile has errors stored (via Sumw2), the resulting; /// profile has new errors correctly calculated.; ///; /// examples: if hpxpy is an existing TProfile2D profile with 40 x 40 bins; /// ~~~ {.cpp}; /// hpxpy->Rebin2D(); // merges two bins along the xaxis and yaxis in one; /// // Carefull: previous contents of hpxpy are lost; /// hpxpy->Rebin2D(3,5); // merges 3 bins along the xaxis and 5 bins along the yaxis in one; /// // Carefull: previous contents of hpxpy are lost; /// hpxpy->RebinX(5); //merges five bins along the xaxis in one in hpxpy; /// TProfile2D *hnew = hpxpy->RebinY(5,""hnew""); // creates a new profile hnew; /// // merging 5 bins of hpxpy along the yaxis in one bin; /// ~~~; ///; /// NOTE : If nxgroup/nygroup is not an exact divider of the number of bins,; /// along the xaxis/yaxis the top limit(s) of the rebinned profile; /// is changed to the upper edge of the xbin=newxbins*nxgroup resp.; /// ybin=newybins*nygroup and the remaining bins are added to; /// the overflow bin.; /// Statistics will be recomputed from the new bin contents.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:515,Availability,error,errors,515,"////////////////////////////////////////////////////////////////////////////////; /// Rebin this histogram grouping nxgroup/nygroup bins along the xaxis/yaxis together.; ///; /// if newname is not blank a new profile hnew is created.; /// else the current histogram is modified (default); /// The parameter nxgroup/nygroup indicate how many bins along the xaxis/yaxis of this; /// have to be merged into one bin of hnew; /// If the original profile has errors stored (via Sumw2), the resulting; /// profile has new errors correctly calculated.; ///; /// examples: if hpxpy is an existing TProfile2D profile with 40 x 40 bins; /// ~~~ {.cpp}; /// hpxpy->Rebin2D(); // merges two bins along the xaxis and yaxis in one; /// // Carefull: previous contents of hpxpy are lost; /// hpxpy->Rebin2D(3,5); // merges 3 bins along the xaxis and 5 bins along the yaxis in one; /// // Carefull: previous contents of hpxpy are lost; /// hpxpy->RebinX(5); //merges five bins along the xaxis in one in hpxpy; /// TProfile2D *hnew = hpxpy->RebinY(5,""hnew""); // creates a new profile hnew; /// // merging 5 bins of hpxpy along the yaxis in one bin; /// ~~~; ///; /// NOTE : If nxgroup/nygroup is not an exact divider of the number of bins,; /// along the xaxis/yaxis the top limit(s) of the rebinned profile; /// is changed to the upper edge of the xbin=newxbins*nxgroup resp.; /// ybin=newybins*nygroup and the remaining bins are added to; /// the overflow bin.; /// Statistics will be recomputed from the new bin contents.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:217,Modifiability,variab,variable,217,"////////////////////////////////////////////////////////////////////////////////; /// Save primitive as a C++ statement(s) on output stream out.; ///; /// Note the following restrictions in the code generated:; /// - variable bin size not implemented; /// - SetErrorOption not implemented",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:12,Availability,error,errors,12,"// save bin errors",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:123,Modifiability,variab,variable,123,"////////////////////////////////////////////////////////////////////////////////; /// Redefine x and y axis parameters for variable bin sizes.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:118,Availability,error,errors,118,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile2D errors.; ///; /// The computation of the bin errors is based on the parameter option:; /// - ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Z),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Z is 0 and the number of bin entries is > 0; /// - 's' The bin errors are the standard deviations of the Z bin values; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Z is 0 and the number of bin entries is > 0; /// - 'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in Z is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// - 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements z +/- dz,; /// and the profile is filled with values y and weights z = 1/dz**2; ///; /// See TProfile::BuildOptions for a detailed explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:163,Availability,error,errors,163,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile2D errors.; ///; /// The computation of the bin errors is based on the parameter option:; /// - ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Z),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Z is 0 and the number of bin entries is > 0; /// - 's' The bin errors are the standard deviations of the Z bin values; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Z is 0 and the number of bin entries is > 0; /// - 'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in Z is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// - 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements z +/- dz,; /// and the profile is filled with values y and weights z = 1/dz**2; ///; /// See TProfile::BuildOptions for a detailed explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:233,Availability,error,errors,233,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile2D errors.; ///; /// The computation of the bin errors is based on the parameter option:; /// - ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Z),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Z is 0 and the number of bin entries is > 0; /// - 's' The bin errors are the standard deviations of the Z bin values; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Z is 0 and the number of bin entries is > 0; /// - 'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in Z is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// - 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements z +/- dz,; /// and the profile is filled with values y and weights z = 1/dz**2; ///; /// See TProfile::BuildOptions for a detailed explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:257,Availability,error,error,257,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile2D errors.; ///; /// The computation of the bin errors is based on the parameter option:; /// - ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Z),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Z is 0 and the number of bin entries is > 0; /// - 's' The bin errors are the standard deviations of the Z bin values; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Z is 0 and the number of bin entries is > 0; /// - 'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in Z is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// - 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements z +/- dz,; /// and the profile is filled with values y and weights z = 1/dz**2; ///; /// See TProfile::BuildOptions for a detailed explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:330,Availability,error,error,330,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile2D errors.; ///; /// The computation of the bin errors is based on the parameter option:; /// - ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Z),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Z is 0 and the number of bin entries is > 0; /// - 's' The bin errors are the standard deviations of the Z bin values; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Z is 0 and the number of bin entries is > 0; /// - 'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in Z is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// - 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements z +/- dz,; /// and the profile is filled with values y and weights z = 1/dz**2; ///; /// See TProfile::BuildOptions for a detailed explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:522,Availability,error,errors,522,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile2D errors.; ///; /// The computation of the bin errors is based on the parameter option:; /// - ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Z),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Z is 0 and the number of bin entries is > 0; /// - 's' The bin errors are the standard deviations of the Z bin values; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Z is 0 and the number of bin entries is > 0; /// - 'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in Z is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// - 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements z +/- dz,; /// and the profile is filled with values y and weights z = 1/dz**2; ///; /// See TProfile::BuildOptions for a detailed explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:734,Availability,Error,Errors,734,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile2D errors.; ///; /// The computation of the bin errors is based on the parameter option:; /// - ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Z),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Z is 0 and the number of bin entries is > 0; /// - 's' The bin errors are the standard deviations of the Z bin values; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Z is 0 and the number of bin entries is > 0; /// - 'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in Z is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// - 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements z +/- dz,; /// and the profile is filled with values y and weights z = 1/dz**2; ///; /// See TProfile::BuildOptions for a detailed explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:774,Availability,error,errors,774,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile2D errors.; ///; /// The computation of the bin errors is based on the parameter option:; /// - ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Z),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Z is 0 and the number of bin entries is > 0; /// - 's' The bin errors are the standard deviations of the Z bin values; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Z is 0 and the number of bin entries is > 0; /// - 'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in Z is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// - 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements z +/- dz,; /// and the profile is filled with values y and weights z = 1/dz**2; ///; /// See TProfile::BuildOptions for a detailed explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:905,Availability,error,error,905,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile2D errors.; ///; /// The computation of the bin errors is based on the parameter option:; /// - ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Z),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Z is 0 and the number of bin entries is > 0; /// - 's' The bin errors are the standard deviations of the Z bin values; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Z is 0 and the number of bin entries is > 0; /// - 'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in Z is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// - 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements z +/- dz,; /// and the profile is filled with values y and weights z = 1/dz**2; ///; /// See TProfile::BuildOptions for a detailed explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:940,Availability,Error,Errors,940,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile2D errors.; ///; /// The computation of the bin errors is based on the parameter option:; /// - ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Z),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Z is 0 and the number of bin entries is > 0; /// - 's' The bin errors are the standard deviations of the Z bin values; /// Note that if TProfile::Approximate() is called, an approximation is used when; /// the spread in Z is 0 and the number of bin entries is > 0; /// - 'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in Z is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// - 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements z +/- dz,; /// and the profile is filled with values y and weights z = 1/dz**2; ///; /// See TProfile::BuildOptions for a detailed explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update average.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx:93,Availability,error,error,93,"////////////////////////////////////////////////////////////////////////////////; /// Update error.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update error.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear statistics.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx:16,Deployability,Update,Update,16,"// ------------ Update global (per histo) statistics",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx:16,Deployability,Update,Update,16,"// ------------ Update local (per bin) statistics",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx:16,Deployability,Update,Update,16,"// ------------ Update global (per histo) statistics",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx:16,Deployability,Update,Update,16,"// ------------ Update local (per bin) statistics",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx:101,Availability,error,error,101,"////////////////////////////////////////////////////////////////////////////////; /// Set content to error.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx:94,Availability,error,error,94,"////////////////////////////////////////////////////////////////////////////////; /// Get bin error.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx:531,Usability,simpl,simply,531,"////////////////////////////////////////////////////////////////////////////////; /// Fill the array stats from the contents of this profile.; /// The array stats must be correctly dimensioned in the calling program.; ///; /// - stats[0] = sumw; /// - stats[1] = sumw2; /// - stats[2] = sumwx; /// - stats[3] = sumwx2; /// - stats[4] = sumwy; /// - stats[5] = sumwy2; /// - stats[6] = sumwxy; /// - stats[7] = sumwz; /// - stats[8] = sumwz2; ///; /// If no axis-subrange is specified (via TAxis::SetRange), the array stats; /// is simply a copy of the statistics quantities computed at filling time.; /// If a sub-range is specified, the function recomputes these quantities; /// from the bin contents in the current axis range.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx:3,Usability,Clear,Clears,3,"// Clears bin contents",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx:90,Availability,error,error,90,"////////////////////////////////////////////////////////////////////////////////; /// Set error option.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile2Poly.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:719,Integrability,rout,routines,719,"/** \class TProfile3D; \ingroup Histograms; Profile3D histograms are used to display the mean; value of T and its RMS for each cell in X,Y,Z.; Profile3D histograms are in many cases an; The inter-relation of three measured quantities X, Y, Z and T can always; be visualized by a four-dimensional histogram or scatter-plot;; its representation on the line-printer is not particularly; satisfactory, except for sparse data. If T is an unknown (but single-valued); approximate function of X,Y,Z this function is displayed by a profile3D histogram with; much better precision than by a scatter-plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for cell I, J. 2; H(I,J,K) = sum T E(I,J,K) = sum T; l(I,J,K) = sum l L(I,J,K) = sum l; h(I,J,K) = H(I,J,K)/L(I,J,K) s(I,J,K) = sqrt(E(I,J,K)/L(I,J,K)- h(I,J,K)**2); e(I,J,K) = s(I,J,K)/sqrt(L(I,J,K)). In the special case where s(I,J,K) is zero (eg, case of 1 entry only in one cell); e(I,J,K) is computed from the average of the s(I,J,K) for all cells,; if the static function TProfile3D::Approximate has been called.; This simple/crude approximation was suggested in order to keep the cell; during a fit operation. But note that this approximation is not the default behaviour. Example of a profile3D histogram; ~~~~{.cpp}; {; auto c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; auto hprof3d = new TProfile3D(""hprof3d"",""Profile of pt versus px, py and pz"",40,-4,4,40,-4,4,40,0,20);; Double_t px, py, pz, pt;; TRandom3 r(0);; for ( Int_t i=0; i<25000; i++) {; r.Rannor(px,py);; pz = px*px + py*py;; pt = r.Landau(0,1);; hprof3d->Fill(px,py,pz,pt,1);; }; hprof3d->Draw();; }; ~~~~; NOTE: A TProfile3D is drawn as it was a simple TH3; */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor for Profile3D histograms.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:1185,Usability,simpl,simple,1185,"/** \class TProfile3D; \ingroup Histograms; Profile3D histograms are used to display the mean; value of T and its RMS for each cell in X,Y,Z.; Profile3D histograms are in many cases an; The inter-relation of three measured quantities X, Y, Z and T can always; be visualized by a four-dimensional histogram or scatter-plot;; its representation on the line-printer is not particularly; satisfactory, except for sparse data. If T is an unknown (but single-valued); approximate function of X,Y,Z this function is displayed by a profile3D histogram with; much better precision than by a scatter-plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for cell I, J. 2; H(I,J,K) = sum T E(I,J,K) = sum T; l(I,J,K) = sum l L(I,J,K) = sum l; h(I,J,K) = H(I,J,K)/L(I,J,K) s(I,J,K) = sqrt(E(I,J,K)/L(I,J,K)- h(I,J,K)**2); e(I,J,K) = s(I,J,K)/sqrt(L(I,J,K)). In the special case where s(I,J,K) is zero (eg, case of 1 entry only in one cell); e(I,J,K) is computed from the average of the s(I,J,K) for all cells,; if the static function TProfile3D::Approximate has been called.; This simple/crude approximation was suggested in order to keep the cell; during a fit operation. But note that this approximation is not the default behaviour. Example of a profile3D histogram; ~~~~{.cpp}; {; auto c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; auto hprof3d = new TProfile3D(""hprof3d"",""Profile of pt versus px, py and pz"",40,-4,4,40,-4,4,40,0,20);; Double_t px, py, pz, pt;; TRandom3 r(0);; for ( Int_t i=0; i<25000; i++) {; r.Rannor(px,py);; pz = px*px + py*py;; pt = r.Landau(0,1);; hprof3d->Fill(px,py,pz,pt,1);; }; hprof3d->Draw();; }; ~~~~; NOTE: A TProfile3D is drawn as it was a simple TH3; */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor for Profile3D histograms.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:1803,Usability,simpl,simple,1803,"/** \class TProfile3D; \ingroup Histograms; Profile3D histograms are used to display the mean; value of T and its RMS for each cell in X,Y,Z.; Profile3D histograms are in many cases an; The inter-relation of three measured quantities X, Y, Z and T can always; be visualized by a four-dimensional histogram or scatter-plot;; its representation on the line-printer is not particularly; satisfactory, except for sparse data. If T is an unknown (but single-valued); approximate function of X,Y,Z this function is displayed by a profile3D histogram with; much better precision than by a scatter-plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for cell I, J. 2; H(I,J,K) = sum T E(I,J,K) = sum T; l(I,J,K) = sum l L(I,J,K) = sum l; h(I,J,K) = H(I,J,K)/L(I,J,K) s(I,J,K) = sqrt(E(I,J,K)/L(I,J,K)- h(I,J,K)**2); e(I,J,K) = s(I,J,K)/sqrt(L(I,J,K)). In the special case where s(I,J,K) is zero (eg, case of 1 entry only in one cell); e(I,J,K) is computed from the average of the s(I,J,K) for all cells,; if the static function TProfile3D::Approximate has been called.; This simple/crude approximation was suggested in order to keep the cell; during a fit operation. But note that this approximation is not the default behaviour. Example of a profile3D histogram; ~~~~{.cpp}; {; auto c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; auto hprof3d = new TProfile3D(""hprof3d"",""Profile of pt versus px, py and pz"",40,-4,4,40,-4,4,40,0,20);; Double_t px, py, pz, pt;; TRandom3 r(0);; for ( Int_t i=0; i<25000; i++) {; r.Rannor(px,py);; pz = px*px + py*py;; pt = r.Landau(0,1);; hprof3d->Fill(px,py,pz,pt,1);; }; hprof3d->Draw();; }; ~~~~; NOTE: A TProfile3D is drawn as it was a simple TH3; */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor for Profile3D histograms.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:837,Availability,error,errors,837,"////////////////////////////////////////////////////////////////////////////////; /// Normal Constructor for Profile histograms.; ///; /// The first eleven parameters are similar to TH3D::TH3D.; /// All values of t are accepted at filling time.; /// To fill a profile3D histogram, one must use TProfile3D::Fill function.; ///; /// Note that when filling the profile histogram the function Fill; /// checks if the variable t is between fTmin and fTmax.; /// If a minimum or maximum value is set for the T scale before filling,; /// then all values below tmin or above tmax will be discarded.; /// Setting the minimum or maximum value for the T scale before filling; /// has the same effect as calling the special TProfile3D constructor below; /// where tmin and tmax are specified.; ///; /// H(I,J,K) is printed as the cell contents. The errors computed are s(I,J,K) if CHOPT='S'; /// (spread option), or e(I,J,K) if CHOPT=' ' (error on mean).; ///; /// See TProfile3D::BuildOptions for explanation of parameters; ///; /// see other constructors below with all possible combinations of; /// fix and variable bin size like in TH3D.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:927,Availability,error,error,927,"////////////////////////////////////////////////////////////////////////////////; /// Normal Constructor for Profile histograms.; ///; /// The first eleven parameters are similar to TH3D::TH3D.; /// All values of t are accepted at filling time.; /// To fill a profile3D histogram, one must use TProfile3D::Fill function.; ///; /// Note that when filling the profile histogram the function Fill; /// checks if the variable t is between fTmin and fTmax.; /// If a minimum or maximum value is set for the T scale before filling,; /// then all values below tmin or above tmax will be discarded.; /// Setting the minimum or maximum value for the T scale before filling; /// has the same effect as calling the special TProfile3D constructor below; /// where tmin and tmax are specified.; ///; /// H(I,J,K) is printed as the cell contents. The errors computed are s(I,J,K) if CHOPT='S'; /// (spread option), or e(I,J,K) if CHOPT=' ' (error on mean).; ///; /// See TProfile3D::BuildOptions for explanation of parameters; ///; /// see other constructors below with all possible combinations of; /// fix and variable bin size like in TH3D.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:413,Modifiability,variab,variable,413,"////////////////////////////////////////////////////////////////////////////////; /// Normal Constructor for Profile histograms.; ///; /// The first eleven parameters are similar to TH3D::TH3D.; /// All values of t are accepted at filling time.; /// To fill a profile3D histogram, one must use TProfile3D::Fill function.; ///; /// Note that when filling the profile histogram the function Fill; /// checks if the variable t is between fTmin and fTmax.; /// If a minimum or maximum value is set for the T scale before filling,; /// then all values below tmin or above tmax will be discarded.; /// Setting the minimum or maximum value for the T scale before filling; /// has the same effect as calling the special TProfile3D constructor below; /// where tmin and tmax are specified.; ///; /// H(I,J,K) is printed as the cell contents. The errors computed are s(I,J,K) if CHOPT='S'; /// (spread option), or e(I,J,K) if CHOPT=' ' (error on mean).; ///; /// See TProfile3D::BuildOptions for explanation of parameters; ///; /// see other constructors below with all possible combinations of; /// fix and variable bin size like in TH3D.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:1098,Modifiability,variab,variable,1098,"////////////////////////////////////////////////////////////////////////////////; /// Normal Constructor for Profile histograms.; ///; /// The first eleven parameters are similar to TH3D::TH3D.; /// All values of t are accepted at filling time.; /// To fill a profile3D histogram, one must use TProfile3D::Fill function.; ///; /// Note that when filling the profile histogram the function Fill; /// checks if the variable t is between fTmin and fTmax.; /// If a minimum or maximum value is set for the T scale before filling,; /// then all values below tmin or above tmax will be discarded.; /// Setting the minimum or maximum value for the T scale before filling; /// has the same effect as calling the special TProfile3D constructor below; /// where tmin and tmax are specified.; ///; /// H(I,J,K) is printed as the cell contents. The errors computed are s(I,J,K) if CHOPT='S'; /// (spread option), or e(I,J,K) if CHOPT=' ' (error on mean).; ///; /// See TProfile3D::BuildOptions for explanation of parameters; ///; /// see other constructors below with all possible combinations of; /// fix and variable bin size like in TH3D.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:112,Modifiability,variab,variable,112,"////////////////////////////////////////////////////////////////////////////////; /// Create a 3-D Profile with variable bins in X , Y and Z.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:385,Availability,error,error,385,"////////////////////////////////////////////////////////////////////////////////; /// Set Profile3D histogram structure and options.; ///; /// - tmin: minimum value allowed for t; /// - tmax: maximum value allowed for t; /// if (tmin = tmax = 0) there are no limits on the allowed t values (tmin = -inf, tmax = +inf); ///; /// - option: this is the option for the computation of the t error of the profile ( TProfile3D::GetBinError ); /// possible values for the options are documented in TProfile3D::SetErrorOption; ///; /// see also TProfile::BuildOptions for a detailed description",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: `this = this + c1*f1` .",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: `this = this + c1*h1` .",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:202,Availability,error,error,202,"////////////////////////////////////////////////////////////////////////////////; /// Set the fgApproximate flag.; ///; /// When the flag is true, the function GetBinError; /// will approximate the bin error with the average profile error on all bins; /// in the following situation only; ///; /// - the number of bins in the profile3D is less than 10404 (eg 100x100x100); /// - the bin number of entries is small ( <5); /// - the estimated bin error is extremely small compared to the bin content; /// (see TProfile3D::GetBinError)",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:233,Availability,error,error,233,"////////////////////////////////////////////////////////////////////////////////; /// Set the fgApproximate flag.; ///; /// When the flag is true, the function GetBinError; /// will approximate the bin error with the average profile error on all bins; /// in the following situation only; ///; /// - the number of bins in the profile3D is less than 10404 (eg 100x100x100); /// - the bin number of entries is small ( <5); /// - the estimated bin error is extremely small compared to the bin content; /// (see TProfile3D::GetBinError)",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:445,Availability,error,error,445,"////////////////////////////////////////////////////////////////////////////////; /// Set the fgApproximate flag.; ///; /// When the flag is true, the function GetBinError; /// will approximate the bin error with the average profile error on all bins; /// in the following situation only; ///; /// - the number of bins in the profile3D is less than 10404 (eg 100x100x100); /// - the bin number of entries is small ( <5); /// - the estimated bin error is extremely small compared to the bin content; /// (see TProfile3D::GetBinError)",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: `this = this/(c1*f1)` .; ///; /// This function is not implemented",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:88,Availability,error,error,88,"// maintaining the correct sum of weights square is not supported when dividing; // bin error resulting from division of profile needs to be checked",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:97,Availability,error,error,97,"////////////////////////////////////////////////////////////////////////////////; /// Return bin error of a Profile3D histogram.; ///; /// ### Computing errors: A moving field; ///; /// The computation of errors for a TProfile3D has evolved with the versions; /// of ROOT. The difficulty is in computing errors for bins with low statistics.; ///; /// - prior to version 3.10, we had no special treatment of low statistic bins.; /// As a result, these bins had huge errors. The reason is that the; /// expression eprim2 is very close to 0 (rounding problems) or 0.; /// - The algorithm is modified/protected for the case; /// when a TProfile3D is projected (ProjectionX). The previous algorithm; /// generated a N^2 problem when projecting a TProfile3D with a large number of; /// bins (eg 100000).; /// - in version 3.10/02, a new static function TProfile::Approximate; /// is introduced to enable or disable (default) the approximation.; /// (see also comments in TProfile::GetBinError)",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:153,Availability,error,errors,153,"////////////////////////////////////////////////////////////////////////////////; /// Return bin error of a Profile3D histogram.; ///; /// ### Computing errors: A moving field; ///; /// The computation of errors for a TProfile3D has evolved with the versions; /// of ROOT. The difficulty is in computing errors for bins with low statistics.; ///; /// - prior to version 3.10, we had no special treatment of low statistic bins.; /// As a result, these bins had huge errors. The reason is that the; /// expression eprim2 is very close to 0 (rounding problems) or 0.; /// - The algorithm is modified/protected for the case; /// when a TProfile3D is projected (ProjectionX). The previous algorithm; /// generated a N^2 problem when projecting a TProfile3D with a large number of; /// bins (eg 100000).; /// - in version 3.10/02, a new static function TProfile::Approximate; /// is introduced to enable or disable (default) the approximation.; /// (see also comments in TProfile::GetBinError)",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:205,Availability,error,errors,205,"////////////////////////////////////////////////////////////////////////////////; /// Return bin error of a Profile3D histogram.; ///; /// ### Computing errors: A moving field; ///; /// The computation of errors for a TProfile3D has evolved with the versions; /// of ROOT. The difficulty is in computing errors for bins with low statistics.; ///; /// - prior to version 3.10, we had no special treatment of low statistic bins.; /// As a result, these bins had huge errors. The reason is that the; /// expression eprim2 is very close to 0 (rounding problems) or 0.; /// - The algorithm is modified/protected for the case; /// when a TProfile3D is projected (ProjectionX). The previous algorithm; /// generated a N^2 problem when projecting a TProfile3D with a large number of; /// bins (eg 100000).; /// - in version 3.10/02, a new static function TProfile::Approximate; /// is introduced to enable or disable (default) the approximation.; /// (see also comments in TProfile::GetBinError)",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:304,Availability,error,errors,304,"////////////////////////////////////////////////////////////////////////////////; /// Return bin error of a Profile3D histogram.; ///; /// ### Computing errors: A moving field; ///; /// The computation of errors for a TProfile3D has evolved with the versions; /// of ROOT. The difficulty is in computing errors for bins with low statistics.; ///; /// - prior to version 3.10, we had no special treatment of low statistic bins.; /// As a result, these bins had huge errors. The reason is that the; /// expression eprim2 is very close to 0 (rounding problems) or 0.; /// - The algorithm is modified/protected for the case; /// when a TProfile3D is projected (ProjectionX). The previous algorithm; /// generated a N^2 problem when projecting a TProfile3D with a large number of; /// bins (eg 100000).; /// - in version 3.10/02, a new static function TProfile::Approximate; /// is introduced to enable or disable (default) the approximation.; /// (see also comments in TProfile::GetBinError)",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:465,Availability,error,errors,465,"////////////////////////////////////////////////////////////////////////////////; /// Return bin error of a Profile3D histogram.; ///; /// ### Computing errors: A moving field; ///; /// The computation of errors for a TProfile3D has evolved with the versions; /// of ROOT. The difficulty is in computing errors for bins with low statistics.; ///; /// - prior to version 3.10, we had no special treatment of low statistic bins.; /// As a result, these bins had huge errors. The reason is that the; /// expression eprim2 is very close to 0 (rounding problems) or 0.; /// - The algorithm is modified/protected for the case; /// when a TProfile3D is projected (ProjectionX). The previous algorithm; /// generated a N^2 problem when projecting a TProfile3D with a large number of; /// bins (eg 100000).; /// - in version 3.10/02, a new static function TProfile::Approximate; /// is introduced to enable or disable (default) the approximation.; /// (see also comments in TProfile::GetBinError)",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:233,Modifiability,evolve,evolved,233,"////////////////////////////////////////////////////////////////////////////////; /// Return bin error of a Profile3D histogram.; ///; /// ### Computing errors: A moving field; ///; /// The computation of errors for a TProfile3D has evolved with the versions; /// of ROOT. The difficulty is in computing errors for bins with low statistics.; ///; /// - prior to version 3.10, we had no special treatment of low statistic bins.; /// As a result, these bins had huge errors. The reason is that the; /// expression eprim2 is very close to 0 (rounding problems) or 0.; /// - The algorithm is modified/protected for the case; /// when a TProfile3D is projected (ProjectionX). The previous algorithm; /// generated a N^2 problem when projecting a TProfile3D with a large number of; /// bins (eg 100000).; /// - in version 3.10/02, a new static function TProfile::Approximate; /// is introduced to enable or disable (default) the approximation.; /// (see also comments in TProfile::GetBinError)",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:121,Availability,error,errors,121,"////////////////////////////////////////////////////////////////////////////////; /// Return option to compute profile2D errors.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:635,Usability,simpl,simply,635,"////////////////////////////////////////////////////////////////////////////////; /// fill the array stats from the contents of this profile.; ///; /// The array stats must be correctly dimensioned in the calling program.; ///; /// - stats[0] = sumw; /// - stats[1] = sumw2; /// - stats[2] = sumwx; /// - stats[3] = sumwx2; /// - stats[4] = sumwy; /// - stats[5] = sumwy2; /// - stats[6] = sumwxy; /// - stats[7] = sumwz; /// - stats[8] = sumwz2; /// - stats[9] = sumwxz; /// - stats[10]= sumwyz; /// - stats[11]= sumwt; /// - stats[12]= sumwt2; ///; /// If no axis-subrange is specified (via TAxis::SetRange), the array stats; /// is simply a copy of the statistics quantities computed at filling time.; /// If a sub-range is specified, the function recomputes these quantities; /// from the bin contents in the current axis range.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:86,Energy Efficiency,Reduce,Reduce,86,"////////////////////////////////////////////////////////////////////////////////; /// Reduce the number of bins for this axis to the number of bins having a label.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:436,Availability,down,down,436,"////////////////////////////////////////////////////////////////////////////////; /// Set option(s) to draw axis with labels.; ///; /// option might have the following values:; ///; /// - ""a"" sort by alphabetic order; /// - "">"" sort by decreasing values; /// - ""<"" sort by increasing values; /// - ""h"" draw labels horizontal; /// - ""v"" draw labels vertical; /// - ""u"" draw labels up (end of label right adjusted); /// - ""d"" draw labels down (start of label left adjusted)",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:275,Availability,error,errors,275,"////////////////////////////////////////////////////////////////////////////////; /// Merge all histograms in the collection in this histogram.; ///; /// This function computes the min/max for the axes,; /// compute a new number of bins, if necessary,; /// add bin contents, errors and statistics.; /// If overflows are present and limits are different the function will fail.; /// The function returns the total number of entries in the result histogram; /// if the merge is successful, -1 otherwise.; ///; /// IMPORTANT remark. The 2 axis x and y may have different number; /// of bins and different limits, BUT the largest bin width must be; /// a multiple of the smallest bin width and the upper limit must also; /// be a multiple of the bin width.",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs the operation: `this = this*c1*f1` .",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:240,Availability,error,errors,240,"////////////////////////////////////////////////////////////////////////////////; /// Project this profile3D into a 3-D histogram along X,Y,Z.; ///; /// The projection is always of the type TH3D.; ///; /// - if option ""E"" is specified, the errors are computed. (default); /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""E"" is specified the errors of the projected histogram are computed and set; /// to be equal to the errors of the profile.; /// Option ""E"" is defined as the default one in the header file.; /// - if option """" is specified the histogram errors are simply the sqrt of its content; /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""W"" is specified the bin content of the projected histogram is set to the; /// product of the bin content of the profile and the entries.; /// With this option the returned histogram will be equivalent to the one obtained by; /// filling directly a TH2D using the 3-rd value as a weight.; /// This option makes sense only for profile filled with all weights =1.; /// When the profile is weighted (filled with weights different than 1) the; /// bin error of the projected histogram (obtained using this option ""W"") cannot be; /// correctly computed from the information stored in the profile. In that case the; /// obtained histogram contains as bin error square the weighted sum of the square of the; /// profiled observable (TProfile2D::fSumw2[bin] ); ///; /// Note that the axis range is not considered when doing the projection",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:494,Availability,error,errors,494,"////////////////////////////////////////////////////////////////////////////////; /// Project this profile3D into a 3-D histogram along X,Y,Z.; ///; /// The projection is always of the type TH3D.; ///; /// - if option ""E"" is specified, the errors are computed. (default); /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""E"" is specified the errors of the projected histogram are computed and set; /// to be equal to the errors of the profile.; /// Option ""E"" is defined as the default one in the header file.; /// - if option """" is specified the histogram errors are simply the sqrt of its content; /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""W"" is specified the bin content of the projected histogram is set to the; /// product of the bin content of the profile and the entries.; /// With this option the returned histogram will be equivalent to the one obtained by; /// filling directly a TH2D using the 3-rd value as a weight.; /// This option makes sense only for profile filled with all weights =1.; /// When the profile is weighted (filled with weights different than 1) the; /// bin error of the projected histogram (obtained using this option ""W"") cannot be; /// correctly computed from the information stored in the profile. In that case the; /// obtained histogram contains as bin error square the weighted sum of the square of the; /// profiled observable (TProfile2D::fSumw2[bin] ); ///; /// Note that the axis range is not considered when doing the projection",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:554,Availability,error,errors,554,"////////////////////////////////////////////////////////////////////////////////; /// Project this profile3D into a 3-D histogram along X,Y,Z.; ///; /// The projection is always of the type TH3D.; ///; /// - if option ""E"" is specified, the errors are computed. (default); /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""E"" is specified the errors of the projected histogram are computed and set; /// to be equal to the errors of the profile.; /// Option ""E"" is defined as the default one in the header file.; /// - if option """" is specified the histogram errors are simply the sqrt of its content; /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""W"" is specified the bin content of the projected histogram is set to the; /// product of the bin content of the profile and the entries.; /// With this option the returned histogram will be equivalent to the one obtained by; /// filling directly a TH2D using the 3-rd value as a weight.; /// This option makes sense only for profile filled with all weights =1.; /// When the profile is weighted (filled with weights different than 1) the; /// bin error of the projected histogram (obtained using this option ""W"") cannot be; /// correctly computed from the information stored in the profile. In that case the; /// obtained histogram contains as bin error square the weighted sum of the square of the; /// profiled observable (TProfile2D::fSumw2[bin] ); ///; /// Note that the axis range is not considered when doing the projection",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:633,Availability,error,errors,633,"////////////////////////////////////////////////////////////////////////////////; /// Project this profile3D into a 3-D histogram along X,Y,Z.; ///; /// The projection is always of the type TH3D.; ///; /// - if option ""E"" is specified, the errors are computed. (default); /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""E"" is specified the errors of the projected histogram are computed and set; /// to be equal to the errors of the profile.; /// Option ""E"" is defined as the default one in the header file.; /// - if option """" is specified the histogram errors are simply the sqrt of its content; /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""W"" is specified the bin content of the projected histogram is set to the; /// product of the bin content of the profile and the entries.; /// With this option the returned histogram will be equivalent to the one obtained by; /// filling directly a TH2D using the 3-rd value as a weight.; /// This option makes sense only for profile filled with all weights =1.; /// When the profile is weighted (filled with weights different than 1) the; /// bin error of the projected histogram (obtained using this option ""W"") cannot be; /// correctly computed from the information stored in the profile. In that case the; /// obtained histogram contains as bin error square the weighted sum of the square of the; /// profiled observable (TProfile2D::fSumw2[bin] ); ///; /// Note that the axis range is not considered when doing the projection",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:769,Availability,error,errors,769,"////////////////////////////////////////////////////////////////////////////////; /// Project this profile3D into a 3-D histogram along X,Y,Z.; ///; /// The projection is always of the type TH3D.; ///; /// - if option ""E"" is specified, the errors are computed. (default); /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""E"" is specified the errors of the projected histogram are computed and set; /// to be equal to the errors of the profile.; /// Option ""E"" is defined as the default one in the header file.; /// - if option """" is specified the histogram errors are simply the sqrt of its content; /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""W"" is specified the bin content of the projected histogram is set to the; /// product of the bin content of the profile and the entries.; /// With this option the returned histogram will be equivalent to the one obtained by; /// filling directly a TH2D using the 3-rd value as a weight.; /// This option makes sense only for profile filled with all weights =1.; /// When the profile is weighted (filled with weights different than 1) the; /// bin error of the projected histogram (obtained using this option ""W"") cannot be; /// correctly computed from the information stored in the profile. In that case the; /// obtained histogram contains as bin error square the weighted sum of the square of the; /// profiled observable (TProfile2D::fSumw2[bin] ); ///; /// Note that the axis range is not considered when doing the projection",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:1034,Availability,error,errors,1034,"////////////////////////////////////////////////////////////////////////////////; /// Project this profile3D into a 3-D histogram along X,Y,Z.; ///; /// The projection is always of the type TH3D.; ///; /// - if option ""E"" is specified, the errors are computed. (default); /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""E"" is specified the errors of the projected histogram are computed and set; /// to be equal to the errors of the profile.; /// Option ""E"" is defined as the default one in the header file.; /// - if option """" is specified the histogram errors are simply the sqrt of its content; /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""W"" is specified the bin content of the projected histogram is set to the; /// product of the bin content of the profile and the entries.; /// With this option the returned histogram will be equivalent to the one obtained by; /// filling directly a TH2D using the 3-rd value as a weight.; /// This option makes sense only for profile filled with all weights =1.; /// When the profile is weighted (filled with weights different than 1) the; /// bin error of the projected histogram (obtained using this option ""W"") cannot be; /// correctly computed from the information stored in the profile. In that case the; /// obtained histogram contains as bin error square the weighted sum of the square of the; /// profiled observable (TProfile2D::fSumw2[bin] ); ///; /// Note that the axis range is not considered when doing the projection",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:1521,Availability,error,error,1521,"////////////////////////////////////////////////////////////////////////////////; /// Project this profile3D into a 3-D histogram along X,Y,Z.; ///; /// The projection is always of the type TH3D.; ///; /// - if option ""E"" is specified, the errors are computed. (default); /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""E"" is specified the errors of the projected histogram are computed and set; /// to be equal to the errors of the profile.; /// Option ""E"" is defined as the default one in the header file.; /// - if option """" is specified the histogram errors are simply the sqrt of its content; /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""W"" is specified the bin content of the projected histogram is set to the; /// product of the bin content of the profile and the entries.; /// With this option the returned histogram will be equivalent to the one obtained by; /// filling directly a TH2D using the 3-rd value as a weight.; /// This option makes sense only for profile filled with all weights =1.; /// When the profile is weighted (filled with weights different than 1) the; /// bin error of the projected histogram (obtained using this option ""W"") cannot be; /// correctly computed from the information stored in the profile. In that case the; /// obtained histogram contains as bin error square the weighted sum of the square of the; /// profiled observable (TProfile2D::fSumw2[bin] ); ///; /// Note that the axis range is not considered when doing the projection",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:1722,Availability,error,error,1722,"////////////////////////////////////////////////////////////////////////////////; /// Project this profile3D into a 3-D histogram along X,Y,Z.; ///; /// The projection is always of the type TH3D.; ///; /// - if option ""E"" is specified, the errors are computed. (default); /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""E"" is specified the errors of the projected histogram are computed and set; /// to be equal to the errors of the profile.; /// Option ""E"" is defined as the default one in the header file.; /// - if option """" is specified the histogram errors are simply the sqrt of its content; /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""W"" is specified the bin content of the projected histogram is set to the; /// product of the bin content of the profile and the entries.; /// With this option the returned histogram will be equivalent to the one obtained by; /// filling directly a TH2D using the 3-rd value as a weight.; /// This option makes sense only for profile filled with all weights =1.; /// When the profile is weighted (filled with weights different than 1) the; /// bin error of the projected histogram (obtained using this option ""W"") cannot be; /// correctly computed from the information stored in the profile. In that case the; /// obtained histogram contains as bin error square the weighted sum of the square of the; /// profiled observable (TProfile2D::fSumw2[bin] ); ///; /// Note that the axis range is not considered when doing the projection",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:780,Usability,simpl,simply,780,"////////////////////////////////////////////////////////////////////////////////; /// Project this profile3D into a 3-D histogram along X,Y,Z.; ///; /// The projection is always of the type TH3D.; ///; /// - if option ""E"" is specified, the errors are computed. (default); /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""E"" is specified the errors of the projected histogram are computed and set; /// to be equal to the errors of the profile.; /// Option ""E"" is defined as the default one in the header file.; /// - if option """" is specified the histogram errors are simply the sqrt of its content; /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""W"" is specified the bin content of the projected histogram is set to the; /// product of the bin content of the profile and the entries.; /// With this option the returned histogram will be equivalent to the one obtained by; /// filling directly a TH2D using the 3-rd value as a weight.; /// This option makes sense only for profile filled with all weights =1.; /// When the profile is weighted (filled with weights different than 1) the; /// bin error of the projected histogram (obtained using this option ""W"") cannot be; /// correctly computed from the information stored in the profile. In that case the; /// obtained histogram contains as bin error square the weighted sum of the square of the; /// profiled observable (TProfile2D::fSumw2[bin] ); ///; /// Note that the axis range is not considered when doing the projection",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:35,Availability,error,errors,35,"// if option E projected histogram errors are same as profile",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:27,Availability,error,error,27,"// in case of option W bin error is deduced from bin sum of z**2 values of profile; // this is correct only if the profile is unweighted",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:79,Availability,error,error,79,"// in case of bin entries and profile is weighted, we need to set also the bin error",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:1057,Availability,error,error,1057,"////////////////////////////////////////////////////////////////////////////////; /// Project a 3-D profile into a 2D-profile histogram depending on the option parameter.; ///; /// option may contain a combination of the characters x,y,z:; ///; /// - option = ""xy"" return the x versus y projection into a TProfile2D histogram; /// - option = ""yx"" return the y versus x projection into a TProfile2D histogram; /// - option = ""xz"" return the x versus z projection into a TProfile2D histogram; /// - option = ""zx"" return the z versus x projection into a TProfile2D histogram; /// - option = ""yz"" return the y versus z projection into a TProfile2D histogram; /// - option = ""zy"" return the z versus y projection into a TProfile2D histogram; ///; /// NB: the notation ""a vs b"" means ""a"" vertical and ""b"" horizontal along X; ///; /// The resulting profile contains the combination of all the considered bins along X; /// By default, all bins are included considering also underflow/overflows; ///; /// The option can also be used to specify the projected profile error type.; /// Values which can be used are 's', 'i', or 'g'. See TProfile::BuildOptions for details; ///; /// To select a bin range along an axis, use TAxis::SetRange, eg; /// `h3.GetYaxis()->SetRange(23,56);`",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:136,Integrability,depend,depending,136,"////////////////////////////////////////////////////////////////////////////////; /// Project a 3-D profile into a 2D-profile histogram depending on the option parameter.; ///; /// option may contain a combination of the characters x,y,z:; ///; /// - option = ""xy"" return the x versus y projection into a TProfile2D histogram; /// - option = ""yx"" return the y versus x projection into a TProfile2D histogram; /// - option = ""xz"" return the x versus z projection into a TProfile2D histogram; /// - option = ""zx"" return the z versus x projection into a TProfile2D histogram; /// - option = ""yz"" return the y versus z projection into a TProfile2D histogram; /// - option = ""zy"" return the z versus y projection into a TProfile2D histogram; ///; /// NB: the notation ""a vs b"" means ""a"" vertical and ""b"" horizontal along X; ///; /// The resulting profile contains the combination of all the considered bins along X; /// By default, all bins are included considering also underflow/overflows; ///; /// The option can also be used to specify the projected profile error type.; /// Values which can be used are 's', 'i', or 'g'. See TProfile::BuildOptions for details; ///; /// To select a bin range along an axis, use TAxis::SetRange, eg; /// `h3.GetYaxis()->SetRange(23,56);`",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:24,Modifiability,variab,variable,24,"// assume all axis have variable bins or have fixed bins",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:73,Availability,error,error,73,"// note that h3dW is always a weighted histogram - so we need to compute error in the projection",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:47,Availability,error,errors,47,"// sum of weight squares are stored to compute errors in h1N histogram",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:457,Availability,error,errors,457,"////////////////////////////////////////////////////////////////////////////////; /// Profile histogram is resized along axis such that x is in the axis range.; /// The new axis limits are recomputed by doubling iteratively; /// the current axis range until the specified value x is within the limits.; /// The algorithm makes a copy of the histogram, then loops on all bins; /// of the old histogram to fill the rebinned histogram.; /// Takes into account errors (Sumw2) if any.; /// The axis must be rebinnable before invoking this function.; /// Ex: `h->GetXaxis()->SetCanExtend(kTRUE)`",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:217,Modifiability,variab,variable,217,"////////////////////////////////////////////////////////////////////////////////; /// Save primitive as a C++ statement(s) on output stream out.; ///; /// Note the following restrictions in the code generated:; /// - variable bin size not implemented; /// - SetErrorOption not implemented",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:12,Availability,error,errors,12,"// save bin errors",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:127,Modifiability,variab,variable,127,"////////////////////////////////////////////////////////////////////////////////; /// Redefine x, y and z axis parameters with variable bin sizes",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:118,Availability,error,errors,118,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile3D errors.; ///; /// The computation of the bin errors is based on the parameter option:; /// - ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (T),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile3D::Approximate() is called, an approximation is used when; /// the spread in T is 0 and the number of bin entries is > 0; /// - 's' The bin errors are the standard deviations of the T bin values; /// Note that if TProfile3D::Approximate() is called, an approximation is used when; /// the spread in T is 0 and the number of bin entries is > 0; /// - 'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in T is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// - 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements t +/- dt,; /// and the profile is filled with values t and weights w = 1/dt**2; ///; /// See TProfile::BuildOptions for explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:163,Availability,error,errors,163,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile3D errors.; ///; /// The computation of the bin errors is based on the parameter option:; /// - ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (T),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile3D::Approximate() is called, an approximation is used when; /// the spread in T is 0 and the number of bin entries is > 0; /// - 's' The bin errors are the standard deviations of the T bin values; /// Note that if TProfile3D::Approximate() is called, an approximation is used when; /// the spread in T is 0 and the number of bin entries is > 0; /// - 'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in T is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// - 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements t +/- dt,; /// and the profile is filled with values t and weights w = 1/dt**2; ///; /// See TProfile::BuildOptions for explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:233,Availability,error,errors,233,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile3D errors.; ///; /// The computation of the bin errors is based on the parameter option:; /// - ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (T),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile3D::Approximate() is called, an approximation is used when; /// the spread in T is 0 and the number of bin entries is > 0; /// - 's' The bin errors are the standard deviations of the T bin values; /// Note that if TProfile3D::Approximate() is called, an approximation is used when; /// the spread in T is 0 and the number of bin entries is > 0; /// - 'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in T is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// - 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements t +/- dt,; /// and the profile is filled with values t and weights w = 1/dt**2; ///; /// See TProfile::BuildOptions for explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:257,Availability,error,error,257,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile3D errors.; ///; /// The computation of the bin errors is based on the parameter option:; /// - ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (T),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile3D::Approximate() is called, an approximation is used when; /// the spread in T is 0 and the number of bin entries is > 0; /// - 's' The bin errors are the standard deviations of the T bin values; /// Note that if TProfile3D::Approximate() is called, an approximation is used when; /// the spread in T is 0 and the number of bin entries is > 0; /// - 'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in T is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// - 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements t +/- dt,; /// and the profile is filled with values t and weights w = 1/dt**2; ///; /// See TProfile::BuildOptions for explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:330,Availability,error,error,330,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile3D errors.; ///; /// The computation of the bin errors is based on the parameter option:; /// - ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (T),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile3D::Approximate() is called, an approximation is used when; /// the spread in T is 0 and the number of bin entries is > 0; /// - 's' The bin errors are the standard deviations of the T bin values; /// Note that if TProfile3D::Approximate() is called, an approximation is used when; /// the spread in T is 0 and the number of bin entries is > 0; /// - 'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in T is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// - 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements t +/- dt,; /// and the profile is filled with values t and weights w = 1/dt**2; ///; /// See TProfile::BuildOptions for explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:524,Availability,error,errors,524,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile3D errors.; ///; /// The computation of the bin errors is based on the parameter option:; /// - ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (T),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile3D::Approximate() is called, an approximation is used when; /// the spread in T is 0 and the number of bin entries is > 0; /// - 's' The bin errors are the standard deviations of the T bin values; /// Note that if TProfile3D::Approximate() is called, an approximation is used when; /// the spread in T is 0 and the number of bin entries is > 0; /// - 'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in T is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// - 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements t +/- dt,; /// and the profile is filled with values t and weights w = 1/dt**2; ///; /// See TProfile::BuildOptions for explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:738,Availability,Error,Errors,738,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile3D errors.; ///; /// The computation of the bin errors is based on the parameter option:; /// - ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (T),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile3D::Approximate() is called, an approximation is used when; /// the spread in T is 0 and the number of bin entries is > 0; /// - 's' The bin errors are the standard deviations of the T bin values; /// Note that if TProfile3D::Approximate() is called, an approximation is used when; /// the spread in T is 0 and the number of bin entries is > 0; /// - 'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in T is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// - 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements t +/- dt,; /// and the profile is filled with values t and weights w = 1/dt**2; ///; /// See TProfile::BuildOptions for explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:778,Availability,error,errors,778,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile3D errors.; ///; /// The computation of the bin errors is based on the parameter option:; /// - ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (T),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile3D::Approximate() is called, an approximation is used when; /// the spread in T is 0 and the number of bin entries is > 0; /// - 's' The bin errors are the standard deviations of the T bin values; /// Note that if TProfile3D::Approximate() is called, an approximation is used when; /// the spread in T is 0 and the number of bin entries is > 0; /// - 'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in T is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// - 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements t +/- dt,; /// and the profile is filled with values t and weights w = 1/dt**2; ///; /// See TProfile::BuildOptions for explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:909,Availability,error,error,909,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile3D errors.; ///; /// The computation of the bin errors is based on the parameter option:; /// - ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (T),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile3D::Approximate() is called, an approximation is used when; /// the spread in T is 0 and the number of bin entries is > 0; /// - 's' The bin errors are the standard deviations of the T bin values; /// Note that if TProfile3D::Approximate() is called, an approximation is used when; /// the spread in T is 0 and the number of bin entries is > 0; /// - 'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in T is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// - 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements t +/- dt,; /// and the profile is filled with values t and weights w = 1/dt**2; ///; /// See TProfile::BuildOptions for explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:944,Availability,Error,Errors,944,"////////////////////////////////////////////////////////////////////////////////; /// Set option to compute profile3D errors.; ///; /// The computation of the bin errors is based on the parameter option:; /// - ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (T),; /// i.e. the standard error of the bin contents.; /// Note that if TProfile3D::Approximate() is called, an approximation is used when; /// the spread in T is 0 and the number of bin entries is > 0; /// - 's' The bin errors are the standard deviations of the T bin values; /// Note that if TProfile3D::Approximate() is called, an approximation is used when; /// the spread in T is 0 and the number of bin entries is > 0; /// - 'i' Errors are as in default case (standard errors of the bin contents); /// The only difference is for the case when the spread in T is zero.; /// In this case for N > 0 the error is 1./SQRT(12.*N); /// - 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; /// W is the sum in the bin of the weights of the profile.; /// This option is for combining measurements t +/- dt,; /// and the profile is filled with values t and weights w = 1/dt**2; ///; /// See TProfile::BuildOptions for explanation of all options",MatchSource.CODE_COMMENT,hist/hist/src/TProfile3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h:3,Performance,Perform,Performs,3,"// Performs the operation: this = c1*h1 + c2*h2",MatchSource.CODE_COMMENT,hist/hist/src/TProfileHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h:180,Availability,error,errors,180,"//Merge all histograms in the collection in this histogram.; //This function computes the min/max for the axes,; //compute a new number of bins, if necessary,; //add bin contents, errors and statistics.; //If overflows are present and limits are different the function will fail.; //The function returns the total number of entries in the result histogram; //if the merge is successful, -1 otherwise.; //; //IMPORTANT remark. The 2 axis x and y may have different number; //of bins and different limits, BUT the largest bin width must be; //a multiple of the smallest bin width and the upper limit must also; //be a multiple of the bin width.",MatchSource.CODE_COMMENT,hist/hist/src/TProfileHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h:152,Performance,perform,perform,152,"// In the case of histogram with different limits; // newX(Y)Axis will now have the new found limits; // but one needs first to clone this histogram to perform the merge; // The clone is not needed when all histograms have the same limits",MatchSource.CODE_COMMENT,hist/hist/src/TProfileHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h:25,Availability,error,errors,25,"//merge bin contents and errors",MatchSource.CODE_COMMENT,hist/hist/src/TProfileHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h:52,Modifiability,extend,extend,52,"// reset, otherwise setting the under/overflow will extend the axis",MatchSource.CODE_COMMENT,hist/hist/src/TProfileHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h:369,Availability,error,errors,369,"// Profile histogram is resized along axis such that x is in the axis range.; // The new axis limits are recomputed by doubling iteratively; // the current axis range until the specified value x is within the limits.; // The algorithm makes a copy of the histogram, then loops on all bins; // of the old histogram to fill the extended histogram.; // Takes into account errors (Sumw2) if any.; // The axis must be extendable before invoking this function.; // Ex: h->GetXaxis()->SetCanExtend(kTRUE)",MatchSource.CODE_COMMENT,hist/hist/src/TProfileHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h:326,Modifiability,extend,extended,326,"// Profile histogram is resized along axis such that x is in the axis range.; // The new axis limits are recomputed by doubling iteratively; // the current axis range until the specified value x is within the limits.; // The algorithm makes a copy of the histogram, then loops on all bins; // of the old histogram to fill the extended histogram.; // Takes into account errors (Sumw2) if any.; // The axis must be extendable before invoking this function.; // Ex: h->GetXaxis()->SetCanExtend(kTRUE)",MatchSource.CODE_COMMENT,hist/hist/src/TProfileHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h:413,Modifiability,extend,extendable,413,"// Profile histogram is resized along axis such that x is in the axis range.; // The new axis limits are recomputed by doubling iteratively; // the current axis range until the specified value x is within the limits.; // The algorithm makes a copy of the histogram, then loops on all bins; // of the old histogram to fill the extended histogram.; // Takes into account errors (Sumw2) if any.; // The axis must be extendable before invoking this function.; // Ex: h->GetXaxis()->SetCanExtend(kTRUE)",MatchSource.CODE_COMMENT,hist/hist/src/TProfileHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h:36,Availability,Error,Errors,36,"//reset only Integral, contents and Errors; // need to consider also underflow/overflow in the non-extending axes",MatchSource.CODE_COMMENT,hist/hist/src/TProfileHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h:99,Modifiability,extend,extending,99,"//reset only Integral, contents and Errors; // need to consider also underflow/overflow in the non-extending axes",MatchSource.CODE_COMMENT,hist/hist/src/TProfileHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h:3,Usability,clear,clear,3,"// clear array if existing or do nothing",MatchSource.CODE_COMMENT,hist/hist/src/TProfileHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h:3,Energy Efficiency,Reduce,Reduce,3,"// Reduce the number of bins for this axis to the number of bins having a label.; // Works only for the given axis passed in the option; // The method will remove only the extra bins existing after the last ""labeled"" bin.; // Note that if there are ""un-labeled"" bins present between ""labeled"" bins they will not be removed",MatchSource.CODE_COMMENT,hist/hist/src/TProfileHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h:21,Availability,error,error,21,"// reset content and error; //now loop on all old bins and refill excluding underflow/overflow in; // the axis that has the bin doubled",MatchSource.CODE_COMMENT,hist/hist/src/TProfileHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h:15,Availability,error,error,15,"// compute bin error of profile histograms",MatchSource.CODE_COMMENT,hist/hist/src/TProfileHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h:54,Availability,error,error,54,"// in case content y is an integer (so each my has an error +/- 1/sqrt(12); // when the std(y) is zero",MatchSource.CODE_COMMENT,hist/hist/src/TProfileHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h:62,Availability,error,error,62,"// default case : fErrorMode = kERRORMEAN; // return standard error on the mean of y; //if (neff == 0) std::cerr << ""NEFF = 0 for bin "" << bin << "" "" << eprim << "" "" << neff << "" "" << std::endl;",MatchSource.CODE_COMMENT,hist/hist/src/TProfileHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TScatter.cxx:152,Modifiability,variab,variables,152,"////////////////////////////////////////////////////////////////////////////////; /** \class TScatter; \ingroup Graphs; A TScatter is able to draw four variables scatter plot on a single plot. The two first; variables are the x and y position of the markers, the third is mapped on the current; color map and the fourth on the marker size. The following example demonstrates how it works:. Begin_Macro(source); ../../../tutorials/graphs/scatter.C; End_Macro. ### TScatter's plotting options; TScatter can be drawn with the following options:. | Option | Description |; |----------|-------------------------------------------------------------------|; | ""A"" | Produce a new plot with Axis around the graph |. */; ////////////////////////////////////////////////////////////////////////////////; /// TScatter default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TScatter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TScatter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TScatter.cxx:208,Modifiability,variab,variables,208,"////////////////////////////////////////////////////////////////////////////////; /** \class TScatter; \ingroup Graphs; A TScatter is able to draw four variables scatter plot on a single plot. The two first; variables are the x and y position of the markers, the third is mapped on the current; color map and the fourth on the marker size. The following example demonstrates how it works:. Begin_Macro(source); ../../../tutorials/graphs/scatter.C; End_Macro. ### TScatter's plotting options; TScatter can be drawn with the following options:. | Option | Description |; |----------|-------------------------------------------------------------------|; | ""A"" | Produce a new plot with Axis around the graph |. */; ////////////////////////////////////////////////////////////////////////////////; /// TScatter default constructor.",MatchSource.CODE_COMMENT,hist/hist/src/TScatter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TScatter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TScatter.cxx:326,Deployability,release,released,326,"////////////////////////////////////////////////////////////////////////////////; /// Execute action corresponding to one event.; ///; /// This member function is called when a graph is clicked with the locator; ///; /// If Left button clicked on one of the line end points, this point; /// follows the cursor until button is released.; ///; /// if Middle button clicked, the line is moved parallel to itself; /// until the button is released.",MatchSource.CODE_COMMENT,hist/hist/src/TScatter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TScatter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TScatter.cxx:434,Deployability,release,released,434,"////////////////////////////////////////////////////////////////////////////////; /// Execute action corresponding to one event.; ///; /// This member function is called when a graph is clicked with the locator; ///; /// If Left button clicked on one of the line end points, this point; /// follows the cursor until button is released.; ///; /// if Middle button clicked, the line is moved parallel to itself; /// until the button is released.",MatchSource.CODE_COMMENT,hist/hist/src/TScatter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TScatter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TScatter.cxx:139,Safety,avoid,avoid,139,"// do not add the histogram to gDirectory; // use local TDirectory::TContect that will set temporarly gDirectory to a nullptr and; // will avoid that histogram is added in the global directory",MatchSource.CODE_COMMENT,hist/hist/src/TScatter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TScatter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TScatter.cxx:102,Availability,error,errors,102,"////////////////////////////////////////////////////////////////////////////////; /// Print graph and errors values.",MatchSource.CODE_COMMENT,hist/hist/src/TScatter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TScatter.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx:6,Testability,log,logx,6,"// if logx, we must bin in logx and not in x !!!; // otherwise if several decades, one gets crazy results",MatchSource.CODE_COMMENT,hist/hist/src/TSpline.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx:27,Testability,log,logx,27,"// if logx, we must bin in logx and not in x !!!; // otherwise if several decades, one gets crazy results",MatchSource.CODE_COMMENT,hist/hist/src/TSpline.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx:289,Modifiability,variab,variables,289,"////////////////////////////////////////////////////////////////////////////////; /// Test method for TSpline5; ///; /// ~~~ {.cpp}; /// n number of data points.; /// m 2*m-1 is order of spline.; /// m = 2 always for third spline.; /// nn,nm1,mm,; /// mm1,i,k,; /// j,jj temporary integer variables.; /// z,p temporary double precision variables.; /// x[n] the sequence of knots.; /// y[n] the prescribed function values at the knots.; /// a[200][4] two dimensional array whose columns are; /// the computed spline coefficients; /// diff[3] maximum values of differences of values and; /// derivatives to right and left of knots.; /// com[3] maximum values of coefficients.; /// ~~~; ///; /// test of TSpline3 with non equidistant knots and; /// equidistant knots follows.",MatchSource.CODE_COMMENT,hist/hist/src/TSpline.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx:336,Modifiability,variab,variables,336,"////////////////////////////////////////////////////////////////////////////////; /// Test method for TSpline5; ///; /// ~~~ {.cpp}; /// n number of data points.; /// m 2*m-1 is order of spline.; /// m = 2 always for third spline.; /// nn,nm1,mm,; /// mm1,i,k,; /// j,jj temporary integer variables.; /// z,p temporary double precision variables.; /// x[n] the sequence of knots.; /// y[n] the prescribed function values at the knots.; /// a[200][4] two dimensional array whose columns are; /// the computed spline coefficients; /// diff[3] maximum values of differences of values and; /// derivatives to right and left of knots.; /// com[3] maximum values of coefficients.; /// ~~~; ///; /// test of TSpline3 with non equidistant knots and; /// equidistant knots follows.",MatchSource.CODE_COMMENT,hist/hist/src/TSpline.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test method for TSpline5; ///; /// ~~~ {.cpp}; /// n number of data points.; /// m 2*m-1 is order of spline.; /// m = 2 always for third spline.; /// nn,nm1,mm,; /// mm1,i,k,; /// j,jj temporary integer variables.; /// z,p temporary double precision variables.; /// x[n] the sequence of knots.; /// y[n] the prescribed function values at the knots.; /// a[200][4] two dimensional array whose columns are; /// the computed spline coefficients; /// diff[3] maximum values of differences of values and; /// derivatives to right and left of knots.; /// com[3] maximum values of coefficients.; /// ~~~; ///; /// test of TSpline3 with non equidistant knots and; /// equidistant knots follows.",MatchSource.CODE_COMMENT,hist/hist/src/TSpline.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx:693,Testability,test,test,693,"////////////////////////////////////////////////////////////////////////////////; /// Test method for TSpline5; ///; /// ~~~ {.cpp}; /// n number of data points.; /// m 2*m-1 is order of spline.; /// m = 2 always for third spline.; /// nn,nm1,mm,; /// mm1,i,k,; /// j,jj temporary integer variables.; /// z,p temporary double precision variables.; /// x[n] the sequence of knots.; /// y[n] the prescribed function values at the knots.; /// a[200][4] two dimensional array whose columns are; /// the computed spline coefficients; /// diff[3] maximum values of differences of values and; /// derivatives to right and left of knots.; /// com[3] maximum values of coefficients.; /// ~~~; ///; /// test of TSpline3 with non equidistant knots and; /// equidistant knots follows.",MatchSource.CODE_COMMENT,hist/hist/src/TSpline.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx:27,Availability,error,errors,27,"// Correction for rounding errors",MatchSource.CODE_COMMENT,hist/hist/src/TSpline.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx:30,Safety,sanity check,sanity check,30,"//; // This could be removed, sanity check",MatchSource.CODE_COMMENT,hist/hist/src/TSpline.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx:204,Usability,guid,guide,204,"////////////////////////////////////////////////////////////////////////////////; /// Build coefficients.; ///; /// ~~~ {.cpp}; /// subroutine cubspl ( tau, c, n, ibcbeg, ibcend ); /// from * a practical guide to splines * by c. de boor; /// ************************ input ***************************; /// n = number of data points. assumed to be .ge. 2.; /// (tau(i), c(1,i), i=1,...,n) = abscissae and ordinates of the; /// data points. tau is assumed to be strictly increasing.; /// ibcbeg, ibcend = boundary condition indicators, and; /// c(2,1), c(2,n) = boundary condition information. specifically,; /// ibcbeg = 0 means no boundary condition at tau(1) is given.; /// in this case, the not-a-knot condition is used, i.e. the; /// jump in the third derivative across tau(2) is forced to; /// zero, thus the first and the second cubic polynomial pieces; /// are made to coincide.); /// ibcbeg = 1 means that the slope at tau(1) is made to equal; /// c(2,1), supplied by input.; /// ibcbeg = 2 means that the second derivative at tau(1) is; /// made to equal c(2,1), supplied by input.; /// ibcend = 0, 1, or 2 has analogous meaning concerning the; /// boundary condition at tau(n), with the additional infor-; /// mation taken from c(2,n).; /// *********************** output **************************; /// c(j,i), j=1,...,4; i=1,...,l (= n-1) = the polynomial coefficients; /// of the cubic interpolating spline with interior knots (or; /// joints) tau(2), ..., tau(n-1). precisely, in the interval; /// (tau(i), tau(i+1)), the spline f is given by; /// f(x) = c(1,i)+h*(c(2,i)+h*(c(3,i)+h*c(4,i)/3.)/2.); /// where h = x - tau(i). the function program *ppvalu* may be; /// used to evaluate f or its derivatives from tau,c, l = n-1,; /// and k=4.; /// ~~~",MatchSource.CODE_COMMENT,hist/hist/src/TSpline.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx:26,Safety,sanity check,sanity check,26,"// This could be removed, sanity check",MatchSource.CODE_COMMENT,hist/hist/src/TSpline.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx
https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx:914,Deployability,continuous,continuous,914,"////////////////////////////////////////////////////////////////////////////////; /// Algorithm 600, collected algorithms from acm.; ///; /// algorithm appeared in acm-trans. math. software, vol.9, no. 2,; /// jun., 1983, p. 258-259.; ///; /// TSpline5 computes the coefficients of a quintic natural quintic spli; /// s(x) with knots x(i) interpolating there to given function values:; /// ~~~ {.cpp}; /// s(x(i)) = y(i) for i = 1,2, ..., n.; /// ~~~; /// in each interval (x(i),x(i+1)) the spline function s(xx) is a; /// polynomial of fifth degree:; /// ~~~ {.cpp}; /// s(xx) = ((((f(i)*p+e(i))*p+d(i))*p+c(i))*p+b(i))*p+y(i) (*); /// = ((((-f(i)*q+e(i+1))*q-d(i+1))*q+c(i+1))*q-b(i+1))*q+y(i+1); /// ~~~; /// where p = xx - x(i) and q = x(i+1) - xx.; /// (note the first subscript in the second expression.); /// the different polynomials are pieced together so that s(x) and; /// its derivatives up to s"""" are continuous.; ///; /// ### input:; ///; /// n number of data points, (at least three, i.e. n > 2); /// x(1:n) the strictly increasing or decreasing sequence of; /// knots. the spacing must be such that the fifth power; /// of x(i+1) - x(i) can be formed without overflow or; /// underflow of exponents.; /// y(1:n) the prescribed function values at the knots.; ///; /// ### output:; ///; /// b,c,d,e,f the computed spline coefficients as in (*).; /// (1:n) specifically; /// b(i) = s'(x(i)), c(i) = s""(x(i))/2, d(i) = s""'(x(i))/6,; /// e(i) = s""""(x(i))/24, f(i) = s""""'(x(i))/120.; /// f(n) is neither used nor altered. the five arrays; /// b,c,d,e,f must always be distinct.; ///; /// ### option:; ///; /// it is possible to specify values for the first and second; /// derivatives of the spline function at arbitrarily many knots.; /// this is done by relaxing the requirement that the sequence of; /// knots be strictly increasing or decreasing. specifically:; ///; /// ~~~ {.cpp}; /// if x(j) = x(j+1) then s(x(j)) = y(j) and s'(x(j)) = y(j+1),; /// if x(j) = x(j+1) = x(j+2) then in a",MatchSource.CODE_COMMENT,hist/hist/src/TSpline.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx
